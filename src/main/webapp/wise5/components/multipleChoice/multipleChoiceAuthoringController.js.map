{"version":3,"sources":["multipleChoiceAuthoringController.es6"],"names":["MultipleChoiceAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","targetObject","authoringViewComponentChanged","hide","showAdvancedAuthoring","choices","show","componentHasFeedback","setShowSubmitButtonValue","c","length","choice","feedback","isCorrect","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","newChoice","id","generateKey","push","choiceId","answer","confirm","tempChoiceId","splice","getAuthoringChoices","showFeedback","feedbackToShow","html","removeAbsoluteAssetPaths","insertWISELinks","$emit","params","isPopup","$broadcast","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponents","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","copyChoiceTypeAndChoicesFromConnectedComponent","index","connectedComponentType","getComponentByNodeIdAndComponentId","copyChoiceTypeFromComponent","copyChoicesFromComponent","choiceType","getCopyOfChoicesFromComponent","makeCopyOfJSONObject","componentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"multipleChoiceAuthoringController.js","sourcesContent":["'use strict';\n\nimport MultipleChoiceController from \"./multipleChoiceController\";\n\nclass MultipleChoiceAuthoringController extends MultipleChoiceController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              MultipleChoiceService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      MultipleChoiceService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'MultipleChoice'\n      }\n    ];\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              if (args.target == 'prompt' || args.target == 'rubric') {\n                var summernoteId = '';\n\n                if (args.target == 'prompt') {\n                  // the target is the summernote prompt element\n                  summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                } else if (args.target == 'rubric') {\n                  // the target is the summernote rubric element\n                  summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                }\n\n                if (summernoteId != '') {\n                  if (this.UtilService.isImage(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // add the image html\n                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                  } else if (this.UtilService.isVideo(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // insert the video element\n                    var videoElement = document.createElement('video');\n                    videoElement.controls = 'true';\n                    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                  }\n                }\n              } else if (args.target == 'choice') {\n                // the target is a choice\n\n                /*\n                 * get the target object which should be a\n                 * choice object\n                 */\n                var targetObject = args.targetObject;\n\n                if (targetObject != null) {\n\n                  // create the img html\n                  var text = '<img src=\"' + fileName + '\"/>';\n\n                  // set the html into the choice text\n                  targetObject.text = text;\n\n                  // save the component\n                  this.authoringViewComponentChanged();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * Get the available choices from component content\n   * @return the available choices from the component content\n   */\n  getAuthoringChoices() {\n    var choices = null;\n\n    // get the component content\n    var authoringComponentContent = this.authoringComponentContent;\n\n    if (authoringComponentContent != null) {\n\n      // get the choices\n      choices = authoringComponentContent.choices;\n    }\n\n    return choices;\n  };\n\n  /**\n   * The author has changed the feedback so we will enable the submit button\n   */\n  authoringViewFeedbackChanged() {\n\n    var show = true;\n\n    if (this.componentHasFeedback()) {\n      // this component has feedback so we will show the submit button\n      show = true;\n    } else {\n      /*\n       * this component does not have feedback so we will not show the\n       * submit button\n       */\n      show = false;\n    }\n\n    // show or hide the submit button\n    this.setShowSubmitButtonValue(show);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if this component has been authored to have feedback or has a\n   * correct choice\n   * @return whether this component has feedback or has a correct choice\n   */\n  componentHasFeedback() {\n\n    // get the choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n\n          if (choice.feedback != null && choice.feedback != '') {\n            // the choice has feedback\n            return true;\n          }\n\n          if (choice.isCorrect) {\n            // the choice is correct\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // clean up the choices by removing fields injected by the controller during run time\n    //this.cleanUpChoices();\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a choice from within the authoring tool\n   */\n  addChoice() {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    // make the new choice\n    var newChoice = {};\n    newChoice.id = this.UtilService.generateKey(10);\n    newChoice.text = '';\n    newChoice.feedback = '';\n    newChoice.isCorrect = false;\n\n    // add the new choice\n    choices.push(newChoice);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a choice from within the authoring tool\n   * @param choiceId\n   */\n  deleteChoice(choiceId) {\n\n    // ask the author if they are sure they want to delete the choice\n    var answer = confirm(this.$translate('multipleChoice.areYouSureYouWantToDeleteThisChoice'));\n\n    if (answer) {\n      // the author answered yes to delete the choice\n\n      // get the authored choices\n      var choices = this.authoringComponentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            var tempChoiceId = choice.id;\n\n            if (choiceId === tempChoiceId) {\n              // we have found the choice that we want to delete so we will remove it\n              choices.splice(c, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a choice up\n   * @param choiceId the choice to move\n   */\n  moveChoiceUp(choiceId) {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == 0) {\n              /*\n               * the choice is the first choice so we can't move\n               * it up\n               */\n            } else {\n              // we have found the choice that we want to move up\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index back\n              choices.splice(c - 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a choice down\n   * @param choiceId the choice to move\n   */\n  moveChoiceDown(choiceId) {\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == choices.length - 1) {\n              /*\n               * the choice is the last choice so we can't move\n               * it down\n               */\n            } else {\n              // we have found the choice that we want to move down\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index forward\n              choices.splice(c + 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clean up the choice objects. In the authoring tool this is required\n   * because we use the choice objects as ng-model values and inject\n   * fields into the choice objects such as showFeedback and feedbackToShow.\n   */\n  cleanUpChoices() {\n\n    // get the authored choices\n    var choices = this.getAuthoringChoices();\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          // remove the fields we don't want to be saved\n          delete choice.showFeedback;\n          delete choice.feedbackToShow;\n        }\n      }\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * choice\n   * @param choice the choice object to set the image into\n   */\n  chooseChoiceAsset(choice) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'choice';\n    params.targetObject = choice;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n          this.copyChoiceTypeAndChoicesFromConnectedComponent(connectedComponent);\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n      this.copyChoiceTypeAndChoicesFromConnectedComponent(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  copyChoiceTypeAndChoicesFromConnectedComponent(connectedComponent) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    if (this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId).type == \"MultipleChoice\") {\n      this.copyChoiceTypeFromComponent(nodeId, componentId);\n      this.copyChoicesFromComponent(nodeId, componentId);\n    }\n  }\n\n  copyChoiceTypeFromComponent(nodeId, componentId) {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    this.authoringComponentContent.choiceType = component.choiceType;\n  }\n\n  copyChoicesFromComponent(nodeId, componentId) {\n    this.authoringComponentContent.choices = this.getCopyOfChoicesFromComponent(nodeId, componentId);\n  }\n\n  getCopyOfChoicesFromComponent(nodeId, componentId) {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    return this.UtilService.makeCopyOfJSONObject(component.choices);\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nMultipleChoiceAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'MultipleChoiceService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceAuthoringController;\n"]}