{"version":3,"sources":["multipleChoiceController.es6"],"names":["MultipleChoiceController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","showAdvancedAuthoring","showJSONAuthoring","studentChoices","isShowPreviousWork","isCorrect","isSubmit","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","showFeedback","latestAnnotations","submitCounter","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","hasCorrectChoices","componentType","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","getState","action","multipleChoiceController","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","saveFailed","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","targetObject","authoringViewComponentChanged","hide","studentData","choiceIds","getChoiceIdsFromStudentData","isRadio","isCheckbox","showFeedbackForChoiceIds","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","c","length","choiceId","choiceObject","getChoiceById","feedbackToShow","feedback","result","indexOf","x","studentDataChoice","studentDataChoiceId","push","studentDataChanged","category","data","selectedChoiceId","saveComponentEvent","index","splice","choicesAfter","isChoiceType","choiceType","componentContentChoiceType","hideAllFeedback","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","checkAnswer","choices","getChoices","choice","hasFeedback","isCorrectSoFar","isChoiceCorrect","isChoiceChecked","isChecked","correctChoice","correctChoices","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentChoiceObjects","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentChoiceObjects","studentChoiceObject","studentChoiceId","tempChoice","tempChoiceId","tempChoiceText","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","updateChoiceIdsFromImportedWork","s","studentChoice","studentChoiceText","getChoiceByText","show","componentHasFeedback","setShowSubmitButtonValue","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","answer","confirm","getAuthoringChoices","exitListener","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","params","popup","$broadcast","tags","tag","connectedComponents","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedStudentChoices","concat","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","$inject"],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["class MultipleChoiceController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                MultipleChoiceService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.MultipleChoiceService = MultipleChoiceService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // holds the ids of the choices the student has chosen\n        this.studentChoices = [];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // holds whether the student answered correctly if there is a correct answer\n        this.isCorrect = null;\n\n        // whether the latest work was submitted or not\n        this.isSubmit = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether to show the feedback or not\n        this.showFeedback = true;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // whether this component has been authored with a correct answer\n        this.hasCorrectAnswer = false;\n\n        // whether the latest component state was a submit\n        this.isLatestComponentStateSubmit = false;\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'MultipleChoice'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                }.bind(this), true);\n            }\n\n            // check if there is a correct answer\n            this.hasCorrectAnswer = this.hasCorrectChoices();\n\n            this.showFeedback = this.componentContent.showFeedback;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (this.mode == 'student') {\n                if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                    // we will show work from another component\n                    this.handleConnectedComponents();\n                }  else if (this.MultipleChoiceService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                    /*\n                     * the student has work so we will populate the work into this\n                     * component\n                     */\n                    this.setStudentWork(componentState);\n                } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                    // we will import work from another component\n                    this.handleConnectedComponents();\n                } else if (componentState == null) {\n                    // check if we need to import work\n\n                    // check if we need to import work\n                    var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                    var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                    if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                        /*\n                         * check if the node id is in the field that we used to store\n                         * the import previous work node id in\n                         */\n                        importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                    }\n\n                    if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                        /*\n                         * check if the component id is in the field that we used to store\n                         * the import previous work component id in\n                         */\n                        importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                    }\n\n                    if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            if (componentState != null && componentState.isSubmit) {\n                /*\n                 * the latest component state is a submit. this is used to\n                 * determine if we should show the feedback.\n                 */\n                this.isLatestComponentStateSubmit = true;\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the choices and the submit button\n                 */\n                this.isDisabled = true;\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.multipleChoiceController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.multipleChoiceController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.multipleChoiceController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            if (args.target == 'prompt' || args.target == 'rubric') {\n                                var summernoteId = '';\n\n                                if (args.target == 'prompt') {\n                                    // the target is the summernote prompt element\n                                    summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                                } else if (args.target == 'rubric') {\n                                    // the target is the summernote rubric element\n                                    summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                                }\n\n                                if (summernoteId != '') {\n                                    if (this.UtilService.isImage(fileName)) {\n                                        /*\n                                         * move the cursor back to its position when the asset chooser\n                                         * popup was clicked\n                                         */\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\n                                        $('#' + summernoteId).summernote('editor.focus');\n\n                                        // add the image html\n                                        $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                    } else if (this.UtilService.isVideo(fileName)) {\n                                        /*\n                                         * move the cursor back to its position when the asset chooser\n                                         * popup was clicked\n                                         */\n                                        $('#' + summernoteId).summernote('editor.restoreRange');\n                                        $('#' + summernoteId).summernote('editor.focus');\n\n                                        // insert the video element\n                                        var videoElement = document.createElement('video');\n                                        videoElement.controls = 'true';\n                                        videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                        $('#' + summernoteId).summernote('insertNode', videoElement);\n                                    }\n                                }\n                            } else if (args.target == 'choice') {\n                                // the target is a choice\n\n                                /*\n                                 * get the target object which should be a\n                                 * choice object\n                                 */\n                                var targetObject = args.targetObject;\n\n                                if (targetObject != null) {\n\n                                    // create the img html\n                                    var text = \"<img src='\" + fileName + \"'/>\";\n\n                                    // set the html into the choice text\n                                    targetObject.text = text;\n\n                                    // save the component\n                                    this.authoringViewComponentChanged();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the choice ids the student previously chose\n                var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n                // set the choice(s) the student previously chose\n                if (this.isRadio()) {\n                    this.studentChoices = choiceIds[0];\n                } else if (this.isCheckbox()) {\n                    this.studentChoices = choiceIds;\n                }\n\n                if (studentData.isCorrect != null) {\n                    this.isCorrect = studentData.isCorrect;\n                }\n\n                if (this.showFeedback && componentState.isSubmit) {\n                    // the previous work was a submit so we will show the feedback\n                    this.showFeedbackForChoiceIds(choiceIds);\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    showFeedbackForChoiceIds(choiceIds) {\n\n        if (choiceIds != null) {\n            for (var c = 0; c < choiceIds.length; c++) {\n                var choiceId = choiceIds[c];\n\n                var choiceObject = this.getChoiceById(choiceId);\n\n                if (choiceObject != null) {\n                    choiceObject.showFeedback = true;\n                    choiceObject.feedbackToShow = choiceObject.feedback;\n                }\n            }\n        }\n    };\n\n    /**\n     * Determine if the choice id has been checked\n     * @param the choice id to look at\n     * @return whether the choice id was checked\n     */\n    isChecked(choiceId) {\n        var result = false;\n\n        // get the choices the student chose\n        var studentChoices = this.studentChoices;\n\n        if (studentChoices != null) {\n            if (this.isRadio()) {\n                // this is a radio button step\n\n                if (choiceId === studentChoices) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            } else if(this.isCheckbox()) {\n                // this is a checkbox step\n\n                if (studentChoices.indexOf(choiceId) != -1) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the choice ids from the student data\n     * @param studentData an array that contains the objects of the\n     * choices the student chose\n     * @return an array containing the choice id(s) the student chose\n     */\n    getChoiceIdsFromStudentData(studentData) {\n        var choiceIds = [];\n\n        if (studentData != null && studentData.studentChoices != null) {\n\n            // get the choices the student chose\n            var studentChoices = studentData.studentChoices;\n\n            // loop through all the choice objects in the student data\n            for (var x = 0; x < studentChoices.length; x++) {\n                // get a choice object\n                var studentDataChoice = studentChoices[x];\n\n                if (studentDataChoice != null) {\n                    // get the choice id\n                    var studentDataChoiceId = studentDataChoice.id;\n\n                    // add the choice id to our array\n                    choiceIds.push(studentDataChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * The student clicked on one of the radio button choices\n     * @param choiceId the choice id of the radio button the student clicked\n     */\n    radioChoiceSelected(choiceId) {\n        // notify this node that the student choice has changed\n        this.studentDataChanged();\n\n        if (choiceId != null) {\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * The student clicked on one of the check box choices\n     * @param choiceId the choice id of the checkbox the student clicked\n     */\n    toggleSelection(choiceId) {\n\n        if (choiceId != null) {\n            /*\n             * get the array of choice ids that were checked before the\n             * student clicked the most current check box\n             */\n            var studentChoices = this.studentChoices;\n\n            if (studentChoices != null) {\n                /*\n                 * check if the newest check is in the array of checked\n                 * choices\n                 */\n                var index = studentChoices.indexOf(choiceId);\n\n                if (index == -1) {\n                    /*\n                     * the choice was not previously checked so we will add\n                     * the choice id to the array\n                     */\n                    studentChoices.push(choiceId);\n                } else {\n                    /*\n                     * the choice was previously checked so we will remove\n                     * the choice id from the array\n                     */\n                    studentChoices.splice(index, 1);\n                }\n            }\n\n            // notify this node that the student choice has changed\n            this.studentDataChanged();\n\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            data.choicesAfter = studentChoices;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * Check if this multiple choice component is using radio buttons\n     * @return whether this multiple choice component is using radio buttons\n     */\n    isRadio() {\n        return this.isChoiceType('radio');\n    };\n\n    /**\n     * Check if this multiple choice component is using checkboxes\n     * @return whether this multiple choice component is using checkboxes\n     */\n    isCheckbox() {\n        return this.isChoiceType('checkbox');\n    };\n\n    /**\n     * Check if the component is authored to use the given choice type\n     * @param choiceType the choice type ('radio' or 'checkbox')\n     * @return whether the component is authored to use the given\n     * choice type\n     */\n    isChoiceType(choiceType) {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type from the component content\n            var componentContentChoiceType = componentContent.choiceType;\n\n            if (choiceType === componentContentChoiceType) {\n                // the choice type matches\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n        this.isCorrect = null;\n        this.hideAllFeedback();\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // TODO: add confirmation dialog if lock after submit is enabled on this component\n\n            // set saveFailed to true; will be set to false on save success response from server\n            this.saveFailed = true;\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n                    // the student does not have any more chances to submit\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n                    /*\n                     * the student has one more chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                } else if (numberOfSubmitsLeft > 1) {\n                    /*\n                     * the student has more than one chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know it is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // clear the isCorrect value because it will be evaluated again later\n                this.isCorrect = null;\n\n                // hide any previous feedback\n                this.hideAllFeedback();\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the choices and buttons\n                     */\n                    this.isDisabled = true;\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.checkAnswer();\n                    this.isLatestComponentStateSubmit = true;\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Hide all the feedback\n     */\n    hideAllFeedback() {\n\n        // get all the choices\n        var choices = this.getChoices();\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n                // hide all the feedback\n                choice.showFeedback = false;\n            }\n        }\n    };\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    /**\n     * Check the answer the student has submitted and display feedback\n     * for the choices the student has checked\n     */\n    checkAnswer() {\n        var isCorrect = false;\n\n        // check if any correct choices have been authored\n        if (this.hasFeedback() || this.hasCorrectAnswer) {\n\n            var isCorrectSoFar = true;\n\n            // get all the authored choices\n            var choices = this.getChoices();\n\n            // loop through all the choices and check if each should be checked or not\n\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var choiceId = choice.id;\n\n                    // whether the choice is correct\n                    var isChoiceCorrect = choice.isCorrect;\n\n                    if (isChoiceCorrect == null) {\n                        isChoiceCorrect = false;\n                    }\n\n                    // whether the student checked the choice\n                    var isChoiceChecked = this.isChecked(choiceId);\n\n                    if (isChoiceCorrect != isChoiceChecked) {\n                        // the student answered this choice incorrectly\n                        isCorrectSoFar = false;\n                    }\n\n                    // show the feedback if it exists and the student checked it\n                    if (this.showFeedback && isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n                        choice.showFeedback = true;\n                        choice.feedbackToShow = choice.feedback;\n                    }\n                }\n            }\n\n            isCorrect = isCorrectSoFar;\n        }\n\n        if (this.hasCorrectAnswer) {\n            this.isCorrect = isCorrect;\n        }\n    };\n\n    /**\n     * Get the correct choice for a radio button component\n     * @return a choice id string\n     */\n    getCorrectChoice() {\n        var correctChoice = null;\n\n        if (this.componentContent != null) {\n            correctChoice = this.componentContent.correctChoice;\n        }\n\n        return correctChoice;\n    };\n\n    /**\n     * Get the correct choices for a checkbox component\n     * @return an array of correct choice ids\n     */\n    getCorrectChoices() {\n        var correctChoices = null;\n\n        if (this.componentContent != null) {\n            correctChoices = this.componentContent.correctChoices;\n        }\n\n        return correctChoices;\n    };\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n         this.isDirty = true;\n         this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n         this.isSubmitDirty = true;\n         this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n         // clear out the save message\n         this.setSaveMessage('', null);\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        this.isCorrect = null;\n        this.isLatestComponentStateSubmit = false;\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the student choices into the component state\n            studentData.studentChoices = this.getStudentChoiceObjects();\n\n            if (action === 'submit') {\n                /*\n                 * the student has clicked submit or save so we will\n                 * check if the student has chosen all the correct choices.\n                 * the isCorrect value will be stored in this.isCorrect.\n                 */\n                this.checkAnswer();\n\n                if (this.isCorrect != null) {\n                    // set the isCorrect value into the student data\n                    studentData.isCorrect = this.isCorrect;\n                }\n            } else {\n                /*\n                 * the student data has changed but the student has not\n                 * clicked on the submit or save button so we will not\n                 * check the answer yet.\n                 */\n            }\n\n            if (action === 'submit') {\n                if (this.isSubmit) {\n                    // the student submitted this work\n                    componentState.isSubmit = this.isSubmit;\n\n                    /*\n                     * reset the isSubmit value so that the next component state\n                     * doesn't maintain the same value\n                     */\n                    this.isSubmit = false;\n\n                    /*\n                     * the latest component state is a submit. this is used to\n                     * determine if we should show the feedback.\n                     */\n                    this.isLatestComponentStateSubmit = true;\n                }\n            } else if (action === 'save') {\n                /*\n                 * the latest component state is not a submit. this is used to\n                 * determine if we should show the feedback.\n                 */\n                this.isLatestComponentStateSubmit = false;\n            }\n\n            // set the submit counter\n            studentData.submitCounter = this.submitCounter;\n\n            componentState.studentData = studentData;\n\n            // set the component type\n            componentState.componentType = 'MultipleChoice';\n\n            // set the node id\n            componentState.nodeId = this.nodeId;\n\n            // set the component id\n            componentState.componentId = this.componentId;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the choices the student has chosen as objects. The objects\n     * will contain the choice id and the choice text.\n     */\n    getStudentChoiceObjects() {\n        var studentChoiceObjects = [];\n\n        /*\n         * get the choices the student has chosen. this will be an\n         * array of choice ids.\n         */\n        var studentChoices = this.studentChoices;\n        var choiceObject = null;\n        var studentChoiceObject = null;\n\n        if (studentChoices != null) {\n\n            if (this.isRadio()) {\n                // this is a radio button component\n\n                // get the choice object\n                choiceObject = this.getChoiceById(studentChoices);\n\n                if (choiceObject != null) {\n                    // create a student choice object and set the id and text\n                    studentChoiceObject = {};\n                    studentChoiceObject.id = choiceObject.id;\n                    studentChoiceObject.text = choiceObject.text;\n\n                    // add the student choice object to our array\n                    studentChoiceObjects.push(studentChoiceObject);\n                }\n            } else if (this.isCheckbox()) {\n                // this is a checkbox component\n\n                // loop through all the choices the student chose\n                for (var x = 0; x < studentChoices.length; x++) {\n\n                    // get a choice id that the student chose\n                    var studentChoiceId = studentChoices[x];\n\n                    // get the choice object\n                    choiceObject = this.getChoiceById(studentChoiceId);\n\n                    if (choiceObject != null) {\n                        // create a student choice object and set the id and text\n                        studentChoiceObject = {};\n                        studentChoiceObject.id = choiceObject.id;\n                        studentChoiceObject.text = choiceObject.text;\n\n                        // add the student choice object to our array\n                        studentChoiceObjects.push(studentChoiceObject);\n                    }\n                }\n            }\n        }\n\n        return studentChoiceObjects;\n    };\n\n    /**\n     * Check if the component has been authored with a correct choice\n     * @return whether the component has been authored with a correct choice\n     */\n    hasCorrectChoices() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.isCorrect) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if there is any feedback\n     * @returns whether there is any feedback\n     */\n    hasFeedback() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.feedback != null && choice.feedback != '') {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a choice object by choice id\n     * @param choiceId the choice id\n     * @return the choice object with the given choice id\n     */\n    getChoiceById(choiceId) {\n        var choice = null;\n\n        if (choiceId != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice id\n                        var tempChoiceId = tempChoice.id;\n\n                        // check if the choice id matches\n                        if (choiceId === tempChoiceId) {\n                            /*\n                             * the choice id matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    };\n\n    /**\n     * Get a choice by choice text\n     * @param text the choice text\n     * @return the choice with the given text\n     */\n    getChoiceByText(text) {\n\n        var choice = null;\n\n        if (text != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice text\n                        var tempChoiceText = tempChoice.text;\n\n                        // check if the choice text matches\n                        if (text == tempChoiceText) {\n                            /*\n                             * the choice text matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the choice type for this component ('radio' or 'checkbox')\n     * @return the choice type for this component\n     */\n    getChoiceType() {\n        var choiceType = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type\n            choiceType = componentContent.choiceType;\n        }\n\n        return choiceType;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getChoices() {\n        var choices = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the choices\n            choices = componentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getAuthoringChoices() {\n        var choices = null;\n\n        // get the component content\n        var authoringComponentContent = this.authoringComponentContent;\n\n        if (authoringComponentContent != null) {\n\n            // get the choices\n            choices = authoringComponentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * update the choice ids so that it uses the choice ids\n                         * from this component. we need to do this because the choice\n                         * ids are likely to be different. we update the choice ids\n                         * by matching the choice text.\n                         */\n                        this.updateChoiceIdsFromImportedWork(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Update the choice ids to use the choice ids from this component.\n     * We will use the choice text to match the choices.\n     * @param componentState the component state\n     */\n    updateChoiceIdsFromImportedWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the choices the student chose\n                var studentChoices = studentData.studentChoices;\n\n                if (studentChoices != null) {\n\n                    // loop through all the choices the student chose\n                    for (var s = 0; s < studentChoices.length; s++) {\n\n                        // get a choice the student chose\n                        var studentChoice = studentChoices[s];\n\n                        if (studentChoice != null) {\n\n                            // get the choice text\n                            var studentChoiceText = studentChoice.text;\n\n                            // get the choice in this component with the given tetxt\n                            var choice = this.getChoiceByText(studentChoiceText);\n\n                            if (choice != null) {\n\n                                // get the choice id\n                                var choiceId = choice.id;\n\n                                // update the id to have the id from this component\n                                studentChoice.id = choiceId;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Check if this component has been authored to have feedback or has a\n     * correct choice\n     * @return whether this component has feedback or has a correct choice\n     */\n    componentHasFeedback() {\n\n        // get the choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    if (choice.feedback != null && choice.feedback != '') {\n                        // the choice has feedback\n                        return true;\n                    }\n\n                    if (choice.isCorrect) {\n                        // the choice is correct\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * The author has changed the feedback so we will enable the submit button\n     */\n    authoringViewFeedbackChanged() {\n\n        var show = true;\n\n        if (this.componentHasFeedback()) {\n            // this component has feedback so we will show the submit button\n            show = true;\n        } else {\n            /*\n             * this component does not have feedback so we will not show the\n             * submit button\n             */\n            show = false;\n        }\n\n        // show or hide the submit button\n        this.setShowSubmitButtonValue(show);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // clean up the choices by removing fields injected by the controller during run time\n        //this.cleanUpChoices();\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a choice from within the authoring tool\n     */\n    addChoice() {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        // make the new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.text = '';\n        newChoice.feedback = '';\n        newChoice.isCorrect = false;\n\n        // add the new choice\n        choices.push(newChoice);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice from within the authoring tool\n     * @param choiceId\n     */\n    deleteChoice(choiceId) {\n\n        // ask the author if they are sure they want to delete the choice\n        var answer = confirm(this.$translate('multipleChoice.areYouSureYouWantToDeleteThisChoice'));\n\n        if (answer) {\n            // the author answered yes to delete the choice\n\n            // get the authored choices\n            var choices = this.authoringComponentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        var tempChoiceId = choice.id;\n\n                        if (choiceId === tempChoiceId) {\n                            // we have found the choice that we want to delete so we will remove it\n                            choices.splice(c, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a choice up\n     * @param choiceId the choice to move\n     */\n    moveChoiceUp(choiceId) {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n\n                        if (c == 0) {\n                            /*\n                             * the choice is the first choice so we can't move\n                             * it up\n                             */\n                        } else {\n                            // we have found the choice that we want to move up\n\n                            // remove the choice\n                            choices.splice(c, 1);\n\n                            // add the choice one index back\n                            choices.splice(c - 1, 0, choice);\n                        }\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a choice down\n     * @param choiceId the choice to move\n     */\n    moveChoiceDown(choiceId) {\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n\n                        if (c == choices.length - 1) {\n                            /*\n                             * the choice is the last choice so we can't move\n                             * it down\n                             */\n                        } else {\n                            // we have found the choice that we want to move down\n\n                            // remove the choice\n                            choices.splice(c, 1);\n\n                            // add the choice one index forward\n                            choices.splice(c + 1, 0, choice);\n                        }\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Clean up the choice objects. In the authoring tool this is required\n     * because we use the choice objects as ng-model values and inject\n     * fields into the choice objects such as showFeedback and feedbackToShow.\n     */\n    cleanUpChoices() {\n\n        // get the authored choices\n        var choices = this.getAuthoringChoices();\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    // remove the fields we don't want to be saved\n                    delete choice.showFeedback;\n                    delete choice.feedbackToShow;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Show the asset popup to allow the author to choose an image for the\n     * choice\n     * @param choice the choice object to set the image into\n     */\n    chooseChoiceAsset(choice) {\n        // generate the parameters\n        var params = {};\n        params.popup = true;\n        params.nodeId = this.nodeId;\n        params.componentId = this.componentId;\n        params.target = 'choice';\n        params.targetObject = choice;\n\n        // display the asset chooser\n        this.$rootScope.$broadcast('openAssetChooser', params);\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        // create a new component state\n        let mergedComponentState = this.NodeService.createNewComponentState();\n        if (componentStates != null) {\n            let mergedStudentChoices = [];\n            /*\n             * loop through all the component states to accumulate all the\n             * choices the student chose\n             */\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n                    if (studentData != null) {\n                        let studentChoices = studentData.studentChoices;\n                        if (studentChoices != null && studentChoices.length > 0) {\n                            mergedStudentChoices = mergedStudentChoices.concat(studentChoices);\n                        }\n                    }\n                }\n            }\n            if (mergedStudentChoices != null && mergedStudentChoices != '') {\n                mergedComponentState.studentData = {};\n                mergedComponentState.studentData.studentChoices = mergedStudentChoices;\n            }\n        }\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = null;\n        this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Automatically set the component id for the connected component if there\n     * is only one viable option.\n     * @param connectedComponent the connected component object we are authoring\n     */\n    authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n        if (connectedComponent != null) {\n            let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n            if (components != null) {\n                let numberOfAllowedComponents = 0;\n                let allowedComponent = null;\n                for (let component of components) {\n                    if (component != null) {\n                        if (this.isConnectedComponentTypeAllowed(component.type) &&\n                                component.id != this.componentId) {\n                            // we have found a viable component we can connect to\n                            numberOfAllowedComponents += 1;\n                            allowedComponent = component;\n                        }\n                    }\n                }\n\n                if (numberOfAllowedComponents == 1) {\n                    /*\n                     * there is only one viable component to connect to so we\n                     * will use it\n                     */\n                    connectedComponent.componentId = allowedComponent.id;\n                    connectedComponent.type = 'importWork';\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n            connectedComponent.componentId = null;\n            connectedComponent.type = null;\n            this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n};\n\nMultipleChoiceController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'MultipleChoiceService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}