{"version":3,"sources":["multipleChoiceController.es6"],"names":["MultipleChoiceController","$filter","$injector","$q","$scope","ConfigService","MultipleChoiceService","NodeService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","studentChoices","isShowPreviousWork","isCorrect","numberOfAttempts","isSubmit","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","showFeedback","latestAnnotations","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","componentType","type","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","calculateDisabled","registerComponentController","getComponentState","deferred","defer","getState","action","multipleChoiceController","createComponentState","then","resolve","promise","$on","angular","event","args","incrementNumberOfAttempts","saveFailed","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","studentData","choiceIds","getChoiceIdsFromStudentData","isRadio","isCheckbox","showFeedbackForChoiceIds","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","c","length","choiceId","choiceObject","getChoiceById","feedbackToShow","feedback","result","indexOf","x","studentDataChoice","studentDataChoiceId","push","studentDataChanged","category","data","selectedChoiceId","saveComponentEvent","index","splice","choicesAfter","isChoiceType","choiceType","componentContentChoiceType","hideAllFeedback","choices","getChoices","choice","hasFeedback","hasCorrectChoices","isCorrectSoFar","isChoiceCorrect","isChoiceChecked","isChecked","correctChoice","correctChoices","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentChoiceObjects","checkAnswer","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentChoiceObjects","studentChoiceObject","studentChoiceId","tempChoice","tempChoiceId","tempChoiceText","show","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","updateChoiceIdsFromImportedWork","s","studentChoice","studentChoiceText","getChoiceByText","authoringViewComponentChanged","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","getAuthoringChoices","message","exitListener","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","$inject"],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["class MultipleChoiceController {\n    constructor($filter,\n                $injector,\n                $q,\n                $scope,\n                ConfigService,\n                MultipleChoiceService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.MultipleChoiceService = MultipleChoiceService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the ids of the choices the student has chosen\n        this.studentChoices = [];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // holds whether the student answered correctly if there is a correct answer\n        this.isCorrect = null;\n\n        // keep track of the number of submits\n        this.numberOfAttempts = null;\n\n        // whether the latest work was submitted or not\n        this.isSubmit = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether to show the feedback or not\n        this.showFeedback = true;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            this.showFeedback = this.componentContent.showFeedback;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n                \n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n                \n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n                \n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.multipleChoiceController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.multipleChoiceController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.multipleChoiceController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n                this.incrementNumberOfAttempts();\n\n                // set saveFailed to true; will be set to false on save success response from server\n                this.saveFailed = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('autoSaved'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('saved'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the choice ids the student previously chose\n                var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n                // set the choice(s) the student previously chose\n                if (this.isRadio()) {\n                    this.studentChoices = choiceIds[0];\n                } else if (this.isCheckbox()) {\n                    this.studentChoices = choiceIds;\n                }\n\n                if (studentData.isCorrect != null) {\n                    this.isCorrect = studentData.isCorrect;\n                }\n\n                if (componentState.isSubmit) {\n                    // the previous work was a submit so we will show the feedback\n                    this.showFeedbackForChoiceIds(choiceIds);\n                }\n\n                var numberOfAttempts = studentData.numberOfAttempts;\n\n                if (numberOfAttempts != null) {\n                    // show the number of attempts\n                    this.numberOfAttempts = numberOfAttempts;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('lastSubmitted'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('lastSaved'), clientSaveTime);\n            }\n        }\n    };\n\n    showFeedbackForChoiceIds(choiceIds) {\n\n        if (choiceIds != null) {\n            for (var c = 0; c < choiceIds.length; c++) {\n                var choiceId = choiceIds[c];\n\n                var choiceObject = this.getChoiceById(choiceId);\n\n                if (choiceObject != null) {\n                    choiceObject.showFeedback = true;\n                    choiceObject.feedbackToShow = choiceObject.feedback;\n                }\n            }\n        }\n    };\n\n    /**\n     * Determine if the choice id has been checked\n     * @param the choice id to look at\n     * @return whether the choice id was checked\n     */\n    isChecked(choiceId) {\n        var result = false;\n\n        // get the choices the student chose\n        var studentChoices = this.studentChoices;\n\n        if (studentChoices != null) {\n            if (this.isRadio()) {\n                // this is a radio button step\n\n                if (choiceId === studentChoices) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            } else if(this.isCheckbox()) {\n                // this is a checkbox step\n\n                if (studentChoices.indexOf(choiceId) != -1) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the choice ids from the student data\n     * @param studentData an array that contains the objects of the\n     * choices the student chose\n     * @return an array containing the choice id(s) the student chose\n     */\n    getChoiceIdsFromStudentData(studentData) {\n        var choiceIds = [];\n\n        if (studentData != null && studentData.studentChoices != null) {\n\n            // get the choices the student chose\n            var studentChoices = studentData.studentChoices;\n\n            // loop through all the choice objects in the student data\n            for (var x = 0; x < studentChoices.length; x++) {\n                // get a choice object\n                var studentDataChoice = studentChoices[x];\n\n                if (studentDataChoice != null) {\n                    // get the choice id\n                    var studentDataChoiceId = studentDataChoice.id;\n\n                    // add the choice id to our array\n                    choiceIds.push(studentDataChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * The student clicked on one of the radio button choices\n     * @param choiceId the choice id of the radio button the student clicked\n     */\n    radioChoiceSelected(choiceId) {\n        // notify this node that the student choice has changed\n        this.studentDataChanged();\n\n        if (choiceId != null) {\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * The student clicked on one of the check box choices\n     * @param choiceId the choice id of the checkbox the student clicked\n     */\n    toggleSelection(choiceId) {\n\n        if (choiceId != null) {\n            /*\n             * get the array of choice ids that were checked before the\n             * student clicked the most current check box\n             */\n            var studentChoices = this.studentChoices;\n\n            if (studentChoices != null) {\n                /*\n                 * check if the newest check is in the array of checked\n                 * choices\n                 */\n                var index = studentChoices.indexOf(choiceId);\n\n                if (index == -1) {\n                    /*\n                     * the choice was not previously checked so we will add\n                     * the choice id to the array\n                     */\n                    studentChoices.push(choiceId);\n                } else {\n                    /*\n                     * the choice was previously checked so we will remove\n                     * the choice id from the array\n                     */\n                    studentChoices.splice(index, 1);\n                }\n            }\n\n            // notify this node that the student choice has changed\n            this.studentDataChanged();\n\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            data.choicesAfter = studentChoices;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * Check if this multiple choice component is using radio buttons\n     * @return whether this multiple choice component is using radio buttons\n     */\n    isRadio() {\n        return this.isChoiceType('radio');\n    };\n\n    /**\n     * Check if this multiple choice component is using checkboxes\n     * @return whether this multiple choice component is using checkboxes\n     */\n    isCheckbox() {\n        return this.isChoiceType('checkbox');\n    };\n\n    /**\n     * Check if the component is authored to use the given choice type\n     * @param choiceType the choice type ('radio' or 'checkbox')\n     * @return whether the component is authored to use the given\n     * choice type\n     */\n    isChoiceType(choiceType) {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type from the component content\n            var componentContentChoiceType = componentContent.choiceType;\n\n            if (choiceType === componentContentChoiceType) {\n                // the choice type matches\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n        this.isCorrect = null;\n        this.hideAllFeedback();\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // TODO: add confirmation dialog if lock after submit is enabled on this component\n        this.isSubmit = true;\n        this.isCorrect = null;\n        this.hideAllFeedback();\n        this.incrementNumberOfAttempts();\n\n        // set saveFailed to true; will be set to false on save success response from server\n        this.saveFailed = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Hide all the feedback\n     */\n    hideAllFeedback() {\n\n        // get all the choices\n        var choices = this.getChoices();\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n                // hide all the feedback\n                choice.showFeedback = false;\n            }\n        }\n    };\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfAttempts() {\n        if (!this.saveFailed) {\n            if (this.numberOfAttempts == null) {\n                this.numberOfAttempts = 0;\n            }\n\n            this.numberOfAttempts++;\n        }\n    };\n\n    /**\n     * Check the answer the student has submitted and display feedback\n     * for the choices the student has checked\n     */\n    checkAnswer() {\n        var isCorrect = false;\n\n        // check if any correct choices have been authored\n        if (this.hasFeedback() || this.hasCorrectChoices()) {\n\n            var isCorrectSoFar = true;\n\n            // get all the authored choices\n            var choices = this.getChoices();\n\n            // loop through all the choices and check if each should be checked or not\n\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var choiceId = choice.id;\n\n                    // whether the choice is correct\n                    var isChoiceCorrect = choice.isCorrect;\n\n                    // whether the student checked the choice\n                    var isChoiceChecked = this.isChecked(choiceId);\n\n                    if (isChoiceCorrect != isChoiceChecked) {\n                        // the student answered this choice incorrectly\n                        isCorrectSoFar = false;\n                    }\n\n                    // show the feedback if it exists and the student checked it\n                    if (this.showFeedback && isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n                        choice.showFeedback = true;\n                        choice.feedbackToShow = choice.feedback;\n                    }\n                }\n            }\n\n            isCorrect = isCorrectSoFar;\n        }\n\n        if (this.hasCorrectChoices()) {\n            this.isCorrect = isCorrect;\n        }\n    };\n\n    /**\n     * Get the correct choice for a radio button component\n     * @return a choice id string\n     */\n    getCorrectChoice() {\n        var correctChoice = null;\n\n        if (this.componentContent != null) {\n            correctChoice = this.componentContent.correctChoice;\n        }\n\n        return correctChoice;\n    };\n\n    /**\n     * Get the correct choices for a checkbox component\n     * @return an array of correct choice ids\n     */\n    getCorrectChoices() {\n        var correctChoices = null;\n\n        if (this.componentContent != null) {\n            correctChoices = this.componentContent.correctChoices;\n        }\n\n        return correctChoices;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n         this.isDirty = true;\n         this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n         this.isSubmitDirty = true;\n         this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n         // clear out the save message\n         this.setSaveMessage('', null);\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the student choices into the component state\n            studentData.studentChoices = this.getStudentChoiceObjects();\n\n            if (action === 'submit' || action === 'save') {\n                /*\n                 * the student has clicked submit or save so we will\n                 * check if the student has chosen all the correct choices.\n                 * the isCorrect value will be stored in this.isCorrect.\n                 */\n                this.checkAnswer();\n\n                if (this.isCorrect != null) {\n                    // set the isCorrect value into the student data\n                    studentData.isCorrect = this.isCorrect;\n                }\n            } else {\n                /*\n                 * the student data has changed but the student has not\n                 * clicked on the submit or save button so we will not\n                 * check the answer yet.\n                 */\n            }\n\n            if (action === 'submit') {\n                if (this.isSubmit) {\n                    // the student submitted this work\n                    componentState.isSubmit = this.isSubmit;\n\n                    /*\n                     * reset the isSubmit value so that the next component state\n                     * doesn't maintain the same value\n                     */\n                    this.isSubmit = false;\n                }\n            }\n\n            if (this.numberOfAttempts != null) {\n                // set the number of attempts the student has made\n                studentData.numberOfAttempts = this.numberOfAttempts;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the choices the student has chosen as objects. The objects\n     * will contain the choice id and the choice text.\n     */\n    getStudentChoiceObjects() {\n        var studentChoiceObjects = [];\n\n        /*\n         * get the choices the student has chosen. this will be an\n         * array of choice ids.\n         */\n        var studentChoices = this.studentChoices;\n        var choiceObject = null;\n        var studentChoiceObject = null;\n\n        if (studentChoices != null) {\n\n            if (this.isRadio()) {\n                // this is a radio button component\n\n                // get the choice object\n                choiceObject = this.getChoiceById(studentChoices);\n\n                if (choiceObject != null) {\n                    // create a student choice object and set the id and text\n                    studentChoiceObject = {};\n                    studentChoiceObject.id = choiceObject.id;\n                    studentChoiceObject.text = choiceObject.text;\n\n                    // add the student choice object to our array\n                    studentChoiceObjects.push(studentChoiceObject);\n                }\n            } else if (this.isCheckbox()) {\n                // this is a checkbox component\n\n                // loop through all the choices the student chose\n                for (var x = 0; x < studentChoices.length; x++) {\n\n                    // get a choice id that the student chose\n                    var studentChoiceId = studentChoices[x];\n\n                    // get the choice object\n                    choiceObject = this.getChoiceById(studentChoiceId);\n\n                    if (choiceObject != null) {\n                        // create a student choice object and set the id and text\n                        studentChoiceObject = {};\n                        studentChoiceObject.id = choiceObject.id;\n                        studentChoiceObject.text = choiceObject.text;\n\n                        // add the student choice object to our array\n                        studentChoiceObjects.push(studentChoiceObject);\n                    }\n                }\n            }\n        }\n\n        return studentChoiceObjects;\n    };\n\n    /**\n     * Check if the component has been authored with a correct choice\n     * @return whether the component has been authored with a correct choice\n     */\n    hasCorrectChoices() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.isCorrect) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if there is any feedback\n     * @returns whether there is any feedback\n     */\n    hasFeedback() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.feedback != null && choice.feedback != '') {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a choice object by choice id\n     * @param choiceId the choice id\n     * @return the choice object with the given choice id\n     */\n    getChoiceById(choiceId) {\n        var choice = null;\n\n        if (choiceId != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice id\n                        var tempChoiceId = tempChoice.id;\n\n                        // check if the choice id matches\n                        if (choiceId === tempChoiceId) {\n                            /*\n                             * the choice id matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    };\n    \n    /**\n     * Get a choice by choice text\n     * @param text the choice text\n     * @return the choice with the given text\n     */\n    getChoiceByText(text) {\n        \n        var choice = null;\n        \n        if (text != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice text\n                        var tempChoiceText = tempChoice.text;\n\n                        // check if the choice text matches\n                        if (text == tempChoiceText) {\n                            /*\n                             * the choice text matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return choice;\n    }\n\n    /**\n     * Get the choice type for this component ('radio' or 'checkbox')\n     * @return the choice type for this component\n     */\n    getChoiceType() {\n        var choiceType = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type\n            choiceType = componentContent.choiceType;\n        }\n\n        return choiceType;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getChoices() {\n        var choices = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the choices\n            choices = componentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getAuthoringChoices() {\n        var choices = null;\n\n        // get the component content\n        var authoringComponentContent = this.authoringComponentContent;\n\n        if (authoringComponentContent != null) {\n\n            // get the choices\n            choices = authoringComponentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        // check the showSaveButton field in the component content\n        if (this.componentContent.showSaveButton) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n            \n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                \n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n            \n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                \n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * update the choice ids so that it uses the choice ids\n                         * from this component. we need to do this because the choice\n                         * ids are likely to be different. we update the choice ids\n                         * by matching the choice text.\n                         */\n                        this.updateChoiceIdsFromImportedWork(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n    \n    /**\n     * Update the choice ids to use the choice ids from this component.\n     * We will use the choice text to match the choices.\n     * @param componentState the component state\n     */\n    updateChoiceIdsFromImportedWork(componentState) {\n        \n        if (componentState != null) {\n            \n            // get the student data\n            var studentData = componentState.studentData;\n            \n            if (studentData != null) {\n                \n                // get the choices the student chose\n                var studentChoices = studentData.studentChoices;\n                \n                if (studentChoices != null) {\n                    \n                    // loop through all the choices the student chose\n                    for (var s = 0; s < studentChoices.length; s++) {\n                        \n                        // get a choice the student chose\n                        var studentChoice = studentChoices[s];\n                        \n                        if (studentChoice != null) {\n                            \n                            // get the choice text\n                            var studentChoiceText = studentChoice.text;\n                            \n                            // get the choice in this component with the given tetxt\n                            var choice = this.getChoiceByText(studentChoiceText);\n                            \n                            if (choice != null) {\n                                \n                                // get the choice id\n                                var choiceId = choice.id;\n                                \n                                // update the id to have the id from this component\n                                studentChoice.id = choiceId;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The author has changed the feedback so we will enable the submit button\n     */\n    authoringViewFeedbackChanged() {\n\n        // enable the submit button\n        this.authoringComponentContent.showSubmitButton = true;\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // clean up the choices by removing fields injected by the controller during run time\n        //this.cleanUpChoices();\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a choice from within the authoring tool\n     */\n    addChoice() {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        // make the new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.text = '';\n        newChoice.feedback = '';\n        newChoice.isCorrect = false;\n\n        // add the new choice\n        choices.push(newChoice);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice from within the authoring tool\n     * @param choiceId\n     */\n    deleteChoice(choiceId) {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n                        // we have found the choice that we want to delete so we will remove it\n                        choices.splice(c, 1);\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Clean up the choice objects. In the authoring tool this is required\n     * because we use the choice objects as ng-model values and inject\n     * fields into the choice objects such as showFeedback and feedbackToShow.\n     */\n    cleanUpChoices() {\n\n        // get the authored choices\n        var choices = this.getAuthoringChoices();\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    // remove the fields we don't want to be saved\n                    delete choice.showFeedback;\n                    delete choice.feedbackToShow;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n        \n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and \n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n            \n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n        \n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n        \n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n        \n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n        \n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n        \n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n            \n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n            \n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n            \n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n            \n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n                \n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('areYouSureYouWantToChangeThisComponentType'));\n                \n                if (answer) {\n                    // the author wants to change the component type\n                    \n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n                    \n                    if (componentService != null) {\n                        \n                        // create a new component\n                        var newComponent = componentService.createComponent();\n                        \n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n                        \n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n                        \n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n    \n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n        \n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n        \n        return result;\n    }\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work \n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n    \n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n        \n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n    \n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n        \n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nMultipleChoiceController.$inject = [\n    '$filter',\n    '$injector',\n    '$q',\n    '$scope',\n    'ConfigService',\n    'MultipleChoiceService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}