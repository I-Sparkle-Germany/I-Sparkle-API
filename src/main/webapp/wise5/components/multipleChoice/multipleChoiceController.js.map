{"version":3,"sources":["multipleChoiceController.es6"],"names":[],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["class MultipleChoiceController {\n    constructor($scope,\n                MultipleChoiceService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.MultipleChoiceService = MultipleChoiceService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the ids of the choices the student has chosen\n        this.studentChoices = [];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // holds whether the student answered correctly if there is a correct answer\n        this.isCorrect = null;\n\n        // keep track of the number of submits\n        this.numberOfAttempts = 0;\n\n        // whether the latest work was submitted or not\n        this.isSubmit = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.multipleChoiceController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.multipleChoiceController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.multipleChoiceController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n                this.incrementNumberOfAttempts();\n\n                // set saveFailed to true; will be set to false on save success response from server\n                this.saveFailed = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', serverSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', serverSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', serverSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the choice ids the student previously chose\n                var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n                // set the choice(s) the student previously chose\n                if (this.isRadio()) {\n                    this.studentChoices = choiceIds[0];\n                } else if (this.isCheckbox()) {\n                    this.studentChoices = choiceIds;\n                }\n\n                if (studentData.isCorrect != null) {\n                    this.isCorrect = studentData.isCorrect;\n                }\n\n                if (componentState.isSubmit) {\n                    // the previous work was a submit so we will show the feedback\n                    this.showFeedbackForChoiceIds(choiceIds);\n                }\n\n                var numberOfAttempts = studentData.numberOfAttempts;\n\n                if (numberOfAttempts != null) {\n                    // show the number of attempts\n                    this.numberOfAttempts = numberOfAttempts;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.serverSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.serverSaveTime);\n            }\n        }\n    };\n\n    showFeedbackForChoiceIds(choiceIds) {\n\n        if (choiceIds != null) {\n            for (var c = 0; c < choiceIds.length; c++) {\n                var choiceId = choiceIds[c];\n\n                var choiceObject = this.getChoiceById(choiceId);\n\n                if (choiceObject != null) {\n                    choiceObject.showFeedback = true;\n                    choiceObject.feedbackToShow = choiceObject.feedback;\n                }\n            }\n        }\n    };\n\n    /**\n     * Determine if the choice id has been checked\n     * @param the choice id to look at\n     * @return whether the choice id was checked\n     */\n    isChecked(choiceId) {\n        var result = false;\n\n        // get the choices the student chose\n        var studentChoices = this.studentChoices;\n\n        if (studentChoices != null) {\n            if (this.isRadio()) {\n                // this is a radio button step\n\n                if (choiceId === studentChoices) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            } else if(this.isCheckbox()) {\n                // this is a checkbox step\n\n                if (studentChoices.indexOf(choiceId) != -1) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the choice ids from the student data\n     * @param studentData an array that contains the objects of the\n     * choices the student chose\n     * @return an array containing the choice id(s) the student chose\n     */\n    getChoiceIdsFromStudentData(studentData) {\n        var choiceIds = [];\n\n        if (studentData != null && studentData.studentChoices != null) {\n\n            // get the choices the student chose\n            var studentChoices = studentData.studentChoices;\n\n            // loop through all the choice objects in the student data\n            for (var x = 0; x < studentChoices.length; x++) {\n                // get a choice object\n                var studentDataChoice = studentChoices[x];\n\n                if (studentDataChoice != null) {\n                    // get the choice id\n                    var studentDataChoiceId = studentDataChoice.id;\n\n                    // add the choice id to our array\n                    choiceIds.push(studentDataChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * The student clicked on one of the radio button choices\n     * @param choiceId the choice id of the radio button the student clicked\n     */\n    radioChoiceSelected(choiceId) {\n        // notify this node that the student choice has changed\n        this.studentDataChanged();\n\n        if (choiceId != null) {\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * The student clicked on one of the check box choices\n     * @param choiceId the choice id of the checkbox the student clicked\n     */\n    toggleSelection(choiceId) {\n\n        if (choiceId != null) {\n            /*\n             * get the array of choice ids that were checked before the\n             * student clicked the most current check box\n             */\n            var studentChoices = this.studentChoices;\n\n            if (studentChoices != null) {\n                /*\n                 * check if the newest check is in the array of checked\n                 * choices\n                 */\n                var index = studentChoices.indexOf(choiceId);\n\n                if (index == -1) {\n                    /*\n                     * the choice was not previously checked so we will add\n                     * the choice id to the array\n                     */\n                    studentChoices.push(choiceId);\n                } else {\n                    /*\n                     * the choice was previously checked so we will remove\n                     * the choice id from the array\n                     */\n                    studentChoices.splice(index, 1);\n                }\n            }\n\n            // notify this node that the student choice has changed\n            this.studentDataChanged();\n\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            data.choicesAfter = studentChoices;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * Check if this multiple choice component is using radio buttons\n     * @return whether this multiple choice component is using radio buttons\n     */\n    isRadio() {\n        return this.isChoiceType('radio');\n    };\n\n    /**\n     * Check if this multiple choice component is using checkboxes\n     * @return whether this multiple choice component is using checkboxes\n     */\n    isCheckbox() {\n        return this.isChoiceType('checkbox');\n    };\n\n    /**\n     * Check if the component is authored to use the given choice type\n     * @param choiceType the choice type ('radio' or 'checkbox')\n     * @return whether the component is authored to use the given\n     * choice type\n     */\n    isChoiceType(choiceType) {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type from the component content\n            var componentContentChoiceType = componentContent.choiceType;\n\n            if (choiceType === componentContentChoiceType) {\n                // the choice type matches\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // TODO: add confirmation dialog if lock after submit is enabled on this component\n        this.isSubmit = true;\n        this.incrementNumberOfAttempts();\n\n        // set saveFailed to true; will be set to false on save success response from server\n        this.saveFailed = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Hide all the feedback\n     */\n    hideAllFeedback() {\n\n        // get all the choices\n        var choices = this.getChoices();\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n                // hide all the feedback\n                choice.showFeedback = false;\n            }\n        }\n    };\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfAttempts() {\n        if (!this.saveFailed) {\n            if (this.numberOfAttempts == null) {\n                this.numberOfAttempts = 0;\n            }\n\n            this.numberOfAttempts++;\n        }\n    };\n\n    /**\n     * Check the answer the student has submitted and display feedback\n     * for the choices the student has checked\n     */\n    checkAnswer() {\n        var isCorrect = false;\n\n        this.hideAllFeedback();\n\n        // check if any correct choices have been authored\n        if (this.hasCorrectChoices()) {\n\n            var isCorrectSoFar = true;\n\n            // get all the authored choices\n            var choices = this.getChoices();\n\n            // loop through all the choices and check if each should be checked or not\n\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var choiceId = choice.id;\n\n                    // whether the choice is correct\n                    var isChoiceCorrect = choice.isCorrect;\n\n                    // whether the student checked the choice\n                    var isChoiceChecked = this.isChecked(choiceId);\n\n                    if (isChoiceCorrect != isChoiceChecked) {\n                        // the student answered this choice incorrectly\n                        isCorrectSoFar = false;\n                    }\n\n                    // show the feedback if it exists and the student checked it\n                    if (isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n                        choice.showFeedback = true;\n                        choice.feedbackToShow = choice.feedback;\n                    }\n                }\n            }\n\n            isCorrect = isCorrectSoFar;\n        }\n\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the correct choice for a radio button component\n     * @return a choice id string\n     */\n    getCorrectChoice() {\n        var correctChoice = null;\n\n        if (this.componentContent != null) {\n            correctChoice = this.componentContent.correctChoice;\n        }\n\n        return correctChoice;\n    };\n\n    /**\n     * Get the correct choices for a checkbox component\n     * @return an array of correct choice ids\n     */\n    getCorrectChoices() {\n        var correctChoices = null;\n\n        if (this.componentContent != null) {\n            correctChoices = this.componentContent.correctChoices;\n        }\n\n        return correctChoices;\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        this.checkAnswer();\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n         this.isDirty = true;\n         this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n         this.isSubmitDirty = true;\n         this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n         // clear out the save message\n         this.setSaveMessage('', null);\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the student choices into the component state\n            studentData.studentChoices = this.getStudentChoiceObjects();\n\n            // check if the student has answered correctly\n            var hasCorrect = this.hasCorrectChoices();\n\n            if (hasCorrect) {\n                /*\n                 * check if the student has chosen all the correct\n                 * choices\n                 */\n                if (this.isCorrect != null) {\n                    // set the isCorrect value into the student data\n                    studentData.isCorrect = this.isCorrect;\n                }\n\n                if (this.isSubmit != null) {\n                    componentState.isSubmit = this.isSubmit;\n                }\n\n                // set the number of attempts the student has made\n                studentData.numberOfAttempts = this.numberOfAttempts;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the choices the student has chosen as objects. The objects\n     * will contain the choice id and the choice text.\n     */\n    getStudentChoiceObjects() {\n        var studentChoiceObjects = [];\n\n        /*\n         * get the choices the student has chosen. this will be an\n         * array of choice ids.\n         */\n        var studentChoices = this.studentChoices;\n        var choiceObject = null;\n        var studentChoiceObject = null;\n\n        if (studentChoices != null) {\n\n            if (this.isRadio()) {\n                // this is a radio button component\n\n                // get the choice object\n                choiceObject = this.getChoiceById(studentChoices);\n\n                if (choiceObject != null) {\n                    // create a student choice object and set the id and text\n                    studentChoiceObject = {};\n                    studentChoiceObject.id = choiceObject.id;\n                    studentChoiceObject.text = choiceObject.text;\n\n                    // add the student choice object to our array\n                    studentChoiceObjects.push(studentChoiceObject);\n                }\n            } else if (this.isCheckbox()) {\n                // this is a checkbox component\n\n                // loop through all the choices the student chose\n                for (var x = 0; x < studentChoices.length; x++) {\n\n                    // get a choice id that the student chose\n                    var studentChoiceId = studentChoices[x];\n\n                    // get the choice object\n                    choiceObject = this.getChoiceById(studentChoiceId);\n\n                    if (choiceObject != null) {\n                        // create a student choice object and set the id and text\n                        studentChoiceObject = {};\n                        studentChoiceObject.id = choiceObject.id;\n                        studentChoiceObject.text = choiceObject.text;\n\n                        // add the student choice object to our array\n                        studentChoiceObjects.push(studentChoiceObject);\n                    }\n                }\n            }\n        }\n\n        return studentChoiceObjects;\n    };\n\n    /**\n     * Check if the component has been authored with a correct choice\n     * @return whether the component has been authored with a correct choice\n     */\n    hasCorrectChoices() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.isCorrect) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get a choice object by choice id\n     * @param choiceId the choice id\n     * @return the choice object with the given choice id\n     */\n    getChoiceById(choiceId) {\n        var choice = null;\n\n        if (choiceId != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice id\n                        var tempChoiceId = tempChoice.id;\n\n                        // check if the choice id matches\n                        if (choiceId === tempChoiceId) {\n                            /*\n                             * the choice id matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    };\n\n    /**\n     * Get the choice type for this component ('radio' or 'checkbox')\n     * @return the choice type for this component\n     */\n    getChoiceType() {\n        var choiceType = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type\n            choiceType = componentContent.choiceType;\n        }\n\n        return choiceType;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getChoices() {\n        var choices = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the choices\n            choices = componentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getAuthoringChoices() {\n        var choices = null;\n\n        // get the component content\n        var authoringComponentContent = this.authoringComponentContent;\n\n        if (authoringComponentContent != null) {\n\n            // get the choices\n            choices = authoringComponentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        // check the showSaveButton field in the component content\n        if (this.componentContent.showSaveButton) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // clean up the choices by removing fields injected by the controller during run time\n        //this.cleanUpChoices();\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Add a choice from within the authoring tool\n     */\n    addChoice() {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        // make the new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.text = '';\n        newChoice.feedback = '';\n        newChoice.isCorrect = false;\n\n        // add the new choice\n        choices.push(newChoice);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice from within the authoring tool\n     * @param choiceId\n     */\n    deleteChoice(choiceId) {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n                        // we have found the choice that we want to delete so we will remove it\n                        choices.splice(c, 1);\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Clean up the choice objects. In the authoring tool this is required\n     * because we use the choice objects as ng-model values and inject\n     * fields into the choice objects such as showFeedback and feedbackToShow.\n     */\n    cleanUpChoices() {\n\n        // get the authored choices\n        var choices = this.getAuthoringChoices();\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    // remove the fields we don't want to be saved\n                    delete choice.showFeedback;\n                    delete choice.feedbackToShow;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n};\n\nMultipleChoiceController.$inject = [\n    '$scope',\n    'MultipleChoiceService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}