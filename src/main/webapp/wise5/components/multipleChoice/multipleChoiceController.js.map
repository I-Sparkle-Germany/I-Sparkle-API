{"version":3,"sources":["multipleChoiceController.es6"],"names":[],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["class MultipleChoiceController {\n    constructor($scope,\n                MultipleChoiceService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.MultipleChoiceService = MultipleChoiceService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // holds the ids of the choices the student has chosen\n        this.studentChoices = [];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // holds whether the student answered correctly if there is a correct answer\n        this.isCorrect = null;\n\n        // keep track of the number of submits\n        this.numberOfAttempts = 0;\n\n        // whether the latest work was submitted or not\n        this.isSubmit = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.component;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n            }\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.multipleChoiceController.isDirty || this.$scope.multipleChoiceController.isSubmit) {\n                // create a component state populated with the student data\n                componentState = this.$scope.multipleChoiceController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.multipleChoiceController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the choice ids the student previously chose\n                var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n                // set the choice(s) the student previously chose\n                if (this.isRadio()) {\n                    this.studentChoices = choiceIds[0];\n                } else if (this.isCheckbox()) {\n                    this.studentChoices = choiceIds;\n                }\n\n                if (studentData.isCorrect != null) {\n                    this.isCorrect = studentData.isCorrect;\n                }\n\n                if (componentState.isSubmit) {\n                    // the previous work was a submit so we will show the feedback\n                    this.showFeedbackForChoiceIds(choiceIds);\n                }\n\n                var numberOfAttempts = studentData.numberOfAttempts;\n\n                if (numberOfAttempts != null) {\n                    // show the number of attempts\n                    this.numberOfAttempts = numberOfAttempts;\n                }\n            }\n        }\n    };\n\n    showFeedbackForChoiceIds(choiceIds) {\n\n        if (choiceIds != null) {\n            for (var c = 0; c < choiceIds.length; c++) {\n                var choiceId = choiceIds[c];\n\n                var choiceObject = this.getChoiceById(choiceId);\n\n                if (choiceObject != null) {\n                    choiceObject.showFeedback = true;\n                    choiceObject.feedbackToShow = choiceObject.feedback;\n                }\n            }\n        }\n    };\n\n    /**\n     * Determine if the choice id has been checked\n     * @param the choice id to look at\n     * @return whether the choice id was checked\n     */\n    isChecked(choiceId) {\n        var result = false;\n\n        // get the choices the student chose\n        var studentChoices = this.studentChoices;\n\n        if (studentChoices != null) {\n            if (this.isRadio()) {\n                // this is a radio button step\n\n                if (choiceId === studentChoices) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            } else if(this.isCheckbox()) {\n                // this is a checkbox step\n\n                if (studentChoices.indexOf(choiceId) != -1) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the choice ids from the student data\n     * @param studentData an array that contains the objects of the\n     * choices the student chose\n     * @return an array containing the choice id(s) the student chose\n     */\n    getChoiceIdsFromStudentData(studentData) {\n        var choiceIds = [];\n\n        if (studentData != null && studentData.studentChoices != null) {\n\n            // get the choices the student chose\n            var studentChoices = studentData.studentChoices;\n\n            // loop through all the choice objects in the student data\n            for (var x = 0; x < studentChoices.length; x++) {\n                // get a choice object\n                var studentDataChoice = studentChoices[x];\n\n                if (studentDataChoice != null) {\n                    // get the choice id\n                    var studentDataChoiceId = studentDataChoice.id;\n\n                    // add the choice id to our array\n                    choiceIds.push(studentDataChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * The student clicked on one of the radio button choices\n     * @param choiceId the choice id of the radio button the student clicked\n     */\n    radioChoiceSelected(choiceId) {\n        // notify this node that the student choice has changed\n        this.studentDataChanged();\n\n        if (choiceId != null) {\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * The student clicked on one of the check box choices\n     * @param choiceId the choice id of the checkbox the student clicked\n     */\n    toggleSelection(choiceId) {\n\n        if (choiceId != null) {\n            /*\n             * get the array of choice ids that were checked before the\n             * student clicked the most current check box\n             */\n            var studentChoices = this.studentChoices;\n\n            if (studentChoices != null) {\n                /*\n                 * check if the newest check is in the array of checked\n                 * choices\n                 */\n                var index = studentChoices.indexOf(choiceId);\n\n                if (index == -1) {\n                    /*\n                     * the choice was not previously checked so we will add\n                     * the choice id to the array\n                     */\n                    studentChoices.push(choiceId);\n                } else {\n                    /*\n                     * the choice was previously checked so we will remove\n                     * the choice id from the array\n                     */\n                    studentChoices.splice(index, 1);\n                }\n            }\n\n            // notify this node that the student choice has changed\n            this.studentDataChanged();\n\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            data.choicesAfter = studentChoices;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * Check if this multiple choice component is using radio buttons\n     * @return whether this multiple choice component is using radio buttons\n     */\n    isRadio() {\n        return this.isChoiceType('radio');\n    };\n\n    /**\n     * Check if this multiple choice component is using checkboxes\n     * @return whether this multiple choice component is using checkboxes\n     */\n    isCheckbox() {\n        return this.isChoiceType('checkbox');\n    };\n\n    /**\n     * Check if the component is authored to use the given choice type\n     * @param choiceType the choice type ('radio' or 'checkbox')\n     * @return whether the component is authored to use the given\n     * choice type\n     */\n    isChoiceType(choiceType) {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type from the component content\n            var componentContentChoiceType = componentContent.choiceType;\n\n            if (choiceType === componentContentChoiceType) {\n                // the choice type matches\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        this.checkAnswer();\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Hide all the feedback\n     */\n    hideAllFeedback() {\n\n        // get all the choices\n        var choices = this.getChoices();\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n                // hide all the feedback\n                choice.showFeedback = false;\n            }\n        }\n    };\n\n    /**\n     * Increment the number of attempts the student has made\n     */\n    incrementNumberOfAttempts() {\n\n        if (this.numberOfAttempts == null) {\n            this.numberOfAttempts = 0;\n        }\n\n        this.numberOfAttempts++;\n    };\n\n    /**\n     * Check the answer the student has submitted and display feedback\n     * for the choices the student has checked\n     */\n    checkAnswer() {\n        var isCorrect = false;\n\n        this.incrementNumberOfAttempts();\n        this.hideAllFeedback();\n\n        // check if any correct choices have been authored\n        if (this.hasCorrectChoices()) {\n\n            var isCorrectSoFar = true;\n\n            // get all the authored choices\n            var choices = this.getChoices();\n\n            // loop through all the choices and check if each should be checked or not\n\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var choiceId = choice.id;\n\n                    // whether the choice is correct\n                    var isChoiceCorrect = choice.isCorrect;\n\n                    // whether the student checked the choice\n                    var isChoiceChecked = this.isChecked(choiceId);\n\n                    if (isChoiceCorrect != isChoiceChecked) {\n                        // the student answered this choice incorrectly\n                        isCorrectSoFar = false;\n                    }\n\n                    // show the feedback if it exists and the student checked it\n                    if (isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n                        choice.showFeedback = true;\n                        choice.feedbackToShow = choice.feedback;\n                    }\n                }\n            }\n\n            isCorrect = isCorrectSoFar;\n        }\n\n        this.isCorrect = isCorrect;\n    };\n\n    /**\n     * Get the correct choice for a radio button component\n     * @return a choice id string\n     */\n    getCorrectChoice() {\n        var correctChoice = null;\n\n        if (this.componentContent != null) {\n            correctChoice = this.componentContent.correctChoice;\n        }\n\n        return correctChoice;\n    };\n\n    /**\n     * Get the correct choices for a checkbox component\n     * @return an array of correct choice ids\n     */\n    getCorrectChoices() {\n        var correctChoices = null;\n\n        if (this.componentContent != null) {\n            correctChoices = this.componentContent.correctChoices;\n        }\n\n        return correctChoices;\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        /*\n         * reset these values so that they don't accidentally persist\n         * between component states\n         */\n        this.isSubmit = null;\n        this.isCorrect = null;\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the student choices into the component state\n            studentData.studentChoices = this.getStudentChoiceObjects();\n\n            // check if the student has answered correctly\n            var hasCorrect = this.hasCorrectChoices();\n\n            if (hasCorrect) {\n                /*\n                 * check if the student has chosen all the correct\n                 * choices\n                 */\n                if (this.isCorrect != null) {\n                    // set the isCorrect value into the student data\n                    studentData.isCorrect = this.isCorrect;\n                }\n\n                if (this.isSubmit != null) {\n                    componentState.isSubmit = this.isSubmit;\n                }\n\n                // set the number of attempts the student has made\n                studentData.numberOfAttempts = this.numberOfAttempts;\n            }\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the choices the student has chosen as objects. The objects\n     * will contain the choice id and the choice text.\n     */\n    getStudentChoiceObjects() {\n        var studentChoiceObjects = [];\n\n        /*\n         * get the choices the student has chosen. this will be an\n         * array of choice ids.\n         */\n        var studentChoices = this.studentChoices;\n        var choiceObject = null;\n        var studentChoiceObject = null;\n\n        if (studentChoices != null) {\n\n            if (this.isRadio()) {\n                // this is a radio button component\n\n                // get the choice object\n                choiceObject = this.getChoiceById(studentChoices);\n\n                if (choiceObject != null) {\n                    // create a student choice object and set the id and text\n                    studentChoiceObject = {};\n                    studentChoiceObject.id = choiceObject.id;\n                    studentChoiceObject.text = choiceObject.text;\n\n                    // add the student choice object to our array\n                    studentChoiceObjects.push(studentChoiceObject);\n                }\n            } else if (this.isCheckbox()) {\n                // this is a checkbox component\n\n                // loop through all the choices the student chose\n                for (var x = 0; x < studentChoices.length; x++) {\n\n                    // get a choice id that the student chose\n                    var studentChoiceId = studentChoices[x];\n\n                    // get the choice object\n                    choiceObject = this.getChoiceById(studentChoiceId);\n\n                    if (choiceObject != null) {\n                        // create a student choice object and set the id and text\n                        studentChoiceObject = {};\n                        studentChoiceObject.id = choiceObject.id;\n                        studentChoiceObject.text = choiceObject.text;\n\n                        // add the student choice object to our array\n                        studentChoiceObjects.push(studentChoiceObject);\n                    }\n                }\n            }\n        }\n\n        return studentChoiceObjects;\n    };\n\n    /**\n     * Check if the component has been authored with a correct choice\n     * @return whether the component has been authored with a correct choice\n     */\n    hasCorrectChoices() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.isCorrect) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get a choice object by choice id\n     * @param choiceId the choice id\n     * @return the choice object with the given choice id\n     */\n    getChoiceById(choiceId) {\n        var choice = null;\n\n        if (choiceId != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice id\n                        var tempChoiceId = tempChoice.id;\n\n                        // check if the choice id matches\n                        if (choiceId === tempChoiceId) {\n                            /*\n                             * the choice id matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    };\n\n    /**\n     * Get the choice type for this component ('radio' or 'checkbox')\n     * @return the choice type for this component\n     */\n    getChoiceType() {\n        var choiceType = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type\n            choiceType = componentContent.choiceType;\n        }\n\n        return choiceType;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getChoices() {\n        var choices = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the choices\n            choices = componentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        var show = false;\n\n        if (this.isPromptVisible) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var show = false;\n\n        // check the showSaveButton field in the component content\n        if (this.componentContent.showSaveButton) {\n            show = true;\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var show = false;\n\n        if (this.componentContent != null) {\n\n            // check the showSubmitButton field in the component content\n            if (this.componentContent.showSubmitButton) {\n                show = true;\n            }\n        }\n\n        return show;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // clean up the choices by removing fields injected by the controller during run time\n        this.cleanUpChoices();\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new comopnent by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.componentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.componentContentJSONString = angular.toJson(this.componentContent, 4);\n        //this.componentContentChoices = this.componentContent.choices;\n    };\n\n    /**\n     * Add a choice from within the authoring tool\n     */\n    addChoice() {\n\n        // get the authored choices\n        var choices = this.componentContent.choices;\n\n        // make the new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.text = '';\n        newChoice.feedback = '';\n        newChoice.isCorrect = false;\n\n        // add the new choice\n        choices.push(newChoice);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice from within the authoring tool\n     * @param choiceId\n     */\n    deleteChoice(choiceId) {\n\n        // get the authored choices\n        var choices = this.componentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n                        // we have found the choice that we want to delete so we will remove it\n                        choices.splice(c, 1);\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Clean up the choice objects. In the authoring tool this is required\n     * because we use the choice objects as ng-model values and inject\n     * fields into the choice objects such as showFeedback and feedbackToShow.\n     */\n    cleanUpChoices() {\n\n        // get the authored choices\n        var choices = this.getChoices();\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    // remove the fields we don't want to be saved\n                    delete choice.showFeedback;\n                    delete choice.feedbackToShow;\n                }\n            }\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n};\n\nMultipleChoiceController.$inject = [\n    '$scope',\n    'MultipleChoiceService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}