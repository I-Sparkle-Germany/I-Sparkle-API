{"version":3,"sources":["multipleChoiceController.es6"],"names":["MultipleChoiceController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","ProjectService","StudentDataService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","showAdvancedAuthoring","showJSONAuthoring","studentChoices","isShowPreviousWork","isCorrect","isSubmit","mode","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","showFeedback","latestAnnotations","submitCounter","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","originalComponentContent","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","hasCorrectChoices","componentType","type","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","getState","action","multipleChoiceController","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","saveFailed","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","studentData","choiceIds","getChoiceIdsFromStudentData","isRadio","isCheckbox","showFeedbackForChoiceIds","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","c","length","choiceId","choiceObject","getChoiceById","feedbackToShow","feedback","result","indexOf","x","studentDataChoice","studentDataChoiceId","push","studentDataChanged","category","data","selectedChoiceId","saveComponentEvent","index","splice","choicesAfter","isChoiceType","choiceType","componentContentChoiceType","hideAllFeedback","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","checkAnswer","choices","getChoices","choice","hasFeedback","isCorrectSoFar","isChoiceCorrect","isChoiceChecked","isChecked","correctChoice","correctChoices","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentChoiceObjects","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentChoiceObjects","studentChoiceObject","studentChoiceId","tempChoice","tempChoiceId","tempChoiceText","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","updateChoiceIdsFromImportedWork","s","studentChoice","studentChoiceText","getChoiceByText","show","componentHasFeedback","setShowSubmitButtonValue","authoringViewComponentChanged","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","getAuthoringChoices","exitListener","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","confirm","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","$inject"],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["class MultipleChoiceController {\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                MultipleChoiceService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.MultipleChoiceService = MultipleChoiceService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the component should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // holds the ids of the choices the student has chosen\n        this.studentChoices = [];\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // holds whether the student answered correctly if there is a correct answer\n        this.isCorrect = null;\n\n        // whether the latest work was submitted or not\n        this.isSubmit = null;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = null;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether to show the feedback or not\n        this.showFeedback = true;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // whether this component has been authored with a correct answer\n        this.hasCorrectAnswer = false;\n\n        // whether the latest component state was a submit\n        this.isLatestComponentStateSubmit = false;\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                }.bind(this), true);\n            }\n\n            // check if there is a correct answer\n            this.hasCorrectAnswer = this.hasCorrectChoices();\n\n            this.showFeedback = this.componentContent.showFeedback;\n\n            // get the component type\n            this.componentType = this.componentContent.type;\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            if (componentState != null && componentState.isSubmit) {\n                /*\n                 * the latest component state is a submit. this is used to\n                 * determine if we should show the feedback.\n                 */\n                this.isLatestComponentStateSubmit = true;\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the choices and the submit button\n                 */\n                this.isDisabled = true;\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.multipleChoiceController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.multipleChoiceController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.multipleChoiceController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                // set saveFailed to false because the save was successful\n                this.saveFailed = false;\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // get the choice ids the student previously chose\n                var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n                // set the choice(s) the student previously chose\n                if (this.isRadio()) {\n                    this.studentChoices = choiceIds[0];\n                } else if (this.isCheckbox()) {\n                    this.studentChoices = choiceIds;\n                }\n\n                if (studentData.isCorrect != null) {\n                    this.isCorrect = studentData.isCorrect;\n                }\n\n                if (this.showFeedback && componentState.isSubmit) {\n                    // the previous work was a submit so we will show the feedback\n                    this.showFeedbackForChoiceIds(choiceIds);\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    showFeedbackForChoiceIds(choiceIds) {\n\n        if (choiceIds != null) {\n            for (var c = 0; c < choiceIds.length; c++) {\n                var choiceId = choiceIds[c];\n\n                var choiceObject = this.getChoiceById(choiceId);\n\n                if (choiceObject != null) {\n                    choiceObject.showFeedback = true;\n                    choiceObject.feedbackToShow = choiceObject.feedback;\n                }\n            }\n        }\n    };\n\n    /**\n     * Determine if the choice id has been checked\n     * @param the choice id to look at\n     * @return whether the choice id was checked\n     */\n    isChecked(choiceId) {\n        var result = false;\n\n        // get the choices the student chose\n        var studentChoices = this.studentChoices;\n\n        if (studentChoices != null) {\n            if (this.isRadio()) {\n                // this is a radio button step\n\n                if (choiceId === studentChoices) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            } else if(this.isCheckbox()) {\n                // this is a checkbox step\n\n                if (studentChoices.indexOf(choiceId) != -1) {\n                    // the student checked the choice id\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the choice ids from the student data\n     * @param studentData an array that contains the objects of the\n     * choices the student chose\n     * @return an array containing the choice id(s) the student chose\n     */\n    getChoiceIdsFromStudentData(studentData) {\n        var choiceIds = [];\n\n        if (studentData != null && studentData.studentChoices != null) {\n\n            // get the choices the student chose\n            var studentChoices = studentData.studentChoices;\n\n            // loop through all the choice objects in the student data\n            for (var x = 0; x < studentChoices.length; x++) {\n                // get a choice object\n                var studentDataChoice = studentChoices[x];\n\n                if (studentDataChoice != null) {\n                    // get the choice id\n                    var studentDataChoiceId = studentDataChoice.id;\n\n                    // add the choice id to our array\n                    choiceIds.push(studentDataChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * The student clicked on one of the radio button choices\n     * @param choiceId the choice id of the radio button the student clicked\n     */\n    radioChoiceSelected(choiceId) {\n        // notify this node that the student choice has changed\n        this.studentDataChanged();\n\n        if (choiceId != null) {\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * The student clicked on one of the check box choices\n     * @param choiceId the choice id of the checkbox the student clicked\n     */\n    toggleSelection(choiceId) {\n\n        if (choiceId != null) {\n            /*\n             * get the array of choice ids that were checked before the\n             * student clicked the most current check box\n             */\n            var studentChoices = this.studentChoices;\n\n            if (studentChoices != null) {\n                /*\n                 * check if the newest check is in the array of checked\n                 * choices\n                 */\n                var index = studentChoices.indexOf(choiceId);\n\n                if (index == -1) {\n                    /*\n                     * the choice was not previously checked so we will add\n                     * the choice id to the array\n                     */\n                    studentChoices.push(choiceId);\n                } else {\n                    /*\n                     * the choice was previously checked so we will remove\n                     * the choice id from the array\n                     */\n                    studentChoices.splice(index, 1);\n                }\n            }\n\n            // notify this node that the student choice has changed\n            this.studentDataChanged();\n\n            // log this event\n            var category = \"StudentInteraction\";\n            var event = \"choiceSelected\";\n            var data = {};\n            data.selectedChoiceId = choiceId;\n            data.choicesAfter = studentChoices;\n            this.StudentDataService.saveComponentEvent(this, category, event, data);\n        }\n    };\n\n    /**\n     * Check if this multiple choice component is using radio buttons\n     * @return whether this multiple choice component is using radio buttons\n     */\n    isRadio() {\n        return this.isChoiceType('radio');\n    };\n\n    /**\n     * Check if this multiple choice component is using checkboxes\n     * @return whether this multiple choice component is using checkboxes\n     */\n    isCheckbox() {\n        return this.isChoiceType('checkbox');\n    };\n\n    /**\n     * Check if the component is authored to use the given choice type\n     * @param choiceType the choice type ('radio' or 'checkbox')\n     * @return whether the component is authored to use the given\n     * choice type\n     */\n    isChoiceType(choiceType) {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type from the component content\n            var componentContentChoiceType = componentContent.choiceType;\n\n            if (choiceType === componentContentChoiceType) {\n                // the choice type matches\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n        this.isCorrect = null;\n        this.hideAllFeedback();\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // TODO: add confirmation dialog if lock after submit is enabled on this component\n\n            // set saveFailed to true; will be set to false on save success response from server\n            this.saveFailed = true;\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n                    // the student does not have any more chances to submit\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n                    /*\n                     * the student has one more chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                } else if (numberOfSubmitsLeft > 1) {\n                    /*\n                     * the student has more than one chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know it is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // clear the isCorrect value because it will be evaluated again later\n                this.isCorrect = null;\n\n                // hide any previous feedback\n                this.hideAllFeedback();\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the choices and buttons\n                     */\n                    this.isDisabled = true;\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.checkAnswer();\n                    this.isLatestComponentStateSubmit = true;\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Hide all the feedback\n     */\n    hideAllFeedback() {\n\n        // get all the choices\n        var choices = this.getChoices();\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n            var choice = choices[c];\n\n            if (choice != null) {\n                // hide all the feedback\n                choice.showFeedback = false;\n            }\n        }\n    };\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    /**\n     * Check the answer the student has submitted and display feedback\n     * for the choices the student has checked\n     */\n    checkAnswer() {\n        var isCorrect = false;\n\n        // check if any correct choices have been authored\n        if (this.hasFeedback() || this.hasCorrectAnswer) {\n\n            var isCorrectSoFar = true;\n\n            // get all the authored choices\n            var choices = this.getChoices();\n\n            // loop through all the choices and check if each should be checked or not\n\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var choiceId = choice.id;\n\n                    // whether the choice is correct\n                    var isChoiceCorrect = choice.isCorrect;\n\n                    // whether the student checked the choice\n                    var isChoiceChecked = this.isChecked(choiceId);\n\n                    if (isChoiceCorrect != isChoiceChecked) {\n                        // the student answered this choice incorrectly\n                        isCorrectSoFar = false;\n                    }\n\n                    // show the feedback if it exists and the student checked it\n                    if (this.showFeedback && isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n                        choice.showFeedback = true;\n                        choice.feedbackToShow = choice.feedback;\n                    }\n                }\n            }\n\n            isCorrect = isCorrectSoFar;\n        }\n\n        if (this.hasCorrectAnswer) {\n            this.isCorrect = isCorrect;\n        }\n    };\n\n    /**\n     * Get the correct choice for a radio button component\n     * @return a choice id string\n     */\n    getCorrectChoice() {\n        var correctChoice = null;\n\n        if (this.componentContent != null) {\n            correctChoice = this.componentContent.correctChoice;\n        }\n\n        return correctChoice;\n    };\n\n    /**\n     * Get the correct choices for a checkbox component\n     * @return an array of correct choice ids\n     */\n    getCorrectChoices() {\n        var correctChoices = null;\n\n        if (this.componentContent != null) {\n            correctChoices = this.componentContent.correctChoices;\n        }\n\n        return correctChoices;\n    };\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n         this.isDirty = true;\n         this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n         this.isSubmitDirty = true;\n         this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n         // clear out the save message\n         this.setSaveMessage('', null);\n\n        // get this component id\n        var componentId = this.getComponentId();\n\n        this.isCorrect = null;\n        this.isLatestComponentStateSubmit = false;\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n\n            var studentData = {};\n\n            // set the student choices into the component state\n            studentData.studentChoices = this.getStudentChoiceObjects();\n\n            if (action === 'submit') {\n                /*\n                 * the student has clicked submit or save so we will\n                 * check if the student has chosen all the correct choices.\n                 * the isCorrect value will be stored in this.isCorrect.\n                 */\n                this.checkAnswer();\n\n                if (this.isCorrect != null) {\n                    // set the isCorrect value into the student data\n                    studentData.isCorrect = this.isCorrect;\n                }\n            } else {\n                /*\n                 * the student data has changed but the student has not\n                 * clicked on the submit or save button so we will not\n                 * check the answer yet.\n                 */\n            }\n\n            if (action === 'submit') {\n                if (this.isSubmit) {\n                    // the student submitted this work\n                    componentState.isSubmit = this.isSubmit;\n\n                    /*\n                     * reset the isSubmit value so that the next component state\n                     * doesn't maintain the same value\n                     */\n                    this.isSubmit = false;\n\n                    /*\n                     * the latest component state is a submit. this is used to\n                     * determine if we should show the feedback.\n                     */\n                    this.isLatestComponentStateSubmit = true;\n                }\n            } else if (action === 'save') {\n                /*\n                 * the latest component state is not a submit. this is used to\n                 * determine if we should show the feedback.\n                 */\n                this.isLatestComponentStateSubmit = false;\n            }\n\n            // set the submit counter\n            studentData.submitCounter = this.submitCounter;\n\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the choices the student has chosen as objects. The objects\n     * will contain the choice id and the choice text.\n     */\n    getStudentChoiceObjects() {\n        var studentChoiceObjects = [];\n\n        /*\n         * get the choices the student has chosen. this will be an\n         * array of choice ids.\n         */\n        var studentChoices = this.studentChoices;\n        var choiceObject = null;\n        var studentChoiceObject = null;\n\n        if (studentChoices != null) {\n\n            if (this.isRadio()) {\n                // this is a radio button component\n\n                // get the choice object\n                choiceObject = this.getChoiceById(studentChoices);\n\n                if (choiceObject != null) {\n                    // create a student choice object and set the id and text\n                    studentChoiceObject = {};\n                    studentChoiceObject.id = choiceObject.id;\n                    studentChoiceObject.text = choiceObject.text;\n\n                    // add the student choice object to our array\n                    studentChoiceObjects.push(studentChoiceObject);\n                }\n            } else if (this.isCheckbox()) {\n                // this is a checkbox component\n\n                // loop through all the choices the student chose\n                for (var x = 0; x < studentChoices.length; x++) {\n\n                    // get a choice id that the student chose\n                    var studentChoiceId = studentChoices[x];\n\n                    // get the choice object\n                    choiceObject = this.getChoiceById(studentChoiceId);\n\n                    if (choiceObject != null) {\n                        // create a student choice object and set the id and text\n                        studentChoiceObject = {};\n                        studentChoiceObject.id = choiceObject.id;\n                        studentChoiceObject.text = choiceObject.text;\n\n                        // add the student choice object to our array\n                        studentChoiceObjects.push(studentChoiceObject);\n                    }\n                }\n            }\n        }\n\n        return studentChoiceObjects;\n    };\n\n    /**\n     * Check if the component has been authored with a correct choice\n     * @return whether the component has been authored with a correct choice\n     */\n    hasCorrectChoices() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.isCorrect) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if there is any feedback\n     * @returns whether there is any feedback\n     */\n    hasFeedback() {\n        var result = false;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var choices = componentContent.choices;\n\n            if (choices != null) {\n\n                // loop through all the authored choices\n                for (var c = 0; c < choices.length; c++) {\n                    var choice = choices[c];\n\n                    if (choice != null) {\n                        if (choice.feedback != null && choice.feedback != '') {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a choice object by choice id\n     * @param choiceId the choice id\n     * @return the choice object with the given choice id\n     */\n    getChoiceById(choiceId) {\n        var choice = null;\n\n        if (choiceId != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice id\n                        var tempChoiceId = tempChoice.id;\n\n                        // check if the choice id matches\n                        if (choiceId === tempChoiceId) {\n                            /*\n                             * the choice id matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    };\n\n    /**\n     * Get a choice by choice text\n     * @param text the choice text\n     * @return the choice with the given text\n     */\n    getChoiceByText(text) {\n\n        var choice = null;\n\n        if (text != null) {\n            // get the component content\n            var componentContent = this.componentContent;\n\n            if (componentContent != null) {\n\n                // get the choices\n                var choices = componentContent.choices;\n\n                // loop through all the choices\n                for (var c = 0; c < choices.length; c++) {\n                    // get a choice\n                    var tempChoice = choices[c];\n\n                    if (tempChoice != null) {\n                        // get a choice text\n                        var tempChoiceText = tempChoice.text;\n\n                        // check if the choice text matches\n                        if (text == tempChoiceText) {\n                            /*\n                             * the choice text matches so we will return this\n                             * choice\n                             */\n                            choice = tempChoice;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return choice;\n    }\n\n    /**\n     * Get the choice type for this component ('radio' or 'checkbox')\n     * @return the choice type for this component\n     */\n    getChoiceType() {\n        var choiceType = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n            // get the choice type\n            choiceType = componentContent.choiceType;\n        }\n\n        return choiceType;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getChoices() {\n        var choices = null;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the choices\n            choices = componentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Get the available choices from component content\n     * @return the available choices from the component content\n     */\n    getAuthoringChoices() {\n        var choices = null;\n\n        // get the component content\n        var authoringComponentContent = this.authoringComponentContent;\n\n        if (authoringComponentContent != null) {\n\n            // get the choices\n            choices = authoringComponentContent.choices;\n        }\n\n        return choices;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n                        /*\n                         * update the choice ids so that it uses the choice ids\n                         * from this component. we need to do this because the choice\n                         * ids are likely to be different. we update the choice ids\n                         * by matching the choice text.\n                         */\n                        this.updateChoiceIdsFromImportedWork(populatedComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Update the choice ids to use the choice ids from this component.\n     * We will use the choice text to match the choices.\n     * @param componentState the component state\n     */\n    updateChoiceIdsFromImportedWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the choices the student chose\n                var studentChoices = studentData.studentChoices;\n\n                if (studentChoices != null) {\n\n                    // loop through all the choices the student chose\n                    for (var s = 0; s < studentChoices.length; s++) {\n\n                        // get a choice the student chose\n                        var studentChoice = studentChoices[s];\n\n                        if (studentChoice != null) {\n\n                            // get the choice text\n                            var studentChoiceText = studentChoice.text;\n\n                            // get the choice in this component with the given tetxt\n                            var choice = this.getChoiceByText(studentChoiceText);\n\n                            if (choice != null) {\n\n                                // get the choice id\n                                var choiceId = choice.id;\n\n                                // update the id to have the id from this component\n                                studentChoice.id = choiceId;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * Check if this component has been authored to have feedback or has a\n     * correct choice\n     * @return whether this component has feedback or has a correct choice\n     */\n    componentHasFeedback() {\n\n        // get the choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n\n                    if (choice.feedback != null && choice.feedback != '') {\n                        // the choice has feedback\n                        return true;\n                    }\n\n                    if (choice.isCorrect) {\n                        // the choice is correct\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * The author has changed the feedback so we will enable the submit button\n     */\n    authoringViewFeedbackChanged() {\n\n        var show = true;\n\n        if (this.componentHasFeedback()) {\n            // this component has feedback so we will show the submit button\n            show = true;\n        } else {\n            /*\n             * this component does not have feedback so we will not show the\n             * submit button\n             */\n            show = false;\n        }\n\n        // show or hide the submit button\n        this.setShowSubmitButtonValue(show);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // clean up the choices by removing fields injected by the controller during run time\n        //this.cleanUpChoices();\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Add a choice from within the authoring tool\n     */\n    addChoice() {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        // make the new choice\n        var newChoice = {};\n        newChoice.id = this.UtilService.generateKey(10);\n        newChoice.text = '';\n        newChoice.feedback = '';\n        newChoice.isCorrect = false;\n\n        // add the new choice\n        choices.push(newChoice);\n\n        // save the component\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a choice from within the authoring tool\n     * @param choiceId\n     */\n    deleteChoice(choiceId) {\n\n        // get the authored choices\n        var choices = this.authoringComponentContent.choices;\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    var tempChoiceId = choice.id;\n\n                    if (choiceId === tempChoiceId) {\n                        // we have found the choice that we want to delete so we will remove it\n                        choices.splice(c, 1);\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Clean up the choice objects. In the authoring tool this is required\n     * because we use the choice objects as ng-model values and inject\n     * fields into the choice objects such as showFeedback and feedbackToShow.\n     */\n    cleanUpChoices() {\n\n        // get the authored choices\n        var choices = this.getAuthoringChoices();\n\n        if (choices != null) {\n\n            // loop through all the authored choices\n            for (var c = 0; c < choices.length; c++) {\n                var choice = choices[c];\n\n                if (choice != null) {\n                    // remove the fields we don't want to be saved\n                    delete choice.showFeedback;\n                    delete choice.feedbackToShow;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nMultipleChoiceController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'MultipleChoiceService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}