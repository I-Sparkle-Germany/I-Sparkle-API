{"version":3,"sources":["multipleChoiceController.es6"],"names":["MultipleChoiceController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentChoices","isCorrect","showFeedback","latestAnnotations","hasCorrectAnswer","isLatestComponentStateSubmit","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","originalComponentContent","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","hasCorrectChoices","componentType","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","isSubmit","maxSubmitCount","submitCounter","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","getState","action","multipleChoiceController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","saveFailed","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","targetObject","authoringViewComponentChanged","hide","showAdvancedAuthoring","$broadcast","studentData","choiceIds","getChoiceIdsFromStudentData","isRadio","isCheckbox","showFeedbackForChoiceIds","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","c","length","choiceId","choiceObject","getChoiceById","feedbackToShow","feedback","result","indexOf","x","studentDataChoice","studentDataChoiceId","id","push","studentDataChanged","category","data","selectedChoiceId","saveComponentEvent","index","splice","choicesAfter","isChoiceType","choiceType","componentContentChoiceType","hideAllFeedback","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","checkAnswer","choices","getChoices","choice","hasFeedback","isCorrectSoFar","isChoiceCorrect","isChoiceChecked","isChecked","correctChoice","correctChoices","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentChoiceObjects","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","studentChoiceObjects","studentChoiceObject","studentChoiceId","tempChoice","tempChoiceId","tempChoiceText","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","updateChoiceIdsFromImportedWork","s","studentChoice","studentChoiceText","getChoiceByText","show","componentHasFeedback","setShowSubmitButtonValue","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","newChoice","generateKey","answer","confirm","getAuthoringChoices","time","saveMessage","exitListener","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","params","isPopup","tags","tag","connectedComponents","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedStudentChoices","concat","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass MultipleChoiceController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      MultipleChoiceService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.MultipleChoiceService = MultipleChoiceService;\n\n    // holds the ids of the choices the student has chosen\n    this.studentChoices = [];\n\n    // holds whether the student answered correctly if there is a correct answer\n    this.isCorrect = null;\n\n    // whether to show the feedback or not\n    this.showFeedback = true;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether this component has been authored with a correct answer\n    this.hasCorrectAnswer = false;\n\n    // whether the latest component state was a submit\n    this.isLatestComponentStateSubmit = false;\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'MultipleChoice'\n      }\n    ];\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'authoring') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // generate the summernote rubric element id\n      this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n      // set the component rubric into the summernote rubric\n      this.summernoteRubricHTML = this.componentContent.rubric;\n\n      // the tooltip text for the insert WISE asset button\n      var insertAssetString = this.$translate('INSERT_ASSET');\n\n      /*\n       * create the custom button for inserting WISE assets into\n       * summernote\n       */\n      var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n      /*\n       * the options that specifies the tools to display in the\n       * summernote prompt\n       */\n      this.summernoteRubricOptions = {\n        toolbar: [\n          ['style', ['style']],\n          ['font', ['bold', 'underline', 'clear']],\n          ['fontname', ['fontname']],\n          ['fontsize', ['fontsize']],\n          ['color', ['color']],\n          ['para', ['ul', 'ol', 'paragraph']],\n          ['table', ['table']],\n          ['insert', ['link', 'video']],\n          ['view', ['fullscreen', 'codeview', 'help']],\n          ['customButton', ['insertAssetButton']]\n        ],\n        height: 300,\n        disableDragAndDrop: true,\n        buttons: {\n          insertAssetButton: InsertAssetButton\n        }\n      };\n\n      this.updateAdvancedAuthoringView();\n\n      $scope.$watch(function() {\n        return this.authoringComponentContent;\n      }.bind(this), function(newValue, oldValue) {\n        this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      }.bind(this), true);\n    }\n\n    // check if there is a correct answer\n    this.hasCorrectAnswer = this.hasCorrectChoices();\n\n    this.showFeedback = this.componentContent.showFeedback;\n\n    // get the component type\n    this.componentType = this.componentContent.type;\n\n    var componentState = null;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.MultipleChoiceService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    if (componentState != null && componentState.isSubmit) {\n      /*\n       * the latest component state is a submit. this is used to\n       * determine if we should show the feedback.\n       */\n      this.isLatestComponentStateSubmit = true;\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the choices and the submit button\n       */\n      this.isDisabled = true;\n      this.isSubmitButtonDisabled = true;\n    }\n\n    // check if we need to lock this component\n    this.calculateDisabled();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.multipleChoiceController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.multipleChoiceController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.multipleChoiceController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        // set saveFailed to false because the save was successful\n        this.saveFailed = false;\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              if (args.target == 'prompt' || args.target == 'rubric') {\n                var summernoteId = '';\n\n                if (args.target == 'prompt') {\n                  // the target is the summernote prompt element\n                  summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                } else if (args.target == 'rubric') {\n                  // the target is the summernote rubric element\n                  summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                }\n\n                if (summernoteId != '') {\n                  if (this.UtilService.isImage(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // add the image html\n                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                  } else if (this.UtilService.isVideo(fileName)) {\n                    /*\n                     * move the cursor back to its position when the asset chooser\n                     * popup was clicked\n                     */\n                    $('#' + summernoteId).summernote('editor.restoreRange');\n                    $('#' + summernoteId).summernote('editor.focus');\n\n                    // insert the video element\n                    var videoElement = document.createElement('video');\n                    videoElement.controls = 'true';\n                    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                  }\n                }\n              } else if (args.target == 'choice') {\n                // the target is a choice\n\n                /*\n                 * get the target object which should be a\n                 * choice object\n                 */\n                var targetObject = args.targetObject;\n\n                if (targetObject != null) {\n\n                  // create the img html\n                  var text = '<img src=\"' + fileName + '\"/>';\n\n                  // set the html into the choice text\n                  targetObject.text = text;\n\n                  // save the component\n                  this.authoringViewComponentChanged();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // get the choice ids the student previously chose\n        var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n        // set the choice(s) the student previously chose\n        if (this.isRadio()) {\n          this.studentChoices = choiceIds[0];\n        } else if (this.isCheckbox()) {\n          this.studentChoices = choiceIds;\n        }\n\n        if (studentData.isCorrect != null) {\n          this.isCorrect = studentData.isCorrect;\n        }\n\n        if (this.showFeedback && componentState.isSubmit) {\n          // the previous work was a submit so we will show the feedback\n          this.showFeedbackForChoiceIds(choiceIds);\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  showFeedbackForChoiceIds(choiceIds) {\n\n    if (choiceIds != null) {\n      for (var c = 0; c < choiceIds.length; c++) {\n        var choiceId = choiceIds[c];\n\n        var choiceObject = this.getChoiceById(choiceId);\n\n        if (choiceObject != null) {\n          choiceObject.showFeedback = true;\n          choiceObject.feedbackToShow = choiceObject.feedback;\n        }\n      }\n    }\n  };\n\n  /**\n   * Determine if the choice id has been checked\n   * @param the choice id to look at\n   * @return whether the choice id was checked\n   */\n  isChecked(choiceId) {\n    var result = false;\n\n    // get the choices the student chose\n    var studentChoices = this.studentChoices;\n\n    if (studentChoices != null) {\n      if (this.isRadio()) {\n        // this is a radio button step\n\n        if (choiceId === studentChoices) {\n          // the student checked the choice id\n          result = true;\n        }\n      } else if(this.isCheckbox()) {\n        // this is a checkbox step\n\n        if (studentChoices.indexOf(choiceId) != -1) {\n          // the student checked the choice id\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the choice ids from the student data\n   * @param studentData an array that contains the objects of the\n   * choices the student chose\n   * @return an array containing the choice id(s) the student chose\n   */\n  getChoiceIdsFromStudentData(studentData) {\n    var choiceIds = [];\n\n    if (studentData != null && studentData.studentChoices != null) {\n\n      // get the choices the student chose\n      var studentChoices = studentData.studentChoices;\n\n      // loop through all the choice objects in the student data\n      for (var x = 0; x < studentChoices.length; x++) {\n        // get a choice object\n        var studentDataChoice = studentChoices[x];\n\n        if (studentDataChoice != null) {\n          // get the choice id\n          var studentDataChoiceId = studentDataChoice.id;\n\n          // add the choice id to our array\n          choiceIds.push(studentDataChoiceId);\n        }\n      }\n    }\n\n    return choiceIds;\n  };\n\n  /**\n   * The student clicked on one of the radio button choices\n   * @param choiceId the choice id of the radio button the student clicked\n   */\n  radioChoiceSelected(choiceId) {\n    // notify this node that the student choice has changed\n    this.studentDataChanged();\n\n    if (choiceId != null) {\n      // log this event\n      var category = 'StudentInteraction';\n      var event = 'choiceSelected';\n      var data = {};\n      data.selectedChoiceId = choiceId;\n      this.StudentDataService.saveComponentEvent(this, category, event, data);\n    }\n  };\n\n  /**\n   * The student clicked on one of the check box choices\n   * @param choiceId the choice id of the checkbox the student clicked\n   */\n  toggleSelection(choiceId) {\n\n    if (choiceId != null) {\n      /*\n       * get the array of choice ids that were checked before the\n       * student clicked the most current check box\n       */\n      var studentChoices = this.studentChoices;\n\n      if (studentChoices != null) {\n        /*\n         * check if the newest check is in the array of checked\n         * choices\n         */\n        var index = studentChoices.indexOf(choiceId);\n\n        if (index == -1) {\n          /*\n           * the choice was not previously checked so we will add\n           * the choice id to the array\n           */\n          studentChoices.push(choiceId);\n        } else {\n          /*\n           * the choice was previously checked so we will remove\n           * the choice id from the array\n           */\n          studentChoices.splice(index, 1);\n        }\n      }\n\n      // notify this node that the student choice has changed\n      this.studentDataChanged();\n\n      // log this event\n      var category = 'StudentInteraction';\n      var event = 'choiceSelected';\n      var data = {};\n      data.selectedChoiceId = choiceId;\n      data.choicesAfter = studentChoices;\n      this.StudentDataService.saveComponentEvent(this, category, event, data);\n    }\n  };\n\n  /**\n   * Check if this multiple choice component is using radio buttons\n   * @return whether this multiple choice component is using radio buttons\n   */\n  isRadio() {\n    return this.isChoiceType('radio');\n  };\n\n  /**\n   * Check if this multiple choice component is using checkboxes\n   * @return whether this multiple choice component is using checkboxes\n   */\n  isCheckbox() {\n    return this.isChoiceType('checkbox');\n  };\n\n  /**\n   * Check if the component is authored to use the given choice type\n   * @param choiceType the choice type ('radio' or 'checkbox')\n   * @return whether the component is authored to use the given\n   * choice type\n   */\n  isChoiceType(choiceType) {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n      // get the choice type from the component content\n      var componentContentChoiceType = componentContent.choiceType;\n\n      if (choiceType === componentContentChoiceType) {\n        // the choice type matches\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  saveButtonClicked() {\n    this.isCorrect = null;\n    this.hideAllFeedback();\n    super.saveButtonClicked();\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // TODO: add confirmation dialog if lock after submit is enabled on this component\n\n      // set saveFailed to true; will be set to false on save success response from server\n      this.saveFailed = true;\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know it is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // clear the isCorrect value because it will be evaluated again later\n        this.isCorrect = null;\n\n        // hide any previous feedback\n        this.hideAllFeedback();\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the choices and buttons\n           */\n          this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.checkAnswer();\n          this.isLatestComponentStateSubmit = true;\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Hide all the feedback\n   */\n  hideAllFeedback() {\n\n    // get all the choices\n    var choices = this.getChoices();\n\n    // loop through all the choices\n    for (var c = 0; c < choices.length; c++) {\n      var choice = choices[c];\n\n      if (choice != null) {\n        // hide all the feedback\n        choice.showFeedback = false;\n      }\n    }\n  };\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  /**\n   * Check the answer the student has submitted and display feedback\n   * for the choices the student has checked\n   */\n  checkAnswer() {\n    var isCorrect = false;\n\n    // check if any correct choices have been authored\n    if (this.hasFeedback() || this.hasCorrectAnswer) {\n\n      var isCorrectSoFar = true;\n\n      // get all the authored choices\n      var choices = this.getChoices();\n\n      // loop through all the choices and check if each should be checked or not\n\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var choiceId = choice.id;\n\n          // whether the choice is correct\n          var isChoiceCorrect = choice.isCorrect;\n\n          if (isChoiceCorrect == null) {\n            isChoiceCorrect = false;\n          }\n\n          // whether the student checked the choice\n          var isChoiceChecked = this.isChecked(choiceId);\n\n          if (isChoiceCorrect != isChoiceChecked) {\n            // the student answered this choice incorrectly\n            isCorrectSoFar = false;\n          }\n\n          // show the feedback if it exists and the student checked it\n          if (this.showFeedback && isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n            choice.showFeedback = true;\n            choice.feedbackToShow = choice.feedback;\n          }\n        }\n      }\n\n      isCorrect = isCorrectSoFar;\n    }\n\n    if (this.hasCorrectAnswer) {\n      this.isCorrect = isCorrect;\n    }\n  };\n\n  /**\n   * Get the correct choice for a radio button component\n   * @return a choice id string\n   */\n  getCorrectChoice() {\n    var correctChoice = null;\n\n    if (this.componentContent != null) {\n      correctChoice = this.componentContent.correctChoice;\n    }\n\n    return correctChoice;\n  };\n\n  /**\n   * Get the correct choices for a checkbox component\n   * @return an array of correct choice ids\n   */\n  getCorrectChoices() {\n    var correctChoices = null;\n\n    if (this.componentContent != null) {\n      correctChoices = this.componentContent.correctChoices;\n    }\n\n    return correctChoices;\n  };\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n     this.isDirty = true;\n     this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n     this.isSubmitDirty = true;\n     this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n     // clear out the save message\n     this.setSaveMessage('', null);\n\n    // get this component id\n    var componentId = this.getComponentId();\n\n    this.isCorrect = null;\n    this.isLatestComponentStateSubmit = false;\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n\n      var studentData = {};\n\n      // set the student choices into the component state\n      studentData.studentChoices = this.getStudentChoiceObjects();\n\n      if (action === 'submit') {\n        /*\n         * the student has clicked submit or save so we will\n         * check if the student has chosen all the correct choices.\n         * the isCorrect value will be stored in this.isCorrect.\n         */\n        this.checkAnswer();\n\n        if (this.isCorrect != null) {\n          // set the isCorrect value into the student data\n          studentData.isCorrect = this.isCorrect;\n        }\n      } else {\n        /*\n         * the student data has changed but the student has not\n         * clicked on the submit or save button so we will not\n         * check the answer yet.\n         */\n      }\n\n      if (action === 'submit') {\n        if (this.isSubmit) {\n          // the student submitted this work\n          componentState.isSubmit = this.isSubmit;\n\n          /*\n           * reset the isSubmit value so that the next component state\n           * doesn't maintain the same value\n           */\n          this.isSubmit = false;\n\n          /*\n           * the latest component state is a submit. this is used to\n           * determine if we should show the feedback.\n           */\n          this.isLatestComponentStateSubmit = true;\n        }\n      } else if (action === 'save') {\n        /*\n         * the latest component state is not a submit. this is used to\n         * determine if we should show the feedback.\n         */\n        this.isLatestComponentStateSubmit = false;\n      }\n\n      // set the submit counter\n      studentData.submitCounter = this.submitCounter;\n\n      componentState.studentData = studentData;\n\n      // set the component type\n      componentState.componentType = 'MultipleChoice';\n\n      // set the node id\n      componentState.nodeId = this.nodeId;\n\n      // set the component id\n      componentState.componentId = this.componentId;\n    }\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the choices the student has chosen as objects. The objects\n   * will contain the choice id and the choice text.\n   */\n  getStudentChoiceObjects() {\n    var studentChoiceObjects = [];\n\n    /*\n     * get the choices the student has chosen. this will be an\n     * array of choice ids.\n     */\n    var studentChoices = this.studentChoices;\n    var choiceObject = null;\n    var studentChoiceObject = null;\n\n    if (studentChoices != null) {\n\n      if (this.isRadio()) {\n        // this is a radio button component\n\n        // get the choice object\n        choiceObject = this.getChoiceById(studentChoices);\n\n        if (choiceObject != null) {\n          // create a student choice object and set the id and text\n          studentChoiceObject = {};\n          studentChoiceObject.id = choiceObject.id;\n          studentChoiceObject.text = choiceObject.text;\n\n          // add the student choice object to our array\n          studentChoiceObjects.push(studentChoiceObject);\n        }\n      } else if (this.isCheckbox()) {\n        // this is a checkbox component\n\n        // loop through all the choices the student chose\n        for (var x = 0; x < studentChoices.length; x++) {\n\n          // get a choice id that the student chose\n          var studentChoiceId = studentChoices[x];\n\n          // get the choice object\n          choiceObject = this.getChoiceById(studentChoiceId);\n\n          if (choiceObject != null) {\n            // create a student choice object and set the id and text\n            studentChoiceObject = {};\n            studentChoiceObject.id = choiceObject.id;\n            studentChoiceObject.text = choiceObject.text;\n\n            // add the student choice object to our array\n            studentChoiceObjects.push(studentChoiceObject);\n          }\n        }\n      }\n    }\n\n    return studentChoiceObjects;\n  };\n\n  /**\n   * Check if the component has been authored with a correct choice\n   * @return whether the component has been authored with a correct choice\n   */\n  hasCorrectChoices() {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var choices = componentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            if (choice.isCorrect) {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if there is any feedback\n   * @returns whether there is any feedback\n   */\n  hasFeedback() {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var choices = componentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            if (choice.feedback != null && choice.feedback != '') {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get a choice object by choice id\n   * @param choiceId the choice id\n   * @return the choice object with the given choice id\n   */\n  getChoiceById(choiceId) {\n    var choice = null;\n\n    if (choiceId != null) {\n      // get the component content\n      var componentContent = this.componentContent;\n\n      if (componentContent != null) {\n\n        // get the choices\n        var choices = componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n          // get a choice\n          var tempChoice = choices[c];\n\n          if (tempChoice != null) {\n            // get a choice id\n            var tempChoiceId = tempChoice.id;\n\n            // check if the choice id matches\n            if (choiceId === tempChoiceId) {\n              /*\n               * the choice id matches so we will return this\n               * choice\n               */\n              choice = tempChoice;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return choice;\n  };\n\n  /**\n   * Get a choice by choice text\n   * @param text the choice text\n   * @return the choice with the given text\n   */\n  getChoiceByText(text) {\n\n    var choice = null;\n\n    if (text != null) {\n      // get the component content\n      var componentContent = this.componentContent;\n\n      if (componentContent != null) {\n\n        // get the choices\n        var choices = componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n          // get a choice\n          var tempChoice = choices[c];\n\n          if (tempChoice != null) {\n            // get a choice text\n            var tempChoiceText = tempChoice.text;\n\n            // check if the choice text matches\n            if (text == tempChoiceText) {\n              /*\n               * the choice text matches so we will return this\n               * choice\n               */\n              choice = tempChoice;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return choice;\n  }\n\n  /**\n   * Get the choice type for this component ('radio' or 'checkbox')\n   * @return the choice type for this component\n   */\n  getChoiceType() {\n    var choiceType = null;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n      // get the choice type\n      choiceType = componentContent.choiceType;\n    }\n\n    return choiceType;\n  };\n\n  /**\n   * Get the available choices from component content\n   * @return the available choices from the component content\n   */\n  getChoices() {\n    var choices = null;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the choices\n      choices = componentContent.choices;\n    }\n\n    return choices;\n  };\n\n  /**\n   * Get the available choices from component content\n   * @return the available choices from the component content\n   */\n  getAuthoringChoices() {\n    var choices = null;\n\n    // get the component content\n    var authoringComponentContent = this.authoringComponentContent;\n\n    if (authoringComponentContent != null) {\n\n      // get the choices\n      choices = authoringComponentContent.choices;\n    }\n\n    return choices;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n            /*\n             * update the choice ids so that it uses the choice ids\n             * from this component. we need to do this because the choice\n             * ids are likely to be different. we update the choice ids\n             * by matching the choice text.\n             */\n            this.updateChoiceIdsFromImportedWork(populatedComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Update the choice ids to use the choice ids from this component.\n   * We will use the choice text to match the choices.\n   * @param componentState the component state\n   */\n  updateChoiceIdsFromImportedWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the choices the student chose\n        var studentChoices = studentData.studentChoices;\n\n        if (studentChoices != null) {\n\n          // loop through all the choices the student chose\n          for (var s = 0; s < studentChoices.length; s++) {\n\n            // get a choice the student chose\n            var studentChoice = studentChoices[s];\n\n            if (studentChoice != null) {\n\n              // get the choice text\n              var studentChoiceText = studentChoice.text;\n\n              // get the choice in this component with the given tetxt\n              var choice = this.getChoiceByText(studentChoiceText);\n\n              if (choice != null) {\n\n                // get the choice id\n                var choiceId = choice.id;\n\n                // update the id to have the id from this component\n                studentChoice.id = choiceId;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * Check if this component has been authored to have feedback or has a\n   * correct choice\n   * @return whether this component has feedback or has a correct choice\n   */\n  componentHasFeedback() {\n\n    // get the choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n\n          if (choice.feedback != null && choice.feedback != '') {\n            // the choice has feedback\n            return true;\n          }\n\n          if (choice.isCorrect) {\n            // the choice is correct\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The author has changed the feedback so we will enable the submit button\n   */\n  authoringViewFeedbackChanged() {\n\n    var show = true;\n\n    if (this.componentHasFeedback()) {\n      // this component has feedback so we will show the submit button\n      show = true;\n    } else {\n      /*\n       * this component does not have feedback so we will not show the\n       * submit button\n       */\n      show = false;\n    }\n\n    // show or hide the submit button\n    this.setShowSubmitButtonValue(show);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // clean up the choices by removing fields injected by the controller during run time\n    //this.cleanUpChoices();\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Add a choice from within the authoring tool\n   */\n  addChoice() {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    // make the new choice\n    var newChoice = {};\n    newChoice.id = this.UtilService.generateKey(10);\n    newChoice.text = '';\n    newChoice.feedback = '';\n    newChoice.isCorrect = false;\n\n    // add the new choice\n    choices.push(newChoice);\n\n    // save the component\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a choice from within the authoring tool\n   * @param choiceId\n   */\n  deleteChoice(choiceId) {\n\n    // ask the author if they are sure they want to delete the choice\n    var answer = confirm(this.$translate('multipleChoice.areYouSureYouWantToDeleteThisChoice'));\n\n    if (answer) {\n      // the author answered yes to delete the choice\n\n      // get the authored choices\n      var choices = this.authoringComponentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            var tempChoiceId = choice.id;\n\n            if (choiceId === tempChoiceId) {\n              // we have found the choice that we want to delete so we will remove it\n              choices.splice(c, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a choice up\n   * @param choiceId the choice to move\n   */\n  moveChoiceUp(choiceId) {\n\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == 0) {\n              /*\n               * the choice is the first choice so we can't move\n               * it up\n               */\n            } else {\n              // we have found the choice that we want to move up\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index back\n              choices.splice(c - 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a choice down\n   * @param choiceId the choice to move\n   */\n  moveChoiceDown(choiceId) {\n    // get the authored choices\n    var choices = this.authoringComponentContent.choices;\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var tempChoiceId = choice.id;\n\n          if (choiceId === tempChoiceId) {\n\n            if (c == choices.length - 1) {\n              /*\n               * the choice is the last choice so we can't move\n               * it down\n               */\n            } else {\n              // we have found the choice that we want to move down\n\n              // remove the choice\n              choices.splice(c, 1);\n\n              // add the choice one index forward\n              choices.splice(c + 1, 0, choice);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clean up the choice objects. In the authoring tool this is required\n   * because we use the choice objects as ng-model values and inject\n   * fields into the choice objects such as showFeedback and feedbackToShow.\n   */\n  cleanUpChoices() {\n\n    // get the authored choices\n    var choices = this.getAuthoringChoices();\n\n    if (choices != null) {\n\n      // loop through all the authored choices\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          // remove the fields we don't want to be saved\n          delete choice.showFeedback;\n          delete choice.feedbackToShow;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Show the asset popup to allow the author to choose an image for the\n   * choice\n   * @param choice the choice object to set the image into\n   */\n  chooseChoiceAsset(choice) {\n    // generate the parameters\n    var params = {};\n    params.isPopup = true;\n    params.nodeId = this.nodeId;\n    params.componentId = this.componentId;\n    params.target = 'choice';\n    params.targetObject = choice;\n\n    // display the asset chooser\n    this.$rootScope.$broadcast('openAssetChooser', params);\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedStudentChoices = [];\n      /*\n       * loop through all the component states to accumulate all the\n       * choices the student chose\n       */\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            let studentChoices = studentData.studentChoices;\n            if (studentChoices != null && studentChoices.length > 0) {\n              mergedStudentChoices = mergedStudentChoices.concat(studentChoices);\n            }\n          }\n        }\n      }\n      if (mergedStudentChoices != null && mergedStudentChoices != '') {\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.studentChoices = mergedStudentChoices;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n};\n\nMultipleChoiceController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'MultipleChoiceService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}