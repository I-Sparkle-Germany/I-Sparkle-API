{"version":3,"sources":["multipleChoiceController.es6"],"names":["MultipleChoiceController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","MultipleChoiceService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentChoices","isCorrect","showFeedback","latestAnnotations","hasCorrectAnswer","isLatestComponentStateSubmit","originalComponentContent","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","hasCorrectChoices","componentType","type","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","isSubmit","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","getState","action","multipleChoiceController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","bind","$on","angular","event","args","$broadcast","submit","studentData","choiceIds","getChoiceIdsFromStudentData","isRadio","isCheckbox","showFeedbackForChoiceIds","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","$emit","setSaveMessage","$translate","c","length","choiceId","choiceObject","getChoiceById","feedbackToShow","feedback","result","indexOf","x","studentDataChoice","studentDataChoiceId","id","push","studentDataChanged","category","data","selectedChoiceId","saveComponentEvent","index","splice","choicesAfter","isChoiceType","choiceType","componentContentChoiceType","hideAllFeedback","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","checkAnswer","choices","getChoices","choice","hasFeedback","isCorrectSoFar","isChoiceCorrect","isChoiceChecked","isChecked","correctChoice","correctChoices","createNewComponentState","getStudentChoiceObjects","createComponentStateAdditionalProcessing","studentChoiceObjects","studentChoiceObject","text","studentChoiceId","tempChoice","tempChoiceId","tempChoiceText","importWorkComponentState","populatedComponentState","populateComponentState","updateChoiceIdsFromImportedWork","s","studentChoice","studentChoiceText","getChoiceByText","exitListener","componentStates","mergedComponentState","mergedStudentChoices","concat","$inject"],"mappings":"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","file":"multipleChoiceController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass MultipleChoiceController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      MultipleChoiceService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.MultipleChoiceService = MultipleChoiceService;\n\n    // holds the ids of the choices the student has chosen\n    this.studentChoices = [];\n\n    // holds whether the student answered correctly if there is a correct answer\n    this.isCorrect = null;\n\n    // whether to show the feedback or not\n    this.showFeedback = true;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether this component has been authored with a correct answer\n    this.hasCorrectAnswer = false;\n\n    // whether the latest component state was a submit\n    this.isLatestComponentStateSubmit = false;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    // check if there is a correct answer\n    this.hasCorrectAnswer = this.hasCorrectChoices();\n\n    this.showFeedback = this.componentContent.showFeedback;\n\n    // get the component type\n    this.componentType = this.componentContent.type;\n\n    var componentState = null;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.MultipleChoiceService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        // check if we need to import work\n        var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n        var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n        if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n          /*\n           * check if the node id is in the field that we used to store\n           * the import previous work node id in\n           */\n          importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n        }\n\n        if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n          /*\n           * check if the component id is in the field that we used to store\n           * the import previous work component id in\n           */\n          importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n        }\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    if (componentState != null && componentState.isSubmit) {\n      /*\n       * the latest component state is a submit. this is used to\n       * determine if we should show the feedback.\n       */\n      this.isLatestComponentStateSubmit = true;\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the choices and the submit button\n       */\n      this.isDisabled = true;\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.multipleChoiceController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.multipleChoiceController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.multipleChoiceController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  };\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // get the choice ids the student previously chose\n        var choiceIds = this.getChoiceIdsFromStudentData(studentData);\n\n        // set the choice(s) the student previously chose\n        if (this.isRadio()) {\n          this.studentChoices = choiceIds[0];\n        } else if (this.isCheckbox()) {\n          this.studentChoices = choiceIds;\n        }\n\n        if (studentData.isCorrect != null) {\n          this.isCorrect = studentData.isCorrect;\n        }\n\n        if (this.showFeedback && componentState.isSubmit) {\n          // the previous work was a submit so we will show the feedback\n          this.showFeedbackForChoiceIds(choiceIds);\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  showFeedbackForChoiceIds(choiceIds) {\n\n    if (choiceIds != null) {\n      for (var c = 0; c < choiceIds.length; c++) {\n        var choiceId = choiceIds[c];\n\n        var choiceObject = this.getChoiceById(choiceId);\n\n        if (choiceObject != null) {\n          choiceObject.showFeedback = true;\n          choiceObject.feedbackToShow = choiceObject.feedback;\n        }\n      }\n    }\n  };\n\n  /**\n   * Determine if the choice id has been checked\n   * @param the choice id to look at\n   * @return whether the choice id was checked\n   */\n  isChecked(choiceId) {\n    var result = false;\n\n    // get the choices the student chose\n    var studentChoices = this.studentChoices;\n\n    if (studentChoices != null) {\n      if (this.isRadio()) {\n        // this is a radio button step\n\n        if (choiceId === studentChoices) {\n          // the student checked the choice id\n          result = true;\n        }\n      } else if(this.isCheckbox()) {\n        // this is a checkbox step\n\n        if (studentChoices.indexOf(choiceId) != -1) {\n          // the student checked the choice id\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the choice ids from the student data\n   * @param studentData an array that contains the objects of the\n   * choices the student chose\n   * @return an array containing the choice id(s) the student chose\n   */\n  getChoiceIdsFromStudentData(studentData) {\n    var choiceIds = [];\n\n    if (studentData != null && studentData.studentChoices != null) {\n\n      // get the choices the student chose\n      var studentChoices = studentData.studentChoices;\n\n      // loop through all the choice objects in the student data\n      for (var x = 0; x < studentChoices.length; x++) {\n        // get a choice object\n        var studentDataChoice = studentChoices[x];\n\n        if (studentDataChoice != null) {\n          // get the choice id\n          var studentDataChoiceId = studentDataChoice.id;\n\n          // add the choice id to our array\n          choiceIds.push(studentDataChoiceId);\n        }\n      }\n    }\n\n    return choiceIds;\n  };\n\n  /**\n   * The student clicked on one of the radio button choices\n   * @param choiceId the choice id of the radio button the student clicked\n   */\n  radioChoiceSelected(choiceId) {\n    this.studentDataChanged();\n\n    if (choiceId != null) {\n      // log this event\n      var category = 'StudentInteraction';\n      var event = 'choiceSelected';\n      var data = {};\n      data.selectedChoiceId = choiceId;\n      this.StudentDataService.saveComponentEvent(this, category, event, data);\n    }\n  };\n\n  /**\n   * The student clicked on one of the check box choices\n   * @param choiceId the choice id of the checkbox the student clicked\n   */\n  toggleSelection(choiceId) {\n\n    if (choiceId != null) {\n      /*\n       * get the array of choice ids that were checked before the\n       * student clicked the most current check box\n       */\n      var studentChoices = this.studentChoices;\n\n      if (studentChoices != null) {\n        /*\n         * check if the newest check is in the array of checked\n         * choices\n         */\n        var index = studentChoices.indexOf(choiceId);\n\n        if (index == -1) {\n          /*\n           * the choice was not previously checked so we will add\n           * the choice id to the array\n           */\n          studentChoices.push(choiceId);\n        } else {\n          /*\n           * the choice was previously checked so we will remove\n           * the choice id from the array\n           */\n          studentChoices.splice(index, 1);\n        }\n      }\n      this.studentDataChanged();\n\n      // log this event\n      var category = 'StudentInteraction';\n      var event = 'choiceSelected';\n      var data = {};\n      data.selectedChoiceId = choiceId;\n      data.choicesAfter = studentChoices;\n      this.StudentDataService.saveComponentEvent(this, category, event, data);\n    }\n  };\n\n  /**\n   * Check if this multiple choice component is using radio buttons\n   * @return whether this multiple choice component is using radio buttons\n   */\n  isRadio() {\n    return this.isChoiceType('radio');\n  };\n\n  /**\n   * Check if this multiple choice component is using checkboxes\n   * @return whether this multiple choice component is using checkboxes\n   */\n  isCheckbox() {\n    return this.isChoiceType('checkbox');\n  };\n\n  /**\n   * Check if the component is authored to use the given choice type\n   * @param choiceType the choice type ('radio' or 'checkbox')\n   * @return whether the component is authored to use the given\n   * choice type\n   */\n  isChoiceType(choiceType) {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n      // get the choice type from the component content\n      var componentContentChoiceType = componentContent.choiceType;\n\n      if (choiceType === componentContentChoiceType) {\n        // the choice type matches\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  saveButtonClicked() {\n    this.isCorrect = null;\n    this.hideAllFeedback();\n    super.saveButtonClicked();\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // TODO: add confirmation dialog if lock after submit is enabled on this component\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know it is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // clear the isCorrect value because it will be evaluated again later\n        this.isCorrect = null;\n\n        // hide any previous feedback\n        this.hideAllFeedback();\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the choices and buttons\n           */\n          this.isDisabled = true;\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.checkAnswer();\n          this.isLatestComponentStateSubmit = true;\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Hide all the feedback\n   */\n  hideAllFeedback() {\n\n    // get all the choices\n    var choices = this.getChoices();\n\n    // loop through all the choices\n    for (var c = 0; c < choices.length; c++) {\n      var choice = choices[c];\n\n      if (choice != null) {\n        // hide all the feedback\n        choice.showFeedback = false;\n      }\n    }\n  };\n\n  /**\n   * Check the answer the student has submitted and display feedback\n   * for the choices the student has checked\n   */\n  checkAnswer() {\n    var isCorrect = false;\n\n    // check if any correct choices have been authored\n    if (this.hasFeedback() || this.hasCorrectAnswer) {\n\n      var isCorrectSoFar = true;\n\n      // get all the authored choices\n      var choices = this.getChoices();\n\n      // loop through all the choices and check if each should be checked or not\n\n      for (var c = 0; c < choices.length; c++) {\n        var choice = choices[c];\n\n        if (choice != null) {\n          var choiceId = choice.id;\n\n          // whether the choice is correct\n          var isChoiceCorrect = choice.isCorrect;\n\n          if (isChoiceCorrect == null) {\n            isChoiceCorrect = false;\n          }\n\n          // whether the student checked the choice\n          var isChoiceChecked = this.isChecked(choiceId);\n\n          if (isChoiceCorrect != isChoiceChecked) {\n            // the student answered this choice incorrectly\n            isCorrectSoFar = false;\n          }\n\n          // show the feedback if it exists and the student checked it\n          if (this.showFeedback && isChoiceChecked && choice.feedback != null && choice.feedback !== '') {\n            choice.showFeedback = true;\n            choice.feedbackToShow = choice.feedback;\n          }\n        }\n      }\n\n      isCorrect = isCorrectSoFar;\n    }\n\n    if (this.hasCorrectAnswer) {\n      this.isCorrect = isCorrect;\n    }\n  };\n\n  /**\n   * Get the correct choice for a radio button component\n   * @return a choice id string\n   */\n  getCorrectChoice() {\n    var correctChoice = null;\n\n    if (this.componentContent != null) {\n      correctChoice = this.componentContent.correctChoice;\n    }\n\n    return correctChoice;\n  };\n\n  /**\n   * Get the correct choices for a checkbox component\n   * @return an array of correct choice ids\n   */\n  getCorrectChoices() {\n    var correctChoices = null;\n\n    if (this.componentContent != null) {\n      correctChoices = this.componentContent.correctChoices;\n    }\n\n    return correctChoices;\n  };\n\n  studentDataChanged() {\n    this.isCorrect = null;\n    this.isLatestComponentStateSubmit = false;\n    super.studentDataChanged();\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n\n      var studentData = {};\n\n      // set the student choices into the component state\n      studentData.studentChoices = this.getStudentChoiceObjects();\n\n      if (action === 'submit') {\n        /*\n         * the student has clicked submit or save so we will\n         * check if the student has chosen all the correct choices.\n         * the isCorrect value will be stored in this.isCorrect.\n         */\n        this.checkAnswer();\n\n        if (this.isCorrect != null) {\n          // set the isCorrect value into the student data\n          studentData.isCorrect = this.isCorrect;\n        }\n      } else {\n        /*\n         * the student data has changed but the student has not\n         * clicked on the submit or save button so we will not\n         * check the answer yet.\n         */\n      }\n\n      if (action === 'submit') {\n        if (this.isSubmit) {\n          // the student submitted this work\n          componentState.isSubmit = this.isSubmit;\n\n          /*\n           * reset the isSubmit value so that the next component state\n           * doesn't maintain the same value\n           */\n          this.isSubmit = false;\n\n          /*\n           * the latest component state is a submit. this is used to\n           * determine if we should show the feedback.\n           */\n          this.isLatestComponentStateSubmit = true;\n        }\n      } else if (action === 'save') {\n        /*\n         * the latest component state is not a submit. this is used to\n         * determine if we should show the feedback.\n         */\n        this.isLatestComponentStateSubmit = false;\n      }\n\n      // set the submit counter\n      studentData.submitCounter = this.submitCounter;\n\n      componentState.studentData = studentData;\n\n      // set the component type\n      componentState.componentType = 'MultipleChoice';\n\n      // set the node id\n      componentState.nodeId = this.nodeId;\n\n      // set the component id\n      componentState.componentId = this.componentId;\n    }\n\n    var deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Get the choices the student has chosen as objects. The objects\n   * will contain the choice id and the choice text.\n   */\n  getStudentChoiceObjects() {\n    var studentChoiceObjects = [];\n\n    /*\n     * get the choices the student has chosen. this will be an\n     * array of choice ids.\n     */\n    var studentChoices = this.studentChoices;\n    var choiceObject = null;\n    var studentChoiceObject = null;\n\n    if (studentChoices != null) {\n\n      if (this.isRadio()) {\n        // this is a radio button component\n\n        // get the choice object\n        choiceObject = this.getChoiceById(studentChoices);\n\n        if (choiceObject != null) {\n          // create a student choice object and set the id and text\n          studentChoiceObject = {};\n          studentChoiceObject.id = choiceObject.id;\n          studentChoiceObject.text = choiceObject.text;\n\n          // add the student choice object to our array\n          studentChoiceObjects.push(studentChoiceObject);\n        }\n      } else if (this.isCheckbox()) {\n        // this is a checkbox component\n\n        // loop through all the choices the student chose\n        for (var x = 0; x < studentChoices.length; x++) {\n\n          // get a choice id that the student chose\n          var studentChoiceId = studentChoices[x];\n\n          // get the choice object\n          choiceObject = this.getChoiceById(studentChoiceId);\n\n          if (choiceObject != null) {\n            // create a student choice object and set the id and text\n            studentChoiceObject = {};\n            studentChoiceObject.id = choiceObject.id;\n            studentChoiceObject.text = choiceObject.text;\n\n            // add the student choice object to our array\n            studentChoiceObjects.push(studentChoiceObject);\n          }\n        }\n      }\n    }\n\n    return studentChoiceObjects;\n  };\n\n  /**\n   * Check if the component has been authored with a correct choice\n   * @return whether the component has been authored with a correct choice\n   */\n  hasCorrectChoices() {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var choices = componentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            if (choice.isCorrect) {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if there is any feedback\n   * @returns whether there is any feedback\n   */\n  hasFeedback() {\n    var result = false;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var choices = componentContent.choices;\n\n      if (choices != null) {\n\n        // loop through all the authored choices\n        for (var c = 0; c < choices.length; c++) {\n          var choice = choices[c];\n\n          if (choice != null) {\n            if (choice.feedback != null && choice.feedback != '') {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get a choice object by choice id\n   * @param choiceId the choice id\n   * @return the choice object with the given choice id\n   */\n  getChoiceById(choiceId) {\n    var choice = null;\n\n    if (choiceId != null) {\n      // get the component content\n      var componentContent = this.componentContent;\n\n      if (componentContent != null) {\n\n        // get the choices\n        var choices = componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n          // get a choice\n          var tempChoice = choices[c];\n\n          if (tempChoice != null) {\n            // get a choice id\n            var tempChoiceId = tempChoice.id;\n\n            // check if the choice id matches\n            if (choiceId === tempChoiceId) {\n              /*\n               * the choice id matches so we will return this\n               * choice\n               */\n              choice = tempChoice;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return choice;\n  };\n\n  /**\n   * Get a choice by choice text\n   * @param text the choice text\n   * @return the choice with the given text\n   */\n  getChoiceByText(text) {\n\n    var choice = null;\n\n    if (text != null) {\n      // get the component content\n      var componentContent = this.componentContent;\n\n      if (componentContent != null) {\n\n        // get the choices\n        var choices = componentContent.choices;\n\n        // loop through all the choices\n        for (var c = 0; c < choices.length; c++) {\n          // get a choice\n          var tempChoice = choices[c];\n\n          if (tempChoice != null) {\n            // get a choice text\n            var tempChoiceText = tempChoice.text;\n\n            // check if the choice text matches\n            if (text == tempChoiceText) {\n              /*\n               * the choice text matches so we will return this\n               * choice\n               */\n              choice = tempChoice;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return choice;\n  }\n\n  /**\n   * Get the choice type for this component ('radio' or 'checkbox')\n   * @return the choice type for this component\n   */\n  getChoiceType() {\n    var choiceType = null;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n      // get the choice type\n      choiceType = componentContent.choiceType;\n    }\n\n    return choiceType;\n  };\n\n  /**\n   * Get the available choices from component content\n   * @return the available choices from the component content\n   */\n  getChoices() {\n    var choices = null;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the choices\n      choices = componentContent.choices;\n    }\n\n    return choices;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.MultipleChoiceService.populateComponentState(importWorkComponentState);\n\n            /*\n             * update the choice ids so that it uses the choice ids\n             * from this component. we need to do this because the choice\n             * ids are likely to be different. we update the choice ids\n             * by matching the choice text.\n             */\n            this.updateChoiceIdsFromImportedWork(populatedComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Update the choice ids to use the choice ids from this component.\n   * We will use the choice text to match the choices.\n   * @param componentState the component state\n   */\n  updateChoiceIdsFromImportedWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the choices the student chose\n        var studentChoices = studentData.studentChoices;\n\n        if (studentChoices != null) {\n\n          // loop through all the choices the student chose\n          for (var s = 0; s < studentChoices.length; s++) {\n\n            // get a choice the student chose\n            var studentChoice = studentChoices[s];\n\n            if (studentChoice != null) {\n\n              // get the choice text\n              var studentChoiceText = studentChoice.text;\n\n              // get the choice in this component with the given tetxt\n              var choice = this.getChoiceByText(studentChoiceText);\n\n              if (choice != null) {\n\n                // get the choice id\n                var choiceId = choice.id;\n\n                // update the id to have the id from this component\n                studentChoice.id = choiceId;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n    }));\n  };\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      let mergedStudentChoices = [];\n      /*\n       * loop through all the component states to accumulate all the\n       * choices the student chose\n       */\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            let studentChoices = studentData.studentChoices;\n            if (studentChoices != null && studentChoices.length > 0) {\n              mergedStudentChoices = mergedStudentChoices.concat(studentChoices);\n            }\n          }\n        }\n      }\n      if (mergedStudentChoices != null && mergedStudentChoices != '') {\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.studentChoices = mergedStudentChoices;\n      }\n    }\n\n    return mergedComponentState;\n  }\n};\n\nMultipleChoiceController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'MultipleChoiceService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceController;\n"]}