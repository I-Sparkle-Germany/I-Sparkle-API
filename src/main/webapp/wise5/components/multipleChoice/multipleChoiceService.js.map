{"version":3,"sources":["multipleChoiceService.es6"],"names":["MultipleChoiceService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","choiceType","choices","showFeedback","componentToCopy","createComponent","length","c","choice","push","nodeId","componentId","allPossibleTransitionCriteria","possibleTransitionCriteria","choiceText","text","choiceId","criteria","result","params","choiceIds","componentStates","getComponentStatesByNodeIdAndComponentId","componentState","studentData","studentChoices","studentChoiceIds","getStudentChoiceIdsFromStudentChoiceObjects","indexOf","studentChoice","studentChoiceId","componentStateFromOtherComponent","createComponentState","otherComponentType","componentType","studentDataCopy","makeCopyOfJSONObject","componentEvents","nodeEvents","node","submitRequired","l","isSubmit","studentDataString","componentContent","$inject"],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Multiple Choice\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('multipleChoice.componentTypeLabel');\n  }\n\n  /**\n   * Create a MultipleChoice component object\n   * @returns a new MultipleChoice component object\n   */\n  createComponent() {\n    let component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'MultipleChoice';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.choiceType = 'radio';\n    component.choices = [];\n    component.showFeedback = true;\n    return component;\n  }\n\n  /**\n   * Copies an existing MultipleChoice component object\n   * @returns a copied MultipleChoice component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.choiceType = componentToCopy.choiceType;\n    component.choices = [];\n    // go through the original choices and create new id's\n    if (componentToCopy.choices != null && componentToCopy.choices.length > 0) {\n      for (var c = 0; c < componentToCopy.choices.length; c++) {\n        var choice = componentToCopy.choices[c];\n        choice.id = this.UtilService.generateKey();  // generate a new id for this choice.\n        component.choices.push(choice);\n      }\n    }\n    return component;\n  }\n\n  /**\n   * Returns all possible criteria for this component.\n   * @param component a MultipleChoice component\n   */\n  getPossibleTransitionCriteria(nodeId, componentId, component) {\n    let allPossibleTransitionCriteria = [];\n    if (component.choiceType === 'radio') {\n      // Go through all the choices\n      for (var c = 0; c < component.choices.length; c++) {\n        let choice = component.choices[c];\n        let possibleTransitionCriteria = {\n          'name': 'choiceChosen',\n          'id': 'choiceChosen_' + choice.id,\n          'params': {\n            'nodeId': nodeId,\n            'componentId': componentId,\n            'choiceIds': [choice.id]\n          },\n          'userFriendlyDescription': this.$translate('multipleChoice.userChose', {choiceText: choice.text, choiceId: choice.id})\n        };\n        allPossibleTransitionCriteria.push(possibleTransitionCriteria);\n      }\n    } else if (component.choiceType === 'checkbox') {\n      // TODO: implement meeee!\n    }\n    return allPossibleTransitionCriteria;\n  }\n\n  /**\n   * Check if the student chose a specific choice\n   * @param criteria the criteria object\n   * @returns a boolean value whether the student chose the choice specified in the\n   * criteria object\n   */\n  choiceChosen(criteria) {\n\n    let result = false;\n\n    if (criteria != null && criteria.params != null) {\n      let nodeId = criteria.params.nodeId;\n      let componentId = criteria.params.componentId;\n      let choiceIds = criteria.params.choiceIds; // the choice ids that we expect the student to have chosen\n\n      if (nodeId != null && componentId != null) {\n\n        // get the component states\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n        if (componentStates != null && componentStates.length > 0) {\n\n          if (choiceIds != null) {\n            // get the latest component state\n            let componentState = componentStates[componentStates.length - 1];\n\n            // get the student data\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n              // get the choice(s) the student chose\n              let studentChoices = studentData.studentChoices;\n\n              if (studentChoices != null) {\n\n                if (studentChoices.length === choiceIds.length) {\n                  /*\n                   * the number of choices the student chose do match so the student may\n                   * have matched the choices. we will now need to compare each of the\n                   * choice ids to make sure the student chose the ones that are required\n                   */\n\n                  let studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                  for (let c = 0; c < choiceIds.length; c++) {\n                    let choiceId = choiceIds[c];\n\n                    if (studentChoiceIds.indexOf(choiceId) === -1) {\n                      /*\n                       * the required choice id is not in the student choices so the student\n                       * did not match all the choices\n                       */\n                      result = false;\n                      break;\n                    } else {\n                      // the required choice id is in the student choices\n                      result = true;\n                    }\n                  }\n\n                } else {\n                  /*\n                   * the number of choices the student chose do not match so the student did\n                   * not match the choices\n                   */\n\n                  result = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the student choice ids from the student choice objects\n   * @param studentChoices an array of student choice objects. these objects contain\n   * an id and text fields\n   * @returns an array of choice id strings\n   */\n  getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n    let choiceIds = [];\n\n    if (studentChoices != null) {\n\n      // loop through all the student choice objects\n      for (let c = 0; c < studentChoices.length; c++) {\n\n        // get a student choice object\n        let studentChoice = studentChoices[c];\n\n        if (studentChoice != null) {\n\n          // get the student choice id\n          let studentChoiceId = studentChoice.id;\n\n          choiceIds.push(studentChoiceId);\n        }\n      }\n    }\n\n    return choiceIds;\n  };\n\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    let componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      let otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'MultipleChoice') {\n        // the other component is an MultipleChoice component\n\n        // get the student data from the other component state\n        let studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        let studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      // loop through all the component states\n      for (let c = 0, l = componentStates.length; c < l; c++) {\n\n        // the component state\n        let componentState = componentStates[c];\n\n        // get the student data from the component state\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          let studentChoices = studentData.studentChoices;\n\n          if (studentChoices != null) {\n            // there is a student choice so the component has saved work\n            if (submitRequired) {\n              // completion requires a submission, so check for isSubmit\n              if (componentState.isSubmit) {\n                result = true;\n                break;\n              }\n            } else {\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return a human readable student data string\n   */\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the choices the student chose\n        var studentChoices = studentData.studentChoices;\n\n        if (studentChoices != null) {\n\n          // loop through all the choices the student chose\n          for (var c = 0; c < studentChoices.length; c++) {\n            var studentChoice = studentChoices[c];\n\n            if (studentChoice != null) {\n\n              // get the choice text\n              var text = studentChoice.text;\n\n              if (text != null) {\n                if (studentDataString != '') {\n                  // separate the choices with a comma\n                  studentDataString += ', ';\n                }\n\n                // append the choice text\n                studentDataString += text;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return studentDataString;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        let studentChoices = studentData.studentChoices;\n        if (studentChoices != null && studentChoices.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nMultipleChoiceService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceService;\n"]}