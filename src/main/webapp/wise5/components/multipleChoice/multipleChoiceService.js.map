{"version":3,"sources":["multipleChoiceService.es6"],"names":[],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n    constructor(StudentDataService) {\n        super();\n\n        this.StudentDataService = StudentDataService;\n    }\n\n    /**\n     * Determine if the student has fulfilled the function requirements\n     * @param component the component content\n     * @param functionName the function name to call\n     * @param functionParams the parameters for the function\n     * @param componentStates the component states for the component\n     * @param componentEvents the component events for the component\n     * @param nodeEvents the node events for the parent of the component\n     * @returns whether the student has fulfilled the function requirements\n     */\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'choiceChosen') {\n            result = this.choiceChosen(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents);\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the student chose a specific choice\n     * @param criteria the criteria object\n     * @returns a boolean value whether the student chose the choice specified in the\n     * criteria object\n     */\n    choiceChosen(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n            var nodeId = criteria.nodeId;\n            var componentId = criteria.componentId;\n            var functionName = criteria.functionName;\n            var functionParams = criteria.functionParams;\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null && componentStates.length > 0) {\n\n                    // get the choice ids that we expect the student to have chose\n                    var choiceIds = functionParams.choiceIds;\n\n                    if (choiceIds != null) {\n                        // get the latest component state\n                        var componentState = componentStates[componentStates.length - 1];\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null) {\n\n                            // get the choice(s) the student chose\n                            var studentChoices = studentData.studentChoices;\n\n                            if (studentChoices != null) {\n\n                                if (studentChoices.length === choiceIds.length) {\n                                    /*\n                                     * the number of choices the student chose do match so the student may\n                                     * have matched the choices. we will now need to compare each of the\n                                     * choice ids to make sure the student chose the ones that are required\n                                     */\n\n                                    var studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                                    for (var c = 0; c < choiceIds.length; c++) {\n                                        var choiceId = choiceIds[c];\n\n                                        if (studentChoiceIds.indexOf(choiceId) === -1) {\n                                            /*\n                                             * the required choice id is not in the student choices so the student\n                                             * did not match all the choices\n                                             */\n                                            result = false;\n                                            break;\n                                        } else {\n                                            // the required choice id is in the student choices\n                                            result = true;\n                                        }\n                                    }\n\n                                } else {\n                                    /*\n                                     * the number of choices the student chose do not match so the student did\n                                     * not match the choices\n                                     */\n\n                                    result = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the student choice ids from the student choice objects\n     * @param studentChoices an array of student choice objects. these objects contain\n     * an id and text fields\n     * @returns an array of choice id strings\n     */\n    getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n        var choiceIds = [];\n\n        if (studentChoices != null) {\n\n            // loop through all the student choice objects\n            for (var c = 0; c < studentChoices.length; c++) {\n\n                // get a student choice object\n                var studentChoice = studentChoices[c];\n\n                if (studentChoice != null) {\n\n                    // get the student choice id\n                    var studentChoiceId = studentChoice.id;\n\n                    choiceIds.push(studentChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.response;\n\n            if (response != null) {\n                studentWorkAsHTML = '';\n\n                for (var x = 0; x < response.length; x++) {\n                    var choice = response[x];\n\n                    if (choice != null) {\n                        var text = choice.text;\n\n                        if (studentWorkAsHTML != '') {\n                            studentWorkAsHTML += '<br/>';\n                        }\n\n                        studentWorkAsHTML += text;\n                    }\n                }\n            }\n\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'MultipleChoice') {\n                // the other component is an MultipleChoice component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var studentChoices = studentData.studentChoices;\n\n                    if (studentChoices != null) {\n                        // there is a student choice so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nMultipleChoiceService.$inject = [\n    'StudentDataService'\n];\n\nexport default MultipleChoiceService;"]}