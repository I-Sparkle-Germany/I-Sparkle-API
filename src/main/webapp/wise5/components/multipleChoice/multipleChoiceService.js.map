{"version":3,"sources":["multipleChoiceService.es6"],"names":["MultipleChoiceService","$filter","StudentDataService","UtilService","$translate","component","type","choiceType","choices","showFeedback","nodeId","componentId","allPossibleTransitionCriteria","c","length","choice","possibleTransitionCriteria","id","choiceText","text","choiceId","push","criteria","result","params","choiceIds","componentStates","getComponentStatesByNodeIdAndComponentId","componentState","studentData","studentChoices","studentChoiceIds","getStudentChoiceIdsFromStudentChoiceObjects","indexOf","studentChoice","studentChoiceId","componentEvents","nodeEvents","node","submitRequired","showSubmitButton","showSaveButton","l","isSubmit","studentDataString","componentContent","$inject"],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass MultipleChoiceService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('multipleChoice.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'MultipleChoice';\n    component.choiceType = 'radio';\n    component.choices = [];\n    component.showFeedback = true;\n    return component;\n  }\n\n  /**\n   * Returns all possible criteria for this component.\n   * @param component a MultipleChoice component\n   */\n  getPossibleTransitionCriteria(nodeId, componentId, component) {\n    let allPossibleTransitionCriteria = [];\n    if (component.choiceType === 'radio') {\n      // Go through all the choices\n      for (var c = 0; c < component.choices.length; c++) {\n        let choice = component.choices[c];\n        let possibleTransitionCriteria = {\n          'name': 'choiceChosen',\n          'id': 'choiceChosen_' + choice.id,\n          'params': {\n            'nodeId': nodeId,\n            'componentId': componentId,\n            'choiceIds': [choice.id]\n          },\n          'userFriendlyDescription': this.$translate('multipleChoice.userChose', {choiceText: choice.text, choiceId: choice.id})\n        };\n        allPossibleTransitionCriteria.push(possibleTransitionCriteria);\n      }\n    } else if (component.choiceType === 'checkbox') {\n      // TODO: implement meeee!\n    }\n    return allPossibleTransitionCriteria;\n  }\n\n  /**\n   * Check if the student chose a specific choice\n   * @param criteria the criteria object\n   * @returns a boolean value whether the student chose the choice specified in the\n   * criteria object\n   */\n  choiceChosen(criteria) {\n\n    let result = false;\n\n    if (criteria != null && criteria.params != null) {\n      let nodeId = criteria.params.nodeId;\n      let componentId = criteria.params.componentId;\n      let choiceIds = criteria.params.choiceIds; // the choice ids that we expect the student to have chosen\n\n      if (nodeId != null && componentId != null) {\n\n        // get the component states\n        let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n        if (componentStates != null && componentStates.length > 0) {\n\n          if (choiceIds != null) {\n            // get the latest component state\n            let componentState = componentStates[componentStates.length - 1];\n\n            // get the student data\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n              // get the choice(s) the student chose\n              let studentChoices = studentData.studentChoices;\n\n              if (studentChoices != null) {\n\n                if (studentChoices.length === choiceIds.length) {\n                  /*\n                   * the number of choices the student chose do match so the student may\n                   * have matched the choices. we will now need to compare each of the\n                   * choice ids to make sure the student chose the ones that are required\n                   */\n\n                  let studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                  for (let c = 0; c < choiceIds.length; c++) {\n                    let choiceId = choiceIds[c];\n\n                    if (studentChoiceIds.indexOf(choiceId) === -1) {\n                      /*\n                       * the required choice id is not in the student choices so the student\n                       * did not match all the choices\n                       */\n                      result = false;\n                      break;\n                    } else {\n                      // the required choice id is in the student choices\n                      result = true;\n                    }\n                  }\n\n                } else {\n                  /*\n                   * the number of choices the student chose do not match so the student did\n                   * not match the choices\n                   */\n\n                  result = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the student choice ids from the student choice objects\n   * @param studentChoices an array of student choice objects. these objects contain\n   * an id and text fields\n   * @returns an array of choice id strings\n   */\n  getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n    let choiceIds = [];\n\n    if (studentChoices != null) {\n\n      // loop through all the student choice objects\n      for (let c = 0; c < studentChoices.length; c++) {\n\n        // get a student choice object\n        let studentChoice = studentChoices[c];\n\n        if (studentChoice != null) {\n\n          // get the student choice id\n          let studentChoiceId = studentChoice.id;\n\n          choiceIds.push(studentChoiceId);\n        }\n      }\n    }\n\n    return choiceIds;\n  };\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      // loop through all the component states\n      for (let c = 0, l = componentStates.length; c < l; c++) {\n\n        // the component state\n        let componentState = componentStates[c];\n\n        // get the student data from the component state\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          let studentChoices = studentData.studentChoices;\n\n          if (studentChoices != null) {\n            // there is a student choice so the component has saved work\n            if (submitRequired) {\n              // completion requires a submission, so check for isSubmit\n              if (componentState.isSubmit) {\n                result = true;\n                break;\n              }\n            } else {\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return a human readable student data string\n   */\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the choices the student chose\n        var studentChoices = studentData.studentChoices;\n\n        if (studentChoices != null) {\n\n          // loop through all the choices the student chose\n          for (var c = 0; c < studentChoices.length; c++) {\n            var studentChoice = studentChoices[c];\n\n            if (studentChoice != null) {\n\n              // get the choice text\n              var text = studentChoice.text;\n\n              if (text != null) {\n                if (studentDataString != '') {\n                  // separate the choices with a comma\n                  studentDataString += ', ';\n                }\n\n                // append the choice text\n                studentDataString += text;\n              }\n            }\n          }\n        }\n      }\n    }\n    return studentDataString;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        let studentChoices = studentData.studentChoices;\n        if (studentChoices != null && studentChoices.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nMultipleChoiceService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceService;\n"]}