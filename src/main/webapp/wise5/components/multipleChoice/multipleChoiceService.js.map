{"version":3,"sources":["multipleChoiceService.es6"],"names":[],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a MultipleChoice component object\n     * @returns a new MultipleChoice component object\n     */\n    createComponent() {\n\n        let component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'MultipleChoice';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = true;\n        component.choiceType = 'radio';\n        component.choices = [];\n\n        return component;\n    }\n\n    /**\n     * Check if the student chose a specific choice\n     * @param criteria the criteria object\n     * @returns a boolean value whether the student chose the choice specified in the\n     * criteria object\n     */\n    choiceChosen(criteria) {\n\n        let result = false;\n\n        if (criteria != null) {\n            let nodeId = criteria.nodeId;\n            let componentId = criteria.componentId;\n            let functionName = criteria.functionName;\n            let functionParams = criteria.functionParams;\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states\n                let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null && componentStates.length > 0) {\n\n                    // get the choice ids that we expect the student to have chose\n                    let choiceIds = functionParams.choiceIds;\n\n                    if (choiceIds != null) {\n                        // get the latest component state\n                        let componentState = componentStates[componentStates.length - 1];\n\n                        // get the student data\n                        let studentData = componentState.studentData;\n\n                        if (studentData != null) {\n\n                            // get the choice(s) the student chose\n                            let studentChoices = studentData.studentChoices;\n\n                            if (studentChoices != null) {\n\n                                if (studentChoices.length === choiceIds.length) {\n                                    /*\n                                     * the number of choices the student chose do match so the student may\n                                     * have matched the choices. we will now need to compare each of the\n                                     * choice ids to make sure the student chose the ones that are required\n                                     */\n\n                                    let studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                                    for (let c = 0; c < choiceIds.length; c++) {\n                                        let choiceId = choiceIds[c];\n\n                                        if (studentChoiceIds.indexOf(choiceId) === -1) {\n                                            /*\n                                             * the required choice id is not in the student choices so the student\n                                             * did not match all the choices\n                                             */\n                                            result = false;\n                                            break;\n                                        } else {\n                                            // the required choice id is in the student choices\n                                            result = true;\n                                        }\n                                    }\n\n                                } else {\n                                    /*\n                                     * the number of choices the student chose do not match so the student did\n                                     * not match the choices\n                                     */\n\n                                    result = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the student choice ids from the student choice objects\n     * @param studentChoices an array of student choice objects. these objects contain\n     * an id and text fields\n     * @returns an array of choice id strings\n     */\n    getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n        let choiceIds = [];\n\n        if (studentChoices != null) {\n\n            // loop through all the student choice objects\n            for (let c = 0; c < studentChoices.length; c++) {\n\n                // get a student choice object\n                let studentChoice = studentChoices[c];\n\n                if (studentChoice != null) {\n\n                    // get the student choice id\n                    let studentChoiceId = studentChoice.id;\n\n                    choiceIds.push(studentChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        let componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            let otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'MultipleChoice') {\n                // the other component is an MultipleChoice component\n\n                // get the student data from the other component state\n                let studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                let studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (let c = 0, l = componentStates.length; c < l; c++) {\n\n                // the component state\n                let componentState = componentStates[c];\n\n                // get the student data from the component state\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    let studentChoices = studentData.studentChoices;\n\n                    if (studentChoices != null) {\n                        // there is a student choice so the component has saved work\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nMultipleChoiceService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceService;\n"]}