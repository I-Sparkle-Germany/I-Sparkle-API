{"version":3,"sources":["multipleChoiceService.es6"],"names":[],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a MultipleChoice component object\n     * @returns a new MultipleChoice component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'MultipleChoice';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = true;\n        component.choiceType = 'radio';\n        component.choices = [];\n\n        return component;\n    }\n\n    /**\n     * Determine if the student has fulfilled the function requirements\n     * @param component the component content\n     * @param functionName the function name to call\n     * @param functionParams the parameters for the function\n     * @param componentStates the component states for the component\n     * @param componentEvents the component events for the component\n     * @param nodeEvents the node events for the parent of the component\n     * @returns whether the student has fulfilled the function requirements\n     */\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'choiceChosen') {\n            result = this.choiceChosen(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents);\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the student chose a specific choice\n     * @param criteria the criteria object\n     * @returns a boolean value whether the student chose the choice specified in the\n     * criteria object\n     */\n    choiceChosen(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n            var nodeId = criteria.nodeId;\n            var componentId = criteria.componentId;\n            var functionName = criteria.functionName;\n            var functionParams = criteria.functionParams;\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null && componentStates.length > 0) {\n\n                    // get the choice ids that we expect the student to have chose\n                    var choiceIds = functionParams.choiceIds;\n\n                    if (choiceIds != null) {\n                        // get the latest component state\n                        var componentState = componentStates[componentStates.length - 1];\n\n                        // get the student data\n                        var studentData = componentState.studentData;\n\n                        if (studentData != null) {\n\n                            // get the choice(s) the student chose\n                            var studentChoices = studentData.studentChoices;\n\n                            if (studentChoices != null) {\n\n                                if (studentChoices.length === choiceIds.length) {\n                                    /*\n                                     * the number of choices the student chose do match so the student may\n                                     * have matched the choices. we will now need to compare each of the\n                                     * choice ids to make sure the student chose the ones that are required\n                                     */\n\n                                    var studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                                    for (var c = 0; c < choiceIds.length; c++) {\n                                        var choiceId = choiceIds[c];\n\n                                        if (studentChoiceIds.indexOf(choiceId) === -1) {\n                                            /*\n                                             * the required choice id is not in the student choices so the student\n                                             * did not match all the choices\n                                             */\n                                            result = false;\n                                            break;\n                                        } else {\n                                            // the required choice id is in the student choices\n                                            result = true;\n                                        }\n                                    }\n\n                                } else {\n                                    /*\n                                     * the number of choices the student chose do not match so the student did\n                                     * not match the choices\n                                     */\n\n                                    result = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the student choice ids from the student choice objects\n     * @param studentChoices an array of student choice objects. these objects contain\n     * an id and text fields\n     * @returns an array of choice id strings\n     */\n    getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n        var choiceIds = [];\n\n        if (studentChoices != null) {\n\n            // loop through all the student choice objects\n            for (var c = 0; c < studentChoices.length; c++) {\n\n                // get a student choice object\n                var studentChoice = studentChoices[c];\n\n                if (studentChoice != null) {\n\n                    // get the student choice id\n                    var studentChoiceId = studentChoice.id;\n\n                    choiceIds.push(studentChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.response;\n\n            if (response != null) {\n                studentWorkAsHTML = '';\n\n                for (var x = 0; x < response.length; x++) {\n                    var choice = response[x];\n\n                    if (choice != null) {\n                        var text = choice.text;\n\n                        if (studentWorkAsHTML != '') {\n                            studentWorkAsHTML += '<br/>';\n                        }\n\n                        studentWorkAsHTML += text;\n                    }\n                }\n            }\n\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'MultipleChoice') {\n                // the other component is an MultipleChoice component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var studentChoices = studentData.studentChoices;\n\n                    if (studentChoices != null) {\n                        // there is a student choice so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nMultipleChoiceService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceService;"]}