{"version":3,"sources":["multipleChoiceService.es6"],"names":[],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a MultipleChoice component object\n     * @returns a new MultipleChoice component object\n     */\n    createComponent() {\n        let component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'MultipleChoice';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.choiceType = 'radio';\n        component.choices = [];\n        component.showFeedback = true;\n        return component;\n    }\n\n    /**\n     * Copies an existing MultipleChoice component object\n     * @returns a copied MultipleChoice component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.choiceType = componentToCopy.choiceType;\n        component.choices = [];\n        // go through the original choices and create new id's\n        if (componentToCopy.choices != null && componentToCopy.choices.length > 0) {\n            for (var c = 0; c < componentToCopy.choices.length; c++) {\n                var choice = componentToCopy.choices[c];\n                choice.id = this.UtilService.generateKey();  // generate a new id for this choice.\n                component.choices.push(choice);\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Returns all possible criteria for this component.\n     * @param component a MultipleChoice component\n     */\n    getPossibleTransitionCriteria(nodeId, componentId, component) {\n        let allPossibleTransitionCriteria = [];\n        if (component.choiceType === \"radio\") {\n            // Go through all the choices\n            for (var c = 0; c < component.choices.length; c++) {\n                let choice = component.choices[c];\n                let possibleTransitionCriteria = {\n                    \"nodeId\": nodeId,\n                    \"componentId\": componentId,\n                    \"function\": {\n                        \"id\": \"choiceChosen_\" + choice.id,\n                        \"name\": \"choiceChosen\",\n                        \"params\": {\n                            \"choiceIds\": [choice.id]\n                        }\n                    },\n                    \"userFriendlyDescription\": \"User chose \\\"\" + choice.text + \"\\\" (Choice ID: \" + choice.id + \") on this component.\"\n\n                };\n                allPossibleTransitionCriteria.push(possibleTransitionCriteria);\n            }\n        } else if (component.choiceType === \"checkbox\") {\n            // TODO: implement meeee!\n        }\n        return allPossibleTransitionCriteria;\n    }\n\n    /**\n     * Check if the student chose a specific choice\n     * @param criteria the criteria object\n     * @returns a boolean value whether the student chose the choice specified in the\n     * criteria object\n     */\n    choiceChosen(criteria) {\n\n        let result = false;\n\n        if (criteria != null && criteria.params != null) {\n            let nodeId = criteria.params.nodeId;\n            let componentId = criteria.params.componentId;\n            let choiceIds = criteria.params.choiceIds; // the choice ids that we expect the student to have chosen\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states\n                let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null && componentStates.length > 0) {\n\n                    if (choiceIds != null) {\n                        // get the latest component state\n                        let componentState = componentStates[componentStates.length - 1];\n\n                        // get the student data\n                        let studentData = componentState.studentData;\n\n                        if (studentData != null) {\n\n                            // get the choice(s) the student chose\n                            let studentChoices = studentData.studentChoices;\n\n                            if (studentChoices != null) {\n\n                                if (studentChoices.length === choiceIds.length) {\n                                    /*\n                                     * the number of choices the student chose do match so the student may\n                                     * have matched the choices. we will now need to compare each of the\n                                     * choice ids to make sure the student chose the ones that are required\n                                     */\n\n                                    let studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                                    for (let c = 0; c < choiceIds.length; c++) {\n                                        let choiceId = choiceIds[c];\n\n                                        if (studentChoiceIds.indexOf(choiceId) === -1) {\n                                            /*\n                                             * the required choice id is not in the student choices so the student\n                                             * did not match all the choices\n                                             */\n                                            result = false;\n                                            break;\n                                        } else {\n                                            // the required choice id is in the student choices\n                                            result = true;\n                                        }\n                                    }\n\n                                } else {\n                                    /*\n                                     * the number of choices the student chose do not match so the student did\n                                     * not match the choices\n                                     */\n\n                                    result = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the student choice ids from the student choice objects\n     * @param studentChoices an array of student choice objects. these objects contain\n     * an id and text fields\n     * @returns an array of choice id strings\n     */\n    getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n        let choiceIds = [];\n\n        if (studentChoices != null) {\n\n            // loop through all the student choice objects\n            for (let c = 0; c < studentChoices.length; c++) {\n\n                // get a student choice object\n                let studentChoice = studentChoices[c];\n\n                if (studentChoice != null) {\n\n                    // get the student choice id\n                    let studentChoiceId = studentChoice.id;\n\n                    choiceIds.push(studentChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        let componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            let otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'MultipleChoice') {\n                // the other component is an MultipleChoice component\n\n                // get the student data from the other component state\n                let studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                let studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (let c = 0, l = componentStates.length; c < l; c++) {\n\n                // the component state\n                let componentState = componentStates[c];\n\n                // get the student data from the component state\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    let studentChoices = studentData.studentChoices;\n\n                    if (studentChoices != null) {\n                        // there is a student choice so the component has saved work\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nMultipleChoiceService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceService;\n"]}