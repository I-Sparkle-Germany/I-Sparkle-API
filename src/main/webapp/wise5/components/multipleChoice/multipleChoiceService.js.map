{"version":3,"sources":["multipleChoiceService.es6"],"names":["MultipleChoiceService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","choiceType","choices","showFeedback","componentToCopy","createComponent","length","c","choice","push","nodeId","componentId","allPossibleTransitionCriteria","possibleTransitionCriteria","choiceText","text","choiceId","criteria","result","params","choiceIds","componentStates","getComponentStatesByNodeIdAndComponentId","componentState","studentData","studentChoices","studentChoiceIds","getStudentChoiceIdsFromStudentChoiceObjects","indexOf","studentChoice","studentChoiceId","componentStateFromOtherComponent","createComponentState","otherComponentType","componentType","studentDataCopy","makeCopyOfJSONObject","componentEvents","nodeEvents","node","submitRequired","l","isSubmit","$inject"],"mappings":"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","file":"multipleChoiceService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass MultipleChoiceService extends NodeService {\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Create a MultipleChoice component object\n     * @returns a new MultipleChoice component object\n     */\n    createComponent() {\n        let component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'MultipleChoice';\n        component.prompt = this.$translate('ENTER_PROMPT_HERE');\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.choiceType = 'radio';\n        component.choices = [];\n        component.showFeedback = true;\n        return component;\n    }\n\n    /**\n     * Copies an existing MultipleChoice component object\n     * @returns a copied MultipleChoice component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.choiceType = componentToCopy.choiceType;\n        component.choices = [];\n        // go through the original choices and create new id's\n        if (componentToCopy.choices != null && componentToCopy.choices.length > 0) {\n            for (var c = 0; c < componentToCopy.choices.length; c++) {\n                var choice = componentToCopy.choices[c];\n                choice.id = this.UtilService.generateKey();  // generate a new id for this choice.\n                component.choices.push(choice);\n            }\n        }\n        return component;\n    }\n\n    /**\n     * Returns all possible criteria for this component.\n     * @param component a MultipleChoice component\n     */\n    getPossibleTransitionCriteria(nodeId, componentId, component) {\n        let allPossibleTransitionCriteria = [];\n        if (component.choiceType === \"radio\") {\n            // Go through all the choices\n            for (var c = 0; c < component.choices.length; c++) {\n                let choice = component.choices[c];\n                let possibleTransitionCriteria = {\n                    \"name\": \"choiceChosen\",\n                    \"id\": \"choiceChosen_\" + choice.id,\n                    \"params\": {\n                        \"nodeId\": nodeId,\n                        \"componentId\": componentId,\n                        \"choiceIds\": [choice.id]\n                    },\n                    \"userFriendlyDescription\": this.$translate('multipleChoice.userChose', {choiceText: choice.text, choiceId: choice.id})\n                };\n                allPossibleTransitionCriteria.push(possibleTransitionCriteria);\n            }\n        } else if (component.choiceType === \"checkbox\") {\n            // TODO: implement meeee!\n        }\n        return allPossibleTransitionCriteria;\n    }\n\n    /**\n     * Check if the student chose a specific choice\n     * @param criteria the criteria object\n     * @returns a boolean value whether the student chose the choice specified in the\n     * criteria object\n     */\n    choiceChosen(criteria) {\n\n        let result = false;\n\n        if (criteria != null && criteria.params != null) {\n            let nodeId = criteria.params.nodeId;\n            let componentId = criteria.params.componentId;\n            let choiceIds = criteria.params.choiceIds; // the choice ids that we expect the student to have chosen\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states\n                let componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null && componentStates.length > 0) {\n\n                    if (choiceIds != null) {\n                        // get the latest component state\n                        let componentState = componentStates[componentStates.length - 1];\n\n                        // get the student data\n                        let studentData = componentState.studentData;\n\n                        if (studentData != null) {\n\n                            // get the choice(s) the student chose\n                            let studentChoices = studentData.studentChoices;\n\n                            if (studentChoices != null) {\n\n                                if (studentChoices.length === choiceIds.length) {\n                                    /*\n                                     * the number of choices the student chose do match so the student may\n                                     * have matched the choices. we will now need to compare each of the\n                                     * choice ids to make sure the student chose the ones that are required\n                                     */\n\n                                    let studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n\n                                    for (let c = 0; c < choiceIds.length; c++) {\n                                        let choiceId = choiceIds[c];\n\n                                        if (studentChoiceIds.indexOf(choiceId) === -1) {\n                                            /*\n                                             * the required choice id is not in the student choices so the student\n                                             * did not match all the choices\n                                             */\n                                            result = false;\n                                            break;\n                                        } else {\n                                            // the required choice id is in the student choices\n                                            result = true;\n                                        }\n                                    }\n\n                                } else {\n                                    /*\n                                     * the number of choices the student chose do not match so the student did\n                                     * not match the choices\n                                     */\n\n                                    result = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the student choice ids from the student choice objects\n     * @param studentChoices an array of student choice objects. these objects contain\n     * an id and text fields\n     * @returns an array of choice id strings\n     */\n    getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n        let choiceIds = [];\n\n        if (studentChoices != null) {\n\n            // loop through all the student choice objects\n            for (let c = 0; c < studentChoices.length; c++) {\n\n                // get a student choice object\n                let studentChoice = studentChoices[c];\n\n                if (studentChoice != null) {\n\n                    // get the student choice id\n                    let studentChoiceId = studentChoice.id;\n\n                    choiceIds.push(studentChoiceId);\n                }\n            }\n        }\n\n        return choiceIds;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        let componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            let otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'MultipleChoice') {\n                // the other component is an MultipleChoice component\n\n                // get the student data from the other component state\n                let studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                let studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (let c = 0, l = componentStates.length; c < l; c++) {\n\n                // the component state\n                let componentState = componentStates[c];\n\n                // get the student data from the component state\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    let studentChoices = studentData.studentChoices;\n\n                    if (studentChoices != null) {\n                        // there is a student choice so the component has saved work\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n}\n\nMultipleChoiceService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default MultipleChoiceService;\n"]}