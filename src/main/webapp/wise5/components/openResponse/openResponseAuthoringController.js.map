{"version":3,"sources":["openResponseAuthoringController.es6"],"names":["OpenResponseAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","injectAssetPaths","submitCounter","studentResponse","latestAnnotations","isDirty","isSubmitDirty","starterSentence","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","cRater","scoringRules","newScoringRule","score","feedbackText","push","authoringViewComponentChanged","index","scoringRule","splice","length","answer","confirm","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","previousScore","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","enableMultipleAttemptScoringRules","setShowSubmitButtonValue","enableNotifications","html","removeAbsoluteAssetPaths","insertWISELinks","show","$emit","tags","tag","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponents","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","connectedComponentType","getComponentByNodeIdAndComponentId","componentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$broadcast","useCustomCompletionCriteria","completionCriteria","inOrder","criteria","newCompletionCriteria","name","cRaterItemIdIsValid","isVerifyingCRaterItemId","verifyCRaterItemId","then","isValid","$inject"],"mappings":"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","file":"openResponseAuthoringController.js","sourcesContent":["'use strict';\n\nimport OpenResponseController from \"./openResponseController\";\n\nclass OpenResponseAuthoringController extends OpenResponseController {\n\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              CRaterService,\n              NodeService,\n              NotebookService,\n              NotificationService,\n              OpenResponseService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'OpenResponse'\n      }\n    ];\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      // inject the asset paths into the new component content\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n      /*\n       * reset the values so that the preview is refreshed with\n       * the new content\n       */\n      this.submitCounter = 0;\n      this.studentResponse = '';\n      this.latestAnnotations = null;\n      this.isDirty = false;\n      this.isSubmitDirty = false;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      if (this.componentContent.starterSentence != null) {\n        /*\n         * the student has not done any work and there is a starter sentence\n         * so we will populate the textarea with the starter sentence\n         */\n        this.studentResponse = this.componentContent.starterSentence;\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Add a scoring rule\n   */\n  authoringAddScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // create a scoring rule object\n      var newScoringRule = {};\n      newScoringRule.score = '';\n      newScoringRule.feedbackText = '';\n\n      // add the new scoring rule object\n      this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a scoring rule up\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the top\n      if (index != 0) {\n        // the scoring rule is not at the top so we can move it up\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a scoring rule down\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the end\n      if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a scoring rule\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // get the scoring rule\n      var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n      if (scoringRule != null) {\n\n        // get the score and feedback text\n        var score = scoringRule.score;\n        var feedbackText = scoringRule.feedbackText;\n\n        // make sure the author really wants to delete the scoring rule\n        //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the scoring rule\n          this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n   * we can add different types in the future.\n   */\n  authoringAddNotification() {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // create a new notification\n      let newNotification = {\n        notificationType: 'CRaterResult',\n        enableCriteria: {\n          scoreSequence: ['', '']\n        },\n        isAmbient: false,\n        dismissCode: 'apple',\n        isNotifyTeacher: true,\n        isNotifyStudent: true,\n        notificationMessageToStudent: '{{username}}, ' + this.$translate('openResponse.youGotAScoreOf') + ' {{score}}. ' + this.$translate('openResponse.pleaseTalkToYourTeacher') + '.',\n        notificationMessageToTeacher: '{{username}} ' + this.$translate('openResponse.gotAScoreOf') + ' {{score}}.'\n      };\n\n      // add the new notification\n      this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n      // the author has made changes so we will save the component content\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a multiple attempt scoring rule\n   */\n  authoringAddMultipleAttemptScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // create a new multiple attempt scoring rule\n      var newMultipleAttemptScoringRule = {};\n      newMultipleAttemptScoringRule.scoreSequence = ['', ''];\n      newMultipleAttemptScoringRule.feedbackText = '';\n\n      // add the new multiple attempt scoring rule\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule up\n   * @param index\n   */\n  authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not already at the top\n      if (index != 0) {\n        // the multiple attempt scoring rule is not at the top\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule down\n   * @param index the index of the multiple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not at the end\n      if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n        // the multiple attempt scoring rule is not at the end\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a multiple attempt scoring rule\n   * @param index the index of the mulitple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // get the multiple attempt scoring rule\n      var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n      if (multipleAttemptScoringRule != null) {\n\n        // get the score sequence\n        var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // get the feedback text\n        var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n        // make sure the author really wants to delete the multiple attempt scoring rule\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the multiple attempt scoring rule\n          this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Move a notification up\n   * @param index of the notification\n   */\n  authoringViewNotificationUpClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not already at the top\n      if (index != 0) {\n        // the notification is not at the top\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index back\n        this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a notification down\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDownClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not at the end\n      if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n        // the notification is not at the end\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index forward\n        this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a notification\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDeleteClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // get the notification\n      var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n      if (notification != null) {\n\n        // get the score sequence\n        var scoreSequence = notification.enableCriteria.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // make sure the author really wants to delete the notification\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n        if (answer) {\n          // the author answered yes to delete the notification\n          this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n          // the author has made changes so we will save the component content\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * The \"Enable CRater\" checkbox was clicked\n   */\n  authoringViewEnableCRaterClicked() {\n\n    if (this.authoringComponentContent.enableCRater) {\n      // CRater was turned on\n\n      if (this.authoringComponentContent.cRater == null) {\n        /*\n         * the cRater object does not exist in the component content\n         * so we will create it\n         */\n\n        // create the cRater object\n        var cRater = {};\n        cRater.itemType = 'CRATER';\n        cRater.itemId = '';\n        cRater.scoreOn = 'submit';\n        cRater.showScore = true;\n        cRater.showFeedback = true;\n        cRater.scoringRules = [];\n        cRater.enableMultipleAttemptScoringRules = false;\n        cRater.multipleAttemptScoringRules = []\n\n        // set the cRater object into the component content\n        this.authoringComponentContent.cRater = cRater;\n      }\n\n      // turn on the submit button\n      //this.authoringComponentContent.showSubmitButton = true;\n      this.setShowSubmitButtonValue(true);\n    } else {\n      // CRater was turned off\n\n      // turn off the submit button\n      this.setShowSubmitButtonValue(false);\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n   */\n  enableMultipleAttemptScoringRulesClicked() {\n\n    // get the cRater object from the component content\n    var cRater = this.authoringComponentContent.cRater;\n\n    if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n      /*\n       * the multiple attempt scoring rules array does not exist so\n       * we will create it\n       */\n      cRater.multipleAttemptScoringRules = [];\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Notifications\" checkbox was clicked\n   */\n  authoringViewEnableNotificationsClicked() {\n\n    if (this.authoringComponentContent.enableNotifications) {\n      // Notifications was turned on\n\n      if (this.authoringComponentContent.notificationSettings == null) {\n        /*\n         * the NotificationSettings object does not exist in the component content\n         * so we will create it\n         */\n        this.authoringComponentContent.notificationSettings = {\n          notifications: []\n        };\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The Use Completion Criteria checkbox was clicked. We will toggle the\n   * completion criteria in the component content.\n   * @return False if we want to cancel the click and not perform any changes.\n   * True if we want to perform the changes.\n   */\n  useCustomCompletionCriteriaClicked() {\n    if (this.useCustomCompletionCriteria == false) {\n      /*\n       * The completion criteria was changed from true to false which\n       * means we will delete the completionCriteria object. We will confirm\n       * with the author that they want to delete the completion criteria.\n       */\n      let answer = confirm(this.$translate('areYouSureYouWantToDeleteTheCustomCompletionCriteria'));\n      if (!answer) {\n        // the author answered no so we will abort\n        this.useCustomCompletionCriteria = true;\n        return false;\n      }\n    }\n\n    if (this.useCustomCompletionCriteria) {\n      /*\n       * We are using a completion criteria so we will populate it if it\n       * doesn't already exist.\n       */\n      if (this.authoringComponentContent.completionCriteria == null) {\n        this.authoringComponentContent.completionCriteria = {\n          inOrder: true,\n          criteria: []\n        };\n      }\n    } else {\n      // we are not using a completion criteria so we will delete it\n      delete this.authoringComponentContent.completionCriteria;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n    return true;\n  }\n\n  /**\n   * Move a completion criteria up.\n   * @param index The index of the completion criteria to move up.\n   */\n  moveCompletionCriteriaUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index back\n      this.authoringComponentContent.completionCriteria.criteria.splice(index - 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a completion criteria down.\n   * @param index The index of the completion criteria to move down.\n   */\n  moveCompletionCriteriaDown(index) {\n    if (index < this.authoringComponentContent.completionCriteria.criteria.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index forward\n      this.authoringComponentContent.completionCriteria.criteria.splice(index + 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a completion criteria.\n   */\n  authoringAddCompletionCriteria() {\n    let newCompletionCriteria = {\n      nodeId: this.nodeId,\n      componentId: this.componentId,\n      name: 'isSubmitted'\n    };\n    this.authoringComponentContent.completionCriteria.criteria.push(newCompletionCriteria);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a completion criteria.\n   * @param index The index of the completion criteria.\n   */\n  authoringDeleteCompletionCriteria(index) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisCompletionCriteria'));\n    if (answer) {\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if the item id is a valid CRater item id.\n   * @param itemId A string.\n   */\n  verifyCRaterItemId(itemId) {\n    // clear the Valid/Invalid text\n    this.cRaterItemIdIsValid = null;\n\n    // turn on the \"Verifying...\" text\n    this.isVerifyingCRaterItemId = true;\n\n    this.CRaterService.verifyCRaterItemId(itemId).then((isValid) => {\n      // turn off the \"Verifying...\" text\n      this.isVerifyingCRaterItemId = false;\n\n      // set the Valid/Invalid text\n      this.cRaterItemIdIsValid = isValid;\n    });\n  }\n};\n\nOpenResponseAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseAuthoringController;\n"]}