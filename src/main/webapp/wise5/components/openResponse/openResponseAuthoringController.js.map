{"version":3,"sources":["openResponseAuthoringController.es6"],"names":["OpenResponseAuthoringController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","allowedConnectedComponentTypes","type","$watch","authoringComponentContent","bind","newValue","oldValue","componentContent","injectAssetPaths","submitCounter","studentResponse","latestAnnotations","isDirty","isSubmitDirty","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","starterSentence","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","cRater","scoringRules","newScoringRule","score","feedbackText","push","authoringViewComponentChanged","index","scoringRule","splice","length","answer","confirm","$translate","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","previousScore","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","enableMultipleAttemptScoringRules","setShowSubmitButtonValue","enableNotifications","useCustomCompletionCriteria","completionCriteria","inOrder","criteria","newCompletionCriteria","name","cRaterItemIdIsValid","isVerifyingCRaterItemId","verifyCRaterItemId","then","isValid","$inject"],"mappings":"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","file":"openResponseAuthoringController.js","sourcesContent":["'use strict';\n\nimport OpenResponseController from \"./openResponseController\";\n\nclass OpenResponseAuthoringController extends OpenResponseController {\n\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              CRaterService,\n              NodeService,\n              NotebookService,\n              NotificationService,\n              OpenResponseService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    super($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService);\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'OpenResponse'\n      }\n    ];\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n      // inject the asset paths into the new component content\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n      /*\n       * reset the values so that the preview is refreshed with\n       * the new content\n       */\n      this.submitCounter = 0;\n      this.studentResponse = '';\n      this.latestAnnotations = null;\n      this.isDirty = false;\n      this.isSubmitDirty = false;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      if (this.componentContent.starterSentence != null) {\n        /*\n         * the student has not done any work and there is a starter sentence\n         * so we will populate the textarea with the starter sentence\n         */\n        this.studentResponse = this.componentContent.starterSentence;\n      }\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * Add a scoring rule\n   */\n  authoringAddScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // create a scoring rule object\n      var newScoringRule = {};\n      newScoringRule.score = '';\n      newScoringRule.feedbackText = '';\n\n      // add the new scoring rule object\n      this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a scoring rule up\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the top\n      if (index != 0) {\n        // the scoring rule is not at the top so we can move it up\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a scoring rule down\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the end\n      if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a scoring rule\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // get the scoring rule\n      var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n      if (scoringRule != null) {\n\n        // get the score and feedback text\n        var score = scoringRule.score;\n        var feedbackText = scoringRule.feedbackText;\n\n        // make sure the author really wants to delete the scoring rule\n        //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the scoring rule\n          this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n   * we can add different types in the future.\n   */\n  authoringAddNotification() {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // create a new notification\n      let newNotification = {\n        notificationType: 'CRaterResult',\n        enableCriteria: {\n          scoreSequence: ['', '']\n        },\n        isAmbient: false,\n        dismissCode: 'apple',\n        isNotifyTeacher: true,\n        isNotifyStudent: true,\n        notificationMessageToStudent: '{{username}}, ' + this.$translate('openResponse.youGotAScoreOf') + ' {{score}}. ' + this.$translate('openResponse.pleaseTalkToYourTeacher') + '.',\n        notificationMessageToTeacher: '{{username}} ' + this.$translate('openResponse.gotAScoreOf') + ' {{score}}.'\n      };\n\n      // add the new notification\n      this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n      // the author has made changes so we will save the component content\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a multiple attempt scoring rule\n   */\n  authoringAddMultipleAttemptScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // create a new multiple attempt scoring rule\n      var newMultipleAttemptScoringRule = {};\n      newMultipleAttemptScoringRule.scoreSequence = ['', ''];\n      newMultipleAttemptScoringRule.feedbackText = '';\n\n      // add the new multiple attempt scoring rule\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule up\n   * @param index\n   */\n  authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not already at the top\n      if (index != 0) {\n        // the multiple attempt scoring rule is not at the top\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule down\n   * @param index the index of the multiple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not at the end\n      if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n        // the multiple attempt scoring rule is not at the end\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a multiple attempt scoring rule\n   * @param index the index of the mulitple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // get the multiple attempt scoring rule\n      var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n      if (multipleAttemptScoringRule != null) {\n\n        // get the score sequence\n        var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // get the feedback text\n        var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n        // make sure the author really wants to delete the multiple attempt scoring rule\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the multiple attempt scoring rule\n          this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Move a notification up\n   * @param index of the notification\n   */\n  authoringViewNotificationUpClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not already at the top\n      if (index != 0) {\n        // the notification is not at the top\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index back\n        this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a notification down\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDownClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not at the end\n      if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n        // the notification is not at the end\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index forward\n        this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a notification\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDeleteClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // get the notification\n      var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n      if (notification != null) {\n\n        // get the score sequence\n        var scoreSequence = notification.enableCriteria.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // make sure the author really wants to delete the notification\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n        if (answer) {\n          // the author answered yes to delete the notification\n          this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n          // the author has made changes so we will save the component content\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * The \"Enable CRater\" checkbox was clicked\n   */\n  authoringViewEnableCRaterClicked() {\n\n    if (this.authoringComponentContent.enableCRater) {\n      // CRater was turned on\n\n      if (this.authoringComponentContent.cRater == null) {\n        /*\n         * the cRater object does not exist in the component content\n         * so we will create it\n         */\n\n        // create the cRater object\n        var cRater = {};\n        cRater.itemType = 'CRATER';\n        cRater.itemId = '';\n        cRater.scoreOn = 'submit';\n        cRater.showScore = true;\n        cRater.showFeedback = true;\n        cRater.scoringRules = [];\n        cRater.enableMultipleAttemptScoringRules = false;\n        cRater.multipleAttemptScoringRules = []\n\n        // set the cRater object into the component content\n        this.authoringComponentContent.cRater = cRater;\n      }\n\n      // turn on the submit button\n      //this.authoringComponentContent.showSubmitButton = true;\n      this.setShowSubmitButtonValue(true);\n    } else {\n      // CRater was turned off\n\n      // turn off the submit button\n      this.setShowSubmitButtonValue(false);\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n   */\n  enableMultipleAttemptScoringRulesClicked() {\n\n    // get the cRater object from the component content\n    var cRater = this.authoringComponentContent.cRater;\n\n    if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n      /*\n       * the multiple attempt scoring rules array does not exist so\n       * we will create it\n       */\n      cRater.multipleAttemptScoringRules = [];\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Notifications\" checkbox was clicked\n   */\n  authoringViewEnableNotificationsClicked() {\n\n    if (this.authoringComponentContent.enableNotifications) {\n      // Notifications was turned on\n\n      if (this.authoringComponentContent.notificationSettings == null) {\n        /*\n         * the NotificationSettings object does not exist in the component content\n         * so we will create it\n         */\n        this.authoringComponentContent.notificationSettings = {\n          notifications: []\n        };\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The Use Completion Criteria checkbox was clicked. We will toggle the\n   * completion criteria in the component content.\n   * @return False if we want to cancel the click and not perform any changes.\n   * True if we want to perform the changes.\n   */\n  useCustomCompletionCriteriaClicked() {\n    if (this.useCustomCompletionCriteria == false) {\n      /*\n       * The completion criteria was changed from true to false which\n       * means we will delete the completionCriteria object. We will confirm\n       * with the author that they want to delete the completion criteria.\n       */\n      let answer = confirm(this.$translate('areYouSureYouWantToDeleteTheCustomCompletionCriteria'));\n      if (!answer) {\n        // the author answered no so we will abort\n        this.useCustomCompletionCriteria = true;\n        return false;\n      }\n    }\n\n    if (this.useCustomCompletionCriteria) {\n      /*\n       * We are using a completion criteria so we will populate it if it\n       * doesn't already exist.\n       */\n      if (this.authoringComponentContent.completionCriteria == null) {\n        this.authoringComponentContent.completionCriteria = {\n          inOrder: true,\n          criteria: []\n        };\n      }\n    } else {\n      // we are not using a completion criteria so we will delete it\n      delete this.authoringComponentContent.completionCriteria;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n    return true;\n  }\n\n  /**\n   * Move a completion criteria up.\n   * @param index The index of the completion criteria to move up.\n   */\n  moveCompletionCriteriaUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index back\n      this.authoringComponentContent.completionCriteria.criteria.splice(index - 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a completion criteria down.\n   * @param index The index of the completion criteria to move down.\n   */\n  moveCompletionCriteriaDown(index) {\n    if (index < this.authoringComponentContent.completionCriteria.criteria.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index forward\n      this.authoringComponentContent.completionCriteria.criteria.splice(index + 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a completion criteria.\n   */\n  authoringAddCompletionCriteria() {\n    let newCompletionCriteria = {\n      nodeId: this.nodeId,\n      componentId: this.componentId,\n      name: 'isSubmitted'\n    };\n    this.authoringComponentContent.completionCriteria.criteria.push(newCompletionCriteria);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a completion criteria.\n   * @param index The index of the completion criteria.\n   */\n  authoringDeleteCompletionCriteria(index) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisCompletionCriteria'));\n    if (answer) {\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if the item id is a valid CRater item id.\n   * @param itemId A string.\n   */\n  verifyCRaterItemId(itemId) {\n    // clear the Valid/Invalid text\n    this.cRaterItemIdIsValid = null;\n\n    // turn on the \"Verifying...\" text\n    this.isVerifyingCRaterItemId = true;\n\n    this.CRaterService.verifyCRaterItemId(itemId).then((isValid) => {\n      // turn off the \"Verifying...\" text\n      this.isVerifyingCRaterItemId = false;\n\n      // set the Valid/Invalid text\n      this.cRaterItemIdIsValid = isValid;\n    });\n  }\n};\n\nOpenResponseAuthoringController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseAuthoringController;\n"]}