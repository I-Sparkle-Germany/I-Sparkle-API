{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","onlyShowWork","latestAnnotations","messageDialog","submitCounter","showAdvancedAuthoring","showJSONAuthoring","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","starterSentence","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","openResponseController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","script","retrieveScript","Function","call","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","componentType","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","previousScore","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkNodeId","importWorkComponentId","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","setShowSubmitButtonValue","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","tags","tag","connectedComponents","c","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedResponse","newConnectedComponent","connectedComponentType","authoringConnectedComponentComponentIdChanged","a","allowedConnectedComponentType","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // whether we're only showing the student work\n        this.onlyShowWork = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'OpenResponse'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.onlyShowWork = true;\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    // inject the asset paths into the new component content\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    /*\n                     * reset the values so that the preview is refreshed with\n                     * the new content\n                     */\n                    this.submitCounter = 0;\n                    this.studentResponse = '';\n                    this.latestAnnotations = null;\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                    if (this.componentContent.starterSentence != null) {\n                        /*\n                         * the student has not done any work and there is a starter sentence\n                         * so we will populate the textarea with the starter sentence\n                         */\n                        this.studentResponse = this.componentContent.starterSentence;\n                    }\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (this.mode == 'student') {\n                if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                    // we will show work from another component\n                    this.handleConnectedComponents();\n                }  else if (this.OpenResponseService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                    /*\n                     * the student has work so we will populate the work into this\n                     * component\n                     */\n                    this.setStudentWork(componentState);\n                } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                    // we will import work from another component\n                    this.handleConnectedComponents();\n                } else if (componentState == null) {\n                    // check if we need to import work\n\n                    var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n                    var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n                    if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                        /*\n                         * the student does not have any work and there are connected\n                         * components so we will get the work from the connected\n                         * components\n                         */\n                        this.handleConnectedComponents();\n                    } else if (this.componentContent.starterSentence != null) {\n                        /*\n                         * the student has not done any work and there is a starter sentence\n                         * so we will populate the textarea with the starter sentence\n                         */\n                        this.studentResponse = this.componentContent.starterSentence;\n                    }\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        //$('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.openResponseController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.openResponseController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n\n        // load script for this component, if any\n        let script = this.componentContent.script;\n        if (script != null) {\n            this.ProjectService.retrieveScript(script).then((script) => {\n                new Function(script).call(this);\n            });\n        }\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        if (this.mode === 'authoring') {\n            /*\n             * we are in authoring mode so we will set isDirty to false here\n             * because the 'componentSaveTriggered' event won't work in\n             * authoring mode\n             */\n            this.isDirty = false;\n        }\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n\n                    // the student does not have any more chances to submit\n                    alert(this.$translate('openResponse.youHaveNoMoreChances'));\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                } else if (numberOfSubmitsLeft > 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // set the response into the component state\n        var studentData = {};\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the flag for whether the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        // set the component type\n        componentState.componentType = 'OpenResponse';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit' && componentState.isSubmit) {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        let score = data.score;\n                        let concepts = data.concepts;\n                        let previousScore = null;\n\n                        if (score != null) {\n\n                            // create the auto score annotation\n                            let autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n                            let annotationGroupForScore = null;\n\n                            if (this.$scope.$parent.nodeController != null) {\n                                // get the previous score and comment annotations\n                                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                                if (latestAnnotations != null && latestAnnotations.score != null &&\n                                    latestAnnotations.score.data != null) {\n\n                                    // get the previous score annotation value\n                                    previousScore = latestAnnotations.score.data.value;\n                                }\n\n                                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                                    let globalAnnotationMaxCount = 0;\n                                    if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                                        globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                                    }\n                                    // get the annotation properties for the score that the student got.\n                                    annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                                    // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                                    if (annotationGroupForScore != null) {\n                                        let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                                        annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                                        if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                                            // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                                            annotationGroupForScore = null;\n                                        }\n                                    }\n\n                                    if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                                        // check if this annotation is global and what criteria needs to be met to un-globalize.\n                                        annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                                            // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                                            // so we can compare it when we check for criteria satisfaction.\n                                            if (unGlobalizeCriteria.params != null) {\n                                                unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                                            }\n                                        });\n                                    }\n\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoScoreAnnotation's data\n                                        angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                            }\n\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            if (this.mode === 'authoring') {\n                                if (this.latestAnnotations == null) {\n                                    this.latestAnnotations = {};\n                                }\n\n                                /*\n                                 * we are in the authoring view so we will set the\n                                 * latest score annotation manually\n                                 */\n                                this.latestAnnotations.score = autoScoreAnnotation;\n                            }\n\n                            var autoComment = null;\n\n                            // get the submit counter\n                            var submitCounter = this.submitCounter;\n\n                            if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                                /*\n                                 * this step has multiple attempt scoring rules and this is\n                                 * a subsequent submit\n                                 */\n                                // get the feedback based upon the previous score and current score\n                                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n                            } else {\n                                // get the feedback text\n                                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            }\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                                if (this.componentContent.enableGlobalAnnotations) {\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoCommentAnnotation's data\n                                        angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                                componentState.annotations.push(autoCommentAnnotation);\n\n                                if (this.mode === 'authoring') {\n                                    if (this.latestAnnotations == null) {\n                                        this.latestAnnotations = {};\n                                    }\n\n                                    /*\n                                     * we are in the authoring view so we will set the\n                                     * latest comment annotation manually\n                                     */\n                                    this.latestAnnotations.comment = autoCommentAnnotation;\n                                }\n                            }\n                            if (this.componentContent.enableNotifications) {\n                                // get the notification properties for the score that the student got.\n                                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                                if (notificationForScore != null) {\n                                    notificationForScore.score = score;\n                                    notificationForScore.nodeId = this.nodeId;\n                                    notificationForScore.componentId = this.componentId;\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\n                                }\n                            }\n\n                            // display global annotations dialog if needed\n                            if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                                this.$scope.$emit('displayGlobalAnnotations');\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * hide the dialog that tells the student to wait since\n                 * the work has been scored.\n                 */\n                this.$mdDialog.hide();\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n            // if there are any additionalProcessingFunctions for this node and component, call all of them\n            let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n            let allPromises = [];\n            for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n                let additionalProcessingFunction = additionalProcessingFunctions[i];\n                let defer = this.$q.defer();\n                let promise = defer.promise;\n                allPromises.push(promise);\n                additionalProcessingFunction(defer, componentState, action);\n            }\n            this.$q.all(allPromises).then(() => {\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n\n                        // make the work dirty so that it gets saved\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n\n    /**\n     * Add a scoring rule\n     */\n    authoringAddScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // create a scoring rule object\n            var newScoringRule = {};\n            newScoringRule.score = \"\";\n            newScoringRule.feedbackText = \"\";\n\n            // add the new scoring rule object\n            this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a scoring rule up\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the top\n            if (index != 0) {\n                // the scoring rule is not at the top so we can move it up\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a scoring rule down\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the end\n            if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a scoring rule\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // get the scoring rule\n            var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n            if (scoringRule != null) {\n\n                // get the score and feedback text\n                var score = scoringRule.score;\n                var feedbackText = scoringRule.feedbackText;\n\n                // make sure the author really wants to delete the scoring rule\n                //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the scoring rule\n                    this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n     * we can add different types in the future.\n     */\n    authoringAddNotification() {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // create a new notification\n            let newNotification = {\n                notificationType: \"CRaterResult\",\n                enableCriteria: {\n                    scoreSequence: [\"\", \"\"]\n                },\n                isAmbient: false,\n                dismissCode: \"apple\",\n                isNotifyTeacher: true,\n                isNotifyStudent: true,\n                notificationMessageToStudent: \"{{username}}, \" + this.$translate('openResponse.youGotAScoreOf') + \" {{score}}. \" + this.$translate('openResponse.pleaseTalkToYourTeacher') + \".\",\n                notificationMessageToTeacher: \"{{username}} \" + this.$translate('openResponse.gotAScoreOf') + \" {{score}}.\"\n            };\n\n            // add the new notification\n            this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n            // the author has made changes so we will save the component content\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Add a multiple attempt scoring rule\n     */\n    authoringAddMultipleAttemptScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // create a new multiple attempt scoring rule\n            var newMultipleAttemptScoringRule = {};\n            newMultipleAttemptScoringRule.scoreSequence = [\"\", \"\"];\n            newMultipleAttemptScoringRule.feedbackText = \"\";\n\n            // add the new multiple attempt scoring rule\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule up\n     * @param index\n     */\n    authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not already at the top\n            if (index != 0) {\n                // the multiple attempt scoring rule is not at the top\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule down\n     * @param index the index of the multiple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not at the end\n            if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n                // the multiple attempt scoring rule is not at the end\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a multiple attempt scoring rule\n     * @param index the index of the mulitple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // get the multiple attempt scoring rule\n            var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n            if (multipleAttemptScoringRule != null) {\n\n                // get the score sequence\n                var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // get the feedback text\n                var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n                // make sure the author really wants to delete the multiple attempt scoring rule\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the multiple attempt scoring rule\n                    this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Move a notification up\n     * @param index of the notification\n     */\n    authoringViewNotificationUpClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not already at the top\n            if (index != 0) {\n                // the notification is not at the top\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index back\n                this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a notification down\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDownClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not at the end\n            if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n                // the notification is not at the end\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index forward\n                this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a notification\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDeleteClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // get the notification\n            var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n            if (notification != null) {\n\n                // get the score sequence\n                var scoreSequence = notification.enableCriteria.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // make sure the author really wants to delete the notification\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n                if (answer) {\n                    // the author answered yes to delete the notification\n                    this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                    // the author has made changes so we will save the component content\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable CRater\" checkbox was clicked\n     */\n    authoringViewEnableCRaterClicked() {\n\n        if (this.authoringComponentContent.enableCRater) {\n            // CRater was turned on\n\n            if (this.authoringComponentContent.cRater == null) {\n                /*\n                 * the cRater object does not exist in the component content\n                 * so we will create it\n                 */\n\n                // create the cRater object\n                var cRater = {};\n                cRater.itemType = \"CRATER\";\n                cRater.itemId = \"\";\n                cRater.scoreOn = \"submit\";\n                cRater.showScore = true;\n                cRater.showFeedback = true;\n                cRater.scoringRules = [];\n                cRater.enableMultipleAttemptScoringRules = false;\n                cRater.multipleAttemptScoringRules = []\n\n                // set the cRater object into the component content\n                this.authoringComponentContent.cRater = cRater;\n            }\n\n            // turn on the submit button\n            //this.authoringComponentContent.showSubmitButton = true;\n            this.setShowSubmitButtonValue(true);\n        } else {\n            // CRater was turned off\n\n            // turn off the submit button\n            this.setShowSubmitButtonValue(false);\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n     */\n    enableMultipleAttemptScoringRulesClicked() {\n\n        // get the cRater object from the component content\n        var cRater = this.authoringComponentContent.cRater;\n\n        if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n            /*\n             * the multiple attempt scoring rules array does not exist so\n             * we will create it\n             */\n            cRater.multipleAttemptScoringRules = [];\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Notifications\" checkbox was clicked\n     */\n    authoringViewEnableNotificationsClicked() {\n\n        if (this.authoringComponentContent.enableNotifications) {\n            // Notifications was turned on\n\n            if (this.authoringComponentContent.notificationSettings == null) {\n                /*\n                 * the NotificationSettings object does not exist in the component content\n                 * so we will create it\n                 */\n                this.authoringComponentContent.notificationSettings = {\n                    notifications: []\n                };\n            }\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions() {\n        // get the component states for this component\n        return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    };\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the import previous work node id\n     * @return the import previous work node id or null\n     */\n    getImportPreviousWorkNodeId() {\n        var importPreviousWorkNodeId = null;\n\n        if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n            importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n        }\n\n        return importPreviousWorkNodeId;\n    }\n\n    /**\n     * Get the import previous work component id\n     * @return the import previous work component id or null\n     */\n    getImportPreviousWorkComponentId() {\n        var importPreviousWorkComponentId = null;\n\n        if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n        }\n\n        return importPreviousWorkComponentId;\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            // merge the student responses from all the component states\n            var mergedComponentState = this.createMergedComponentState(componentStates);\n\n            // set the student work into the component\n            this.setStudentWork(mergedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Create a component state with the merged student responses\n     * @param componentStates an array of component states\n     * @return a component state with the merged student responses\n     */\n    createMergedComponentState(componentStates) {\n\n        // create a new component state\n        let mergedComponentState = this.NodeService.createNewComponentState();\n\n        if (componentStates != null) {\n\n            let mergedResponse = '';\n\n            // loop through all the component state\n            for (let c = 0; c < componentStates.length; c++) {\n                let componentState = componentStates[c];\n\n                if (componentState != null) {\n                    let studentData = componentState.studentData;\n\n                    if (studentData != null) {\n\n                        // get the student response\n                        let response = studentData.response;\n\n                        if (response != null && response != '') {\n                            if (mergedResponse != '') {\n                                // add a new line between the responses\n                                mergedResponse += '\\n';\n                            }\n\n                            // append the response\n                            mergedResponse += response;\n                        }\n                    }\n                }\n            }\n\n            if (mergedResponse != null && mergedResponse != '') {\n                // set the merged response into the merged component state\n                mergedComponentState.studentData = {};\n                mergedComponentState.studentData.response = mergedResponse;\n            }\n        }\n\n        return mergedComponentState;\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = 'importWork';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n\n            // remove all the specific component parameters\n            this.authoringConnectedComponentComponentIdChanged(connectedComponent);\n\n            // clear the component id\n            connectedComponent.componentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n};\n\nOpenResponseController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default OpenResponseController;\n"]}