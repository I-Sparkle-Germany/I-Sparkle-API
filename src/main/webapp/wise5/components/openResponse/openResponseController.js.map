{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","showAdvancedAuthoring","onlyShowWork","latestAnnotations","messageDialog","submitCounter","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","starterSentence","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","openResponseController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","autoComment","autoCommentAnnotationData","autoCommentAnnotation","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","previousScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","createAutoCommentAnnotation","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n    constructor($filter,\n                $injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // whether we're only showing the student work\n        this.onlyShowWork = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.onlyShowWork = true;\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        //$('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.openResponseController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.openResponseController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n\n                    // the student does not have any more chances to submit\n                    alert(this.$translate('openResponse.youHaveNoMoreChances'));\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                } else if (numberOfSubmitsLeft > 1) {\n\n                    // ask the student if they are sure they want to submit\n                    message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                    performSubmit = confirm(message);\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        // the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit' && componentState.isSubmit) {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n\n                        if (score != null) {\n\n                            // create the auto score annotation\n                            let autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n                            let annotationGroupForScore = null;\n\n                            // get the previous score and comment annotations\n                            let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                            let previousScore = null;\n\n                            if (latestAnnotations != null && latestAnnotations.score != null &&\n                                latestAnnotations.score.data != null) {\n\n                                // get the previous score annotation value\n                                previousScore = latestAnnotations.score.data.value;\n                            }\n\n                            if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                                let globalAnnotationMaxCount = 0;\n                                if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                                }\n                                // get the annotation properties for the score that the student got.\n                                annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                                // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                                if (annotationGroupForScore != null) {\n                                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                                        // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                                        annotationGroupForScore = null;\n                                    }\n                                }\n\n                                if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                                        // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                                        // so we can compare it when we check for criteria satisfaction.\n                                        if (unGlobalizeCriteria.params != null) {\n                                            unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                                        }\n                                    });\n                                }\n\n                                if (annotationGroupForScore != null) {\n                                    // copy over the annotation properties into the autoScoreAnnotation's data\n                                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                                }\n\n                            }\n\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            var autoComment = null;\n\n                            // get the submit counter\n                            var submitCounter = this.submitCounter;\n\n                            if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                                /*\n                                 * this step has multiple attempt scoring rules and this is\n                                 * a subsequent submit\n                                 */\n                                // get the feedback based upon the previous score and current score\n                                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n                            } else {\n                                // get the feedback text\n                                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            }\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                                if (this.componentContent.enableGlobalAnnotations) {\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoCommentAnnotation's data\n                                        angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n                            if (this.componentContent.enableNotifications) {\n                                // get the notification properties for the score that the student got.\n                                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                                if (notificationForScore != null) {\n                                    notificationForScore.score = score;\n                                    notificationForScore.nodeId = this.nodeId;\n                                    notificationForScore.componentId = this.componentId;\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\n                                }\n                            }\n\n                            // display global annotations dialog if needed\n                            if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                                this.$scope.$emit('displayGlobalAnnotations');\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * hide the dialog that tells the student to wait since\n                 * the work has been scored.\n                 */\n                this.$mdDialog.hide();\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n\n    /**\n     * Add a scoring rule\n     */\n    authoringAddScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // create a scoring rule object\n            var newScoringRule = {};\n            newScoringRule.score = \"\";\n            newScoringRule.feedbackText = \"\";\n\n            // add the new scoring rule object\n            this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a scoring rule up\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the top\n            if (index != 0) {\n                // the scoring rule is not at the top so we can move it up\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a scoring rule down\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the end\n            if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a scoring rule\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // get the scoring rule\n            var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n            if (scoringRule != null) {\n\n                // get the score and feedback text\n                var score = scoringRule.score;\n                var feedbackText = scoringRule.feedbackText;\n\n                // make sure the author really wants to delete the scoring rule\n                //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the scoring rule\n                    this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n     * we can add different types in the future.\n     */\n    authoringAddNotification() {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // create a new notification\n            let newNotification = {\n                notificationType: \"CRaterResult\",\n                enableCriteria: {\n                    scoreSequence: [\"\", \"\"]\n                },\n                isAmbient: false,\n                dismissCode: \"apple\",\n                isNotifyTeacher: true,\n                isNotifyStudent: true,\n                notificationMessageToStudent: \"{{username}}, \" + this.$translate('openResponse.youGotAScoreOf') + \" {{score}}. \" + this.$translate('openResponse.pleaseTalkToYourTeacher') + \".\",\n                notificationMessageToTeacher: \"{{username}} \" + this.$translate('openResponse.gotAScoreOf') + \" {{score}}.\"\n            };\n\n            // add the new notification\n            this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n            // the author has made changes so we will save the component content\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Add a multiple attempt scoring rule\n     */\n    authoringAddMultipleAttemptScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // create a new multiple attempt scoring rule\n            var newMultipleAttemptScoringRule = {};\n            newMultipleAttemptScoringRule.scoreSequence = [\"\", \"\"];\n            newMultipleAttemptScoringRule.feedbackText = \"\";\n\n            // add the new multiple attempt scoring rule\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule up\n     * @param index\n     */\n    authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not already at the top\n            if (index != 0) {\n                // the multiple attempt scoring rule is not at the top\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule down\n     * @param index the index of the multiple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not at the end\n            if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n                // the multiple attempt scoring rule is not at the end\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a multiple attempt scoring rule\n     * @param index the index of the mulitple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // get the multiple attempt scoring rule\n            var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n            if (multipleAttemptScoringRule != null) {\n\n                // get the score sequence\n                var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // get the feedback text\n                var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n                // make sure the author really wants to delete the multiple attempt scoring rule\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n                if (answer) {\n                    // the author answered yes to delete the multiple attempt scoring rule\n                    this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Move a notification up\n     * @param index of the notification\n     */\n    authoringViewNotificationUpClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not already at the top\n            if (index != 0) {\n                // the notification is not at the top\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index back\n                this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a notification down\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDownClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // make sure the notification is not at the end\n            if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n                // the notification is not at the end\n\n                // get the notification\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n                // remove the notification\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                // add the notification back at the position one index forward\n                this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n                // the author has made changes so we will save the component content\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a notification\n     * @param index the index of the notification\n     */\n    authoringViewNotificationDeleteClicked(index) {\n\n        if (this.authoringComponentContent.notificationSettings != null &&\n            this.authoringComponentContent.notificationSettings.notifications != null) {\n\n            // get the notification\n            var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n            if (notification != null) {\n\n                // get the score sequence\n                var scoreSequence = notification.enableCriteria.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // make sure the author really wants to delete the notification\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n                if (answer) {\n                    // the author answered yes to delete the notification\n                    this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n                    // the author has made changes so we will save the component content\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable CRater\" checkbox was clicked\n     */\n    authoringViewEnableCRaterClicked() {\n\n        if (this.authoringComponentContent.enableCRater) {\n            // CRater was turned on\n\n            if (this.authoringComponentContent.cRater == null) {\n                /*\n                 * the cRater object does not exist in the component content\n                 * so we will create it\n                 */\n\n                // create the cRater object\n                var cRater = {};\n                cRater.itemType = \"CRATER\";\n                cRater.itemId = \"\";\n                cRater.scoreOn = \"submit\";\n                cRater.showScore = true;\n                cRater.showFeedback = true;\n                cRater.scoringRules = [];\n                cRater.enableMultipleAttemptScoringRules = false;\n                cRater.multipleAttemptScoringRules = []\n\n                // set the cRater object into the component content\n                this.authoringComponentContent.cRater = cRater;\n            }\n\n            // turn on the submit button\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n     */\n    enableMultipleAttemptScoringRulesClicked() {\n\n        // get the cRater object from the component content\n        var cRater = this.authoringComponentContent.cRater;\n\n        if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n            /*\n             * the multiple attempt scoring rules array does not exist so\n             * we will create it\n             */\n            cRater.multipleAttemptScoringRules = [];\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Notifications\" checkbox was clicked\n     */\n    authoringViewEnableNotificationsClicked() {\n\n        if (this.authoringComponentContent.enableNotifications) {\n            // Notifications was turned on\n\n            if (this.authoringComponentContent.notificationSettings == null) {\n                /*\n                 * the NotificationSettings object does not exist in the component content\n                 * so we will create it\n                 */\n                this.authoringComponentContent.notificationSettings = {\n                    notifications: []\n                };\n            }\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions() {\n        // get the component states for this component\n        return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    };\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Add a connected component\n     */\n    addConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.updateOn = 'change';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    deleteConnectedComponent(index) {\n\n        if (this.authoringComponentContent.connectedComponents != null) {\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n};\n\nOpenResponseController.$inject = [\n    '$filter',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default OpenResponseController;\n"]}