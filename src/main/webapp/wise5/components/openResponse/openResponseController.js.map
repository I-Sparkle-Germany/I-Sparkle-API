{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","latestAnnotations","messageDialog","submitCounter","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","componentState","importWorkNodeId","importWorkComponentId","importWork","starterSentence","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","openResponseController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","autoScoreAnnotationData","value","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","previousScore","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","notificationsForScore","getNotificationsByScore","n","notificationForScore","sendNotificationForScore","isPopup","hide","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","multipleAttemptScoringRules","newMultipleAttemptScoringRule","scoreSequence","multipleAttemptScoringRule","currentScore","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","component","componentHasWork","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the submit button is disabled\n        this.isSubmitButtonDisabled = false;\n        \n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n        \n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n            \n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we \n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        //$('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.openResponseController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.openResponseController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                if (this.mode === 'grading') {\n                    this.processLatestSubmit(componentState);\n                } else {\n                    this.processLatestSubmit();\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     * @param componentState (optional)\n     */\n    processLatestSubmit(componentState) {\n        let latestState = null;\n        if (componentState) {\n            latestState = componentState;\n        } else {\n            latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n        }\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        \n        var performSubmit = true;\n        \n        if (this.componentContent.maxSubmitCount != null) {\n            // there is a max submit count\n            \n            // calculate the number of submits this student has left\n            var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n            \n            var message = '';\n            \n            if (numberOfSubmitsLeft <= 0) {\n                \n                // the student does not have any more chances to submit\n                alert('You do not have any more chances to receive feedback on your answer.');\n                performSubmit = false;\n            } else if (numberOfSubmitsLeft == 1) {\n                \n                // ask the student if they are sure they want to submit\n                message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                performSubmit = confirm(message);\n            } else if (numberOfSubmitsLeft > 1) {\n                \n                // ask the student if they are sure they want to submit\n                message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n                performSubmit = confirm(message);\n            }\n        }\n        \n        if (performSubmit) {\n            // increment the submit counter\n            this.submitCounter++;\n            \n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their submits so we will\n                 * disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n            \n            this.isSubmit = true;\n\n            // tell the parent node that this component wants to submit\n            this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        }\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n        \n        if (this.submitCounter > this.componentContent.maxSubmitCount) {\n            // the student has used up all their chances to submit\n            performCRaterScoring = false;\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n\n                        if (score != null) {\n\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n                            let annotationGroupForScore = null;\n\n                            if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n                                let globalAnnotationMaxCount = 0;\n                                if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                                }\n                                // get the annotation properties for the score that the student got.\n                                annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, score);\n\n                                // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                                if (annotationGroupForScore != null) {\n                                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                                        // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                                        annotationGroupForScore = null;\n                                    }\n                                }\n\n                                if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                                        // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                                        // so we can compare it when we check for criteria satisfaction.\n                                        if (unGlobalizeCriteria.params != null) {\n                                            unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                                        }\n                                    });\n                                }\n\n                                if (annotationGroupForScore != null) {\n                                    // copy over the annotation properties into the autoScoreAnnotation's data\n                                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                                }\n\n                            }\n\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            var autoComment = null;\n\n                            // get the submit counter\n                            var submitCounter = this.submitCounter;\n\n                            if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                                /*\n                                 * this step has multiple attempt scoring rules and this is\n                                 * a subsequent submit\n                                 */\n\n                                // get the previous score and comment annotations\n                                var latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                                var previousScore = null;\n\n                                if (latestAnnotations != null && latestAnnotations.score != null &&\n                                    latestAnnotations.score.data != null) {\n\n                                    // get the previous score annotation value\n                                    previousScore = latestAnnotations.score.data.value;\n                                }\n\n                                // get the feedback based upon the previous score and current score\n                                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n                            } else {\n                                // get the feedback text\n                                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n                            }\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                                if (this.componentContent.enableGlobalAnnotations) {\n                                    if (annotationGroupForScore != null) {\n                                        // copy over the annotation properties into the autoCommentAnnotation's data\n                                        angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                                    }\n                                }\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n\n                            // get the notification properties for the score that the student got.\n                            var notificationsForScore = this.ProjectService.getNotificationsByScore(this.componentContent, score);\n\n                            if (notificationsForScore != null) {\n                                for (var n = 0; n < notificationsForScore.length; n++) {\n                                    var notificationForScore = notificationsForScore[n];\n                                    notificationForScore.score = score;\n                                    notificationForScore.nodeId = this.nodeId;\n                                    notificationForScore.componentId = this.componentId;\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\n                                }\n                            }\n\n                            // display global annotations dialog if needed\n                            if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                                this.$scope.$emit('displayGlobalAnnotations');\n                            }\n                        }\n                    }\n                }\n\n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since\n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm('Are you sure you want to change this component type?');\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n\n    /**\n     * Add a scoring rule\n     */\n    authoringAddScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // create a scoring rule object\n            var newScoringRule = {};\n            newScoringRule.score = \"\";\n            newScoringRule.feedbackText = \"\";\n\n            // add the new scoring rule object\n            this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a scoring rule up\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the top\n            if (index != 0) {\n                // the scoring rule is not at the top so we can move it up\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a scoring rule down\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // make sure the scoring rule is not already at the end\n            if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n                // get the scoring rule\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n                // remove the scoring rule\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                // add the scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a scoring rule\n     * @param index the index of the scoring rule\n     */\n    authoringViewScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.scoringRules != null) {\n\n            // get the scoring rule\n            var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n            if (scoringRule != null) {\n\n                // get the score and feedback text\n                var score = scoringRule.score;\n                var feedbackText = scoringRule.feedbackText;\n\n                // make sure the author really wants to delete the scoring rule\n                var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n\n                if (answer) {\n                    // the author answered yes to delete the scoring rule\n                    this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a multiple attempt scoring rule\n     */\n    authoringAddMultipleAttemptScoringRule() {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // create a new multiple attempt scoring rule\n            var newMultipleAttemptScoringRule = {};\n            newMultipleAttemptScoringRule.scoreSequence = [\"\", \"\"];\n            newMultipleAttemptScoringRule.feedbackText = \"\";\n\n            // add the new multiple attempt scoring rule\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n            /*\n             * the author has made changes so we will save the component\n             * content\n             */\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule up\n     * @param index\n     */\n    authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not already at the top\n            if (index != 0) {\n                // the multiple attempt scoring rule is not at the top\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index back\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Move a multiple attempt scoring rule down\n     * @param index the index of the multiple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // make sure the multiple attempt scoring rule is not at the end\n            if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n                // the multiple attempt scoring rule is not at the end\n\n                // get the multiple attempt scoring rule\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n                // remove the multiple attempt scoring rule\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                // add the multiple attempt scoring rule back at the position one index forward\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n                /*\n                 * the author has made changes so we will save the component\n                 * content\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Delete a multiple attempt scoring rule\n     * @param index the index of the mulitple attempt scoring rule\n     */\n    authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n        if (this.authoringComponentContent.cRater != null &&\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n            // get the multiple attempt scoring rule\n            var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n            if (multipleAttemptScoringRule != null) {\n\n                // get the score sequence\n                var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n                var previousScore = \"\";\n                var currentScore = \"\";\n\n                if (scoreSequence != null) {\n                    previousScore = scoreSequence[0];\n                    currentScore = scoreSequence[1];\n                }\n\n                // get the feedback text\n                var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n                // make sure the author really wants to delete the multiple attempt scoring rul\n                var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nPrevious Score: ' + previousScore + '\\n\\nCurrent Score: ' + currentScore + '\\n\\nFeedback Text: ' + feedbackText);\n\n                if (answer) {\n                    // the author answered yes to delete the multiple attempt scoring rule\n                    this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n                    /*\n                     * the author has made changes so we will save the component\n                     * content\n                     */\n                    this.authoringViewComponentChanged();\n                }\n            }\n        }\n    }\n\n    /**\n     * The \"Enable CRater\" checkbox was clicked\n     */\n    authoringViewEnableCRaterClicked() {\n\n        if (this.authoringComponentContent.enableCRater) {\n            // CRater was turned on\n\n            if (this.authoringComponentContent.cRater == null) {\n                /*\n                 * the cRater object does not exist in the component content\n                 * so we will create it\n                 */\n\n                // create the cRater object\n                var cRater = {};\n                cRater.itemType = \"CRATER\";\n                cRater.itemId = \"\";\n                cRater.scoreOn = \"submit\";\n                cRater.showScore = true;\n                cRater.showFeedback = true;\n                cRater.scoringRules = [];\n                cRater.enableMultipleAttemptScoringRules = false;\n                cRater.multipleAttemptScoringRules = []\n\n                // set the cRater object into the component content\n                this.authoringComponentContent.cRater = cRater;\n            }\n\n            // turn on the submit button\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n     */\n    enableMultipleAttemptScoringRulesClicked() {\n\n        // get the cRater object from the component content\n        var cRater = this.authoringComponentContent.cRater;\n\n        if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n            /*\n             * the multiple attempt scoring rules array does not exist so\n             * we will create it\n             */\n            cRater.multipleAttemptScoringRules = [];\n        }\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions() {\n        // get the component states for this component\n        return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n    };\n};\n\nOpenResponseController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default OpenResponseController;\n"]}