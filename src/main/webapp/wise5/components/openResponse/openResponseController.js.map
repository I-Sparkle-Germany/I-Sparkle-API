{"version":3,"sources":["openResponseController.es6"],"names":[],"mappings":"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","file":"openResponseController.js","sourcesContent":["class OpenResponseController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                NodeService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.NodeService = NodeService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n\n        //var scope = this;\n        let themePath = \"/wise/\" + this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/css/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.component;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (false) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                // set whether rich text is enabled\n                this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                if (componentState == null) {\n                    /*\n                     * only import work if the student does not already have\n                     * work for this component\n                     */\n\n                    // check if we need to import work\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    } else if (this.componentContent.starterSentence != null) {\n                        /*\n                         * the student has not done any work and there is a starter sentence\n                         * so we will populate the textarea with the starter sentence\n                         */\n                        this.studentResponse = this.componentContent.starterSentence;\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        $('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.openResponseController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.openResponseController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.openResponseController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = this.attachments;\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n        }\n    };\n\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // we're importing a StudentAssetNotebookItem\n            var studentAsset = notebookItem.studentAsset;\n            this.StudentAssetService.copyAssetForReference(studentAsset).then(angular.bind(this, function(copiedAsset) {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        notebookItemId: notebookItem.id,\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            }));\n        } else if (notebookItem.studentWork != null) {\n            // we're importing a StudentWorkNotebookItem\n            var studentWork = notebookItem.studentWork;\n\n            var componentType = studentWork.componentType;\n\n            if (componentType != null) {\n                var childService = this.$injector.get(componentType + 'Service');\n\n                if (childService != null) {\n                    var studentWorkHTML = childService.getStudentWorkAsHTML(studentWork);\n\n                    if (studentWorkHTML != null) {\n                        this.studentResponse += studentWorkHTML;\n                        this.studentDataChanged();\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new comopnent by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.componentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.componentContentJSONString = angular.toJson(this.componentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n        }));\n    };\n};\n\nOpenResponseController.$inject = [\n    '$injector',\n    '$rootScope',\n    '$scope',\n    'NodeService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default OpenResponseController;\n"]}