{"version":3,"sources":["openResponseController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,sB;AAEF,oCAAY,SAAZ,EACY,SADZ,EAEY,EAFZ,EAGY,UAHZ,EAIY,MAJZ,EAKY,iBALZ,EAMY,aANZ,EAOY,aAPZ,EAQY,WARZ,EASY,mBATZ,EAUY,mBAVZ,EAWY,cAXZ,EAYY,mBAZZ,EAaY,kBAbZ,EAcY,uBAdZ,EAeY,WAfZ,EAeyB;AAAA;;AAAA;;AAErB,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,EAAL,GAAU,EAAV;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,iBAAL,GAAyB,iBAAzB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,kBAAL,GAA0B,kBAA1B;AACA,aAAK,uBAAL,GAA+B,uBAA/B;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,SAAL,GAAiB,KAAK,cAAL,CAAoB,SAArC;;AAEA;AACA,aAAK,MAAL,GAAc,IAAd;;AAEA;AACA,aAAK,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAK,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAK,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAK,eAAL,GAAuB,EAAvB;;AAEA;AACA,aAAK,WAAL,GAAmB,EAAnB;;AAEA;AACA,aAAK,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAK,OAAL,GAAe,KAAf;;AAEA;AACA,aAAK,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAK,WAAL,GAAmB;AACf,kBAAM,EADS;AAEf,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAK,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAK,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAK,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAK,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAK,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAK,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAK,aAAL,GAAqB,IAArB;;AAEA;AACA,YAAI,YAAY,KAAK,cAAL,CAAoB,YAApB,EAAhB;;AAEA;AACA;AACA,aAAK,cAAL,GAAsB;AAClB;AACA;AACA;AACA,qBAAS,KAJS;AAKlB,qBAAS,6BALS,EAKsB;AACxC,qBAAS,yHANS;AAOlB,sCAA0B,GAPR;AAQlB,mCAAuB,KARL;AASlB,0BAAc,IATI;AAUlB,yBAAa,YAAY,oBAVP;AAWlB,mBAAO,eAAU,EAAV,EAAc;AACjB,mBAAG,EAAH,CAAM,OAAN,EAAe,UAAU,CAAV,EAAa;AACxB,sBAAE,EAAE,MAAF,CAAS,eAAX,EAA4B,QAA5B,CAAqC,gBAArC,EAAuD,MAAvD,GAAgE,QAAhE,CAAyE,wBAAzE;AACA,sBAAE,gBAAgB,EAAE,MAAF,CAAS,EAAzB,GAA8B,IAAhC,EAAsC,QAAtC,CAA+C,sBAA/C;AACH,iBAHD;;AAKA,mBAAG,EAAH,CAAM,MAAN,EAAc,UAAU,CAAV,EAAa;AACvB,sBAAE,EAAE,MAAF,CAAS,eAAX,EAA4B,WAA5B,CAAwC,gBAAxC,EAA0D,MAA1D,GAAmE,WAAnE,CAA+E,wBAA/E;AACA,sBAAE,gBAAgB,EAAE,MAAF,CAAS,EAAzB,GAA8B,IAAhC,EAAsC,WAAtC,CAAkD,sBAAlD;AACH,iBAHD;AAIH;AArBiB,SAAtB;;AAyBA;AACA,YAAI,cAAc,KAAK,kBAAL,CAAwB,cAAxB,EAAlB;AACA,YAAI,eAAe,IAAnB,EAAyB;AACrB,iBAAK,MAAL,GAAc,YAAY,EAA1B;AACH,SAFD,MAEO;AACH,iBAAK,MAAL,GAAc,KAAK,MAAL,CAAY,MAA1B;AACH;;AAED;AACA,aAAK,gBAAL,GAAwB,KAAK,MAAL,CAAY,gBAApC;;AAEA;AACA,aAAK,yBAAL,GAAiC,KAAK,MAAL,CAAY,yBAA7C;;AAEA;;;;AAIA,aAAK,wBAAL,GAAgC,KAAK,MAAL,CAAY,wBAA5C;;AAEA;AACA,aAAK,IAAL,GAAY,KAAK,MAAL,CAAY,IAAxB;;AAEA,aAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,WAA/B;AACA,aAAK,kBAAL,GAA0B,KAAK,MAAL,CAAY,kBAAtC;;AAEA,YAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAK,WAAL,GAAmB,KAAK,gBAAL,CAAsB,EAAzC;;AAEA,gBAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAAK,gBAAL,CAAsB,cAAjD;AACA,qBAAK,qBAAL,GAA6B,KAAK,gBAAL,CAAsB,gBAAnD;;AAEA;AACA;AACA,qBAAK,iBAAL,GAAyB,KAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,6BAAnC,CAAiE,KAAK,WAAtE,CAAzB;AACH,aARD,MAQO,IAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAChC,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,UAAL,GAAkB,IAAlB;AACH,aALM,MAKA,IAAI,KAAK,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAK,eAAL,GAAuB,KAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,UAAL,GAAkB,IAAlB;AACH,aALM,MAKA,IAAI,KAAK,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAK,eAAL,GAAuB,IAAvB;AACA,qBAAK,mBAAL,GAA2B,KAA3B;AACA,qBAAK,qBAAL,GAA6B,KAA7B;AACA,qBAAK,UAAL,GAAkB,IAAlB;AACH,aALM,MAKA,IAAI,KAAK,IAAL,KAAc,WAAlB,EAA+B;AAClC,qBAAK,2BAAL;;AAEA,uBAAO,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAK,yBAAZ;AACH,iBAFa,CAEZ,IAFY,CAEP,IAFO,CAAd,EAEc,UAAS,QAAT,EAAmB,QAAnB,EAA6B;AACvC,yBAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,gBAApB,CAAqC,QAArC,CAAxB;AACH,iBAFa,CAEZ,IAFY,CAEP,IAFO,CAFd,EAIc,IAJd;AAKH;;AAED,gBAAI,iBAAiB,IAArB;;AAEA;AACA,iBAAK,iBAAL,GAAyB,KAAK,gBAAL,CAAsB,iBAA/C;;AAEA;AACA,iBAAK,0BAAL,GAAkC,KAAK,gBAAL,CAAsB,0BAAxD;;AAEA;AACA,6BAAiB,KAAK,MAAL,CAAY,cAA7B;;AAEA,gBAAI,kBAAkB,IAAtB,EAA4B;AACxB;;;;;AAKA;AACA,oBAAI,mBAAmB,KAAK,gBAAL,CAAsB,gBAA7C;AACA,oBAAI,wBAAwB,KAAK,gBAAL,CAAsB,qBAAlD;;AAEA,oBAAI,oBAAoB,IAApB,IAA4B,yBAAyB,IAAzD,EAA+D;AAC3D;AACA,yBAAK,UAAL;AACH,iBAHD,MAGO,IAAI,KAAK,gBAAL,CAAsB,eAAtB,IAAyC,IAA7C,EAAmD;AACtD;;;;AAIA,yBAAK,eAAL,GAAuB,KAAK,gBAAL,CAAsB,eAA7C;AACH;AACJ,aApBD,MAoBO;AACH;AACA,qBAAK,cAAL,CAAoB,cAApB;AACH;;AAED;AACA,iBAAK,iBAAL;;AAEA,gBAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,2BAApB,IAAmD,IAAvD,EAA6D;AACzD;AACA,qBAAK,MAAL,CAAY,OAAZ,CAAoB,2BAApB,CAAgD,KAAK,MAArD,EAA6D,KAAK,gBAAlE;AACH;AACJ;;AAED;;AAEA;;;AAGA,aAAK,MAAL,CAAY,OAAZ,GAAsB,YAAW;AAC7B,mBAAO,KAAK,MAAL,CAAY,sBAAZ,CAAmC,OAA1C;AACH,SAFqB,CAEpB,IAFoB,CAEf,IAFe,CAAtB;;AAIA;;;;;;;;AAQA,aAAK,MAAL,CAAY,iBAAZ,GAAgC,UAAS,QAAT,EAAmB;AAC/C,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAf;AACA,gBAAI,WAAW,KAAf;AACA,gBAAI,SAAS,QAAb;;AAEA,gBAAI,QAAJ,EAAc;AACV,oBAAI,KAAK,MAAL,CAAY,sBAAZ,CAAmC,aAAvC,EAAsD;AAClD,+BAAW,IAAX;AACA,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAK,MAAL,CAAY,sBAAZ,CAAmC,OAAvC,EAAgD;AAC5C,+BAAW,IAAX;AACA,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAI,QAAJ,EAAc;AACV;AACA,qBAAK,MAAL,CAAY,sBAAZ,CAAmC,oBAAnC,CAAwD,MAAxD,EAAgE,IAAhE,CAAqE,UAAC,cAAD,EAAoB;AACrF,6BAAS,OAAT,CAAiB,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKA,yBAAS,OAAT;AACH;;AAED,mBAAO,SAAS,OAAhB;AACH,SAhC+B,CAgC9B,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAK,MAAL,CAAY,GAAZ,CAAgB,mBAAhB,EAAqC,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;AAEvD;AACA,gBAAI,SAAS,KAAK,MAAlB;;AAEA;AACA,gBAAI,KAAK,MAAL,KAAgB,MAApB,EAA4B;AACxB,qBAAK,QAAL,GAAgB,IAAhB;AACH;AACJ,SAToC,CASnC,IATmC,CAS9B,IAT8B,CAArC;;AAWA;;;;AAIA,aAAK,MAAL,CAAY,GAAZ,CAAgB,0BAAhB,EAA4C,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;AAEjF,gBAAI,iBAAiB,KAAK,WAA1B;;AAEA;AACA,gBAAI,kBAAkB,KAAK,MAAL,KAAgB,eAAe,MAAjD,IACG,KAAK,WAAL,KAAqB,eAAe,WAD3C,EACwD;;AAEpD;AACA,qBAAK,OAAL,GAAe,KAAf;AACA,qBAAK,MAAL,CAAY,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAApC;;AAEA,oBAAI,aAAa,eAAe,UAAhC;AACA,oBAAI,WAAW,eAAe,QAA9B;AACA,oBAAI,iBAAiB,eAAe,cAApC;AACA,oBAAI,iBAAiB,KAAK,aAAL,CAAmB,wBAAnB,CAA4C,cAA5C,CAArB;;AAEA;AACA,oBAAI,QAAJ,EAAc;AACV,yBAAK,cAAL,CAAoB,WAApB,EAAiC,cAAjC;;AAEA,yBAAK,MAAL;;AAEA;AACA,yBAAK,aAAL,GAAqB,KAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAI,UAAJ,EAAgB;AACnB,yBAAK,cAAL,CAAoB,YAApB,EAAkC,cAAlC;AACH,iBAFM,MAEA;AACH,yBAAK,cAAL,CAAoB,OAApB,EAA6B,cAA7B;AACH;AACJ;AACJ,SAhC2C,CAA5C;;AAkCA;;;;AAIA,aAAK,MAAL,CAAY,GAAZ,CAAgB,yBAAhB,EAA2C,UAAC,KAAD,EAAQ,IAAR,EAAiB;;AAExD,gBAAI,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAI,aAAa,KAAK,UAAtB;;AAEA,oBAAI,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAI,mBAAmB,WAAW,MAAlC;AACA,wBAAI,wBAAwB,WAAW,WAAvC;;AAEA;AACA,wBAAI,MAAK,MAAL,KAAgB,gBAAhB,IACA,MAAK,WAAL,KAAqB,qBADzB,EACgD;;AAE5C;AACA,8BAAK,iBAAL,GAAyB,MAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,6BAAnC,CAAiE,MAAK,WAAtE,CAAzB;AACH;AACJ;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAK,MAAL,CAAY,GAAZ,CAAgB,UAAhB,EAA4B,UAAS,KAAT,EAAgB,IAAhB,EAAsB,CAEjD,CAF2B,CAE1B,IAF0B,CAErB,IAFqB,CAA5B;AAGH;;AAED;;;;;;;;uCAIe,c,EAAgB;;AAE3B,gBAAI,kBAAkB,IAAtB,EAA4B;AACxB,oBAAI,cAAc,eAAe,WAAjC;;AAEA,oBAAI,eAAe,IAAnB,EAAyB;AACrB,wBAAI,WAAW,YAAY,QAA3B;;AAEA,wBAAI,YAAY,IAAhB,EAAsB;AAClB;AACA,6BAAK,eAAL,GAAuB,QAAvB;AACH;;AAED,wBAAI,cAAc,YAAY,WAA9B;;AAEA,wBAAI,eAAe,IAAnB,EAAyB;AACrB,6BAAK,WAAL,GAAmB,WAAnB;AACH;;AAED,yBAAK,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAI,cAAc,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAA3E,EAAmF,KAAK,WAAxF,CAAlB;;AAEA,gBAAI,WAAJ,EAAiB;AACb,oBAAI,iBAAiB,YAAY,cAAjC;AACA,oBAAI,iBAAiB,KAAK,aAAL,CAAmB,wBAAnB,CAA4C,cAA5C,CAArB;AACA,oBAAI,YAAY,QAAhB,EAA0B;AACtB;AACA,yBAAK,aAAL,GAAqB,KAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAK,cAAL,CAAoB,gBAApB,EAAsC,cAAtC;AACH,iBAND,MAMO;AACH;AACA,yBAAK,aAAL,GAAqB,IAArB;AACA,yBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAK,cAAL,CAAoB,YAApB,EAAkC,cAAlC;AACH;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAK,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,wBAAlB,EAA4C,EAAC,QAAQ,KAAK,MAAd,EAAsB,aAAa,KAAK,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;AAClB,iBAAK,QAAL,GAAgB,IAAhB;;AAEA;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,0BAAlB,EAA8C,EAAC,QAAQ,KAAK,MAAd,EAAsB,aAAa,KAAK,WAAxC,EAA9C;AACH;;;iCAEQ;AACL;AACA,gBAAI,KAAK,iBAAL,EAAJ,EAA8B;AAC1B,qBAAK,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAK,OAAL,GAAe,IAAf;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,gBAAlB,EAAoC,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAApC;;AAEA,iBAAK,aAAL,GAAqB,IAArB;AACA,iBAAK,MAAL,CAAY,KAAZ,CAAkB,sBAAlB,EAA0C,EAAC,aAAa,KAAK,WAAnB,EAAgC,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAK,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAI,cAAc,KAAK,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAI,SAAS,QAAb;;AAEA;AACA,iBAAK,oBAAL,CAA0B,MAA1B,EAAkC,IAAlC,CAAuC,UAAC,cAAD,EAAoB;AACvD,uBAAK,MAAL,CAAY,KAAZ,CAAkB,6BAAlB,EAAiD,EAAC,aAAa,WAAd,EAA2B,gBAAgB,cAA3C,EAAjD;AACH,aAFD;AAGH;;;;;AAED;;;6CAGqB;AACjB,mBAAO,KAAK,eAAZ;AACH;;;;;AAED;;;;;;6CAMqB,M,EAAQ;;AAEzB,gBAAI,WAAW,KAAK,EAAL,CAAQ,KAAR,EAAf;;AAEA;AACA,gBAAI,iBAAiB,KAAK,WAAL,CAAiB,uBAAjB,EAArB;;AAEA;AACA,gBAAI,WAAW,KAAK,kBAAL,EAAf;;AAEA;AACA,gBAAI,cAAc,EAAlB;AACA,wBAAY,QAAZ,GAAuB,QAAvB;AACA,wBAAY,WAAZ,GAA0B,QAAQ,IAAR,CAAa,KAAK,WAAlB,CAA1B,CAbyB,CAakC;;AAE3D,gBAAI,KAAK,QAAT,EAAmB;AACf;AACA,+BAAe,QAAf,GAA0B,KAAK,QAA/B;;AAEA;;;;AAIA,qBAAK,QAAL,GAAgB,KAAhB;AACH;;AAED;AACA,2BAAe,WAAf,GAA6B,WAA7B;;AAEA;;;;AAIA,iBAAK,wCAAL,CAA8C,QAA9C,EAAwD,cAAxD,EAAwE,MAAxE;;AAEA,mBAAO,SAAS,OAAhB;AACH;;;;;AAED;;;;;;;;;;iEAUyC,Q,EAAU,c,EAAgB,M,EAAQ;AAAA;;AAEvE,gBAAI,uBAAuB,KAA3B;;AAEA;AACA,gBAAI,UAAU,QAAd,EAAwB;AACpB,oBAAI,KAAK,qBAAL,CAA2B,KAAK,gBAAhC,CAAJ,EAAuD;AACnD,2CAAuB,IAAvB;AACH;AACJ,aAJD,MAIO,IAAI,UAAU,MAAd,EAAsB;AACzB,oBAAI,KAAK,mBAAL,CAAyB,KAAK,gBAA9B,CAAJ,EAAqD;AACjD,2CAAuB,IAAvB;AACH;AACJ,aAJM,MAIA,IAAI,UAAU,QAAV,IAAsB,UAAU,IAApC,EAA0C;AAC7C,oBAAI,KAAK,qBAAL,CAA2B,KAAK,gBAAhC,CAAJ,EAAuD;AACnD,2CAAuB,IAAvB;AACH;AACJ;;AAED,gBAAI,oBAAJ,EAA0B;AACtB;;AAEA,oBAAI,iBAAiB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,KAAK,gBAA1C,CAArB;AACA,oBAAI,eAAe,KAAK,aAAL,CAAmB,eAAnB,CAAmC,KAAK,gBAAxC,CAAnB;AACA,oBAAI,oBAAoB,SAAxB;AACA,oBAAI,mBAAmB,IAAI,IAAJ,GAAW,OAAX,EAAvB;AACA,oBAAI,cAAc,KAAK,eAAvB;;AAEA;;;;AAIA,qBAAK,aAAL,GAAqB,KAAK,SAAL,CAAe,IAAf,CAAoB;AACrC,8BAAU,oKAD2B;AAErC,gCAAY,IAFyB;AAGrC,mCAAe;AAHsB,iBAApB,CAArB;;AAMA;AACA,qBAAK,aAAL,CAAmB,iBAAnB,CAAqC,cAArC,EAAqD,YAArD,EAAmE,iBAAnE,EAAsF,gBAAtF,EAAwG,WAAxG,EAAqH,IAArH,CAA0H,UAAC,MAAD,EAAY;;AAElI,wBAAI,UAAU,IAAd,EAAoB;;AAEhB;AACA,4BAAI,OAAO,OAAO,IAAlB;;AAEA,4BAAI,QAAQ,IAAZ,EAAkB;;AAEd;;;;AAIA,2CAAe,WAAf,GAA6B,EAA7B;;AAEA;AACA,gCAAI,QAAQ,KAAK,KAAjB;AACA,gCAAI,WAAW,KAAK,QAApB;;AAEA,gCAAI,SAAS,IAAb,EAAmB;AACf;AACA,oCAAI,0BAA0B,EAA9B;AACA,wDAAwB,KAAxB,GAAgC,KAAhC;AACA,wDAAwB,YAAxB,GAAuC,OAAK,cAAL,CAAoB,uBAApB,CAA4C,OAAK,MAAjD,EAAyD,OAAK,WAA9D,CAAvC;AACA,wDAAwB,QAAxB,GAAmC,QAAnC;AACA,wDAAwB,UAAxB,GAAqC,QAArC;;AAEA,oCAAI,sBAAsB,OAAK,yBAAL,CAA+B,uBAA/B,CAA1B;AACA,+CAAe,WAAf,CAA2B,IAA3B,CAAgC,mBAAhC;;AAEA;AACA,oCAAI,cAAc,OAAK,aAAL,CAAmB,4BAAnB,CAAgD,OAAK,gBAArD,EAAuE,KAAvE,CAAlB;;AAEA,oCAAI,eAAe,IAAnB,EAAyB;AACrB;AACA,wCAAI,4BAA4B,EAAhC;AACA,8DAA0B,KAA1B,GAAkC,WAAlC;AACA,8DAA0B,QAA1B,GAAqC,QAArC;AACA,8DAA0B,UAA1B,GAAuC,QAAvC;;AAEA,wCAAI,wBAAwB,OAAK,2BAAL,CAAiC,yBAAjC,CAA5B;AACA,mDAAe,WAAf,CAA2B,IAA3B,CAAgC,qBAAhC;AACH;;AAED;AACA,oCAAI,wBAAwB,OAAK,aAAL,CAAmB,uBAAnB,CAA2C,OAAK,gBAAhD,EAAkE,KAAlE,CAA5B;;AAEA,oCAAI,yBAAyB,IAA7B,EAAmC;AAC/B,yCAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,sBAAsB,MAA1C,EAAkD,GAAlD,EAAuD;AACnD,4CAAI,uBAAuB,sBAAsB,CAAtB,CAA3B;AACA,4CAAI,mBAAmB,qBAAqB,gBAA5C;AACA,4CAAI,qBAAqB,eAArB,IAAwC,qBAAqB,eAAjE,EAAkF;AAC9E;AACA,gDAAI,kBAAkB,OAAK,aAAL,CAAmB,cAAnB,EAAtB;AACA,gDAAI,gBAAgB,OAAK,aAAL,CAAmB,cAAnB,EAApB;AACA,gDAAI,+BAA+B,qBAAqB,4BAAxD;AACA,gDAAI,+BAA+B,qBAAqB,4BAAxD;AACA;AACA,2EAA+B,6BAA6B,OAA7B,CAAqC,WAArC,EAAkD,KAAlD,CAA/B;AACA,2EAA+B,6BAA6B,OAA7B,CAAqC,iBAArC,EAAwD,qBAAqB,WAA7E,CAA/B;AACA,2EAA+B,6BAA6B,OAA7B,CAAqC,WAArC,EAAkD,KAAlD,CAA/B;AACA,2EAA+B,6BAA6B,OAA7B,CAAqC,iBAArC,EAAwD,qBAAqB,WAA7E,CAA/B;AACA,gDAAI,sBAAsB,OAAK,aAAL,CAAmB,QAAnB,KAAgC,GAAhC,GAAsC,OAAK,WAAL,CAAiB,WAAjB,CAA6B,EAA7B,CAAhE,CAX8E,CAWqB;AACnG,gDAAI,mBAAmB,EAAvB;AACA,gDAAI,qBAAqB,SAArB,IAAkC,qBAAqB,WAArB,IAAoC,IAA1E,EAAgF;AAC5E,iEAAiB,SAAjB,GAA6B,IAA7B;AACA,iEAAiB,WAAjB,GAA+B,qBAAqB,WAApD;AACH;AACD,gDAAI,wBAAwB,OAAK,mBAAL,CAAyB,qBAAzB,CACxB,gBADwB,EACN,OAAK,MADC,EACO,OAAK,WADZ,EACyB,eADzB,EAC0C,aAD1C,EACyD,4BADzD,EACuF,gBADvF,EACyG,mBADzG,CAA5B;AAEA,mDAAK,mBAAL,CAAyB,wBAAzB,CAAkD,qBAAlD,EAAyE,IAAzE,CAA8E,UAAC,iBAAD,EAAuB;AACjG;AACA,uDAAK,UAAL,CAAgB,UAAhB,CAA2B,iBAA3B,EAA8C,iBAA9C;AACH,6CAHD;AAIA;AACA,4DAAgB,OAAK,aAAL,CAAmB,qBAAnB,EAAhB;AACA,gDAAI,wBAAwB,OAAK,mBAAL,CAAyB,qBAAzB,CACxB,gBADwB,EACN,OAAK,MADC,EACO,OAAK,WADZ,EACyB,eADzB,EAC0C,aAD1C,EACyD,4BADzD,EACuF,gBADvF,EACyG,mBADzG,CAA5B;AAEA,mDAAK,mBAAL,CAAyB,wBAAzB,CAAkD,qBAAlD,EAAyE,IAAzE,CAA8E,UAAC,iBAAD,EAAuB;AACjG;AACA,oDAAI,cAAc,0BAAlB;AACA,uDAAK,uBAAL,CAA6B,2BAA7B,CAAyD,WAAzD,EAAsE,iBAAtE;AACH,6CAJD;AAKH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,wBAAI,OAAK,aAAL,IAAsB,IAA1B,EAAgC;AAC5B;;;;AAIA,+BAAK,SAAL,CAAe,IAAf,CAAoB,OAAK,aAAzB;AACH;;AAED;AACA,6BAAS,OAAT,CAAiB,cAAjB;AACH,iBApGD;AAqGH,aAzHD,MAyHO;AACH;;;;AAIA,yBAAS,OAAT,CAAiB,cAAjB;AACH;AACJ;;AAED;;;;;;;;;;;;;kDAU0B,I,EAAM;;AAE5B,gBAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,EAAZ;AACA,gBAAI,WAAW,KAAK,aAAL,CAAmB,WAAnB,EAAf;AACA,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,cAAc,KAAK,WAAvB;AACA,gBAAI,gBAAgB,KAAK,aAAL,CAAmB,cAAnB,EAApB;;AAEA;AACA,gBAAI,aAAa,KAAK,iBAAL,CAAuB,yBAAvB,CAAiD,KAAjD,EAAwD,QAAxD,EAAkE,MAAlE,EAA0E,WAA1E,EAAuF,aAAvF,EAAsG,IAAtG,CAAjB;;AAEA,mBAAO,UAAP;AACH;;AAED;;;;;;;;;;;;;oDAU4B,I,EAAM;;AAE9B,gBAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,EAAZ;AACA,gBAAI,WAAW,KAAK,aAAL,CAAmB,WAAnB,EAAf;AACA,gBAAI,SAAS,KAAK,MAAlB;AACA,gBAAI,cAAc,KAAK,WAAvB;AACA,gBAAI,gBAAgB,KAAK,aAAL,CAAmB,cAAnB,EAApB;;AAEA;AACA,gBAAI,aAAa,KAAK,iBAAL,CAAuB,2BAAvB,CAAmD,KAAnD,EAA0D,QAA1D,EAAoE,MAApE,EAA4E,WAA5E,EAAyF,aAAzF,EAAwG,IAAxG,CAAjB;;AAEA,mBAAO,UAAP;AACH;;AAED;;;;;;4CAGoB;;AAEhB;AACA,gBAAI,mBAAmB,KAAK,gBAA5B;;AAEA,gBAAI,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAI,iBAAiB,UAArB,EAAiC;AAC7B,yBAAK,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAI,iBAAiB,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAI,kBAAkB,KAAK,kBAAL,CAAwB,wCAAxB,CAAiE,KAAK,MAAtE,EAA8E,KAAK,WAAnF,CAAtB;;AAEA;AACA,wBAAI,cAAc,KAAK,WAAL,CAAiB,eAAjB,CAAiC,eAAjC,CAAlB;;AAEA,wBAAI,WAAJ,EAAiB;AACb;AACA,6BAAK,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;qCAIa;AACT,mBAAO,KAAK,eAAZ;AACH;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAK,mBAAZ;AACH;;;;;AAED;;;;2CAImB;AACf,mBAAO,KAAK,qBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAK,gBAAL,CAAsB,eAA1B,EAA2C;AACvC,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAO,MAAP;AACH;;;yCAEgB,U,EAAY;AACzB,gBAAI,KAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAzB,KAAwC,CAAC,CAA7C,EAAgD;AAC5C,qBAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAzB,CAAxB,EAA8D,CAA9D;AACA,qBAAK,kBAAL;AACA;AACH;AACJ;;;;;AAED;;;;2CAImB,Y,EAAc;AAAA;;AAC7B,gBAAI,gBAAgB,IAApB,EAA0B;AACtB,qBAAK,mBAAL,CAAyB,qBAAzB,CAA+C,YAA/C,EAA6D,IAA7D,CAAmE,UAAC,WAAD,EAAiB;AAChF,wBAAI,eAAe,IAAnB,EAAyB;AACrB,4BAAI,aAAa;AACb,4CAAgB,YAAY,EADf;AAEb,qCAAS,YAAY;AAFR,yBAAjB;;AAKA,+BAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACA,+BAAK,kBAAL;AACH;AACJ,iBAVD;AAWH;AACJ;;;;;AAED;;;oCAGY;AACR,gBAAI,SAAS,IAAb;;AAEA,gBAAI,KAAK,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAK,wBAAL,CAA8B,sBAAlC,EAA0D;AACtD;AACA,6BAAS,KAAK,gBAAL,CAAsB,MAA/B;AACH,iBAHD,MAGO;AACH;AACA,6BAAS,KAAK,wBAAL,CAA8B,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AACtC,yBAAS,KAAK,gBAAL,CAAsB,MAA/B;AACH;;AAED,mBAAO,MAAP;AACH;;;;;AAED;;;qCAGa;AACT,gBAAI,UAAU,IAAd;;AAEA,gBAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,0BAAU,KAAK,gBAAL,CAAsB,OAAhC;AACH;;AAED,mBAAO,OAAP;AACH;;;;;AAED;;;wCAGgB;AACZ,gBAAI,aAAa,IAAjB;;AAEA,gBAAI,KAAK,gBAAL,IAAyB,IAA7B,EAAmC;AAC/B,6BAAa,KAAK,gBAAL,CAAsB,UAAnC;AACH;;AAED,mBAAO,UAAP;AACH;;;;;AAED;;;sCAGc;AACV,gBAAI,WAAW,IAAf;;AAEA,gBAAI,KAAK,eAAL,IAAwB,IAA5B,EAAkC;AAC9B,2BAAW,KAAK,eAAhB;AACH;;AAED,mBAAO,QAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAI,mBAAmB,KAAK,gBAA5B;;AAEA,gBAAI,oBAAoB,IAAxB,EAA8B;;AAE1B,oBAAI,mBAAmB,iBAAiB,gBAAxC;AACA,oBAAI,wBAAwB,iBAAiB,qBAA7C;;AAEA,oBAAI,oBAAoB,IAApB,IAA4B,yBAAyB,IAAzD,EAA+D;;AAE3D;AACA,wBAAI,iBAAiB,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAA3E,EAAmF,KAAK,WAAxF,CAArB;;AAEA;;;;AAIA,wBAAG,kBAAkB,IAArB,EAA2B;AACvB;;AAEA;AACA,4BAAI,2BAA2B,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,gBAAtE,EAAwF,qBAAxF,CAA/B;;AAEA,4BAAI,4BAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,gCAAI,0BAA0B,KAAK,mBAAL,CAAyB,sBAAzB,CAAgD,wBAAhD,CAA9B;;AAEA;AACA,iCAAK,cAAL,CAAoB,uBAApB;AACH;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;yCAIiB;AACb,mBAAO,KAAK,gBAAL,CAAsB,EAA7B;AACH;;;;;AAED;;;wDAGgC;;AAE5B;AACA,iBAAK,2BAAL;;AAEA;;;;AAIA,iBAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,wBAAnC;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAI,yBAAyB,QAAQ,QAAR,CAAiB,KAAK,mCAAtB,CAA7B;;AAEA;AACA,qBAAK,cAAL,CAAoB,gBAApB,CAAqC,KAAK,MAA1C,EAAkD,KAAK,WAAvD,EAAoE,sBAApE;;AAEA;AACA,qBAAK,gBAAL,GAAwB,sBAAxB;;AAEA;;;;AAIA,qBAAK,MAAL,CAAY,OAAZ,CAAoB,cAApB,CAAmC,wBAAnC;AACH,aAlBD,CAkBE,OAAM,CAAN,EAAS,CAEV;AACJ;;;;;AAED;;;iEAGyC;;AAErC,gBAAI,KAAK,yBAAL,CAA+B,sBAA/B,IAAyD,IAAzD,IACA,KAAK,yBAAL,CAA+B,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAK,yBAAL,CAA+B,2BAA/B,GAA6D,EAA7D;AACH;;AAED;AACA,iBAAK,6BAAL;AACH;;AAED;;;;;;;yCAIiB;AACb,gBAAI,cAAc,KAAK,cAAL,CAAoB,UAApB,EAAlB;;AAEA,mBAAO,WAAP;AACH;;AAED;;;;;;;;wDAKgC,M,EAAQ;AACpC,gBAAI,uBAAuB,KAAK,cAAL,CAAoB,+BAApB,CAAoD,MAApD,CAA3B;;AAEA,mBAAO,oBAAP;AACH;;AAED;;;;;;;;8CAKsB,M,EAAQ;AAC1B,gBAAI,aAAa,KAAK,cAAL,CAAoB,qBAApB,CAA0C,MAA1C,CAAjB;;AAEA,mBAAO,UAAP;AACH;;AAED;;;;;;;;0CAKkB,M,EAAQ;AACtB,gBAAI,SAAS,KAAK,cAAL,CAAoB,iBAApB,CAAsC,MAAtC,CAAb;;AAEA,mBAAO,MAAP;AACH;;AAED;;;;;;sDAG8B;AAC1B,iBAAK,mCAAL,GAA2C,QAAQ,MAAR,CAAe,KAAK,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;;;uCAKe,O,EAAS,I,EAAM;AAC1B,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,OAAxB;AACA,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB;AACH;;;;;AAED;;;;0CAIkB;AACd,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,aAAL,CAAmB,eAAnB,CAAmC,KAAK,gBAAxC,CAAJ,EAA+D;AAC3D,yBAAS,IAAT;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;8CAIsB;AAClB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,aAAL,CAAmB,mBAAnB,CAAuC,KAAK,gBAA5C,CAAJ,EAAmE;AAC/D,yBAAS,IAAT;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;gDAIwB;AACpB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,aAAL,CAAmB,qBAAnB,CAAyC,KAAK,gBAA9C,CAAJ,EAAqE;AACjE,yBAAS,IAAT;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;gDAIwB;AACpB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,aAAL,CAAmB,qBAAnB,CAAyC,KAAK,gBAA9C,CAAJ,EAAqE;AACjE,yBAAS,IAAT;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;8CAIsB;AAClB,gBAAI,SAAS,KAAb;;AAEA,gBAAI,KAAK,aAAL,CAAmB,mBAAnB,CAAuC,KAAK,gBAA5C,CAAJ,EAAmE;AAC/D,yBAAS,IAAT;AACH;;AAED,mBAAO,MAAP;AACH;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,UAAC,KAAD,EAAQ,IAAR,EAAiB,CAE5D,CAFmB,CAApB;AAGH;;;;;;AACJ;;AAED,uBAAuB,OAAvB,GAAiC,CAC7B,WAD6B,EAE7B,WAF6B,EAG7B,IAH6B,EAI7B,YAJ6B,EAK7B,QAL6B,EAM7B,mBAN6B,EAO7B,eAP6B,EAQ7B,eAR6B,EAS7B,aAT6B,EAU7B,qBAV6B,EAW7B,qBAX6B,EAY7B,gBAZ6B,EAa7B,qBAb6B,EAc7B,oBAd6B,EAe7B,yBAf6B,EAgB7B,aAhB6B,CAAjC;;kBAmBe,sB","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        //$('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.openResponseController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.openResponseController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                fullscreen: true,\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n\n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n\n                            // get the notification\n                            var notificationsForScore = this.CRaterService.getNotificationsByScore(this.componentContent, score);\n\n                            if (notificationsForScore != null) {\n                                for (var n = 0; n < notificationsForScore.length; n++) {\n                                    var notificationForScore = notificationsForScore[n];\n                                    let notificationType = notificationForScore.notificationType;\n                                    if (notificationForScore.isNotifyTeacher && notificationForScore.isNotifyStudent) {\n                                        // notify both teacher and student at the same time\n                                        let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n                                        let toWorkgroupId = this.ConfigService.getWorkgroupId();\n                                        let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n                                        let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n                                        // replace variables like {{score}} and {{dismissCode}} with actual values\n                                        notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", score);\n                                        notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n                                        notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", score);\n                                        notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n                                        let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n                                        let notificationData = {};\n                                        if (notificationForScore.isAmbient && notificationForScore.dismissCode != null) {\n                                            notificationData.isAmbient = true;\n                                            notificationData.dismissCode = notificationForScore.dismissCode;\n                                        }\n                                        let notificationToStudent = this.NotificationService.createNewNotification(\n                                            notificationType, this.nodeId, this.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n                                        this.NotificationService.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n                                            // show local notification\n                                            this.$rootScope.$broadcast('newNotification', savedNotification);\n                                        });\n                                        // also send notification to teacher\n                                        toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n                                        let notificationToTeacher = this.NotificationService.createNewNotification(\n                                            notificationType, this.nodeId, this.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n                                        this.NotificationService.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n                                            // send notification in real-time so teacher sees this right away\n                                            let messageType = \"CRaterResultNotification\";\n                                            this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since\n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n};\n\nOpenResponseController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default OpenResponseController;\n"]}