{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","onlyShowWork","latestAnnotations","messageDialog","submitCounter","showAdvancedAuthoring","showJSONAuthoring","useCustomCompletionCriteria","isVerifyingCRaterItemId","cRaterItemIdIsValid","isSnipButtonVisible","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","starterSentence","componentState","completionCriteria","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","openResponseController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","requester","notebookItem","studentWorkId","content","studentWorkIds","importWorkByStudentWorkId","script","retrieveScript","Function","call","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","parentStudentWorkIds","componentType","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","previousScore","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkNodeId","importWorkComponentId","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isNotebookEnabled","$event","deregisterListener","imageObject","noteText","isEditTextEnabled","isFileUploadEnabled","addNewItem","saveButtonClicked","$broadcast","insertMode","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","setShowSubmitButtonValue","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","tags","tag","connectedComponents","c","connectedComponent","makeCopyOfJSONObject","mergedComponentState","createMergedComponentState","mergedResponse","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","a","allowedConnectedComponentType","jsonStringChanged","inOrder","criteria","newCompletionCriteria","name","verifyCRaterItemId","isValid","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n  constructor($filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.CRaterService = CRaterService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.NotificationService = NotificationService;\n    this.OpenResponseService = OpenResponseService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // whether this component is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether rich text editing is enabled\n    this.isRichTextEnabled = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // whether the submit button is disabled\n    this.isSubmitButtonDisabled = false;\n\n    // whether we're only showing the student work\n    this.onlyShowWork = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // whether this component uses a custom completion criteria\n    this.useCustomCompletionCriteria = false;\n\n    // whether we are currently verifying a CRater item id\n    this.isVerifyingCRaterItemId = false;\n\n    // whether the CRater item id is valid\n    this.cRaterItemIdIsValid = null;\n\n    // whether the snip button is shown or not\n    this.isSnipButtonVisible = true;\n\n    //var scope = this;\n    let themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link image media autoresize', //imagetools\n      toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'OpenResponse'\n      }\n    ];\n\n    // get the current node and node id\n    var currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      this.nodeId = currentNode.id;\n    } else {\n      this.nodeId = this.$scope.nodeId;\n    }\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      } else if (this.mode === 'grading') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n        this.isSnipButtonVisible = false;\n      } else if (this.mode === 'onlyShowWork') {\n        this.onlyShowWork = true;\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n        this.isSnipButtonVisible = false;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isDisabled = true;\n        this.isSnipButtonVisible = false;\n      } else if (this.mode === 'authoring') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n          // inject the asset paths into the new component content\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n          /*\n           * reset the values so that the preview is refreshed with\n           * the new content\n           */\n          this.submitCounter = 0;\n          this.studentResponse = '';\n          this.latestAnnotations = null;\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n          if (this.componentContent.starterSentence != null) {\n            /*\n             * the student has not done any work and there is a starter sentence\n             * so we will populate the textarea with the starter sentence\n             */\n            this.studentResponse = this.componentContent.starterSentence;\n          }\n        }.bind(this), true);\n      }\n\n      var componentState = null;\n\n      // set whether rich text is enabled\n      this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      if (this.componentContent.completionCriteria != null) {\n        this.useCustomCompletionCriteria = true;\n      }\n\n      // get the component state from the scope\n      componentState = this.$scope.componentState;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.OpenResponseService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        } else if (componentState == null) {\n          // check if we need to import work\n\n          var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n          var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n          if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n          } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            /*\n             * the student does not have any work and there are connected\n             * components so we will get the work from the connected\n             * components\n             */\n            this.handleConnectedComponents();\n          } else if (this.componentContent.starterSentence != null) {\n            /*\n             * the student has not done any work and there is a starter sentence\n             * so we will populate the textarea with the starter sentence\n             */\n            this.studentResponse = this.componentContent.starterSentence;\n          }\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    //$('.openResponse').off('dragover').off('drop');\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.openResponseController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.openResponseController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.openResponseController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }.bind(this));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$scope.$on('notebookItemChosen', (event, args) => {\n      if (args.requester == this.nodeId + '-' + this.componentId) {\n        const notebookItem = args.notebookItem;\n        const studentWorkId = notebookItem.content.studentWorkIds[0];\n        this.importWorkByStudentWorkId(studentWorkId);\n      }\n    });\n\n    // load script for this component, if any\n    let script = this.componentContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var response = studentData.response;\n\n        if (response != null) {\n          // populate the text the student previously typed\n          this.studentResponse = response;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    if (this.mode === 'authoring') {\n      /*\n       * we are in authoring mode so we will set isDirty to false here\n       * because the 'componentSaveTriggered' event won't work in\n       * authoring mode\n       */\n      this.isDirty = false;\n    }\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('openResponse.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flags so we will know we need to save or submit the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Get the student response\n   */\n  getStudentResponse() {\n    return this.studentResponse;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // get the text the student typed\n    var response = this.getStudentResponse();\n\n    studentData.response = response;\n    studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.parentStudentWorkIds != null) {\n      studentData.parentStudentWorkIds = this.parentStudentWorkIds;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'OpenResponse';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    var performCRaterScoring = false;\n\n    // determine if we need to perform CRater scoring\n    if (action == 'submit' && componentState.isSubmit) {\n      if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'save') {\n      if (this.isCRaterScoreOnSave(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'change' || action == null) {\n      if (this.isCRaterScoreOnChange(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    }\n\n    if (performCRaterScoring) {\n      // we need to perform CRater scoring\n\n      var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n      var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n      var cRaterRequestType = 'scoring';\n      var cRaterResponseId = new Date().getTime();\n      var studentData = this.studentResponse;\n\n      /*\n       * display a dialog message while the student waits for their work\n       * to be scored by CRater\n       */\n      this.$mdDialog.show({\n        template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n        escapeToClose: false\n      });\n\n      // make the CRater request to score the student data\n      this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n        if (result != null) {\n\n          // get the CRater response\n          var data = result.data;\n\n          if (data != null) {\n\n            /*\n             * annotations we put in the component state will be\n             * removed from the component state and saved separately\n             */\n            componentState.annotations = [];\n\n            // get the CRater score\n            let score = data.score;\n            let concepts = data.concepts;\n            let previousScore = null;\n\n            if (score != null) {\n\n              // create the auto score annotation\n              let autoScoreAnnotationData = {};\n              autoScoreAnnotationData.value = score;\n              autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n              autoScoreAnnotationData.concepts = concepts;\n              autoScoreAnnotationData.autoGrader = 'cRater';\n\n              let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n              let annotationGroupForScore = null;\n\n              if (this.$scope.$parent.nodeController != null) {\n                // get the previous score and comment annotations\n                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                if (latestAnnotations != null && latestAnnotations.score != null &&\n                  latestAnnotations.score.data != null) {\n\n                  // get the previous score annotation value\n                  previousScore = latestAnnotations.score.data.value;\n                }\n\n                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                  let globalAnnotationMaxCount = 0;\n                  if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                  }\n                  // get the annotation properties for the score that the student got.\n                  annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                  // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                  if (annotationGroupForScore != null) {\n                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                      // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                      annotationGroupForScore = null;\n                    }\n                  }\n\n                  if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                      // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                      // so we can compare it when we check for criteria satisfaction.\n                      if (unGlobalizeCriteria.params != null) {\n                        unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                      }\n                    });\n                  }\n\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoScoreAnnotation's data\n                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                  }\n                }\n              }\n\n              componentState.annotations.push(autoScoreAnnotation);\n\n              if (this.mode === 'authoring') {\n                if (this.latestAnnotations == null) {\n                  this.latestAnnotations = {};\n                }\n\n                /*\n                 * we are in the authoring view so we will set the\n                 * latest score annotation manually\n                 */\n                this.latestAnnotations.score = autoScoreAnnotation;\n              }\n\n              var autoComment = null;\n\n              // get the submit counter\n              var submitCounter = this.submitCounter;\n\n              if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                /*\n                 * this step has multiple attempt scoring rules and this is\n                 * a subsequent submit\n                 */\n                // get the feedback based upon the previous score and current score\n                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n              } else {\n                // get the feedback text\n                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n              }\n\n              if (autoComment != null) {\n                // create the auto comment annotation\n                var autoCommentAnnotationData = {};\n                autoCommentAnnotationData.value = autoComment;\n                autoCommentAnnotationData.concepts = concepts;\n                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                if (this.componentContent.enableGlobalAnnotations) {\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoCommentAnnotation's data\n                    angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                  }\n                }\n                componentState.annotations.push(autoCommentAnnotation);\n\n                if (this.mode === 'authoring') {\n                  if (this.latestAnnotations == null) {\n                    this.latestAnnotations = {};\n                  }\n\n                  /*\n                   * we are in the authoring view so we will set the\n                   * latest comment annotation manually\n                   */\n                  this.latestAnnotations.comment = autoCommentAnnotation;\n                }\n              }\n              if (this.componentContent.enableNotifications) {\n                // get the notification properties for the score that the student got.\n                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                if (notificationForScore != null) {\n                  notificationForScore.score = score;\n                  notificationForScore.nodeId = this.nodeId;\n                  notificationForScore.componentId = this.componentId;\n                  this.NotificationService.sendNotificationForScore(notificationForScore);\n                }\n              }\n\n              // display global annotations dialog if needed\n              if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                this.$scope.$emit('displayGlobalAnnotations');\n              }\n            }\n          }\n        }\n\n        /*\n         * hide the dialog that tells the student to wait since\n         * the work has been scored.\n         */\n        this.$mdDialog.hide();\n\n        // resolve the promise now that we are done performing additional processing\n        deferred.resolve(componentState);\n      });\n    } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      // if there are any additionalProcessingFunctions for this node and component, call all of them\n      let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n        let additionalProcessingFunction = additionalProcessingFunctions[i];\n        let defer = this.$q.defer();\n        let promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      /*\n       * we don't need to perform any additional processing so we can resolve\n       * the promise immediately\n       */\n      deferred.resolve(componentState);\n    }\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the component after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n      // YOU ARE NOW FREEEEEEEEE!\n    }\n  };\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // get the import previous work node id and component id\n      var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n      var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n          importPreviousWorkNodeId = componentContent.importWorkNodeId;\n        }\n      }\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n          importPreviousWorkComponentId = componentContent.importWorkComponentId;\n        }\n      }\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state for this component\n        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        /*\n         * we will only import work into this component if the student\n         * has not done any work for this component\n         */\n        if(componentState == null) {\n          // the student has not done any work for this component\n\n          // get the latest component state from the component we are importing from\n          var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n          if (importWorkComponentState != null) {\n            /*\n             * populate a new component state with the work from the\n             * imported component state\n             */\n            var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n            // populate the component state into this component\n            this.setStudentWork(populatedComponentState);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  showSnipButton() {\n    return this.NotebookService.isNotebookEnabled() && this.isSnipButtonVisible;\n  }\n\n  snipButtonClicked($event) {\n    if (this.isDirty) {\n      const deregisterListener = this.$scope.$on('studentWorkSavedToServer',\n        (event, args) => {\n          let componentState = args.studentWork;\n          if (componentState &&\n              this.nodeId === componentState.nodeId &&\n              this.componentId === componentState.componentId) {\n            const imageObject = null;\n            const noteText = componentState.studentData.response;\n            const isEditTextEnabled = false;\n            const isFileUploadEnabled = false;\n            this.NotebookService.addNewItem($event, imageObject, noteText, [ componentState.id ], isEditTextEnabled, isFileUploadEnabled);\n            deregisterListener();\n          }\n        }\n      );\n      this.saveButtonClicked(); // trigger a save\n    } else {\n      const studentWork =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n      const imageObject = null;\n      const noteText = studentWork.studentData.response;\n      const isEditTextEnabled = false;\n      const isFileUploadEnabled = false;\n      this.NotebookService.addNewItem($event, imageObject, noteText, [ studentWork.id ], isEditTextEnabled, isFileUploadEnabled);\n    }\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return true;\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n    });\n  };\n\n  /**\n   * Add a scoring rule\n   */\n  authoringAddScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // create a scoring rule object\n      var newScoringRule = {};\n      newScoringRule.score = '';\n      newScoringRule.feedbackText = '';\n\n      // add the new scoring rule object\n      this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a scoring rule up\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the top\n      if (index != 0) {\n        // the scoring rule is not at the top so we can move it up\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a scoring rule down\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // make sure the scoring rule is not already at the end\n      if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\n\n        // get the scoring rule\n        var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n        // remove the scoring rule\n        this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n        // add the scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a scoring rule\n   * @param index the index of the scoring rule\n   */\n  authoringViewScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.scoringRules != null) {\n\n      // get the scoring rule\n      var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\n\n      if (scoringRule != null) {\n\n        // get the score and feedback text\n        var score = scoringRule.score;\n        var feedbackText = scoringRule.feedbackText;\n\n        // make sure the author really wants to delete the scoring rule\n        //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the scoring rule\n          this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\n   * we can add different types in the future.\n   */\n  authoringAddNotification() {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // create a new notification\n      let newNotification = {\n        notificationType: 'CRaterResult',\n        enableCriteria: {\n          scoreSequence: ['', '']\n        },\n        isAmbient: false,\n        dismissCode: 'apple',\n        isNotifyTeacher: true,\n        isNotifyStudent: true,\n        notificationMessageToStudent: '{{username}}, ' + this.$translate('openResponse.youGotAScoreOf') + ' {{score}}. ' + this.$translate('openResponse.pleaseTalkToYourTeacher') + '.',\n        notificationMessageToTeacher: '{{username}} ' + this.$translate('openResponse.gotAScoreOf') + ' {{score}}.'\n      };\n\n      // add the new notification\n      this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\n\n      // the author has made changes so we will save the component content\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a multiple attempt scoring rule\n   */\n  authoringAddMultipleAttemptScoringRule() {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // create a new multiple attempt scoring rule\n      var newMultipleAttemptScoringRule = {};\n      newMultipleAttemptScoringRule.scoreSequence = ['', ''];\n      newMultipleAttemptScoringRule.feedbackText = '';\n\n      // add the new multiple attempt scoring rule\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\n\n      /*\n       * the author has made changes so we will save the component\n       * content\n       */\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule up\n   * @param index\n   */\n  authoringViewMultipleAttemptScoringRuleUpClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not already at the top\n      if (index != 0) {\n        // the multiple attempt scoring rule is not at the top\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index back\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a multiple attempt scoring rule down\n   * @param index the index of the multiple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDownClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // make sure the multiple attempt scoring rule is not at the end\n      if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\n        // the multiple attempt scoring rule is not at the end\n\n        // get the multiple attempt scoring rule\n        var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n        // remove the multiple attempt scoring rule\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n        // add the multiple attempt scoring rule back at the position one index forward\n        this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\n\n        /*\n         * the author has made changes so we will save the component\n         * content\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a multiple attempt scoring rule\n   * @param index the index of the mulitple attempt scoring rule\n   */\n  authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\n\n    if (this.authoringComponentContent.cRater != null &&\n      this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\n\n      // get the multiple attempt scoring rule\n      var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\n\n      if (multipleAttemptScoringRule != null) {\n\n        // get the score sequence\n        var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // get the feedback text\n        var feedbackText = multipleAttemptScoringRule.feedbackText;\n\n        // make sure the author really wants to delete the multiple attempt scoring rule\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\n\n        if (answer) {\n          // the author answered yes to delete the multiple attempt scoring rule\n          this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\n\n          /*\n           * the author has made changes so we will save the component\n           * content\n           */\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * Move a notification up\n   * @param index of the notification\n   */\n  authoringViewNotificationUpClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not already at the top\n      if (index != 0) {\n        // the notification is not at the top\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index back\n        this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Move a notification down\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDownClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // make sure the notification is not at the end\n      if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\n        // the notification is not at the end\n\n        // get the notification\n        var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n        // remove the notification\n        this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n        // add the notification back at the position one index forward\n        this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\n\n        // the author has made changes so we will save the component content\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Delete a notification\n   * @param index the index of the notification\n   */\n  authoringViewNotificationDeleteClicked(index) {\n\n    if (this.authoringComponentContent.notificationSettings != null &&\n      this.authoringComponentContent.notificationSettings.notifications != null) {\n\n      // get the notification\n      var notification = this.authoringComponentContent.notificationSettings.notifications[index];\n\n      if (notification != null) {\n\n        // get the score sequence\n        var scoreSequence = notification.enableCriteria.scoreSequence;\n        var previousScore = '';\n        var currentScore = '';\n\n        if (scoreSequence != null) {\n          previousScore = scoreSequence[0];\n          currentScore = scoreSequence[1];\n        }\n\n        // make sure the author really wants to delete the notification\n        var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\n\n        if (answer) {\n          // the author answered yes to delete the notification\n          this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\n\n          // the author has made changes so we will save the component content\n          this.authoringViewComponentChanged();\n        }\n      }\n    }\n  }\n\n  /**\n   * The \"Enable CRater\" checkbox was clicked\n   */\n  authoringViewEnableCRaterClicked() {\n\n    if (this.authoringComponentContent.enableCRater) {\n      // CRater was turned on\n\n      if (this.authoringComponentContent.cRater == null) {\n        /*\n         * the cRater object does not exist in the component content\n         * so we will create it\n         */\n\n        // create the cRater object\n        var cRater = {};\n        cRater.itemType = 'CRATER';\n        cRater.itemId = '';\n        cRater.scoreOn = 'submit';\n        cRater.showScore = true;\n        cRater.showFeedback = true;\n        cRater.scoringRules = [];\n        cRater.enableMultipleAttemptScoringRules = false;\n        cRater.multipleAttemptScoringRules = []\n\n        // set the cRater object into the component content\n        this.authoringComponentContent.cRater = cRater;\n      }\n\n      // turn on the submit button\n      //this.authoringComponentContent.showSubmitButton = true;\n      this.setShowSubmitButtonValue(true);\n    } else {\n      // CRater was turned off\n\n      // turn off the submit button\n      this.setShowSubmitButtonValue(false);\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\n   */\n  enableMultipleAttemptScoringRulesClicked() {\n\n    // get the cRater object from the component content\n    var cRater = this.authoringComponentContent.cRater;\n\n    if (cRater != null && cRater.multipleAttemptScoringRules == null) {\n      /*\n       * the multiple attempt scoring rules array does not exist so\n       * we will create it\n       */\n      cRater.multipleAttemptScoringRules = [];\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The \"Enable Notifications\" checkbox was clicked\n   */\n  authoringViewEnableNotificationsClicked() {\n\n    if (this.authoringComponentContent.enableNotifications) {\n      // Notifications was turned on\n\n      if (this.authoringComponentContent.notificationSettings == null) {\n        /*\n         * the NotificationSettings object does not exist in the component content\n         * so we will create it\n         */\n        this.authoringComponentContent.notificationSettings = {\n          notifications: []\n        };\n      }\n    }\n\n    /*\n     * the author has made changes so we will save the component\n     * content\n     */\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions() {\n    // get the component states for this component\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  };\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the import previous work node id\n   * @return the import previous work node id or null\n   */\n  getImportPreviousWorkNodeId() {\n    var importPreviousWorkNodeId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n      importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n      }\n    }\n\n    return importPreviousWorkNodeId;\n  }\n\n  /**\n   * Get the import previous work component id\n   * @return the import previous work component id or null\n   */\n  getImportPreviousWorkComponentId() {\n    var importPreviousWorkComponentId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n      var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n      }\n    }\n\n    return importPreviousWorkComponentId;\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // merge the student responses from all the component states\n      var mergedComponentState = this.createMergedComponentState(componentStates);\n\n      // set the student work into the component\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedResponse = '';\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            // get the student response\n            let response = studentData.response;\n\n            if (response != null && response != '') {\n              if (mergedResponse != '') {\n                // add a new line between the responses\n                mergedResponse += '\\n';\n              }\n\n              // append the response\n              mergedResponse += response;\n            }\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.response = mergedResponse;\n      }\n    }\n\n    return mergedComponentState;\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  /**\n   * The Use Completion Criteria checkbox was clicked. We will toggle the\n   * completion criteria in the component content.\n   * @return False if we want to cancel the click and not perform any changes.\n   * True if we want to perform the changes.\n   */\n  useCustomCompletionCriteriaClicked() {\n    if (this.useCustomCompletionCriteria == false) {\n      /*\n       * The completion criteria was changed from true to false which\n       * means we will delete the completionCriteria object. We will confirm\n       * with the author that they want to delete the completion criteria.\n       */\n      let answer = confirm(this.$translate('areYouSureYouWantToDeleteTheCustomCompletionCriteria'));\n      if (!answer) {\n        // the author answered no so we will abort\n        this.useCustomCompletionCriteria = true;\n        return false;\n      }\n    }\n\n    if (this.useCustomCompletionCriteria) {\n      /*\n       * We are using a completion criteria so we will populate it if it\n       * doesn't already exist.\n       */\n      if (this.authoringComponentContent.completionCriteria == null) {\n        this.authoringComponentContent.completionCriteria = {\n          inOrder: true,\n          criteria: []\n        };\n      }\n    } else {\n      // we are not using a completion criteria so we will delete it\n      delete this.authoringComponentContent.completionCriteria;\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n    return true;\n  }\n\n  /**\n   * Move a completion criteria up.\n   * @param index The index of the completion criteria to move up.\n   */\n  moveCompletionCriteriaUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index back\n      this.authoringComponentContent.completionCriteria.criteria.splice(index - 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a completion criteria down.\n   * @param index The index of the completion criteria to move down.\n   */\n  moveCompletionCriteriaDown(index) {\n    if (index < this.authoringComponentContent.completionCriteria.criteria.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the criteria\n      let criteria = this.authoringComponentContent.completionCriteria.criteria[index];\n\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // insert the criteria one index forward\n      this.authoringComponentContent.completionCriteria.criteria.splice(index + 1, 0, criteria);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a completion criteria.\n   */\n  authoringAddCompletionCriteria() {\n    let newCompletionCriteria = {\n      nodeId: this.nodeId,\n      componentId: this.componentId,\n      name: 'isSubmitted'\n    };\n    this.authoringComponentContent.completionCriteria.criteria.push(newCompletionCriteria);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a completion criteria.\n   * @param index The index of the completion criteria.\n   */\n  authoringDeleteCompletionCriteria(index) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisCompletionCriteria'));\n    if (answer) {\n      // remove the criteria\n      this.authoringComponentContent.completionCriteria.criteria.splice(index, 1);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if the item id is a valid CRater item id.\n   * @param itemId A string.\n   */\n  verifyCRaterItemId(itemId) {\n    // clear the Valid/Invalid text\n    this.cRaterItemIdIsValid = null;\n\n    // turn on the \"Verifying...\" text\n    this.isVerifyingCRaterItemId = true;\n\n    this.CRaterService.verifyCRaterItemId(itemId).then((isValid) => {\n      // turn off the \"Verifying...\" text\n      this.isVerifyingCRaterItemId = false;\n\n      // set the Valid/Invalid text\n      this.cRaterItemIdIsValid = isValid;\n    });\n  }\n};\n\nOpenResponseController.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseController;\n"]}