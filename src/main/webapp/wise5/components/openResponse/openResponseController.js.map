{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","messageDialog","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","currentNode","getCurrentNode","authoringComponentContentJSONString","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","componentState","importWorkNodeId","importWorkComponentId","importWork","starterSentence","setStudentWork","calculateDisabled","registerComponentController","openResponseController","bind","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","annotation","annotationNodeId","annotationComponentId","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","autoScoreAnnotationData","value","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","push","autoComment","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","notificationsForScore","getNotificationsByScore","n","length","notificationForScore","sendNotificationForScore","hide","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","updateAdvancedAuthoringView","toJson","advancedAuthoringViewComponentChanged","editedComponentContent","fromJson","replaceComponent","nodeAuthoringController","authoringViewNodeChanged","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","message","isCRaterEnabled","isCRaterScoreOnExit","exitListener","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nclass OpenResponseController {\n\n    constructor($injector,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                CRaterService,\n                NodeService,\n                NotificationService,\n                OpenResponseService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.CRaterService = CRaterService;\n        this.NodeService = NodeService;\n        this.NotificationService = NotificationService;\n        this.OpenResponseService = OpenResponseService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // holds the text that the student has typed\n        this.studentResponse = '';\n\n        // holds student attachments like assets\n        this.attachments = [];\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // whether this component is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether rich text editing is enabled\n        this.isRichTextEnabled = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // used to hold a message dialog if we need to use one\n        this.messageDialog = null;\n\n        //var scope = this;\n        let themePath = this.ProjectService.getThemePath();\n\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n        // Rich text editor options\n        this.tinymceOptions = {\n            //onChange: function(e) {\n            //scope.studentDataChanged();\n            //},\n            menubar: false,\n            plugins: 'link image media autoresize', //imagetools\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n            autoresize_bottom_margin: \"0\",\n            autoresize_min_height: \"100\",\n            image_advtab: true,\n            content_css: themePath + \"/style/tinymce.css\",\n            setup: function (ed) {\n                ed.on(\"focus\", function (e) {\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n                });\n\n                ed.on(\"blur\", function (e) {\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n                });\n            }\n        };\n\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n            }\n\n            var componentState = null;\n\n            // set whether rich text is enabled\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            if (componentState == null) {\n                /*\n                 * only import work if the student does not already have\n                 * work for this component\n                 */\n\n                // check if we need to import work\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                } else if (this.componentContent.starterSentence != null) {\n                    /*\n                     * the student has not done any work and there is a starter sentence\n                     * so we will populate the textarea with the starter sentence\n                     */\n                    this.studentResponse = this.componentContent.starterSentence;\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        //$('.openResponse').off('dragover').off('drop');\n\n        /**\n         * Returns true iff there is student work that hasn't been saved yet\n         */\n        this.$scope.isDirty = function() {\n            return this.$scope.openResponseController.isDirty;\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.openResponseController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.openResponseController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }.bind(this));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', function(event, args) {\n\n        }.bind(this));\n    }\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response != null) {\n                    // populate the text the student previously typed\n                    this.studentResponse = response;\n                }\n\n                var attachments = studentData.attachments;\n\n                if (attachments != null) {\n                    this.attachments = attachments;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flags so we will know we need to save or submit the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Get the student response\n     */\n    getStudentResponse() {\n        return this.studentResponse;\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        // get the text the student typed\n        var response = this.getStudentResponse();\n\n        // set the response into the component state\n        var studentData = {};\n        studentData.response = response;\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n        if (this.isSubmit) {\n            // the student submitted this work\n            componentState.isSubmit = this.isSubmit;\n\n            /*\n             * reset the isSubmit value so that the next component state\n             * doesn't maintain the same value\n             */\n            this.isSubmit = false;\n        }\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n        var performCRaterScoring = false;\n\n        // determine if we need to perform CRater scoring\n        if (action == 'submit') {\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'save') {\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        } else if (action == 'change' || action == null) {\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\n                performCRaterScoring = true;\n            }\n        }\n\n        if (performCRaterScoring) {\n            // we need to perform CRater scoring\n\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n            var cRaterRequestType = 'scoring';\n            var cRaterResponseId = new Date().getTime();\n            var studentData = this.studentResponse;\n\n            /*\n             * display a dialog message while the student waits for their work\n             * to be scored by CRater\n             */\n            this.messageDialog = this.$mdDialog.show({\n                template: '<md-dialog aria-label=\"Please Wait\"><md-dialog-content><div class=\"md-dialog-content\">Please wait, we are scoring your work.</div></md-dialog-content></md-dialog>',\n                escapeToClose: false\n            });\n\n            // make the CRater request to score the student data\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n                if (result != null) {\n\n                    // get the CRater response\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        /*\n                         * annotations we put in the component state will be\n                         * removed from the component state and saved separately\n                         */\n                        componentState.annotations = [];\n\n                        // get the CRater score\n                        var score = data.score;\n                        var concepts = data.concepts;\n\n                        if (score != null) {\n                            // create the auto score annotation\n                            var autoScoreAnnotationData = {};\n                            autoScoreAnnotationData.value = score;\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n                            autoScoreAnnotationData.concepts = concepts;\n                            autoScoreAnnotationData.autoGrader = 'cRater';\n\n                            var autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n                            componentState.annotations.push(autoScoreAnnotation);\n\n                            // get the feedback text\n                            var autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n\n                            if (autoComment != null) {\n                                // create the auto comment annotation\n                                var autoCommentAnnotationData = {};\n                                autoCommentAnnotationData.value = autoComment;\n                                autoCommentAnnotationData.concepts = concepts;\n                                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n                                componentState.annotations.push(autoCommentAnnotation);\n                            }\n\n                            // get the notification\n                            var notificationsForScore = this.CRaterService.getNotificationsByScore(this.componentContent, score);\n\n                            if (notificationsForScore != null) {\n                                for (var n = 0; n < notificationsForScore.length; n++) {\n                                    var notificationForScore = notificationsForScore[n];\n                                    notificationForScore.score = score;\n                                    notificationForScore.nodeId = this.nodeId;\n                                    notificationForScore.componentId = this.componentId;\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (this.messageDialog != null) {\n                    /*\n                     * hide the dialog that tells the student to wait since\n                     * the work has been scored.\n                     */\n                    this.$mdDialog.hide(this.messageDialog);\n                }\n\n                // resolve the promise now that we are done performing additional processing\n                deferred.resolve(componentState);\n            });\n        } else {\n            /*\n             * we don't need to perform any additional processing so we can resolve\n             * the promise immediately\n             */\n            deferred.resolve(componentState);\n        }\n    }\n\n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto score annotation\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(data) {\n\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var nodeId = this.nodeId;\n        var componentId = this.componentId;\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        // create the auto comment annotation\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n        return annotation;\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the component after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    removeAttachment(attachment) {\n        if (this.attachments.indexOf(attachment) != -1) {\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\n            this.studentDataChanged();\n            // YOU ARE NOW FREEEEEEEEE!\n        }\n    };\n\n    /**\n     * Attach student asset to this Component's attachments\n     * @param studentAsset\n     */\n    attachStudentAsset(studentAsset) {\n        if (studentAsset != null) {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n                if (copiedAsset != null) {\n                    var attachment = {\n                        studentAssetId: copiedAsset.id,\n                        iconURL: copiedAsset.iconURL\n                    };\n\n                    this.attachments.push(attachment);\n                    this.studentDataChanged();\n                }\n            });\n        }\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Get the number of rows for the textarea\n     */\n    getNumRows() {\n        var numRows = null;\n\n        if (this.componentContent != null) {\n            numRows = this.componentContent.numRows;\n        }\n\n        return numRows;\n    };\n\n    /**\n     * Get the number of columns for the textarea\n     */\n    getNumColumns() {\n        var numColumns = null;\n\n        if (this.componentContent != null) {\n            numColumns = this.componentContent.numColumns;\n        }\n\n        return numColumns;\n    };\n\n    /**\n     * Get the text the student typed\n     */\n    getResponse() {\n        var response = null;\n\n        if (this.studentResponse != null) {\n            response = this.studentResponse;\n        }\n\n        return response;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n        this.advancedAuthoringViewComponentChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = editedComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Check if CRater is enabled for this component\n     * @returns whether CRater is enabled for this component\n     */\n    isCRaterEnabled() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on save\n     * @returns whether CRater is set to score on save\n     */\n    isCRaterScoreOnSave() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on submit\n     * @returns whether CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score on change\n     * @returns whether CRater is set to score on change\n     */\n    isCRaterScoreOnChange() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if CRater is set to score when the student exits the step\n     * @returns whether CRater is set to score when the student exits the step\n     */\n    isCRaterScoreOnExit() {\n        var result = false;\n\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n};\n\nOpenResponseController.$inject = [\n    '$injector',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'CRaterService',\n    'NodeService',\n    'NotificationService',\n    'OpenResponseService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default OpenResponseController;\n"]}