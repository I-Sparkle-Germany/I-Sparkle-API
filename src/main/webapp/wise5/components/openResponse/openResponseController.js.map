{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","attachments","isRichTextEnabled","onlyShowWork","latestAnnotations","messageDialog","useCustomCompletionCriteria","isVerifyingCRaterItemId","cRaterItemIdIsValid","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","nodeId","componentId","workgroupId","isDisabled","componentState","isStudentAttachmentEnabled","completionCriteria","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","starterSentence","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","isDirty","openResponseController","bind","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","requester","notebookItem","studentWorkId","content","studentWorkIds","importWorkByStudentWorkId","script","retrieveScript","Function","call","$broadcast","submit","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","$emit","setSubmittedMessage","setSavedMessage","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","alert","$translate","confirm","incrementSubmitCounter","createNewComponentState","getStudentResponse","angular","copy","parentStudentWorkIds","componentType","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","previousScore","autoScoreAnnotationData","value","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hide","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotation","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","numRows","numColumns","$event","deregisterListener","studentWork","imageObject","noteText","isEditTextEnabled","isFileUploadEnabled","addNote","saveButtonClicked","isCRaterEnabled","isCRaterScoreOnExit","getComponentStatesByNodeIdAndComponentId","componentStates","mergedComponentState","mergedResponse","c","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass OpenResponseController extends ComponentController {\n\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.CRaterService = CRaterService;\n    this.NotificationService = NotificationService;\n    this.OpenResponseService = OpenResponseService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // holds student attachments like assets\n    this.attachments = [];\n\n    // whether rich text editing is enabled\n    this.isRichTextEnabled = false;\n\n    // whether we're only showing the student work\n    this.onlyShowWork = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // whether this component uses a custom completion criteria\n    this.useCustomCompletionCriteria = false;\n\n    // whether we are currently verifying a CRater item id\n    this.isVerifyingCRaterItemId = false;\n\n    // whether the CRater item id is valid\n    this.cRaterItemIdIsValid = null;\n\n    //var scope = this;\n    let themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link image media autoresize', //imagetools\n      toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    } else if (this.mode === 'grading') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'onlyShowWork') {\n      this.onlyShowWork = true;\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    var componentState = null;\n\n    // set whether rich text is enabled\n    this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.componentContent.completionCriteria != null) {\n      this.useCustomCompletionCriteria = true;\n    }\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (componentState != null &&\n        this.OpenResponseService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          /*\n           * the student does not have any work and there are connected\n           * components so we will get the work from the connected\n           * components\n           */\n          this.handleConnectedComponents();\n        } else if (this.componentContent.starterSentence != null) {\n          /*\n           * the student has not done any work and there is a starter sentence\n           * so we will populate the textarea with the starter sentence\n           */\n          this.studentResponse = this.componentContent.starterSentence;\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    //$('.openResponse').off('dragover').off('drop');\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.openResponseController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.openResponseController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.openResponseController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    this.$scope.$on('notebookItemChosen', (event, args) => {\n      if (args.requester == this.nodeId + '-' + this.componentId) {\n        const notebookItem = args.notebookItem;\n        const studentWorkId = notebookItem.content.studentWorkIds[0];\n        this.importWorkByStudentWorkId(studentWorkId);\n      }\n    });\n\n    // load script for this component, if any\n    let script = this.componentContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var response = studentData.response;\n\n        if (response != null) {\n          // populate the text the student previously typed\n          this.studentResponse = response;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n\n          // the student does not have any more chances to submit\n          alert(this.$translate('openResponse.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n\n          // ask the student if they are sure they want to submit\n          message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Get the student response\n   */\n  getStudentResponse() {\n    return this.studentResponse;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // get the text the student typed\n    var response = this.getStudentResponse();\n\n    studentData.response = response;\n    studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.parentStudentWorkIds != null) {\n      studentData.parentStudentWorkIds = this.parentStudentWorkIds;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'OpenResponse';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    var performCRaterScoring = false;\n\n    // determine if we need to perform CRater scoring\n    if (action == 'submit' && componentState.isSubmit) {\n      if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'save') {\n      if (this.isCRaterScoreOnSave(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'change' || action == null) {\n      if (this.isCRaterScoreOnChange(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    }\n\n    if (performCRaterScoring) {\n      // we need to perform CRater scoring\n\n      var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n      var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n      var cRaterRequestType = 'scoring';\n      var cRaterResponseId = new Date().getTime();\n      var studentData = this.studentResponse;\n\n      /*\n       * display a dialog message while the student waits for their work\n       * to be scored by CRater\n       */\n      this.$mdDialog.show({\n        template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n        escapeToClose: false\n      });\n\n      // make the CRater request to score the student data\n      this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n        if (result != null) {\n\n          // get the CRater response\n          var data = result.data;\n\n          if (data != null) {\n\n            /*\n             * annotations we put in the component state will be\n             * removed from the component state and saved separately\n             */\n            componentState.annotations = [];\n\n            // get the CRater score\n            let score = data.score;\n            let concepts = data.concepts;\n            let previousScore = null;\n\n            if (score != null) {\n\n              // create the auto score annotation\n              let autoScoreAnnotationData = {};\n              autoScoreAnnotationData.value = score;\n              autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n              autoScoreAnnotationData.concepts = concepts;\n              autoScoreAnnotationData.autoGrader = 'cRater';\n\n              let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n              let annotationGroupForScore = null;\n\n              if (this.$scope.$parent.nodeController != null) {\n                // get the previous score and comment annotations\n                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                if (latestAnnotations != null && latestAnnotations.score != null &&\n                  latestAnnotations.score.data != null) {\n\n                  // get the previous score annotation value\n                  previousScore = latestAnnotations.score.data.value;\n                }\n\n                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                  let globalAnnotationMaxCount = 0;\n                  if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                  }\n                  // get the annotation properties for the score that the student got.\n                  annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                  // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                  if (annotationGroupForScore != null) {\n                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                      // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                      annotationGroupForScore = null;\n                    }\n                  }\n\n                  if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                      // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                      // so we can compare it when we check for criteria satisfaction.\n                      if (unGlobalizeCriteria.params != null) {\n                        unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                      }\n                    });\n                  }\n\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoScoreAnnotation's data\n                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                  }\n                }\n              }\n\n              componentState.annotations.push(autoScoreAnnotation);\n\n              if (this.mode === 'authoring') {\n                if (this.latestAnnotations == null) {\n                  this.latestAnnotations = {};\n                }\n\n                /*\n                 * we are in the authoring view so we will set the\n                 * latest score annotation manually\n                 */\n                this.latestAnnotations.score = autoScoreAnnotation;\n              }\n\n              var autoComment = null;\n\n              // get the submit counter\n              var submitCounter = this.submitCounter;\n\n              if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                /*\n                 * this step has multiple attempt scoring rules and this is\n                 * a subsequent submit\n                 */\n                // get the feedback based upon the previous score and current score\n                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n              } else {\n                // get the feedback text\n                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n              }\n\n              if (autoComment != null) {\n                // create the auto comment annotation\n                var autoCommentAnnotationData = {};\n                autoCommentAnnotationData.value = autoComment;\n                autoCommentAnnotationData.concepts = concepts;\n                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                if (this.componentContent.enableGlobalAnnotations) {\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoCommentAnnotation's data\n                    angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                  }\n                }\n                componentState.annotations.push(autoCommentAnnotation);\n\n                if (this.mode === 'authoring') {\n                  if (this.latestAnnotations == null) {\n                    this.latestAnnotations = {};\n                  }\n\n                  /*\n                   * we are in the authoring view so we will set the\n                   * latest comment annotation manually\n                   */\n                  this.latestAnnotations.comment = autoCommentAnnotation;\n                }\n              }\n              if (this.componentContent.enableNotifications) {\n                // get the notification properties for the score that the student got.\n                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                if (notificationForScore != null) {\n                  notificationForScore.score = score;\n                  notificationForScore.nodeId = this.nodeId;\n                  notificationForScore.componentId = this.componentId;\n                  this.NotificationService.sendNotificationForScore(notificationForScore);\n                }\n              }\n\n              // display global annotations dialog if needed\n              if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                this.$scope.$emit('displayGlobalAnnotations');\n              }\n            }\n          }\n        }\n\n        /*\n         * hide the dialog that tells the student to wait since\n         * the work has been scored.\n         */\n        this.$mdDialog.hide();\n\n        // resolve the promise now that we are done performing additional processing\n        deferred.resolve(componentState);\n      });\n    } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      // if there are any additionalProcessingFunctions for this node and component, call all of them\n      let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n        let additionalProcessingFunction = additionalProcessingFunctions[i];\n        let defer = this.$q.defer();\n        let promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      /*\n       * we don't need to perform any additional processing so we can resolve\n       * the promise immediately\n       */\n      deferred.resolve(componentState);\n    }\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Attach student asset to this Component's attachments\n   * @param studentAsset\n   */\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n        if (copiedAsset != null) {\n          var attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  };\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  snipButtonClicked($event) {\n    if (this.isDirty) {\n      const deregisterListener = this.$scope.$on('studentWorkSavedToServer',\n        (event, args) => {\n          let componentState = args.studentWork;\n          if (componentState &&\n              this.nodeId === componentState.nodeId &&\n              this.componentId === componentState.componentId) {\n            const imageObject = null;\n            const noteText = componentState.studentData.response;\n            const isEditTextEnabled = false;\n            const isFileUploadEnabled = false;\n            this.NotebookService.addNote($event, imageObject, noteText, [ componentState.id ], isEditTextEnabled, isFileUploadEnabled);\n            deregisterListener();\n          }\n        }\n      );\n      this.saveButtonClicked(); // trigger a save\n    } else {\n      const studentWork =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n      const imageObject = null;\n      const noteText = studentWork.studentData.response;\n      const isEditTextEnabled = false;\n      const isFileUploadEnabled = false;\n      this.NotebookService.addNote($event, imageObject, noteText, [ studentWork.id ], isEditTextEnabled, isFileUploadEnabled);\n    }\n  }\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions() {\n    // get the component states for this component\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  };\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedResponse = '';\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            // get the student response\n            let response = studentData.response;\n\n            if (response != null && response != '') {\n              if (mergedResponse != '') {\n                // add a new line between the responses\n                mergedResponse += '\\n';\n              }\n\n              // append the response\n              mergedResponse += response;\n            }\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.response = mergedResponse;\n      }\n    }\n\n    return mergedComponentState;\n  }\n};\n\nOpenResponseController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseController;\n"]}