{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$injector","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","studentResponse","attachments","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","isShowPreviousWork","isSubmit","isRichTextEnabled","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","onlyShowWork","latestAnnotations","messageDialog","submitCounter","showAdvancedAuthoring","showJSONAuthoring","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","originalComponentContent","mode","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","starterSentence","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","maxSubmitCount","calculateDisabled","$parent","nodeController","registerComponentController","openResponseController","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","event","args","submitTriggeredBy","submit","angular","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","annotation","annotationNodeId","annotationComponentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","isImage","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","script","retrieveScript","Function","call","studentData","response","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","alert","confirm","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","getStudentResponse","copy","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","previousScore","autoScoreAnnotationData","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","attachment","indexOf","splice","studentDataChanged","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","prompt","showPreviousWorkPrompt","numRows","numColumns","importWorkComponentState","populatedComponentState","populateComponentState","nodeAuthoringController","authoringViewNodeChanged","editedComponentContent","fromJson","authoringComponentContentJSONString","replaceComponent","showSaveErrorAdvancedAuthoring","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringViewComponentChanged","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","type","newComponentType","answer","componentService","get","newComponent","createComponent","JSON","stringify","advancedAuthoringViewComponentChanged","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","toJson","isCRaterEnabled","isCRaterScoreOnExit","exitListener","scoringRules","newScoringRule","feedbackText","index","scoringRule","notificationSettings","notifications","newNotification","notificationType","enableCriteria","scoreSequence","isAmbient","dismissCode","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","notificationMessageToTeacher","multipleAttemptScoringRules","newMultipleAttemptScoringRule","multipleAttemptScoringRule","currentScore","notification","enableCRater","itemType","itemId","scoreOn","showScore","showFeedback","setShowSubmitButtonValue","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","newConnectedComponent","updateOn","connectedComponents","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\r\n\r\nclass OpenResponseController {\r\n\r\n    constructor($filter,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                AnnotationService,\r\n                ConfigService,\r\n                CRaterService,\r\n                NodeService,\r\n                NotificationService,\r\n                OpenResponseService,\r\n                ProjectService,\r\n                StudentAssetService,\r\n                StudentDataService,\r\n                UtilService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.CRaterService = CRaterService;\r\n        this.NodeService = NodeService;\r\n        this.NotificationService = NotificationService;\r\n        this.OpenResponseService = OpenResponseService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentAssetService = StudentAssetService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // holds the text that the student has typed\r\n        this.studentResponse = '';\r\n\r\n        // holds student attachments like assets\r\n        this.attachments = [];\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // whether this component is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // whether rich text editing is enabled\r\n        this.isRichTextEnabled = false;\r\n\r\n        // whether students can attach files to their work\r\n        this.isStudentAttachmentEnabled = false;\r\n\r\n        // whether the prompt is shown or not\r\n        this.isPromptVisible = true;\r\n\r\n        // whether the save button is shown or not\r\n        this.isSaveButtonVisible = false;\r\n\r\n        // whether the submit button is shown or not\r\n        this.isSubmitButtonVisible = false;\r\n\r\n        // whether the submit button is disabled\r\n        this.isSubmitButtonDisabled = false;\r\n\r\n        // whether we're only showing the student work\r\n        this.onlyShowWork = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // used to hold a message dialog if we need to use one\r\n        this.messageDialog = null;\r\n\r\n        // counter to keep track of the number of submits\r\n        this.submitCounter = 0;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        //var scope = this;\r\n        let themePath = this.ProjectService.getThemePath();\r\n\r\n        // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\r\n        // Rich text editor options\r\n        this.tinymceOptions = {\r\n            //onChange: function(e) {\r\n            //scope.studentDataChanged();\r\n            //},\r\n            menubar: false,\r\n            plugins: 'link image media autoresize', //imagetools\r\n            toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\r\n            autoresize_bottom_margin: \"0\",\r\n            autoresize_min_height: \"100\",\r\n            image_advtab: true,\r\n            content_css: themePath + \"/style/tinymce.css\",\r\n            setup: function (ed) {\r\n                ed.on(\"focus\", function (e) {\r\n                    $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\r\n                    $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\r\n                });\r\n\r\n                ed.on(\"blur\", function (e) {\r\n                    $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\r\n                    $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\r\n                });\r\n            }\r\n        };\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            if (this.mode === 'student') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n            } else if (this.mode === 'grading') {\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.onlyShowWork = true;\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n                    // inject the asset paths into the new component content\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n\r\n                    /*\r\n                     * reset the values so that the preview is refreshed with\r\n                     * the new content\r\n                     */\r\n                    this.submitCounter = 0;\r\n                    this.studentResponse = '';\r\n                    this.latestAnnotations = null;\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                    if (this.componentContent.starterSentence != null) {\r\n                        /*\r\n                         * the student has not done any work and there is a starter sentence\r\n                         * so we will populate the textarea with the starter sentence\r\n                         */\r\n                        this.studentResponse = this.componentContent.starterSentence;\r\n                    }\r\n                }.bind(this), true);\r\n            }\r\n\r\n            var componentState = null;\r\n\r\n            // set whether rich text is enabled\r\n            this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\r\n\r\n            // set whether studentAttachment is enabled\r\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\r\n\r\n            // get the component state from the scope\r\n            componentState = this.$scope.componentState;\r\n\r\n            if (componentState == null) {\r\n                /*\r\n                 * only import work if the student does not already have\r\n                 * work for this component\r\n                 */\r\n\r\n                // check if we need to import work\r\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\r\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\r\n\r\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n                    /*\r\n                     * check if the node id is in the field that we used to store\r\n                     * the import previous work node id in\r\n                     */\r\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\r\n                }\r\n\r\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n                    /*\r\n                     * check if the component id is in the field that we used to store\r\n                     * the import previous work component id in\r\n                     */\r\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\r\n                }\r\n\r\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n                    // import the work from the other component\r\n                    this.importWork();\r\n                } else if (this.componentContent.starterSentence != null) {\r\n                    /*\r\n                     * the student has not done any work and there is a starter sentence\r\n                     * so we will populate the textarea with the starter sentence\r\n                     */\r\n                    this.studentResponse = this.componentContent.starterSentence;\r\n                }\r\n            } else {\r\n                // populate the student work into this component\r\n                this.setStudentWork(componentState);\r\n            }\r\n\r\n            // check if the student has used up all of their submits\r\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                /*\r\n                 * the student has used up all of their chances to submit so we\r\n                 * will disable the submit button\r\n                 */\r\n                this.isSubmitButtonDisabled = true;\r\n            }\r\n\r\n            // check if we need to lock this component\r\n            this.calculateDisabled();\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n        }\r\n\r\n        //$('.openResponse').off('dragover').off('drop');\r\n\r\n        /**\r\n         * Returns true iff there is student work that hasn't been saved yet\r\n         */\r\n        this.$scope.isDirty = function() {\r\n            return this.$scope.openResponseController.isDirty;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a promise of a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.openResponseController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.openResponseController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.openResponseController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', function(event, args) {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n\r\n                // trigger the submit\r\n                var submitTriggeredBy = 'nodeSubmitButton';\r\n                this.submit(submitTriggeredBy);\r\n            }\r\n        }.bind(this));\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // set isDirty to false because the component state was just saved and notify node\r\n                this.isDirty = false;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                let isAutoSave = componentState.isAutoSave;\r\n                let isSubmit = componentState.isSubmit;\r\n                let serverSaveTime = componentState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                // set save message\r\n                if (isSubmit) {\r\n                    this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\r\n\r\n                    this.lockIfNecessary();\r\n\r\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                } else if (isAutoSave) {\r\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                } else {\r\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', function(event, args) {\r\n\r\n        }.bind(this));\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n\r\n        // load script for this component, if any\r\n        let script = this.componentContent.script;\r\n        if (script != null) {\r\n            this.ProjectService.retrieveScript(script).then((script) => {\r\n                new Function(script).call(this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n                var response = studentData.response;\r\n\r\n                if (response != null) {\r\n                    // populate the text the student previously typed\r\n                    this.studentResponse = response;\r\n                }\r\n\r\n                var submitCounter = studentData.submitCounter;\r\n\r\n                if (submitCounter != null) {\r\n                    // populate the submit counter\r\n                    this.submitCounter = submitCounter;\r\n                }\r\n\r\n                var attachments = studentData.attachments;\r\n\r\n                if (attachments != null) {\r\n                    this.attachments = attachments;\r\n                }\r\n\r\n                this.processLatestSubmit();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\r\n     */\r\n    processLatestSubmit() {\r\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n        if (latestState) {\r\n            let serverSaveTime = latestState.serverSaveTime;\r\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n            if (latestState.isSubmit) {\r\n                // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n            } else {\r\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        if (this.mode === 'authoring') {\r\n            /*\r\n             * we are in authoring mode so we will set isDirty to false here\r\n             * because the 'componentSaveTriggered' event won't work in\r\n             * authoring mode\r\n             */\r\n            this.isDirty = false;\r\n        }\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        // trigger the submit\r\n        var submitTriggeredBy = 'componentSubmitButton';\r\n        this.submit(submitTriggeredBy);\r\n    };\r\n\r\n    /**\r\n     * A submit was triggered by the component submit button or node submit button\r\n     * @param submitTriggeredBy what triggered the submit\r\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\r\n     */\r\n    submit(submitTriggeredBy) {\r\n\r\n        if (this.isSubmitDirty) {\r\n            // the student has unsubmitted work\r\n\r\n            var performSubmit = true;\r\n\r\n            if (this.componentContent.maxSubmitCount != null) {\r\n                // there is a max submit count\r\n\r\n                // calculate the number of submits this student has left\r\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\r\n\r\n                var message = '';\r\n\r\n                if (numberOfSubmitsLeft <= 0) {\r\n\r\n                    // the student does not have any more chances to submit\r\n                    alert(this.$translate('openResponse.youHaveNoMoreChances'));\r\n                    performSubmit = false;\r\n                } else if (numberOfSubmitsLeft == 1) {\r\n\r\n                    // ask the student if they are sure they want to submit\r\n                    message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\r\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chance to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\r\n                    performSubmit = confirm(message);\r\n                } else if (numberOfSubmitsLeft > 1) {\r\n\r\n                    // ask the student if they are sure they want to submit\r\n                    message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\r\n                    //message = 'You have ' + numberOfSubmitsLeft + ' chances to receive feedback on your answer so this this should be your best work.\\n\\nAre you ready to receive feedback on this answer?';\r\n                    performSubmit = confirm(message);\r\n                }\r\n            }\r\n\r\n            if (performSubmit) {\r\n\r\n                /*\r\n                 * set isSubmit to true so that when the component state is\r\n                 * created, it will know that is a submit component state\r\n                 * instead of just a save component state\r\n                 */\r\n                this.isSubmit = true;\r\n\r\n                // increment the submit counter\r\n                this.incrementSubmitCounter();\r\n\r\n                // check if the student has used up all of their submits\r\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                    /*\r\n                     * the student has used up all of their submits so we will\r\n                     * disable the submit button\r\n                     */\r\n                    this.isSubmitButtonDisabled = true;\r\n                }\r\n\r\n                if (this.mode === 'authoring') {\r\n                    /*\r\n                     * we are in authoring mode so we will set values appropriately\r\n                     * here because the 'componentSubmitTriggered' event won't\r\n                     * work in authoring mode\r\n                     */\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.createComponentState('submit');\r\n                }\r\n\r\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\r\n                    // tell the parent node that this component wants to submit\r\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\r\n                    // nothing extra needs to be performed\r\n                }\r\n            } else {\r\n                /*\r\n                 * the student has cancelled the submit so if a component state\r\n                 * is created, it will just be a regular save and not submit\r\n                 */\r\n                this.isSubmit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment the submit counter\r\n     */\r\n    incrementSubmitCounter() {\r\n        this.submitCounter++;\r\n    }\r\n\r\n    lockIfNecessary() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flags so we will know we need to save or submit the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the student response\r\n     */\r\n    getStudentResponse() {\r\n        return this.studentResponse;\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        // set the response into the component state\r\n        var studentData = {};\r\n\r\n        // get the text the student typed\r\n        var response = this.getStudentResponse();\r\n\r\n        studentData.response = response;\r\n        studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\r\n\r\n        // set the submit counter\r\n        studentData.submitCounter = this.submitCounter;\r\n\r\n        // set the flag for whether the student submitted this work\r\n        componentState.isSubmit = this.isSubmit;\r\n\r\n        // set the student data into the component state\r\n        componentState.studentData = studentData;\r\n\r\n        /*\r\n         * reset the isSubmit value so that the next component state\r\n         * doesn't maintain the same value\r\n         */\r\n        this.isSubmit = false;\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n\r\n        var performCRaterScoring = false;\r\n\r\n        // determine if we need to perform CRater scoring\r\n        if (action == 'submit' && componentState.isSubmit) {\r\n            if (this.isCRaterScoreOnSubmit(this.componentContent)) {\r\n                performCRaterScoring = true;\r\n            }\r\n        } else if (action == 'save') {\r\n            if (this.isCRaterScoreOnSave(this.componentContent)) {\r\n                performCRaterScoring = true;\r\n            }\r\n        } else if (action == 'change' || action == null) {\r\n            if (this.isCRaterScoreOnChange(this.componentContent)) {\r\n                performCRaterScoring = true;\r\n            }\r\n        }\r\n\r\n        if (performCRaterScoring) {\r\n            // we need to perform CRater scoring\r\n\r\n            var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\r\n            var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\r\n            var cRaterRequestType = 'scoring';\r\n            var cRaterResponseId = new Date().getTime();\r\n            var studentData = this.studentResponse;\r\n\r\n            /*\r\n             * display a dialog message while the student waits for their work\r\n             * to be scored by CRater\r\n             */\r\n            this.$mdDialog.show({\r\n                template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\r\n                escapeToClose: false\r\n            });\r\n\r\n            // make the CRater request to score the student data\r\n            this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\r\n\r\n                if (result != null) {\r\n\r\n                    // get the CRater response\r\n                    var data = result.data;\r\n\r\n                    if (data != null) {\r\n\r\n                        /*\r\n                         * annotations we put in the component state will be\r\n                         * removed from the component state and saved separately\r\n                         */\r\n                        componentState.annotations = [];\r\n\r\n                        // get the CRater score\r\n                        let score = data.score;\r\n                        let concepts = data.concepts;\r\n                        let previousScore = null;\r\n\r\n                        if (score != null) {\r\n\r\n                            // create the auto score annotation\r\n                            let autoScoreAnnotationData = {};\r\n                            autoScoreAnnotationData.value = score;\r\n                            autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\r\n                            autoScoreAnnotationData.concepts = concepts;\r\n                            autoScoreAnnotationData.autoGrader = 'cRater';\r\n\r\n                            let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\r\n\r\n                            let annotationGroupForScore = null;\r\n\r\n                            if (this.$scope.$parent.nodeController != null) {\r\n                                // get the previous score and comment annotations\r\n                                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\r\n\r\n                                if (latestAnnotations != null && latestAnnotations.score != null &&\r\n                                    latestAnnotations.score.data != null) {\r\n\r\n                                    // get the previous score annotation value\r\n                                    previousScore = latestAnnotations.score.data.value;\r\n                                }\r\n\r\n                                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\r\n\r\n                                    let globalAnnotationMaxCount = 0;\r\n                                    if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\r\n                                        globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\r\n                                    }\r\n                                    // get the annotation properties for the score that the student got.\r\n                                    annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\r\n\r\n                                    // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\r\n                                    if (annotationGroupForScore != null) {\r\n                                        let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\r\n                                        annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\r\n\r\n                                        if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\r\n                                            // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\r\n                                            annotationGroupForScore = null;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\r\n                                        // check if this annotation is global and what criteria needs to be met to un-globalize.\r\n                                        annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\r\n                                            // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\r\n                                            // so we can compare it when we check for criteria satisfaction.\r\n                                            if (unGlobalizeCriteria.params != null) {\r\n                                                unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\r\n                                            }\r\n                                        });\r\n                                    }\r\n\r\n                                    if (annotationGroupForScore != null) {\r\n                                        // copy over the annotation properties into the autoScoreAnnotation's data\r\n                                        angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            componentState.annotations.push(autoScoreAnnotation);\r\n\r\n                            if (this.mode === 'authoring') {\r\n                                if (this.latestAnnotations == null) {\r\n                                    this.latestAnnotations = {};\r\n                                }\r\n\r\n                                /*\r\n                                 * we are in the authoring view so we will set the\r\n                                 * latest score annotation manually\r\n                                 */\r\n                                this.latestAnnotations.score = autoScoreAnnotation;\r\n                            }\r\n\r\n                            var autoComment = null;\r\n\r\n                            // get the submit counter\r\n                            var submitCounter = this.submitCounter;\r\n\r\n                            if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\r\n                                /*\r\n                                 * this step has multiple attempt scoring rules and this is\r\n                                 * a subsequent submit\r\n                                 */\r\n                                // get the feedback based upon the previous score and current score\r\n                                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\r\n                            } else {\r\n                                // get the feedback text\r\n                                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\r\n                            }\r\n\r\n                            if (autoComment != null) {\r\n                                // create the auto comment annotation\r\n                                var autoCommentAnnotationData = {};\r\n                                autoCommentAnnotationData.value = autoComment;\r\n                                autoCommentAnnotationData.concepts = concepts;\r\n                                autoCommentAnnotationData.autoGrader = 'cRater';\r\n\r\n                                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\r\n\r\n                                if (this.componentContent.enableGlobalAnnotations) {\r\n                                    if (annotationGroupForScore != null) {\r\n                                        // copy over the annotation properties into the autoCommentAnnotation's data\r\n                                        angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\r\n                                    }\r\n                                }\r\n                                componentState.annotations.push(autoCommentAnnotation);\r\n\r\n                                if (this.mode === 'authoring') {\r\n                                    if (this.latestAnnotations == null) {\r\n                                        this.latestAnnotations = {};\r\n                                    }\r\n\r\n                                    /*\r\n                                     * we are in the authoring view so we will set the\r\n                                     * latest comment annotation manually\r\n                                     */\r\n                                    this.latestAnnotations.comment = autoCommentAnnotation;\r\n                                }\r\n                            }\r\n                            if (this.componentContent.enableNotifications) {\r\n                                // get the notification properties for the score that the student got.\r\n                                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\r\n\r\n                                if (notificationForScore != null) {\r\n                                    notificationForScore.score = score;\r\n                                    notificationForScore.nodeId = this.nodeId;\r\n                                    notificationForScore.componentId = this.componentId;\r\n                                    this.NotificationService.sendNotificationForScore(notificationForScore);\r\n                                }\r\n                            }\r\n\r\n                            // display global annotations dialog if needed\r\n                            if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\r\n                                this.$scope.$emit('displayGlobalAnnotations');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * hide the dialog that tells the student to wait since\r\n                 * the work has been scored.\r\n                 */\r\n                this.$mdDialog.hide();\r\n\r\n                // resolve the promise now that we are done performing additional processing\r\n                deferred.resolve(componentState);\r\n            });\r\n        } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\r\n            // if there are any additionalProcessingFunctions for this node and component, call all of them\r\n            let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\r\n            let allPromises = [];\r\n            for (let i = 0; i < additionalProcessingFunctions.length; i++) {\r\n                let additionalProcessingFunction = additionalProcessingFunctions[i];\r\n                let defer = this.$q.defer();\r\n                let promise = defer.promise;\r\n                allPromises.push(promise);\r\n                additionalProcessingFunction(defer, componentState, action);\r\n            }\r\n            this.$q.all(allPromises).then(() => {\r\n                deferred.resolve(componentState);\r\n            });\r\n        } else {\r\n            /*\r\n             * we don't need to perform any additional processing so we can resolve\r\n             * the promise immediately\r\n             */\r\n            deferred.resolve(componentState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an auto score annotation\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param toWorkgroupId the student workgroup id\r\n     * @param data the annotation data\r\n     * @returns the auto score annotation\r\n     */\r\n    createAutoScoreAnnotation(data) {\r\n\r\n        var runId = this.ConfigService.getRunId();\r\n        var periodId = this.ConfigService.getPeriodId();\r\n        var nodeId = this.nodeId;\r\n        var componentId = this.componentId;\r\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n        // create the auto score annotation\r\n        var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Create an auto comment annotation\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param toWorkgroupId the student workgroup id\r\n     * @param data the annotation data\r\n     * @returns the auto comment annotation\r\n     */\r\n    createAutoCommentAnnotation(data) {\r\n\r\n        var runId = this.ConfigService.getRunId();\r\n        var periodId = this.ConfigService.getPeriodId();\r\n        var nodeId = this.nodeId;\r\n        var componentId = this.componentId;\r\n        var toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n        // create the auto comment annotation\r\n        var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the component after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    removeAttachment(attachment) {\r\n        if (this.attachments.indexOf(attachment) != -1) {\r\n            this.attachments.splice(this.attachments.indexOf(attachment), 1);\r\n            this.studentDataChanged();\r\n            // YOU ARE NOW FREEEEEEEEE!\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Attach student asset to this Component's attachments\r\n     * @param studentAsset\r\n     */\r\n    attachStudentAsset(studentAsset) {\r\n        if (studentAsset != null) {\r\n            this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\r\n                if (copiedAsset != null) {\r\n                    var attachment = {\r\n                        studentAssetId: copiedAsset.id,\r\n                        iconURL: copiedAsset.iconURL\r\n                    };\r\n\r\n                    this.attachments.push(attachment);\r\n                    this.studentDataChanged();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Get the number of rows for the textarea\r\n     */\r\n    getNumRows() {\r\n        var numRows = null;\r\n\r\n        if (this.componentContent != null) {\r\n            numRows = this.componentContent.numRows;\r\n        }\r\n\r\n        return numRows;\r\n    };\r\n\r\n    /**\r\n     * Get the number of columns for the textarea\r\n     */\r\n    getNumColumns() {\r\n        var numColumns = null;\r\n\r\n        if (this.componentContent != null) {\r\n            numColumns = this.componentContent.numColumns;\r\n        }\r\n\r\n        return numColumns;\r\n    };\r\n\r\n    /**\r\n     * Get the text the student typed\r\n     */\r\n    getResponse() {\r\n        var response = null;\r\n\r\n        if (this.studentResponse != null) {\r\n            response = this.studentResponse;\r\n        }\r\n\r\n        return response;\r\n    };\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the import previous work node id and component id\r\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\r\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\r\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\r\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\r\n                }\r\n            }\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n\r\n                // get the latest component state for this component\r\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                /*\r\n                 * we will only import work into this component if the student\r\n                 * has not done any work for this component\r\n                 */\r\n                if(componentState == null) {\r\n                    // the student has not done any work for this component\r\n\r\n                    // get the latest component state from the component we are importing from\r\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\r\n\r\n                    if (importWorkComponentState != null) {\r\n                        /*\r\n                         * populate a new component state with the work from the\r\n                         * imported component state\r\n                         */\r\n                        var populatedComponentState = this.OpenResponseService.populateComponentState(importWorkComponentState);\r\n\r\n                        // populate the component state into this component\r\n                        this.setStudentWork(populatedComponentState);\r\n\r\n                        // make the work dirty so that it gets saved\r\n                        this.studentDataChanged();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\r\n\r\n            // set the new component into the controller\r\n            this.componentContent = editedComponentContent;\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the step node ids in the project\r\n     * @returns all the step node ids\r\n     */\r\n    getStepNodeIds() {\r\n        var stepNodeIds = this.ProjectService.getNodeIds();\r\n\r\n        return stepNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Check if CRater is enabled for this component\r\n     * @returns whether CRater is enabled for this component\r\n     */\r\n    isCRaterEnabled() {\r\n        var result = false;\r\n\r\n        if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if CRater is set to score on save\r\n     * @returns whether CRater is set to score on save\r\n     */\r\n    isCRaterScoreOnSave() {\r\n        var result = false;\r\n\r\n        if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if CRater is set to score on submit\r\n     * @returns whether CRater is set to score on submit\r\n     */\r\n    isCRaterScoreOnSubmit() {\r\n        var result = false;\r\n\r\n        if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if CRater is set to score on change\r\n     * @returns whether CRater is set to score on change\r\n     */\r\n    isCRaterScoreOnChange() {\r\n        var result = false;\r\n\r\n        if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if CRater is set to score when the student exits the step\r\n     * @returns whether CRater is set to score when the student exits the step\r\n     */\r\n    isCRaterScoreOnExit() {\r\n        var result = false;\r\n\r\n        if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\r\n            result = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\r\n\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Add a scoring rule\r\n     */\r\n    authoringAddScoringRule() {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.scoringRules != null) {\r\n\r\n            // create a scoring rule object\r\n            var newScoringRule = {};\r\n            newScoringRule.score = \"\";\r\n            newScoringRule.feedbackText = \"\";\r\n\r\n            // add the new scoring rule object\r\n            this.authoringComponentContent.cRater.scoringRules.push(newScoringRule);\r\n\r\n            /*\r\n             * the author has made changes so we will save the component\r\n             * content\r\n             */\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a scoring rule up\r\n     * @param index the index of the scoring rule\r\n     */\r\n    authoringViewScoringRuleUpClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.scoringRules != null) {\r\n\r\n            // make sure the scoring rule is not already at the top\r\n            if (index != 0) {\r\n                // the scoring rule is not at the top so we can move it up\r\n\r\n                // get the scoring rule\r\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\r\n\r\n                // remove the scoring rule\r\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\r\n\r\n                // add the scoring rule back at the position one index back\r\n                this.authoringComponentContent.cRater.scoringRules.splice(index - 1, 0, scoringRule);\r\n\r\n                /*\r\n                 * the author has made changes so we will save the component\r\n                 * content\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a scoring rule down\r\n     * @param index the index of the scoring rule\r\n     */\r\n    authoringViewScoringRuleDownClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.scoringRules != null) {\r\n\r\n            // make sure the scoring rule is not already at the end\r\n            if (index != this.authoringComponentContent.cRater.scoringRules.length - 1) {\r\n\r\n                // get the scoring rule\r\n                var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\r\n\r\n                // remove the scoring rule\r\n                this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\r\n\r\n                // add the scoring rule back at the position one index forward\r\n                this.authoringComponentContent.cRater.scoringRules.splice(index + 1, 0, scoringRule);\r\n\r\n                /*\r\n                 * the author has made changes so we will save the component\r\n                 * content\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a scoring rule\r\n     * @param index the index of the scoring rule\r\n     */\r\n    authoringViewScoringRuleDeleteClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.scoringRules != null) {\r\n\r\n            // get the scoring rule\r\n            var scoringRule = this.authoringComponentContent.cRater.scoringRules[index];\r\n\r\n            if (scoringRule != null) {\r\n\r\n                // get the score and feedback text\r\n                var score = scoringRule.score;\r\n                var feedbackText = scoringRule.feedbackText;\r\n\r\n                // make sure the author really wants to delete the scoring rule\r\n                //var answer = confirm('Are you sure you want to delete this scoring rule?\\n\\nScore: ' + score + '\\n\\n' + 'Feedback Text: ' + feedbackText);\r\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisScoringRule', {score: score, feedbackText: feedbackText}));\r\n\r\n                if (answer) {\r\n                    // the author answered yes to delete the scoring rule\r\n                    this.authoringComponentContent.cRater.scoringRules.splice(index, 1);\r\n\r\n                    /*\r\n                     * the author has made changes so we will save the component\r\n                     * content\r\n                     */\r\n                    this.authoringViewComponentChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new notification. Currently assumes this is a notification based on CRaterResult, but\r\n     * we can add different types in the future.\r\n     */\r\n    authoringAddNotification() {\r\n\r\n        if (this.authoringComponentContent.notificationSettings != null &&\r\n            this.authoringComponentContent.notificationSettings.notifications != null) {\r\n\r\n            // create a new notification\r\n            let newNotification = {\r\n                notificationType: \"CRaterResult\",\r\n                enableCriteria: {\r\n                    scoreSequence: [\"\", \"\"]\r\n                },\r\n                isAmbient: false,\r\n                dismissCode: \"apple\",\r\n                isNotifyTeacher: true,\r\n                isNotifyStudent: true,\r\n                notificationMessageToStudent: \"{{username}}, \" + this.$translate('openResponse.youGotAScoreOf') + \" {{score}}. \" + this.$translate('openResponse.pleaseTalkToYourTeacher') + \".\",\r\n                notificationMessageToTeacher: \"{{username}} \" + this.$translate('openResponse.gotAScoreOf') + \" {{score}}.\"\r\n            };\r\n\r\n            // add the new notification\r\n            this.authoringComponentContent.notificationSettings.notifications.push(newNotification);\r\n\r\n            // the author has made changes so we will save the component content\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a multiple attempt scoring rule\r\n     */\r\n    authoringAddMultipleAttemptScoringRule() {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\r\n\r\n            // create a new multiple attempt scoring rule\r\n            var newMultipleAttemptScoringRule = {};\r\n            newMultipleAttemptScoringRule.scoreSequence = [\"\", \"\"];\r\n            newMultipleAttemptScoringRule.feedbackText = \"\";\r\n\r\n            // add the new multiple attempt scoring rule\r\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules.push(newMultipleAttemptScoringRule);\r\n\r\n            /*\r\n             * the author has made changes so we will save the component\r\n             * content\r\n             */\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a multiple attempt scoring rule up\r\n     * @param index\r\n     */\r\n    authoringViewMultipleAttemptScoringRuleUpClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\r\n\r\n            // make sure the multiple attempt scoring rule is not already at the top\r\n            if (index != 0) {\r\n                // the multiple attempt scoring rule is not at the top\r\n\r\n                // get the multiple attempt scoring rule\r\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\r\n\r\n                // remove the multiple attempt scoring rule\r\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\r\n\r\n                // add the multiple attempt scoring rule back at the position one index back\r\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index - 1, 0, multipleAttemptScoringRule);\r\n\r\n                /*\r\n                 * the author has made changes so we will save the component\r\n                 * content\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a multiple attempt scoring rule down\r\n     * @param index the index of the multiple attempt scoring rule\r\n     */\r\n    authoringViewMultipleAttemptScoringRuleDownClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\r\n\r\n            // make sure the multiple attempt scoring rule is not at the end\r\n            if (index != this.authoringComponentContent.cRater.multipleAttemptScoringRules.length - 1) {\r\n                // the multiple attempt scoring rule is not at the end\r\n\r\n                // get the multiple attempt scoring rule\r\n                var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\r\n\r\n                // remove the multiple attempt scoring rule\r\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\r\n\r\n                // add the multiple attempt scoring rule back at the position one index forward\r\n                this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index + 1, 0, multipleAttemptScoringRule);\r\n\r\n                /*\r\n                 * the author has made changes so we will save the component\r\n                 * content\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a multiple attempt scoring rule\r\n     * @param index the index of the mulitple attempt scoring rule\r\n     */\r\n    authoringViewMultipleAttemptScoringRuleDeleteClicked(index) {\r\n\r\n        if (this.authoringComponentContent.cRater != null &&\r\n            this.authoringComponentContent.cRater.multipleAttemptScoringRules != null) {\r\n\r\n            // get the multiple attempt scoring rule\r\n            var multipleAttemptScoringRule = this.authoringComponentContent.cRater.multipleAttemptScoringRules[index];\r\n\r\n            if (multipleAttemptScoringRule != null) {\r\n\r\n                // get the score sequence\r\n                var scoreSequence = multipleAttemptScoringRule.scoreSequence;\r\n                var previousScore = \"\";\r\n                var currentScore = \"\";\r\n\r\n                if (scoreSequence != null) {\r\n                    previousScore = scoreSequence[0];\r\n                    currentScore = scoreSequence[1];\r\n                }\r\n\r\n                // get the feedback text\r\n                var feedbackText = multipleAttemptScoringRule.feedbackText;\r\n\r\n                // make sure the author really wants to delete the multiple attempt scoring rule\r\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisMultipleAttemptScoringRule', {previousScore: previousScore, currentScore: currentScore, feedbackText: feedbackText}));\r\n\r\n                if (answer) {\r\n                    // the author answered yes to delete the multiple attempt scoring rule\r\n                    this.authoringComponentContent.cRater.multipleAttemptScoringRules.splice(index, 1);\r\n\r\n                    /*\r\n                     * the author has made changes so we will save the component\r\n                     * content\r\n                     */\r\n                    this.authoringViewComponentChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a notification up\r\n     * @param index of the notification\r\n     */\r\n    authoringViewNotificationUpClicked(index) {\r\n\r\n        if (this.authoringComponentContent.notificationSettings != null &&\r\n            this.authoringComponentContent.notificationSettings.notifications != null) {\r\n\r\n            // make sure the notification is not already at the top\r\n            if (index != 0) {\r\n                // the notification is not at the top\r\n\r\n                // get the notification\r\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\r\n\r\n                // remove the notification\r\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\r\n\r\n                // add the notification back at the position one index back\r\n                this.authoringComponentContent.notificationSettings.notifications.splice(index - 1, 0, notification);\r\n\r\n                // the author has made changes so we will save the component content\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move a notification down\r\n     * @param index the index of the notification\r\n     */\r\n    authoringViewNotificationDownClicked(index) {\r\n\r\n        if (this.authoringComponentContent.notificationSettings != null &&\r\n            this.authoringComponentContent.notificationSettings.notifications != null) {\r\n\r\n            // make sure the notification is not at the end\r\n            if (index != this.authoringComponentContent.notificationSettings.notifications.length - 1) {\r\n                // the notification is not at the end\r\n\r\n                // get the notification\r\n                var notification = this.authoringComponentContent.notificationSettings.notifications[index];\r\n\r\n                // remove the notification\r\n                this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\r\n\r\n                // add the notification back at the position one index forward\r\n                this.authoringComponentContent.notificationSettings.notifications.splice(index + 1, 0, notification);\r\n\r\n                // the author has made changes so we will save the component content\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a notification\r\n     * @param index the index of the notification\r\n     */\r\n    authoringViewNotificationDeleteClicked(index) {\r\n\r\n        if (this.authoringComponentContent.notificationSettings != null &&\r\n            this.authoringComponentContent.notificationSettings.notifications != null) {\r\n\r\n            // get the notification\r\n            var notification = this.authoringComponentContent.notificationSettings.notifications[index];\r\n\r\n            if (notification != null) {\r\n\r\n                // get the score sequence\r\n                var scoreSequence = notification.enableCriteria.scoreSequence;\r\n                var previousScore = \"\";\r\n                var currentScore = \"\";\r\n\r\n                if (scoreSequence != null) {\r\n                    previousScore = scoreSequence[0];\r\n                    currentScore = scoreSequence[1];\r\n                }\r\n\r\n                // make sure the author really wants to delete the notification\r\n                var answer = confirm(this.$translate('openResponse.areYouSureYouWantToDeleteThisNotification', {previousScore: previousScore, currentScore: currentScore}));\r\n\r\n                if (answer) {\r\n                    // the author answered yes to delete the notification\r\n                    this.authoringComponentContent.notificationSettings.notifications.splice(index, 1);\r\n\r\n                    // the author has made changes so we will save the component content\r\n                    this.authoringViewComponentChanged();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The \"Enable CRater\" checkbox was clicked\r\n     */\r\n    authoringViewEnableCRaterClicked() {\r\n\r\n        if (this.authoringComponentContent.enableCRater) {\r\n            // CRater was turned on\r\n\r\n            if (this.authoringComponentContent.cRater == null) {\r\n                /*\r\n                 * the cRater object does not exist in the component content\r\n                 * so we will create it\r\n                 */\r\n\r\n                // create the cRater object\r\n                var cRater = {};\r\n                cRater.itemType = \"CRATER\";\r\n                cRater.itemId = \"\";\r\n                cRater.scoreOn = \"submit\";\r\n                cRater.showScore = true;\r\n                cRater.showFeedback = true;\r\n                cRater.scoringRules = [];\r\n                cRater.enableMultipleAttemptScoringRules = false;\r\n                cRater.multipleAttemptScoringRules = []\r\n\r\n                // set the cRater object into the component content\r\n                this.authoringComponentContent.cRater = cRater;\r\n            }\r\n\r\n            // turn on the submit button\r\n            //this.authoringComponentContent.showSubmitButton = true;\r\n            this.setShowSubmitButtonValue(true);\r\n        } else {\r\n            // CRater was turned off\r\n\r\n            // turn off the submit button\r\n            this.setShowSubmitButtonValue(false);\r\n        }\r\n\r\n        /*\r\n         * the author has made changes so we will save the component\r\n         * content\r\n         */\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The \"Enable Multiple Attempt Feedback\" checkbox was clicked\r\n     */\r\n    enableMultipleAttemptScoringRulesClicked() {\r\n\r\n        // get the cRater object from the component content\r\n        var cRater = this.authoringComponentContent.cRater;\r\n\r\n        if (cRater != null && cRater.multipleAttemptScoringRules == null) {\r\n            /*\r\n             * the multiple attempt scoring rules array does not exist so\r\n             * we will create it\r\n             */\r\n            cRater.multipleAttemptScoringRules = [];\r\n        }\r\n\r\n        /*\r\n         * the author has made changes so we will save the component\r\n         * content\r\n         */\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The \"Enable Notifications\" checkbox was clicked\r\n     */\r\n    authoringViewEnableNotificationsClicked() {\r\n\r\n        if (this.authoringComponentContent.enableNotifications) {\r\n            // Notifications was turned on\r\n\r\n            if (this.authoringComponentContent.notificationSettings == null) {\r\n                /*\r\n                 * the NotificationSettings object does not exist in the component content\r\n                 * so we will create it\r\n                 */\r\n                this.authoringComponentContent.notificationSettings = {\r\n                    notifications: []\r\n                };\r\n            }\r\n        }\r\n\r\n        /*\r\n         * the author has made changes so we will save the component\r\n         * content\r\n         */\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns all the revisions made by this user for the specified component\r\n     */\r\n    getRevisions() {\r\n        // get the component states for this component\r\n        return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n    };\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n};\r\n\r\nOpenResponseController.$inject = [\r\n    '$filter',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'CRaterService',\r\n    'NodeService',\r\n    'NotificationService',\r\n    'OpenResponseService',\r\n    'ProjectService',\r\n    'StudentAssetService',\r\n    'StudentDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default OpenResponseController;\r\n"]}