{"version":3,"sources":["openResponseService.es6"],"names":["OpenResponseService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","starterSentence","isStudentAttachmentEnabled","componentToCopy","createComponent","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","i","l","state","isSubmit","response","completionCriteria","isCompletionCriteriaSatisfied","componentContent","annotation","cRater","showScore","showAutoScore","showFeedback","showAutoFeedback","displayToStudent","studentDataString","$inject"],"mappings":"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","file":"openResponseService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass OpenResponseService extends NodeService {\n  constructor($filter,\n      StudentDataService,\n      UtilService) {\n    super();\n    this.$filter = $filter;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Open Response\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('openResponse.componentTypeLabel');\n  }\n\n  /**\n   * Create a OpenResponse component object\n   * @returns a new OpenResponse component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'OpenResponse';\n    component.prompt = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    component.starterSentence = null;\n    component.isStudentAttachmentEnabled = false;\n    return component;\n  }\n\n  /**\n   * Copies a OpenResponse component object\n   * @returns a copied OpenResponse component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.prompt = componentToCopy.prompt;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    component.starterSentence = componentToCopy.starterSentence;\n    component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n    return component;\n  }\n  /**\n   * Populate a component state with the data from another component state\n   * @param componentStateFromOtherComponent the component state to obtain the data from\n   * @return a new component state that contains the student data from the other\n   * component state\n   */\n  populateComponentState(componentStateFromOtherComponent) {\n    var componentState = null;\n\n    if (componentStateFromOtherComponent != null) {\n\n      // create an empty component state\n      componentState = this.StudentDataService.createComponentState();\n\n      // get the component type of the other component state\n      var otherComponentType = componentStateFromOtherComponent.componentType;\n\n      if (otherComponentType === 'OpenResponse') {\n        // the other component is an OpenResponse component\n\n        // get the student data from the other component state\n        var studentData = componentStateFromOtherComponent.studentData;\n\n        // create a copy of the student data\n        var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n        // set the student data into the new component state\n        componentState.studentData = studentDataCopy;\n      }\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @param node parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.response) {\n              // there is a response so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.response) {\n            // there is a response so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    if (component.completionCriteria != null) {\n      /*\n       * there is a special completion criteria authored in this component\n       * so we will evaluate the completion criteria to see if the student\n       * has completed this component\n       */\n      result = this.StudentDataService.isCompletionCriteriaSatisfied(component.completionCriteria);\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if we need to display the annotation to the student\n   * @param componentContent the component content\n   * @param annotation the annotation\n   * @returns whether we need to display the annotation to the student\n   */\n  displayAnnotation(componentContent, annotation) {\n\n    var result = true;\n\n    if (componentContent != null && annotation != null) {\n\n      if (annotation.type == 'score') {\n\n      } else if (annotation.type == 'comment') {\n\n      } else if (annotation.type == 'autoScore') {\n        // this is an auto graded score annotation\n\n        if (componentContent.cRater != null && !componentContent.cRater.showScore) {\n          // we do not want to show the CRater score\n          result = false;\n        } else if (componentContent.showAutoScore === false) {\n          // do not show the auto score to the student\n          result = false;\n        }\n      } else if (annotation.type == 'autoComment') {\n        // this is an auto graded comment annotation\n\n        if (componentContent.cRater != null && !componentContent.cRater.showFeedback) {\n          // we do not want to show the CRater comment\n          result = false;\n        } else if (componentContent.showAutoFeedback === false) {\n          // do not show the auto comment to the student\n          result = false;\n        }\n      }\n\n      if (annotation.displayToStudent === false) {\n        // do not display the annotation to the studentr\n        result = false;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return true;\n  }\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return a human readable student data string\n   */\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // get the response the student typed\n        studentDataString = studentData.response;\n      }\n    }\n\n    return studentDataString;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return true;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return true;\n  }\n\n  /**\n   * Check if the component state has student work. Sometimes a component\n   * state may be created if the student visits a component but doesn't\n   * actually perform any work. This is where we will check if the student\n   * actually performed any work.\n   * @param componentState the component state object\n   * @param componentContent the component content\n   * @return whether the component state has any work\n   */\n  componentStateHasStudentWork(componentState, componentContent) {\n\n    if (componentState != null) {\n\n      let studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the response from the student data\n        let response = studentData.response;\n\n        if (componentContent == null) {\n          // the component content was not provided\n\n          if (response != null && response !== '') {\n            // the student has work\n            return true;\n          }\n        } else {\n          // the component content was provided\n\n          let starterSentence = componentContent.starterSentence;\n\n          if (starterSentence == null || starterSentence === '') {\n            // there is no starter sentence\n\n            if (response != null && response !== '') {\n              // the student has work\n              return true;\n            }\n          } else {\n            /*\n             * there is a starter sentence so we will compare it\n             * with the student response\n             */\n\n            if (response != null && response !== '' && response !== starterSentence) {\n              /*\n               * the student has a response that is different than\n               * the starter sentence\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nOpenResponseService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseService;\n"]}