{"version":3,"sources":["openResponseService.es6"],"names":[],"mappings":"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","file":"openResponseService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass OpenResponseService extends NodeService {\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create a OpenResponse component object\n     * @returns a new OpenResponse component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'OpenResponse';\n        component.prompt = 'Enter prompt here';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.starterSentence = null;\n\n        return component;\n    }\n\n    getStudentWorkAsHTML(componentState) {\n        var studentWorkAsHTML = null;\n\n        if (componentState != null && componentState.studentData != null) {\n            var response = componentState.studentData.response;\n\n            if (response != null) {\n                studentWorkAsHTML = response.replace(/\\n/gi, '<br />');\n            }\n\n            var attachments = componentState.studentData.attachments;\n\n            // TODO: make into directive and use in component displays as well\n            if (attachments && attachments.length) {\n                studentWorkAsHTML += '<div class=\"component-content__actions\" layout=\"row\" layout-wrap=\"true\">';\n                for (var a = 0; a < attachments.length; a++) {\n                    var attachment = attachments[a];\n                    studentWorkAsHTML += '<div class=\"component__attachment\">' +\n                        '<img src=\"' + attachment.iconURL + '\" alt=\"' + attachment.iconURL + '\" class=\"component__attachment__content\" />' +\n                        '</div>';\n                }\n                studentWorkAsHTML += '</div>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'OpenResponse') {\n                // the other component is an OpenResponse component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            } else if (otherComponentType === 'Planning') {\n                componentState.studentData = JSON.stringify(componentStateFromOtherComponent.studentNodes);\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null && componentStates.length) {\n\n            // get the last component state\n            var l = componentStates.length - 1;\n            var componentState = componentStates[l];\n\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                var response = studentData.response;\n\n                if (response) {\n                    // there is a response so the component is completed\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n}\n\nOpenResponseService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default OpenResponseService;"]}