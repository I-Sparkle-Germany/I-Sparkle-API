{"version":3,"sources":["openResponseService.es6"],"names":["OpenResponseService","$filter","StudentDataService","UtilService","$translate","component","type","starterSentence","isStudentAttachmentEnabled","componentToCopy","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","showSubmitButton","showSaveButton","i","l","state","isSubmit","studentData","response","componentState","completionCriteria","isCompletionCriteriaSatisfied","componentContent","annotation","displayToStudent","cRater","showScore","showAutoScore","showFeedback","showAutoFeedback","hasStarterSentence","hasResponse","$inject"],"mappings":"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","file":"openResponseService.js","sourcesContent":["import ComponentService from '../componentService';\n\nclass OpenResponseService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('openResponse.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'OpenResponse';\n    component.starterSentence = null;\n    component.isStudentAttachmentEnabled = false;\n    return component;\n  }\n\n  copyComponent(componentToCopy) {\n    const component = super.copyComponent(componentToCopy);\n    component.starterSentence = componentToCopy.starterSentence;\n    component.isStudentAttachmentEnabled = componentToCopy.isStudentAttachmentEnabled;\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      if (submitRequired) {\n        // completion requires a submission, so check for isSubmit in any component states\n        for (let i = 0, l = componentStates.length; i < l; i++) {\n          let state = componentStates[i];\n          if (state.isSubmit && state.studentData) {\n            // component state is a submission\n            if (state.studentData.response) {\n              // there is a response so the component is completed\n              result = true;\n              break;\n            }\n          }\n        }\n      } else {\n        // get the last component state\n        let l = componentStates.length - 1;\n        let componentState = componentStates[l];\n\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          if (studentData.response) {\n            // there is a response so the component is completed\n            result = true;\n          }\n        }\n      }\n    }\n\n    if (component.completionCriteria != null) {\n      /*\n       * there is a special completion criteria authored in this component\n       * so we will evaluate the completion criteria to see if the student\n       * has completed this component\n       */\n      result = this.StudentDataService.isCompletionCriteriaSatisfied(component.completionCriteria);\n    }\n\n    return result;\n  };\n\n  displayAnnotation(componentContent, annotation) {\n    if (annotation.displayToStudent === false) {\n      return false;\n    } else {\n      if (annotation.type == 'score') {\n\n      } else if (annotation.type == 'comment') {\n\n      } else if (annotation.type == 'autoScore') {\n        if (componentContent.cRater != null && !componentContent.cRater.showScore) {\n          return false;\n        } else if (componentContent.showAutoScore === false) {\n          return false;\n        }\n      } else if (annotation.type == 'autoComment') {\n        if (componentContent.cRater != null && !componentContent.cRater.showFeedback) {\n          return false;\n        } else if (componentContent.showAutoFeedback === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  getStudentDataString(componentState) {\n    return componentState.studentData.response;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (this.hasStarterSentence(componentContent)) {\n      let response = componentState.studentData.response;\n      let starterSentence = componentContent.starterSentence;\n      return this.hasResponse(componentState) && response !== starterSentence;\n    } else {\n      return this.hasResponse(componentState);\n    }\n  }\n\n  hasStarterSentence(componentContent) {\n    const starterSentence = componentContent.starterSentence;\n    return starterSentence != null && starterSentence !== '';\n  }\n\n  hasResponse(componentState) {\n    const response = componentState.studentData.response;\n    return response != null && response !== '';\n  }\n}\n\nOpenResponseService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseService;\n"]}