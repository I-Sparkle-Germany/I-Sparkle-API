{"version":3,"sources":["outsideURLController.es6"],"names":[],"mappings":"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","file":"outsideURLController.js","sourcesContent":["class OutsideURLController {\n    constructor($scope,\n                $sce,\n                NodeService,\n                OutsideURLService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.NodeService = NodeService;\n        this.OutsideURLService = OutsideURLService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(() => {\n                    return this.authoringComponentContent;\n                }, (newValue, oldValue) => {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    // set the url\n                    this.setURL(this.authoringComponentContent.url);\n                }, true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n            } else {\n                // this is a regular component\n\n                if (this.componentContent != null) {\n                    // set the url\n                    this.setURL(this.componentContent.url);\n                }\n            }\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var studentWork = null;\n\n            return studentWork;\n        }.bind(this);\n    }\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // set the url\n        //this.setURL(this.authoringComponentContent.url);\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n            console.error(e.toString());\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n}\n\nOutsideURLController.$inject = [\n    '$scope',\n    '$sce',\n    'NodeService',\n    'OutsideURLService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default OutsideURLController;\n"]}