{"version":3,"sources":["outsideURLController.es6"],"names":["OutsideURLController","$q","$scope","$sce","NodeService","OutsideURLService","ProjectService","StudentDataService","nodeId","componentId","componentContent","authoringComponentContent","showAdvancedAuthoring","url","maxWidth","maxHeight","currentNode","getCurrentNode","id","originalComponentContent","mode","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","resolve","promise","bind","trustedURL","trustAsResourceUrl","nodeAuthoringController","authoringViewNodeChanged","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","exitListener","$on","event","args","$inject"],"mappings":"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","file":"outsideURLController.js","sourcesContent":["class OutsideURLController {\n    constructor($q,\n                $scope,\n                $sce,\n                NodeService,\n                OutsideURLService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.NodeService = NodeService;\n        this.OutsideURLService = OutsideURLService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(() => {\n                    return this.authoringComponentContent;\n                }, (newValue, oldValue) => {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    // set the url\n                    this.setURL(this.authoringComponentContent.url);\n                }, true);\n            }\n\n            if (this.componentContent != null) {\n                // set the url\n                this.setURL(this.componentContent.url);\n            }\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var deferred = this.$q.defer();\n\n            /*\n             * the student does not have any unsaved changes in this component\n             * so we don't need to save a component state for this component.\n             * we will immediately resolve the promise here.\n             */\n            deferred.resolve();\n\n            return deferred.promise;\n        }.bind(this);\n    }\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // set the url\n        //this.setURL(this.authoringComponentContent.url);\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n}\n\nOutsideURLController.$inject = [\n    '$q',\n    '$scope',\n    '$sce',\n    'NodeService',\n    'OutsideURLService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default OutsideURLController;\n"]}