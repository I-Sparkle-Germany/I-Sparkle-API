{"version":3,"sources":["outsideURLController.es6"],"names":["OutsideURLController","$q","$scope","$sce","ConfigService","NodeService","OutsideURLService","ProjectService","StudentDataService","UtilService","nodeId","componentId","componentContent","authoringComponentContent","showAdvancedAuthoring","url","maxWidth","maxHeight","currentNode","getCurrentNode","id","originalComponentContent","mode","summernoteRubricId","summernoteRubricHTML","rubric","summernoteRubricOptions","height","disableDragAndDrop","updateAdvancedAuthoringView","$watch","newValue","oldValue","injectAssetPaths","setURL","$parent","nodeController","registerComponentController","getComponentState","deferred","defer","resolve","promise","bind","trustedURL","trustAsResourceUrl","nodeAuthoringController","authoringViewNodeChanged","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","exitListener","$on","event","args","html","removeAbsoluteAssetPaths","insertWISELinks","authoringViewComponentChanged","$inject"],"mappings":"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","file":"outsideURLController.js","sourcesContent":["class OutsideURLController {\n    constructor($q,\n                $scope,\n                $sce,\n                ConfigService,\n                NodeService,\n                OutsideURLService,\n                ProjectService,\n                StudentDataService,\n                UtilService) {\n\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$sce = $sce;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.OutsideURLService = OutsideURLService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the url to the web page to display\n        this.url = null;\n\n        // the max width of the iframe\n        this.maxWidth = null;\n\n        // the max height of the iframe\n        this.maxHeight = null;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // set the rubric summernote options\n                this.summernoteRubricOptions = {\n                    height: 300,\n                    disableDragAndDrop: true\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(() => {\n                    return this.authoringComponentContent;\n                }, (newValue, oldValue) => {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n\n                    // set the url\n                    this.setURL(this.authoringComponentContent.url);\n                }, true);\n            }\n\n            if (this.componentContent != null) {\n                // set the url\n                this.setURL(this.componentContent.url);\n            }\n\n            // get the max width\n            this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : \"none\";\n\n            // get the max height\n            this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : \"none\";\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n            var deferred = this.$q.defer();\n\n            /*\n             * the student does not have any unsaved changes in this component\n             * so we don't need to save a component state for this component.\n             * we will immediately resolve the promise here.\n             */\n            deferred.resolve();\n\n            return deferred.promise;\n        }.bind(this);\n    }\n\n    /**\n     * Set the url\n     * @param url the url\n     */\n    setURL(url) {\n        if (url != null) {\n            var trustedURL = this.$sce.trustAsResourceUrl(url);\n            this.url = trustedURL;\n        }\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n\n        // set the url\n        //this.setURL(this.authoringComponentContent.url);\n\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new authoring component content\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the component content\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', (event, args) => {\n\n        });\n    };\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\nOutsideURLController.$inject = [\n    '$q',\n    '$scope',\n    '$sce',\n    'ConfigService',\n    'NodeService',\n    'OutsideURLService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default OutsideURLController;\n"]}