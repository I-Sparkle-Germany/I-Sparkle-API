{"version":3,"sources":["outsideURLService.es6"],"names":["OutsideURLService","$filter","UtilService","$translate","component","id","generateKey","type","url","showSaveButton","showSubmitButton","componentToCopy","createComponent","componentStates","componentEvents","nodeEvents","result","e","length","event","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,iB;;;AACJ,6BAAYC,OAAZ,EAAqBC,WAArB,EAAkC;AAAA;;AAAA;;AAEhC,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBA,WAAnB;;AAEA,UAAKC,UAAL,GAAkB,MAAKF,OAAL,CAAa,WAAb,CAAlB;AALgC;AAMjC;;AAED;;;;;;;;;4CAKwB;AACtB,aAAO,KAAKE,UAAL,CAAgB,+BAAhB,CAAP;AACD;;AAED;;;;;;;sCAIkB;AAChB,UAAIC,YAAY,EAAhB;AACAA,gBAAUC,EAAV,GAAe,KAAKH,WAAL,CAAiBI,WAAjB,EAAf;AACAF,gBAAUG,IAAV,GAAiB,YAAjB;AACAH,gBAAUI,GAAV,GAAgB,EAAhB;AACAJ,gBAAUK,cAAV,GAA2B,KAA3B;AACAL,gBAAUM,gBAAV,GAA6B,KAA7B;AACA,aAAON,SAAP;AACD;;AAED;;;;;;;kCAIcO,e,EAAiB;AAC7B,UAAIP,YAAY,KAAKQ,eAAL,EAAhB;AACAR,gBAAUI,GAAV,GAAgBG,gBAAgBH,GAAhC;AACAJ,gBAAUK,cAAV,GAA2BE,gBAAgBF,cAA3C;AACAL,gBAAUM,gBAAV,GAA6BC,gBAAgBD,gBAA7C;AACA,aAAON,SAAP;AACD;;AAED;;;;;;;;;;;gCAQYA,S,EAAWS,e,EAAiBC,e,EAAiBC,U,EAAY;AACnE,UAAIC,SAAS,KAAb;;AAEA,UAAID,cAAc,IAAlB,EAAwB;;AAEtB;AACA,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,WAAWG,MAA/B,EAAuCD,GAAvC,EAA4C;;AAE1C;AACA,cAAIE,QAAQJ,WAAWE,CAAX,CAAZ;;AAEA,cAAIE,SAAS,IAAT,IAAiBA,MAAMA,KAAN,KAAgB,aAArC,EAAoD;AAClDH,qBAAS,IAAT;AACA;AACD;AACF;AACF;;AAED,aAAOA,MAAP;AACD;;;;;AAED;;;;;;;qCAOiBZ,S,EAAW;AAC1B,aAAO,KAAP;AACD;;AAED;;;;;;;8CAI0B;AACxB,aAAO,KAAP;AACD;;AAED;;;;;;;gDAI4B;AAC1B,aAAO,KAAP;AACD;;;;;;AAIHJ,kBAAkBoB,OAAlB,GAA4B,CAC1B,SAD0B,EAE1B,aAF0B,CAA5B;;kBAKepB,iB","file":"outsideURLService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass OutsideURLService extends NodeService {\n  constructor($filter, UtilService) {\n    super();\n    this.$filter = $filter;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Get the component type label\n   * example\n   * \"Outside URL\"\n   */\n  getComponentTypeLabel() {\n    return this.$translate('outsideURL.componentTypeLabel');\n  }\n\n  /**\n   * Create an OutsideURL component object\n   * @returns a new OutsideURL component object\n   */\n  createComponent() {\n    var component = {};\n    component.id = this.UtilService.generateKey();\n    component.type = 'OutsideURL';\n    component.url = '';\n    component.showSaveButton = false;\n    component.showSubmitButton = false;\n    return component;\n  }\n\n  /**\n   * Copies an existing OutsideURL component object\n   * @returns a copied OutsideURL component object\n   */\n  copyComponent(componentToCopy) {\n    var component = this.createComponent();\n    component.url = componentToCopy.url;\n    component.showSaveButton = componentToCopy.showSaveButton;\n    component.showSubmitButton = componentToCopy.showSubmitButton;\n    return component;\n  }\n\n  /**\n   * Check if the component was completed\n   * @param component the component object\n   * @param componentStates the component states for the specific component\n   * @param componentEvents the events for the specific component\n   * @param nodeEvents the events for the parent node of the component\n   * @returns whether the component was completed\n   */\n  isCompleted(component, componentStates, componentEvents, nodeEvents) {\n    var result = false;\n\n    if (nodeEvents != null) {\n\n      // loop through all the events\n      for (var e = 0; e < nodeEvents.length; e++) {\n\n        // get an event\n        var event = nodeEvents[e];\n\n        if (event != null && event.event === 'nodeEntered') {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Whether this component generates student work\n   * @param component (optional) the component object. if the component object\n   * is not provided, we will use the default value of whether the\n   * component type usually has work.\n   * @return whether this component generates student work\n   */\n  componentHasWork(component) {\n    return false;\n  }\n\n  /**\n   * Whether this component uses a save button\n   * @return whether this component uses a save button\n   */\n  componentUsesSaveButton() {\n    return false;\n  }\n\n  /**\n   * Whether this component uses a submit button\n   * @return whether this component uses a submit button\n   */\n  componentUsesSubmitButton() {\n    return false;\n  }\n}\n\n\nOutsideURLService.$inject = [\n  '$filter',\n  'UtilService'\n];\n\nexport default OutsideURLService;\n"]}