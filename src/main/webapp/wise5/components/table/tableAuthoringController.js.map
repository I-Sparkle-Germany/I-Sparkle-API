{"version":3,"sources":["tableAuthoringController.es6"],"names":["TableAuthoringController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","TableService","UtilService","allowedConnectedComponentTypes","type","columnCellSizes","parseColumnCellSizes","componentContent","$watch","authoringComponentContent","bind","newValue","oldValue","submitCounter","injectAssetPaths","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","resetTable","$on","event","args","nodeId","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","numRows","areRowsAfterEmpty","authoringViewTableSizeChanged","answer","confirm","$translate","rowIndex","oldNumRows","authoringGetNumRowsInTableData","r","isRowEmpty","tableData","row","cell","text","numColumns","areColumnsAfterEmpty","columnIndex","oldNumColumns","authoringGetNumColumnsInTableData","c","isColumnEmpty","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","getCellObjectFromComponentContent","createEmptyCell","push","x","y","cellObject","editable","size","newCell","cellSize","splice","tempRow","length","firstRow","index","authoringSetColumnCellSizes","column","$inject"],"mappings":"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","file":"tableAuthoringController.js","sourcesContent":["'use strict';\n\nimport TableController from \"./tableController\";\nimport html2canvas from 'html2canvas';\n\nclass TableAuthoringController extends TableController {\n  constructor($anchorScroll,\n              $filter,\n              $location,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              TableService,\n              UtilService) {\n    super($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      TableService,\n      UtilService);\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Graph'\n      },\n      {\n        type: 'Table'\n      }\n    ];\n\n    /*\n     * for the authoring view, get the cell sizes for each column if they\n     * have been customized\n     */\n    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n\n      /*\n       * reset the values so that the preview is refreshed with\n       * the new content\n       */\n      this.submitCounter = 0;\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.resetTable();\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n  }\n\n  /**\n   * The author has changed the number of rows.\n   * @param oldValue The previous number of rows.\n   */\n  authoringViewTableNumRowsChanged(oldValue) {\n    if (this.authoringComponentContent.numRows < oldValue) {\n      // the author is reducing the number of rows\n      if (this.areRowsAfterEmpty(this.authoringComponentContent.numRows)) {\n        // the rows that we will delete are empty so we will remove the rows\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the rows that we will delete are not empty so we will confirm that\n         * they want to delete the rows\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numRows = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of rows\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the rows after the given index are empty.\n   * @param rowIndex The index of the row to start checking at. This value is zero indexed.\n   * @return {boolean} True if the row at the given index and all the rows after are empty.\n   * False if the row at the given index or any row after the row index is not empty.\n   */\n  areRowsAfterEmpty(rowIndex) {\n    let oldNumRows = this.authoringGetNumRowsInTableData();\n    for (let r = rowIndex; r < oldNumRows; r++) {\n      if (!this.isRowEmpty(r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a row has cells that are all empty string.\n   * @param rowIndex The row index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the row are empty string.\n   * False if the text in any cell in the row is not empty string.\n   */\n  isRowEmpty(rowIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    let row = tableData[rowIndex];\n    for (let cell of row) {\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The author has changed the number of columns.\n   * @param oldValue The previous number of columns.\n   */\n  authoringViewTableNumColumnsChanged(oldValue) {\n    if (this.authoringComponentContent.numColumns < oldValue) {\n      // the author is reducing the number of columns\n      if (this.areColumnsAfterEmpty(this.authoringComponentContent.numColumns)) {\n        // the columns that we will delete are empty so we will remove the columns\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the columns that we will delete are not empty so we will confirm that\n         * they want to delete the columns\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numColumns = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of columns\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the columns after the given index are empty.\n   * @param columnIndex The index of the column to start checking at. This value is zero indexed.\n   * @return {boolean} True if the column at the given index and all the columns after are empty.\n   * False if the column at the given index or any column after the column index is not empty.\n   */\n  areColumnsAfterEmpty(columnIndex) {\n    let oldNumColumns = this.authoringGetNumColumnsInTableData();\n    for (let c = columnIndex; c < oldNumColumns; c++) {\n      if (!this.isColumnEmpty(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a column has cells that are all empty string.\n   * @param columnIndex The column index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the column are empty string.\n   * False if the text in any cell in the column is not empty string.\n   */\n  isColumnEmpty(columnIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    for (let row of tableData) {\n      // loop through all the rows and check the cell in the column\n      let cell = row[columnIndex];\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The table size has changed in the authoring view so we will update it\n   */\n  authoringViewTableSizeChanged() {\n\n    // create a new table with the new size and populate it with the existing cells\n    var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n    // set the new table into the component content\n    this.authoringComponentContent.tableData = newTable;\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Create a table with the given dimensions. Populate the cells with\n   * the cells from the old table.\n   * @param newNumRows the number of rows in the new table\n   * @param newNumColumns the number of columns in the new table\n   * @returns a new table\n   */\n  getUpdatedTableSize(newNumRows, newNumColumns) {\n\n    var newTable = [];\n\n    // create the rows\n    for (var r = 0; r < newNumRows; r++) {\n\n      var newRow = [];\n\n      // create the columns\n      for (var c = 0; c < newNumColumns; c++) {\n\n        // try to get the cell from the old table\n        var cell = this.getCellObjectFromComponentContent(c, r);\n\n        if (cell == null) {\n          /*\n           * the old table does not have a cell for the given\n           * row/column location so we will create an empty cell\n           */\n          cell = this.createEmptyCell();\n        }\n\n        newRow.push(cell);\n      }\n\n      newTable.push(newRow);\n    }\n\n    return newTable;\n  }\n\n  /**\n   * Get the cell object at the given x, y location\n   * @param x the column number (zero indexed)\n   * @param y the row number (zero indexed)\n   * @returns the cell at the given x, y location or null if there is none\n   */\n  getCellObjectFromComponentContent(x, y) {\n    var cellObject = null;\n\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // get the row\n      var row = tableData[y];\n\n      if (row != null) {\n\n        // get the cell\n        cellObject = row[x];\n      }\n    }\n\n    return cellObject;\n  }\n\n  /**\n   * Create an empty cell\n   * @returns an empty cell object\n   */\n  createEmptyCell() {\n    var cell = {};\n\n    cell.text = '';\n    cell.editable = true;\n    cell.size = null;\n\n    return cell;\n  }\n\n  /**\n   * Insert a row into the table from the authoring view\n   * @param y the row number to insert at\n   */\n  authoringViewInsertRow(y) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // create the new row that we will insert\n      var newRow = [];\n\n      // get the number of columns\n      var numColumns = this.authoringComponentContent.numColumns;\n\n      // populate the new row with the correct number of cells\n      for (var c = 0; c < numColumns; c++) {\n        // create an empty cell\n        var newCell = this.createEmptyCell();\n\n        // get the column cell size\n        var cellSize = this.columnCellSizes[c];\n\n        if (cellSize != null) {\n          // set the cell size\n          newCell.size = cellSize;\n        }\n\n        newRow.push(newCell);\n      }\n\n      // insert the new row into the table\n      tableData.splice(y, 0, newRow);\n\n      // update the number of rows value\n      this.authoringComponentContent.numRows++;\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a row in the table from the authoring view\n   * @param y the row number to delete\n   */\n  authoringViewDeleteRow(y) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        // remove the row\n        tableData.splice(y, 1);\n\n        // update the number of rows value\n        this.authoringComponentContent.numRows--;\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Insert a column into the table from the authoring view\n   * @param x the column number to insert at\n   */\n  authoringViewInsertColumn(x) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      var numRows = this.authoringComponentContent.numRows;\n\n      // loop through all the rows\n      for (var r = 0; r < numRows; r++) {\n\n        // get a row\n        var tempRow = tableData[r];\n\n        if (tempRow != null) {\n\n          // create an empty cell\n          var newCell = this.createEmptyCell();\n\n          // insert the cell into the row\n          tempRow.splice(x, 0, newCell);\n        }\n      }\n\n      // update the number of columns value\n      this.authoringComponentContent.numColumns++;\n\n      // update the column cell sizes model\n      this.parseColumnCellSizes(this.authoringComponentContent);\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a column in the table from the authoring view\n   * @param x the column number to delete\n   */\n  authoringViewDeleteColumn(x) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        var numRows = this.authoringComponentContent.numRows;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n          // get a row\n          var tempRow = tableData[r];\n\n          if (tempRow != null) {\n\n            // remove the cell from the row\n            tempRow.splice(x, 1);\n          }\n        }\n\n        // update the number of columns value\n        this.authoringComponentContent.numColumns--;\n\n        // update the column cell sizes model\n        this.parseColumnCellSizes(this.authoringComponentContent);\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the number of rows in the table data. This is slightly different from\n   * just getting the numRows field in the component content. Usually the\n   * number of rows will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of rows using the number of rows input.\n   * @return {number} The number of rows in the table data.\n   */\n  authoringGetNumRowsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    return tableData.length;\n  }\n\n  /**\n   * Get the number of columns in the table data. This is slightly different from\n   * just getting the numColumns field in the component content. Usually the\n   * number of columns will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of columns using the number of columns input.\n   * @return {number} The number of columns in the table data.\n   */\n  authoringGetNumColumnsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    if (tableData.length > 0) {\n      // get the number of cells in the first row\n      return tableData[0].length;\n    }\n    return 0;\n  }\n\n  /**\n   * Make all the cells uneditable\n   */\n  makeAllCellsUneditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell uneditable\n              cell.editable = false;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells edtiable\n   */\n  makeAllCellsEditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell editable\n              cell.editable = true;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Parse the column cell sizes. We will get the column cell sizes by looking\n   * at size value of each column in the first row.\n   * @param componentContent the component content\n   */\n  parseColumnCellSizes(componentContent) {\n\n    var columnCellSizes = {};\n\n    if (componentContent != null) {\n\n      // get the table data\n      var tableData = componentContent.tableData;\n\n      if (tableData != null) {\n        var firstRow = tableData[0];\n\n        if (firstRow != null) {\n\n          // loop through all the columns\n          for (var x = 0; x < firstRow.length; x++) {\n\n            // get the cell object\n            var cell = firstRow[x];\n\n            /*\n             * get the cell size and set it into our mapping of\n             * column to cell size\n             */\n            columnCellSizes[x] = cell.size;\n          }\n        }\n      }\n    }\n\n    return columnCellSizes;\n  }\n\n  /**\n   * One of the column cell sizes has changed\n   */\n  authoringViewColumnSizeChanged(index) {\n\n    if (index != null) {\n      var cellSize = this.columnCellSizes[index];\n\n      if (cellSize == '') {\n        cellSize = null;\n      }\n\n      // set the cell size for all the cells in the column\n      this.authoringSetColumnCellSizes(index, cellSize);\n    }\n  }\n\n  /**\n   * Set the cell sizes for all the cells in a column\n   * @param column the column number\n   * @param size the cell size\n   */\n  authoringSetColumnCellSizes(column, size) {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // get the cell in the column\n          var cell = row[column];\n\n          if (cell != null) {\n            // set the cell size\n            cell.size = size;\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n}\n\nTableAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'TableService',\n  'UtilService'\n];\n\nexport default TableAuthoringController;\n"]}