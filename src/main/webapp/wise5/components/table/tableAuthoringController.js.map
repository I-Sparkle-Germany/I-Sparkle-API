{"version":3,"sources":["tableAuthoringController.es6"],"names":["TableAuthoringController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","TableService","UtilService","connectedComponentUpdateOnOptions","value","text","allowedConnectedComponentTypes","type","columnCellSizes","parseColumnCellSizes","componentContent","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","summernoteRubricId","nodeId","componentId","summernoteRubricHTML","rubric","insertAssetString","$translate","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","authoringComponentContent","bind","newValue","oldValue","submitCounter","injectAssetPaths","resetTable","$on","event","args","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showAdvancedAuthoring","$parent","nodeAuthoringController","authoringViewNodeChanged","angular","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","numRows","areRowsAfterEmpty","authoringViewTableSizeChanged","answer","confirm","rowIndex","oldNumRows","authoringGetNumRowsInTableData","r","isRowEmpty","tableData","row","cell","numColumns","areColumnsAfterEmpty","columnIndex","oldNumColumns","authoringGetNumColumnsInTableData","c","isColumnEmpty","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","getCellObjectFromComponentContent","createEmptyCell","push","x","y","cellObject","editable","size","newCell","cellSize","splice","tempRow","length","html","removeAbsoluteAssetPaths","insertWISELinks","show","$emit","setShowSubmitButtonValue","firstRow","index","authoringSetColumnCellSizes","column","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","connectedComponents","connectedComponent","components","getComponentsByNodeId","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","id","connectedComponentType","getComponentByNodeIdAndComponentId","componentType","a","allowedConnectedComponentType","showJSONAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","$broadcast","$inject"],"mappings":"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","file":"tableAuthoringController.js","sourcesContent":["'use strict';\n\nimport TableController from \"./tableController\";\nimport html2canvas from 'html2canvas';\n\nclass TableAuthoringController extends TableController {\n  constructor($anchorScroll,\n              $filter,\n              $location,\n              $mdDialog,\n              $q,\n              $rootScope,\n              $scope,\n              AnnotationService,\n              ConfigService,\n              NodeService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              TableService,\n              UtilService) {\n    super($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      TableService,\n      UtilService);\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Graph'\n      },\n      {\n        type: 'Table'\n      }\n    ];\n\n    /*\n     * for the authoring view, get the cell sizes for each column if they\n     * have been customized\n     */\n    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    // generate the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n    // set the component rubric into the summernote rubric\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    // the tooltip text for the insert WISE asset button\n    var insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.updateAdvancedAuthoringView();\n\n    $scope.$watch(function() {\n      return this.authoringComponentContent;\n    }.bind(this), function(newValue, oldValue) {\n\n      /*\n       * reset the values so that the preview is refreshed with\n       * the new content\n       */\n      this.submitCounter = 0;\n      this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n      this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      this.resetTable();\n    }.bind(this), true);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the new component into the controller\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The author has changed the number of rows.\n   * @param oldValue The previous number of rows.\n   */\n  authoringViewTableNumRowsChanged(oldValue) {\n    if (this.authoringComponentContent.numRows < oldValue) {\n      // the author is reducing the number of rows\n      if (this.areRowsAfterEmpty(this.authoringComponentContent.numRows)) {\n        // the rows that we will delete are empty so we will remove the rows\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the rows that we will delete are not empty so we will confirm that\n         * they want to delete the rows\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numRows = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of rows\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the rows after the given index are empty.\n   * @param rowIndex The index of the row to start checking at. This value is zero indexed.\n   * @return {boolean} True if the row at the given index and all the rows after are empty.\n   * False if the row at the given index or any row after the row index is not empty.\n   */\n  areRowsAfterEmpty(rowIndex) {\n    let oldNumRows = this.authoringGetNumRowsInTableData();\n    for (let r = rowIndex; r < oldNumRows; r++) {\n      if (!this.isRowEmpty(r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a row has cells that are all empty string.\n   * @param rowIndex The row index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the row are empty string.\n   * False if the text in any cell in the row is not empty string.\n   */\n  isRowEmpty(rowIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    let row = tableData[rowIndex];\n    for (let cell of row) {\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The author has changed the number of columns.\n   * @param oldValue The previous number of columns.\n   */\n  authoringViewTableNumColumnsChanged(oldValue) {\n    if (this.authoringComponentContent.numColumns < oldValue) {\n      // the author is reducing the number of columns\n      if (this.areColumnsAfterEmpty(this.authoringComponentContent.numColumns)) {\n        // the columns that we will delete are empty so we will remove the columns\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the columns that we will delete are not empty so we will confirm that\n         * they want to delete the columns\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numColumns = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of columns\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the columns after the given index are empty.\n   * @param columnIndex The index of the column to start checking at. This value is zero indexed.\n   * @return {boolean} True if the column at the given index and all the columns after are empty.\n   * False if the column at the given index or any column after the column index is not empty.\n   */\n  areColumnsAfterEmpty(columnIndex) {\n    let oldNumColumns = this.authoringGetNumColumnsInTableData();\n    for (let c = columnIndex; c < oldNumColumns; c++) {\n      if (!this.isColumnEmpty(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a column has cells that are all empty string.\n   * @param columnIndex The column index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the column are empty string.\n   * False if the text in any cell in the column is not empty string.\n   */\n  isColumnEmpty(columnIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    for (let row of tableData) {\n      // loop through all the rows and check the cell in the column\n      let cell = row[columnIndex];\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The table size has changed in the authoring view so we will update it\n   */\n  authoringViewTableSizeChanged() {\n\n    // create a new table with the new size and populate it with the existing cells\n    var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n    // set the new table into the component content\n    this.authoringComponentContent.tableData = newTable;\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Create a table with the given dimensions. Populate the cells with\n   * the cells from the old table.\n   * @param newNumRows the number of rows in the new table\n   * @param newNumColumns the number of columns in the new table\n   * @returns a new table\n   */\n  getUpdatedTableSize(newNumRows, newNumColumns) {\n\n    var newTable = [];\n\n    // create the rows\n    for (var r = 0; r < newNumRows; r++) {\n\n      var newRow = [];\n\n      // create the columns\n      for (var c = 0; c < newNumColumns; c++) {\n\n        // try to get the cell from the old table\n        var cell = this.getCellObjectFromComponentContent(c, r);\n\n        if (cell == null) {\n          /*\n           * the old table does not have a cell for the given\n           * row/column location so we will create an empty cell\n           */\n          cell = this.createEmptyCell();\n        }\n\n        newRow.push(cell);\n      }\n\n      newTable.push(newRow);\n    }\n\n    return newTable;\n  }\n\n  /**\n   * Get the cell object at the given x, y location\n   * @param x the column number (zero indexed)\n   * @param y the row number (zero indexed)\n   * @returns the cell at the given x, y location or null if there is none\n   */\n  getCellObjectFromComponentContent(x, y) {\n    var cellObject = null;\n\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // get the row\n      var row = tableData[y];\n\n      if (row != null) {\n\n        // get the cell\n        cellObject = row[x];\n      }\n    }\n\n    return cellObject;\n  }\n\n  /**\n   * Create an empty cell\n   * @returns an empty cell object\n   */\n  createEmptyCell() {\n    var cell = {};\n\n    cell.text = '';\n    cell.editable = true;\n    cell.size = null;\n\n    return cell;\n  }\n\n  /**\n   * Insert a row into the table from the authoring view\n   * @param y the row number to insert at\n   */\n  authoringViewInsertRow(y) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // create the new row that we will insert\n      var newRow = [];\n\n      // get the number of columns\n      var numColumns = this.authoringComponentContent.numColumns;\n\n      // populate the new row with the correct number of cells\n      for (var c = 0; c < numColumns; c++) {\n        // create an empty cell\n        var newCell = this.createEmptyCell();\n\n        // get the column cell size\n        var cellSize = this.columnCellSizes[c];\n\n        if (cellSize != null) {\n          // set the cell size\n          newCell.size = cellSize;\n        }\n\n        newRow.push(newCell);\n      }\n\n      // insert the new row into the table\n      tableData.splice(y, 0, newRow);\n\n      // update the number of rows value\n      this.authoringComponentContent.numRows++;\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a row in the table from the authoring view\n   * @param y the row number to delete\n   */\n  authoringViewDeleteRow(y) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        // remove the row\n        tableData.splice(y, 1);\n\n        // update the number of rows value\n        this.authoringComponentContent.numRows--;\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Insert a column into the table from the authoring view\n   * @param x the column number to insert at\n   */\n  authoringViewInsertColumn(x) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      var numRows = this.authoringComponentContent.numRows;\n\n      // loop through all the rows\n      for (var r = 0; r < numRows; r++) {\n\n        // get a row\n        var tempRow = tableData[r];\n\n        if (tempRow != null) {\n\n          // create an empty cell\n          var newCell = this.createEmptyCell();\n\n          // insert the cell into the row\n          tempRow.splice(x, 0, newCell);\n        }\n      }\n\n      // update the number of columns value\n      this.authoringComponentContent.numColumns++;\n\n      // update the column cell sizes model\n      this.parseColumnCellSizes(this.authoringComponentContent);\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a column in the table from the authoring view\n   * @param x the column number to delete\n   */\n  authoringViewDeleteColumn(x) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        var numRows = this.authoringComponentContent.numRows;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n          // get a row\n          var tempRow = tableData[r];\n\n          if (tempRow != null) {\n\n            // remove the cell from the row\n            tempRow.splice(x, 1);\n          }\n        }\n\n        // update the number of columns value\n        this.authoringComponentContent.numColumns--;\n\n        // update the column cell sizes model\n        this.parseColumnCellSizes(this.authoringComponentContent);\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the number of rows in the table data. This is slightly different from\n   * just getting the numRows field in the component content. Usually the\n   * number of rows will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of rows using the number of rows input.\n   * @return {number} The number of rows in the table data.\n   */\n  authoringGetNumRowsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    return tableData.length;\n  }\n\n  /**\n   * Get the number of columns in the table data. This is slightly different from\n   * just getting the numColumns field in the component content. Usually the\n   * number of columns will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of columns using the number of columns input.\n   * @return {number} The number of columns in the table data.\n   */\n  authoringGetNumColumnsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    if (tableData.length > 0) {\n      // get the number of cells in the first row\n      return tableData[0].length;\n    }\n    return 0;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells uneditable\n   */\n  makeAllCellsUneditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell uneditable\n              cell.editable = false;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells edtiable\n   */\n  makeAllCellsEditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell editable\n              cell.editable = true;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Parse the column cell sizes. We will get the column cell sizes by looking\n   * at size value of each column in the first row.\n   * @param componentContent the component content\n   */\n  parseColumnCellSizes(componentContent) {\n\n    var columnCellSizes = {};\n\n    if (componentContent != null) {\n\n      // get the table data\n      var tableData = componentContent.tableData;\n\n      if (tableData != null) {\n        var firstRow = tableData[0];\n\n        if (firstRow != null) {\n\n          // loop through all the columns\n          for (var x = 0; x < firstRow.length; x++) {\n\n            // get the cell object\n            var cell = firstRow[x];\n\n            /*\n             * get the cell size and set it into our mapping of\n             * column to cell size\n             */\n            columnCellSizes[x] = cell.size;\n          }\n        }\n      }\n    }\n\n    return columnCellSizes;\n  }\n\n  /**\n   * One of the column cell sizes has changed\n   */\n  authoringViewColumnSizeChanged(index) {\n\n    if (index != null) {\n      var cellSize = this.columnCellSizes[index];\n\n      if (cellSize == '') {\n        cellSize = null;\n      }\n\n      // set the cell size for all the cells in the column\n      this.authoringSetColumnCellSizes(index, cellSize);\n    }\n  }\n\n  /**\n   * Set the cell sizes for all the cells in a column\n   * @param column the column number\n   * @param size the cell size\n   */\n  authoringSetColumnCellSizes(column, size) {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // get the cell in the column\n          var cell = row[column];\n\n          if (cell != null) {\n            // set the cell size\n            cell.size = size;\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nTableAuthoringController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'TableService',\n  'UtilService'\n];\n\nexport default TableAuthoringController;\n"]}