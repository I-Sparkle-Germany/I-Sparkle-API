<<<<<<< HEAD
{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$injector","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","notebookConfig","getNotebookConfig","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","columnCellSizes","parseColumnCellSizes","id","tableId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","resetTable","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","setupTable","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","annotation","annotationNodeId","annotationComponentId","getNumber","num","array","Array","isNaN","parseInt","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","$broadcast","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","defaultComponentState","createBlankComponentState","mergedComponentState","copyTableDataCellText","studentAsset","params","trialIndex","seriesIndex","showDataAtMouseX","studentDataVersion","version","series","length","tempSeries","setSeriesIntoTable","trials","trial","multipleSeries","mouseOverPoints","x","latestMouseOverPoint","Math","round","xUnits","xAxis","units","yUnits","yAxis","xAxisTitle","title","yAxisTitle","removeAllCellsFromTableData","addTableDataRow","createTableRow","show","singleSeries","closestDataPoint","getClosestDataPoint","data","name","getXFromDataPoint","getYFromDataPoint","row","push","editable","size","columns","column","constructor","createTableCell","dataPoints","minNumericalXDifference","Infinity","dataPoint","dataPointX","numericalDifference","getNumericalAbsoluteDifference","x1","x2","abs","y","skipFirstRow","xColumn","yColumn","tableDataRows","getTableDataRows","dataRowCounter","r","dataRow","setTableDataCellValue","table","cell","cellValue","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","numRows","areRowsAfterEmpty","authoringViewTableSizeChanged","answer","confirm","rowIndex","oldNumRows","authoringGetNumRowsInTableData","isRowEmpty","numColumns","areColumnsAfterEmpty","columnIndex","oldNumColumns","authoringGetNumColumnsInTableData","c","isColumnEmpty","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","getCellObjectFromComponentContent","createEmptyCell","cellObject","newCell","cellSize","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringShowPreviousWorkNode","getNodeById","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","importWorkNodeId","importWorkComponentId","setShowSubmitButtonValue","firstRow","index","authoringSetColumnCellSizes","connectedComponents","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","tags","tag","a","allowedConnectedComponentType","jsonStringChanged","$inject"],"mappings":"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","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n  constructor($anchorScroll,\n      $filter,\n      $injector,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentDataService,\n      TableService,\n      UtilService) {\n\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$location = $location;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.TableService = TableService;\n    this.UtilService = UtilService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // holds the the table data\n    this.tableData = null;\n\n    // whether this part is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the reset table button is shown or not\n    this.isResetTableButtonVisible = true;\n\n    // whether the snip table button is shown or not\n    this.isSnipTableButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Graph'\n      },\n      {\n        type: 'Table'\n      }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.latestConnectedComponentState = null;\n    this.latestConnectedComponentParams = null;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    /*\n     * for the authoring view, get the cell sizes for each column if they\n     * have been customized\n     */\n    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n      this.tableId = 'table_' + this.nodeId + '_' + this.componentId;\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        this.isResetTableButtonVisible = true;\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isSnipTableButtonVisible = false;\n        this.isDisabled = true;\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isSnipTableButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n\n          /*\n           * reset the values so that the preview is refreshed with\n           * the new content\n           */\n          this.submitCounter = 0;\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n          this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n          this.resetTable();\n        }.bind(this), true);\n      }\n\n      var componentState = null;\n\n      // get the component state from the scope\n      componentState = this.$scope.componentState;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.TableService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        } else if (componentState == null) {\n          // check if we need to import work\n\n          var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n          var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n          if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n          } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            /*\n             * the student does not have any work and there are connected\n             * components so we will get the work from the connected\n             * components\n             */\n            this.handleConnectedComponents();\n          }\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      // set up the table\n      this.setupTable();\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the component state from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n      if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n        if (connectedComponentParams.updateOn === 'change') {\n\n        }\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        /*\n         * make a copy of the component state so we don't accidentally\n         * change any values in the referenced object\n         */\n        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n        if (componentType === 'Table') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Graph') {\n\n          // set the graph data into the table\n          this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Embedded') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        }\n      }\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.tableController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.tableController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.tableController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n\n      // check if the component state is from a connected component\n      if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n        // get the connected component params\n        var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n        if (connectedComponentParams != null) {\n\n          if (connectedComponentParams.updateOn === 'save' ||\n            (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n            var performUpdate = false;\n\n            /*\n             * make a copy of the component state so we don't accidentally\n             * change any values in the referenced object\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n            /*\n             * make sure the student hasn't entered any values into the\n             * table so that we don't overwrite any of their work.\n             */\n            if (this.isTableEmpty() || this.isTableReset()) {\n              /*\n               * the student has not entered any values into the table\n               * so we can update it\n               */\n              performUpdate = true;\n            } else {\n              /*\n               * the student has entered values into the table so we\n               * will ask them if they want to update it\n               */\n              /*\n              var answer = confirm('Do you want to update the connected table?');\n\n              if (answer) {\n                // the student answered yes\n                performUpdate = true;\n              }\n              */\n              performUpdate = true;\n            }\n\n            if (performUpdate) {\n              // set the table data\n              this.$scope.tableController.setStudentWork(componentState);\n\n              // the table has changed\n              this.$scope.tableController.isDirty = true;\n              this.$scope.tableController.isSubmitDirty = true;\n            }\n\n            /*\n             * remember the component state and connected component params\n             * in case we need to use them again later\n             */\n            this.latestConnectedComponentState = componentState;\n            this.latestConnectedComponentParams = connectedComponentParams;\n          }\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    this.$scope.getNumber = function(num) {\n      var array = new Array();\n\n      // make sure num is a valid number\n      if (num != null && !isNaN(num)) {\n        array = new Array(parseInt(num));\n      }\n\n      return array;\n    }\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Get a copy of the table data\n   * @param tableData the table data to copy\n   * @return a copy of the table data\n   */\n  getCopyOfTableData(tableData) {\n    var tableDataCopy = null;\n\n    if (tableData != null) {\n      // create a JSON string from the table data\n      var tableDataJSONString = JSON.stringify(tableData);\n\n      // create a JSON object from the table data string\n      var tableDataJSON = JSON.parse(tableDataJSONString);\n\n      tableDataCopy = tableDataJSON;\n    }\n\n    return tableDataCopy;\n  };\n\n  /**\n   * Setup the table\n   */\n  setupTable() {\n\n    if (this.tableData == null) {\n      /*\n       * the student does not have any table data so we will use\n       * the table data from the component content\n       */\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n    }\n  };\n\n  /**\n   * Reset the table data to its initial state from the component content\n   */\n  resetTable() {\n\n    var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n    var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      // this component imports work so we will import the work again\n      this.handleConnectedComponents();\n    } else if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n      // import the work from the other component\n      this.importWork();\n    } else {\n      // get the original table from the step content\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n      // the table has changed so we will perform additional processing\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Get the rows of the table data\n   */\n  getTableDataRows() {\n    return this.tableData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // set the table into the controller\n        this.tableData = studentData.tableData;\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    // insert the table data\n    studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Table';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Create a new component state with no student data\n   * @return a component state with no student data\n   */\n  createBlankComponentState() {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n      var studentData = {};\n\n      // set the student data into the component state\n      componentState.studentData = studentData;\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to show the reset table button\n   * @return whether to show the reset table button\n   */\n  showResetTableButton() {\n    return this.isResetTableButtonVisible;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n      var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state from the component we are importing from\n        var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n        if (importWorkComponentState != null) {\n\n          // create a blank component state without student work\n          var defaultComponentState = this.createBlankComponentState();\n\n          if (defaultComponentState != null && defaultComponentState.studentData != null) {\n            // set the authored component content table data into the component state\n            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n          }\n\n          // copy the cell text values into the default component state\n          var mergedComponentState = this.copyTableDataCellText(importWorkComponentState, defaultComponentState);\n\n          // set the merged component state into this component\n          this.setStudentWork(mergedComponentState);\n\n          // make the work dirty so that it gets saved\n          this.studentDataChanged();\n        }\n      }\n    }\n  };\n\n  /**\n   * handle importing notebook item data (we only support csv for now)\n   */\n  attachStudentAsset(studentAsset) {\n    // TODO: implement me\n  };\n\n  /**\n   * Set the graph data into the table data\n   * @param componentState the component state to get the graph data from\n   * @param params (optional) the params to specify what columns\n   * and rows to overwrite in the table data\n   */\n  setGraphDataIntoTableData(componentState, params) {\n\n    var trialIndex = 0;\n    var seriesIndex = 0;\n\n    if (params != null) {\n\n      if (params.trialIndex != null) {\n        // get the trial index\n        trialIndex = params.trialIndex;\n      }\n\n      if (params.seriesIndex != null) {\n        // get the series index\n        seriesIndex = params.seriesIndex;\n      }\n\n      if (params.showDataAtMouseX) {\n        this.showDataAtMouseX(componentState, params);\n        return;\n      }\n    }\n\n    if (componentState != null && componentState.studentData != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      // get the student data version\n      var studentDataVersion = studentData.version;\n\n      if (studentDataVersion == null || studentDataVersion == 1) {\n        // this is the old student data format that can't contain trials\n\n        // get the series\n        var series = studentData.series;\n\n        if (series != null && series.length > 0) {\n\n          // get the series that we will get data from\n          var tempSeries = series[seriesIndex];\n\n          // set the series data into the table\n          this.setSeriesIntoTable(tempSeries);\n        }\n      } else {\n        // this is the new student data format that can contain trials\n\n        // get all the trials\n        var trials = studentData.trials;\n\n        if (trials != null) {\n\n          // get the specific trial we want\n          var trial = trials[trialIndex];\n\n          if (trial != null) {\n\n            // get the series in the trial\n            var multipleSeries = trial.series;\n\n            if (multipleSeries != null) {\n\n              // get the specific series we want\n              var series = multipleSeries[seriesIndex];\n\n              // set the series data into the table\n              this.setSeriesIntoTable(series);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Show the data at x for all the series.\n   * @param componentState The Graph component state.\n   * @param params The connected component params.\n   */\n  showDataAtMouseX(componentState, params) {\n    let studentData = componentState.studentData;\n    let mouseOverPoints = studentData.mouseOverPoints;\n    let x = null;\n\n    // get the x value from the latest mouse over point\n    if (mouseOverPoints != null && mouseOverPoints.length > 0) {\n      let latestMouseOverPoint = mouseOverPoints[mouseOverPoints.length - 1];\n      x = Math.round(latestMouseOverPoint[0]);\n    }\n    let xUnits = studentData.xAxis.units;\n    let yUnits = studentData.yAxis.units;\n    let xAxisTitle = studentData.xAxis.title.text;\n    let yAxisTitle = studentData.yAxis.title.text;\n    this.removeAllCellsFromTableData();\n    this.addTableDataRow(this.createTableRow(['Series Name', xAxisTitle, yAxisTitle]));\n    for (let trial of studentData.trials) {\n      if (trial.show) {\n        let multipleSeries = trial.series;\n        for (let singleSeries of multipleSeries) {\n          if (singleSeries.show !== false) {\n            let closestDataPoint = this.getClosestDataPoint(singleSeries.data, x);\n            if (closestDataPoint != null) {\n              this.addTableDataRow(this.createTableRow([singleSeries.name,\n                  Math.round(this.getXFromDataPoint(closestDataPoint)) + ' ' + xUnits,\n                  Math.round(this.getYFromDataPoint(closestDataPoint)) + ' ' + yUnits]));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all the rows and cells from the table data.\n   */\n  removeAllCellsFromTableData() {\n    this.tableData = [];\n  }\n\n  /**\n   * Append a row to the table data.\n   * @param row An array of objects. Each object represents a cell in the table.\n   */\n  addTableDataRow(row) {\n    this.tableData.push(row);\n  }\n\n  /**\n   * Create a cell object.\n   * @param text The text to show in the cell.\n   * @param editable Whether the student is allowed to edit the contents in the\n   * cell.\n   * @param size The with of the cell.\n   * @return An object.\n   */\n  createTableCell(text = '', editable = false, size = null) {\n    return { text: text, editable: editable, size: size };\n  }\n\n  /**\n   * Create a row.\n   * @param columns An array of strings or objects.\n   * @return An array of objects.\n   */\n  createTableRow(columns) {\n    let row = [];\n    for (let column of columns) {\n      if (column.constructor.name == 'String') {\n        row.push(this.createTableCell(column));\n      } else if (column.constructor.name == 'Object') {\n        row.push(this.createTableCell(column.text, column.editable, column.size));\n      }\n    }\n    return row;\n  }\n\n  /**\n   * Get the data point that has the closest x value to the given argument x.\n   * @param dataPoints An array of data points. Each data point can be an object\n   * or an array.\n   * @param x The argument x.\n   * @return A data point which can be an object or array.\n   */\n  getClosestDataPoint(dataPoints, x) {\n    let closestDataPoint = null;\n    let minNumericalXDifference = Infinity;\n    for (let dataPoint of dataPoints) {\n      let dataPointX = this.getXFromDataPoint(dataPoint);\n      let numericalDifference = this.getNumericalAbsoluteDifference(x, dataPointX);\n      if (numericalDifference < minNumericalXDifference) {\n        // we have found a new data point that is closer to x\n        closestDataPoint = dataPoint;\n        minNumericalXDifference = numericalDifference;\n      }\n    }\n    return closestDataPoint;\n  }\n\n  /**\n   * Get the absolute value of the difference between the two numbers.\n   * @param x1 A number.\n   * @param x2 A number.\n   * @return The absolute value of the difference between the two numbers.\n   */\n  getNumericalAbsoluteDifference(x1, x2) {\n    return Math.abs(x1 - x2);\n  }\n\n  /**\n   * Get the x value from the data point.\n   * @param dataPoint An object or array.\n   * @return The x value of the data point.\n   */\n  getXFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[0];\n    }\n  }\n\n  /**\n   * Get the y value from the data point.\n   * @param dataPoint An object or array.\n   * @return The y value of the data point.\n   */\n  getYFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[1];\n    }\n  }\n\n  /**\n   * Set the series data into the table\n   * @param series an object that contains the data for a single series\n   * @param params the parameters for where to place the points in the table\n   */\n  setSeriesIntoTable(series, params) {\n\n    /*\n     * the default is set to not skip the first row and for the\n     * x column to be the first column and the y column to be the\n     * second column\n     */\n    var skipFirstRow = true;\n    var xColumn = 0;\n    var yColumn = 1;\n\n    if (params != null) {\n\n      if (params.skipFirstRow != null) {\n        // determine whether to skip the first row\n        skipFirstRow = params.skipFirstRow;\n      }\n\n      if (params.xColumn != null) {\n        // get the x column\n        xColumn = params.xColumn;\n      }\n\n      if (params.yColumn != null) {\n        // get the y column\n        yColumn = params.yColumn;\n      }\n    }\n\n    if (series != null) {\n\n      // get the table data rows\n      var tableDataRows = this.getTableDataRows();\n\n      // get the data from the series\n      var data = series.data;\n\n      if (data != null) {\n\n        // our counter for traversing the data rows\n        var dataRowCounter = 0;\n\n        // loop through all the table data rows\n        for (var r = 0; r < tableDataRows.length; r++) {\n\n          if (skipFirstRow && r === 0) {\n            // skip the first table data row\n            continue;\n          }\n\n          var x = '';\n          var y = '';\n\n          // get the data row\n          var dataRow = data[dataRowCounter];\n\n          if (dataRow != null) {\n            // get the x and y values from the data row\n            x = dataRow[0];\n            y = dataRow[1];\n          }\n\n          // set the x and y values into the table data\n          this.setTableDataCellValue(xColumn, r, null, x);\n          this.setTableDataCellValue(yColumn, r, null, y);\n\n          // increment the data row counter\n          dataRowCounter++;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the table data cell value\n   * @param x the x index (0 indexed)\n   * @param y the y index (0 indexed)\n   * @param value the value to set in the cell\n   */\n  setTableDataCellValue(x, y, table, value) {\n\n    var tableDataRows = table;\n\n    if (table == null) {\n      // get the table data rows\n      tableDataRows = this.getTableDataRows();\n    }\n\n    if (tableDataRows != null) {\n\n      // get the row we want\n      var row = tableDataRows[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cell.text = value;\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the value of a cell in the table\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @param table (optional) table data to get the value from. this is used\n   * when we want to look up the value in the default authored table\n   * @returns the cell value (text or a number)\n   */\n  getTableDataCellValue(x, y, table) {\n\n    var cellValue = null;\n\n    if (table == null) {\n      // get the table data rows\n      table = this.getTableDataRows();\n    }\n\n    if (table != null) {\n\n      // get the row we want\n      var row = table[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cellValue = cell.text;\n        }\n      }\n    }\n\n    return cellValue;\n  }\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the new component into the controller\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The author has changed the number of rows.\n   * @param oldValue The previous number of rows.\n   */\n  authoringViewTableNumRowsChanged(oldValue) {\n    if (this.authoringComponentContent.numRows < oldValue) {\n      // the author is reducing the number of rows\n      if (this.areRowsAfterEmpty(this.authoringComponentContent.numRows)) {\n        // the rows that we will delete are empty so we will remove the rows\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the rows that we will delete are not empty so we will confirm that\n         * they want to delete the rows\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numRows = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of rows\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the rows after the given index are empty.\n   * @param rowIndex The index of the row to start checking at. This value is zero indexed.\n   * @return {boolean} True if the row at the given index and all the rows after are empty.\n   * False if the row at the given index or any row after the row index is not empty.\n   */\n  areRowsAfterEmpty(rowIndex) {\n    let oldNumRows = this.authoringGetNumRowsInTableData();\n    for (let r = rowIndex; r < oldNumRows; r++) {\n      if (!this.isRowEmpty(r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a row has cells that are all empty string.\n   * @param rowIndex The row index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the row are empty string.\n   * False if the text in any cell in the row is not empty string.\n   */\n  isRowEmpty(rowIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    let row = tableData[rowIndex];\n    for (let cell of row) {\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The author has changed the number of columns.\n   * @param oldValue The previous number of columns.\n   */\n  authoringViewTableNumColumnsChanged(oldValue) {\n    if (this.authoringComponentContent.numColumns < oldValue) {\n      // the author is reducing the number of columns\n      if (this.areColumnsAfterEmpty(this.authoringComponentContent.numColumns)) {\n        // the columns that we will delete are empty so we will remove the columns\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the columns that we will delete are not empty so we will confirm that\n         * they want to delete the columns\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numColumns = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of columns\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the columns after the given index are empty.\n   * @param columnIndex The index of the column to start checking at. This value is zero indexed.\n   * @return {boolean} True if the column at the given index and all the columns after are empty.\n   * False if the column at the given index or any column after the column index is not empty.\n   */\n  areColumnsAfterEmpty(columnIndex) {\n    let oldNumColumns = this.authoringGetNumColumnsInTableData();\n    for (let c = columnIndex; c < oldNumColumns; c++) {\n      if (!this.isColumnEmpty(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a column has cells that are all empty string.\n   * @param columnIndex The column index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the column are empty string.\n   * False if the text in any cell in the column is not empty string.\n   */\n  isColumnEmpty(columnIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    for (let row of tableData) {\n      // loop through all the rows and check the cell in the column\n      let cell = row[columnIndex];\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The table size has changed in the authoring view so we will update it\n   */\n  authoringViewTableSizeChanged() {\n\n    // create a new table with the new size and populate it with the existing cells\n    var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n    // set the new table into the component content\n    this.authoringComponentContent.tableData = newTable;\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Create a table with the given dimensions. Populate the cells with\n   * the cells from the old table.\n   * @param newNumRows the number of rows in the new table\n   * @param newNumColumns the number of columns in the new table\n   * @returns a new table\n   */\n  getUpdatedTableSize(newNumRows, newNumColumns) {\n\n    var newTable = [];\n\n    // create the rows\n    for (var r = 0; r < newNumRows; r++) {\n\n      var newRow = [];\n\n      // create the columns\n      for (var c = 0; c < newNumColumns; c++) {\n\n        // try to get the cell from the old table\n        var cell = this.getCellObjectFromComponentContent(c, r);\n\n        if (cell == null) {\n          /*\n           * the old table does not have a cell for the given\n           * row/column location so we will create an empty cell\n           */\n          cell = this.createEmptyCell();\n        }\n\n        newRow.push(cell);\n      }\n\n      newTable.push(newRow);\n    }\n\n    return newTable;\n  }\n\n  /**\n   * Get the cell object at the given x, y location\n   * @param x the column number (zero indexed)\n   * @param y the row number (zero indexed)\n   * @returns the cell at the given x, y location or null if there is none\n   */\n  getCellObjectFromComponentContent(x, y) {\n    var cellObject = null;\n\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // get the row\n      var row = tableData[y];\n\n      if (row != null) {\n\n        // get the cell\n        cellObject = row[x];\n      }\n    }\n\n    return cellObject;\n  }\n\n  /**\n   * Create an empty cell\n   * @returns an empty cell object\n   */\n  createEmptyCell() {\n    var cell = {};\n\n    cell.text = '';\n    cell.editable = true;\n    cell.size = null;\n\n    return cell;\n  }\n\n  /**\n   * Insert a row into the table from the authoring view\n   * @param y the row number to insert at\n   */\n  authoringViewInsertRow(y) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // create the new row that we will insert\n      var newRow = [];\n\n      // get the number of columns\n      var numColumns = this.authoringComponentContent.numColumns;\n\n      // populate the new row with the correct number of cells\n      for (var c = 0; c < numColumns; c++) {\n        // create an empty cell\n        var newCell = this.createEmptyCell();\n\n        // get the column cell size\n        var cellSize = this.columnCellSizes[c];\n\n        if (cellSize != null) {\n          // set the cell size\n          newCell.size = cellSize;\n        }\n\n        newRow.push(newCell);\n      }\n\n      // insert the new row into the table\n      tableData.splice(y, 0, newRow);\n\n      // update the number of rows value\n      this.authoringComponentContent.numRows++;\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a row in the table from the authoring view\n   * @param y the row number to delete\n   */\n  authoringViewDeleteRow(y) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        // remove the row\n        tableData.splice(y, 1);\n\n        // update the number of rows value\n        this.authoringComponentContent.numRows--;\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Insert a column into the table from the authoring view\n   * @param x the column number to insert at\n   */\n  authoringViewInsertColumn(x) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      var numRows = this.authoringComponentContent.numRows;\n\n      // loop through all the rows\n      for (var r = 0; r < numRows; r++) {\n\n        // get a row\n        var tempRow = tableData[r];\n\n        if (tempRow != null) {\n\n          // create an empty cell\n          var newCell = this.createEmptyCell();\n\n          // insert the cell into the row\n          tempRow.splice(x, 0, newCell);\n        }\n      }\n\n      // update the number of columns value\n      this.authoringComponentContent.numColumns++;\n\n      // update the column cell sizes model\n      this.parseColumnCellSizes(this.authoringComponentContent);\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a column in the table from the authoring view\n   * @param x the column number to delete\n   */\n  authoringViewDeleteColumn(x) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        var numRows = this.authoringComponentContent.numRows;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n          // get a row\n          var tempRow = tableData[r];\n\n          if (tempRow != null) {\n\n            // remove the cell from the row\n            tempRow.splice(x, 1);\n          }\n        }\n\n        // update the number of columns value\n        this.authoringComponentContent.numColumns--;\n\n        // update the column cell sizes model\n        this.parseColumnCellSizes(this.authoringComponentContent);\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Get the number of rows in the table\n   * @returns the number of rows in the table\n   */\n  getNumRows() {\n    return this.componentContent.numRows;\n  }\n\n  /**\n   * Get the number of columns in the table\n   * @returns the number of columns in the table\n   */\n  getNumColumns() {\n    return this.componentContent.numColumns;\n  }\n\n  /**\n   * Get the number of rows in the table data. This is slightly different from\n   * just getting the numRows field in the component content. Usually the\n   * number of rows will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of rows using the number of rows input.\n   * @return {number} The number of rows in the table data.\n   */\n  authoringGetNumRowsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    return tableData.length;\n  }\n\n  /**\n   * Get the number of columns in the table data. This is slightly different from\n   * just getting the numColumns field in the component content. Usually the\n   * number of columns will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of columns using the number of columns input.\n   * @return {number} The number of columns in the table data.\n   */\n  authoringGetNumColumnsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    if (tableData.length > 0) {\n      // get the number of cells in the first row\n      return tableData[0].length;\n    }\n    return 0;\n  }\n\n  /**\n   * Check if the table is empty. The table is empty if all the\n   * cells are empty string.\n   * @returns whether the table is empty\n   */\n  isTableEmpty() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get a cell value\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        if (cellValue != null && cellValue != '') {\n          // the cell is not empty so the table is not empty\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the table is set to the default values. The table\n   * is set to the default values if all the cells match the\n   * values in the default authored table.\n   * @returns whether the table is set to the default values\n   */\n  isTableReset() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // get the default table\n    var defaultTable = this.componentContent.tableData;\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get the cell value from the student table\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        // get the cell value from the default table\n        var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n        if (cellValue != defaultCellValue) {\n          // the cell values do not match so the table is not set to the default values\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Snip the table by converting it to an image\n   * @param $event the click event\n   */\n  snipTable($event) {\n    // get the table element. this will obtain an array.\n    var tableElement = angular.element('#table_' + this.nodeId + '_' + this.componentId);\n\n    if (tableElement != null && tableElement.length > 0) {\n      // get the table element\n      tableElement = tableElement[0];\n\n      // convert the table element to a canvas element\n      html2canvas(tableElement).then((canvas) => {\n        // get the canvas as a base64 string\n        var img_b64 = canvas.toDataURL('image/png');\n\n        // get the image object\n        var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n        // create a notebook item with the image populated into it\n        this.NotebookService.addNote($event, imageObject);\n      });\n    }\n  }\n\n  /**\n   * Check whether we need to show the snip table button\n   * @return whether to show the snip table button\n   */\n  showSnipTableButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Copy the table data cell text from one component state to another\n   * @param fromComponentState get the cell text values from this component state\n   * @param toComponentState set the cell text values in this component state\n   */\n  copyTableDataCellText(fromComponentState, toComponentState) {\n\n    if (fromComponentState != null && toComponentState != null) {\n      var fromStudentData = fromComponentState.studentData;\n      var toStudentData = toComponentState.studentData;\n\n      if (fromStudentData != null && toStudentData != null) {\n        var fromTableData = fromStudentData.tableData;\n        var toTableData = toStudentData.tableData;\n\n        if (fromTableData != null & toTableData != null) {\n\n          // loop through all the rows\n          for (var y = 0; y < this.getNumRows(); y++) {\n\n            // loop through all the columns\n            for (var x = 0; x < this.getNumColumns(); x++) {\n\n              // get the cell value\n              var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n              if (cellValue != null) {\n                // set the cell value\n                this.setTableDataCellValue(x, y, toTableData, cellValue);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return toComponentState;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n      this.$rootScope.$broadcast('doneExiting');\n    }));\n  };\n\n  /**\n   * The show previous work checkbox was clicked\n   */\n  authoringShowPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.showPreviousWork) {\n      /*\n       * show previous work has been turned off so we will clear the\n       * show previous work node id, show previous work component id, and\n       * show previous work prompt values\n       */\n      this.authoringComponentContent.showPreviousWorkNodeId = null;\n      this.authoringComponentContent.showPreviousWorkComponentId = null;\n      this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The show previous work node id has changed\n   */\n  authoringShowPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n      this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n      /*\n       * the show previous work node id is null so we will also set the\n       * show previous component id to null\n       */\n      this.authoringComponentContent.showPreviousWorkComponentId = '';\n    } else {\n      this.authoringShowPreviousWorkNode = this.ProjectService.getNodeById(this.authoringComponentContent.showPreviousWorkNodeId);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The show previous work component id has changed\n   */\n  authoringShowPreviousWorkComponentIdChanged() {\n\n    // get the show previous work node id\n    var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n    // get the show previous work prompt boolean value\n    var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n    // get the old show previous work component id\n    var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component id\n    var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n    // get the new show previous work component\n    var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n    if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n      // the new show previous work component is empty\n\n      // save the component\n      this.authoringViewComponentChanged();\n    } else if (newShowPreviousWorkComponent != null) {\n\n      // get the current component type\n      var currentComponentType = this.componentContent.type;\n\n      // get the new component type\n      var newComponentType = newShowPreviousWorkComponent.type;\n\n      // check if the component types are different\n      if (newComponentType != currentComponentType) {\n        /*\n         * the component types are different so we will need to change\n         * the whole component\n         */\n\n        // make sure the author really wants to change the component type\n        var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n        if (answer) {\n          // the author wants to change the component type\n\n          /*\n           * get the component service so we can make a new instance\n           * of the component\n           */\n          var componentService = this.$injector.get(newComponentType + 'Service');\n\n          if (componentService != null) {\n\n            // create a new component\n            var newComponent = componentService.createComponent();\n\n            // set move over the values we need to keep\n            newComponent.id = this.authoringComponentContent.id;\n            newComponent.showPreviousWork = true;\n            newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n            newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n            newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n            /*\n             * update the authoring component content JSON string to\n             * change the component\n             */\n            this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n            // update the component in the project and save the project\n            this.advancedAuthoringViewComponentChanged();\n          }\n        } else {\n          /*\n           * the author does not want to change the component type so\n           * we will rollback the showPreviousWorkComponentId value\n           */\n          this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n        }\n      } else {\n        /*\n         * the component types are the same so we do not need to change\n         * the component type and can just save\n         */\n        this.authoringViewComponentChanged();\n      }\n    }\n  }\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The import previous work checkbox was clicked\n   */\n  authoringImportPreviousWorkClicked() {\n\n    if (!this.authoringComponentContent.importPreviousWork) {\n      /*\n       * import previous work has been turned off so we will clear the\n       * import previous work node id, and import previous work\n       * component id\n       */\n      this.authoringComponentContent.importPreviousWorkNodeId = null;\n      this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The import previous work node id has changed\n   */\n  authoringImportPreviousWorkNodeIdChanged() {\n\n    if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n      this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n      /*\n       * the import previous work node id is null so we will also set the\n       * import previous component id to null\n       */\n      this.authoringComponentContent.importPreviousWorkComponentId = '';\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The import previous work component id has changed\n   */\n  authoringImportPreviousWorkComponentIdChanged() {\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the import previous work node id\n   * @return the import previous work node id or null\n   */\n  getImportPreviousWorkNodeId() {\n    var importPreviousWorkNodeId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n      importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n      }\n    }\n\n    return importPreviousWorkNodeId;\n  }\n\n  /**\n   * Get the import previous work component id\n   * @return the import previous work component id or null\n   */\n  getImportPreviousWorkComponentId() {\n    var importPreviousWorkComponentId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n      var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n      }\n    }\n\n    return importPreviousWorkComponentId;\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells uneditable\n   */\n  makeAllCellsUneditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell uneditable\n              cell.editable = false;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells edtiable\n   */\n  makeAllCellsEditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell editable\n              cell.editable = true;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Parse the column cell sizes. We will get the column cell sizes by looking\n   * at size value of each column in the first row.\n   * @param componentContent the component content\n   */\n  parseColumnCellSizes(componentContent) {\n\n    var columnCellSizes = {};\n\n    if (componentContent != null) {\n\n      // get the table data\n      var tableData = componentContent.tableData;\n\n      if (tableData != null) {\n        var firstRow = tableData[0];\n\n        if (firstRow != null) {\n\n          // loop through all the columns\n          for (var x = 0; x < firstRow.length; x++) {\n\n            // get the cell object\n            var cell = firstRow[x];\n\n            /*\n             * get the cell size and set it into our mapping of\n             * column to cell size\n             */\n            columnCellSizes[x] = cell.size;\n          }\n        }\n      }\n    }\n\n    return columnCellSizes;\n  }\n\n  /**\n   * One of the column cell sizes has changed\n   */\n  authoringViewColumnSizeChanged(index) {\n\n    if (index != null) {\n      var cellSize = this.columnCellSizes[index];\n\n      if (cellSize == '') {\n        cellSize = null;\n      }\n\n      // set the cell size for all the cells in the column\n      this.authoringSetColumnCellSizes(index, cellSize);\n    }\n  }\n\n  /**\n   * Set the cell sizes for all the cells in a column\n   * @param column the column number\n   * @param size the cell size\n   */\n  authoringSetColumnCellSizes(column, size) {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // get the cell in the column\n          var cell = row[column];\n\n          if (cell != null) {\n            // set the cell size\n            cell.size = size;\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // create a blank component state without student work\n      var defaultComponentState = this.createBlankComponentState();\n\n      if (defaultComponentState != null && defaultComponentState.studentData != null) {\n        // set the authored component content table data into the component state\n        defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n      }\n\n      // copy the cell text values into the default component state\n      var mergedComponentState = this.copyTableDataCellText(componentStates[0], defaultComponentState);\n\n      /*\n       * Populate the component state into this component. For now we will\n       * only handle one component state from one connected component. In\n       * the future we may allow multiple component states from multiple\n       * connected components and merge the tables.\n       */\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nTableController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$injector',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentDataService',\n  'TableService',\n  'UtilService'\n];\n\nexport default TableController;\n"]}
=======
{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$injector","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","notebookConfig","getNotebookConfig","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","columnCellSizes","parseColumnCellSizes","id","tableId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","resetTable","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","setupTable","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","annotation","annotationNodeId","annotationComponentId","getNumber","num","array","Array","isNaN","parseInt","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","$broadcast","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","defaultComponentState","createBlankComponentState","mergedComponentState","copyTableDataCellText","studentAsset","params","trialIndex","seriesIndex","showDataAtMouseX","studentDataVersion","version","series","length","tempSeries","setSeriesIntoTable","trials","trial","multipleSeries","mouseOverPoints","x","latestMouseOverPoint","Math","round","xUnits","xAxis","units","yUnits","yAxis","xAxisTitle","title","yAxisTitle","removeAllCellsFromTableData","addTableDataRow","createTableRow","show","singleSeries","closestDataPoint","getClosestDataPoint","data","name","getXFromDataPoint","getYFromDataPoint","row","push","editable","size","columns","column","constructor","createTableCell","dataPoints","minNumericalXDifference","Infinity","dataPoint","dataPointX","numericalDifference","getNumericalAbsoluteDifference","x1","x2","abs","y","skipFirstRow","xColumn","yColumn","tableDataRows","getTableDataRows","dataRowCounter","r","dataRow","setTableDataCellValue","table","cell","cellValue","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","numRows","areRowsAfterEmpty","authoringViewTableSizeChanged","answer","confirm","rowIndex","oldNumRows","authoringGetNumRowsInTableData","isRowEmpty","numColumns","areColumnsAfterEmpty","columnIndex","oldNumColumns","authoringGetNumColumnsInTableData","c","isColumnEmpty","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","getCellObjectFromComponentContent","createEmptyCell","cellObject","newCell","cellSize","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","component","componentHasWork","html","removeAbsoluteAssetPaths","insertWISELinks","importWorkNodeId","importWorkComponentId","setShowSubmitButtonValue","firstRow","index","authoringSetColumnCellSizes","connectedComponents","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","numberOfAllowedComponents","allowedComponent","isConnectedComponentTypeAllowed","connectedComponentType","getComponentByNodeIdAndComponentId","tags","tag","a","allowedConnectedComponentType","jsonStringChanged","advancedAuthoringViewComponentChanged","$inject"],"mappings":"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","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n  constructor($anchorScroll,\n      $filter,\n      $injector,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentDataService,\n      TableService,\n      UtilService) {\n\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$location = $location;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.TableService = TableService;\n    this.UtilService = UtilService;\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    this.$translate = this.$filter('translate');\n\n    // the node id of the current node\n    this.nodeId = null;\n\n    // the component id\n    this.componentId = null;\n\n    // field that will hold the component content\n    this.componentContent = null;\n\n    // field that will hold the authoring component content\n    this.authoringComponentContent = null;\n\n    // whether the step should be disabled\n    this.isDisabled = false;\n\n    // whether the student work is dirty and needs saving\n    this.isDirty = false;\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // holds the the table data\n    this.tableData = null;\n\n    // whether this part is showing previous work\n    this.isShowPreviousWork = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    // whether students can attach files to their work\n    this.isStudentAttachmentEnabled = false;\n\n    // whether the prompt is shown or not\n    this.isPromptVisible = true;\n\n    // whether the save button is shown or not\n    this.isSaveButtonVisible = false;\n\n    // whether the submit button is shown or not\n    this.isSubmitButtonVisible = false;\n\n    // counter to keep track of the number of submits\n    this.submitCounter = 0;\n\n    // flag for whether to show the advanced authoring\n    this.showAdvancedAuthoring = false;\n\n    // whether the JSON authoring is displayed\n    this.showJSONAuthoring = false;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the reset table button is shown or not\n    this.isResetTableButtonVisible = true;\n\n    // whether the snip table button is shown or not\n    this.isSnipTableButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    // the options for when to update this component from a connected component\n    this.connectedComponentUpdateOnOptions = [\n      {\n        value: 'change',\n        text: 'Change'\n      },\n      {\n        value: 'submit',\n        text: 'Submit'\n      }\n    ];\n\n    // the component types we are allowed to connect to\n    this.allowedConnectedComponentTypes = [\n      {\n        type: 'Graph'\n      },\n      {\n        type: 'Table'\n      }\n    ];\n\n    this.nodeId = this.$scope.nodeId;\n\n    // get the component content from the scope\n    this.componentContent = this.$scope.componentContent;\n\n    // get the authoring component content\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n    this.mode = this.$scope.mode;\n\n    this.latestConnectedComponentState = null;\n    this.latestConnectedComponentParams = null;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    /*\n     * for the authoring view, get the cell sizes for each column if they\n     * have been customized\n     */\n    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n\n    if (this.componentContent != null) {\n\n      // get the component id\n      this.componentId = this.componentContent.id;\n      this.tableId = 'table_' + this.nodeId + '_' + this.componentId;\n\n      if (this.mode === 'student') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        this.isResetTableButtonVisible = true;\n      } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isSnipTableButtonVisible = false;\n        this.isDisabled = true;\n\n        if (this.mode === 'grading') {\n          // get the latest annotations\n          this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n        }\n      } else if (this.mode === 'onlyShowWork') {\n        this.isPromptVisible = false;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isSnipTableButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'showPreviousWork') {\n        this.isPromptVisible = true;\n        this.isSaveButtonVisible = false;\n        this.isSubmitButtonVisible = false;\n        this.isResetTableButtonVisible = false;\n        this.isDisabled = true;\n      } else if (this.mode === 'authoring') {\n        this.isSaveButtonVisible = this.componentContent.showSaveButton;\n        this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n        // generate the summernote rubric element id\n        this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n        // set the component rubric into the summernote rubric\n        this.summernoteRubricHTML = this.componentContent.rubric;\n\n        // the tooltip text for the insert WISE asset button\n        var insertAssetString = this.$translate('INSERT_ASSET');\n\n        /*\n         * create the custom button for inserting WISE assets into\n         * summernote\n         */\n        var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n        /*\n         * the options that specifies the tools to display in the\n         * summernote prompt\n         */\n        this.summernoteRubricOptions = {\n          toolbar: [\n            ['style', ['style']],\n            ['font', ['bold', 'underline', 'clear']],\n            ['fontname', ['fontname']],\n            ['fontsize', ['fontsize']],\n            ['color', ['color']],\n            ['para', ['ul', 'ol', 'paragraph']],\n            ['table', ['table']],\n            ['insert', ['link', 'video']],\n            ['view', ['fullscreen', 'codeview', 'help']],\n            ['customButton', ['insertAssetButton']]\n          ],\n          height: 300,\n          disableDragAndDrop: true,\n          buttons: {\n            insertAssetButton: InsertAssetButton\n          }\n        };\n\n        this.updateAdvancedAuthoringView();\n\n        $scope.$watch(function() {\n          return this.authoringComponentContent;\n        }.bind(this), function(newValue, oldValue) {\n\n          /*\n           * reset the values so that the preview is refreshed with\n           * the new content\n           */\n          this.submitCounter = 0;\n          this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n          this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n          this.isSaveButtonVisible = this.componentContent.showSaveButton;\n          this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n          this.resetTable();\n        }.bind(this), true);\n      }\n\n      var componentState = null;\n\n      // get the component state from the scope\n      componentState = this.$scope.componentState;\n\n      // set whether studentAttachment is enabled\n      this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n      if (this.mode == 'student') {\n        if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n          // we will show work from another component\n          this.handleConnectedComponents();\n        }  else if (this.TableService.componentStateHasStudentWork(componentState, this.componentContent)) {\n          /*\n           * the student has work so we will populate the work into this\n           * component\n           */\n          this.setStudentWork(componentState);\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          // we will import work from another component\n          this.handleConnectedComponents();\n        } else if (componentState == null) {\n          // check if we need to import work\n\n          var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n          var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n          if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n          } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            /*\n             * the student does not have any work and there are connected\n             * components so we will get the work from the connected\n             * components\n             */\n            this.handleConnectedComponents();\n          }\n        }\n      } else {\n        // populate the student work into this component\n        this.setStudentWork(componentState);\n      }\n\n      // set up the table\n      this.setupTable();\n\n      // check if the student has used up all of their submits\n      if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n        /*\n         * the student has used up all of their chances to submit so we\n         * will disable the submit button\n         */\n        this.isSubmitButtonDisabled = true;\n      }\n\n      // check if we need to lock this component\n      this.calculateDisabled();\n\n      if (this.$scope.$parent.nodeController != null) {\n        // register this component with the parent node\n        this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n      }\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the component state from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n      if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n        if (connectedComponentParams.updateOn === 'change') {\n\n        }\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        /*\n         * make a copy of the component state so we don't accidentally\n         * change any values in the referenced object\n         */\n        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n        if (componentType === 'Table') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Graph') {\n\n          // set the graph data into the table\n          this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Embedded') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        }\n      }\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.tableController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.tableController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.tableController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * The parent node submit button was clicked\n     */\n    this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n      // get the node id of the node\n      var nodeId = args.nodeId;\n\n      // make sure the node id matches our parent node\n      if (this.nodeId === nodeId) {\n\n        // trigger the submit\n        var submitTriggeredBy = 'nodeSubmitButton';\n        this.submit(submitTriggeredBy);\n      }\n    }));\n\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n\n      // check if the component state is from a connected component\n      if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n        // get the connected component params\n        var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n        if (connectedComponentParams != null) {\n\n          if (connectedComponentParams.updateOn === 'save' ||\n            (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n            var performUpdate = false;\n\n            /*\n             * make a copy of the component state so we don't accidentally\n             * change any values in the referenced object\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n            /*\n             * make sure the student hasn't entered any values into the\n             * table so that we don't overwrite any of their work.\n             */\n            if (this.isTableEmpty() || this.isTableReset()) {\n              /*\n               * the student has not entered any values into the table\n               * so we can update it\n               */\n              performUpdate = true;\n            } else {\n              /*\n               * the student has entered values into the table so we\n               * will ask them if they want to update it\n               */\n              /*\n              var answer = confirm('Do you want to update the connected table?');\n\n              if (answer) {\n                // the student answered yes\n                performUpdate = true;\n              }\n              */\n              performUpdate = true;\n            }\n\n            if (performUpdate) {\n              // set the table data\n              this.$scope.tableController.setStudentWork(componentState);\n\n              // the table has changed\n              this.$scope.tableController.isDirty = true;\n              this.$scope.tableController.isSubmitDirty = true;\n            }\n\n            /*\n             * remember the component state and connected component params\n             * in case we need to use them again later\n             */\n            this.latestConnectedComponentState = componentState;\n            this.latestConnectedComponentParams = connectedComponentParams;\n          }\n        }\n      }\n    }));\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n      if (args != null ) {\n\n        // get the annotation that was saved to the server\n        var annotation = args.annotation;\n\n        if (annotation != null) {\n\n          // get the node id and component id of the annotation\n          var annotationNodeId = annotation.nodeId;\n          var annotationComponentId = annotation.componentId;\n\n          // make sure the annotation was for this component\n          if (this.nodeId === annotationNodeId &&\n            this.componentId === annotationComponentId) {\n\n            // get latest score and comment annotations for this component\n            this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    this.$scope.getNumber = function(num) {\n      var array = new Array();\n\n      // make sure num is a valid number\n      if (num != null && !isNaN(num)) {\n        array = new Array(parseInt(num));\n      }\n\n      return array;\n    }\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n\n      if (args != null) {\n\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n          // the asset was selected for this component\n          var assetItem = args.assetItem;\n\n          if (assetItem != null) {\n            var fileName = assetItem.fileName;\n\n            if (fileName != null) {\n              /*\n               * get the assets directory path\n               * e.g.\n               * /wise/curriculum/3/\n               */\n              var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n              var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n              var summernoteId = '';\n\n              if (args.target == 'prompt') {\n                // the target is the summernote prompt element\n                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n              } else if (args.target == 'rubric') {\n                // the target is the summernote rubric element\n                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n              }\n\n              if (summernoteId != '') {\n                if (this.UtilService.isImage(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // add the image html\n                  $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                } else if (this.UtilService.isVideo(fileName)) {\n                  /*\n                   * move the cursor back to its position when the asset chooser\n                   * popup was clicked\n                   */\n                  $('#' + summernoteId).summernote('editor.restoreRange');\n                  $('#' + summernoteId).summernote('editor.focus');\n\n                  // insert the video element\n                  var videoElement = document.createElement('video');\n                  videoElement.controls = 'true';\n                  videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                  $('#' + summernoteId).summernote('insertNode', videoElement);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    /*\n     * The advanced button for a component was clicked. If the button was\n     * for this component, we will show the advanced authoring.\n     */\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (args != null) {\n        let componentId = args.componentId;\n        if (this.componentId === componentId) {\n          this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        }\n      }\n    });\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Get a copy of the table data\n   * @param tableData the table data to copy\n   * @return a copy of the table data\n   */\n  getCopyOfTableData(tableData) {\n    var tableDataCopy = null;\n\n    if (tableData != null) {\n      // create a JSON string from the table data\n      var tableDataJSONString = JSON.stringify(tableData);\n\n      // create a JSON object from the table data string\n      var tableDataJSON = JSON.parse(tableDataJSONString);\n\n      tableDataCopy = tableDataJSON;\n    }\n\n    return tableDataCopy;\n  };\n\n  /**\n   * Setup the table\n   */\n  setupTable() {\n\n    if (this.tableData == null) {\n      /*\n       * the student does not have any table data so we will use\n       * the table data from the component content\n       */\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n    }\n  };\n\n  /**\n   * Reset the table data to its initial state from the component content\n   */\n  resetTable() {\n\n    var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n    var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      // this component imports work so we will import the work again\n      this.handleConnectedComponents();\n    } else if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n      // import the work from the other component\n      this.importWork();\n    } else {\n      // get the original table from the step content\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n      // the table has changed so we will perform additional processing\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Get the rows of the table data\n   */\n  getTableDataRows() {\n    return this.tableData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // set the table into the controller\n        this.tableData = studentData.tableData;\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        // set save message\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node that this component wants to save\n    this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // trigger the submit\n    var submitTriggeredBy = 'componentSubmitButton';\n    this.submit(submitTriggeredBy);\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n\n        // increment the submit counter\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Increment the submit counter\n   */\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  lockIfNecessary() {\n    // check if we need to lock the component after the student submits\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  };\n\n  /**\n   * Called when the student changes their work\n   */\n  studentDataChanged() {\n    /*\n     * set the dirty flag so we will know we need to save the\n     * student work later\n     */\n    this.isDirty = true;\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.isSubmitDirty = true;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n    // clear out the save message\n    this.setSaveMessage('', null);\n\n    // get this part id\n    var componentId = this.getComponentId();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    var action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    // insert the table data\n    studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Table';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Create a new component state with no student data\n   * @return a component state with no student data\n   */\n  createBlankComponentState() {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n      var studentData = {};\n\n      // set the student data into the component state\n      componentState.studentData = studentData;\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Check if we need to lock the component\n   */\n  calculateDisabled() {\n\n    var nodeId = this.nodeId;\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      // check if the parent has set this component to disabled\n      if (componentContent.isDisabled) {\n        this.isDisabled = true;\n      } else if (componentContent.lockAfterSubmit) {\n        // we need to lock the step after the student has submitted\n\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        // check if any of the component states were submitted\n        var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n        if (isSubmitted) {\n          // the student has submitted work for this component\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Check whether we need to show the reset table button\n   * @return whether to show the reset table button\n   */\n  showResetTableButton() {\n    return this.isResetTableButtonVisible;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    var result = false;\n\n    if (this.componentContent != null) {\n\n      // check the lockAfterSubmit field in the component content\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the prompt to show to the student\n   */\n  getPrompt() {\n    var prompt = null;\n\n    if (this.originalComponentContent != null) {\n      // this is a show previous work component\n\n      if (this.originalComponentContent.showPreviousWorkPrompt) {\n        // show the prompt from the previous work component\n        prompt = this.componentContent.prompt;\n      } else {\n        // show the prompt from the original component\n        prompt = this.originalComponentContent.prompt;\n      }\n    } else if (this.componentContent != null) {\n      prompt = this.componentContent.prompt;\n    }\n\n    return prompt;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n      var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state from the component we are importing from\n        var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n        if (importWorkComponentState != null) {\n\n          // create a blank component state without student work\n          var defaultComponentState = this.createBlankComponentState();\n\n          if (defaultComponentState != null && defaultComponentState.studentData != null) {\n            // set the authored component content table data into the component state\n            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n          }\n\n          // copy the cell text values into the default component state\n          var mergedComponentState = this.copyTableDataCellText(importWorkComponentState, defaultComponentState);\n\n          // set the merged component state into this component\n          this.setStudentWork(mergedComponentState);\n\n          // make the work dirty so that it gets saved\n          this.studentDataChanged();\n        }\n      }\n    }\n  };\n\n  /**\n   * handle importing notebook item data (we only support csv for now)\n   */\n  attachStudentAsset(studentAsset) {\n    // TODO: implement me\n  };\n\n  /**\n   * Set the graph data into the table data\n   * @param componentState the component state to get the graph data from\n   * @param params (optional) the params to specify what columns\n   * and rows to overwrite in the table data\n   */\n  setGraphDataIntoTableData(componentState, params) {\n\n    var trialIndex = 0;\n    var seriesIndex = 0;\n\n    if (params != null) {\n\n      if (params.trialIndex != null) {\n        // get the trial index\n        trialIndex = params.trialIndex;\n      }\n\n      if (params.seriesIndex != null) {\n        // get the series index\n        seriesIndex = params.seriesIndex;\n      }\n\n      if (params.showDataAtMouseX) {\n        this.showDataAtMouseX(componentState, params);\n        return;\n      }\n    }\n\n    if (componentState != null && componentState.studentData != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      // get the student data version\n      var studentDataVersion = studentData.version;\n\n      if (studentDataVersion == null || studentDataVersion == 1) {\n        // this is the old student data format that can't contain trials\n\n        // get the series\n        var series = studentData.series;\n\n        if (series != null && series.length > 0) {\n\n          // get the series that we will get data from\n          var tempSeries = series[seriesIndex];\n\n          // set the series data into the table\n          this.setSeriesIntoTable(tempSeries);\n        }\n      } else {\n        // this is the new student data format that can contain trials\n\n        // get all the trials\n        var trials = studentData.trials;\n\n        if (trials != null) {\n\n          // get the specific trial we want\n          var trial = trials[trialIndex];\n\n          if (trial != null) {\n\n            // get the series in the trial\n            var multipleSeries = trial.series;\n\n            if (multipleSeries != null) {\n\n              // get the specific series we want\n              var series = multipleSeries[seriesIndex];\n\n              // set the series data into the table\n              this.setSeriesIntoTable(series);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Show the data at x for all the series.\n   * @param componentState The Graph component state.\n   * @param params The connected component params.\n   */\n  showDataAtMouseX(componentState, params) {\n    let studentData = componentState.studentData;\n    let mouseOverPoints = studentData.mouseOverPoints;\n    let x = null;\n\n    // get the x value from the latest mouse over point\n    if (mouseOverPoints != null && mouseOverPoints.length > 0) {\n      let latestMouseOverPoint = mouseOverPoints[mouseOverPoints.length - 1];\n      x = Math.round(latestMouseOverPoint[0]);\n    }\n    let xUnits = studentData.xAxis.units;\n    let yUnits = studentData.yAxis.units;\n    let xAxisTitle = studentData.xAxis.title.text;\n    let yAxisTitle = studentData.yAxis.title.text;\n    this.removeAllCellsFromTableData();\n    this.addTableDataRow(this.createTableRow(['Series Name', xAxisTitle, yAxisTitle]));\n    for (let trial of studentData.trials) {\n      if (trial.show) {\n        let multipleSeries = trial.series;\n        for (let singleSeries of multipleSeries) {\n          if (singleSeries.show !== false) {\n            let closestDataPoint = this.getClosestDataPoint(singleSeries.data, x);\n            if (closestDataPoint != null) {\n              this.addTableDataRow(this.createTableRow([singleSeries.name,\n                  Math.round(this.getXFromDataPoint(closestDataPoint)) + ' ' + xUnits,\n                  Math.round(this.getYFromDataPoint(closestDataPoint)) + ' ' + yUnits]));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all the rows and cells from the table data.\n   */\n  removeAllCellsFromTableData() {\n    this.tableData = [];\n  }\n\n  /**\n   * Append a row to the table data.\n   * @param row An array of objects. Each object represents a cell in the table.\n   */\n  addTableDataRow(row) {\n    this.tableData.push(row);\n  }\n\n  /**\n   * Create a cell object.\n   * @param text The text to show in the cell.\n   * @param editable Whether the student is allowed to edit the contents in the\n   * cell.\n   * @param size The with of the cell.\n   * @return An object.\n   */\n  createTableCell(text = '', editable = false, size = null) {\n    return { text: text, editable: editable, size: size };\n  }\n\n  /**\n   * Create a row.\n   * @param columns An array of strings or objects.\n   * @return An array of objects.\n   */\n  createTableRow(columns) {\n    let row = [];\n    for (let column of columns) {\n      if (column.constructor.name == 'String') {\n        row.push(this.createTableCell(column));\n      } else if (column.constructor.name == 'Object') {\n        row.push(this.createTableCell(column.text, column.editable, column.size));\n      }\n    }\n    return row;\n  }\n\n  /**\n   * Get the data point that has the closest x value to the given argument x.\n   * @param dataPoints An array of data points. Each data point can be an object\n   * or an array.\n   * @param x The argument x.\n   * @return A data point which can be an object or array.\n   */\n  getClosestDataPoint(dataPoints, x) {\n    let closestDataPoint = null;\n    let minNumericalXDifference = Infinity;\n    for (let dataPoint of dataPoints) {\n      let dataPointX = this.getXFromDataPoint(dataPoint);\n      let numericalDifference = this.getNumericalAbsoluteDifference(x, dataPointX);\n      if (numericalDifference < minNumericalXDifference) {\n        // we have found a new data point that is closer to x\n        closestDataPoint = dataPoint;\n        minNumericalXDifference = numericalDifference;\n      }\n    }\n    return closestDataPoint;\n  }\n\n  /**\n   * Get the absolute value of the difference between the two numbers.\n   * @param x1 A number.\n   * @param x2 A number.\n   * @return The absolute value of the difference between the two numbers.\n   */\n  getNumericalAbsoluteDifference(x1, x2) {\n    return Math.abs(x1 - x2);\n  }\n\n  /**\n   * Get the x value from the data point.\n   * @param dataPoint An object or array.\n   * @return The x value of the data point.\n   */\n  getXFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[0];\n    }\n  }\n\n  /**\n   * Get the y value from the data point.\n   * @param dataPoint An object or array.\n   * @return The y value of the data point.\n   */\n  getYFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[1];\n    }\n  }\n\n  /**\n   * Set the series data into the table\n   * @param series an object that contains the data for a single series\n   * @param params the parameters for where to place the points in the table\n   */\n  setSeriesIntoTable(series, params) {\n\n    /*\n     * the default is set to not skip the first row and for the\n     * x column to be the first column and the y column to be the\n     * second column\n     */\n    var skipFirstRow = true;\n    var xColumn = 0;\n    var yColumn = 1;\n\n    if (params != null) {\n\n      if (params.skipFirstRow != null) {\n        // determine whether to skip the first row\n        skipFirstRow = params.skipFirstRow;\n      }\n\n      if (params.xColumn != null) {\n        // get the x column\n        xColumn = params.xColumn;\n      }\n\n      if (params.yColumn != null) {\n        // get the y column\n        yColumn = params.yColumn;\n      }\n    }\n\n    if (series != null) {\n\n      // get the table data rows\n      var tableDataRows = this.getTableDataRows();\n\n      // get the data from the series\n      var data = series.data;\n\n      if (data != null) {\n\n        // our counter for traversing the data rows\n        var dataRowCounter = 0;\n\n        // loop through all the table data rows\n        for (var r = 0; r < tableDataRows.length; r++) {\n\n          if (skipFirstRow && r === 0) {\n            // skip the first table data row\n            continue;\n          }\n\n          var x = '';\n          var y = '';\n\n          // get the data row\n          var dataRow = data[dataRowCounter];\n\n          if (dataRow != null) {\n            // get the x and y values from the data row\n            x = dataRow[0];\n            y = dataRow[1];\n          }\n\n          // set the x and y values into the table data\n          this.setTableDataCellValue(xColumn, r, null, x);\n          this.setTableDataCellValue(yColumn, r, null, y);\n\n          // increment the data row counter\n          dataRowCounter++;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the table data cell value\n   * @param x the x index (0 indexed)\n   * @param y the y index (0 indexed)\n   * @param value the value to set in the cell\n   */\n  setTableDataCellValue(x, y, table, value) {\n\n    var tableDataRows = table;\n\n    if (table == null) {\n      // get the table data rows\n      tableDataRows = this.getTableDataRows();\n    }\n\n    if (tableDataRows != null) {\n\n      // get the row we want\n      var row = tableDataRows[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cell.text = value;\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the value of a cell in the table\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @param table (optional) table data to get the value from. this is used\n   * when we want to look up the value in the default authored table\n   * @returns the cell value (text or a number)\n   */\n  getTableDataCellValue(x, y, table) {\n\n    var cellValue = null;\n\n    if (table == null) {\n      // get the table data rows\n      table = this.getTableDataRows();\n    }\n\n    if (table != null) {\n\n      // get the row we want\n      var row = table[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cellValue = cell.text;\n        }\n      }\n    }\n\n    return cellValue;\n  }\n\n  /**\n   * Get the component id\n   * @return the component id\n   */\n  getComponentId() {\n    return this.componentContent.id;\n  };\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n      this.authoringComponentContent = authoringComponentContent;\n\n      // set the new component into the controller\n      this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The author has changed the number of rows.\n   * @param oldValue The previous number of rows.\n   */\n  authoringViewTableNumRowsChanged(oldValue) {\n    if (this.authoringComponentContent.numRows < oldValue) {\n      // the author is reducing the number of rows\n      if (this.areRowsAfterEmpty(this.authoringComponentContent.numRows)) {\n        // the rows that we will delete are empty so we will remove the rows\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the rows that we will delete are not empty so we will confirm that\n         * they want to delete the rows\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numRows = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of rows\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the rows after the given index are empty.\n   * @param rowIndex The index of the row to start checking at. This value is zero indexed.\n   * @return {boolean} True if the row at the given index and all the rows after are empty.\n   * False if the row at the given index or any row after the row index is not empty.\n   */\n  areRowsAfterEmpty(rowIndex) {\n    let oldNumRows = this.authoringGetNumRowsInTableData();\n    for (let r = rowIndex; r < oldNumRows; r++) {\n      if (!this.isRowEmpty(r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a row has cells that are all empty string.\n   * @param rowIndex The row index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the row are empty string.\n   * False if the text in any cell in the row is not empty string.\n   */\n  isRowEmpty(rowIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    let row = tableData[rowIndex];\n    for (let cell of row) {\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The author has changed the number of columns.\n   * @param oldValue The previous number of columns.\n   */\n  authoringViewTableNumColumnsChanged(oldValue) {\n    if (this.authoringComponentContent.numColumns < oldValue) {\n      // the author is reducing the number of columns\n      if (this.areColumnsAfterEmpty(this.authoringComponentContent.numColumns)) {\n        // the columns that we will delete are empty so we will remove the columns\n        this.authoringViewTableSizeChanged();\n      } else {\n        /*\n         * the columns that we will delete are not empty so we will confirm that\n         * they want to delete the columns\n         */\n        let answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n        if (answer) {\n          // author confirms yes, proceed with change\n          this.authoringViewTableSizeChanged();\n        } else {\n          // author says no, so revert\n          this.authoringComponentContent.numColumns = oldValue;\n        }\n      }\n    } else {\n      // the author is increasing the number of columns\n      this.authoringViewTableSizeChanged();\n    }\n  }\n\n  /**\n   * Determine if the columns after the given index are empty.\n   * @param columnIndex The index of the column to start checking at. This value is zero indexed.\n   * @return {boolean} True if the column at the given index and all the columns after are empty.\n   * False if the column at the given index or any column after the column index is not empty.\n   */\n  areColumnsAfterEmpty(columnIndex) {\n    let oldNumColumns = this.authoringGetNumColumnsInTableData();\n    for (let c = columnIndex; c < oldNumColumns; c++) {\n      if (!this.isColumnEmpty(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine if a column has cells that are all empty string.\n   * @param columnIndex The column index. This value is zero indexed.\n   * @returns {boolean} True if the text in all the cells in the column are empty string.\n   * False if the text in any cell in the column is not empty string.\n   */\n  isColumnEmpty(columnIndex) {\n    let tableData = this.authoringComponentContent.tableData;\n    for (let row of tableData) {\n      // loop through all the rows and check the cell in the column\n      let cell = row[columnIndex];\n      if (cell.text != null && cell.text != \"\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * The table size has changed in the authoring view so we will update it\n   */\n  authoringViewTableSizeChanged() {\n\n    // create a new table with the new size and populate it with the existing cells\n    var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n    // set the new table into the component content\n    this.authoringComponentContent.tableData = newTable;\n\n    // perform preview updating and project saving\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Create a table with the given dimensions. Populate the cells with\n   * the cells from the old table.\n   * @param newNumRows the number of rows in the new table\n   * @param newNumColumns the number of columns in the new table\n   * @returns a new table\n   */\n  getUpdatedTableSize(newNumRows, newNumColumns) {\n\n    var newTable = [];\n\n    // create the rows\n    for (var r = 0; r < newNumRows; r++) {\n\n      var newRow = [];\n\n      // create the columns\n      for (var c = 0; c < newNumColumns; c++) {\n\n        // try to get the cell from the old table\n        var cell = this.getCellObjectFromComponentContent(c, r);\n\n        if (cell == null) {\n          /*\n           * the old table does not have a cell for the given\n           * row/column location so we will create an empty cell\n           */\n          cell = this.createEmptyCell();\n        }\n\n        newRow.push(cell);\n      }\n\n      newTable.push(newRow);\n    }\n\n    return newTable;\n  }\n\n  /**\n   * Get the cell object at the given x, y location\n   * @param x the column number (zero indexed)\n   * @param y the row number (zero indexed)\n   * @returns the cell at the given x, y location or null if there is none\n   */\n  getCellObjectFromComponentContent(x, y) {\n    var cellObject = null;\n\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // get the row\n      var row = tableData[y];\n\n      if (row != null) {\n\n        // get the cell\n        cellObject = row[x];\n      }\n    }\n\n    return cellObject;\n  }\n\n  /**\n   * Create an empty cell\n   * @returns an empty cell object\n   */\n  createEmptyCell() {\n    var cell = {};\n\n    cell.text = '';\n    cell.editable = true;\n    cell.size = null;\n\n    return cell;\n  }\n\n  /**\n   * Insert a row into the table from the authoring view\n   * @param y the row number to insert at\n   */\n  authoringViewInsertRow(y) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // create the new row that we will insert\n      var newRow = [];\n\n      // get the number of columns\n      var numColumns = this.authoringComponentContent.numColumns;\n\n      // populate the new row with the correct number of cells\n      for (var c = 0; c < numColumns; c++) {\n        // create an empty cell\n        var newCell = this.createEmptyCell();\n\n        // get the column cell size\n        var cellSize = this.columnCellSizes[c];\n\n        if (cellSize != null) {\n          // set the cell size\n          newCell.size = cellSize;\n        }\n\n        newRow.push(newCell);\n      }\n\n      // insert the new row into the table\n      tableData.splice(y, 0, newRow);\n\n      // update the number of rows value\n      this.authoringComponentContent.numRows++;\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a row in the table from the authoring view\n   * @param y the row number to delete\n   */\n  authoringViewDeleteRow(y) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        // remove the row\n        tableData.splice(y, 1);\n\n        // update the number of rows value\n        this.authoringComponentContent.numRows--;\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Insert a column into the table from the authoring view\n   * @param x the column number to insert at\n   */\n  authoringViewInsertColumn(x) {\n\n    // get the table\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      var numRows = this.authoringComponentContent.numRows;\n\n      // loop through all the rows\n      for (var r = 0; r < numRows; r++) {\n\n        // get a row\n        var tempRow = tableData[r];\n\n        if (tempRow != null) {\n\n          // create an empty cell\n          var newCell = this.createEmptyCell();\n\n          // insert the cell into the row\n          tempRow.splice(x, 0, newCell);\n        }\n      }\n\n      // update the number of columns value\n      this.authoringComponentContent.numColumns++;\n\n      // update the column cell sizes model\n      this.parseColumnCellSizes(this.authoringComponentContent);\n    }\n\n    // save the project and update the preview\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a column in the table from the authoring view\n   * @param x the column number to delete\n   */\n  authoringViewDeleteColumn(x) {\n\n    var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n    if (answer) {\n      // get the table\n      var tableData = this.authoringComponentContent.tableData;\n\n      if (tableData != null) {\n\n        var numRows = this.authoringComponentContent.numRows;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n          // get a row\n          var tempRow = tableData[r];\n\n          if (tempRow != null) {\n\n            // remove the cell from the row\n            tempRow.splice(x, 1);\n          }\n        }\n\n        // update the number of columns value\n        this.authoringComponentContent.numColumns--;\n\n        // update the column cell sizes model\n        this.parseColumnCellSizes(this.authoringComponentContent);\n      }\n\n      // save the project and update the preview\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns all the step node ids\n   */\n  getStepNodeIds() {\n    var stepNodeIds = this.ProjectService.getNodeIds();\n\n    return stepNodeIds;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId get the step number and title for this node\n   * @returns the step number and title\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n    return nodePositionAndTitle;\n  }\n\n  /**\n   * Get the components in a step\n   * @param nodeId get the components in the step\n   * @returns the components in the step\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n    return components;\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param nodeId the node id to check\n   * @returns whether the node is an application node\n   */\n  isApplicationNode(nodeId) {\n    var result = this.ProjectService.isApplicationNode(nodeId);\n\n    return result;\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Get the number of rows in the table\n   * @returns the number of rows in the table\n   */\n  getNumRows() {\n    return this.componentContent.numRows;\n  }\n\n  /**\n   * Get the number of columns in the table\n   * @returns the number of columns in the table\n   */\n  getNumColumns() {\n    return this.componentContent.numColumns;\n  }\n\n  /**\n   * Get the number of rows in the table data. This is slightly different from\n   * just getting the numRows field in the component content. Usually the\n   * number of rows will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of rows using the number of rows input.\n   * @return {number} The number of rows in the table data.\n   */\n  authoringGetNumRowsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    return tableData.length;\n  }\n\n  /**\n   * Get the number of columns in the table data. This is slightly different from\n   * just getting the numColumns field in the component content. Usually the\n   * number of columns will be the same. In some cases it can be different\n   * such as during authoring immediately after the author changes the number\n   * of columns using the number of columns input.\n   * @return {number} The number of columns in the table data.\n   */\n  authoringGetNumColumnsInTableData() {\n    let tableData = this.authoringComponentContent.tableData;\n    if (tableData.length > 0) {\n      // get the number of cells in the first row\n      return tableData[0].length;\n    }\n    return 0;\n  }\n\n  /**\n   * Check if the table is empty. The table is empty if all the\n   * cells are empty string.\n   * @returns whether the table is empty\n   */\n  isTableEmpty() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get a cell value\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        if (cellValue != null && cellValue != '') {\n          // the cell is not empty so the table is not empty\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the table is set to the default values. The table\n   * is set to the default values if all the cells match the\n   * values in the default authored table.\n   * @returns whether the table is set to the default values\n   */\n  isTableReset() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // get the default table\n    var defaultTable = this.componentContent.tableData;\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get the cell value from the student table\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        // get the cell value from the default table\n        var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n        if (cellValue != defaultCellValue) {\n          // the cell values do not match so the table is not set to the default values\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Snip the table by converting it to an image\n   * @param $event the click event\n   */\n  snipTable($event) {\n    // get the table element. this will obtain an array.\n    var tableElement = angular.element('#table_' + this.nodeId + '_' + this.componentId);\n\n    if (tableElement != null && tableElement.length > 0) {\n      // get the table element\n      tableElement = tableElement[0];\n\n      // convert the table element to a canvas element\n      html2canvas(tableElement).then((canvas) => {\n        // get the canvas as a base64 string\n        var img_b64 = canvas.toDataURL('image/png');\n\n        // get the image object\n        var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n        // create a notebook item with the image populated into it\n        this.NotebookService.addNewItem($event, imageObject);\n      });\n    }\n  }\n\n  /**\n   * Check whether we need to show the snip table button\n   * @return whether to show the snip table button\n   */\n  showSnipTableButton() {\n    if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Copy the table data cell text from one component state to another\n   * @param fromComponentState get the cell text values from this component state\n   * @param toComponentState set the cell text values in this component state\n   */\n  copyTableDataCellText(fromComponentState, toComponentState) {\n\n    if (fromComponentState != null && toComponentState != null) {\n      var fromStudentData = fromComponentState.studentData;\n      var toStudentData = toComponentState.studentData;\n\n      if (fromStudentData != null && toStudentData != null) {\n        var fromTableData = fromStudentData.tableData;\n        var toTableData = toStudentData.tableData;\n\n        if (fromTableData != null & toTableData != null) {\n\n          // loop through all the rows\n          for (var y = 0; y < this.getNumRows(); y++) {\n\n            // loop through all the columns\n            for (var x = 0; x < this.getNumColumns(); x++) {\n\n              // get the cell value\n              var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n              if (cellValue != null) {\n                // set the cell value\n                this.setTableDataCellValue(x, y, toTableData, cellValue);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return toComponentState;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n      this.$rootScope.$broadcast('doneExiting');\n    }));\n  };\n\n  /**\n   * Check if a component generates student work\n   * @param component the component\n   * @return whether the component generates student work\n   */\n  componentHasWork(component) {\n    var result = true;\n\n    if (component != null) {\n      result = this.ProjectService.componentHasWork(component);\n    }\n\n    return result;\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    var html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Get the import previous work node id\n   * @return the import previous work node id or null\n   */\n  getImportPreviousWorkNodeId() {\n    var importPreviousWorkNodeId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n      importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n      }\n    }\n\n    return importPreviousWorkNodeId;\n  }\n\n  /**\n   * Get the import previous work component id\n   * @return the import previous work component id or null\n   */\n  getImportPreviousWorkComponentId() {\n    var importPreviousWorkComponentId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n      var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n      }\n    }\n\n    return importPreviousWorkComponentId;\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells uneditable\n   */\n  makeAllCellsUneditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell uneditable\n              cell.editable = false;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Make all the cells edtiable\n   */\n  makeAllCellsEditable() {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // loop through all the cells in the row\n          for (var c = 0; c < row.length; c++) {\n\n            // get a cell\n            var cell = row[c];\n\n            if (cell != null) {\n\n              // make the cell editable\n              cell.editable = true;\n            }\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Parse the column cell sizes. We will get the column cell sizes by looking\n   * at size value of each column in the first row.\n   * @param componentContent the component content\n   */\n  parseColumnCellSizes(componentContent) {\n\n    var columnCellSizes = {};\n\n    if (componentContent != null) {\n\n      // get the table data\n      var tableData = componentContent.tableData;\n\n      if (tableData != null) {\n        var firstRow = tableData[0];\n\n        if (firstRow != null) {\n\n          // loop through all the columns\n          for (var x = 0; x < firstRow.length; x++) {\n\n            // get the cell object\n            var cell = firstRow[x];\n\n            /*\n             * get the cell size and set it into our mapping of\n             * column to cell size\n             */\n            columnCellSizes[x] = cell.size;\n          }\n        }\n      }\n    }\n\n    return columnCellSizes;\n  }\n\n  /**\n   * One of the column cell sizes has changed\n   */\n  authoringViewColumnSizeChanged(index) {\n\n    if (index != null) {\n      var cellSize = this.columnCellSizes[index];\n\n      if (cellSize == '') {\n        cellSize = null;\n      }\n\n      // set the cell size for all the cells in the column\n      this.authoringSetColumnCellSizes(index, cellSize);\n    }\n  }\n\n  /**\n   * Set the cell sizes for all the cells in a column\n   * @param column the column number\n   * @param size the cell size\n   */\n  authoringSetColumnCellSizes(column, size) {\n\n    // get the table data\n    var tableData = this.authoringComponentContent.tableData;\n\n    if (tableData != null) {\n\n      // loop through all the rows\n      for (var r = 0; r < tableData.length; r++) {\n        var row = tableData[r];\n\n        if (row != null) {\n\n          // get the cell in the column\n          var cell = row[column];\n\n          if (cell != null) {\n            // set the cell size\n            cell.size = size;\n          }\n        }\n      }\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Import any work we need from connected components\n   */\n  handleConnectedComponents() {\n\n    // get the connected components\n    var connectedComponents = this.componentContent.connectedComponents;\n\n    if (connectedComponents != null) {\n\n      var componentStates = [];\n\n      // loop through all the connected components\n      for (var c = 0; c < connectedComponents.length; c++) {\n        var connectedComponent = connectedComponents[c];\n\n        if (connectedComponent != null) {\n          var nodeId = connectedComponent.nodeId;\n          var componentId = connectedComponent.componentId;\n          var type = connectedComponent.type;\n\n          if (type == 'showWork') {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n\n            // we are showing work so we will not allow the student to edit it\n            this.isDisabled = true;\n          } else if (type == 'importWork' || type == null) {\n            // we are getting the work from this student\n\n            // get the latest component state from the component\n            var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n            if (componentState != null) {\n              componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n            }\n          }\n        }\n      }\n\n      // create a blank component state without student work\n      var defaultComponentState = this.createBlankComponentState();\n\n      if (defaultComponentState != null && defaultComponentState.studentData != null) {\n        // set the authored component content table data into the component state\n        defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n      }\n\n      // copy the cell text values into the default component state\n      var mergedComponentState = this.copyTableDataCellText(componentStates[0], defaultComponentState);\n\n      /*\n       * Populate the component state into this component. For now we will\n       * only handle one component state from one connected component. In\n       * the future we may allow multiple component states from multiple\n       * connected components and merge the tables.\n       */\n      this.setStudentWork(mergedComponentState);\n\n      // make the work dirty so that it gets saved\n      this.studentDataChanged();\n    }\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n                component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Add a tag\n   */\n  addTag() {\n\n    if (this.authoringComponentContent.tags == null) {\n      // initialize the tags array\n      this.authoringComponentContent.tags = [];\n    }\n\n    // add a tag\n    this.authoringComponentContent.tags.push('');\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index back\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n\n      // remember the tag\n      let tag = this.authoringComponentContent.tags[index];\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n\n      // insert the tag one index forward\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Delete a tag\n   * @param index the index of the tag to delete\n   */\n  deleteTag(index) {\n\n    // ask the author if they are sure they want to delete the tag\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n    if (answer) {\n      // the author answered yes to delete the tag\n\n      // remove the tag\n      this.authoringComponentContent.tags.splice(index, 1);\n    }\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n}\n\nTableController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$injector',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentDataService',\n  'TableService',\n  'UtilService'\n];\n\nexport default TableController;\n"]}
>>>>>>> develop
