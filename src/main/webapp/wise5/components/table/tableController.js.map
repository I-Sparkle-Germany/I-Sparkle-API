{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$location","$q","$rootScope","$scope","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","currentNode","getCurrentNode","id","authoringComponentContentJSONString","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","$parent","nodeController","getLatestComponentAnnotations","componentState","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","setupTable","calculateDisabled","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","type","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","bind","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","getNumber","num","array","Array","isNaN","parseInt","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","params","skipFirstRow","xColumn","yColumn","seriesIndex","tableDataRows","getTableDataRows","data","series","length","tempSeries","dataRowCounter","r","x","y","dataRow","setTableDataCellValue","table","value","row","cell","cellValue","updateAdvancedAuthoringView","toJson","advancedAuthoringViewComponentChanged","fromJson","replaceComponent","nodeAuthoringController","authoringViewNodeChanged","e","rowOrColumn","oldValue","numRows","answer","confirm","authoringViewTableSizeChanged","numColumns","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","c","getCellObjectFromComponentContent","createEmptyCell","push","cellObject","editable","size","newCell","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","message","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","hideIFrames","hash","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","showIFrames","catch","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","$broadcast","$inject"],"mappings":"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","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n    constructor($anchorScroll,\n                $location,\n                $q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService,\n                TableService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // whether the snip table button is shown or not\n        this.isSnipTableButtonVisible = true;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n        this.authoringComponentContentJSONString = this.$scope.authoringComponentContentJSONString;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                // check if we need to import work.\n                // only import work if the student does not already have\n                // work for this component\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // set up the table\n            this.setupTable();\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                if (connectedComponentParams.updateOn === 'change') {\n                    // get the component type that has changed\n                    var componentType = connectedComponent.type;\n\n                    /*\n                     * make a copy of the component state so we don't accidentally\n                     * change any values in the referenced object\n                     */\n                    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                    if (componentType === 'Table') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Graph') {\n\n                        // set the graph data into the table\n                        this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Embedded') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.tableController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.tableController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.tableController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * make sure the student hasn't entered any values into the\n                         * table so that we don't overwrite any of their work.\n                         */\n                        if (this.isTableEmpty() || this.isTableReset()) {\n                            /*\n                             * the student has not entered any values into the table\n                             * so we can update it\n                             */\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has entered values into the table so we\n                             * will ask them if they want to update it\n                             */\n                            /*\n                            var answer = confirm('Do you want to update the connected table?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                            */\n                            performUpdate = true;\n                        }\n\n                        if (performUpdate) {\n                            // set the table data\n                            this.$scope.tableController.setStudentWork(componentState);\n\n                            // the table has changed\n                            this.$scope.tableController.isDirty = true;\n                            this.$scope.tableController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            var array = new Array();\n\n            // make sure num is a valid number\n            if (num != null && !isNaN(num)) {\n                array = new Array(parseInt(num));\n            }\n\n            return array;\n        }\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n\n        // get the original table from the step content\n        this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n        // the table has changed so we will perform additional processing\n        this.studentDataChanged();\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the table data\n            studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.TableService.populateComponentState(importWorkComponentState);\n\n                        /*\n                        // create a component state with no table data\n                        var defaultComponentState = this.createComponentState();\n\n                        if (defaultComponentState != null && defaultComponentState.studentData != null) {\n                            // set the authored component content table data into the component state\n                            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n                        }\n\n                        // copy the cell text values into the default component state\n                        var mergedComponentState = this.copyTableDataCellText(populatedComponentState, defaultComponentState);\n                        */\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachStudentAsset(studentAsset) {\n        // TODO: implement me\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            if (tableDataRows != null) {\n\n                var data = null;\n\n                var studentData = componentState.studentData;\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    if (tempSeries != null) {\n\n                        // get the data from the series\n                        data = tempSeries.data;\n\n                        if (data != null) {\n\n                            // our counter for traversing the data rows\n                            var dataRowCounter = 0;\n\n                            // loop through all the table data rows\n                            for (var r = 0; r < tableDataRows.length; r++) {\n\n                                if (skipFirstRow && r === 0) {\n                                    // skip the first table data row\n                                    continue;\n                                }\n\n                                var x = '';\n                                var y = '';\n\n                                // get the data row\n                                var dataRow = data[dataRowCounter];\n\n                                if (dataRow != null) {\n                                    // get the x and y values from the data row\n                                    x = dataRow[0];\n                                    y = dataRow[1];\n\n                                }\n\n                                // set the x and y values into the table data\n                                this.setTableDataCellValue(xColumn, r, null, x);\n                                this.setTableDataCellValue(yColumn, r, null, y);\n\n                                // increment the data row counter\n                                dataRowCounter++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, table, value) {\n\n        var tableDataRows = table;\n\n        if (table == null) {\n            // get the table data rows\n            tableDataRows = this.getTableDataRows();\n        }\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the value of a cell in the table\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param table (optional) table data to get the value from. this is used\n     * when we want to look up the value in the default authored table\n     * @returns the cell value (text or a number)\n     */\n    getTableDataCellValue(x, y, table) {\n\n        var cellValue = null;\n\n        if (table == null) {\n            // get the table data rows\n            table = this.getTableDataRows();\n        }\n\n        if (table != null) {\n\n            // get the row we want\n            var row = table[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cellValue = cell.text;\n                }\n            }\n        }\n\n        return cellValue;\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n        this.advancedAuthoringViewComponentChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            // set the new component into the controller\n            this.componentContent = authoringComponentContent;\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Confirm whether user really want to change row/column size. Only confirm if they're decreasing the size.\n     */\n    authoringViewTableSizeConfirmChange(rowOrColumn, oldValue) {\n        if (rowOrColumn === 'rows') {\n            if (this.authoringComponentContent.numRows < oldValue) {\n                // author wants to decrease number of rows, so confirm\n                var answer = confirm('Are you sure you want to decrease number of ' + rowOrColumn + '?');\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numRows = oldValue;\n                }\n            } else {\n                // author wants to increase number of rows, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        } else if (rowOrColumn === 'columns') {\n            if (this.authoringComponentContent.numColumns < oldValue) {\n                // author wants to decrease number of columns, so confirm\n                var answer = confirm('Are you sure you want to decrease number of ' + rowOrColumn + '?');\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numColumns = oldValue;\n                }\n            } else {\n                // author wants to increase number of columns, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        }\n    }\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the number of rows in the table\n     * @returns the number of rows in the table\n     */\n    getNumRows() {\n        return this.componentContent.numRows;\n    }\n\n    /**\n     * Get the number of columns in the table\n     * @returns the number of columns in the table\n     */\n    getNumColumns() {\n        return this.componentContent.numColumns;\n    }\n\n    /**\n     * Check if the table is empty. The table is empty if all the\n     * cells are empty string.\n     * @returns whether the table is empty\n     */\n    isTableEmpty() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get a cell value\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                if (cellValue != null && cellValue != '') {\n                    // the cell is not empty so the table is not empty\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the table is set to the default values. The table\n     * is set to the default values if all the cells match the\n     * values in the default authored table.\n     * @returns whether the table is set to the default values\n     */\n    isTableReset() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // get the default table\n        var defaultTable = this.componentContent.tableData;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get the cell value from the student table\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                // get the cell value from the default table\n                var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n                if (cellValue != defaultCellValue) {\n                    // the cell values do not match so the table is not set to the default values\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Snip the table by converting it to an image\n     * @param $event the click event\n     */\n    snipTable($event) {\n\n        // get the table element. this will obtain an array.\n        var tableElement = angular.element('#' + this.componentId + ' table');\n\n        if (tableElement != null && tableElement.length > 0) {\n\n            // hide all the iframes otherwise html2canvas may cut off the table\n            this.UtilService.hideIFrames();\n\n            // scroll to the component so html2canvas doesn't cut off the table\n            this.$location.hash(this.componentId);\n            this.$anchorScroll();\n\n            // get the table element\n            tableElement = tableElement[0];\n\n            try {\n                // convert the table element to a canvas element\n                html2canvas(tableElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n\n                    // we are done capturing the table so we will show the iframes again\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                }).catch(() => {\n\n                    /*\n                     * an error occurred while trying to capture the table so we\n                     * will show the iframes again\n                     */\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                });\n            } catch(e) {\n\n                /*\n                 * an error occurred while trying to capture the table so we\n                 * will show the iframes again\n                 */\n                this.UtilService.showIFrames();\n\n                /*\n                 * scroll to the component in case the view has shifted after\n                 * showing the iframe\n                 */\n                this.$location.hash(this.componentId);\n                this.$anchorScroll();\n            }\n\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip table button\n     * @return whether to show the snip table button\n     */\n    showSnipTableButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Copy the table data cell text from one component state to another\n     * @param fromComponentState get the cell text values from this component state\n     * @param toComponentState set the cell text values in this component state\n     */\n    copyTableDataCellText(fromComponentState, toComponentState) {\n\n        if (fromComponentState != null && toComponentState != null) {\n            var fromStudentData = fromComponentState.studentData;\n            var toStudentData = toComponentState.studentData;\n\n            if (fromStudentData != null && toStudentData != null) {\n                var fromTableData = fromStudentData.tableData;\n                var toTableData = toStudentData.tableData;\n\n                if (fromTableData != null & toTableData != null) {\n\n                    // loop through all the rows\n                    for (var y = 0; y < this.getNumRows(); y++) {\n\n                        // loop through all the columns\n                        for (var x = 0; x < this.getNumColumns(); x++) {\n\n                            // get the cell value\n                            var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n                            // set the cell value\n                            this.setTableDataCellValue(x, y, toTableData, cellValue);\n                        }\n                    }\n                }\n            }\n        }\n\n        return toComponentState;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nTableController.$inject = [\n    '$anchorScroll',\n    '$location',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService',\n    'UtilService'\n];\n\nexport default TableController;\n"]}