{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$injector","$location","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","showAdvancedAuthoring","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","notebookConfig","getNotebookConfig","currentNode","getCurrentNode","id","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","showSaveButton","showSubmitButton","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","summernoteRubricOptions","height","disableDragAndDrop","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","resetTable","componentState","importPreviousWorkNodeId","importPreviousWorkComponentId","importWorkNodeId","importWorkComponentId","importWork","setStudentWork","setupTable","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","type","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","submit","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","annotation","annotationNodeId","annotationComponentId","getNumber","num","array","Array","isNaN","parseInt","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","populatedComponentState","populateComponentState","studentAsset","params","skipFirstRow","xColumn","yColumn","seriesIndex","tableDataRows","getTableDataRows","data","series","length","tempSeries","dataRowCounter","r","x","y","dataRow","setTableDataCellValue","table","value","row","cell","cellValue","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","rowOrColumn","numRows","answer","confirm","authoringViewTableSizeChanged","numColumns","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","c","getCellObjectFromComponentContent","createEmptyCell","push","cellObject","editable","size","newCell","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","message","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","hideIFrames","hash","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","showIFrames","catch","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","$broadcast","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringShowPreviousWorkNode","getNodeById","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,e;AACF,6BAAYC,aAAZ,EACYC,OADZ,EAEYC,SAFZ,EAGYC,SAHZ,EAIYC,EAJZ,EAKYC,UALZ,EAMYC,MANZ,EAOYC,iBAPZ,EAQYC,aARZ,EASYC,WATZ,EAUYC,eAVZ,EAWYC,cAXZ,EAYYC,kBAZZ,EAaYC,YAbZ,EAcYC,WAdZ,EAcyB;AAAA;;AAAA;;AAErB,aAAKd,aAAL,GAAqBA,aAArB;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,SAAL,GAAiB,KAAKJ,cAAL,CAAoBI,SAArC;;AAEA,aAAKC,UAAL,GAAkB,KAAKf,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKgB,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAKC,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAKC,OAAL,GAAe,KAAf;;AAEA;AACA,aAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAKC,WAAL,GAAmB;AACfC,kBAAM,EADS;AAEfC,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAKC,SAAL,GAAiB,IAAjB;;AAEA;AACA,aAAKC,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAKC,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,wBAAL,GAAgC,IAAhC;;AAEA;AACA,aAAKC,cAAL,GAAsB,KAAK5B,eAAL,CAAqB6B,iBAArB,EAAtB;;AAEA;AACA,YAAIC,cAAc,KAAK5B,kBAAL,CAAwB6B,cAAxB,EAAlB;AACA,YAAID,eAAe,IAAnB,EAAyB;AACrB,iBAAKvB,MAAL,GAAcuB,YAAYE,EAA1B;AACH,SAFD,MAEO;AACH,iBAAKzB,MAAL,GAAc,KAAKX,MAAL,CAAYW,MAA1B;AACH;;AAED;AACA,aAAKE,gBAAL,GAAwB,KAAKb,MAAL,CAAYa,gBAApC;;AAEA;AACA,aAAKC,yBAAL,GAAiC,KAAKd,MAAL,CAAYc,yBAA7C;;AAEA;;;;AAIA,aAAKuB,wBAAL,GAAgC,KAAKrC,MAAL,CAAYqC,wBAA5C;;AAEA;AACA,aAAKC,IAAL,GAAY,KAAKtC,MAAL,CAAYsC,IAAxB;;AAEA,aAAKC,6BAAL,GAAqC,IAArC;AACA,aAAKC,8BAAL,GAAsC,IAAtC;;AAEA,aAAKC,WAAL,GAAmB,KAAKzC,MAAL,CAAYyC,WAA/B;AACA,aAAKC,kBAAL,GAA0B,KAAK1C,MAAL,CAAY0C,kBAAtC;;AAEA,YAAI,KAAK7B,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAKD,WAAL,GAAmB,KAAKC,gBAAL,CAAsBuB,EAAzC;;AAEA,gBAAI,KAAKE,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAKb,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAAKb,gBAAL,CAAsB8B,cAAjD;AACA,qBAAKhB,qBAAL,GAA6B,KAAKd,gBAAL,CAAsB+B,gBAAnD;;AAEA;AACA,qBAAKf,iBAAL,GAAyB,KAAK5B,iBAAL,CAAuB4C,6BAAvB,CAAqD,KAAKlC,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK6B,WAAzF,CAAzB;AACA,qBAAKX,yBAAL,GAAiC,IAAjC;AACH,aARD,MAQO,IAAI,KAAKQ,IAAL,KAAc,SAAlB,EAA6B;AAChC,qBAAKb,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKG,yBAAL,GAAiC,KAAjC;AACA,qBAAKC,wBAAL,GAAgC,KAAhC;AACA,qBAAKhB,UAAL,GAAkB,IAAlB;;AAEA;AACA,qBAAKc,iBAAL,GAAyB,KAAK5B,iBAAL,CAAuB4C,6BAAvB,CAAqD,KAAKlC,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAK6B,WAAzF,CAAzB;AACH,aAVM,MAUA,IAAI,KAAKH,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAKb,eAAL,GAAuB,KAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKG,yBAAL,GAAiC,KAAjC;AACA,qBAAKC,wBAAL,GAAgC,KAAhC;AACA,qBAAKhB,UAAL,GAAkB,IAAlB;AACH,aAPM,MAOA,IAAI,KAAKuB,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAKb,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKG,yBAAL,GAAiC,KAAjC;AACA,qBAAKf,UAAL,GAAkB,IAAlB;AACH,aANM,MAMA,IAAI,KAAKuB,IAAL,KAAc,WAAlB,EAA+B;AAClC;AACA,qBAAKQ,kBAAL,GAA0B,sBAAsB,KAAKnC,MAA3B,GAAoC,GAApC,GAA0C,KAAKC,WAAzE;;AAEA;AACA,qBAAKmC,oBAAL,GAA4B,KAAKlC,gBAAL,CAAsBmC,MAAlD;;AAEA;AACA,qBAAKC,uBAAL,GAA+B;AAC3BC,4BAAQ,GADmB;AAE3BC,wCAAoB;AAFO,iBAA/B;;AAKA,qBAAKC,2BAAL;;AAEApD,uBAAOqD,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAKvC,yBAAZ;AACH,iBAFa,CAEZwC,IAFY,CAEP,IAFO,CAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACvC,yBAAK3C,gBAAL,GAAwB,KAAKR,cAAL,CAAoBoD,gBAApB,CAAqCF,QAArC,CAAxB;AACA,yBAAKG,UAAL;AACH,iBAHa,CAGZJ,IAHY,CAGP,IAHO,CAFd,EAKc,IALd;AAMH;;AAED,gBAAIK,iBAAiB,IAArB;;AAEA;AACAA,6BAAiB,KAAK3D,MAAL,CAAY2D,cAA7B;;AAEA;AACA,iBAAKnC,0BAAL,GAAkC,KAAKX,gBAAL,CAAsBW,0BAAxD;;AAEA,gBAAImC,kBAAkB,IAAtB,EAA4B;AACxB;;AAEA,oBAAIC,2BAA2B,KAAK/C,gBAAL,CAAsB+C,wBAArD;AACA,oBAAIC,gCAAgC,KAAKhD,gBAAL,CAAsBgD,6BAA1D;;AAEA,oBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;AACpE;;;;AAIAA,+CAA2B,KAAK/C,gBAAL,CAAsBiD,gBAAjD;AACH;;AAED,oBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;AAC9E;;;;AAIAA,oDAAgC,KAAKhD,gBAAL,CAAsBkD,qBAAtD;AACH;;AAED,oBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;AAC3E;AACA,yBAAKG,UAAL;AACH;AACJ,aA1BD,MA0BO;AACH;AACA,qBAAKC,cAAL,CAAoBN,cAApB;AACH;;AAED;AACA,iBAAKO,UAAL;;AAEA;AACA,iBAAKC,iBAAL;;AAEA,gBAAI,KAAKnE,MAAL,CAAYoE,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC5C;AACA,qBAAKrE,MAAL,CAAYoE,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,KAAKtE,MAApE,EAA4E,KAAKa,gBAAjF;AACH;AACJ;;AAED;;;;;;;;AAQA,aAAKb,MAAL,CAAYuE,0CAAZ,GAAyD,UAASC,kBAAT,EAA6BC,wBAA7B,EAAuDd,cAAvD,EAAuE;;AAE5H,gBAAIa,sBAAsB,IAAtB,IAA8BC,4BAA4B,IAA1D,IAAkEd,kBAAkB,IAAxF,EAA8F;;AAE1F,oBAAIc,yBAAyBC,QAAzB,KAAsC,QAA1C,EAAoD;AAChD;AACA,wBAAIC,gBAAgBH,mBAAmBI,IAAvC;;AAEA;;;;AAIAjB,qCAAiB,KAAKnD,WAAL,CAAiBqE,oBAAjB,CAAsClB,cAAtC,CAAjB;;AAEA,wBAAIgB,kBAAkB,OAAtB,EAA+B;;AAE3B;AACA,6BAAK3E,MAAL,CAAY8E,eAAZ,CAA4Bb,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,6BAAK3D,MAAL,CAAY8E,eAAZ,CAA4B9D,OAA5B,GAAsC,IAAtC;AACH,qBAPD,MAOO,IAAI2D,kBAAkB,OAAtB,EAA+B;;AAElC;AACA,6BAAK3E,MAAL,CAAY8E,eAAZ,CAA4BC,yBAA5B,CAAsDpB,cAAtD,EAAsEc,wBAAtE;;AAEA;AACA,6BAAKzE,MAAL,CAAY8E,eAAZ,CAA4B9D,OAA5B,GAAsC,IAAtC;AACH,qBAPM,MAOA,IAAI2D,kBAAkB,UAAtB,EAAkC;;AAErC;AACA,6BAAK3E,MAAL,CAAY8E,eAAZ,CAA4Bb,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,6BAAK3D,MAAL,CAAY8E,eAAZ,CAA4B9D,OAA5B,GAAsC,IAAtC;AACH;AACJ;AACJ;AACJ,SAtCwD,CAsCvDsC,IAtCuD,CAsClD,IAtCkD,CAAzD;;AAwCA;;;;;;;;AAQA,aAAKtD,MAAL,CAAYgF,iBAAZ,GAAgC,UAASzD,QAAT,EAAmB;AAC/C,gBAAI0D,WAAW,KAAKnF,EAAL,CAAQoF,KAAR,EAAf;AACA,gBAAIC,WAAW,KAAf;AACA,gBAAIC,SAAS,QAAb;;AAEA,gBAAI7D,QAAJ,EAAc;AACV,oBAAI,KAAKvB,MAAL,CAAY8E,eAAZ,CAA4B7D,aAAhC,EAA+C;AAC3CkE,+BAAW,IAAX;AACAC,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAKpF,MAAL,CAAY8E,eAAZ,CAA4B9D,OAAhC,EAAyC;AACrCmE,+BAAW,IAAX;AACAC,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAID,QAAJ,EAAc;AACV;AACA,qBAAKnF,MAAL,CAAY8E,eAAZ,CAA4BO,oBAA5B,CAAiDD,MAAjD,EAAyDE,IAAzD,CAA8D,UAAC3B,cAAD,EAAoB;AAC9EsB,6BAASM,OAAT,CAAiB5B,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKAsB,yBAASM,OAAT;AACH;;AAED,mBAAON,SAASO,OAAhB;AACH,SAhC+B,CAgC9BlC,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAKtD,MAAL,CAAYyF,GAAZ,CAAgB,mBAAhB,EAAqCC,QAAQpC,IAAR,CAAa,IAAb,EAAmB,UAASqC,KAAT,EAAgBC,IAAhB,EAAsB;;AAE1E;AACA,gBAAIjF,SAASiF,KAAKjF,MAAlB;;AAEA;AACA,gBAAI,KAAKA,MAAL,KAAgBA,MAApB,EAA4B;AACxB,qBAAKY,QAAL,GAAgB,IAAhB;AACH;AACJ,SAToC,CAArC;;AAWA;;;;AAIA,aAAKvB,MAAL,CAAYyF,GAAZ,CAAgB,0BAAhB,EAA4CC,QAAQpC,IAAR,CAAa,IAAb,EAAmB,UAASqC,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,gBAAIjC,iBAAiBiC,KAAKC,WAA1B;;AAEA;AACA,gBAAIlC,kBAAkB,KAAKhD,MAAL,KAAgBgD,eAAehD,MAAjD,IACG,KAAKC,WAAL,KAAqB+C,eAAe/C,WAD3C,EACwD;;AAEpD;AACA,qBAAKI,OAAL,GAAe,KAAf;AACA,qBAAKhB,MAAL,CAAY8F,KAAZ,CAAkB,gBAAlB,EAAoC,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAApC;;AAEA,oBAAI+E,aAAapC,eAAeoC,UAAhC;AACA,oBAAIxE,WAAWoC,eAAepC,QAA9B;AACA,oBAAIyE,iBAAiBrC,eAAeqC,cAApC;AACA,oBAAIC,iBAAiB,KAAK/F,aAAL,CAAmBgG,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA;AACA,oBAAIzE,QAAJ,EAAc;AACV,yBAAK4E,cAAL,CAAoB,KAAKzF,UAAL,CAAgB,WAAhB,CAApB,EAAkDuF,cAAlD;;AAEA,yBAAKG,MAAL;;AAEA;AACA,yBAAKnF,aAAL,GAAqB,KAArB;AACA,yBAAKjB,MAAL,CAAY8F,KAAZ,CAAkB,sBAAlB,EAA0C,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAI+E,UAAJ,EAAgB;AACnB,yBAAKI,cAAL,CAAoB,KAAKzF,UAAL,CAAgB,YAAhB,CAApB,EAAmDuF,cAAnD;AACH,iBAFM,MAEA;AACH,yBAAKE,cAAL,CAAoB,KAAKzF,UAAL,CAAgB,OAAhB,CAApB,EAA8CuF,cAA9C;AACH;AACJ;;AAED;AACA,gBAAI,KAAK5F,cAAL,CAAoBgG,oBAApB,CAAyC,KAAK1F,MAA9C,EAAsD,KAAKC,WAA3D,EAAwE+C,eAAe/C,WAAvF,CAAJ,EAAyG;;AAErG;AACA,oBAAI6D,2BAA2B,KAAKpE,cAAL,CAAoBiG,2BAApB,CAAgD,KAAKzF,gBAArD,EAAuE8C,eAAe/C,WAAtF,CAA/B;;AAEA,oBAAI6D,4BAA4B,IAAhC,EAAsC;;AAElC,wBAAIA,yBAAyBC,QAAzB,KAAsC,MAAtC,IACCD,yBAAyBC,QAAzB,KAAsC,QAAtC,IAAkDf,eAAepC,QADtE,EACiF;;AAE7E,4BAAIgF,gBAAgB,KAApB;;AAEA;;;;AAIA5C,yCAAiB,KAAKnD,WAAL,CAAiBqE,oBAAjB,CAAsClB,cAAtC,CAAjB;;AAEA;;;;AAIA,4BAAI,KAAK6C,YAAL,MAAuB,KAAKC,YAAL,EAA3B,EAAgD;AAC5C;;;;AAIAF,4CAAgB,IAAhB;AACH,yBAND,MAMO;AACH;;;;AAIA;;;;;;;AAQAA,4CAAgB,IAAhB;AACH;;AAED,4BAAIA,aAAJ,EAAmB;AACf;AACA,iCAAKvG,MAAL,CAAY8E,eAAZ,CAA4Bb,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,iCAAK3D,MAAL,CAAY8E,eAAZ,CAA4B9D,OAA5B,GAAsC,IAAtC;AACA,iCAAKhB,MAAL,CAAY8E,eAAZ,CAA4B7D,aAA5B,GAA4C,IAA5C;AACH;;AAED;;;;AAIA,6BAAKsB,6BAAL,GAAqCoB,cAArC;AACA,6BAAKnB,8BAAL,GAAsCiC,wBAAtC;AACH;AACJ;AACJ;AACJ,SAhG2C,CAA5C;;AAkGA;;;;AAIA,aAAKzE,MAAL,CAAYyF,GAAZ,CAAgB,yBAAhB,EAA2C,UAACE,KAAD,EAAQC,IAAR,EAAiB;;AAExD,gBAAIA,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAIc,aAAad,KAAKc,UAAtB;;AAEA,oBAAIA,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAIC,mBAAmBD,WAAW/F,MAAlC;AACA,wBAAIiG,wBAAwBF,WAAW9F,WAAvC;;AAEA;AACA,wBAAI,MAAKD,MAAL,KAAgBgG,gBAAhB,IACA,MAAK/F,WAAL,KAAqBgG,qBADzB,EACgD;;AAE5C;AACA,8BAAK/E,iBAAL,GAAyB,MAAK5B,iBAAL,CAAuB4C,6BAAvB,CAAqD,MAAKlC,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAK6B,WAAzF,CAAzB;AACH;AACJ;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAKzC,MAAL,CAAYyF,GAAZ,CAAgB,UAAhB,EAA4BC,QAAQpC,IAAR,CAAa,IAAb,EAAmB,UAASqC,KAAT,EAAgBC,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;;AAIA,aAAK5F,MAAL,CAAY6G,SAAZ,GAAwB,UAASC,GAAT,EAAc;AAClC,gBAAIC,QAAQ,IAAIC,KAAJ,EAAZ;;AAEA;AACA,gBAAIF,OAAO,IAAP,IAAe,CAACG,MAAMH,GAAN,CAApB,EAAgC;AAC5BC,wBAAQ,IAAIC,KAAJ,CAAUE,SAASJ,GAAT,CAAV,CAAR;AACH;;AAED,mBAAOC,KAAP;AACH,SATD;AAUH;;AAED;;;;;;;;;2CAKmB1F,S,EAAW;AAC1B,gBAAI8F,gBAAgB,IAApB;;AAEA,gBAAI9F,aAAa,IAAjB,EAAuB;AACnB;AACA,oBAAI+F,sBAAsBC,KAAKC,SAAL,CAAejG,SAAf,CAA1B;;AAEA;AACA,oBAAIkG,gBAAgBF,KAAKG,KAAL,CAAWJ,mBAAX,CAApB;;AAEAD,gCAAgBI,aAAhB;AACH;;AAED,mBAAOJ,aAAP;AACH;;;;;AAED;;;qCAGa;;AAET,gBAAI,KAAK9F,SAAL,IAAkB,IAAtB,EAA4B;AACxB;;;;AAIA,qBAAKA,SAAL,GAAiB,KAAKoG,kBAAL,CAAwB,KAAK5G,gBAAL,CAAsBQ,SAA9C,CAAjB;AACH;AACJ;;;;;AAED;;;qCAGa;;AAET;AACA,iBAAKA,SAAL,GAAiB,KAAKoG,kBAAL,CAAwB,KAAK5G,gBAAL,CAAsBQ,SAA9C,CAAjB;;AAEA;AACA,iBAAKqG,kBAAL;AACH;;;;;AAED;;;2CAGmB;AACf,mBAAO,KAAKrG,SAAZ;AACH;;;;;AAED;;;;uCAIesC,c,EAAgB;;AAE3B,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,oBAAIgE,cAAchE,eAAegE,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;AACrB;AACA,yBAAKtG,SAAL,GAAiBsG,YAAYtG,SAA7B;;AAEA,yBAAKuG,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAIC,cAAc,KAAKvH,kBAAL,CAAwBwH,6CAAxB,CAAsE,KAAKnH,MAA3E,EAAmF,KAAKC,WAAxF,CAAlB;;AAEA,gBAAIiH,WAAJ,EAAiB;AACb,oBAAI7B,iBAAiB6B,YAAY7B,cAAjC;AACA,oBAAIC,iBAAiB,KAAK/F,aAAL,CAAmBgG,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,oBAAI6B,YAAYtG,QAAhB,EAA0B;AACtB;AACA,yBAAKN,aAAL,GAAqB,KAArB;AACA,yBAAKjB,MAAL,CAAY8F,KAAZ,CAAkB,sBAAlB,EAA0C,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAKmF,cAAL,CAAoB,KAAKzF,UAAL,CAAgB,gBAAhB,CAApB,EAAuDuF,cAAvD;AACH,iBAND,MAMO;AACH;AACA,yBAAKhF,aAAL,GAAqB,IAArB;AACA,yBAAKjB,MAAL,CAAY8F,KAAZ,CAAkB,sBAAlB,EAA0C,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAKmF,cAAL,CAAoB,KAAKzF,UAAL,CAAgB,YAAhB,CAApB,EAAmDuF,cAAnD;AACH;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAK1E,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAKvB,MAAL,CAAY8F,KAAZ,CAAkB,wBAAlB,EAA4C,EAACnF,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;AAClB,iBAAKW,QAAL,GAAgB,IAAhB;;AAEA;AACA,iBAAKvB,MAAL,CAAY8F,KAAZ,CAAkB,0BAAlB,EAA8C,EAACnF,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACH;;;iCAEQ;AACL;AACA,gBAAI,KAAKmH,iBAAL,EAAJ,EAA8B;AAC1B,qBAAKhH,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKhB,MAAL,CAAY8F,KAAZ,CAAkB,gBAAlB,EAAoC,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAApC;;AAEA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKjB,MAAL,CAAY8F,KAAZ,CAAkB,sBAAlB,EAA0C,EAAClF,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAKmF,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAIvF,cAAc,KAAKoH,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAI5C,SAAS,QAAb;;AAEA;AACA,iBAAKC,oBAAL,CAA0BD,MAA1B,EAAkCE,IAAlC,CAAuC,UAAC3B,cAAD,EAAoB;AACvD,uBAAK3D,MAAL,CAAY8F,KAAZ,CAAkB,6BAAlB,EAAiD,EAAClF,aAAaA,WAAd,EAA2B+C,gBAAgBA,cAA3C,EAAjD;AACH,aAFD;AAGH;;;;;AAED;;;;;;6CAMqByB,M,EAAQ;;AAEzB;AACA,gBAAIzB,iBAAiB,KAAKxD,WAAL,CAAiB8H,uBAAjB,EAArB;;AAEA,gBAAItE,kBAAkB,IAAtB,EAA4B;AACxB,oBAAIgE,cAAc,EAAlB;;AAEA;AACAA,4BAAYtG,SAAZ,GAAwB,KAAKoG,kBAAL,CAAwB,KAAKpG,SAA7B,CAAxB;;AAEA,oBAAI,KAAKE,QAAT,EAAmB;AACf;AACAoC,mCAAepC,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;;;;AAIA,yBAAKA,QAAL,GAAgB,KAAhB;AACH;;AAED;AACAoC,+BAAegE,WAAf,GAA6BA,WAA7B;AACH;;AAED,gBAAI1C,WAAW,KAAKnF,EAAL,CAAQoF,KAAR,EAAf;;AAEA;;;;AAIA,iBAAKgD,wCAAL,CAA8CjD,QAA9C,EAAwDtB,cAAxD,EAAwEyB,MAAxE;;AAEA,mBAAOH,SAASO,OAAhB;AACH;;;;;AAED;;;;;;;;;;iEAUyCP,Q,EAAUtB,c,EAAgByB,M,EAAQ;AACvE;;;;AAIAH,qBAASM,OAAT,CAAiB5B,cAAjB;AACH;;AAED;;;;;;4CAGoB;;AAEhB,gBAAIhD,SAAS,KAAKA,MAAlB;;AAEA;AACA,gBAAIE,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAIA,iBAAiBE,UAArB,EAAiC;AAC7B,yBAAKA,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAIF,iBAAiBsH,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAIC,kBAAkB,KAAK9H,kBAAL,CAAwB+H,wCAAxB,CAAiE,KAAK1H,MAAtE,EAA8E,KAAKC,WAAnF,CAAtB;;AAEA;AACA,wBAAI0H,cAAc,KAAKnI,WAAL,CAAiBoI,eAAjB,CAAiCH,eAAjC,CAAlB;;AAEA,wBAAIE,WAAJ,EAAiB;AACb;AACA,6BAAKvH,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;+CAIuB;AACnB,mBAAO,KAAKe,yBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAI0G,SAAS,KAAb;;AAEA,gBAAI,KAAK3H,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAKA,gBAAL,CAAsBsH,eAA1B,EAA2C;AACvCK,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;oCAGY;AACR,gBAAIC,SAAS,IAAb;;AAEA,gBAAI,KAAKpG,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAKA,wBAAL,CAA8BqG,sBAAlC,EAA0D;AACtD;AACAD,6BAAS,KAAK5H,gBAAL,CAAsB4H,MAA/B;AACH,iBAHD,MAGO;AACH;AACAA,6BAAS,KAAKpG,wBAAL,CAA8BoG,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAK5H,gBAAL,IAAyB,IAA7B,EAAmC;AACtC4H,yBAAS,KAAK5H,gBAAL,CAAsB4H,MAA/B;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAI5H,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAI+C,2BAA2B/C,iBAAiB+C,wBAAhD;AACA,oBAAIC,gCAAgChD,iBAAiBgD,6BAArD;;AAEA,oBAAID,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;;AAEpE;;;;AAIA,wBAAI/C,iBAAiBiD,gBAAjB,IAAqC,IAArC,IAA6CjD,iBAAiBiD,gBAAjB,IAAqC,EAAtF,EAA0F;AACtFF,mDAA2B/C,iBAAiBiD,gBAA5C;AACH;AACJ;;AAED,oBAAID,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;;AAE9E;;;;AAIA,wBAAIhD,iBAAiBkD,qBAAjB,IAA0C,IAA1C,IAAkDlD,iBAAiBkD,qBAAjB,IAA0C,EAAhG,EAAoG;AAChGF,wDAAgChD,iBAAiBkD,qBAAjD;AACH;AACJ;;AAED,oBAAIH,4BAA4B,IAA5B,IAAoCC,iCAAiC,IAAzE,EAA+E;;AAE3E;AACA,wBAAIF,iBAAiB,KAAKrD,kBAAL,CAAwBwH,6CAAxB,CAAsE,KAAKnH,MAA3E,EAAmF,KAAKC,WAAxF,CAArB;;AAEA;;;;AAIA,wBAAG+C,kBAAkB,IAArB,EAA2B;AACvB;;AAEA;AACA,4BAAIgF,2BAA2B,KAAKrI,kBAAL,CAAwBwH,6CAAxB,CAAsElE,wBAAtE,EAAgGC,6BAAhG,CAA/B;;AAEA,4BAAI8E,4BAA4B,IAAhC,EAAsC;AAClC;;;;AAIA,gCAAIC,0BAA0B,KAAKrI,YAAL,CAAkBsI,sBAAlB,CAAyCF,wBAAzC,CAA9B;;AAEA;;;;;;;;;;;AAaA;AACA,iCAAK1E,cAAL,CAAoB2E,uBAApB;AACH;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;2CAGmBE,Y,EAAc;AAC7B;AACH;;;;;AAED;;;;;;kDAM0BnF,c,EAAgBoF,M,EAAQ;;AAE9C;;;;;AAKA,gBAAIC,eAAe,KAAnB;AACA,gBAAIC,UAAU,CAAd;AACA,gBAAIC,UAAU,CAAd;AACA,gBAAIC,cAAc,CAAlB;;AAEA,gBAAIJ,UAAU,IAAd,EAAoB;;AAEhB,oBAAIA,OAAOC,YAAP,IAAuB,IAA3B,EAAiC;AAC7B;AACAA,mCAAeD,OAAOC,YAAtB;AACH;;AAED,oBAAID,OAAOE,OAAP,IAAkB,IAAtB,EAA4B;AACxB;AACAA,8BAAUF,OAAOE,OAAjB;AACH;;AAED,oBAAIF,OAAOG,OAAP,IAAkB,IAAtB,EAA4B;AACxB;AACAA,8BAAUH,OAAOG,OAAjB;AACH;;AAED,oBAAIH,OAAOI,WAAP,IAAsB,IAA1B,EAAgC;AAC5B;AACAA,kCAAcJ,OAAOI,WAArB;AACH;AACJ;;AAED,gBAAIxF,kBAAkB,IAAlB,IAA0BA,eAAegE,WAAf,IAA8B,IAA5D,EAAkE;;AAE9D;AACA,oBAAIyB,gBAAgB,KAAKC,gBAAL,EAApB;;AAEA,oBAAID,iBAAiB,IAArB,EAA2B;;AAEvB,wBAAIE,OAAO,IAAX;;AAEA,wBAAI3B,cAAchE,eAAegE,WAAjC;;AAEA;AACA,wBAAI4B,SAAS5B,YAAY4B,MAAzB;;AAEA,wBAAIA,UAAU,IAAV,IAAkBA,OAAOC,MAAP,GAAgB,CAAtC,EAAyC;;AAErC;AACA,4BAAIC,aAAaF,OAAOJ,WAAP,CAAjB;;AAEA,4BAAIM,cAAc,IAAlB,EAAwB;;AAEpB;AACAH,mCAAOG,WAAWH,IAAlB;;AAEA,gCAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oCAAII,iBAAiB,CAArB;;AAEA;AACA,qCAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,cAAcI,MAAlC,EAA0CG,GAA1C,EAA+C;;AAE3C,wCAAIX,gBAAgBW,MAAM,CAA1B,EAA6B;AACzB;AACA;AACH;;AAED,wCAAIC,IAAI,EAAR;AACA,wCAAIC,IAAI,EAAR;;AAEA;AACA,wCAAIC,UAAUR,KAAKI,cAAL,CAAd;;AAEA,wCAAII,WAAW,IAAf,EAAqB;AACjB;AACAF,4CAAIE,QAAQ,CAAR,CAAJ;AACAD,4CAAIC,QAAQ,CAAR,CAAJ;AAEH;;AAED;AACA,yCAAKC,qBAAL,CAA2Bd,OAA3B,EAAoCU,CAApC,EAAuC,IAAvC,EAA6CC,CAA7C;AACA,yCAAKG,qBAAL,CAA2Bb,OAA3B,EAAoCS,CAApC,EAAuC,IAAvC,EAA6CE,CAA7C;;AAEA;AACAH;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;;;8CAMsBE,C,EAAGC,C,EAAGG,K,EAAOC,K,EAAO;;AAEtC,gBAAIb,gBAAgBY,KAApB;;AAEA,gBAAIA,SAAS,IAAb,EAAmB;AACf;AACAZ,gCAAgB,KAAKC,gBAAL,EAAhB;AACH;;AAED,gBAAID,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,oBAAIc,MAAMd,cAAcS,CAAd,CAAV;;AAEA,oBAAIK,OAAO,IAAX,EAAiB;;AAEb;AACA,wBAAIC,OAAOD,IAAIN,CAAJ,CAAX;;AAEA,wBAAIO,QAAQ,IAAZ,EAAkB;;AAEd;AACAA,6BAAKhJ,IAAL,GAAY8I,KAAZ;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;;;;;8CAQsBL,C,EAAGC,C,EAAGG,K,EAAO;;AAE/B,gBAAII,YAAY,IAAhB;;AAEA,gBAAIJ,SAAS,IAAb,EAAmB;AACf;AACAA,wBAAQ,KAAKX,gBAAL,EAAR;AACH;;AAED,gBAAIW,SAAS,IAAb,EAAmB;;AAEf;AACA,oBAAIE,MAAMF,MAAMH,CAAN,CAAV;;AAEA,oBAAIK,OAAO,IAAX,EAAiB;;AAEb;AACA,wBAAIC,OAAOD,IAAIN,CAAJ,CAAX;;AAEA,wBAAIO,QAAQ,IAAZ,EAAkB;;AAEd;AACAC,oCAAYD,KAAKhJ,IAAjB;AACH;AACJ;AACJ;;AAED,mBAAOiJ,SAAP;AACH;;AAED;;;;;;;yCAIiB;AACb,mBAAO,KAAKvJ,gBAAL,CAAsBuB,EAA7B;AACH;;;;;AAED;;;wDAGgC;AAC5B;AACA,iBAAKgB,2BAAL;;AAEA;;;;AAIA,iBAAKpD,MAAL,CAAYoE,OAAZ,CAAoBiG,uBAApB,CAA4CC,wBAA5C;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAIxJ,4BAA4B4E,QAAQ6E,QAAR,CAAiB,KAAKC,mCAAtB,CAAhC;;AAEA;AACA,qBAAKnK,cAAL,CAAoBoK,gBAApB,CAAqC,KAAK9J,MAA1C,EAAkD,KAAKC,WAAvD,EAAoEE,yBAApE;;AAEA,qBAAKA,yBAAL,GAAiCA,yBAAjC;;AAEA;AACA,qBAAKD,gBAAL,GAAwB,KAAKR,cAAL,CAAoBoD,gBAApB,CAAqC3C,yBAArC,CAAxB;;AAEA;;;;AAIA,qBAAKd,MAAL,CAAYoE,OAAZ,CAAoBiG,uBAApB,CAA4CC,wBAA5C;AACH,aApBD,CAoBE,OAAMI,CAAN,EAAS;AACP,qBAAK1K,MAAL,CAAYoE,OAAZ,CAAoBiG,uBAApB,CAA4CM,8BAA5C;AACH;AACJ;;;;;AAED;;;sDAG8B;AAC1B,iBAAKH,mCAAL,GAA2C9E,QAAQkF,MAAR,CAAe,KAAK9J,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;4DAGoC+J,W,EAAarH,Q,EAAU;AACvD,gBAAIqH,gBAAgB,MAApB,EAA4B;AACxB,oBAAI,KAAK/J,yBAAL,CAA+BgK,OAA/B,GAAyCtH,QAA7C,EAAuD;AACnD;AACA,wBAAIuH,SAASC,QAAQ,KAAKtK,UAAL,CAAgB,kDAAhB,CAAR,CAAb;AACA,wBAAIqK,MAAJ,EAAY;AACR;AACA,6BAAKE,6BAAL;AACH,qBAHD,MAGO;AACH;AACA,6BAAKnK,yBAAL,CAA+BgK,OAA/B,GAAyCtH,QAAzC;AACH;AACJ,iBAVD,MAUO;AACH;AACA,yBAAKyH,6BAAL;AACH;AACJ,aAfD,MAeO,IAAIJ,gBAAgB,SAApB,EAA+B;AAClC,oBAAI,KAAK/J,yBAAL,CAA+BoK,UAA/B,GAA4C1H,QAAhD,EAA0D;AACtD;AACA,wBAAIuH,SAASC,QAAQ,KAAKtK,UAAL,CAAgB,qDAAhB,CAAR,CAAb;AACA,wBAAIqK,MAAJ,EAAY;AACR;AACA,6BAAKE,6BAAL;AACH,qBAHD,MAGO;AACH;AACA,6BAAKnK,yBAAL,CAA+BoK,UAA/B,GAA4C1H,QAA5C;AACH;AACJ,iBAVD,MAUO;AACH;AACA,yBAAKyH,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;wDAGgC;;AAE5B;AACA,gBAAIE,WAAW,KAAKC,mBAAL,CAAyB,KAAKtK,yBAAL,CAA+BgK,OAAxD,EAAiE,KAAKhK,yBAAL,CAA+BoK,UAAhG,CAAf;;AAEA;AACA,iBAAKpK,yBAAL,CAA+BO,SAA/B,GAA2C8J,QAA3C;;AAEA;AACA,iBAAKE,6BAAL;AACH;;AAED;;;;;;;;;;4CAOoBC,U,EAAYC,a,EAAe;;AAE3C,gBAAIJ,WAAW,EAAf;;AAEA;AACA,iBAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAI2B,UAApB,EAAgC3B,GAAhC,EAAqC;;AAEjC,oBAAI6B,SAAS,EAAb;;AAEA;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,aAApB,EAAmCE,GAAnC,EAAwC;;AAEpC;AACA,wBAAItB,OAAO,KAAKuB,iCAAL,CAAuCD,CAAvC,EAA0C9B,CAA1C,CAAX;;AAEA,wBAAIQ,QAAQ,IAAZ,EAAkB;AACd;;;;AAIAA,+BAAO,KAAKwB,eAAL,EAAP;AACH;;AAEDH,2BAAOI,IAAP,CAAYzB,IAAZ;AACH;;AAEDgB,yBAASS,IAAT,CAAcJ,MAAd;AACH;;AAED,mBAAOL,QAAP;AACH;;AAED;;;;;;;;;0DAMkCvB,C,EAAGC,C,EAAG;AACpC,gBAAIgC,aAAa,IAAjB;;AAEA,gBAAIxK,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,oBAAI6I,MAAM7I,UAAUwI,CAAV,CAAV;;AAEA,oBAAIK,OAAO,IAAX,EAAiB;;AAEb;AACA2B,iCAAa3B,IAAIN,CAAJ,CAAb;AACH;AACJ;;AAED,mBAAOiC,UAAP;AACH;;AAED;;;;;;;0CAIkB;AACd,gBAAI1B,OAAO,EAAX;;AAEAA,iBAAKhJ,IAAL,GAAY,EAAZ;AACAgJ,iBAAK2B,QAAL,GAAgB,IAAhB;AACA3B,iBAAK4B,IAAL,GAAY,IAAZ;;AAEA,mBAAO5B,IAAP;AACH;;AAED;;;;;;;+CAIuBN,C,EAAG;;AAEtB;AACA,gBAAIxI,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,oBAAImK,SAAS,EAAb;;AAEA;AACA,oBAAIN,aAAa,KAAKpK,yBAAL,CAA+BoK,UAAhD;;AAEA;AACA,qBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;AACjC;AACA,wBAAIO,UAAU,KAAKL,eAAL,EAAd;AACAH,2BAAOI,IAAP,CAAYI,OAAZ;AACH;;AAED;AACA3K,0BAAU4K,MAAV,CAAiBpC,CAAjB,EAAoB,CAApB,EAAuB2B,MAAvB;;AAEA;AACA,qBAAK1K,yBAAL,CAA+BgK,OAA/B;AACH;;AAED;AACA,iBAAKO,6BAAL;AACH;;AAED;;;;;;;+CAIuBxB,C,EAAG;;AAEtB,gBAAIkB,SAASC,QAAQ,KAAKtK,UAAL,CAAgB,wCAAhB,CAAR,CAAb;;AAEA,gBAAIqK,MAAJ,EAAY;AACR;AACA,oBAAI1J,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,oBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACAA,8BAAU4K,MAAV,CAAiBpC,CAAjB,EAAoB,CAApB;;AAEA;AACA,yBAAK/I,yBAAL,CAA+BgK,OAA/B;AACH;;AAED;AACA,qBAAKO,6BAAL;AACH;AACJ;;AAED;;;;;;;kDAI0BzB,C,EAAG;;AAEzB;AACA,gBAAIvI,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB,oBAAIyJ,UAAU,KAAKhK,yBAAL,CAA+BgK,OAA7C;;AAEA;AACA,qBAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAImB,OAApB,EAA6BnB,GAA7B,EAAkC;;AAE9B;AACA,wBAAIuC,UAAU7K,UAAUsI,CAAV,CAAd;;AAEA,wBAAIuC,WAAW,IAAf,EAAqB;;AAEjB;AACA,4BAAIF,UAAU,KAAKL,eAAL,EAAd;;AAEA;AACAO,gCAAQD,MAAR,CAAerC,CAAf,EAAkB,CAAlB,EAAqBoC,OAArB;AACH;AACJ;;AAED;AACA,qBAAKlL,yBAAL,CAA+BoK,UAA/B;AACH;;AAED;AACA,iBAAKG,6BAAL;AACH;;AAED;;;;;;;kDAI0BzB,C,EAAG;;AAEzB,gBAAImB,SAASC,QAAQ,KAAKtK,UAAL,CAAgB,2CAAhB,CAAR,CAAb;;AAEA,gBAAIqK,MAAJ,EAAY;AACR;AACA,oBAAI1J,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,oBAAIA,aAAa,IAAjB,EAAuB;;AAEnB,wBAAIyJ,UAAU,KAAKhK,yBAAL,CAA+BgK,OAA7C;;AAEA;AACA,yBAAK,IAAInB,IAAI,CAAb,EAAgBA,IAAImB,OAApB,EAA6BnB,GAA7B,EAAkC;;AAE9B;AACA,4BAAIuC,UAAU7K,UAAUsI,CAAV,CAAd;;AAEA,4BAAIuC,WAAW,IAAf,EAAqB;;AAEjB;AACAA,oCAAQD,MAAR,CAAerC,CAAf,EAAkB,CAAlB;AACH;AACJ;;AAED;AACA,yBAAK9I,yBAAL,CAA+BoK,UAA/B;AACH;;AAED;AACA,qBAAKG,6BAAL;AACH;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAIc,cAAc,KAAK9L,cAAL,CAAoB+L,UAApB,EAAlB;;AAEA,mBAAOD,WAAP;AACH;;AAED;;;;;;;;wDAKgCxL,M,EAAQ;AACpC,gBAAI0L,uBAAuB,KAAKhM,cAAL,CAAoBiM,+BAApB,CAAoD3L,MAApD,CAA3B;;AAEA,mBAAO0L,oBAAP;AACH;;AAED;;;;;;;;8CAKsB1L,M,EAAQ;AAC1B,gBAAI4L,aAAa,KAAKlM,cAAL,CAAoBmM,qBAApB,CAA0C7L,MAA1C,CAAjB;;AAEA,mBAAO4L,UAAP;AACH;;AAED;;;;;;;;0CAKkB5L,M,EAAQ;AACtB,gBAAI6H,SAAS,KAAKnI,cAAL,CAAoBoM,iBAApB,CAAsC9L,MAAtC,CAAb;;AAEA,mBAAO6H,MAAP;AACH;;AAED;;;;;;;;uCAKekE,O,EAAStL,I,EAAM;AAC1B,iBAAKF,WAAL,CAAiBC,IAAjB,GAAwBuL,OAAxB;AACA,iBAAKxL,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACH;;;;;AAED;;;;qCAIa;AACT,mBAAO,KAAKP,gBAAL,CAAsBiK,OAA7B;AACH;;AAED;;;;;;;wCAIgB;AACZ,mBAAO,KAAKjK,gBAAL,CAAsBqK,UAA7B;AACH;;AAED;;;;;;;;uCAKe;AACX,gBAAI1C,SAAS,IAAb;;AAEA,gBAAIsC,UAAU,KAAK6B,UAAL,EAAd;AACA,gBAAIzB,aAAa,KAAK0B,aAAL,EAAjB;;AAEA;AACA,iBAAK,IAAIjD,IAAI,CAAb,EAAgBA,IAAImB,OAApB,EAA6BnB,GAA7B,EAAkC;;AAE9B;AACA,qBAAK,IAAI8B,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;;AAEjC;AACA,wBAAIrB,YAAY,KAAKyC,qBAAL,CAA2BpB,CAA3B,EAA8B9B,CAA9B,CAAhB;;AAEA,wBAAIS,aAAa,IAAb,IAAqBA,aAAa,EAAtC,EAA0C;AACtC;AACA5B,iCAAS,KAAT;AACA;AACH;AACJ;;AAED,oBAAIA,UAAU,KAAd,EAAqB;AACjB;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;;uCAMe;AACX,gBAAIA,SAAS,IAAb;;AAEA,gBAAIsC,UAAU,KAAK6B,UAAL,EAAd;AACA,gBAAIzB,aAAa,KAAK0B,aAAL,EAAjB;;AAEA;AACA,gBAAIE,eAAe,KAAKjM,gBAAL,CAAsBQ,SAAzC;;AAEA;AACA,iBAAK,IAAIsI,IAAI,CAAb,EAAgBA,IAAImB,OAApB,EAA6BnB,GAA7B,EAAkC;;AAE9B;AACA,qBAAK,IAAI8B,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;;AAEjC;AACA,wBAAIrB,YAAY,KAAKyC,qBAAL,CAA2BpB,CAA3B,EAA8B9B,CAA9B,CAAhB;;AAEA;AACA,wBAAIoD,mBAAmB,KAAKF,qBAAL,CAA2BpB,CAA3B,EAA8B9B,CAA9B,EAAiCmD,YAAjC,CAAvB;;AAEA,wBAAI1C,aAAa2C,gBAAjB,EAAmC;AAC/B;AACAvE,iCAAS,KAAT;AACA;AACH;AACJ;;AAED,oBAAIA,UAAU,KAAd,EAAqB;AACjB;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;kCAIUwE,M,EAAQ;AAAA;;AAEd;AACA,gBAAIC,eAAevH,QAAQwH,OAAR,CAAgB,MAAM,KAAKtM,WAAX,GAAyB,QAAzC,CAAnB;;AAEA,gBAAIqM,gBAAgB,IAAhB,IAAwBA,aAAazD,MAAb,GAAsB,CAAlD,EAAqD;;AAEjD;AACA,qBAAKhJ,WAAL,CAAiB2M,WAAjB;;AAEA;AACA,qBAAKtN,SAAL,CAAeuN,IAAf,CAAoB,KAAKxM,WAAzB;AACA,qBAAKlB,aAAL;;AAEA;AACAuN,+BAAeA,aAAa,CAAb,CAAf;;AAEA,oBAAI;AACA;AACA,+CAAYA,YAAZ,EAA0B3H,IAA1B,CAA+B,UAAC+H,MAAD,EAAY;;AAEvC;AACA,4BAAIC,UAAUD,OAAOE,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,4BAAIC,cAAc,OAAKhN,WAAL,CAAiBiN,8BAAjB,CAAgDH,OAAhD,CAAlB;;AAEA;AACA,+BAAKlN,eAAL,CAAqBsN,UAArB,CAAgCV,MAAhC,EAAwCQ,WAAxC;;AAEA;AACA,+BAAKhN,WAAL,CAAiBmN,WAAjB;;AAEA;;;;AAIA,+BAAK9N,SAAL,CAAeuN,IAAf,CAAoB,OAAKxM,WAAzB;AACA,+BAAKlB,aAAL;AACH,qBApBD,EAoBGkO,KApBH,CAoBS,YAAM;;AAEX;;;;AAIA,+BAAKpN,WAAL,CAAiBmN,WAAjB;;AAEA;;;;AAIA,+BAAK9N,SAAL,CAAeuN,IAAf,CAAoB,OAAKxM,WAAzB;AACA,+BAAKlB,aAAL;AACH,qBAlCD;AAmCH,iBArCD,CAqCE,OAAMgL,CAAN,EAAS;;AAEP;;;;AAIA,yBAAKlK,WAAL,CAAiBmN,WAAjB;;AAEA;;;;AAIA,yBAAK9N,SAAL,CAAeuN,IAAf,CAAoB,KAAKxM,WAAzB;AACA,yBAAKlB,aAAL;AACH;AAEJ;AACJ;;AAED;;;;;;;8CAIsB;AAClB,gBAAI,KAAKU,eAAL,CAAqByN,iBAArB,MAA4C,KAAK9L,wBAArD,EAA+E;AAC3E,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;;8CAKsB+L,kB,EAAoBC,gB,EAAkB;;AAExD,gBAAID,sBAAsB,IAAtB,IAA8BC,oBAAoB,IAAtD,EAA4D;AACxD,oBAAIC,kBAAkBF,mBAAmBnG,WAAzC;AACA,oBAAIsG,gBAAgBF,iBAAiBpG,WAArC;;AAEA,oBAAIqG,mBAAmB,IAAnB,IAA2BC,iBAAiB,IAAhD,EAAsD;AAClD,wBAAIC,gBAAgBF,gBAAgB3M,SAApC;AACA,wBAAI8M,cAAcF,cAAc5M,SAAhC;;AAEA,wBAAI6M,iBAAiB,IAAjB,GAAwBC,eAAe,IAA3C,EAAiD;;AAE7C;AACA,6BAAK,IAAItE,IAAI,CAAb,EAAgBA,IAAI,KAAK8C,UAAL,EAApB,EAAuC9C,GAAvC,EAA4C;;AAExC;AACA,iCAAK,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAKgD,aAAL,EAApB,EAA0ChD,GAA1C,EAA+C;;AAE3C;AACA,oCAAIQ,YAAY,KAAKyC,qBAAL,CAA2BjD,CAA3B,EAA8BC,CAA9B,EAAiCqE,aAAjC,CAAhB;;AAEA;AACA,qCAAKnE,qBAAL,CAA2BH,CAA3B,EAA8BC,CAA9B,EAAiCsE,WAAjC,EAA8C/D,SAA9C;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO2D,gBAAP;AACH;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAKK,YAAL,GAAoB,KAAKpO,MAAL,CAAYyF,GAAZ,CAAgB,MAAhB,EAAwBC,QAAQpC,IAAR,CAAa,IAAb,EAAmB,UAASqC,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,qBAAK7F,UAAL,CAAgBsO,UAAhB,CAA2B,aAA3B;AACH,aAH2C,CAAxB,CAApB;AAIH;;;;;AAED;;;2DAGmC;;AAE/B,gBAAI,CAAC,KAAKvN,yBAAL,CAA+BwN,gBAApC,EAAsD;AAClD;;;;;AAKA,qBAAKxN,yBAAL,CAA+ByN,sBAA/B,GAAwD,IAAxD;AACA,qBAAKzN,yBAAL,CAA+B0N,2BAA/B,GAA6D,IAA7D;AACA,qBAAK1N,yBAAL,CAA+B4H,sBAA/B,GAAwD,IAAxD;;AAEA;AACA,qBAAK2C,6BAAL;AACH;AACJ;;AAED;;;;;;iEAGyC;;AAErC,gBAAI,KAAKvK,yBAAL,CAA+ByN,sBAA/B,IAAyD,IAAzD,IACA,KAAKzN,yBAAL,CAA+ByN,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAKzN,yBAAL,CAA+B0N,2BAA/B,GAA6D,EAA7D;AACH,aARD,MAQO;AACH,qBAAKC,6BAAL,GAAqC,KAAKpO,cAAL,CAAoBqO,WAApB,CAAgC,KAAK5N,yBAAL,CAA+ByN,sBAA/D,CAArC;AACH;;AAED;AACA,iBAAKlD,6BAAL;AACH;;AAED;;;;;;sEAG8C;;AAE1C;AACA,gBAAIkD,yBAAyB,KAAKzN,yBAAL,CAA+ByN,sBAA5D;;AAEA;AACA,gBAAI7F,yBAAyB,KAAK5H,yBAAL,CAA+B4H,sBAA5D;;AAEA;AACA,gBAAIiG,iCAAiC,KAAK9N,gBAAL,CAAsB2N,2BAA3D;;AAEA;AACA,gBAAII,iCAAiC,KAAK9N,yBAAL,CAA+B0N,2BAApE;;AAEA;AACA,gBAAIK,+BAA+B,KAAKxO,cAAL,CAAoByO,kCAApB,CAAuDP,sBAAvD,EAA+EK,8BAA/E,CAAnC;;AAEA,gBAAIC,gCAAgC,IAAhC,IAAwCA,gCAAgC,EAA5E,EAAgF;AAC5E;;AAEA;AACA,qBAAKxD,6BAAL;AACH,aALD,MAKO,IAAIwD,gCAAgC,IAApC,EAA0C;;AAE7C;AACA,oBAAIE,uBAAuB,KAAKlO,gBAAL,CAAsB+D,IAAjD;;AAEA;AACA,oBAAIoK,mBAAmBH,6BAA6BjK,IAApD;;AAEA;AACA,oBAAIoK,oBAAoBD,oBAAxB,EAA8C;AAC1C;;;;;AAKA;AACA,wBAAIhE,SAASC,QAAQ,KAAKtK,UAAL,CAAgB,qDAAhB,CAAR,CAAb;;AAEA,wBAAIqK,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,4BAAIkE,mBAAmB,KAAKrP,SAAL,CAAesP,GAAf,CAAmBF,mBAAmB,SAAtC,CAAvB;;AAEA,4BAAIC,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,gCAAIE,eAAeF,iBAAiBG,eAAjB,EAAnB;;AAEA;AACAD,yCAAa/M,EAAb,GAAkB,KAAKtB,yBAAL,CAA+BsB,EAAjD;AACA+M,yCAAab,gBAAb,GAAgC,IAAhC;AACAa,yCAAaZ,sBAAb,GAAsCA,sBAAtC;AACAY,yCAAaX,2BAAb,GAA2CI,8BAA3C;AACAO,yCAAazG,sBAAb,GAAsCA,sBAAtC;;AAEA;;;;AAIA,iCAAK8B,mCAAL,GAA2CnD,KAAKC,SAAL,CAAe6H,YAAf,CAA3C;;AAEA;AACA,iCAAKE,qCAAL;AACH;AACJ,qBA9BD,MA8BO;AACH;;;;AAIA,6BAAKvO,yBAAL,CAA+B0N,2BAA/B,GAA6DG,8BAA7D;AACH;AACJ,iBA9CD,MA8CO;AACH;;;;AAIA,yBAAKtD,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;;;yCAKiBiE,S,EAAW;AACxB,gBAAI9G,SAAS,IAAb;;AAEA,gBAAI8G,aAAa,IAAjB,EAAuB;AACnB9G,yBAAS,KAAKnI,cAAL,CAAoBkP,gBAApB,CAAqCD,SAArC,CAAT;AACH;;AAED,mBAAO9G,MAAP;AACH;;AAED;;;;;;6DAGqC;;AAEjC,gBAAI,CAAC,KAAK1H,yBAAL,CAA+B0O,kBAApC,EAAwD;AACpD;;;;;AAKA,qBAAK1O,yBAAL,CAA+B8C,wBAA/B,GAA0D,IAA1D;AACA,qBAAK9C,yBAAL,CAA+B+C,6BAA/B,GAA+D,IAA/D;;AAEA;AACA,qBAAKwH,6BAAL;AACH;AACJ;;AAED;;;;;;mEAG2C;;AAEvC,gBAAI,KAAKvK,yBAAL,CAA+B8C,wBAA/B,IAA2D,IAA3D,IACA,KAAK9C,yBAAL,CAA+B8C,wBAA/B,IAA2D,EAD/D,EACmE;;AAE/D;;;;AAIA,qBAAK9C,yBAAL,CAA+B+C,6BAA/B,GAA+D,EAA/D;AACH;;AAED;AACA,iBAAKwH,6BAAL;AACH;;AAED;;;;;;wEAGgD;;AAE5C;AACA,iBAAKA,6BAAL;AACH;;AAED;;;;;;sDAG8B;;AAE1B;AACA,gBAAIoE,OAAO,KAAK1M,oBAAhB;;AAEA;;;;;;;AAOA0M,mBAAO,KAAKvP,aAAL,CAAmBwP,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,mBAAO,KAAKjP,WAAL,CAAiBmP,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,iBAAK3O,yBAAL,CAA+BkC,MAA/B,GAAwCyM,IAAxC;;AAEA;AACA,iBAAKpE,6BAAL;AACH;;;;;;AAGL5L,gBAAgBmQ,OAAhB,GAA0B,CACtB,eADsB,EAEtB,SAFsB,EAGtB,WAHsB,EAItB,WAJsB,EAKtB,IALsB,EAMtB,YANsB,EAOtB,QAPsB,EAQtB,mBARsB,EAStB,eATsB,EAUtB,aAVsB,EAWtB,iBAXsB,EAYtB,gBAZsB,EAatB,oBAbsB,EActB,cAdsB,EAetB,aAfsB,CAA1B;;kBAkBenQ,e","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n    constructor($anchorScroll,\n                $filter,\n                $injector,\n                $location,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService,\n                TableService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$location = $location;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the advanced authoring textarea is displayed\n        this.showAdvancedAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // whether the snip table button is shown or not\n        this.isSnipTableButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // set the rubric summernote options\n                this.summernoteRubricOptions = {\n                    height: 300,\n                    disableDragAndDrop: true\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.resetTable();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                // check if we need to import work\n\n                var importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n                var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n                if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                    /*\n                     * check if the node id is in the field that we used to store\n                     * the import previous work node id in\n                     */\n                    importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n                }\n\n                if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                    /*\n                     * check if the component id is in the field that we used to store\n                     * the import previous work component id in\n                     */\n                    importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n                }\n\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // set up the table\n            this.setupTable();\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                if (connectedComponentParams.updateOn === 'change') {\n                    // get the component type that has changed\n                    var componentType = connectedComponent.type;\n\n                    /*\n                     * make a copy of the component state so we don't accidentally\n                     * change any values in the referenced object\n                     */\n                    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                    if (componentType === 'Table') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Graph') {\n\n                        // set the graph data into the table\n                        this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Embedded') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.tableController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.tableController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.tableController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * make sure the student hasn't entered any values into the\n                         * table so that we don't overwrite any of their work.\n                         */\n                        if (this.isTableEmpty() || this.isTableReset()) {\n                            /*\n                             * the student has not entered any values into the table\n                             * so we can update it\n                             */\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has entered values into the table so we\n                             * will ask them if they want to update it\n                             */\n                            /*\n                            var answer = confirm('Do you want to update the connected table?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                            */\n                            performUpdate = true;\n                        }\n\n                        if (performUpdate) {\n                            // set the table data\n                            this.$scope.tableController.setStudentWork(componentState);\n\n                            // the table has changed\n                            this.$scope.tableController.isDirty = true;\n                            this.$scope.tableController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            var array = new Array();\n\n            // make sure num is a valid number\n            if (num != null && !isNaN(num)) {\n                array = new Array(parseInt(num));\n            }\n\n            return array;\n        }\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n\n        // get the original table from the step content\n        this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n        // the table has changed so we will perform additional processing\n        this.studentDataChanged();\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the table data\n            studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // get the import previous work node id and component id\n            var importPreviousWorkNodeId = componentContent.importPreviousWorkNodeId;\n            var importPreviousWorkComponentId = componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                if (componentContent.importWorkNodeId != null && componentContent.importWorkNodeId != '') {\n                    importPreviousWorkNodeId = componentContent.importWorkNodeId;\n                }\n            }\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                if (componentContent.importWorkComponentId != null && componentContent.importWorkComponentId != '') {\n                    importPreviousWorkComponentId = componentContent.importWorkComponentId;\n                }\n            }\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.TableService.populateComponentState(importWorkComponentState);\n\n                        /*\n                        // create a component state with no table data\n                        var defaultComponentState = this.createComponentState();\n\n                        if (defaultComponentState != null && defaultComponentState.studentData != null) {\n                            // set the authored component content table data into the component state\n                            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n                        }\n\n                        // copy the cell text values into the default component state\n                        var mergedComponentState = this.copyTableDataCellText(populatedComponentState, defaultComponentState);\n                        */\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachStudentAsset(studentAsset) {\n        // TODO: implement me\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            if (tableDataRows != null) {\n\n                var data = null;\n\n                var studentData = componentState.studentData;\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    if (tempSeries != null) {\n\n                        // get the data from the series\n                        data = tempSeries.data;\n\n                        if (data != null) {\n\n                            // our counter for traversing the data rows\n                            var dataRowCounter = 0;\n\n                            // loop through all the table data rows\n                            for (var r = 0; r < tableDataRows.length; r++) {\n\n                                if (skipFirstRow && r === 0) {\n                                    // skip the first table data row\n                                    continue;\n                                }\n\n                                var x = '';\n                                var y = '';\n\n                                // get the data row\n                                var dataRow = data[dataRowCounter];\n\n                                if (dataRow != null) {\n                                    // get the x and y values from the data row\n                                    x = dataRow[0];\n                                    y = dataRow[1];\n\n                                }\n\n                                // set the x and y values into the table data\n                                this.setTableDataCellValue(xColumn, r, null, x);\n                                this.setTableDataCellValue(yColumn, r, null, y);\n\n                                // increment the data row counter\n                                dataRowCounter++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, table, value) {\n\n        var tableDataRows = table;\n\n        if (table == null) {\n            // get the table data rows\n            tableDataRows = this.getTableDataRows();\n        }\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the value of a cell in the table\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param table (optional) table data to get the value from. this is used\n     * when we want to look up the value in the default authored table\n     * @returns the cell value (text or a number)\n     */\n    getTableDataCellValue(x, y, table) {\n\n        var cellValue = null;\n\n        if (table == null) {\n            // get the table data rows\n            table = this.getTableDataRows();\n        }\n\n        if (table != null) {\n\n            // get the row we want\n            var row = table[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cellValue = cell.text;\n                }\n            }\n        }\n\n        return cellValue;\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Confirm whether user really want to change row/column size. Only confirm if they're decreasing the size.\n     */\n    authoringViewTableSizeConfirmChange(rowOrColumn, oldValue) {\n        if (rowOrColumn === 'rows') {\n            if (this.authoringComponentContent.numRows < oldValue) {\n                // author wants to decrease number of rows, so confirm\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numRows = oldValue;\n                }\n            } else {\n                // author wants to increase number of rows, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        } else if (rowOrColumn === 'columns') {\n            if (this.authoringComponentContent.numColumns < oldValue) {\n                // author wants to decrease number of columns, so confirm\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numColumns = oldValue;\n                }\n            } else {\n                // author wants to increase number of columns, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        }\n    }\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the number of rows in the table\n     * @returns the number of rows in the table\n     */\n    getNumRows() {\n        return this.componentContent.numRows;\n    }\n\n    /**\n     * Get the number of columns in the table\n     * @returns the number of columns in the table\n     */\n    getNumColumns() {\n        return this.componentContent.numColumns;\n    }\n\n    /**\n     * Check if the table is empty. The table is empty if all the\n     * cells are empty string.\n     * @returns whether the table is empty\n     */\n    isTableEmpty() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get a cell value\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                if (cellValue != null && cellValue != '') {\n                    // the cell is not empty so the table is not empty\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the table is set to the default values. The table\n     * is set to the default values if all the cells match the\n     * values in the default authored table.\n     * @returns whether the table is set to the default values\n     */\n    isTableReset() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // get the default table\n        var defaultTable = this.componentContent.tableData;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get the cell value from the student table\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                // get the cell value from the default table\n                var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n                if (cellValue != defaultCellValue) {\n                    // the cell values do not match so the table is not set to the default values\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Snip the table by converting it to an image\n     * @param $event the click event\n     */\n    snipTable($event) {\n\n        // get the table element. this will obtain an array.\n        var tableElement = angular.element('#' + this.componentId + ' table');\n\n        if (tableElement != null && tableElement.length > 0) {\n\n            // hide all the iframes otherwise html2canvas may cut off the table\n            this.UtilService.hideIFrames();\n\n            // scroll to the component so html2canvas doesn't cut off the table\n            this.$location.hash(this.componentId);\n            this.$anchorScroll();\n\n            // get the table element\n            tableElement = tableElement[0];\n\n            try {\n                // convert the table element to a canvas element\n                html2canvas(tableElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n\n                    // we are done capturing the table so we will show the iframes again\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                }).catch(() => {\n\n                    /*\n                     * an error occurred while trying to capture the table so we\n                     * will show the iframes again\n                     */\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                });\n            } catch(e) {\n\n                /*\n                 * an error occurred while trying to capture the table so we\n                 * will show the iframes again\n                 */\n                this.UtilService.showIFrames();\n\n                /*\n                 * scroll to the component in case the view has shifted after\n                 * showing the iframe\n                 */\n                this.$location.hash(this.componentId);\n                this.$anchorScroll();\n            }\n\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip table button\n     * @return whether to show the snip table button\n     */\n    showSnipTableButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Copy the table data cell text from one component state to another\n     * @param fromComponentState get the cell text values from this component state\n     * @param toComponentState set the cell text values in this component state\n     */\n    copyTableDataCellText(fromComponentState, toComponentState) {\n\n        if (fromComponentState != null && toComponentState != null) {\n            var fromStudentData = fromComponentState.studentData;\n            var toStudentData = toComponentState.studentData;\n\n            if (fromStudentData != null && toStudentData != null) {\n                var fromTableData = fromStudentData.tableData;\n                var toTableData = toStudentData.tableData;\n\n                if (fromTableData != null & toTableData != null) {\n\n                    // loop through all the rows\n                    for (var y = 0; y < this.getNumRows(); y++) {\n\n                        // loop through all the columns\n                        for (var x = 0; x < this.getNumColumns(); x++) {\n\n                            // get the cell value\n                            var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n                            // set the cell value\n                            this.setTableDataCellValue(x, y, toTableData, cellValue);\n                        }\n                    }\n                }\n            }\n        }\n\n        return toComponentState;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        } else {\n            this.authoringShowPreviousWorkNode = this.ProjectService.getNodeById(this.authoringComponentContent.showPreviousWorkNodeId);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n}\n\nTableController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService',\n    'UtilService'\n];\n\nexport default TableController;\n"]}