{"version":3,"sources":["tableController.es6"],"names":[],"mappings":"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","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n    constructor($anchorScroll,\n                $location,\n                $q,\n                $rootScope,\n                $scope,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService,\n                TableService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$location = $location;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // whether the snip table button is shown or not\n        this.isSnipTableButtonVisible = true;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                // get the latest annotations\n                // TODO: watch for new annotations and update accordingly\n                this.latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.resetTable();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (componentState == null) {\n                // check if we need to import work.\n                // only import work if the student does not already have\n                // work for this component\n                var importWorkNodeId = this.componentContent.importWorkNodeId;\n                var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                if (importWorkNodeId != null && importWorkComponentId != null) {\n                    // import the work from the other component\n                    this.importWork();\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // set up the table\n            this.setupTable();\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.registerComponentController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                if (connectedComponentParams.updateOn === 'change') {\n                    // get the component type that has changed\n                    var componentType = connectedComponent.type;\n\n                    /*\n                     * make a copy of the component state so we don't accidentally\n                     * change any values in the referenced object\n                     */\n                    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                    if (componentType === 'Table') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Graph') {\n\n                        // set the graph data into the table\n                        this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Embedded') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.tableController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.tableController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.tableController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', clientSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', clientSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * make sure the student hasn't entered any values into the\n                         * table so that we don't overwrite any of their work.\n                         */\n                        if (this.isTableEmpty() || this.isTableReset()) {\n                            /*\n                             * the student has not entered any values into the table\n                             * so we can update it\n                             */\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has entered values into the table so we\n                             * will ask them if they want to update it\n                             */\n                            /*\n                            var answer = confirm('Do you want to update the connected table?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                            */\n                            performUpdate = true;\n                        }\n\n                        if (performUpdate) {\n                            // set the table data\n                            this.$scope.tableController.setStudentWork(componentState);\n\n                            // the table has changed\n                            this.$scope.tableController.isDirty = true;\n                            this.$scope.tableController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            var array = new Array();\n\n            // make sure num is a valid number\n            if (num != null && !isNaN(num)) {\n                array = new Array(parseInt(num));\n            }\n\n            return array;\n        }\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n\n        // get the original table from the step content\n        this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n        // the table has changed so we will perform additional processing\n        this.studentDataChanged();\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the table data\n            studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        var deferred = this.$q.defer();\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.TableService.populateComponentState(importWorkComponentState);\n\n                        /*\n                        // create a component state with no table data\n                        var defaultComponentState = this.createComponentState();\n\n                        if (defaultComponentState != null && defaultComponentState.studentData != null) {\n                            // set the authored component content table data into the component state\n                            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n                        }\n\n                        // copy the cell text values into the default component state\n                        var mergedComponentState = this.copyTableDataCellText(populatedComponentState, defaultComponentState);\n                        */\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachStudentAsset(studentAsset) {\n        // TODO: implement me\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            if (tableDataRows != null) {\n\n                var data = null;\n\n                var studentData = componentState.studentData;\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    if (tempSeries != null) {\n\n                        // get the data from the series\n                        data = tempSeries.data;\n\n                        if (data != null) {\n\n                            // our counter for traversing the data rows\n                            var dataRowCounter = 0;\n\n                            // loop through all the table data rows\n                            for (var r = 0; r < tableDataRows.length; r++) {\n\n                                if (skipFirstRow && r === 0) {\n                                    // skip the first table data row\n                                    continue;\n                                }\n\n                                var x = '';\n                                var y = '';\n\n                                // get the data row\n                                var dataRow = data[dataRowCounter];\n\n                                if (dataRow != null) {\n                                    // get the x and y values from the data row\n                                    x = dataRow[0];\n                                    y = dataRow[1];\n\n                                }\n\n                                // set the x and y values into the table data\n                                this.setTableDataCellValue(xColumn, r, null, x);\n                                this.setTableDataCellValue(yColumn, r, null, y);\n\n                                // increment the data row counter\n                                dataRowCounter++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, table, value) {\n\n        var tableDataRows = table;\n\n        if (table == null) {\n            // get the table data rows\n            tableDataRows = this.getTableDataRows();\n        }\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the value of a cell in the table\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param table (optional) table data to get the value from. this is used\n     * when we want to look up the value in the default authored table\n     * @returns the cell value (text or a number)\n     */\n    getTableDataCellValue(x, y, table) {\n\n        var cellValue = null;\n\n        if (table == null) {\n            // get the table data rows\n            table = this.getTableDataRows();\n        }\n\n        if (table != null) {\n\n            // get the row we want\n            var row = table[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cellValue = cell.text;\n                }\n            }\n        }\n\n        return cellValue;\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeController.authoringViewNodeChanged();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the number of rows in the table\n     * @returns the number of rows in the table\n     */\n    getNumRows() {\n        return this.componentContent.numRows;\n    }\n\n    /**\n     * Get the number of columns in the table\n     * @returns the number of columns in the table\n     */\n    getNumColumns() {\n        return this.componentContent.numColumns;\n    }\n\n    /**\n     * Check if the table is empty. The table is empty if all the\n     * cells are empty string.\n     * @returns whether the table is empty\n     */\n    isTableEmpty() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get a cell value\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                if (cellValue != null && cellValue != '') {\n                    // the cell is not empty so the table is not empty\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the table is set to the default values. The table\n     * is set to the default values if all the cells match the\n     * values in the default authored table.\n     * @returns whether the table is set to the default values\n     */\n    isTableReset() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // get the default table\n        var defaultTable = this.componentContent.tableData;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get the cell value from the student table\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                // get the cell value from the default table\n                var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n                if (cellValue != defaultCellValue) {\n                    // the cell values do not match so the table is not set to the default values\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Snip the table by converting it to an image\n     * @param $event the click event\n     */\n    snipTable($event) {\n\n        // get the table element. this will obtain an array.\n        var tableElement = angular.element('#' + this.componentId + ' table');\n\n        if (tableElement != null && tableElement.length > 0) {\n\n            // hide all the iframes otherwise html2canvas may cut off the table\n            this.UtilService.hideIFrames();\n\n            // scroll to the component so html2canvas doesn't cut off the table\n            this.$location.hash(this.componentId);\n            this.$anchorScroll();\n\n            // get the table element\n            tableElement = tableElement[0];\n\n            try {\n                // convert the table element to a canvas element\n                html2canvas(tableElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n\n                    // we are done capturing the table so we will show the iframes again\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                }).catch(() => {\n\n                    /*\n                     * an error occurred while trying to capture the table so we\n                     * will show the iframes again\n                     */\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                });\n            } catch(e) {\n\n                /*\n                 * an error occurred while trying to capture the table so we\n                 * will show the iframes again\n                 */\n                this.UtilService.showIFrames();\n\n                /*\n                 * scroll to the component in case the view has shifted after\n                 * showing the iframe\n                 */\n                this.$location.hash(this.componentId);\n                this.$anchorScroll();\n            }\n\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip table button\n     * @return whether to show the snip table button\n     */\n    showSnipTableButton() {\n        return this.isSnipTableButtonVisible;\n    }\n\n    /**\n     * Copy the table data cell text from one component state to another\n     * @param fromComponentState get the cell text values from this component state\n     * @param toComponentState set the cell text values in this component state\n     */\n    copyTableDataCellText(fromComponentState, toComponentState) {\n\n        if (fromComponentState != null && toComponentState != null) {\n            var fromStudentData = fromComponentState.studentData;\n            var toStudentData = toComponentState.studentData;\n\n            if (fromStudentData != null && toStudentData != null) {\n                var fromTableData = fromStudentData.tableData;\n                var toTableData = toStudentData.tableData;\n\n                if (fromTableData != null & toTableData != null) {\n\n                    // loop through all the rows\n                    for (var y = 0; y < this.getNumRows(); y++) {\n\n                        // loop through all the columns\n                        for (var x = 0; x < this.getNumColumns(); x++) {\n\n                            // get the cell value\n                            var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n                            // set the cell value\n                            this.setTableDataCellValue(x, y, toTableData, cellValue);\n                        }\n                    }\n                }\n            }\n        }\n\n        return toComponentState;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nTableController.$inject = [\n    '$anchorScroll',\n    '$location',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService',\n    'UtilService'\n];\n\nexport default TableController;\n"]}