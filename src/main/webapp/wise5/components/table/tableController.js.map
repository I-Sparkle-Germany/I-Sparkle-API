{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$injector","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","notebookConfig","getNotebookConfig","connectedComponentUpdateOnOptions","value","allowedConnectedComponentTypes","type","currentNode","getCurrentNode","id","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","columnCellSizes","parseColumnCellSizes","showSaveButton","showSubmitButton","tableId","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","resetTable","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","setupTable","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","annotation","annotationNodeId","annotationComponentId","getNumber","num","array","Array","isNaN","parseInt","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","defaultComponentState","createBlankComponentState","mergedComponentState","copyTableDataCellText","studentAsset","params","trialIndex","seriesIndex","studentDataVersion","version","series","length","tempSeries","setSeriesIntoTable","trials","trial","multipleSeries","skipFirstRow","xColumn","yColumn","tableDataRows","getTableDataRows","data","dataRowCounter","r","x","y","dataRow","setTableDataCellValue","table","row","cell","cellValue","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","rowOrColumn","numRows","answer","confirm","authoringViewTableSizeChanged","numColumns","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","c","getCellObjectFromComponentContent","createEmptyCell","push","cellObject","editable","size","newCell","cellSize","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","hideIFrames","hash","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","showIFrames","catch","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","$broadcast","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringShowPreviousWorkNode","getNodeById","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","importWorkNodeId","importWorkComponentId","show","setShowSubmitButtonValue","firstRow","index","authoringSetColumnCellSizes","column","connectedComponents","newConnectedComponent","connectedComponentType","authoringConnectedComponentComponentIdChanged","tags","tag","a","allowedConnectedComponentType","$inject"],"mappings":"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","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\n\nclass TableController {\n    constructor($anchorScroll,\n                $filter,\n                $injector,\n                $location,\n                $mdDialog,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService,\n                TableService,\n                UtilService) {\n\n        this.$anchorScroll = $anchorScroll;\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$location = $location;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n        this.UtilService = UtilService;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.$translate = this.$filter('translate');\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // counter to keep track of the number of submits\n        this.submitCounter = 0;\n\n        // flag for whether to show the advanced authoring\n        this.showAdvancedAuthoring = false;\n\n        // whether the JSON authoring is displayed\n        this.showJSONAuthoring = false;\n\n        // the latest annotations\n        this.latestAnnotations = null;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // whether the snip table button is shown or not\n        this.isSnipTableButtonVisible = true;\n\n        // the label for the notebook in thos project\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n        // the options for when to update this component from a connected component\n        this.connectedComponentUpdateOnOptions = [\n            {\n                value: 'change',\n                text: 'Change'\n            },\n            {\n                value: 'submit',\n                text: 'Submit'\n            }\n        ];\n\n        // the component types we are allowed to connect to\n        this.allowedConnectedComponentTypes = [\n            {\n                type: 'Graph'\n            },\n            {\n                type: 'Table'\n            }\n        ];\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        /*\n         * get the original component content. this is used when showing\n         * previous work from another component.\n         */\n        this.originalComponentContent = this.$scope.originalComponentContent;\n\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\n        this.mode = this.$scope.mode;\n\n        this.latestConnectedComponentState = null;\n        this.latestConnectedComponentParams = null;\n\n        this.workgroupId = this.$scope.workgroupId;\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n        /*\n         * for the authoring view, get the cell sizes for each column if they\n         * have been customized\n         */\n        this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n                this.tableId = 'table_' + this.nodeId + \"_\" + this.componentId;\n\n                // get the latest annotations\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n\n                if (this.mode === 'grading') {\n                    // get the latest annotations\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                }\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isSnipTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'showPreviousWork') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                // generate the summernote rubric element id\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n\n                // set the component rubric into the summernote rubric\n                this.summernoteRubricHTML = this.componentContent.rubric;\n\n                // the tooltip text for the insert WISE asset button\n                var insertAssetString = this.$translate('INSERT_ASSET');\n\n                /*\n                 * create the custom button for inserting WISE assets into\n                 * summernote\n                 */\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n\n                /*\n                 * the options that specifies the tools to display in the\n                 * summernote prompt\n                 */\n                this.summernoteRubricOptions = {\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'underline', 'clear']],\n                        ['fontname', ['fontname']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['table', ['table']],\n                        ['insert', ['link', 'video']],\n                        ['view', ['fullscreen', 'codeview', 'help']],\n                        ['customButton', ['insertAssetButton']]\n                    ],\n                    height: 300,\n                    disableDragAndDrop: true,\n                    buttons: {\n                        insertAssetButton: InsertAssetButton\n                    }\n                };\n\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n\n                    /*\n                     * reset the values so that the preview is refreshed with\n                     * the new content\n                     */\n                    this.submitCounter = 0;\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                    this.resetTable();\n                }.bind(this), true);\n            }\n\n            var componentState = null;\n\n            // get the component state from the scope\n            componentState = this.$scope.componentState;\n\n            // set whether studentAttachment is enabled\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n            if (this.mode == 'student') {\n                if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n                    // we will show work from another component\n                    this.handleConnectedComponents();\n                }  else if (this.TableService.componentStateHasStudentWork(componentState, this.componentContent)) {\n                    /*\n                     * the student has work so we will populate the work into this\n                     * component\n                     */\n                    this.setStudentWork(componentState);\n                } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                    // we will import work from another component\n                    this.handleConnectedComponents();\n                } else if (componentState == null) {\n                    // check if we need to import work\n\n                    var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n                    var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n                    if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n                        /*\n                         * the student does not have any work and there are connected\n                         * components so we will get the work from the connected\n                         * components\n                         */\n                        this.handleConnectedComponents();\n                    }\n                }\n            } else {\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n            }\n\n            // set up the table\n            this.setupTable();\n\n            // check if the student has used up all of their submits\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                /*\n                 * the student has used up all of their chances to submit so we\n                 * will disable the submit button\n                 */\n                this.isSubmitButtonDisabled = true;\n            }\n\n            // check if we need to lock this component\n            this.calculateDisabled();\n\n            if (this.$scope.$parent.nodeController != null) {\n                // register this component with the parent node\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                if (connectedComponentParams.updateOn === 'change') {\n                    // get the component type that has changed\n                    var componentType = connectedComponent.type;\n\n                    /*\n                     * make a copy of the component state so we don't accidentally\n                     * change any values in the referenced object\n                     */\n                    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                    if (componentType === 'Table') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Graph') {\n\n                        // set the graph data into the table\n                        this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    } else if (componentType === 'Embedded') {\n\n                        // set the table data\n                        this.$scope.tableController.setStudentWork(componentState);\n\n                        // the table has changed\n                        this.$scope.tableController.isDirty = true;\n                    }\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a promise of a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            var deferred = this.$q.defer();\n            let getState = false;\n            let action = 'change';\n\n            if (isSubmit) {\n                if (this.$scope.tableController.isSubmitDirty) {\n                    getState = true;\n                    action = 'submit';\n                }\n            } else {\n                if (this.$scope.tableController.isDirty) {\n                    getState = true;\n                    action = 'save';\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                this.$scope.tableController.createComponentState(action).then((componentState) => {\n                    deferred.resolve(componentState);\n                });\n            } else {\n                /*\n                 * the student does not have any unsaved changes in this component\n                 * so we don't need to save a component state for this component.\n                 * we will immediately resolve the promise here.\n                 */\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                // trigger the submit\n                var submitTriggeredBy = 'nodeSubmitButton';\n                this.submit(submitTriggeredBy);\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n                    this.lockIfNecessary();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                }\n            }\n\n            // check if the component state is from a connected component\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n                // get the connected component params\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n                if (connectedComponentParams != null) {\n\n                    if (connectedComponentParams.updateOn === 'save' ||\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n                        var performUpdate = false;\n\n                        /*\n                         * make a copy of the component state so we don't accidentally\n                         * change any values in the referenced object\n                         */\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n                        /*\n                         * make sure the student hasn't entered any values into the\n                         * table so that we don't overwrite any of their work.\n                         */\n                        if (this.isTableEmpty() || this.isTableReset()) {\n                            /*\n                             * the student has not entered any values into the table\n                             * so we can update it\n                             */\n                            performUpdate = true;\n                        } else {\n                            /*\n                             * the student has entered values into the table so we\n                             * will ask them if they want to update it\n                             */\n                            /*\n                            var answer = confirm('Do you want to update the connected table?');\n\n                            if (answer) {\n                                // the student answered yes\n                                performUpdate = true;\n                            }\n                            */\n                            performUpdate = true;\n                        }\n\n                        if (performUpdate) {\n                            // set the table data\n                            this.$scope.tableController.setStudentWork(componentState);\n\n                            // the table has changed\n                            this.$scope.tableController.isDirty = true;\n                            this.$scope.tableController.isSubmitDirty = true;\n                        }\n\n                        /*\n                         * remember the component state and connected component params\n                         * in case we need to use them again later\n                         */\n                        this.latestConnectedComponentState = componentState;\n                        this.latestConnectedComponentParams = connectedComponentParams;\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                var annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    var annotationNodeId = annotation.nodeId;\n                    var annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            var array = new Array();\n\n            // make sure num is a valid number\n            if (num != null && !isNaN(num)) {\n                array = new Array(parseInt(num));\n            }\n\n            return array;\n        }\n\n        /*\n         * Listen for the assetSelected event which occurs when the user\n         * selects an asset from the choose asset popup\n         */\n        this.$scope.$on('assetSelected', (event, args) => {\n\n            if (args != null) {\n\n                // make sure the event was fired for this component\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\n                    // the asset was selected for this component\n                    var assetItem = args.assetItem;\n\n                    if (assetItem != null) {\n                        var fileName = assetItem.fileName;\n\n                        if (fileName != null) {\n                            /*\n                             * get the assets directory path\n                             * e.g.\n                             * /wise/curriculum/3/\n                             */\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n                            var summernoteId = '';\n\n                            if (args.target == 'prompt') {\n                                // the target is the summernote prompt element\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n                            } else if (args.target == 'rubric') {\n                                // the target is the summernote rubric element\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n                            }\n\n                            if (summernoteId != '') {\n                                if (this.UtilService.isImage(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // add the image html\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n                                } else if (this.UtilService.isVideo(fileName)) {\n                                    /*\n                                     * move the cursor back to its position when the asset chooser\n                                     * popup was clicked\n                                     */\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\n                                    $('#' + summernoteId).summernote('editor.focus');\n\n                                    // insert the video element\n                                    var videoElement = document.createElement('video');\n                                    videoElement.controls = 'true';\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // close the popup\n            this.$mdDialog.hide();\n        });\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n\n        var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n        var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n            // this component imports work so we will import the work again\n            this.handleConnectedComponents();\n        } else if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n            // import the work from the other component\n            this.importWork();\n        } else {\n            // get the original table from the step content\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n            // the table has changed so we will perform additional processing\n            this.studentDataChanged();\n        }\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n\n                var submitCounter = studentData.submitCounter;\n\n                if (submitCounter != null) {\n                    // populate the submit counter\n                    this.submitCounter = submitCounter;\n                }\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            let serverSaveTime = latestState.serverSaveTime;\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        // trigger the submit\n        var submitTriggeredBy = 'componentSubmitButton';\n        this.submit(submitTriggeredBy);\n    };\n\n    /**\n     * A submit was triggered by the component submit button or node submit button\n     * @param submitTriggeredBy what triggered the submit\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n     */\n    submit(submitTriggeredBy) {\n\n        if (this.isSubmitDirty) {\n            // the student has unsubmitted work\n\n            var performSubmit = true;\n\n            if (this.componentContent.maxSubmitCount != null) {\n                // there is a max submit count\n\n                // calculate the number of submits this student has left\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n                var message = '';\n\n                if (numberOfSubmitsLeft <= 0) {\n                    // the student does not have any more chances to submit\n                    performSubmit = false;\n                } else if (numberOfSubmitsLeft == 1) {\n                    /*\n                     * the student has one more chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                } else if (numberOfSubmitsLeft > 1) {\n                    /*\n                     * the student has more than one chance to submit left so maybe\n                     * we should ask the student if they are sure they want to submit\n                     */\n                }\n            }\n\n            if (performSubmit) {\n\n                /*\n                 * set isSubmit to true so that when the component state is\n                 * created, it will know that is a submit component state\n                 * instead of just a save component state\n                 */\n                this.isSubmit = true;\n\n                // increment the submit counter\n                this.incrementSubmitCounter();\n\n                // check if the student has used up all of their submits\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n                    /*\n                     * the student has used up all of their submits so we will\n                     * disable the submit button\n                     */\n                    this.isSubmitButtonDisabled = true;\n                }\n\n                if (this.mode === 'authoring') {\n                    /*\n                     * we are in authoring mode so we will set values appropriately\n                     * here because the 'componentSubmitTriggered' event won't\n                     * work in authoring mode\n                     */\n                    this.isDirty = false;\n                    this.isSubmitDirty = false;\n                    this.createComponentState('submit');\n                }\n\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n                    // tell the parent node that this component wants to submit\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\n                    // nothing extra needs to be performed\n                }\n            } else {\n                /*\n                 * the student has cancelled the submit so if a component state\n                 * is created, it will just be a regular save and not submit\n                 */\n                this.isSubmit = false;\n            }\n        }\n    }\n\n    /**\n     * Increment the submit counter\n     */\n    incrementSubmitCounter() {\n        this.submitCounter++;\n    }\n\n    lockIfNecessary() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        var action = 'change';\n\n        // create a component state populated with the student data\n        this.createComponentState(action).then((componentState) => {\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\n        });\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @param action the action that is triggering creating of this component state\n     * e.g. 'submit', 'save', 'change'\n     * @return a promise that will return a component state\n     */\n    createComponentState(action) {\n\n        var deferred = this.$q.defer();\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        var studentData = {};\n\n        // insert the table data\n        studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n        // set the submit counter\n        studentData.submitCounter = this.submitCounter;\n\n        // set the flag for whether the student submitted this work\n        componentState.isSubmit = this.isSubmit;\n\n        // set the student data into the component state\n        componentState.studentData = studentData;\n\n        // set the component type\n        componentState.componentType = 'Table';\n\n        // set the node id\n        componentState.nodeId = this.nodeId;\n\n        // set the component id\n        componentState.componentId = this.componentId;\n\n        /*\n         * reset the isSubmit value so that the next component state\n         * doesn't maintain the same value\n         */\n        this.isSubmit = false;\n\n        /*\n         * perform any additional processing that is required before returning\n         * the component state\n         */\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n        return deferred.promise;\n    };\n\n    /**\n     * Create a new component state with no student data\n     * @return a component state with no student data\n     */\n    createBlankComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Perform any additional processing that is required before returning the\n     * component state\n     * Note: this function must call deferred.resolve() otherwise student work\n     * will not be saved\n     * @param deferred a deferred object\n     * @param componentState the component state\n     * @param action the action that we are creating the component state for\n     * e.g. 'submit', 'save', 'change'\n     */\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\n        /*\n         * we don't need to perform any additional processing so we can resolve\n         * the promise immediately\n         */\n        deferred.resolve(componentState);\n    }\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.originalComponentContent != null) {\n            // this is a show previous work component\n\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\n                // show the prompt from the previous work component\n                prompt = this.componentContent.prompt;\n            } else {\n                // show the prompt from the original component\n                prompt = this.originalComponentContent.prompt;\n            }\n        } else if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n            var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n                // get the latest component state from the component we are importing from\n                var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n                if (importWorkComponentState != null) {\n\n                    // create a blank component state without student work\n                    var defaultComponentState = this.createBlankComponentState();\n\n                    if (defaultComponentState != null && defaultComponentState.studentData != null) {\n                        // set the authored component content table data into the component state\n                        defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n                    }\n\n                    // copy the cell text values into the default component state\n                    var mergedComponentState = this.copyTableDataCellText(importWorkComponentState, defaultComponentState);\n\n                    // set the merged component state into this component\n                    this.setStudentWork(mergedComponentState);\n\n                    // make the work dirty so that it gets saved\n                    this.studentDataChanged();\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachStudentAsset(studentAsset) {\n        // TODO: implement me\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        var trialIndex = 0;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.trialIndex != null) {\n                // get the trial index\n                trialIndex = params.trialIndex;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the student data\n            var studentData = componentState.studentData;\n\n            // get the student data version\n            var studentDataVersion = studentData.version;\n\n            if (studentDataVersion == null || studentDataVersion == 1) {\n                // this is the old student data format that can't contain trials\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    // set the series data into the table\n                    this.setSeriesIntoTable(tempSeries);\n                }\n            } else {\n                // this is the new student data format that can contain trials\n\n                // get all the trials\n                var trials = studentData.trials;\n\n                if (trials != null) {\n\n                    // get the specific trial we want\n                    var trial = trials[trialIndex];\n\n                    if (trial != null) {\n\n                        // get the series in the trial\n                        var multipleSeries = trial.series;\n\n                        if (multipleSeries != null) {\n\n                            // get the specific series we want\n                            var series = multipleSeries[seriesIndex];\n\n                            // set the series data into the table\n                            this.setSeriesIntoTable(series);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the series data into the table\n     * @param series an object that contains the data for a single series\n     * @param params the parameters for where to place the points in the table\n     */\n    setSeriesIntoTable(series, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = true;\n        var xColumn = 0;\n        var yColumn = 1;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n        }\n\n        if (series != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            // get the data from the series\n            var data = series.data;\n\n            if (data != null) {\n\n                // our counter for traversing the data rows\n                var dataRowCounter = 0;\n\n                // loop through all the table data rows\n                for (var r = 0; r < tableDataRows.length; r++) {\n\n                    if (skipFirstRow && r === 0) {\n                        // skip the first table data row\n                        continue;\n                    }\n\n                    var x = '';\n                    var y = '';\n\n                    // get the data row\n                    var dataRow = data[dataRowCounter];\n\n                    if (dataRow != null) {\n                        // get the x and y values from the data row\n                        x = dataRow[0];\n                        y = dataRow[1];\n                    }\n\n                    // set the x and y values into the table data\n                    this.setTableDataCellValue(xColumn, r, null, x);\n                    this.setTableDataCellValue(yColumn, r, null, y);\n\n                    // increment the data row counter\n                    dataRowCounter++;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, table, value) {\n\n        var tableDataRows = table;\n\n        if (table == null) {\n            // get the table data rows\n            tableDataRows = this.getTableDataRows();\n        }\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the value of a cell in the table\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param table (optional) table data to get the value from. this is used\n     * when we want to look up the value in the default authored table\n     * @returns the cell value (text or a number)\n     */\n    getTableDataCellValue(x, y, table) {\n\n        var cellValue = null;\n\n        if (table == null) {\n            // get the table data rows\n            table = this.getTableDataRows();\n        }\n\n        if (table != null) {\n\n            // get the row we want\n            var row = table[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cellValue = cell.text;\n                }\n            }\n        }\n\n        return cellValue;\n    }\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        /*\n         * notify the parent node that the content has changed which will save\n         * the project to the server\n         */\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            /*\n             * notify the parent node that the content has changed which will save\n             * the project to the server\n             */\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n        } catch(e) {\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * Confirm whether user really want to change row/column size. Only confirm if they're decreasing the size.\n     */\n    authoringViewTableSizeConfirmChange(rowOrColumn, oldValue) {\n        if (rowOrColumn === 'rows') {\n            if (this.authoringComponentContent.numRows < oldValue) {\n                // author wants to decrease number of rows, so confirm\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numRows = oldValue;\n                }\n            } else {\n                // author wants to increase number of rows, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        } else if (rowOrColumn === 'columns') {\n            if (this.authoringComponentContent.numColumns < oldValue) {\n                // author wants to decrease number of columns, so confirm\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\n                if (answer) {\n                    // author confirms yes, proceed with change\n                    this.authoringViewTableSizeChanged();\n                } else {\n                    // author says no, so revert\n                    this.authoringComponentContent.numColumns = oldValue;\n                }\n            } else {\n                // author wants to increase number of columns, so let them.\n                this.authoringViewTableSizeChanged();\n            }\n        }\n    }\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n\n                // get the column cell size\n                var cellSize = this.columnCellSizes[c];\n\n                if (cellSize != null) {\n                    // set the cell size\n                    newCell.size = cellSize;\n                }\n\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n\n            // update the column cell sizes model\n            this.parseColumnCellSizes(this.authoringComponentContent);\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n\n                // update the column cell sizes model\n                this.parseColumnCellSizes(this.authoringComponentContent);\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get all the step node ids in the project\n     * @returns all the step node ids\n     */\n    getStepNodeIds() {\n        var stepNodeIds = this.ProjectService.getNodeIds();\n\n        return stepNodeIds;\n    }\n\n    /**\n     * Get the step number and title\n     * @param nodeId get the step number and title for this node\n     * @returns the step number and title\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n\n        return nodePositionAndTitle;\n    }\n\n    /**\n     * Get the components in a step\n     * @param nodeId get the components in the step\n     * @returns the components in the step\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        return components;\n    }\n\n    /**\n     * Check if a node is a step node\n     * @param nodeId the node id to check\n     * @returns whether the node is an application node\n     */\n    isApplicationNode(nodeId) {\n        var result = this.ProjectService.isApplicationNode(nodeId);\n\n        return result;\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Get the number of rows in the table\n     * @returns the number of rows in the table\n     */\n    getNumRows() {\n        return this.componentContent.numRows;\n    }\n\n    /**\n     * Get the number of columns in the table\n     * @returns the number of columns in the table\n     */\n    getNumColumns() {\n        return this.componentContent.numColumns;\n    }\n\n    /**\n     * Check if the table is empty. The table is empty if all the\n     * cells are empty string.\n     * @returns whether the table is empty\n     */\n    isTableEmpty() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get a cell value\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                if (cellValue != null && cellValue != '') {\n                    // the cell is not empty so the table is not empty\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the table is set to the default values. The table\n     * is set to the default values if all the cells match the\n     * values in the default authored table.\n     * @returns whether the table is set to the default values\n     */\n    isTableReset() {\n        var result = true;\n\n        var numRows = this.getNumRows();\n        var numColumns = this.getNumColumns();\n\n        // get the default table\n        var defaultTable = this.componentContent.tableData;\n\n        // loop through all the rows\n        for (var r = 0; r < numRows; r++) {\n\n            // loop through all the cells in the row\n            for (var c = 0; c < numColumns; c++) {\n\n                // get the cell value from the student table\n                var cellValue = this.getTableDataCellValue(c, r);\n\n                // get the cell value from the default table\n                var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n                if (cellValue != defaultCellValue) {\n                    // the cell values do not match so the table is not set to the default values\n                    result = false;\n                    break;\n                }\n            }\n\n            if (result == false) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Snip the table by converting it to an image\n     * @param $event the click event\n     */\n    snipTable($event) {\n\n        // get the table element. this will obtain an array.\n        var tableElement = angular.element('#table_' + this.nodeId + '_' + this.componentId);\n\n        if (tableElement != null && tableElement.length > 0) {\n\n            // hide all the iframes otherwise html2canvas may cut off the table\n            this.UtilService.hideIFrames();\n\n            // scroll to the component so html2canvas doesn't cut off the table\n            this.$location.hash(this.componentId);\n            this.$anchorScroll();\n\n            // get the table element\n            tableElement = tableElement[0];\n\n            try {\n                // convert the table element to a canvas element\n                html2canvas(tableElement).then((canvas) => {\n\n                    // get the canvas as a base64 string\n                    var img_b64 = canvas.toDataURL('image/png');\n\n                    // get the image object\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNewItem($event, imageObject);\n\n                    // we are done capturing the table so we will show the iframes again\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                }).catch(() => {\n\n                    /*\n                     * an error occurred while trying to capture the table so we\n                     * will show the iframes again\n                     */\n                    this.UtilService.showIFrames();\n\n                    /*\n                     * scroll to the component in case the view has shifted after\n                     * showing the iframe\n                     */\n                    this.$location.hash(this.componentId);\n                    this.$anchorScroll();\n                });\n            } catch(e) {\n\n                /*\n                 * an error occurred while trying to capture the table so we\n                 * will show the iframes again\n                 */\n                this.UtilService.showIFrames();\n\n                /*\n                 * scroll to the component in case the view has shifted after\n                 * showing the iframe\n                 */\n                this.$location.hash(this.componentId);\n                this.$anchorScroll();\n            }\n\n        }\n    }\n\n    /**\n     * Check whether we need to show the snip table button\n     * @return whether to show the snip table button\n     */\n    showSnipTableButton() {\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Copy the table data cell text from one component state to another\n     * @param fromComponentState get the cell text values from this component state\n     * @param toComponentState set the cell text values in this component state\n     */\n    copyTableDataCellText(fromComponentState, toComponentState) {\n\n        if (fromComponentState != null && toComponentState != null) {\n            var fromStudentData = fromComponentState.studentData;\n            var toStudentData = toComponentState.studentData;\n\n            if (fromStudentData != null && toStudentData != null) {\n                var fromTableData = fromStudentData.tableData;\n                var toTableData = toStudentData.tableData;\n\n                if (fromTableData != null & toTableData != null) {\n\n                    // loop through all the rows\n                    for (var y = 0; y < this.getNumRows(); y++) {\n\n                        // loop through all the columns\n                        for (var x = 0; x < this.getNumColumns(); x++) {\n\n                            // get the cell value\n                            var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n                            if (cellValue != null) {\n                                // set the cell value\n                                this.setTableDataCellValue(x, y, toTableData, cellValue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return toComponentState;\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n\n    /**\n     * The show previous work checkbox was clicked\n     */\n    authoringShowPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.showPreviousWork) {\n            /*\n             * show previous work has been turned off so we will clear the\n             * show previous work node id, show previous work component id, and\n             * show previous work prompt values\n             */\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The show previous work node id has changed\n     */\n    authoringShowPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\n\n            /*\n             * the show previous work node id is null so we will also set the\n             * show previous component id to null\n             */\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\n        } else {\n            this.authoringShowPreviousWorkNode = this.ProjectService.getNodeById(this.authoringComponentContent.showPreviousWorkNodeId);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The show previous work component id has changed\n     */\n    authoringShowPreviousWorkComponentIdChanged() {\n\n        // get the show previous work node id\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\n\n        // get the show previous work prompt boolean value\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\n\n        // get the old show previous work component id\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component id\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\n\n        // get the new show previous work component\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\n\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\n            // the new show previous work component is empty\n\n            // save the component\n            this.authoringViewComponentChanged();\n        } else if (newShowPreviousWorkComponent != null) {\n\n            // get the current component type\n            var currentComponentType = this.componentContent.type;\n\n            // get the new component type\n            var newComponentType = newShowPreviousWorkComponent.type;\n\n            // check if the component types are different\n            if (newComponentType != currentComponentType) {\n                /*\n                 * the component types are different so we will need to change\n                 * the whole component\n                 */\n\n                // make sure the author really wants to change the component type\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\n\n                if (answer) {\n                    // the author wants to change the component type\n\n                    /*\n                     * get the component service so we can make a new instance\n                     * of the component\n                     */\n                    var componentService = this.$injector.get(newComponentType + 'Service');\n\n                    if (componentService != null) {\n\n                        // create a new component\n                        var newComponent = componentService.createComponent();\n\n                        // set move over the values we need to keep\n                        newComponent.id = this.authoringComponentContent.id;\n                        newComponent.showPreviousWork = true;\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\n\n                        /*\n                         * update the authoring component content JSON string to\n                         * change the component\n                         */\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\n\n                        // update the component in the project and save the project\n                        this.advancedAuthoringViewComponentChanged();\n                    }\n                } else {\n                    /*\n                     * the author does not want to change the component type so\n                     * we will rollback the showPreviousWorkComponentId value\n                     */\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\n                }\n            } else {\n                /*\n                 * the component types are the same so we do not need to change\n                 * the component type and can just save\n                 */\n                this.authoringViewComponentChanged();\n            }\n        }\n    }\n\n    /**\n     * Check if a component generates student work\n     * @param component the component\n     * @return whether the component generates student work\n     */\n    componentHasWork(component) {\n        var result = true;\n\n        if (component != null) {\n            result = this.ProjectService.componentHasWork(component);\n        }\n\n        return result;\n    }\n\n    /**\n     * The import previous work checkbox was clicked\n     */\n    authoringImportPreviousWorkClicked() {\n\n        if (!this.authoringComponentContent.importPreviousWork) {\n            /*\n             * import previous work has been turned off so we will clear the\n             * import previous work node id, and import previous work\n             * component id\n             */\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The import previous work node id has changed\n     */\n    authoringImportPreviousWorkNodeIdChanged() {\n\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\n\n            /*\n             * the import previous work node id is null so we will also set the\n             * import previous component id to null\n             */\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The import previous work component id has changed\n     */\n    authoringImportPreviousWorkComponentIdChanged() {\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * The author has changed the rubric\n     */\n    summernoteRubricHTMLChanged() {\n\n        // get the summernote rubric html\n        var html = this.summernoteRubricHTML;\n\n        /*\n         * remove the absolute asset paths\n         * e.g.\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n         * will be changed to\n         * <img src='sun.png'/>\n         */\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n        /*\n         * replace <a> and <button> elements with <wiselink> elements when\n         * applicable\n         */\n        html = this.UtilService.insertWISELinks(html);\n\n        // update the component rubric\n        this.authoringComponentContent.rubric = html;\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Get the import previous work node id\n     * @return the import previous work node id or null\n     */\n    getImportPreviousWorkNodeId() {\n        var importPreviousWorkNodeId = null;\n\n        if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n            importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n                /*\n                 * check if the node id is in the field that we used to store\n                 * the import previous work node id in\n                 */\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n            }\n        }\n\n        return importPreviousWorkNodeId;\n    }\n\n    /**\n     * Get the import previous work component id\n     * @return the import previous work component id or null\n     */\n    getImportPreviousWorkComponentId() {\n        var importPreviousWorkComponentId = null;\n\n        if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n                /*\n                 * check if the component id is in the field that we used to store\n                 * the import previous work component id in\n                 */\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n            }\n        }\n\n        return importPreviousWorkComponentId;\n    }\n\n    /**\n     * Set the show submit button value\n     * @param show whether to show the submit button\n     */\n    setShowSubmitButtonValue(show) {\n\n        if (show == null || show == false) {\n            // we are hiding the submit button\n            this.authoringComponentContent.showSaveButton = false;\n            this.authoringComponentContent.showSubmitButton = false;\n        } else {\n            // we are showing the submit button\n            this.authoringComponentContent.showSaveButton = true;\n            this.authoringComponentContent.showSubmitButton = true;\n        }\n\n        /*\n         * notify the parent node that this component is changing its\n         * showSubmitButton value so that it can show save buttons on the\n         * step or sibling components accordingly\n         */\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n    }\n\n    /**\n     * The showSubmitButton value has changed\n     */\n    showSubmitButtonValueChanged() {\n\n        /*\n         * perform additional processing for when we change the showSubmitButton\n         * value\n         */\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Make all the cells uneditable\n     */\n    makeAllCellsUneditable() {\n\n        // get the table data\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // loop through all the rows\n            for (var r = 0; r < tableData.length; r++) {\n                var row = tableData[r];\n\n                if (row != null) {\n\n                    // loop through all the cells in the row\n                    for (var c = 0; c < row.length; c++) {\n\n                        // get a cell\n                        var cell = row[c];\n\n                        if (cell != null) {\n\n                            // make the cell uneditable\n                            cell.editable = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Make all the cells edtiable\n     */\n    makeAllCellsEditable() {\n\n        // get the table data\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // loop through all the rows\n            for (var r = 0; r < tableData.length; r++) {\n                var row = tableData[r];\n\n                if (row != null) {\n\n                    // loop through all the cells in the row\n                    for (var c = 0; c < row.length; c++) {\n\n                        // get a cell\n                        var cell = row[c];\n\n                        if (cell != null) {\n\n                            // make the cell editable\n                            cell.editable = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Parse the column cell sizes. We will get the column cell sizes by looking\n     * at size value of each column in the first row.\n     * @param componentContent the component content\n     */\n    parseColumnCellSizes(componentContent) {\n\n        var columnCellSizes = {};\n\n        if (componentContent != null) {\n\n            // get the table data\n            var tableData = componentContent.tableData;\n\n            if (tableData != null) {\n                var firstRow = tableData[0];\n\n                if (firstRow != null) {\n\n                    // loop through all the columns\n                    for (var x = 0; x < firstRow.length; x++) {\n\n                        // get the cell object\n                        var cell = firstRow[x];\n\n                        /*\n                         * get the cell size and set it into our mapping of\n                         * column to cell size\n                         */\n                        columnCellSizes[x] = cell.size;\n                    }\n                }\n            }\n        }\n\n        return columnCellSizes;\n    }\n\n    /**\n     * One of the column cell sizes has changed\n     */\n    authoringViewColumnSizeChanged(index) {\n\n        if (index != null) {\n            var cellSize = this.columnCellSizes[index];\n\n            if (cellSize == '') {\n                cellSize = null;\n            }\n\n            // set the cell size for all the cells in the column\n            this.authoringSetColumnCellSizes(index, cellSize);\n        }\n    }\n\n    /**\n     * Set the cell sizes for all the cells in a column\n     * @param column the column number\n     * @param size the cell size\n     */\n    authoringSetColumnCellSizes(column, size) {\n\n        // get the table data\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // loop through all the rows\n            for (var r = 0; r < tableData.length; r++) {\n                var row = tableData[r];\n\n                if (row != null) {\n\n                    // get the cell in the column\n                    var cell = row[column];\n\n                    if (cell != null) {\n                        // set the cell size\n                        cell.size = size;\n                    }\n                }\n            }\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Import any work we need from connected components\n     */\n    handleConnectedComponents() {\n\n        // get the connected components\n        var connectedComponents = this.componentContent.connectedComponents;\n\n        if (connectedComponents != null) {\n\n            var componentStates = [];\n\n            // loop through all the connected components\n            for (var c = 0; c < connectedComponents.length; c++) {\n                var connectedComponent = connectedComponents[c];\n\n                if (connectedComponent != null) {\n                    var nodeId = connectedComponent.nodeId;\n                    var componentId = connectedComponent.componentId;\n                    var type = connectedComponent.type;\n\n                    if (type == 'showWork') {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n\n                        // we are showing work so we will not allow the student to edit it\n                        this.isDisabled = true;\n                    } else if (type == 'importWork' || type == null) {\n                        // we are getting the work from this student\n\n                        // get the latest component state from the component\n                        var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                        if (componentState != null) {\n                            componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n                        }\n                    }\n                }\n            }\n\n            /*\n             * Populate the component state into this component. For now we will\n             * only handle one component state from one connected component. In\n             * the future we may allow multiple component states from multiple\n             * connected components and merge the tables.\n             */\n            this.setStudentWork(componentStates[0]);\n\n            // make the work dirty so that it gets saved\n            this.studentDataChanged();\n        }\n    }\n\n    /**\n     * Add a connected component\n     */\n    authoringAddConnectedComponent() {\n\n        /*\n         * create the new connected component object that will contain a\n         * node id and component id\n         */\n        var newConnectedComponent = {};\n        newConnectedComponent.nodeId = this.nodeId;\n        newConnectedComponent.componentId = null;\n        newConnectedComponent.type = 'importWork';\n\n        // initialize the array of connected components if it does not exist yet\n        if (this.authoringComponentContent.connectedComponents == null) {\n            this.authoringComponentContent.connectedComponents = [];\n        }\n\n        // add the connected component\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a connected component\n     * @param index the index of the component to delete\n     */\n    authoringDeleteConnectedComponent(index) {\n\n        // ask the author if they are sure they want to delete the connected component\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n        if (answer) {\n            // the author answered yes to delete\n\n            if (this.authoringComponentContent.connectedComponents != null) {\n                this.authoringComponentContent.connectedComponents.splice(index, 1);\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Get the connected component type\n     * @param connectedComponent get the component type of this connected component\n     * @return the connected component type\n     */\n    authoringGetConnectedComponentType(connectedComponent) {\n\n        var connectedComponentType = null;\n\n        if (connectedComponent != null) {\n\n            // get the node id and component id of the connected component\n            var nodeId = connectedComponent.nodeId;\n            var componentId = connectedComponent.componentId;\n\n            // get the component\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                // get the component type\n                connectedComponentType = component.type;\n            }\n        }\n\n        return connectedComponentType;\n    }\n\n    /**\n     * The connected component node id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentNodeIdChanged(connectedComponent) {\n        if (connectedComponent != null) {\n\n            // remove all the specific component parameters\n            this.authoringConnectedComponentComponentIdChanged(connectedComponent);\n\n            // clear the component id\n            connectedComponent.componentId = null;\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component component id has changed\n     * @param connectedComponent the connected component that has changed\n     */\n    authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            // default the type to import work\n            connectedComponent.type = 'importWork';\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * The connected component type has changed\n     * @param connectedComponent the connected component that changed\n     */\n    authoringConnectedComponentTypeChanged(connectedComponent) {\n\n        if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n                /*\n                 * the type has changed to import work\n                 */\n            } else if (connectedComponent.type == 'showWork') {\n                /*\n                 * the type has changed to show work\n                 */\n            }\n\n            // the authoring component content has changed so we will save the project\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Add a tag\n     */\n    addTag() {\n\n        if (this.authoringComponentContent.tags == null) {\n            // initialize the tags array\n            this.authoringComponentContent.tags = [];\n        }\n\n        // add a tag\n        this.authoringComponentContent.tags.push('');\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag up\n     * @param index the index of the tag to move up\n     */\n    moveTagUp(index) {\n\n        if (index > 0) {\n            // the index is not at the top so we can move it up\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index back\n            this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Move a tag down\n     * @param index the index of the tag to move down\n     */\n    moveTagDown(index) {\n\n        if (index < this.authoringComponentContent.tags.length - 1) {\n            // the index is not at the bottom so we can move it down\n\n            // remember the tag\n            let tag = this.authoringComponentContent.tags[index];\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n\n            // insert the tag one index forward\n            this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a tag\n     * @param index the index of the tag to delete\n     */\n    deleteTag(index) {\n\n        // ask the author if they are sure they want to delete the tag\n        let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisTag'));\n\n        if (answer) {\n            // the author answered yes to delete the tag\n\n            // remove the tag\n            this.authoringComponentContent.tags.splice(index, 1);\n        }\n\n        // the authoring component content has changed so we will save the project\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Check if we are allowed to connect to this component type\n     * @param componentType the component type\n     * @return whether we can connect to the component type\n     */\n    isConnectedComponentTypeAllowed(componentType) {\n\n        if (componentType != null) {\n\n            let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n            // loop through the allowed connected component types\n            for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n                let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n                if (allowedConnectedComponentType != null) {\n                    if (componentType == allowedConnectedComponentType.type) {\n                        // the component type is allowed\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\nTableController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$mdDialog',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService',\n    'UtilService'\n];\n\nexport default TableController;\n"]}