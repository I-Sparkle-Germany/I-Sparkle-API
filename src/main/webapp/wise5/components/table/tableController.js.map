{"version":3,"sources":["tableController.es6"],"names":[],"mappings":"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","file":"tableController.js","sourcesContent":["class TableController {\n    constructor($rootScope,\n                $scope,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                TableService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.resetTable();\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // set up the table\n                this.setupTable();\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                if (componentState == null) {\n                    // check if we need to import work.\n                    // only import work if the student does not already have\n                    // work for this component\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // set up the table\n                this.setupTable();\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Graph') {\n\n                    // set the graph data into the table\n                    this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                    // the table has changed\n                    this.$scope.tableController.isDirty = true;\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function() {\n\n            var componentState = null;\n\n            if (this.$scope.tableController.isDirty) {\n                // create a component state populated with the student data\n                componentState = this.$scope.tableController.createComponentState();\n\n                // set isDirty to false since this student work is about to be saved\n                this.$scope.tableController.isDirty = false;\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n\n                if (this.isLockAfterSubmit()) {\n                    // disable the component if it was authored to lock after submit\n                    this.isDisabled = true;\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            return new Array(parseInt(num));\n        }\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n        // get the original table from the step content\n        this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n        // the table has changed so we will perform additional processing\n        this.studentDataChanged();\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the table data\n            studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.TableService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachNotebookItemToComponent(notebookItem) {\n        if (notebookItem.studentAsset != null) {\n            // TODO implement me\n        } else if (notebookItem.studentWork != null) {\n            // TODO implement me\n        }\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            if (tableDataRows != null) {\n\n                var data = null;\n\n                var studentData = componentState.studentData;\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    if (tempSeries != null) {\n\n                        // get the data from the series\n                        data = tempSeries.data;\n\n                        if (data != null) {\n\n                            // our counter for traversing the data rows\n                            var dataRowCounter = 0;\n\n                            // loop through all the table data rows\n                            for (var r = 0; r < tableDataRows.length; r++) {\n\n                                if (skipFirstRow && r === 0) {\n                                    // skip the first table data row\n                                    continue;\n                                }\n\n                                var x = '';\n                                var y = '';\n\n                                // get the data row\n                                var dataRow = data[dataRowCounter];\n\n                                if (dataRow != null) {\n                                    // get the x and y values from the data row\n                                    x = dataRow[0];\n                                    y = dataRow[1];\n\n                                }\n\n                                // set the x and y values into the table data\n                                this.setTableDataCellValue(xColumn, r, x);\n                                this.setTableDataCellValue(yColumn, r, y);\n\n                                // increment the data row counter\n                                dataRowCounter++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, value) {\n\n        // get the table data rows\n        var tableDataRows = this.getTableDataRows();\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        var componentId = this.componentContent.id;\n\n        return componentId;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nTableController.$inject = [\n    '$rootScope',\n    '$scope',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService'\n];\n\nexport default TableController;\n"]}