{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","TableService","UtilService","tableData","latestAnnotations","isResetTableButtonVisible","notebookConfig","getNotebookConfig","originalComponentContent","latestConnectedComponentState","latestConnectedComponentParams","tableId","nodeId","componentId","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","getLatestComponentAnnotations","workgroupId","isDisabled","componentState","isStudentAttachmentEnabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","setupTable","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","type","makeCopyOfJSONObject","tableController","isDirty","setGraphDataIntoTableData","bind","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","angular","event","args","getNumber","num","array","Array","isNaN","parseInt","$broadcast","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","$translate","lockIfNecessary","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","submit","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","submitTriggeredBy","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","createNewComponentState","createComponentStateAdditionalProcessing","importWorkComponentState","defaultComponentState","createBlankComponentState","mergedComponentState","copyTableDataCellText","studentAsset","params","trialIndex","seriesIndex","showDataAtMouseX","studentDataVersion","version","series","length","tempSeries","setSeriesIntoTable","trials","trial","multipleSeries","mouseOverPoints","x","latestMouseOverPoint","Math","round","xUnits","xAxis","units","yUnits","yAxis","xAxisTitle","title","text","yAxisTitle","removeAllCellsFromTableData","addTableDataRow","createTableRow","show","singleSeries","closestDataPoint","getClosestDataPoint","data","name","getXFromDataPoint","getYFromDataPoint","row","push","editable","size","columns","column","constructor","createTableCell","dataPoints","minNumericalXDifference","Infinity","dataPoint","dataPointX","numericalDifference","getNumericalAbsoluteDifference","x1","x2","abs","y","skipFirstRow","xColumn","yColumn","tableDataRows","getTableDataRows","dataRowCounter","r","dataRow","setTableDataCellValue","table","value","cell","cellValue","numRows","numColumns","result","getNumRows","getNumColumns","c","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNote","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","importWorkNodeId","importWorkComponentId","componentStates","$inject"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;IAEMA,e;;;AACJ,2BAAYC,aAAZ,EACIC,OADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,EAJJ,EAKIC,UALJ,EAMIC,MANJ,EAOIC,iBAPJ,EAQIC,aARJ,EASIC,WATJ,EAUIC,eAVJ,EAWIC,cAXJ,EAYIC,mBAZJ,EAaIC,kBAbJ,EAcIC,YAdJ,EAeIC,WAfJ,EAeiB;AAAA;;AAAA,kIACTd,OADS,EACAE,SADA,EACWE,UADX,EACuBC,MADvB,EAEXC,iBAFW,EAEQC,aAFR,EAEuBC,WAFvB,EAGXC,eAHW,EAGMC,cAHN,EAGsBC,mBAHtB,EAIXC,kBAJW,EAISE,WAJT;;AAKf,UAAKf,aAAL,GAAqBA,aAArB;AACA,UAAKE,SAAL,GAAiBA,SAAjB;AACA,UAAKE,EAAL,GAAUA,EAAV;AACA,UAAKU,YAAL,GAAoBA,YAApB;;AAEA;AACA,UAAKE,SAAL,GAAiB,IAAjB;;AAEA;AACA,UAAKC,iBAAL,GAAyB,IAAzB;;AAEA;AACA,UAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,UAAKC,cAAL,GAAsB,MAAKT,eAAL,CAAqBU,iBAArB,EAAtB;;AAEA;;;;AAIA,UAAKC,wBAAL,GAAgC,MAAKf,MAAL,CAAYe,wBAA5C;;AAEA,UAAKC,6BAAL,GAAqC,IAArC;AACA,UAAKC,8BAAL,GAAsC,IAAtC;;AAEA,UAAKC,OAAL,GAAe,WAAW,MAAKC,MAAhB,GAAyB,GAAzB,GAA+B,MAAKC,WAAnD;;AAEA,QAAI,MAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YAAKC,eAAL,GAAuB,IAAvB;AACA,YAAKC,mBAAL,GAA2B,MAAKC,gBAAL,CAAsBC,cAAjD;AACA,YAAKC,qBAAL,GAA6B,MAAKF,gBAAL,CAAsBG,gBAAnD;;AAEA;AACA,YAAKhB,iBAAL,GAAyB,MAAKV,iBAAL,CAAuB2B,6BAAvB,CAAqD,MAAKT,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAKS,WAAzF,CAAzB;AACA,YAAKjB,yBAAL,GAAiC,IAAjC;AACD,KARD,MAQO,IAAI,MAAKS,IAAL,KAAc,SAAd,IAA2B,MAAKA,IAAL,KAAc,iBAA7C,EAAgE;AACrE,YAAKE,mBAAL,GAA2B,KAA3B;AACA,YAAKG,qBAAL,GAA6B,KAA7B;AACA,YAAKd,yBAAL,GAAiC,KAAjC;AACA,YAAKkB,UAAL,GAAkB,IAAlB;;AAEA,UAAI,MAAKT,IAAL,KAAc,SAAlB,EAA6B;AAC3B;AACA,cAAKV,iBAAL,GAAyB,MAAKV,iBAAL,CAAuB2B,6BAAvB,CAAqD,MAAKT,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAKS,WAAzF,CAAzB;AACD;AACF,KAVM,MAUA,IAAI,MAAKR,IAAL,KAAc,cAAlB,EAAkC;AACvC,YAAKC,eAAL,GAAuB,KAAvB;AACA,YAAKC,mBAAL,GAA2B,KAA3B;AACA,YAAKG,qBAAL,GAA6B,KAA7B;AACA,YAAKd,yBAAL,GAAiC,KAAjC;AACA,YAAKkB,UAAL,GAAkB,IAAlB;AACD,KANM,MAMA,IAAI,MAAKT,IAAL,KAAc,kBAAlB,EAAsC;AAC3C,YAAKC,eAAL,GAAuB,IAAvB;AACA,YAAKC,mBAAL,GAA2B,KAA3B;AACA,YAAKG,qBAAL,GAA6B,KAA7B;AACA,YAAKd,yBAAL,GAAiC,KAAjC;AACA,YAAKkB,UAAL,GAAkB,IAAlB;AACD;;AAED,QAAIC,iBAAiB,IAArB;;AAEA;AACAA,qBAAiB,MAAK/B,MAAL,CAAY+B,cAA7B;;AAEA;AACA,UAAKC,0BAAL,GAAkC,MAAKR,gBAAL,CAAsBQ,0BAAxD;;AAEA,QAAI,MAAKX,IAAL,IAAa,SAAjB,EAA4B;AAC1B,UAAI,MAAKZ,WAAL,CAAiBwB,6BAAjB,CAA+C,MAAKT,gBAApD,CAAJ,EAA2E;AACzE;AACA,cAAKU,yBAAL;AACD,OAHD,MAGQ,IAAI,MAAK1B,YAAL,CAAkB2B,4BAAlB,CAA+CJ,cAA/C,EAA+D,MAAKP,gBAApE,CAAJ,EAA2F;AACjG;;;;AAIA,cAAKY,cAAL,CAAoBL,cAApB;AACD,OANO,MAMD,IAAI,MAAKtB,WAAL,CAAiB4B,qBAAjB,CAAuC,MAAKb,gBAA5C,CAAJ,EAAmE;AACxE;AACA,cAAKU,yBAAL;AACD,OAHM,MAGA,IAAIH,kBAAkB,IAAtB,EAA4B;AACjC;;AAEA,YAAIO,2BAA2B,MAAKC,2BAAL,EAA/B;AACA,YAAIC,gCAAgC,MAAKC,gCAAL,EAApC;;AAEA,YAAIH,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;AAC7E;AACA,gBAAKE,UAAL;AACD,SAHD,MAGO,IAAI,MAAKjC,WAAL,CAAiB4B,qBAAjB,CAAuC,MAAKb,gBAA5C,CAAJ,EAAmE;AACxE;;;;;AAKA,gBAAKU,yBAAL;AACD;AACF;AACF,KA/BD,MA+BO;AACL;AACA,YAAKE,cAAL,CAAoBL,cAApB;AACD;;AAED;AACA,UAAKY,UAAL;;AAEA;AACA,QAAI,MAAKnB,gBAAL,CAAsBoB,cAAtB,IAAwC,IAAxC,IAAgD,MAAKC,aAAL,IAAsB,MAAKrB,gBAAL,CAAsBoB,cAAhG,EAAgH;AAC9G;;;;AAIA,YAAKE,sBAAL,GAA8B,IAA9B;AACD;;AAED,UAAKC,2BAAL;;AAEA,QAAI,MAAK/C,MAAL,CAAYgD,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC9C;AACA,YAAKjD,MAAL,CAAYgD,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,MAAKlD,MAApE,EAA4E,MAAKwB,gBAAjF;AACD;;AAED;;;;;;;;AAQA,UAAKxB,MAAL,CAAYmD,0CAAZ,GAAyD,UAASC,kBAAT,EAA6BC,wBAA7B,EAAuDtB,cAAvD,EAAuE;;AAE9H,UAAIqB,sBAAsB,IAAtB,IAA8BC,4BAA4B,IAA1D,IAAkEtB,kBAAkB,IAAxF,EAA8F;;AAE5F,YAAIsB,yBAAyBC,QAAzB,KAAsC,QAA1C,EAAoD,CAEnD;;AAED;AACA,YAAIC,gBAAgBH,mBAAmBI,IAAvC;;AAEA;;;;AAIAzB,yBAAiB,KAAKtB,WAAL,CAAiBgD,oBAAjB,CAAsC1B,cAAtC,CAAjB;;AAEA,YAAIwB,kBAAkB,OAAtB,EAA+B;;AAE7B;AACA,eAAKvD,MAAL,CAAY0D,eAAZ,CAA4BtB,cAA5B,CAA2CL,cAA3C;;AAEA;AACA,eAAK/B,MAAL,CAAY0D,eAAZ,CAA4BC,OAA5B,GAAsC,IAAtC;AACD,SAPD,MAOO,IAAIJ,kBAAkB,OAAtB,EAA+B;;AAEpC;AACA,eAAKvD,MAAL,CAAY0D,eAAZ,CAA4BE,yBAA5B,CAAsD7B,cAAtD,EAAsEsB,wBAAtE;;AAEA;AACA,eAAKrD,MAAL,CAAY0D,eAAZ,CAA4BC,OAA5B,GAAsC,IAAtC;AACD,SAPM,MAOA,IAAIJ,kBAAkB,UAAtB,EAAkC;;AAEvC;AACA,eAAKvD,MAAL,CAAY0D,eAAZ,CAA4BtB,cAA5B,CAA2CL,cAA3C;;AAEA;AACA,eAAK/B,MAAL,CAAY0D,eAAZ,CAA4BC,OAA5B,GAAsC,IAAtC;AACD;AACF;AACF,KAxCwD,CAwCvDE,IAxCuD,OAAzD;;AA0CA;;;;;;;;AAQA,UAAK7D,MAAL,CAAY8D,iBAAZ,GAAgC,UAASC,QAAT,EAAmB;AACjD,UAAIC,WAAW,KAAKlE,EAAL,CAAQmE,KAAR,EAAf;AACA,UAAIC,WAAW,KAAf;AACA,UAAIC,SAAS,QAAb;;AAEA,UAAIJ,QAAJ,EAAc;AACZ,YAAI,KAAK/D,MAAL,CAAY0D,eAAZ,CAA4BU,aAAhC,EAA+C;AAC7CF,qBAAW,IAAX;AACAC,mBAAS,QAAT;AACD;AACF,OALD,MAKO;AACL,YAAI,KAAKnE,MAAL,CAAY0D,eAAZ,CAA4BC,OAAhC,EAAyC;AACvCO,qBAAW,IAAX;AACAC,mBAAS,MAAT;AACD;AACF;;AAED,UAAID,QAAJ,EAAc;AACZ;AACA,aAAKlE,MAAL,CAAY0D,eAAZ,CAA4BW,oBAA5B,CAAiDF,MAAjD,EAAyDG,IAAzD,CAA8D,UAACvC,cAAD,EAAoB;AAChFiC,mBAASO,OAAT,CAAiBxC,cAAjB;AACD,SAFD;AAGD,OALD,MAKO;AACL;;;;;AAKAiC,iBAASO,OAAT;AACD;;AAED,aAAOP,SAASQ,OAAhB;AACD,KAhC+B,CAgC9BX,IAhC8B,OAAhC;;AAkCA;;;;;AAKA,UAAK7D,MAAL,CAAYyE,GAAZ,CAAgB,UAAhB,EAA4BC,QAAQb,IAAR,QAAmB,UAASc,KAAT,EAAgBC,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;;AAIA,UAAK5E,MAAL,CAAY6E,SAAZ,GAAwB,UAASC,GAAT,EAAc;AACpC,UAAIC,QAAQ,IAAIC,KAAJ,EAAZ;;AAEA;AACA,UAAIF,OAAO,IAAP,IAAe,CAACG,MAAMH,GAAN,CAApB,EAAgC;AAC9BC,gBAAQ,IAAIC,KAAJ,CAAUE,SAASJ,GAAT,CAAV,CAAR;AACD;;AAED,aAAOC,KAAP;AACD,KATD;;AAWA,UAAKhF,UAAL,CAAgBoF,UAAhB,CAA2B,wBAA3B,EAAqD,EAAEhE,QAAQ,MAAKA,MAAf,EAAuBC,aAAa,MAAKA,WAAzC,EAArD;AAhPe;AAiPhB;;;;+DAE0C;AACzC;;;;AAIA,WAAKpB,MAAL,CAAYyE,GAAZ,CAAgB,0BAAhB,EAA4CC,QAAQb,IAAR,CAAa,IAAb,EAAmB,UAASc,KAAT,EAAgBC,IAAhB,EAAsB;;AAEnF,YAAI7C,iBAAiB6C,KAAKQ,WAA1B;;AAEA;AACA,YAAIrD,kBAAkB,KAAKZ,MAAL,KAAgBY,eAAeZ,MAAjD,IACC,KAAKC,WAAL,KAAqBW,eAAeX,WADzC,EACsD;;AAEpD;AACA,eAAKuC,OAAL,GAAe,KAAf;AACA,eAAK3D,MAAL,CAAYqF,KAAZ,CAAkB,gBAAlB,EAAoC,EAACjE,aAAa,KAAKA,WAAnB,EAAgCuC,SAAS,KAAzC,EAApC;;AAEA,cAAI2B,aAAavD,eAAeuD,UAAhC;AACA,cAAIvB,WAAWhC,eAAegC,QAA9B;AACA,cAAIwB,iBAAiBxD,eAAewD,cAApC;AACA,cAAIC,iBAAiB,KAAKtF,aAAL,CAAmBuF,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA;AACA,cAAIxB,QAAJ,EAAc;AACZ,iBAAK2B,cAAL,CAAoB,KAAKC,UAAL,CAAgB,WAAhB,CAApB,EAAkDH,cAAlD;;AAEA,iBAAKI,eAAL;;AAEA;AACA,iBAAKxB,aAAL,GAAqB,KAArB;AACA,iBAAKpE,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACjE,aAAa,KAAKA,WAAnB,EAAgCuC,SAAS,KAAzC,EAA1C;AACD,WARD,MAQO,IAAI2B,UAAJ,EAAgB;AACrB,iBAAKI,cAAL,CAAoB,KAAKC,UAAL,CAAgB,YAAhB,CAApB,EAAmDH,cAAnD;AACD,WAFM,MAEA;AACL,iBAAKE,cAAL,CAAoB,KAAKC,UAAL,CAAgB,OAAhB,CAApB,EAA8CH,cAA9C;AACD;AACF;;AAED;AACA,YAAI,KAAKnF,cAAL,CAAoBwF,oBAApB,CAAyC,KAAK1E,MAA9C,EAAsD,KAAKC,WAA3D,EAAwEW,eAAeX,WAAvF,CAAJ,EAAyG;;AAEvG;AACA,cAAIiC,2BAA2B,KAAKhD,cAAL,CAAoByF,2BAApB,CAAgD,KAAKtE,gBAArD,EAAuEO,eAAeX,WAAtF,CAA/B;;AAEA,cAAIiC,4BAA4B,IAAhC,EAAsC;;AAEpC,gBAAIA,yBAAyBC,QAAzB,KAAsC,MAAtC,IACDD,yBAAyBC,QAAzB,KAAsC,QAAtC,IAAkDvB,eAAegC,QADpE,EAC+E;;AAE7E,kBAAIgC,gBAAgB,KAApB;;AAEA;;;;AAIAhE,+BAAiB,KAAKtB,WAAL,CAAiBgD,oBAAjB,CAAsC1B,cAAtC,CAAjB;;AAEA;;;;AAIA,kBAAI,KAAKiE,YAAL,MAAuB,KAAKC,YAAL,EAA3B,EAAgD;AAC9C;;;;AAIAF,gCAAgB,IAAhB;AACD,eAND,MAMO;AACL;;;;AAIA;;;;;;;AAQAA,gCAAgB,IAAhB;AACD;;AAED,kBAAIA,aAAJ,EAAmB;AACjB;AACA,qBAAK/F,MAAL,CAAY0D,eAAZ,CAA4BtB,cAA5B,CAA2CL,cAA3C;;AAEA;AACA,qBAAK/B,MAAL,CAAY0D,eAAZ,CAA4BC,OAA5B,GAAsC,IAAtC;AACA,qBAAK3D,MAAL,CAAY0D,eAAZ,CAA4BU,aAA5B,GAA4C,IAA5C;AACD;;AAED;;;;AAIA,mBAAKpD,6BAAL,GAAqCe,cAArC;AACA,mBAAKd,8BAAL,GAAsCoC,wBAAtC;AACD;AACF;AACF;AACF,OAhG2C,CAA5C;AAiGD;;;uCAEkB;AACjB,WAAK6C,MAAL,CAAY,kBAAZ;AACD;;AAED;;;;;;;;uCAKmBxF,S,EAAW;AAC5B,UAAIyF,gBAAgB,IAApB;;AAEA,UAAIzF,aAAa,IAAjB,EAAuB;AACrB;AACA,YAAI0F,sBAAsBC,KAAKC,SAAL,CAAe5F,SAAf,CAA1B;;AAEA;AACA,YAAI6F,gBAAgBF,KAAKG,KAAL,CAAWJ,mBAAX,CAApB;;AAEAD,wBAAgBI,aAAhB;AACD;;AAED,aAAOJ,aAAP;AACD;;;;;AAED;;;iCAGa;;AAEX,UAAI,KAAKzF,SAAL,IAAkB,IAAtB,EAA4B;AAC1B;;;;AAIA,aAAKA,SAAL,GAAiB,KAAK+F,kBAAL,CAAwB,KAAKjF,gBAAL,CAAsBd,SAA9C,CAAjB;AACD;AACF;;;;;AAED;;;iCAGa;;AAEX,UAAI4B,2BAA2B,KAAKC,2BAAL,EAA/B;AACA,UAAIC,gCAAgC,KAAKC,gCAAL,EAApC;;AAEA,UAAI,KAAKhC,WAAL,CAAiB4B,qBAAjB,CAAuC,KAAKb,gBAA5C,CAAJ,EAAmE;AACjE;AACA,aAAKU,yBAAL;AACD,OAHD,MAGO,IAAII,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;AACpF;AACA,aAAKE,UAAL;AACD,OAHM,MAGA;AACL;AACA,aAAKhC,SAAL,GAAiB,KAAK+F,kBAAL,CAAwB,KAAKjF,gBAAL,CAAsBd,SAA9C,CAAjB;AACA,aAAKgG,kBAAL;AACD;AACF;;;;;AAED;;;uCAGmB;AACjB,aAAO,KAAKhG,SAAZ;AACD;;;;;AAED;;;;mCAIeqB,c,EAAgB;;AAE7B,UAAIA,kBAAkB,IAAtB,EAA4B;;AAE1B;AACA,YAAI4E,cAAc5E,eAAe4E,WAAjC;;AAEA,YAAIA,eAAe,IAAnB,EAAyB;AACvB;AACA,eAAKjG,SAAL,GAAiBiG,YAAYjG,SAA7B;;AAEA,cAAImC,gBAAgB8D,YAAY9D,aAAhC;;AAEA,cAAIA,iBAAiB,IAArB,EAA2B;AACzB;AACA,iBAAKA,aAAL,GAAqBA,aAArB;AACD;;AAED,eAAK+D,mBAAL;AACD;AACF;AACF;;;;;AAED;;;0CAGsB;AACpB,UAAIC,cAAc,KAAKtG,kBAAL,CAAwBuG,6CAAxB,CAAsE,KAAK3F,MAA3E,EAAmF,KAAKC,WAAxF,CAAlB;;AAEA,UAAIyF,WAAJ,EAAiB;AACf,YAAItB,iBAAiBsB,YAAYtB,cAAjC;AACA,YAAIC,iBAAiB,KAAKtF,aAAL,CAAmBuF,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,YAAIsB,YAAY9C,QAAhB,EAA0B;AACxB;AACA,eAAKK,aAAL,GAAqB,KAArB;AACA,eAAKpE,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACjE,aAAa,KAAKA,WAAnB,EAAgCuC,SAAS,KAAzC,EAA1C;AACA,eAAK+B,cAAL,CAAoB,KAAKC,UAAL,CAAgB,gBAAhB,CAApB,EAAuDH,cAAvD;AACD,SALD,MAKO;AACL;AACA,eAAKpB,aAAL,GAAqB,IAArB;AACA,eAAKpE,MAAL,CAAYqF,KAAZ,CAAkB,sBAAlB,EAA0C,EAACjE,aAAa,KAAKA,WAAnB,EAAgCuC,SAAS,IAAzC,EAA1C;AACA,eAAK+B,cAAL,CAAoB,KAAKC,UAAL,CAAgB,YAAhB,CAApB,EAAmDH,cAAnD;AACD;AACF;AACF;;;;;AAED;;;;;2BAKOuB,iB,EAAmB;;AAExB,UAAI,KAAK3C,aAAT,EAAwB;AACtB;;AAEA,YAAI4C,gBAAgB,IAApB;;AAEA,YAAI,KAAKxF,gBAAL,CAAsBoB,cAAtB,IAAwC,IAA5C,EAAkD;AAChD;;AAEA;AACA,cAAIqE,sBAAsB,KAAKzF,gBAAL,CAAsBoB,cAAtB,GAAuC,KAAKC,aAAtE;;AAEA,cAAIqE,UAAU,EAAd;;AAEA,cAAID,uBAAuB,CAA3B,EAA8B;AAC5B;AACAD,4BAAgB,KAAhB;AACD,WAHD,MAGO,IAAIC,uBAAuB,CAA3B,EAA8B;AACnC;;;;AAID,WALM,MAKA,IAAIA,sBAAsB,CAA1B,EAA6B;AAClC;;;;AAID;AACF;;AAED,YAAID,aAAJ,EAAmB;;AAEjB;;;;;AAKA,eAAKjD,QAAL,GAAgB,IAAhB;AACA,eAAKoD,sBAAL;;AAEA;AACA,cAAI,KAAK3F,gBAAL,CAAsBoB,cAAtB,IAAwC,IAAxC,IAAgD,KAAKC,aAAL,IAAsB,KAAKrB,gBAAL,CAAsBoB,cAAhG,EAAgH;AAC9G;;;;AAIA,iBAAKE,sBAAL,GAA8B,IAA9B;AACD;;AAED,cAAI,KAAKzB,IAAL,KAAc,WAAlB,EAA+B;AAC7B;;;;;AAKA,iBAAKsC,OAAL,GAAe,KAAf;AACA,iBAAKS,aAAL,GAAqB,KAArB;AACA,iBAAKC,oBAAL,CAA0B,QAA1B;AACD;;AAED,cAAI0C,qBAAqB,IAArB,IAA6BA,sBAAsB,uBAAvD,EAAgF;AAC9E;AACA,iBAAK/G,MAAL,CAAYqF,KAAZ,CAAkB,0BAAlB,EAA8C,EAAClE,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACD,WAHD,MAGO,IAAI2F,sBAAsB,kBAA1B,EAA8C;AACnD;AACD;AACF,SApCD,MAoCO;AACL;;;;AAIA,eAAKhD,QAAL,GAAgB,KAAhB;AACD;AACF;AACF;;AAED;;;;;;;;;yCAMqBI,M,EAAQ;;AAE3B,UAAIH,WAAW,KAAKlE,EAAL,CAAQmE,KAAR,EAAf;;AAEA;AACA,UAAIlC,iBAAiB,KAAK5B,WAAL,CAAiBiH,uBAAjB,EAArB;;AAEA,UAAIT,cAAc,EAAlB;;AAEA;AACAA,kBAAYjG,SAAZ,GAAwB,KAAK+F,kBAAL,CAAwB,KAAK/F,SAA7B,CAAxB;;AAEA;AACAiG,kBAAY9D,aAAZ,GAA4B,KAAKA,aAAjC;;AAEA;AACAd,qBAAegC,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;AACAhC,qBAAe4E,WAAf,GAA6BA,WAA7B;;AAEA;AACA5E,qBAAewB,aAAf,GAA+B,OAA/B;;AAEA;AACAxB,qBAAeZ,MAAf,GAAwB,KAAKA,MAA7B;;AAEA;AACAY,qBAAeX,WAAf,GAA6B,KAAKA,WAAlC;;AAEA;;;;AAIA,WAAK2C,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,WAAKsD,wCAAL,CAA8CrD,QAA9C,EAAwDjC,cAAxD,EAAwEoC,MAAxE;;AAEA,aAAOH,SAASQ,OAAhB;AACD;;;;;AAED;;;;gDAI4B;;AAE1B;AACA,UAAIzC,iBAAiB,KAAK5B,WAAL,CAAiBiH,uBAAjB,EAArB;;AAEA,UAAIrF,kBAAkB,IAAtB,EAA4B;AAC1B,YAAI4E,cAAc,EAAlB;;AAEA;AACA5E,uBAAe4E,WAAf,GAA6BA,WAA7B;AACD;;AAED,aAAO5E,cAAP;AACD;;;;;AAED;;;;2CAIuB;AACrB,aAAO,KAAKnB,yBAAZ;AACD;;;;;AAED;;;iCAGa;;AAEX;AACA,UAAIY,mBAAmB,KAAKA,gBAA5B;;AAEA,UAAIA,oBAAoB,IAAxB,EAA8B;;AAE5B,YAAIc,2BAA2B,KAAKC,2BAAL,EAA/B;AACA,YAAIC,gCAAgC,KAAKC,gCAAL,EAApC;;AAEA,YAAIH,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;;AAE7E;AACA,cAAI8E,2BAA2B,KAAK/G,kBAAL,CAAwBuG,6CAAxB,CAAsExE,wBAAtE,EAAgGE,6BAAhG,CAA/B;;AAEA,cAAI8E,4BAA4B,IAAhC,EAAsC;;AAEpC;AACA,gBAAIC,wBAAwB,KAAKC,yBAAL,EAA5B;;AAEA,gBAAID,yBAAyB,IAAzB,IAAiCA,sBAAsBZ,WAAtB,IAAqC,IAA1E,EAAgF;AAC9E;AACAY,oCAAsBZ,WAAtB,CAAkCjG,SAAlC,GAA8C,KAAK+F,kBAAL,CAAwB,KAAKjF,gBAAL,CAAsBd,SAA9C,CAA9C;AACD;;AAED;AACA,gBAAI+G,uBAAuB,KAAKC,qBAAL,CAA2BJ,wBAA3B,EAAqDC,qBAArD,CAA3B;;AAEA;AACA,iBAAKnF,cAAL,CAAoBqF,oBAApB;AACA,iBAAKf,kBAAL;AACD;AACF;AACF;AACF;;;;;AAED;;;uCAGmBiB,Y,EAAc;AAC/B;AACD;;;;;AAED;;;;;;8CAM0B5F,c,EAAgB6F,M,EAAQ;;AAEhD,UAAIC,aAAa,CAAjB;AACA,UAAIC,cAAc,CAAlB;;AAEA,UAAIF,UAAU,IAAd,EAAoB;;AAElB,YAAIA,OAAOC,UAAP,IAAqB,IAAzB,EAA+B;AAC7B;AACAA,uBAAaD,OAAOC,UAApB;AACD;;AAED,YAAID,OAAOE,WAAP,IAAsB,IAA1B,EAAgC;AAC9B;AACAA,wBAAcF,OAAOE,WAArB;AACD;;AAED,YAAIF,OAAOG,gBAAX,EAA6B;AAC3B,eAAKA,gBAAL,CAAsBhG,cAAtB,EAAsC6F,MAAtC;AACA;AACD;AACF;;AAED,UAAI7F,kBAAkB,IAAlB,IAA0BA,eAAe4E,WAAf,IAA8B,IAA5D,EAAkE;;AAEhE;AACA,YAAIA,cAAc5E,eAAe4E,WAAjC;;AAEA;AACA,YAAIqB,qBAAqBrB,YAAYsB,OAArC;;AAEA,YAAID,sBAAsB,IAAtB,IAA8BA,sBAAsB,CAAxD,EAA2D;AACzD;;AAEA;AACA,cAAIE,SAASvB,YAAYuB,MAAzB;;AAEA,cAAIA,UAAU,IAAV,IAAkBA,OAAOC,MAAP,GAAgB,CAAtC,EAAyC;;AAEvC;AACA,gBAAIC,aAAaF,OAAOJ,WAAP,CAAjB;;AAEA;AACA,iBAAKO,kBAAL,CAAwBD,UAAxB;AACD;AACF,SAdD,MAcO;AACL;;AAEA;AACA,cAAIE,SAAS3B,YAAY2B,MAAzB;;AAEA,cAAIA,UAAU,IAAd,EAAoB;;AAElB;AACA,gBAAIC,QAAQD,OAAOT,UAAP,CAAZ;;AAEA,gBAAIU,SAAS,IAAb,EAAmB;;AAEjB;AACA,kBAAIC,iBAAiBD,MAAML,MAA3B;;AAEA,kBAAIM,kBAAkB,IAAtB,EAA4B;;AAE1B;AACA,oBAAIN,SAASM,eAAeV,WAAf,CAAb;;AAEA;AACA,qBAAKO,kBAAL,CAAwBH,MAAxB;AACD;AACF;AACF;AACF;AACF;AACF;;;;;AAED;;;;;qCAKiBnG,c,EAAgB6F,M,EAAQ;AACvC,UAAIjB,cAAc5E,eAAe4E,WAAjC;AACA,UAAI8B,kBAAkB9B,YAAY8B,eAAlC;AACA,UAAIC,IAAI,IAAR;;AAEA;AACA,UAAID,mBAAmB,IAAnB,IAA2BA,gBAAgBN,MAAhB,GAAyB,CAAxD,EAA2D;AACzD,YAAIQ,uBAAuBF,gBAAgBA,gBAAgBN,MAAhB,GAAyB,CAAzC,CAA3B;AACAO,YAAIE,KAAKC,KAAL,CAAWF,qBAAqB,CAArB,CAAX,CAAJ;AACD;AACD,UAAIG,SAASnC,YAAYoC,KAAZ,CAAkBC,KAA/B;AACA,UAAIC,SAAStC,YAAYuC,KAAZ,CAAkBF,KAA/B;AACA,UAAIG,aAAaxC,YAAYoC,KAAZ,CAAkBK,KAAlB,CAAwBC,IAAzC;AACA,UAAIC,aAAa3C,YAAYuC,KAAZ,CAAkBE,KAAlB,CAAwBC,IAAzC;AACA,WAAKE,2BAAL;AACA,WAAKC,eAAL,CAAqB,KAAKC,cAAL,CAAoB,CAAC,aAAD,EAAgBN,UAAhB,EAA4BG,UAA5B,CAApB,CAArB;AAfuC;AAAA;AAAA;;AAAA;AAgBvC,6BAAkB3C,YAAY2B,MAA9B,8HAAsC;AAAA,cAA7BC,KAA6B;;AACpC,cAAIA,MAAMmB,IAAV,EAAgB;AACd,gBAAIlB,iBAAiBD,MAAML,MAA3B;AADc;AAAA;AAAA;;AAAA;AAEd,oCAAyBM,cAAzB,mIAAyC;AAAA,oBAAhCmB,YAAgC;;AACvC,oBAAIA,aAAaD,IAAb,KAAsB,KAA1B,EAAiC;AAC/B,sBAAIE,mBAAmB,KAAKC,mBAAL,CAAyBF,aAAaG,IAAtC,EAA4CpB,CAA5C,CAAvB;AACA,sBAAIkB,oBAAoB,IAAxB,EAA8B;AAC5B,yBAAKJ,eAAL,CAAqB,KAAKC,cAAL,CAAoB,CAACE,aAAaI,IAAd,EACrCnB,KAAKC,KAAL,CAAW,KAAKmB,iBAAL,CAAuBJ,gBAAvB,CAAX,IAAuD,GAAvD,GAA6Dd,MADxB,EAErCF,KAAKC,KAAL,CAAW,KAAKoB,iBAAL,CAAuBL,gBAAvB,CAAX,IAAuD,GAAvD,GAA6DX,MAFxB,CAApB,CAArB;AAGD;AACF;AACF;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYf;AACF;AA9BsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BxC;;AAED;;;;;;kDAG8B;AAC5B,WAAKvI,SAAL,GAAiB,EAAjB;AACD;;AAED;;;;;;;oCAIgBwJ,G,EAAK;AACnB,WAAKxJ,SAAL,CAAeyJ,IAAf,CAAoBD,GAApB;AACD;;AAED;;;;;;;;;;;sCAQ0D;AAAA,UAA1Cb,IAA0C,uEAAnC,EAAmC;AAAA,UAA/Be,QAA+B,uEAApB,KAAoB;AAAA,UAAbC,IAAa,uEAAN,IAAM;;AACxD,aAAO,EAAEhB,MAAMA,IAAR,EAAce,UAAUA,QAAxB,EAAkCC,MAAMA,IAAxC,EAAP;AACD;;AAED;;;;;;;;mCAKeC,O,EAAS;AACtB,UAAIJ,MAAM,EAAV;AADsB;AAAA;AAAA;;AAAA;AAEtB,8BAAmBI,OAAnB,mIAA4B;AAAA,cAAnBC,MAAmB;;AAC1B,cAAIA,OAAOC,WAAP,CAAmBT,IAAnB,IAA2B,QAA/B,EAAyC;AACvCG,gBAAIC,IAAJ,CAAS,KAAKM,eAAL,CAAqBF,MAArB,CAAT;AACD,WAFD,MAEO,IAAIA,OAAOC,WAAP,CAAmBT,IAAnB,IAA2B,QAA/B,EAAyC;AAC9CG,gBAAIC,IAAJ,CAAS,KAAKM,eAAL,CAAqBF,OAAOlB,IAA5B,EAAkCkB,OAAOH,QAAzC,EAAmDG,OAAOF,IAA1D,CAAT;AACD;AACF;AARqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAStB,aAAOH,GAAP;AACD;;AAED;;;;;;;;;;wCAOoBQ,U,EAAYhC,C,EAAG;AACjC,UAAIkB,mBAAmB,IAAvB;AACA,UAAIe,0BAA0BC,QAA9B;AAFiC;AAAA;AAAA;;AAAA;AAGjC,8BAAsBF,UAAtB,mIAAkC;AAAA,cAAzBG,SAAyB;;AAChC,cAAIC,aAAa,KAAKd,iBAAL,CAAuBa,SAAvB,CAAjB;AACA,cAAIE,sBAAsB,KAAKC,8BAAL,CAAoCtC,CAApC,EAAuCoC,UAAvC,CAA1B;AACA,cAAIC,sBAAsBJ,uBAA1B,EAAmD;AACjD;AACAf,+BAAmBiB,SAAnB;AACAF,sCAA0BI,mBAA1B;AACD;AACF;AAXgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYjC,aAAOnB,gBAAP;AACD;;AAED;;;;;;;;;mDAM+BqB,E,EAAIC,E,EAAI;AACrC,aAAOtC,KAAKuC,GAAL,CAASF,KAAKC,EAAd,CAAP;AACD;;AAED;;;;;;;;sCAKkBL,S,EAAW;AAC3B,UAAIA,UAAUL,WAAV,CAAsBT,IAAtB,IAA8B,QAAlC,EAA4C;AAC1C,eAAOc,UAAUnC,CAAjB;AACD,OAFD,MAEO,IAAImC,UAAUL,WAAV,CAAsBT,IAAtB,IAA8B,OAAlC,EAA2C;AAChD,eAAOc,UAAU,CAAV,CAAP;AACD;AACF;;AAED;;;;;;;;sCAKkBA,S,EAAW;AAC3B,UAAIA,UAAUL,WAAV,CAAsBT,IAAtB,IAA8B,QAAlC,EAA4C;AAC1C,eAAOc,UAAUO,CAAjB;AACD,OAFD,MAEO,IAAIP,UAAUL,WAAV,CAAsBT,IAAtB,IAA8B,OAAlC,EAA2C;AAChD,eAAOc,UAAU,CAAV,CAAP;AACD;AACF;;AAED;;;;;;;;uCAKmB3C,M,EAAQN,M,EAAQ;;AAEjC;;;;;AAKA,UAAIyD,eAAe,IAAnB;AACA,UAAIC,UAAU,CAAd;AACA,UAAIC,UAAU,CAAd;;AAEA,UAAI3D,UAAU,IAAd,EAAoB;;AAElB,YAAIA,OAAOyD,YAAP,IAAuB,IAA3B,EAAiC;AAC/B;AACAA,yBAAezD,OAAOyD,YAAtB;AACD;;AAED,YAAIzD,OAAO0D,OAAP,IAAkB,IAAtB,EAA4B;AAC1B;AACAA,oBAAU1D,OAAO0D,OAAjB;AACD;;AAED,YAAI1D,OAAO2D,OAAP,IAAkB,IAAtB,EAA4B;AAC1B;AACAA,oBAAU3D,OAAO2D,OAAjB;AACD;AACF;;AAED,UAAIrD,UAAU,IAAd,EAAoB;;AAElB;AACA,YAAIsD,gBAAgB,KAAKC,gBAAL,EAApB;;AAEA;AACA,YAAI3B,OAAO5B,OAAO4B,IAAlB;;AAEA,YAAIA,QAAQ,IAAZ,EAAkB;;AAEhB;AACA,cAAI4B,iBAAiB,CAArB;;AAEA;AACA,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,cAAcrD,MAAlC,EAA0CwD,GAA1C,EAA+C;;AAE7C,gBAAIN,gBAAgBM,MAAM,CAA1B,EAA6B;AAC3B;AACA;AACD;;AAED,gBAAIjD,IAAI,EAAR;AACA,gBAAI0C,IAAI,EAAR;;AAEA;AACA,gBAAIQ,UAAU9B,KAAK4B,cAAL,CAAd;;AAEA,gBAAIE,WAAW,IAAf,EAAqB;AACnB;AACAlD,kBAAIkD,QAAQ,CAAR,CAAJ;AACAR,kBAAIQ,QAAQ,CAAR,CAAJ;AACD;;AAED;AACA,iBAAKC,qBAAL,CAA2BP,OAA3B,EAAoCK,CAApC,EAAuC,IAAvC,EAA6CjD,CAA7C;AACA,iBAAKmD,qBAAL,CAA2BN,OAA3B,EAAoCI,CAApC,EAAuC,IAAvC,EAA6CP,CAA7C;;AAEA;AACAM;AACD;AACF;AACF;AACF;;AAED;;;;;;;;;0CAMsBhD,C,EAAG0C,C,EAAGU,K,EAAOC,K,EAAO;;AAExC,UAAIP,gBAAgBM,KAApB;;AAEA,UAAIA,SAAS,IAAb,EAAmB;AACjB;AACAN,wBAAgB,KAAKC,gBAAL,EAAhB;AACD;;AAED,UAAID,iBAAiB,IAArB,EAA2B;;AAEzB;AACA,YAAItB,MAAMsB,cAAcJ,CAAd,CAAV;;AAEA,YAAIlB,OAAO,IAAX,EAAiB;;AAEf;AACA,cAAI8B,OAAO9B,IAAIxB,CAAJ,CAAX;;AAEA,cAAIsD,QAAQ,IAAZ,EAAkB;;AAEhB;AACAA,iBAAK3C,IAAL,GAAY0C,KAAZ;AACD;AACF;AACF;AACF;;;;;AAED;;;;;;;;0CAQsBrD,C,EAAG0C,C,EAAGU,K,EAAO;;AAEjC,UAAIG,YAAY,IAAhB;;AAEA,UAAIH,SAAS,IAAb,EAAmB;AACjB;AACAA,gBAAQ,KAAKL,gBAAL,EAAR;AACD;;AAED,UAAIK,SAAS,IAAb,EAAmB;;AAEjB;AACA,YAAI5B,MAAM4B,MAAMV,CAAN,CAAV;;AAEA,YAAIlB,OAAO,IAAX,EAAiB;;AAEf;AACA,cAAI8B,OAAO9B,IAAIxB,CAAJ,CAAX;;AAEA,cAAIsD,QAAQ,IAAZ,EAAkB;;AAEhB;AACAC,wBAAYD,KAAK3C,IAAjB;AACD;AACF;AACF;;AAED,aAAO4C,SAAP;AACD;;AAED;;;;;;;iCAIa;AACX,aAAO,KAAKzK,gBAAL,CAAsB0K,OAA7B;AACD;;AAED;;;;;;;oCAIgB;AACd,aAAO,KAAK1K,gBAAL,CAAsB2K,UAA7B;AACD;;AAED;;;;;;;;mCAKe;AACb,UAAIC,SAAS,IAAb;;AAEA,UAAIF,UAAU,KAAKG,UAAL,EAAd;AACA,UAAIF,aAAa,KAAKG,aAAL,EAAjB;;AAEA;AACA,WAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIO,OAApB,EAA6BP,GAA7B,EAAkC;;AAEhC;AACA,aAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIJ,UAApB,EAAgCI,GAAhC,EAAqC;;AAEnC;AACA,cAAIN,YAAY,KAAKO,qBAAL,CAA2BD,CAA3B,EAA8BZ,CAA9B,CAAhB;;AAEA,cAAIM,aAAa,IAAb,IAAqBA,aAAa,EAAtC,EAA0C;AACxC;AACAG,qBAAS,KAAT;AACA;AACD;AACF;;AAED,YAAIA,UAAU,KAAd,EAAqB;AACnB;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;;;mCAMe;AACb,UAAIA,SAAS,IAAb;;AAEA,UAAIF,UAAU,KAAKG,UAAL,EAAd;AACA,UAAIF,aAAa,KAAKG,aAAL,EAAjB;;AAEA;AACA,UAAIG,eAAe,KAAKjL,gBAAL,CAAsBd,SAAzC;;AAEA;AACA,WAAK,IAAIiL,IAAI,CAAb,EAAgBA,IAAIO,OAApB,EAA6BP,GAA7B,EAAkC;;AAEhC;AACA,aAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIJ,UAApB,EAAgCI,GAAhC,EAAqC;;AAEnC;AACA,cAAIN,YAAY,KAAKO,qBAAL,CAA2BD,CAA3B,EAA8BZ,CAA9B,CAAhB;;AAEA;AACA,cAAIe,mBAAmB,KAAKF,qBAAL,CAA2BD,CAA3B,EAA8BZ,CAA9B,EAAiCc,YAAjC,CAAvB;;AAEA,cAAIR,aAAaS,gBAAjB,EAAmC;AACjC;AACAN,qBAAS,KAAT;AACA;AACD;AACF;;AAED,YAAIA,UAAU,KAAd,EAAqB;AACnB;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;8BAIUO,M,EAAQ;AAAA;;AAChB;AACA,UAAIC,eAAelI,QAAQmI,OAAR,CAAgB,YAAY,KAAK1L,MAAjB,GAA0B,GAA1B,GAAgC,KAAKC,WAArD,CAAnB;;AAEA,UAAIwL,gBAAgB,IAAhB,IAAwBA,aAAazE,MAAb,GAAsB,CAAlD,EAAqD;AACnD;AACAyE,uBAAeA,aAAa,CAAb,CAAf;;AAEA;AACA,mCAAYA,YAAZ,EAA0BtI,IAA1B,CAA+B,UAACwI,MAAD,EAAY;AACzC;AACA,cAAIC,UAAUD,OAAOE,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,cAAIC,cAAc,OAAKxM,WAAL,CAAiByM,8BAAjB,CAAgDH,OAAhD,CAAlB;;AAEA;AACA,iBAAK3M,eAAL,CAAqB+M,OAArB,CAA6BR,MAA7B,EAAqCM,WAArC;AACD,SATD;AAUD;AACF;;AAED;;;;;;;;0CAKsBG,kB,EAAoBC,gB,EAAkB;;AAE1D,UAAID,sBAAsB,IAAtB,IAA8BC,oBAAoB,IAAtD,EAA4D;AAC1D,YAAIC,kBAAkBF,mBAAmBzG,WAAzC;AACA,YAAI4G,gBAAgBF,iBAAiB1G,WAArC;;AAEA,YAAI2G,mBAAmB,IAAnB,IAA2BC,iBAAiB,IAAhD,EAAsD;AACpD,cAAIC,gBAAgBF,gBAAgB5M,SAApC;AACA,cAAI+M,cAAcF,cAAc7M,SAAhC;;AAEA,cAAI8M,iBAAiB,IAAjB,GAAwBC,eAAe,IAA3C,EAAiD;;AAE/C;AACA,iBAAK,IAAIrC,IAAI,CAAb,EAAgBA,IAAI,KAAKiB,UAAL,EAApB,EAAuCjB,GAAvC,EAA4C;;AAE1C;AACA,mBAAK,IAAI1C,IAAI,CAAb,EAAgBA,IAAI,KAAK4D,aAAL,EAApB,EAA0C5D,GAA1C,EAA+C;;AAE7C;AACA,oBAAIuD,YAAY,KAAKO,qBAAL,CAA2B9D,CAA3B,EAA8B0C,CAA9B,EAAiCoC,aAAjC,CAAhB;;AAEA,oBAAIvB,aAAa,IAAjB,EAAuB;AACrB;AACA,uBAAKJ,qBAAL,CAA2BnD,CAA3B,EAA8B0C,CAA9B,EAAiCqC,WAAjC,EAA8CxB,SAA9C;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,aAAOoB,gBAAP;AACD;;AAED;;;;;;;2CAIuB;;AAErB;;;;AAIA,WAAKK,YAAL,GAAoB,KAAK1N,MAAL,CAAYyE,GAAZ,CAAgB,MAAhB,EAAwBC,QAAQb,IAAR,CAAa,IAAb,EAAmB,UAASc,KAAT,EAAgBC,IAAhB,EAAsB;;AAEnF,aAAK7E,UAAL,CAAgBoF,UAAhB,CAA2B,aAA3B;AACD,OAH2C,CAAxB,CAApB;AAID;;;;;AAED;;;;kDAI8B;AAC5B,UAAI7C,2BAA2B,IAA/B;;AAEA,UAAI,KAAKd,gBAAL,IAAyB,IAAzB,IAAiC,KAAKA,gBAAL,CAAsBc,wBAAtB,IAAkD,IAAvF,EAA6F;AAC3FA,mCAA2B,KAAKd,gBAAL,CAAsBc,wBAAjD;;AAEA,YAAIA,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;AACtE;;;;AAIAA,qCAA2B,KAAKd,gBAAL,CAAsBmM,gBAAjD;AACD;AACF;;AAED,aAAOrL,wBAAP;AACD;;AAED;;;;;;;uDAImC;AACjC,UAAIE,gCAAgC,IAApC;;AAEA,UAAI,KAAKhB,gBAAL,IAAyB,IAAzB,IAAiC,KAAKA,gBAAL,CAAsBgB,6BAAtB,IAAuD,IAA5F,EAAkG;AAChG,YAAIA,gCAAgC,KAAKhB,gBAAL,CAAsBgB,6BAA1D;;AAEA,YAAIA,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;AAChF;;;;AAIAA,0CAAgC,KAAKhB,gBAAL,CAAsBoM,qBAAtD;AACD;AACF;;AAED,aAAOpL,6BAAP;AACD;;AAED;;;;;;;;;+CAM2BqL,e,EAAiB;AAC1C,UAAMtG,wBAAwB,KAAKC,yBAAL,EAA9B;AACAD,4BAAsBZ,WAAtB,CAAkCjG,SAAlC,GAA8C,KAAK+F,kBAAL,CAAwB,KAAKjF,gBAAL,CAAsBd,SAA9C,CAA9C;AACA,aAAO,KAAKgH,qBAAL,CAA2BmG,gBAAgB,CAAhB,CAA3B,EAA+CtG,qBAA/C,CAAP;AACD;;;;;;AAGH9H,gBAAgBqO,OAAhB,GAA0B,CACxB,eADwB,EAExB,SAFwB,EAGxB,WAHwB,EAIxB,WAJwB,EAKxB,IALwB,EAMxB,YANwB,EAOxB,QAPwB,EAQxB,mBARwB,EASxB,eATwB,EAUxB,aAVwB,EAWxB,iBAXwB,EAYxB,gBAZwB,EAaxB,qBAbwB,EAcxB,oBAdwB,EAexB,cAfwB,EAgBxB,aAhBwB,CAA1B;;kBAmBerO,e","file":"tableController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\nimport html2canvas from 'html2canvas';\n\nclass TableController extends ComponentController {\n  constructor($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      TableService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$anchorScroll = $anchorScroll;\n    this.$location = $location;\n    this.$q = $q;\n    this.TableService = TableService;\n\n    // holds the the table data\n    this.tableData = null;\n\n    // the latest annotations\n    this.latestAnnotations = null;\n\n    // whether the reset table button is shown or not\n    this.isResetTableButtonVisible = true;\n\n    // the label for the notebook in thos project\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n\n    /*\n     * get the original component content. this is used when showing\n     * previous work from another component.\n     */\n    this.originalComponentContent = this.$scope.originalComponentContent;\n\n    this.latestConnectedComponentState = null;\n    this.latestConnectedComponentParams = null;\n\n    this.tableId = 'table_' + this.nodeId + '_' + this.componentId;\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n      // get the latest annotations\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      this.isResetTableButtonVisible = true;\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isResetTableButtonVisible = false;\n      this.isDisabled = true;\n\n      if (this.mode === 'grading') {\n        // get the latest annotations\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isResetTableButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isResetTableButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    var componentState = null;\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    // set whether studentAttachment is enabled\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (this.TableService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n        var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n          // import the work from the other component\n          this.importWork();\n        } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          /*\n           * the student does not have any work and there are connected\n           * components so we will get the work from the connected\n           * components\n           */\n          this.handleConnectedComponents();\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // set up the table\n    this.setupTable();\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (this.$scope.$parent.nodeController != null) {\n      // register this component with the parent node\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component\n     * @param connectedComponent the connected component\n     * @param connectedComponentParams the connected component params\n     * @param componentState the component state from the connected\n     * component that has changed\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n      if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n        if (connectedComponentParams.updateOn === 'change') {\n\n        }\n\n        // get the component type that has changed\n        var componentType = connectedComponent.type;\n\n        /*\n         * make a copy of the component state so we don't accidentally\n         * change any values in the referenced object\n         */\n        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n        if (componentType === 'Table') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Graph') {\n\n          // set the graph data into the table\n          this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        } else if (componentType === 'Embedded') {\n\n          // set the table data\n          this.$scope.tableController.setStudentWork(componentState);\n\n          // the table has changed\n          this.$scope.tableController.isDirty = true;\n        }\n      }\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.tableController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.tableController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.tableController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n    }));\n\n    this.$scope.getNumber = function(num) {\n      var array = new Array();\n\n      // make sure num is a valid number\n      if (num != null && !isNaN(num)) {\n        array = new Array(parseInt(num));\n      }\n\n      return array;\n    }\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    /**\n     * Listen for the 'studentWorkSavedToServer' event which is fired when\n     * we receive the response from saving a component state to the server\n     */\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n      let componentState = args.studentWork;\n\n      // check that the component state is for this component\n      if (componentState && this.nodeId === componentState.nodeId\n        && this.componentId === componentState.componentId) {\n\n        // set isDirty to false because the component state was just saved and notify node\n        this.isDirty = false;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n        let isAutoSave = componentState.isAutoSave;\n        let isSubmit = componentState.isSubmit;\n        let serverSaveTime = componentState.serverSaveTime;\n        let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n        // set save message\n        if (isSubmit) {\n          this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\n\n          this.lockIfNecessary();\n\n          // set isSubmitDirty to false because the component state was just submitted and notify node\n          this.isSubmitDirty = false;\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        } else if (isAutoSave) {\n          this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n        }\n      }\n\n      // check if the component state is from a connected component\n      if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\n\n        // get the connected component params\n        var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\n\n        if (connectedComponentParams != null) {\n\n          if (connectedComponentParams.updateOn === 'save' ||\n            (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\n\n            var performUpdate = false;\n\n            /*\n             * make a copy of the component state so we don't accidentally\n             * change any values in the referenced object\n             */\n            componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n\n            /*\n             * make sure the student hasn't entered any values into the\n             * table so that we don't overwrite any of their work.\n             */\n            if (this.isTableEmpty() || this.isTableReset()) {\n              /*\n               * the student has not entered any values into the table\n               * so we can update it\n               */\n              performUpdate = true;\n            } else {\n              /*\n               * the student has entered values into the table so we\n               * will ask them if they want to update it\n               */\n              /*\n              var answer = confirm('Do you want to update the connected table?');\n\n              if (answer) {\n                // the student answered yes\n                performUpdate = true;\n              }\n              */\n              performUpdate = true;\n            }\n\n            if (performUpdate) {\n              // set the table data\n              this.$scope.tableController.setStudentWork(componentState);\n\n              // the table has changed\n              this.$scope.tableController.isDirty = true;\n              this.$scope.tableController.isSubmitDirty = true;\n            }\n\n            /*\n             * remember the component state and connected component params\n             * in case we need to use them again later\n             */\n            this.latestConnectedComponentState = componentState;\n            this.latestConnectedComponentParams = connectedComponentParams;\n          }\n        }\n      }\n    }));\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Get a copy of the table data\n   * @param tableData the table data to copy\n   * @return a copy of the table data\n   */\n  getCopyOfTableData(tableData) {\n    var tableDataCopy = null;\n\n    if (tableData != null) {\n      // create a JSON string from the table data\n      var tableDataJSONString = JSON.stringify(tableData);\n\n      // create a JSON object from the table data string\n      var tableDataJSON = JSON.parse(tableDataJSONString);\n\n      tableDataCopy = tableDataJSON;\n    }\n\n    return tableDataCopy;\n  };\n\n  /**\n   * Setup the table\n   */\n  setupTable() {\n\n    if (this.tableData == null) {\n      /*\n       * the student does not have any table data so we will use\n       * the table data from the component content\n       */\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n    }\n  };\n\n  /**\n   * Reset the table data to its initial state from the component content\n   */\n  resetTable() {\n\n    var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n    var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      // this component imports work so we will import the work again\n      this.handleConnectedComponents();\n    } else if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n      // import the work from the other component\n      this.importWork();\n    } else {\n      // get the original table from the step content\n      this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n      this.studentDataChanged();\n    }\n  };\n\n  /**\n   * Get the rows of the table data\n   */\n  getTableDataRows() {\n    return this.tableData;\n  };\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n\n      // get the student data from the component state\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        // set the table into the controller\n        this.tableData = studentData.tableData;\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        this.processLatestSubmit();\n      }\n    }\n  };\n\n  /**\n   * Check if latest component state is a submission and set isSubmitDirty accordingly\n   */\n  processLatestSubmit() {\n    let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestState) {\n      let serverSaveTime = latestState.serverSaveTime;\n      let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestState.isSubmit) {\n        // latest state is a submission, so set isSubmitDirty to false and notify node\n        this.isSubmitDirty = false;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n        this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\n      } else {\n        // latest state is not a submission, so set isSubmitDirty to true and notify node\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n        this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n\n    if (this.isSubmitDirty) {\n      // the student has unsubmitted work\n\n      var performSubmit = true;\n\n      if (this.componentContent.maxSubmitCount != null) {\n        // there is a max submit count\n\n        // calculate the number of submits this student has left\n        var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\n\n        var message = '';\n\n        if (numberOfSubmitsLeft <= 0) {\n          // the student does not have any more chances to submit\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft == 1) {\n          /*\n           * the student has one more chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        } else if (numberOfSubmitsLeft > 1) {\n          /*\n           * the student has more than one chance to submit left so maybe\n           * we should ask the student if they are sure they want to submit\n           */\n        }\n      }\n\n      if (performSubmit) {\n\n        /*\n         * set isSubmit to true so that when the component state is\n         * created, it will know that is a submit component state\n         * instead of just a save component state\n         */\n        this.isSubmit = true;\n        this.incrementSubmitCounter();\n\n        // check if the student has used up all of their submits\n        if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n          /*\n           * the student has used up all of their submits so we will\n           * disable the submit button\n           */\n          this.isSubmitButtonDisabled = true;\n        }\n\n        if (this.mode === 'authoring') {\n          /*\n           * we are in authoring mode so we will set values appropriately\n           * here because the 'componentSubmitTriggered' event won't\n           * work in authoring mode\n           */\n          this.isDirty = false;\n          this.isSubmitDirty = false;\n          this.createComponentState('submit');\n        }\n\n        if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n          // tell the parent node that this component wants to submit\n          this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n        } else if (submitTriggeredBy === 'nodeSubmitButton') {\n          // nothing extra needs to be performed\n        }\n      } else {\n        /*\n         * the student has cancelled the submit so if a component state\n         * is created, it will just be a regular save and not submit\n         */\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    var studentData = {};\n\n    // insert the table data\n    studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'Table';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Create a new component state with no student data\n   * @return a component state with no student data\n   */\n  createBlankComponentState() {\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    if (componentState != null) {\n      var studentData = {};\n\n      // set the student data into the component state\n      componentState.studentData = studentData;\n    }\n\n    return componentState;\n  };\n\n  /**\n   * Check whether we need to show the reset table button\n   * @return whether to show the reset table button\n   */\n  showResetTableButton() {\n    return this.isResetTableButtonVisible;\n  };\n\n  /**\n   * Import work from another component\n   */\n  importWork() {\n\n    // get the component content\n    var componentContent = this.componentContent;\n\n    if (componentContent != null) {\n\n      var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\n      var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\n\n      if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\n\n        // get the latest component state from the component we are importing from\n        var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\n\n        if (importWorkComponentState != null) {\n\n          // create a blank component state without student work\n          var defaultComponentState = this.createBlankComponentState();\n\n          if (defaultComponentState != null && defaultComponentState.studentData != null) {\n            // set the authored component content table data into the component state\n            defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n          }\n\n          // copy the cell text values into the default component state\n          var mergedComponentState = this.copyTableDataCellText(importWorkComponentState, defaultComponentState);\n\n          // set the merged component state into this component\n          this.setStudentWork(mergedComponentState);\n          this.studentDataChanged();\n        }\n      }\n    }\n  };\n\n  /**\n   * handle importing notebook item data (we only support csv for now)\n   */\n  attachStudentAsset(studentAsset) {\n    // TODO: implement me\n  };\n\n  /**\n   * Set the graph data into the table data\n   * @param componentState the component state to get the graph data from\n   * @param params (optional) the params to specify what columns\n   * and rows to overwrite in the table data\n   */\n  setGraphDataIntoTableData(componentState, params) {\n\n    var trialIndex = 0;\n    var seriesIndex = 0;\n\n    if (params != null) {\n\n      if (params.trialIndex != null) {\n        // get the trial index\n        trialIndex = params.trialIndex;\n      }\n\n      if (params.seriesIndex != null) {\n        // get the series index\n        seriesIndex = params.seriesIndex;\n      }\n\n      if (params.showDataAtMouseX) {\n        this.showDataAtMouseX(componentState, params);\n        return;\n      }\n    }\n\n    if (componentState != null && componentState.studentData != null) {\n\n      // get the student data\n      var studentData = componentState.studentData;\n\n      // get the student data version\n      var studentDataVersion = studentData.version;\n\n      if (studentDataVersion == null || studentDataVersion == 1) {\n        // this is the old student data format that can't contain trials\n\n        // get the series\n        var series = studentData.series;\n\n        if (series != null && series.length > 0) {\n\n          // get the series that we will get data from\n          var tempSeries = series[seriesIndex];\n\n          // set the series data into the table\n          this.setSeriesIntoTable(tempSeries);\n        }\n      } else {\n        // this is the new student data format that can contain trials\n\n        // get all the trials\n        var trials = studentData.trials;\n\n        if (trials != null) {\n\n          // get the specific trial we want\n          var trial = trials[trialIndex];\n\n          if (trial != null) {\n\n            // get the series in the trial\n            var multipleSeries = trial.series;\n\n            if (multipleSeries != null) {\n\n              // get the specific series we want\n              var series = multipleSeries[seriesIndex];\n\n              // set the series data into the table\n              this.setSeriesIntoTable(series);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Show the data at x for all the series.\n   * @param componentState The Graph component state.\n   * @param params The connected component params.\n   */\n  showDataAtMouseX(componentState, params) {\n    let studentData = componentState.studentData;\n    let mouseOverPoints = studentData.mouseOverPoints;\n    let x = null;\n\n    // get the x value from the latest mouse over point\n    if (mouseOverPoints != null && mouseOverPoints.length > 0) {\n      let latestMouseOverPoint = mouseOverPoints[mouseOverPoints.length - 1];\n      x = Math.round(latestMouseOverPoint[0]);\n    }\n    let xUnits = studentData.xAxis.units;\n    let yUnits = studentData.yAxis.units;\n    let xAxisTitle = studentData.xAxis.title.text;\n    let yAxisTitle = studentData.yAxis.title.text;\n    this.removeAllCellsFromTableData();\n    this.addTableDataRow(this.createTableRow(['Series Name', xAxisTitle, yAxisTitle]));\n    for (let trial of studentData.trials) {\n      if (trial.show) {\n        let multipleSeries = trial.series;\n        for (let singleSeries of multipleSeries) {\n          if (singleSeries.show !== false) {\n            let closestDataPoint = this.getClosestDataPoint(singleSeries.data, x);\n            if (closestDataPoint != null) {\n              this.addTableDataRow(this.createTableRow([singleSeries.name,\n                  Math.round(this.getXFromDataPoint(closestDataPoint)) + ' ' + xUnits,\n                  Math.round(this.getYFromDataPoint(closestDataPoint)) + ' ' + yUnits]));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove all the rows and cells from the table data.\n   */\n  removeAllCellsFromTableData() {\n    this.tableData = [];\n  }\n\n  /**\n   * Append a row to the table data.\n   * @param row An array of objects. Each object represents a cell in the table.\n   */\n  addTableDataRow(row) {\n    this.tableData.push(row);\n  }\n\n  /**\n   * Create a cell object.\n   * @param text The text to show in the cell.\n   * @param editable Whether the student is allowed to edit the contents in the\n   * cell.\n   * @param size The with of the cell.\n   * @return An object.\n   */\n  createTableCell(text = '', editable = false, size = null) {\n    return { text: text, editable: editable, size: size };\n  }\n\n  /**\n   * Create a row.\n   * @param columns An array of strings or objects.\n   * @return An array of objects.\n   */\n  createTableRow(columns) {\n    let row = [];\n    for (let column of columns) {\n      if (column.constructor.name == 'String') {\n        row.push(this.createTableCell(column));\n      } else if (column.constructor.name == 'Object') {\n        row.push(this.createTableCell(column.text, column.editable, column.size));\n      }\n    }\n    return row;\n  }\n\n  /**\n   * Get the data point that has the closest x value to the given argument x.\n   * @param dataPoints An array of data points. Each data point can be an object\n   * or an array.\n   * @param x The argument x.\n   * @return A data point which can be an object or array.\n   */\n  getClosestDataPoint(dataPoints, x) {\n    let closestDataPoint = null;\n    let minNumericalXDifference = Infinity;\n    for (let dataPoint of dataPoints) {\n      let dataPointX = this.getXFromDataPoint(dataPoint);\n      let numericalDifference = this.getNumericalAbsoluteDifference(x, dataPointX);\n      if (numericalDifference < minNumericalXDifference) {\n        // we have found a new data point that is closer to x\n        closestDataPoint = dataPoint;\n        minNumericalXDifference = numericalDifference;\n      }\n    }\n    return closestDataPoint;\n  }\n\n  /**\n   * Get the absolute value of the difference between the two numbers.\n   * @param x1 A number.\n   * @param x2 A number.\n   * @return The absolute value of the difference between the two numbers.\n   */\n  getNumericalAbsoluteDifference(x1, x2) {\n    return Math.abs(x1 - x2);\n  }\n\n  /**\n   * Get the x value from the data point.\n   * @param dataPoint An object or array.\n   * @return The x value of the data point.\n   */\n  getXFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[0];\n    }\n  }\n\n  /**\n   * Get the y value from the data point.\n   * @param dataPoint An object or array.\n   * @return The y value of the data point.\n   */\n  getYFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name == 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name == 'Array') {\n      return dataPoint[1];\n    }\n  }\n\n  /**\n   * Set the series data into the table\n   * @param series an object that contains the data for a single series\n   * @param params the parameters for where to place the points in the table\n   */\n  setSeriesIntoTable(series, params) {\n\n    /*\n     * the default is set to not skip the first row and for the\n     * x column to be the first column and the y column to be the\n     * second column\n     */\n    var skipFirstRow = true;\n    var xColumn = 0;\n    var yColumn = 1;\n\n    if (params != null) {\n\n      if (params.skipFirstRow != null) {\n        // determine whether to skip the first row\n        skipFirstRow = params.skipFirstRow;\n      }\n\n      if (params.xColumn != null) {\n        // get the x column\n        xColumn = params.xColumn;\n      }\n\n      if (params.yColumn != null) {\n        // get the y column\n        yColumn = params.yColumn;\n      }\n    }\n\n    if (series != null) {\n\n      // get the table data rows\n      var tableDataRows = this.getTableDataRows();\n\n      // get the data from the series\n      var data = series.data;\n\n      if (data != null) {\n\n        // our counter for traversing the data rows\n        var dataRowCounter = 0;\n\n        // loop through all the table data rows\n        for (var r = 0; r < tableDataRows.length; r++) {\n\n          if (skipFirstRow && r === 0) {\n            // skip the first table data row\n            continue;\n          }\n\n          var x = '';\n          var y = '';\n\n          // get the data row\n          var dataRow = data[dataRowCounter];\n\n          if (dataRow != null) {\n            // get the x and y values from the data row\n            x = dataRow[0];\n            y = dataRow[1];\n          }\n\n          // set the x and y values into the table data\n          this.setTableDataCellValue(xColumn, r, null, x);\n          this.setTableDataCellValue(yColumn, r, null, y);\n\n          // increment the data row counter\n          dataRowCounter++;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the table data cell value\n   * @param x the x index (0 indexed)\n   * @param y the y index (0 indexed)\n   * @param value the value to set in the cell\n   */\n  setTableDataCellValue(x, y, table, value) {\n\n    var tableDataRows = table;\n\n    if (table == null) {\n      // get the table data rows\n      tableDataRows = this.getTableDataRows();\n    }\n\n    if (tableDataRows != null) {\n\n      // get the row we want\n      var row = tableDataRows[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cell.text = value;\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the value of a cell in the table\n   * @param x the x coordinate\n   * @param y the y coordinate\n   * @param table (optional) table data to get the value from. this is used\n   * when we want to look up the value in the default authored table\n   * @returns the cell value (text or a number)\n   */\n  getTableDataCellValue(x, y, table) {\n\n    var cellValue = null;\n\n    if (table == null) {\n      // get the table data rows\n      table = this.getTableDataRows();\n    }\n\n    if (table != null) {\n\n      // get the row we want\n      var row = table[y];\n\n      if (row != null) {\n\n        // get the cell we want\n        var cell = row[x];\n\n        if (cell != null) {\n\n          // set the value into the cell\n          cellValue = cell.text;\n        }\n      }\n    }\n\n    return cellValue;\n  }\n\n  /**\n   * Get the number of rows in the table\n   * @returns the number of rows in the table\n   */\n  getNumRows() {\n    return this.componentContent.numRows;\n  }\n\n  /**\n   * Get the number of columns in the table\n   * @returns the number of columns in the table\n   */\n  getNumColumns() {\n    return this.componentContent.numColumns;\n  }\n\n  /**\n   * Check if the table is empty. The table is empty if all the\n   * cells are empty string.\n   * @returns whether the table is empty\n   */\n  isTableEmpty() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get a cell value\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        if (cellValue != null && cellValue != '') {\n          // the cell is not empty so the table is not empty\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the table is set to the default values. The table\n   * is set to the default values if all the cells match the\n   * values in the default authored table.\n   * @returns whether the table is set to the default values\n   */\n  isTableReset() {\n    var result = true;\n\n    var numRows = this.getNumRows();\n    var numColumns = this.getNumColumns();\n\n    // get the default table\n    var defaultTable = this.componentContent.tableData;\n\n    // loop through all the rows\n    for (var r = 0; r < numRows; r++) {\n\n      // loop through all the cells in the row\n      for (var c = 0; c < numColumns; c++) {\n\n        // get the cell value from the student table\n        var cellValue = this.getTableDataCellValue(c, r);\n\n        // get the cell value from the default table\n        var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\n\n        if (cellValue != defaultCellValue) {\n          // the cell values do not match so the table is not set to the default values\n          result = false;\n          break;\n        }\n      }\n\n      if (result == false) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Snip the table by converting it to an image\n   * @param $event the click event\n   */\n  snipTable($event) {\n    // get the table element. this will obtain an array.\n    var tableElement = angular.element('#table_' + this.nodeId + '_' + this.componentId);\n\n    if (tableElement != null && tableElement.length > 0) {\n      // get the table element\n      tableElement = tableElement[0];\n\n      // convert the table element to a canvas element\n      html2canvas(tableElement).then((canvas) => {\n        // get the canvas as a base64 string\n        var img_b64 = canvas.toDataURL('image/png');\n\n        // get the image object\n        var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\n\n        // create a notebook item with the image populated into it\n        this.NotebookService.addNote($event, imageObject);\n      });\n    }\n  }\n\n  /**\n   * Copy the table data cell text from one component state to another\n   * @param fromComponentState get the cell text values from this component state\n   * @param toComponentState set the cell text values in this component state\n   */\n  copyTableDataCellText(fromComponentState, toComponentState) {\n\n    if (fromComponentState != null && toComponentState != null) {\n      var fromStudentData = fromComponentState.studentData;\n      var toStudentData = toComponentState.studentData;\n\n      if (fromStudentData != null && toStudentData != null) {\n        var fromTableData = fromStudentData.tableData;\n        var toTableData = toStudentData.tableData;\n\n        if (fromTableData != null & toTableData != null) {\n\n          // loop through all the rows\n          for (var y = 0; y < this.getNumRows(); y++) {\n\n            // loop through all the columns\n            for (var x = 0; x < this.getNumColumns(); x++) {\n\n              // get the cell value\n              var cellValue = this.getTableDataCellValue(x, y, fromTableData);\n\n              if (cellValue != null) {\n                // set the cell value\n                this.setTableDataCellValue(x, y, toTableData, cellValue);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return toComponentState;\n  }\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n\n    /*\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before the VLE exits.\n     */\n    this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n      this.$rootScope.$broadcast('doneExiting');\n    }));\n  };\n\n  /**\n   * Get the import previous work node id\n   * @return the import previous work node id or null\n   */\n  getImportPreviousWorkNodeId() {\n    var importPreviousWorkNodeId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\n      importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\n\n      if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\n        /*\n         * check if the node id is in the field that we used to store\n         * the import previous work node id in\n         */\n        importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\n      }\n    }\n\n    return importPreviousWorkNodeId;\n  }\n\n  /**\n   * Get the import previous work component id\n   * @return the import previous work component id or null\n   */\n  getImportPreviousWorkComponentId() {\n    var importPreviousWorkComponentId = null;\n\n    if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\n      var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\n\n      if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\n        /*\n         * check if the component id is in the field that we used to store\n         * the import previous work component id in\n         */\n        importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\n      }\n    }\n\n    return importPreviousWorkComponentId;\n  }\n\n  /**\n   * Only merges the first component state\n   * TODO: implement merging all component states\n   * @param {array} componentStates\n   * @return {object} merged component state\n   */\n  createMergedComponentState(componentStates) {\n    const defaultComponentState = this.createBlankComponentState();\n    defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n    return this.copyTableDataCellText(componentStates[0], defaultComponentState);\n  }\n}\n\nTableController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'TableService',\n  'UtilService'\n];\n\nexport default TableController;\n"]}