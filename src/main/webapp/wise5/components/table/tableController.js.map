{"version":3,"sources":["tableController.es6"],"names":[],"mappings":"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","file":"tableController.js","sourcesContent":["class TableController {\n    constructor($rootScope,\n                $scope,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                TableService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TableService = TableService;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // the component id\n        this.componentId = null;\n\n        // field that will hold the component content\n        this.componentContent = null;\n\n        // field that will hold the authoring component content\n        this.authoringComponentContent = null;\n\n        // whether the step should be disabled\n        this.isDisabled = false;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        // whether the student work has changed since last submit\n        this.isSubmitDirty = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // holds the the table data\n        this.tableData = null;\n\n        // whether this part is showing previous work\n        this.isShowPreviousWork = false;\n\n        // whether the student work is for a submit\n        this.isSubmit = false;\n\n        // whether students can attach files to their work\n        this.isStudentAttachmentEnabled = false;\n\n        // whether the prompt is shown or not\n        this.isPromptVisible = true;\n\n        // whether the save button is shown or not\n        this.isSaveButtonVisible = false;\n\n        // whether the submit button is shown or not\n        this.isSubmitButtonVisible = false;\n\n        // whether the reset table button is shown or not\n        this.isResetTableButtonVisible = true;\n\n        // get the current node and node id\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            this.nodeId = currentNode.id;\n        } else {\n            this.nodeId = this.$scope.nodeId;\n        }\n\n        // get the component content from the scope\n        this.componentContent = this.$scope.componentContent;\n\n        // get the authoring component content\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\n\n        this.mode = this.$scope.mode;\n\n        if (this.componentContent != null) {\n\n            // get the component id\n            this.componentId = this.componentContent.id;\n\n            if (this.mode === 'student') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n                this.isResetTableButtonVisible = true;\n            } else if (this.mode === 'grading') {\n                this.isPromptVisible = true;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'onlyShowWork') {\n                this.isPromptVisible = false;\n                this.isSaveButtonVisible = false;\n                this.isSubmitButtonVisible = false;\n                this.isResetTableButtonVisible = false;\n                this.isDisabled = true;\n            } else if (this.mode === 'authoring') {\n                this.updateAdvancedAuthoringView();\n\n                $scope.$watch(function() {\n                    return this.authoringComponentContent;\n                }.bind(this), function(newValue, oldValue) {\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n                    this.resetTable();\n                }.bind(this), true);\n            }\n\n            // get the show previous work node id if it is provided\n            var showPreviousWorkNodeId = this.componentContent.showPreviousWorkNodeId;\n\n            var componentState = null;\n\n            if (showPreviousWorkNodeId != null) {\n                // this component is showing previous work\n                this.isShowPreviousWork = true;\n\n                // get the show previous work component id if it is provided\n                var showPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\n\n                // get the node content for the other node\n                var showPreviousWorkNodeContent = this.ProjectService.getNodeContentByNodeId(showPreviousWorkNodeId);\n\n                // get the component content for the component we are showing previous work for\n                this.componentContent = this.NodeService.getComponentContentById(showPreviousWorkNodeContent, showPreviousWorkComponentId);\n\n                // get the component state for the show previous work\n                componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(showPreviousWorkNodeId, showPreviousWorkComponentId);\n\n                // populate the student work into this component\n                this.setStudentWork(componentState);\n\n                // disable the component since we are just showing previous work\n                this.isDisabled = true;\n\n                // set up the table\n                this.setupTable();\n\n                // register this component with the parent node\n                this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n            } else {\n                // this is a regular component\n\n                // get the component state from the scope\n                componentState = this.$scope.componentState;\n\n                // set whether studentAttachment is enabled\n                this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n                if (componentState == null) {\n                    // check if we need to import work.\n                    // only import work if the student does not already have\n                    // work for this component\n                    var importWorkNodeId = this.componentContent.importWorkNodeId;\n                    var importWorkComponentId = this.componentContent.importWorkComponentId;\n\n                    if (importWorkNodeId != null && importWorkComponentId != null) {\n                        // import the work from the other component\n                        this.importWork();\n                    }\n                } else {\n                    // populate the student work into this component\n                    this.setStudentWork(componentState);\n                }\n\n                // set up the table\n                this.setupTable();\n\n                // check if we need to lock this component\n                this.calculateDisabled();\n\n                if (this.$scope.$parent.registerComponentController != null) {\n                    // register this component with the parent node\n                    this.$scope.$parent.registerComponentController(this.$scope, this.componentContent);\n                }\n            }\n        }\n\n        /**\n         * A connected component has changed its student data so we will\n         * perform any necessary changes to this component\n         * @param connectedComponent the connected component\n         * @param connectedComponentParams the connected component params\n         * @param componentState the component state from the connected\n         * component that has changed\n         */\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\n\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\n\n                // get the component type that has changed\n                var componentType = connectedComponent.type;\n\n                if (componentType === 'Graph') {\n\n                    // set the graph data into the table\n                    this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\n\n                    // the table has changed\n                    this.$scope.tableController.isDirty = true;\n                }\n            }\n        }.bind(this);\n\n        /**\n         * Get the component state from this component. The parent node will\n         * call this function to obtain the component state when it needs to\n         * save student data.\n         * @param isSubmit boolean whether the request is coming from a submit\n         * action (optional; default is false)\n         * @return a component state containing the student data\n         */\n        this.$scope.getComponentState = function(isSubmit) {\n            let componentState = null;\n            let getState = false;\n\n            if (isSubmit) {\n                if (this.$scope.tableController.isSubmitDirty) {\n                    getState = true;\n                }\n            } else {\n                if (this.$scope.tableController.isDirty) {\n                    getState = true;\n                }\n            }\n\n            if (getState) {\n                // create a component state populated with the student data\n                componentState = this.$scope.tableController.createComponentState();\n            }\n\n            return componentState;\n        }.bind(this);\n\n        /**\n         * The parent node submit button was clicked\n         */\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\n\n            // get the node id of the node\n            var nodeId = args.nodeId;\n\n            // make sure the node id matches our parent node\n            if (this.nodeId === nodeId) {\n                this.isSubmit = true;\n            }\n        }));\n\n        /**\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\n         * we receive the response from saving a component state to the server\n         */\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n\n            let componentState = args.studentWork;\n\n            // check that the component state is for this component\n            if (componentState && this.nodeId === componentState.nodeId\n                && this.componentId === componentState.componentId) {\n\n                // set isDirty to false because the component state was just saved and notify node\n                this.isDirty = false;\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\n\n                let isAutoSave = componentState.isAutoSave;\n                let isSubmit = componentState.isSubmit;\n                let serverSaveTime = componentState.serverSaveTime;\n\n                // set save message\n                if (isSubmit) {\n                    this.setSaveMessage('Submitted', serverSaveTime);\n\n                    this.submit();\n\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\n                    this.isSubmitDirty = false;\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                } else if (isAutoSave) {\n                    this.setSaveMessage('Auto-saved', serverSaveTime);\n                } else {\n                    this.setSaveMessage('Saved', serverSaveTime);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the parent node. This will perform any necessary cleanup\n         * when the student exits the parent node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n        }));\n\n        this.$scope.getNumber = function(num) {\n            return new Array(parseInt(num));\n        }\n    }\n\n    /**\n     * Get a copy of the table data\n     * @param tableData the table data to copy\n     * @return a copy of the table data\n     */\n    getCopyOfTableData(tableData) {\n        var tableDataCopy = null;\n\n        if (tableData != null) {\n            // create a JSON string from the table data\n            var tableDataJSONString = JSON.stringify(tableData);\n\n            // create a JSON object from the table data string\n            var tableDataJSON = JSON.parse(tableDataJSONString);\n\n            tableDataCopy = tableDataJSON;\n        }\n\n        return tableDataCopy;\n    };\n\n    /**\n     * Setup the table\n     */\n    setupTable() {\n\n        if (this.tableData == null) {\n            /*\n             * the student does not have any table data so we will use\n             * the table data from the component content\n             */\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n        }\n    };\n\n    /**\n     * Reset the table data to its initial state from the component content\n     */\n    resetTable() {\n        // get the original table from the step content\n        this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\n\n        // the table has changed so we will perform additional processing\n        this.studentDataChanged();\n    };\n\n    /**\n     * Get the rows of the table data\n     */\n    getTableDataRows() {\n        return this.tableData;\n    };\n\n    /**\n     * Populate the student work into the component\n     * @param componentState the component state to populate into the component\n     */\n    setStudentWork(componentState) {\n\n        if (componentState != null) {\n\n            // get the student data from the component state\n            var studentData = componentState.studentData;\n\n            if (studentData != null) {\n                // set the table into the controller\n                this.tableData = studentData.tableData;\n\n                this.processLatestSubmit();\n            }\n        }\n    };\n\n    /**\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\n     */\n    processLatestSubmit() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n        if (latestState) {\n            if (latestState.isSubmit) {\n                // latest state is a submission, so set isSubmitDirty to false and notify node\n                this.isSubmitDirty = false;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\n                // set save message\n                this.setSaveMessage('Last submitted', latestState.serverSaveTime);\n            } else {\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\n                this.isSubmitDirty = true;\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n                // set save message\n                this.setSaveMessage('Last saved', latestState.serverSaveTime);\n            }\n        }\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n        this.isSubmit = false;\n\n        // tell the parent node that this component wants to save\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n        this.isSubmit = true;\n\n        // tell the parent node that this component wants to submit\n        this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n    };\n\n    submit() {\n        // check if we need to lock the component after the student submits\n        if (this.isLockAfterSubmit()) {\n            this.isDisabled = true;\n        }\n    };\n\n    /**\n     * Called when the student changes their work\n     */\n    studentDataChanged() {\n        /*\n         * set the dirty flag so we will know we need to save the\n         * student work later\n         */\n        this.isDirty = true;\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n        this.isSubmitDirty = true;\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n\n        // clear out the save message\n        this.setSaveMessage('', null);\n\n        // get this part id\n        var componentId = this.getComponentId();\n\n        // create a component state populated with the student data\n        var componentState = this.createComponentState();\n\n        /*\n         * the student work in this component has changed so we will tell\n         * the parent node that the student data will need to be saved.\n         * this will also notify connected parts that this component's student\n         * data has changed.\n         */\n        this.$scope.$emit('componentStudentDataChanged', {componentId: componentId, componentState: componentState});\n    };\n\n    /**\n     * Create a new component state populated with the student data\n     * @return the componentState after it has been populated\n     */\n    createComponentState() {\n\n        // create a new component state\n        var componentState = this.NodeService.createNewComponentState();\n\n        if (componentState != null) {\n            var studentData = {};\n\n            // insert the table data\n            studentData.tableData = this.getCopyOfTableData(this.tableData);\n\n            if (this.isSubmit) {\n                // the student submitted this work\n                componentState.isSubmit = this.isSubmit;\n\n                /*\n                 * reset the isSubmit value so that the next component state\n                 * doesn't maintain the same value\n                 */\n                this.isSubmit = false;\n            }\n\n            // set the student data into the component state\n            componentState.studentData = studentData;\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if we need to lock the component\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            // check if the parent has set this component to disabled\n            if (componentContent.isDisabled) {\n                this.isDisabled = true;\n            } else if (componentContent.lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for this component\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this component\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Check whether we need to show the prompt\n     * @return whether to show the prompt\n     */\n    showPrompt() {\n        return this.isPromptVisible;\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        return this.isSaveButtonVisible;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        return this.isSubmitButtonVisible;\n    };\n\n\n    /**\n     * Check whether we need to show the reset table button\n     * @return whether to show the reset table button\n     */\n    showResetTableButton() {\n        return this.isResetTableButtonVisible;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the prompt to show to the student\n     */\n    getPrompt() {\n        var prompt = null;\n\n        if (this.componentContent != null) {\n            prompt = this.componentContent.prompt;\n        }\n\n        return prompt;\n    };\n\n    /**\n     * Import work from another component\n     */\n    importWork() {\n\n        // get the component content\n        var componentContent = this.componentContent;\n\n        if (componentContent != null) {\n\n            var importWorkNodeId = componentContent.importWorkNodeId;\n            var importWorkComponentId = componentContent.importWorkComponentId;\n\n            if (importWorkNodeId != null && importWorkComponentId != null) {\n\n                // get the latest component state for this component\n                var componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n                /*\n                 * we will only import work into this component if the student\n                 * has not done any work for this component\n                 */\n                if(componentState == null) {\n                    // the student has not done any work for this component\n\n                    // get the latest component state from the component we are importing from\n                    var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importWorkNodeId, importWorkComponentId);\n\n                    if (importWorkComponentState != null) {\n                        /*\n                         * populate a new component state with the work from the\n                         * imported component state\n                         */\n                        var populatedComponentState = this.TableService.populateComponentState(importWorkComponentState);\n\n                        // populate the component state into this component\n                        this.setStudentWork(populatedComponentState);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * handle importing notebook item data (we only support csv for now)\n     */\n    attachStudentAsset(studentAsset) {\n        // TODO: implement me\n    };\n\n    /**\n     * Set the graph data into the table data\n     * @param componentState the component state to get the graph data from\n     * @param params (optional) the params to specify what columns\n     * and rows to overwrite in the table data\n     */\n    setGraphDataIntoTableData(componentState, params) {\n\n        /*\n         * the default is set to not skip the first row and for the\n         * x column to be the first column and the y column to be the\n         * second column\n         */\n        var skipFirstRow = false;\n        var xColumn = 0;\n        var yColumn = 1;\n        var seriesIndex = 0;\n\n        if (params != null) {\n\n            if (params.skipFirstRow != null) {\n                // determine whether to skip the first row\n                skipFirstRow = params.skipFirstRow;\n            }\n\n            if (params.xColumn != null) {\n                // get the x column\n                xColumn = params.xColumn;\n            }\n\n            if (params.yColumn != null) {\n                // get the y column\n                yColumn = params.yColumn;\n            }\n\n            if (params.seriesIndex != null) {\n                // get the series index\n                seriesIndex = params.seriesIndex;\n            }\n        }\n\n        if (componentState != null && componentState.studentData != null) {\n\n            // get the table data rows\n            var tableDataRows = this.getTableDataRows();\n\n            if (tableDataRows != null) {\n\n                var data = null;\n\n                var studentData = componentState.studentData;\n\n                // get the series\n                var series = studentData.series;\n\n                if (series != null && series.length > 0) {\n\n                    // get the series that we will get data from\n                    var tempSeries = series[seriesIndex];\n\n                    if (tempSeries != null) {\n\n                        // get the data from the series\n                        data = tempSeries.data;\n\n                        if (data != null) {\n\n                            // our counter for traversing the data rows\n                            var dataRowCounter = 0;\n\n                            // loop through all the table data rows\n                            for (var r = 0; r < tableDataRows.length; r++) {\n\n                                if (skipFirstRow && r === 0) {\n                                    // skip the first table data row\n                                    continue;\n                                }\n\n                                var x = '';\n                                var y = '';\n\n                                // get the data row\n                                var dataRow = data[dataRowCounter];\n\n                                if (dataRow != null) {\n                                    // get the x and y values from the data row\n                                    x = dataRow[0];\n                                    y = dataRow[1];\n\n                                }\n\n                                // set the x and y values into the table data\n                                this.setTableDataCellValue(xColumn, r, x);\n                                this.setTableDataCellValue(yColumn, r, y);\n\n                                // increment the data row counter\n                                dataRowCounter++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Set the table data cell value\n     * @param x the x index (0 indexed)\n     * @param y the y index (0 indexed)\n     * @param value the value to set in the cell\n     */\n    setTableDataCellValue(x, y, value) {\n\n        // get the table data rows\n        var tableDataRows = this.getTableDataRows();\n\n        if (tableDataRows != null) {\n\n            // get the row we want\n            var row = tableDataRows[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cell.text = value;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the component id\n     * @return the component id\n     */\n    getComponentId() {\n        return this.componentContent.id;\n    };\n\n    /**\n     * The component has changed in the regular authoring view so we will save the project\n     */\n    authoringViewComponentChanged() {\n        // update the JSON string in the advanced authoring view textarea\n        this.updateAdvancedAuthoringView();\n\n        // save the project to the server\n        this.ProjectService.saveProject();\n    };\n\n    /**\n     * The component has changed in the advanced authoring view so we will update\n     * the component and save the project.\n     */\n    advancedAuthoringViewComponentChanged() {\n\n        try {\n            /*\n             * create a new component by converting the JSON string in the advanced\n             * authoring view into a JSON object\n             */\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n            // replace the component in the project\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\n\n            this.authoringComponentContent = authoringComponentContent;\n\n            // set the new component into the controller\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n            // save the project to the server\n            this.ProjectService.saveProject();\n        } catch(e) {\n\n        }\n    };\n\n    /**\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\n     */\n    updateAdvancedAuthoringView() {\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n    };\n\n    /**\n     * The table size has changed in the authoring view so we will update it\n     */\n    authoringViewTableSizeChanged() {\n\n        // create a new table with the new size and populate it with the existing cells\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\n\n        // set the new table into the component content\n        this.authoringComponentContent.tableData = newTable;\n\n        // perform preview updating and project saving\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Create a table with the given dimensions. Populate the cells with\n     * the cells from the old table.\n     * @param newNumRows the number of rows in the new table\n     * @param newNumColumns the number of columns in the new table\n     * @returns a new table\n     */\n    getUpdatedTableSize(newNumRows, newNumColumns) {\n\n        var newTable = [];\n\n        // create the rows\n        for (var r = 0; r < newNumRows; r++) {\n\n            var newRow = [];\n\n            // create the columns\n            for (var c = 0; c < newNumColumns; c++) {\n\n                // try to get the cell from the old table\n                var cell = this.getCellObjectFromComponentContent(c, r);\n\n                if (cell == null) {\n                    /*\n                     * the old table does not have a cell for the given\n                     * row/column location so we will create an empty cell\n                     */\n                    cell = this.createEmptyCell();\n                }\n\n                newRow.push(cell);\n            }\n\n            newTable.push(newRow);\n        }\n\n        return newTable;\n    }\n\n    /**\n     * Get the cell object at the given x, y location\n     * @param x the column number (zero indexed)\n     * @param y the row number (zero indexed)\n     * @returns the cell at the given x, y location or null if there is none\n     */\n    getCellObjectFromComponentContent(x, y) {\n        var cellObject = null;\n\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // get the row\n            var row = tableData[y];\n\n            if (row != null) {\n\n                // get the cell\n                cellObject = row[x];\n            }\n        }\n\n        return cellObject;\n    }\n\n    /**\n     * Create an empty cell\n     * @returns an empty cell object\n     */\n    createEmptyCell() {\n        var cell = {};\n\n        cell.text = '';\n        cell.editable = true;\n        cell.size = null;\n\n        return cell;\n    }\n\n    /**\n     * Insert a row into the table from the authoring view\n     * @param y the row number to insert at\n     */\n    authoringViewInsertRow(y) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            // create the new row that we will insert\n            var newRow = [];\n\n            // get the number of columns\n            var numColumns = this.authoringComponentContent.numColumns;\n\n            // populate the new row with the correct number of cells\n            for (var c = 0; c < numColumns; c++) {\n                // create an empty cell\n                var newCell = this.createEmptyCell();\n                newRow.push(newCell);\n            }\n\n            // insert the new row into the table\n            tableData.splice(y, 0, newRow);\n\n            // update the number of rows value\n            this.authoringComponentContent.numRows++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a row in the table from the authoring view\n     * @param y the row number to delete\n     */\n    authoringViewDeleteRow(y) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                // remove the row\n                tableData.splice(y, 1);\n\n                // update the number of rows value\n                this.authoringComponentContent.numRows--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Insert a column into the table from the authoring view\n     * @param x the column number to insert at\n     */\n    authoringViewInsertColumn(x) {\n\n        // get the table\n        var tableData = this.authoringComponentContent.tableData;\n\n        if (tableData != null) {\n\n            var numRows = this.authoringComponentContent.numRows;\n\n            // loop through all the rows\n            for (var r = 0; r < numRows; r++) {\n\n                // get a row\n                var tempRow = tableData[r];\n\n                if (tempRow != null) {\n\n                    // create an empty cell\n                    var newCell = this.createEmptyCell();\n\n                    // insert the cell into the row\n                    tempRow.splice(x, 0, newCell);\n                }\n            }\n\n            // update the number of columns value\n            this.authoringComponentContent.numColumns++;\n        }\n\n        // save the project and update the preview\n        this.authoringViewComponentChanged();\n    }\n\n    /**\n     * Delete a column in the table from the authoring view\n     * @param x the column number to delete\n     */\n    authoringViewDeleteColumn(x) {\n\n        var answer = confirm('Are you sure you want to delete this column?');\n\n        if (answer) {\n            // get the table\n            var tableData = this.authoringComponentContent.tableData;\n\n            if (tableData != null) {\n\n                var numRows = this.authoringComponentContent.numRows;\n\n                // loop through all the rows\n                for (var r = 0; r < numRows; r++) {\n\n                    // get a row\n                    var tempRow = tableData[r];\n\n                    if (tempRow != null) {\n\n                        // remove the cell from the row\n                        tempRow.splice(x, 1);\n                    }\n                }\n\n                // update the number of columns value\n                this.authoringComponentContent.numColumns--;\n            }\n\n            // save the project and update the preview\n            this.authoringViewComponentChanged();\n        }\n    }\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n\n        /*\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before the VLE exits.\n         */\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nTableController.$inject = [\n    '$rootScope',\n    '$scope',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    'TableService'\n];\n\nexport default TableController;\n"]}