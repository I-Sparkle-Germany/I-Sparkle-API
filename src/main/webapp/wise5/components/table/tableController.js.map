{"version":3,"sources":["tableController.es6"],"names":["TableController","$anchorScroll","$filter","$injector","$location","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","TableService","UtilService","idToOrder","$translate","nodeId","componentId","componentContent","authoringComponentContent","isDisabled","isDirty","isSubmitDirty","saveMessage","text","time","tableData","isShowPreviousWork","isSubmit","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","submitCounter","showAdvancedAuthoring","showJSONAuthoring","latestAnnotations","isResetTableButtonVisible","isSnipTableButtonVisible","notebookConfig","getNotebookConfig","connectedComponentUpdateOnOptions","value","currentNode","getCurrentNode","id","originalComponentContent","mode","latestConnectedComponentState","latestConnectedComponentParams","workgroupId","teacherWorkgroupId","columnCellSizes","parseColumnCellSizes","showSaveButton","showSubmitButton","tableId","getLatestComponentAnnotations","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","updateAdvancedAuthoringView","$watch","bind","newValue","oldValue","injectAssetPaths","resetTable","componentState","importPreviousWorkNodeId","getImportPreviousWorkNodeId","importPreviousWorkComponentId","getImportPreviousWorkComponentId","importWork","setStudentWork","setupTable","maxSubmitCount","isSubmitButtonDisabled","calculateDisabled","$parent","nodeController","registerComponentController","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","updateOn","componentType","type","makeCopyOfJSONObject","tableController","setGraphDataIntoTableData","getComponentState","deferred","defer","getState","action","createComponentState","then","resolve","promise","$on","angular","event","args","submitTriggeredBy","submit","studentWork","$emit","isAutoSave","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","lockIfNecessary","isConnectedComponent","getConnectedComponentParams","performUpdate","isTableEmpty","isTableReset","annotation","annotationNodeId","annotationComponentId","getNumber","num","array","Array","isNaN","parseInt","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","summernoteId","target","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","tableDataCopy","tableDataJSONString","JSON","stringify","tableDataJSON","parse","getCopyOfTableData","studentDataChanged","studentData","processLatestSubmit","latestState","getLatestComponentStateByNodeIdAndComponentId","performSubmit","numberOfSubmitsLeft","message","incrementSubmitCounter","isLockAfterSubmit","getComponentId","createNewComponentState","createComponentStateAdditionalProcessing","lockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isSubmitted","isWorkSubmitted","result","prompt","showPreviousWorkPrompt","importWorkComponentState","defaultComponentState","createBlankComponentState","mergedComponentState","copyTableDataCellText","studentAsset","params","trialIndex","seriesIndex","studentDataVersion","version","series","length","tempSeries","setSeriesIntoTable","trials","trial","multipleSeries","skipFirstRow","xColumn","yColumn","tableDataRows","getTableDataRows","data","dataRowCounter","r","x","y","dataRow","setTableDataCellValue","table","row","cell","cellValue","nodeAuthoringController","authoringViewNodeChanged","fromJson","authoringComponentContentJSONString","replaceComponent","e","showSaveErrorAdvancedAuthoring","toJson","rowOrColumn","numRows","answer","confirm","authoringViewTableSizeChanged","numColumns","newTable","getUpdatedTableSize","authoringViewComponentChanged","newNumRows","newNumColumns","newRow","c","getCellObjectFromComponentContent","createEmptyCell","push","cellObject","editable","size","newCell","cellSize","splice","tempRow","stepNodeIds","getNodeIds","nodePositionAndTitle","getNodePositionAndTitleByNodeId","components","getComponentsByNodeId","isApplicationNode","getNumRows","getNumColumns","getTableDataCellValue","defaultTable","defaultCellValue","$event","tableElement","element","hideIFrames","hash","canvas","img_b64","toDataURL","imageObject","getImageObjectFromBase64String","addNewItem","showIFrames","catch","isNotebookEnabled","fromComponentState","toComponentState","fromStudentData","toStudentData","fromTableData","toTableData","exitListener","$broadcast","showPreviousWork","showPreviousWorkNodeId","showPreviousWorkComponentId","authoringShowPreviousWorkNode","getNodeById","oldShowPreviousWorkComponentId","newShowPreviousWorkComponentId","newShowPreviousWorkComponent","getComponentByNodeIdAndComponentId","currentComponentType","newComponentType","componentService","get","newComponent","createComponent","advancedAuthoringViewComponentChanged","component","componentHasWork","importPreviousWork","html","removeAbsoluteAssetPaths","insertWISELinks","importWorkNodeId","importWorkComponentId","newConnectedComponent","connectedComponents","index","show","setShowSubmitButtonValue","firstRow","authoringSetColumnCellSizes","column","$inject"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,e;AACF,6BAAYC,aAAZ,EACYC,OADZ,EAEYC,SAFZ,EAGYC,SAHZ,EAIYC,SAJZ,EAKYC,EALZ,EAMYC,UANZ,EAOYC,MAPZ,EAQYC,iBARZ,EASYC,aATZ,EAUYC,WAVZ,EAWYC,eAXZ,EAYYC,cAZZ,EAaYC,kBAbZ,EAcYC,YAdZ,EAeYC,WAfZ,EAeyB;AAAA;;AAAA;;AAErB,aAAKf,aAAL,GAAqBA,aAArB;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,SAAL,GAAiB,KAAKJ,cAAL,CAAoBI,SAArC;;AAEA,aAAKC,UAAL,GAAkB,KAAKhB,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKiB,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAKC,gBAAL,GAAwB,IAAxB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,UAAL,GAAkB,KAAlB;;AAEA;AACA,aAAKC,OAAL,GAAe,KAAf;;AAEA;AACA,aAAKC,aAAL,GAAqB,KAArB;;AAEA;AACA,aAAKC,WAAL,GAAmB;AACfC,kBAAM,EADS;AAEfC,kBAAM;AAFS,SAAnB;;AAKA;AACA,aAAKC,SAAL,GAAiB,IAAjB;;AAEA;AACA,aAAKC,kBAAL,GAA0B,KAA1B;;AAEA;AACA,aAAKC,QAAL,GAAgB,KAAhB;;AAEA;AACA,aAAKC,0BAAL,GAAkC,KAAlC;;AAEA;AACA,aAAKC,eAAL,GAAuB,IAAvB;;AAEA;AACA,aAAKC,mBAAL,GAA2B,KAA3B;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,aAAL,GAAqB,CAArB;;AAEA;AACA,aAAKC,qBAAL,GAA6B,KAA7B;;AAEA;AACA,aAAKC,iBAAL,GAAyB,KAAzB;;AAEA;AACA,aAAKC,iBAAL,GAAyB,IAAzB;;AAEA;AACA,aAAKC,yBAAL,GAAiC,IAAjC;;AAEA;AACA,aAAKC,wBAAL,GAAgC,IAAhC;;AAEA;AACA,aAAKC,cAAL,GAAsB,KAAK9B,eAAL,CAAqB+B,iBAArB,EAAtB;;AAEA;AACA,aAAKC,iCAAL,GAAyC,CACrC;AACIC,mBAAO,QADX;AAEIlB,kBAAM;AAFV,SADqC,EAKrC;AACIkB,mBAAO,QADX;AAEIlB,kBAAM;AAFV,SALqC,CAAzC;;AAWA;AACA,YAAImB,cAAc,KAAKhC,kBAAL,CAAwBiC,cAAxB,EAAlB;AACA,YAAID,eAAe,IAAnB,EAAyB;AACrB,iBAAK3B,MAAL,GAAc2B,YAAYE,EAA1B;AACH,SAFD,MAEO;AACH,iBAAK7B,MAAL,GAAc,KAAKX,MAAL,CAAYW,MAA1B;AACH;;AAED;AACA,aAAKE,gBAAL,GAAwB,KAAKb,MAAL,CAAYa,gBAApC;;AAEA;AACA,aAAKC,yBAAL,GAAiC,KAAKd,MAAL,CAAYc,yBAA7C;;AAEA;;;;AAIA,aAAK2B,wBAAL,GAAgC,KAAKzC,MAAL,CAAYyC,wBAA5C;;AAEA;AACA,aAAKC,IAAL,GAAY,KAAK1C,MAAL,CAAY0C,IAAxB;;AAEA,aAAKC,6BAAL,GAAqC,IAArC;AACA,aAAKC,8BAAL,GAAsC,IAAtC;;AAEA,aAAKC,WAAL,GAAmB,KAAK7C,MAAL,CAAY6C,WAA/B;AACA,aAAKC,kBAAL,GAA0B,KAAK9C,MAAL,CAAY8C,kBAAtC;;AAEA;;;;AAIA,aAAKC,eAAL,GAAuB,KAAKC,oBAAL,CAA0B,KAAKnC,gBAA/B,CAAvB;;AAEA,YAAI,KAAKA,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,iBAAKD,WAAL,GAAmB,KAAKC,gBAAL,CAAsB2B,EAAzC;;AAEA,gBAAI,KAAKE,IAAL,KAAc,SAAlB,EAA6B;AACzB,qBAAKjB,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBoC,cAAjD;AACA,qBAAKtB,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBqC,gBAAnD;;AAEA,qBAAKC,OAAL,GAAe,WAAW,KAAKxC,MAAhB,GAAyB,GAAzB,GAA+B,KAAKC,WAAnD;;AAEA;AACA,qBAAKmB,iBAAL,GAAyB,KAAK9B,iBAAL,CAAuBmD,6BAAvB,CAAqD,KAAKzC,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAKiC,WAAzF,CAAzB;AACA,qBAAKb,yBAAL,GAAiC,IAAjC;AACH,aAVD,MAUO,IAAI,KAAKU,IAAL,KAAc,SAAd,IAA2B,KAAKA,IAAL,KAAc,iBAA7C,EAAgE;AACnE,qBAAKhB,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKK,yBAAL,GAAiC,KAAjC;AACA,qBAAKC,wBAAL,GAAgC,KAAhC;AACA,qBAAKlB,UAAL,GAAkB,IAAlB;;AAEA,oBAAI,KAAK2B,IAAL,KAAc,SAAlB,EAA6B;AACzB;AACA,yBAAKX,iBAAL,GAAyB,KAAK9B,iBAAL,CAAuBmD,6BAAvB,CAAqD,KAAKzC,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,KAAKiC,WAAzF,CAAzB;AACH;AACJ,aAXM,MAWA,IAAI,KAAKH,IAAL,KAAc,cAAlB,EAAkC;AACrC,qBAAKjB,eAAL,GAAuB,KAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKK,yBAAL,GAAiC,KAAjC;AACA,qBAAKC,wBAAL,GAAgC,KAAhC;AACA,qBAAKlB,UAAL,GAAkB,IAAlB;AACH,aAPM,MAOA,IAAI,KAAK2B,IAAL,KAAc,kBAAlB,EAAsC;AACzC,qBAAKjB,eAAL,GAAuB,IAAvB;AACA,qBAAKC,mBAAL,GAA2B,KAA3B;AACA,qBAAKC,qBAAL,GAA6B,KAA7B;AACA,qBAAKK,yBAAL,GAAiC,KAAjC;AACA,qBAAKjB,UAAL,GAAkB,IAAlB;AACH,aANM,MAMA,IAAI,KAAK2B,IAAL,KAAc,WAAlB,EAA+B;AAClC,qBAAKhB,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBoC,cAAjD;AACA,qBAAKtB,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBqC,gBAAnD;AACA;AACA,qBAAKG,kBAAL,GAA0B,sBAAsB,KAAK1C,MAA3B,GAAoC,GAApC,GAA0C,KAAKC,WAAzE;;AAEA;AACA,qBAAK0C,oBAAL,GAA4B,KAAKzC,gBAAL,CAAsB0C,MAAlD;;AAEA;AACA,oBAAIC,oBAAoB,KAAK9C,UAAL,CAAgB,cAAhB,CAAxB;;AAEA;;;;AAIA,oBAAI+C,oBAAoB,KAAKjD,WAAL,CAAiBkD,uBAAjB,CAAyC,IAAzC,EAA+C,IAA/C,EAAqD,KAAK/C,MAA1D,EAAkE,KAAKC,WAAvE,EAAoF,QAApF,EAA8F4C,iBAA9F,CAAxB;;AAEA;;;;AAIA,qBAAKG,uBAAL,GAA+B;AAC3BC,6BAAS,CACL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CADK,EAEL,CAAC,MAAD,EAAS,CAAC,MAAD,EAAS,WAAT,EAAsB,OAAtB,CAAT,CAFK,EAGL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAHK,EAIL,CAAC,UAAD,EAAa,CAAC,UAAD,CAAb,CAJK,EAKL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CALK,EAML,CAAC,MAAD,EAAS,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAT,CANK,EAOL,CAAC,OAAD,EAAU,CAAC,OAAD,CAAV,CAPK,EAQL,CAAC,QAAD,EAAW,CAAC,MAAD,EAAS,OAAT,CAAX,CARK,EASL,CAAC,MAAD,EAAS,CAAC,YAAD,EAAe,UAAf,EAA2B,MAA3B,CAAT,CATK,EAUL,CAAC,cAAD,EAAiB,CAAC,mBAAD,CAAjB,CAVK,CADkB;AAa3BC,4BAAQ,GAbmB;AAc3BC,wCAAoB,IAdO;AAe3BC,6BAAS;AACLC,2CAAmBP;AADd;AAfkB,iBAA/B;;AAoBA,qBAAKQ,2BAAL;;AAEAjE,uBAAOkE,MAAP,CAAc,YAAW;AACrB,2BAAO,KAAKpD,yBAAZ;AACH,iBAFa,CAEZqD,IAFY,CAEP,IAFO,CAAd,EAEc,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;;AAEvC;;;;AAIA,yBAAKzC,aAAL,GAAqB,CAArB;AACA,yBAAKf,gBAAL,GAAwB,KAAKR,cAAL,CAAoBiE,gBAApB,CAAqCF,QAArC,CAAxB;AACA,yBAAKrB,eAAL,GAAuB,KAAKC,oBAAL,CAA0B,KAAKnC,gBAA/B,CAAvB;AACA,yBAAKa,mBAAL,GAA2B,KAAKb,gBAAL,CAAsBoC,cAAjD;AACA,yBAAKtB,qBAAL,GAA6B,KAAKd,gBAAL,CAAsBqC,gBAAnD;AACA,yBAAKqB,UAAL;AACH,iBAZa,CAYZJ,IAZY,CAYP,IAZO,CAFd,EAcc,IAdd;AAeH;;AAED,gBAAIK,iBAAiB,IAArB;;AAEA;AACAA,6BAAiB,KAAKxE,MAAL,CAAYwE,cAA7B;;AAEA;AACA,iBAAKhD,0BAAL,GAAkC,KAAKX,gBAAL,CAAsBW,0BAAxD;;AAEA,gBAAIgD,kBAAkB,IAAtB,EAA4B;AACxB;;AAEA,oBAAIC,2BAA2B,KAAKC,2BAAL,EAA/B;AACA,oBAAIC,gCAAgC,KAAKC,gCAAL,EAApC;;AAEA,oBAAIH,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;AAC3E;AACA,yBAAKE,UAAL;AACH;AACJ,aAVD,MAUO;AACH;AACA,qBAAKC,cAAL,CAAoBN,cAApB;AACH;;AAED;AACA,iBAAKO,UAAL;;AAEA;AACA,gBAAI,KAAKlE,gBAAL,CAAsBmE,cAAtB,IAAwC,IAAxC,IAAgD,KAAKpD,aAAL,IAAsB,KAAKf,gBAAL,CAAsBmE,cAAhG,EAAgH;AAC5G;;;;AAIA,qBAAKC,sBAAL,GAA8B,IAA9B;AACH;;AAED;AACA,iBAAKC,iBAAL;;AAEA,gBAAI,KAAKlF,MAAL,CAAYmF,OAAZ,CAAoBC,cAApB,IAAsC,IAA1C,EAAgD;AAC5C;AACA,qBAAKpF,MAAL,CAAYmF,OAAZ,CAAoBC,cAApB,CAAmCC,2BAAnC,CAA+D,KAAKrF,MAApE,EAA4E,KAAKa,gBAAjF;AACH;AACJ;;AAED;;;;;;;;AAQA,aAAKb,MAAL,CAAYsF,0CAAZ,GAAyD,UAASC,kBAAT,EAA6BC,wBAA7B,EAAuDhB,cAAvD,EAAuE;;AAE5H,gBAAIe,sBAAsB,IAAtB,IAA8BC,4BAA4B,IAA1D,IAAkEhB,kBAAkB,IAAxF,EAA8F;;AAE1F,oBAAIgB,yBAAyBC,QAAzB,KAAsC,QAA1C,EAAoD;AAChD;AACA,wBAAIC,gBAAgBH,mBAAmBI,IAAvC;;AAEA;;;;AAIAnB,qCAAiB,KAAKhE,WAAL,CAAiBoF,oBAAjB,CAAsCpB,cAAtC,CAAjB;;AAEA,wBAAIkB,kBAAkB,OAAtB,EAA+B;;AAE3B;AACA,6BAAK1F,MAAL,CAAY6F,eAAZ,CAA4Bf,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,6BAAKxE,MAAL,CAAY6F,eAAZ,CAA4B7E,OAA5B,GAAsC,IAAtC;AACH,qBAPD,MAOO,IAAI0E,kBAAkB,OAAtB,EAA+B;;AAElC;AACA,6BAAK1F,MAAL,CAAY6F,eAAZ,CAA4BC,yBAA5B,CAAsDtB,cAAtD,EAAsEgB,wBAAtE;;AAEA;AACA,6BAAKxF,MAAL,CAAY6F,eAAZ,CAA4B7E,OAA5B,GAAsC,IAAtC;AACH,qBAPM,MAOA,IAAI0E,kBAAkB,UAAtB,EAAkC;;AAErC;AACA,6BAAK1F,MAAL,CAAY6F,eAAZ,CAA4Bf,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,6BAAKxE,MAAL,CAAY6F,eAAZ,CAA4B7E,OAA5B,GAAsC,IAAtC;AACH;AACJ;AACJ;AACJ,SAtCwD,CAsCvDmD,IAtCuD,CAsClD,IAtCkD,CAAzD;;AAwCA;;;;;;;;AAQA,aAAKnE,MAAL,CAAY+F,iBAAZ,GAAgC,UAASxE,QAAT,EAAmB;AAC/C,gBAAIyE,WAAW,KAAKlG,EAAL,CAAQmG,KAAR,EAAf;AACA,gBAAIC,WAAW,KAAf;AACA,gBAAIC,SAAS,QAAb;;AAEA,gBAAI5E,QAAJ,EAAc;AACV,oBAAI,KAAKvB,MAAL,CAAY6F,eAAZ,CAA4B5E,aAAhC,EAA+C;AAC3CiF,+BAAW,IAAX;AACAC,6BAAS,QAAT;AACH;AACJ,aALD,MAKO;AACH,oBAAI,KAAKnG,MAAL,CAAY6F,eAAZ,CAA4B7E,OAAhC,EAAyC;AACrCkF,+BAAW,IAAX;AACAC,6BAAS,MAAT;AACH;AACJ;;AAED,gBAAID,QAAJ,EAAc;AACV;AACA,qBAAKlG,MAAL,CAAY6F,eAAZ,CAA4BO,oBAA5B,CAAiDD,MAAjD,EAAyDE,IAAzD,CAA8D,UAAC7B,cAAD,EAAoB;AAC9EwB,6BAASM,OAAT,CAAiB9B,cAAjB;AACH,iBAFD;AAGH,aALD,MAKO;AACH;;;;;AAKAwB,yBAASM,OAAT;AACH;;AAED,mBAAON,SAASO,OAAhB;AACH,SAhC+B,CAgC9BpC,IAhC8B,CAgCzB,IAhCyB,CAAhC;;AAkCA;;;AAGA,aAAKnE,MAAL,CAAYwG,GAAZ,CAAgB,mBAAhB,EAAqCC,QAAQtC,IAAR,CAAa,IAAb,EAAmB,UAASuC,KAAT,EAAgBC,IAAhB,EAAsB;;AAE1E;AACA,gBAAIhG,SAASgG,KAAKhG,MAAlB;;AAEA;AACA,gBAAI,KAAKA,MAAL,KAAgBA,MAApB,EAA4B;;AAExB;AACA,oBAAIiG,oBAAoB,kBAAxB;AACA,qBAAKC,MAAL,CAAYD,iBAAZ;AACH;AACJ,SAZoC,CAArC;;AAcA;;;;AAIA,aAAK5G,MAAL,CAAYwG,GAAZ,CAAgB,0BAAhB,EAA4CC,QAAQtC,IAAR,CAAa,IAAb,EAAmB,UAASuC,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,gBAAInC,iBAAiBmC,KAAKG,WAA1B;;AAEA;AACA,gBAAItC,kBAAkB,KAAK7D,MAAL,KAAgB6D,eAAe7D,MAAjD,IACG,KAAKC,WAAL,KAAqB4D,eAAe5D,WAD3C,EACwD;;AAEpD;AACA,qBAAKI,OAAL,GAAe,KAAf;AACA,qBAAKhB,MAAL,CAAY+G,KAAZ,CAAkB,gBAAlB,EAAoC,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAApC;;AAEA,oBAAIgG,aAAaxC,eAAewC,UAAhC;AACA,oBAAIzF,WAAWiD,eAAejD,QAA9B;AACA,oBAAI0F,iBAAiBzC,eAAeyC,cAApC;AACA,oBAAIC,iBAAiB,KAAKhH,aAAL,CAAmBiH,wBAAnB,CAA4CF,cAA5C,CAArB;;AAEA;AACA,oBAAI1F,QAAJ,EAAc;AACV,yBAAK6F,cAAL,CAAoB,KAAK1G,UAAL,CAAgB,WAAhB,CAApB,EAAkDwG,cAAlD;;AAEA,yBAAKG,eAAL;;AAEA;AACA,yBAAKpG,aAAL,GAAqB,KAArB;AACA,yBAAKjB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAA1C;AACH,iBARD,MAQO,IAAIgG,UAAJ,EAAgB;AACnB,yBAAKI,cAAL,CAAoB,KAAK1G,UAAL,CAAgB,YAAhB,CAApB,EAAmDwG,cAAnD;AACH,iBAFM,MAEA;AACH,yBAAKE,cAAL,CAAoB,KAAK1G,UAAL,CAAgB,OAAhB,CAApB,EAA8CwG,cAA9C;AACH;AACJ;;AAED;AACA,gBAAI,KAAK7G,cAAL,CAAoBiH,oBAApB,CAAyC,KAAK3G,MAA9C,EAAsD,KAAKC,WAA3D,EAAwE4D,eAAe5D,WAAvF,CAAJ,EAAyG;;AAErG;AACA,oBAAI4E,2BAA2B,KAAKnF,cAAL,CAAoBkH,2BAApB,CAAgD,KAAK1G,gBAArD,EAAuE2D,eAAe5D,WAAtF,CAA/B;;AAEA,oBAAI4E,4BAA4B,IAAhC,EAAsC;;AAElC,wBAAIA,yBAAyBC,QAAzB,KAAsC,MAAtC,IACCD,yBAAyBC,QAAzB,KAAsC,QAAtC,IAAkDjB,eAAejD,QADtE,EACiF;;AAE7E,4BAAIiG,gBAAgB,KAApB;;AAEA;;;;AAIAhD,yCAAiB,KAAKhE,WAAL,CAAiBoF,oBAAjB,CAAsCpB,cAAtC,CAAjB;;AAEA;;;;AAIA,4BAAI,KAAKiD,YAAL,MAAuB,KAAKC,YAAL,EAA3B,EAAgD;AAC5C;;;;AAIAF,4CAAgB,IAAhB;AACH,yBAND,MAMO;AACH;;;;AAIA;;;;;;;AAQAA,4CAAgB,IAAhB;AACH;;AAED,4BAAIA,aAAJ,EAAmB;AACf;AACA,iCAAKxH,MAAL,CAAY6F,eAAZ,CAA4Bf,cAA5B,CAA2CN,cAA3C;;AAEA;AACA,iCAAKxE,MAAL,CAAY6F,eAAZ,CAA4B7E,OAA5B,GAAsC,IAAtC;AACA,iCAAKhB,MAAL,CAAY6F,eAAZ,CAA4B5E,aAA5B,GAA4C,IAA5C;AACH;;AAED;;;;AAIA,6BAAK0B,6BAAL,GAAqC6B,cAArC;AACA,6BAAK5B,8BAAL,GAAsC4C,wBAAtC;AACH;AACJ;AACJ;AACJ,SAhG2C,CAA5C;;AAkGA;;;;AAIA,aAAKxF,MAAL,CAAYwG,GAAZ,CAAgB,yBAAhB,EAA2C,UAACE,KAAD,EAAQC,IAAR,EAAiB;;AAExD,gBAAIA,QAAQ,IAAZ,EAAmB;;AAEf;AACA,oBAAIgB,aAAahB,KAAKgB,UAAtB;;AAEA,oBAAIA,cAAc,IAAlB,EAAwB;;AAEpB;AACA,wBAAIC,mBAAmBD,WAAWhH,MAAlC;AACA,wBAAIkH,wBAAwBF,WAAW/G,WAAvC;;AAEA;AACA,wBAAI,MAAKD,MAAL,KAAgBiH,gBAAhB,IACA,MAAKhH,WAAL,KAAqBiH,qBADzB,EACgD;;AAE5C;AACA,8BAAK9F,iBAAL,GAAyB,MAAK9B,iBAAL,CAAuBmD,6BAAvB,CAAqD,MAAKzC,MAA1D,EAAkE,MAAKC,WAAvE,EAAoF,MAAKiC,WAAzF,CAAzB;AACH;AACJ;AACJ;AACJ,SAtBD;;AAwBA;;;;;AAKA,aAAK7C,MAAL,CAAYwG,GAAZ,CAAgB,UAAhB,EAA4BC,QAAQtC,IAAR,CAAa,IAAb,EAAmB,UAASuC,KAAT,EAAgBC,IAAhB,EAAsB,CAEpE,CAF2B,CAA5B;;AAIA,aAAK3G,MAAL,CAAY8H,SAAZ,GAAwB,UAASC,GAAT,EAAc;AAClC,gBAAIC,QAAQ,IAAIC,KAAJ,EAAZ;;AAEA;AACA,gBAAIF,OAAO,IAAP,IAAe,CAACG,MAAMH,GAAN,CAApB,EAAgC;AAC5BC,wBAAQ,IAAIC,KAAJ,CAAUE,SAASJ,GAAT,CAAV,CAAR;AACH;;AAED,mBAAOC,KAAP;AACH,SATD;;AAWA;;;;AAIA,aAAKhI,MAAL,CAAYwG,GAAZ,CAAgB,eAAhB,EAAiC,UAACE,KAAD,EAAQC,IAAR,EAAiB;;AAE9C,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIA,KAAKhG,MAAL,IAAe,MAAKA,MAApB,IAA8BgG,KAAK/F,WAAL,IAAoB,MAAKA,WAA3D,EAAwE;AACpE;AACA,wBAAIwH,YAAYzB,KAAKyB,SAArB;;AAEA,wBAAIA,aAAa,IAAjB,EAAuB;AACnB,4BAAIC,WAAWD,UAAUC,QAAzB;;AAEA,4BAAIA,YAAY,IAAhB,EAAsB;AAClB;;;;;AAKA,gCAAIC,sBAAsB,MAAKpI,aAAL,CAAmBqI,6BAAnB,EAA1B;AACA,gCAAIC,gBAAgBF,sBAAsB,GAAtB,GAA4BD,QAAhD;;AAEA,gCAAII,eAAe,EAAnB;;AAEA,gCAAI9B,KAAK+B,MAAL,IAAe,QAAnB,EAA6B;AACzB;AACAD,+CAAe,sBAAsB,MAAK9H,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH,6BAHD,MAGO,IAAI+F,KAAK+B,MAAL,IAAe,QAAnB,EAA6B;AAChC;AACAD,+CAAe,sBAAsB,MAAK9H,MAA3B,GAAoC,GAApC,GAA0C,MAAKC,WAA9D;AACH;;AAED,gCAAI6H,gBAAgB,EAApB,EAAwB;AACpB,oCAAI,MAAKjI,WAAL,CAAiBmI,OAAjB,CAAyBN,QAAzB,CAAJ,EAAwC;AACpC;;;;AAIAO,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACAD,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,aAAjC,EAAgDL,aAAhD,EAA+DH,QAA/D;AACH,iCAVD,MAUO,IAAI,MAAK7H,WAAL,CAAiBsI,OAAjB,CAAyBT,QAAzB,CAAJ,EAAwC;AAC3C;;;;AAIAO,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,qBAAjC;AACAD,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,cAAjC;;AAEA;AACA,wCAAIE,eAAeC,SAASC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,iDAAaG,QAAb,GAAwB,MAAxB;AACAH,iDAAaI,SAAb,GAAyB,qBAAqBX,aAArB,GAAqC,qBAA9D;AACAI,sCAAE,MAAMH,YAAR,EAAsBI,UAAtB,CAAiC,YAAjC,EAA+CE,YAA/C;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED;AACA,kBAAKlJ,SAAL,CAAeuJ,IAAf;AACH,SAhED;AAiEH;;AAED;;;;;;;;;2CAKmB/H,S,EAAW;AAC1B,gBAAIgI,gBAAgB,IAApB;;AAEA,gBAAIhI,aAAa,IAAjB,EAAuB;AACnB;AACA,oBAAIiI,sBAAsBC,KAAKC,SAAL,CAAenI,SAAf,CAA1B;;AAEA;AACA,oBAAIoI,gBAAgBF,KAAKG,KAAL,CAAWJ,mBAAX,CAApB;;AAEAD,gCAAgBI,aAAhB;AACH;;AAED,mBAAOJ,aAAP;AACH;;;;;AAED;;;qCAGa;;AAET,gBAAI,KAAKhI,SAAL,IAAkB,IAAtB,EAA4B;AACxB;;;;AAIA,qBAAKA,SAAL,GAAiB,KAAKsI,kBAAL,CAAwB,KAAK9I,gBAAL,CAAsBQ,SAA9C,CAAjB;AACH;AACJ;;;;;AAED;;;qCAGa;;AAET,gBAAIoD,2BAA2B,KAAKC,2BAAL,EAA/B;AACA,gBAAIC,gCAAgC,KAAKC,gCAAL,EAApC;;AAEA,gBAAIH,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;AAC3E;AACA,qBAAKE,UAAL;AACH,aAHD,MAGO;AACH;AACA,qBAAKxD,SAAL,GAAiB,KAAKsI,kBAAL,CAAwB,KAAK9I,gBAAL,CAAsBQ,SAA9C,CAAjB;AACH;;AAED;AACA,iBAAKuI,kBAAL;AACH;;;;;AAED;;;2CAGmB;AACf,mBAAO,KAAKvI,SAAZ;AACH;;;;;AAED;;;;uCAIemD,c,EAAgB;;AAE3B,gBAAIA,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,oBAAIqF,cAAcrF,eAAeqF,WAAjC;;AAEA,oBAAIA,eAAe,IAAnB,EAAyB;AACrB;AACA,yBAAKxI,SAAL,GAAiBwI,YAAYxI,SAA7B;;AAEA,wBAAIO,gBAAgBiI,YAAYjI,aAAhC;;AAEA,wBAAIA,iBAAiB,IAArB,EAA2B;AACvB;AACA,6BAAKA,aAAL,GAAqBA,aAArB;AACH;;AAED,yBAAKkI,mBAAL;AACH;AACJ;AACJ;;;;;AAED;;;8CAGsB;AAClB,gBAAIC,cAAc,KAAKzJ,kBAAL,CAAwB0J,6CAAxB,CAAsE,KAAKrJ,MAA3E,EAAmF,KAAKC,WAAxF,CAAlB;;AAEA,gBAAImJ,WAAJ,EAAiB;AACb,oBAAI9C,iBAAiB8C,YAAY9C,cAAjC;AACA,oBAAIC,iBAAiB,KAAKhH,aAAL,CAAmBiH,wBAAnB,CAA4CF,cAA5C,CAArB;AACA,oBAAI8C,YAAYxI,QAAhB,EAA0B;AACtB;AACA,yBAAKN,aAAL,GAAqB,KAArB;AACA,yBAAKjB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,KAAzC,EAA1C;AACA;AACA,yBAAKoG,cAAL,CAAoB,KAAK1G,UAAL,CAAgB,gBAAhB,CAApB,EAAuDwG,cAAvD;AACH,iBAND,MAMO;AACH;AACA,yBAAKjG,aAAL,GAAqB,IAArB;AACA,yBAAKjB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAA1C;AACA;AACA,yBAAKoG,cAAL,CAAoB,KAAK1G,UAAL,CAAgB,YAAhB,CAApB,EAAmDwG,cAAnD;AACH;AACJ;AACJ;;;;;AAED;;;4CAGoB;AAChB,iBAAK3F,QAAL,GAAgB,KAAhB;;AAEA;AACA,iBAAKvB,MAAL,CAAY+G,KAAZ,CAAkB,wBAAlB,EAA4C,EAACpG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA5C;AACH;;;;;AAED;;;8CAGsB;AAClB;AACA,gBAAIgG,oBAAoB,uBAAxB;AACA,iBAAKC,MAAL,CAAYD,iBAAZ;AACH;;;;;AAED;;;;;+BAKOA,iB,EAAmB;;AAEtB,gBAAI,KAAK3F,aAAT,EAAwB;AACpB;;AAEA,oBAAIgJ,gBAAgB,IAApB;;AAEA,oBAAI,KAAKpJ,gBAAL,CAAsBmE,cAAtB,IAAwC,IAA5C,EAAkD;AAC9C;;AAEA;AACA,wBAAIkF,sBAAsB,KAAKrJ,gBAAL,CAAsBmE,cAAtB,GAAuC,KAAKpD,aAAtE;;AAEA,wBAAIuI,UAAU,EAAd;;AAEA,wBAAID,uBAAuB,CAA3B,EAA8B;AAC1B;AACAD,wCAAgB,KAAhB;AACH,qBAHD,MAGO,IAAIC,uBAAuB,CAA3B,EAA8B;AACjC;;;;AAIH,qBALM,MAKA,IAAIA,sBAAsB,CAA1B,EAA6B;AAChC;;;;AAIH;AACJ;;AAED,oBAAID,aAAJ,EAAmB;;AAEf;;;;;AAKA,yBAAK1I,QAAL,GAAgB,IAAhB;;AAEA;AACA,yBAAK6I,sBAAL;;AAEA;AACA,wBAAI,KAAKvJ,gBAAL,CAAsBmE,cAAtB,IAAwC,IAAxC,IAAgD,KAAKpD,aAAL,IAAsB,KAAKf,gBAAL,CAAsBmE,cAAhG,EAAgH;AAC5G;;;;AAIA,6BAAKC,sBAAL,GAA8B,IAA9B;AACH;;AAED,wBAAI,KAAKvC,IAAL,KAAc,WAAlB,EAA+B;AAC3B;;;;;AAKA,6BAAK1B,OAAL,GAAe,KAAf;AACA,6BAAKC,aAAL,GAAqB,KAArB;AACA,6BAAKmF,oBAAL,CAA0B,QAA1B;AACH;;AAED,wBAAIQ,qBAAqB,IAArB,IAA6BA,sBAAsB,uBAAvD,EAAgF;AAC5E;AACA,6BAAK5G,MAAL,CAAY+G,KAAZ,CAAkB,0BAAlB,EAA8C,EAACpG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAA9C;AACH,qBAHD,MAGO,IAAIgG,sBAAsB,kBAA1B,EAA8C;AACjD;AACH;AACJ,iBAtCD,MAsCO;AACH;;;;AAIA,yBAAKrF,QAAL,GAAgB,KAAhB;AACH;AACJ;AACJ;;AAED;;;;;;iDAGyB;AACrB,iBAAKK,aAAL;AACH;;;0CAEiB;AACd;AACA,gBAAI,KAAKyI,iBAAL,EAAJ,EAA8B;AAC1B,qBAAKtJ,UAAL,GAAkB,IAAlB;AACH;AACJ;;;;;AAED;;;6CAGqB;AAAA;;AACjB;;;;AAIA,iBAAKC,OAAL,GAAe,IAAf;AACA,iBAAKhB,MAAL,CAAY+G,KAAZ,CAAkB,gBAAlB,EAAoC,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAApC;;AAEA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKjB,MAAL,CAAY+G,KAAZ,CAAkB,sBAAlB,EAA0C,EAACnG,aAAa,KAAKA,WAAnB,EAAgCI,SAAS,IAAzC,EAA1C;;AAEA;AACA,iBAAKoG,cAAL,CAAoB,EAApB,EAAwB,IAAxB;;AAEA;AACA,gBAAIxG,cAAc,KAAK0J,cAAL,EAAlB;;AAEA;;;;;;AAMA,gBAAInE,SAAS,QAAb;;AAEA;AACA,iBAAKC,oBAAL,CAA0BD,MAA1B,EAAkCE,IAAlC,CAAuC,UAAC7B,cAAD,EAAoB;AACvD,uBAAKxE,MAAL,CAAY+G,KAAZ,CAAkB,6BAAlB,EAAiD,EAACpG,QAAQ,OAAKA,MAAd,EAAsBC,aAAaA,WAAnC,EAAgD4D,gBAAgBA,cAAhE,EAAjD;AACH,aAFD;AAGH;;;;;AAED;;;;;;6CAMqB2B,M,EAAQ;;AAEzB,gBAAIH,WAAW,KAAKlG,EAAL,CAAQmG,KAAR,EAAf;;AAEA;AACA,gBAAIzB,iBAAiB,KAAKrE,WAAL,CAAiBoK,uBAAjB,EAArB;;AAEA,gBAAIV,cAAc,EAAlB;;AAEA;AACAA,wBAAYxI,SAAZ,GAAwB,KAAKsI,kBAAL,CAAwB,KAAKtI,SAA7B,CAAxB;;AAEA;AACAwI,wBAAYjI,aAAZ,GAA4B,KAAKA,aAAjC;;AAEA;AACA4C,2BAAejD,QAAf,GAA0B,KAAKA,QAA/B;;AAEA;AACAiD,2BAAeqF,WAAf,GAA6BA,WAA7B;;AAEA;AACArF,2BAAekB,aAAf,GAA+B,OAA/B;;AAEA;AACAlB,2BAAe7D,MAAf,GAAwB,KAAKA,MAA7B;;AAEA;AACA6D,2BAAe5D,WAAf,GAA6B,KAAKA,WAAlC;;AAEA;;;;AAIA,iBAAKW,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,iBAAKiJ,wCAAL,CAA8CxE,QAA9C,EAAwDxB,cAAxD,EAAwE2B,MAAxE;;AAEA,mBAAOH,SAASO,OAAhB;AACH;;;;;AAED;;;;oDAI4B;;AAExB;AACA,gBAAI/B,iBAAiB,KAAKrE,WAAL,CAAiBoK,uBAAjB,EAArB;;AAEA,gBAAI/F,kBAAkB,IAAtB,EAA4B;AACxB,oBAAIqF,cAAc,EAAlB;;AAEA;AACArF,+BAAeqF,WAAf,GAA6BA,WAA7B;AACH;;AAED,mBAAOrF,cAAP;AACH;;;;;AAED;;;;;;;;;;iEAUyCwB,Q,EAAUxB,c,EAAgB2B,M,EAAQ;AACvE;;;;AAIAH,qBAASM,OAAT,CAAiB9B,cAAjB;AACH;;AAED;;;;;;4CAGoB;;AAEhB,gBAAI7D,SAAS,KAAKA,MAAlB;;AAEA;AACA,gBAAIE,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAIA,iBAAiBE,UAArB,EAAiC;AAC7B,yBAAKA,UAAL,GAAkB,IAAlB;AACH,iBAFD,MAEO,IAAIF,iBAAiB4J,eAArB,EAAsC;AACzC;;AAEA;AACA,wBAAIC,kBAAkB,KAAKpK,kBAAL,CAAwBqK,wCAAxB,CAAiE,KAAKhK,MAAtE,EAA8E,KAAKC,WAAnF,CAAtB;;AAEA;AACA,wBAAIgK,cAAc,KAAKzK,WAAL,CAAiB0K,eAAjB,CAAiCH,eAAjC,CAAlB;;AAEA,wBAAIE,WAAJ,EAAiB;AACb;AACA,6BAAK7J,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;+CAIuB;AACnB,mBAAO,KAAKiB,yBAAZ;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAI8I,SAAS,KAAb;;AAEA,gBAAI,KAAKjK,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAKA,gBAAL,CAAsB4J,eAA1B,EAA2C;AACvCK,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;oCAGY;AACR,gBAAIC,SAAS,IAAb;;AAEA,gBAAI,KAAKtI,wBAAL,IAAiC,IAArC,EAA2C;AACvC;;AAEA,oBAAI,KAAKA,wBAAL,CAA8BuI,sBAAlC,EAA0D;AACtD;AACAD,6BAAS,KAAKlK,gBAAL,CAAsBkK,MAA/B;AACH,iBAHD,MAGO;AACH;AACAA,6BAAS,KAAKtI,wBAAL,CAA8BsI,MAAvC;AACH;AACJ,aAVD,MAUO,IAAI,KAAKlK,gBAAL,IAAyB,IAA7B,EAAmC;AACtCkK,yBAAS,KAAKlK,gBAAL,CAAsBkK,MAA/B;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;qCAGa;;AAET;AACA,gBAAIlK,mBAAmB,KAAKA,gBAA5B;;AAEA,gBAAIA,oBAAoB,IAAxB,EAA8B;;AAE1B,oBAAI4D,2BAA2B,KAAKC,2BAAL,EAA/B;AACA,oBAAIC,gCAAgC,KAAKC,gCAAL,EAApC;;AAEA,oBAAIH,4BAA4B,IAA5B,IAAoCE,iCAAiC,IAAzE,EAA+E;;AAE3E;AACA,wBAAIsG,2BAA2B,KAAK3K,kBAAL,CAAwB0J,6CAAxB,CAAsEvF,wBAAtE,EAAgGE,6BAAhG,CAA/B;;AAEA,wBAAIsG,4BAA4B,IAAhC,EAAsC;;AAElC;AACA,4BAAIC,wBAAwB,KAAKC,yBAAL,EAA5B;;AAEA,4BAAID,yBAAyB,IAAzB,IAAiCA,sBAAsBrB,WAAtB,IAAqC,IAA1E,EAAgF;AAC5E;AACAqB,kDAAsBrB,WAAtB,CAAkCxI,SAAlC,GAA8C,KAAKsI,kBAAL,CAAwB,KAAK9I,gBAAL,CAAsBQ,SAA9C,CAA9C;AACH;;AAED;AACA,4BAAI+J,uBAAuB,KAAKC,qBAAL,CAA2BJ,wBAA3B,EAAqDC,qBAArD,CAA3B;;AAEA;AACA,6BAAKpG,cAAL,CAAoBsG,oBAApB;;AAEA;AACA,6BAAKxB,kBAAL;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;2CAGmB0B,Y,EAAc;AAC7B;AACH;;;;;AAED;;;;;;kDAM0B9G,c,EAAgB+G,M,EAAQ;;AAE9C,gBAAIC,aAAa,CAAjB;AACA,gBAAIC,cAAc,CAAlB;;AAEA,gBAAIF,UAAU,IAAd,EAAoB;;AAEhB,oBAAIA,OAAOC,UAAP,IAAqB,IAAzB,EAA+B;AAC3B;AACAA,iCAAaD,OAAOC,UAApB;AACH;;AAED,oBAAID,OAAOE,WAAP,IAAsB,IAA1B,EAAgC;AAC5B;AACAA,kCAAcF,OAAOE,WAArB;AACH;AACJ;;AAED,gBAAIjH,kBAAkB,IAAlB,IAA0BA,eAAeqF,WAAf,IAA8B,IAA5D,EAAkE;;AAE9D;AACA,oBAAIA,cAAcrF,eAAeqF,WAAjC;;AAEA;AACA,oBAAI6B,qBAAqB7B,YAAY8B,OAArC;;AAEA,oBAAID,sBAAsB,IAAtB,IAA8BA,sBAAsB,CAAxD,EAA2D;AACvD;;AAEA;AACA,wBAAIE,SAAS/B,YAAY+B,MAAzB;;AAEA,wBAAIA,UAAU,IAAV,IAAkBA,OAAOC,MAAP,GAAgB,CAAtC,EAAyC;;AAErC;AACA,4BAAIC,aAAaF,OAAOH,WAAP,CAAjB;;AAEA;AACA,6BAAKM,kBAAL,CAAwBD,UAAxB;AACH;AACJ,iBAdD,MAcO;AACH;;AAEA;AACA,wBAAIE,SAASnC,YAAYmC,MAAzB;;AAEA,wBAAIA,UAAU,IAAd,EAAoB;;AAEhB;AACA,4BAAIC,QAAQD,OAAOR,UAAP,CAAZ;;AAEA,4BAAIS,SAAS,IAAb,EAAmB;;AAEf;AACA,gCAAIC,iBAAiBD,MAAML,MAA3B;;AAEA,gCAAIM,kBAAkB,IAAtB,EAA4B;;AAExB;AACA,oCAAIN,SAASM,eAAeT,WAAf,CAAb;;AAEA;AACA,qCAAKM,kBAAL,CAAwBH,MAAxB;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;;2CAKmBA,M,EAAQL,M,EAAQ;;AAE/B;;;;;AAKA,gBAAIY,eAAe,IAAnB;AACA,gBAAIC,UAAU,CAAd;AACA,gBAAIC,UAAU,CAAd;;AAEA,gBAAId,UAAU,IAAd,EAAoB;;AAEhB,oBAAIA,OAAOY,YAAP,IAAuB,IAA3B,EAAiC;AAC7B;AACAA,mCAAeZ,OAAOY,YAAtB;AACH;;AAED,oBAAIZ,OAAOa,OAAP,IAAkB,IAAtB,EAA4B;AACxB;AACAA,8BAAUb,OAAOa,OAAjB;AACH;;AAED,oBAAIb,OAAOc,OAAP,IAAkB,IAAtB,EAA4B;AACxB;AACAA,8BAAUd,OAAOc,OAAjB;AACH;AACJ;;AAED,gBAAIT,UAAU,IAAd,EAAoB;;AAEhB;AACA,oBAAIU,gBAAgB,KAAKC,gBAAL,EAApB;;AAEA;AACA,oBAAIC,OAAOZ,OAAOY,IAAlB;;AAEA,oBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,wBAAIC,iBAAiB,CAArB;;AAEA;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,cAAcT,MAAlC,EAA0Ca,GAA1C,EAA+C;;AAE3C,4BAAIP,gBAAgBO,MAAM,CAA1B,EAA6B;AACzB;AACA;AACH;;AAED,4BAAIC,IAAI,EAAR;AACA,4BAAIC,IAAI,EAAR;;AAEA;AACA,4BAAIC,UAAUL,KAAKC,cAAL,CAAd;;AAEA,4BAAII,WAAW,IAAf,EAAqB;AACjB;AACAF,gCAAIE,QAAQ,CAAR,CAAJ;AACAD,gCAAIC,QAAQ,CAAR,CAAJ;AACH;;AAED;AACA,6BAAKC,qBAAL,CAA2BV,OAA3B,EAAoCM,CAApC,EAAuC,IAAvC,EAA6CC,CAA7C;AACA,6BAAKG,qBAAL,CAA2BT,OAA3B,EAAoCK,CAApC,EAAuC,IAAvC,EAA6CE,CAA7C;;AAEA;AACAH;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;;;8CAMsBE,C,EAAGC,C,EAAGG,K,EAAO1K,K,EAAO;;AAEtC,gBAAIiK,gBAAgBS,KAApB;;AAEA,gBAAIA,SAAS,IAAb,EAAmB;AACf;AACAT,gCAAgB,KAAKC,gBAAL,EAAhB;AACH;;AAED,gBAAID,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,oBAAIU,MAAMV,cAAcM,CAAd,CAAV;;AAEA,oBAAII,OAAO,IAAX,EAAiB;;AAEb;AACA,wBAAIC,OAAOD,IAAIL,CAAJ,CAAX;;AAEA,wBAAIM,QAAQ,IAAZ,EAAkB;;AAEd;AACAA,6BAAK9L,IAAL,GAAYkB,KAAZ;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;;;;;8CAQsBsK,C,EAAGC,C,EAAGG,K,EAAO;;AAE/B,gBAAIG,YAAY,IAAhB;;AAEA,gBAAIH,SAAS,IAAb,EAAmB;AACf;AACAA,wBAAQ,KAAKR,gBAAL,EAAR;AACH;;AAED,gBAAIQ,SAAS,IAAb,EAAmB;;AAEf;AACA,oBAAIC,MAAMD,MAAMH,CAAN,CAAV;;AAEA,oBAAII,OAAO,IAAX,EAAiB;;AAEb;AACA,wBAAIC,OAAOD,IAAIL,CAAJ,CAAX;;AAEA,wBAAIM,QAAQ,IAAZ,EAAkB;;AAEd;AACAC,oCAAYD,KAAK9L,IAAjB;AACH;AACJ;AACJ;;AAED,mBAAO+L,SAAP;AACH;;AAED;;;;;;;yCAIiB;AACb,mBAAO,KAAKrM,gBAAL,CAAsB2B,EAA7B;AACH;;;;;AAED;;;wDAGgC;AAC5B;AACA,iBAAKyB,2BAAL;;AAEA;;;;AAIA,iBAAKjE,MAAL,CAAYmF,OAAZ,CAAoBgI,uBAApB,CAA4CC,wBAA5C;AACH;;;;;AAED;;;;gEAIwC;;AAEpC,gBAAI;AACA;;;;AAIA,oBAAItM,4BAA4B2F,QAAQ4G,QAAR,CAAiB,KAAKC,mCAAtB,CAAhC;;AAEA;AACA,qBAAKjN,cAAL,CAAoBkN,gBAApB,CAAqC,KAAK5M,MAA1C,EAAkD,KAAKC,WAAvD,EAAoEE,yBAApE;;AAEA,qBAAKA,yBAAL,GAAiCA,yBAAjC;;AAEA;AACA,qBAAKD,gBAAL,GAAwB,KAAKR,cAAL,CAAoBiE,gBAApB,CAAqCxD,yBAArC,CAAxB;;AAEA;;;;AAIA,qBAAKd,MAAL,CAAYmF,OAAZ,CAAoBgI,uBAApB,CAA4CC,wBAA5C;AACH,aApBD,CAoBE,OAAMI,CAAN,EAAS;AACP,qBAAKxN,MAAL,CAAYmF,OAAZ,CAAoBgI,uBAApB,CAA4CM,8BAA5C;AACH;AACJ;;;;;AAED;;;sDAG8B;AAC1B,iBAAKH,mCAAL,GAA2C7G,QAAQiH,MAAR,CAAe,KAAK5M,yBAApB,EAA+C,CAA/C,CAA3C;AACH;;;;;AAED;;;4DAGoC6M,W,EAAatJ,Q,EAAU;AACvD,gBAAIsJ,gBAAgB,MAApB,EAA4B;AACxB,oBAAI,KAAK7M,yBAAL,CAA+B8M,OAA/B,GAAyCvJ,QAA7C,EAAuD;AACnD;AACA,wBAAIwJ,SAASC,QAAQ,KAAKpN,UAAL,CAAgB,kDAAhB,CAAR,CAAb;AACA,wBAAImN,MAAJ,EAAY;AACR;AACA,6BAAKE,6BAAL;AACH,qBAHD,MAGO;AACH;AACA,6BAAKjN,yBAAL,CAA+B8M,OAA/B,GAAyCvJ,QAAzC;AACH;AACJ,iBAVD,MAUO;AACH;AACA,yBAAK0J,6BAAL;AACH;AACJ,aAfD,MAeO,IAAIJ,gBAAgB,SAApB,EAA+B;AAClC,oBAAI,KAAK7M,yBAAL,CAA+BkN,UAA/B,GAA4C3J,QAAhD,EAA0D;AACtD;AACA,wBAAIwJ,SAASC,QAAQ,KAAKpN,UAAL,CAAgB,qDAAhB,CAAR,CAAb;AACA,wBAAImN,MAAJ,EAAY;AACR;AACA,6BAAKE,6BAAL;AACH,qBAHD,MAGO;AACH;AACA,6BAAKjN,yBAAL,CAA+BkN,UAA/B,GAA4C3J,QAA5C;AACH;AACJ,iBAVD,MAUO;AACH;AACA,yBAAK0J,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;wDAGgC;;AAE5B;AACA,gBAAIE,WAAW,KAAKC,mBAAL,CAAyB,KAAKpN,yBAAL,CAA+B8M,OAAxD,EAAiE,KAAK9M,yBAAL,CAA+BkN,UAAhG,CAAf;;AAEA;AACA,iBAAKlN,yBAAL,CAA+BO,SAA/B,GAA2C4M,QAA3C;;AAEA;AACA,iBAAKE,6BAAL;AACH;;AAED;;;;;;;;;;4CAOoBC,U,EAAYC,a,EAAe;;AAE3C,gBAAIJ,WAAW,EAAf;;AAEA;AACA,iBAAK,IAAIvB,IAAI,CAAb,EAAgBA,IAAI0B,UAApB,EAAgC1B,GAAhC,EAAqC;;AAEjC,oBAAI4B,SAAS,EAAb;;AAEA;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,aAApB,EAAmCE,GAAnC,EAAwC;;AAEpC;AACA,wBAAItB,OAAO,KAAKuB,iCAAL,CAAuCD,CAAvC,EAA0C7B,CAA1C,CAAX;;AAEA,wBAAIO,QAAQ,IAAZ,EAAkB;AACd;;;;AAIAA,+BAAO,KAAKwB,eAAL,EAAP;AACH;;AAEDH,2BAAOI,IAAP,CAAYzB,IAAZ;AACH;;AAEDgB,yBAASS,IAAT,CAAcJ,MAAd;AACH;;AAED,mBAAOL,QAAP;AACH;;AAED;;;;;;;;;0DAMkCtB,C,EAAGC,C,EAAG;AACpC,gBAAI+B,aAAa,IAAjB;;AAEA,gBAAItN,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,oBAAI2L,MAAM3L,UAAUuL,CAAV,CAAV;;AAEA,oBAAII,OAAO,IAAX,EAAiB;;AAEb;AACA2B,iCAAa3B,IAAIL,CAAJ,CAAb;AACH;AACJ;;AAED,mBAAOgC,UAAP;AACH;;AAED;;;;;;;0CAIkB;AACd,gBAAI1B,OAAO,EAAX;;AAEAA,iBAAK9L,IAAL,GAAY,EAAZ;AACA8L,iBAAK2B,QAAL,GAAgB,IAAhB;AACA3B,iBAAK4B,IAAL,GAAY,IAAZ;;AAEA,mBAAO5B,IAAP;AACH;;AAED;;;;;;;+CAIuBL,C,EAAG;;AAEtB;AACA,gBAAIvL,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,oBAAIiN,SAAS,EAAb;;AAEA;AACA,oBAAIN,aAAa,KAAKlN,yBAAL,CAA+BkN,UAAhD;;AAEA;AACA,qBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;AACjC;AACA,wBAAIO,UAAU,KAAKL,eAAL,EAAd;;AAEA;AACA,wBAAIM,WAAW,KAAKhM,eAAL,CAAqBwL,CAArB,CAAf;;AAEA,wBAAIQ,YAAY,IAAhB,EAAsB;AAClB;AACAD,gCAAQD,IAAR,GAAeE,QAAf;AACH;;AAEDT,2BAAOI,IAAP,CAAYI,OAAZ;AACH;;AAED;AACAzN,0BAAU2N,MAAV,CAAiBpC,CAAjB,EAAoB,CAApB,EAAuB0B,MAAvB;;AAEA;AACA,qBAAKxN,yBAAL,CAA+B8M,OAA/B;AACH;;AAED;AACA,iBAAKO,6BAAL;AACH;;AAED;;;;;;;+CAIuBvB,C,EAAG;;AAEtB,gBAAIiB,SAASC,QAAQ,KAAKpN,UAAL,CAAgB,wCAAhB,CAAR,CAAb;;AAEA,gBAAImN,MAAJ,EAAY;AACR;AACA,oBAAIxM,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,oBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACAA,8BAAU2N,MAAV,CAAiBpC,CAAjB,EAAoB,CAApB;;AAEA;AACA,yBAAK9L,yBAAL,CAA+B8M,OAA/B;AACH;;AAED;AACA,qBAAKO,6BAAL;AACH;AACJ;;AAED;;;;;;;kDAI0BxB,C,EAAG;;AAEzB;AACA,gBAAItL,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB,oBAAIuM,UAAU,KAAK9M,yBAAL,CAA+B8M,OAA7C;;AAEA;AACA,qBAAK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIkB,OAApB,EAA6BlB,GAA7B,EAAkC;;AAE9B;AACA,wBAAIuC,UAAU5N,UAAUqL,CAAV,CAAd;;AAEA,wBAAIuC,WAAW,IAAf,EAAqB;;AAEjB;AACA,4BAAIH,UAAU,KAAKL,eAAL,EAAd;;AAEA;AACAQ,gCAAQD,MAAR,CAAerC,CAAf,EAAkB,CAAlB,EAAqBmC,OAArB;AACH;AACJ;;AAED;AACA,qBAAKhO,yBAAL,CAA+BkN,UAA/B;;AAEA;AACA,qBAAKhL,oBAAL,CAA0B,KAAKlC,yBAA/B;AACH;;AAED;AACA,iBAAKqN,6BAAL;AACH;;AAED;;;;;;;kDAI0BxB,C,EAAG;;AAEzB,gBAAIkB,SAASC,QAAQ,KAAKpN,UAAL,CAAgB,2CAAhB,CAAR,CAAb;;AAEA,gBAAImN,MAAJ,EAAY;AACR;AACA,oBAAIxM,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,oBAAIA,aAAa,IAAjB,EAAuB;;AAEnB,wBAAIuM,UAAU,KAAK9M,yBAAL,CAA+B8M,OAA7C;;AAEA;AACA,yBAAK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIkB,OAApB,EAA6BlB,GAA7B,EAAkC;;AAE9B;AACA,4BAAIuC,UAAU5N,UAAUqL,CAAV,CAAd;;AAEA,4BAAIuC,WAAW,IAAf,EAAqB;;AAEjB;AACAA,oCAAQD,MAAR,CAAerC,CAAf,EAAkB,CAAlB;AACH;AACJ;;AAED;AACA,yBAAK7L,yBAAL,CAA+BkN,UAA/B;;AAEA;AACA,yBAAKhL,oBAAL,CAA0B,KAAKlC,yBAA/B;AACH;;AAED;AACA,qBAAKqN,6BAAL;AACH;AACJ;;AAED;;;;;;;yCAIiB;AACb,gBAAIe,cAAc,KAAK7O,cAAL,CAAoB8O,UAApB,EAAlB;;AAEA,mBAAOD,WAAP;AACH;;AAED;;;;;;;;wDAKgCvO,M,EAAQ;AACpC,gBAAIyO,uBAAuB,KAAK/O,cAAL,CAAoBgP,+BAApB,CAAoD1O,MAApD,CAA3B;;AAEA,mBAAOyO,oBAAP;AACH;;AAED;;;;;;;;8CAKsBzO,M,EAAQ;AAC1B,gBAAI2O,aAAa,KAAKjP,cAAL,CAAoBkP,qBAApB,CAA0C5O,MAA1C,CAAjB;;AAEA,mBAAO2O,UAAP;AACH;;AAED;;;;;;;;0CAKkB3O,M,EAAQ;AACtB,gBAAImK,SAAS,KAAKzK,cAAL,CAAoBmP,iBAApB,CAAsC7O,MAAtC,CAAb;;AAEA,mBAAOmK,MAAP;AACH;;AAED;;;;;;;;uCAKeX,O,EAAS/I,I,EAAM;AAC1B,iBAAKF,WAAL,CAAiBC,IAAjB,GAAwBgJ,OAAxB;AACA,iBAAKjJ,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACH;;;;;AAED;;;;qCAIa;AACT,mBAAO,KAAKP,gBAAL,CAAsB+M,OAA7B;AACH;;AAED;;;;;;;wCAIgB;AACZ,mBAAO,KAAK/M,gBAAL,CAAsBmN,UAA7B;AACH;;AAED;;;;;;;;uCAKe;AACX,gBAAIlD,SAAS,IAAb;;AAEA,gBAAI8C,UAAU,KAAK6B,UAAL,EAAd;AACA,gBAAIzB,aAAa,KAAK0B,aAAL,EAAjB;;AAEA;AACA,iBAAK,IAAIhD,IAAI,CAAb,EAAgBA,IAAIkB,OAApB,EAA6BlB,GAA7B,EAAkC;;AAE9B;AACA,qBAAK,IAAI6B,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;;AAEjC;AACA,wBAAIrB,YAAY,KAAKyC,qBAAL,CAA2BpB,CAA3B,EAA8B7B,CAA9B,CAAhB;;AAEA,wBAAIQ,aAAa,IAAb,IAAqBA,aAAa,EAAtC,EAA0C;AACtC;AACApC,iCAAS,KAAT;AACA;AACH;AACJ;;AAED,oBAAIA,UAAU,KAAd,EAAqB;AACjB;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;;uCAMe;AACX,gBAAIA,SAAS,IAAb;;AAEA,gBAAI8C,UAAU,KAAK6B,UAAL,EAAd;AACA,gBAAIzB,aAAa,KAAK0B,aAAL,EAAjB;;AAEA;AACA,gBAAIE,eAAe,KAAK/O,gBAAL,CAAsBQ,SAAzC;;AAEA;AACA,iBAAK,IAAIqL,IAAI,CAAb,EAAgBA,IAAIkB,OAApB,EAA6BlB,GAA7B,EAAkC;;AAE9B;AACA,qBAAK,IAAI6B,IAAI,CAAb,EAAgBA,IAAIP,UAApB,EAAgCO,GAAhC,EAAqC;;AAEjC;AACA,wBAAIrB,YAAY,KAAKyC,qBAAL,CAA2BpB,CAA3B,EAA8B7B,CAA9B,CAAhB;;AAEA;AACA,wBAAImD,mBAAmB,KAAKF,qBAAL,CAA2BpB,CAA3B,EAA8B7B,CAA9B,EAAiCkD,YAAjC,CAAvB;;AAEA,wBAAI1C,aAAa2C,gBAAjB,EAAmC;AAC/B;AACA/E,iCAAS,KAAT;AACA;AACH;AACJ;;AAED,oBAAIA,UAAU,KAAd,EAAqB;AACjB;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;kCAIUgF,M,EAAQ;AAAA;;AAEd;AACA,gBAAIC,eAAetJ,QAAQuJ,OAAR,CAAgB,YAAY,KAAKrP,MAAjB,GAA0B,GAA1B,GAAgC,KAAKC,WAArD,CAAnB;;AAEA,gBAAImP,gBAAgB,IAAhB,IAAwBA,aAAalE,MAAb,GAAsB,CAAlD,EAAqD;;AAEjD;AACA,qBAAKrL,WAAL,CAAiByP,WAAjB;;AAEA;AACA,qBAAKrQ,SAAL,CAAesQ,IAAf,CAAoB,KAAKtP,WAAzB;AACA,qBAAKnB,aAAL;;AAEA;AACAsQ,+BAAeA,aAAa,CAAb,CAAf;;AAEA,oBAAI;AACA;AACA,+CAAYA,YAAZ,EAA0B1J,IAA1B,CAA+B,UAAC8J,MAAD,EAAY;;AAEvC;AACA,4BAAIC,UAAUD,OAAOE,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACA,4BAAIC,cAAc,OAAK9P,WAAL,CAAiB+P,8BAAjB,CAAgDH,OAAhD,CAAlB;;AAEA;AACA,+BAAKhQ,eAAL,CAAqBoQ,UAArB,CAAgCV,MAAhC,EAAwCQ,WAAxC;;AAEA;AACA,+BAAK9P,WAAL,CAAiBiQ,WAAjB;;AAEA;;;;AAIA,+BAAK7Q,SAAL,CAAesQ,IAAf,CAAoB,OAAKtP,WAAzB;AACA,+BAAKnB,aAAL;AACH,qBApBD,EAoBGiR,KApBH,CAoBS,YAAM;;AAEX;;;;AAIA,+BAAKlQ,WAAL,CAAiBiQ,WAAjB;;AAEA;;;;AAIA,+BAAK7Q,SAAL,CAAesQ,IAAf,CAAoB,OAAKtP,WAAzB;AACA,+BAAKnB,aAAL;AACH,qBAlCD;AAmCH,iBArCD,CAqCE,OAAM+N,CAAN,EAAS;;AAEP;;;;AAIA,yBAAKhN,WAAL,CAAiBiQ,WAAjB;;AAEA;;;;AAIA,yBAAK7Q,SAAL,CAAesQ,IAAf,CAAoB,KAAKtP,WAAzB;AACA,yBAAKnB,aAAL;AACH;AAEJ;AACJ;;AAED;;;;;;;8CAIsB;AAClB,gBAAI,KAAKW,eAAL,CAAqBuQ,iBAArB,MAA4C,KAAK1O,wBAArD,EAA+E;AAC3E,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAP;AACH;AACJ;;AAED;;;;;;;;8CAKsB2O,kB,EAAoBC,gB,EAAkB;;AAExD,gBAAID,sBAAsB,IAAtB,IAA8BC,oBAAoB,IAAtD,EAA4D;AACxD,oBAAIC,kBAAkBF,mBAAmB/G,WAAzC;AACA,oBAAIkH,gBAAgBF,iBAAiBhH,WAArC;;AAEA,oBAAIiH,mBAAmB,IAAnB,IAA2BC,iBAAiB,IAAhD,EAAsD;AAClD,wBAAIC,gBAAgBF,gBAAgBzP,SAApC;AACA,wBAAI4P,cAAcF,cAAc1P,SAAhC;;AAEA,wBAAI2P,iBAAiB,IAAjB,GAAwBC,eAAe,IAA3C,EAAiD;;AAE7C;AACA,6BAAK,IAAIrE,IAAI,CAAb,EAAgBA,IAAI,KAAK6C,UAAL,EAApB,EAAuC7C,GAAvC,EAA4C;;AAExC;AACA,iCAAK,IAAID,IAAI,CAAb,EAAgBA,IAAI,KAAK+C,aAAL,EAApB,EAA0C/C,GAA1C,EAA+C;;AAE3C;AACA,oCAAIO,YAAY,KAAKyC,qBAAL,CAA2BhD,CAA3B,EAA8BC,CAA9B,EAAiCoE,aAAjC,CAAhB;;AAEA,oCAAI9D,aAAa,IAAjB,EAAuB;AACnB;AACA,yCAAKJ,qBAAL,CAA2BH,CAA3B,EAA8BC,CAA9B,EAAiCqE,WAAjC,EAA8C/D,SAA9C;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO2D,gBAAP;AACH;;AAED;;;;;;;+CAIuB;;AAEnB;;;;AAIA,iBAAKK,YAAL,GAAoB,KAAKlR,MAAL,CAAYwG,GAAZ,CAAgB,MAAhB,EAAwBC,QAAQtC,IAAR,CAAa,IAAb,EAAmB,UAASuC,KAAT,EAAgBC,IAAhB,EAAsB;;AAEjF,qBAAK5G,UAAL,CAAgBoR,UAAhB,CAA2B,aAA3B;AACH,aAH2C,CAAxB,CAApB;AAIH;;;;;AAED;;;2DAGmC;;AAE/B,gBAAI,CAAC,KAAKrQ,yBAAL,CAA+BsQ,gBAApC,EAAsD;AAClD;;;;;AAKA,qBAAKtQ,yBAAL,CAA+BuQ,sBAA/B,GAAwD,IAAxD;AACA,qBAAKvQ,yBAAL,CAA+BwQ,2BAA/B,GAA6D,IAA7D;AACA,qBAAKxQ,yBAAL,CAA+BkK,sBAA/B,GAAwD,IAAxD;;AAEA;AACA,qBAAKmD,6BAAL;AACH;AACJ;;AAED;;;;;;iEAGyC;;AAErC,gBAAI,KAAKrN,yBAAL,CAA+BuQ,sBAA/B,IAAyD,IAAzD,IACA,KAAKvQ,yBAAL,CAA+BuQ,sBAA/B,IAAyD,EAD7D,EACiE;;AAE7D;;;;AAIA,qBAAKvQ,yBAAL,CAA+BwQ,2BAA/B,GAA6D,EAA7D;AACH,aARD,MAQO;AACH,qBAAKC,6BAAL,GAAqC,KAAKlR,cAAL,CAAoBmR,WAApB,CAAgC,KAAK1Q,yBAAL,CAA+BuQ,sBAA/D,CAArC;AACH;;AAED;AACA,iBAAKlD,6BAAL;AACH;;AAED;;;;;;sEAG8C;;AAE1C;AACA,gBAAIkD,yBAAyB,KAAKvQ,yBAAL,CAA+BuQ,sBAA5D;;AAEA;AACA,gBAAIrG,yBAAyB,KAAKlK,yBAAL,CAA+BkK,sBAA5D;;AAEA;AACA,gBAAIyG,iCAAiC,KAAK5Q,gBAAL,CAAsByQ,2BAA3D;;AAEA;AACA,gBAAII,iCAAiC,KAAK5Q,yBAAL,CAA+BwQ,2BAApE;;AAEA;AACA,gBAAIK,+BAA+B,KAAKtR,cAAL,CAAoBuR,kCAApB,CAAuDP,sBAAvD,EAA+EK,8BAA/E,CAAnC;;AAEA,gBAAIC,gCAAgC,IAAhC,IAAwCA,gCAAgC,EAA5E,EAAgF;AAC5E;;AAEA;AACA,qBAAKxD,6BAAL;AACH,aALD,MAKO,IAAIwD,gCAAgC,IAApC,EAA0C;;AAE7C;AACA,oBAAIE,uBAAuB,KAAKhR,gBAAL,CAAsB8E,IAAjD;;AAEA;AACA,oBAAImM,mBAAmBH,6BAA6BhM,IAApD;;AAEA;AACA,oBAAImM,oBAAoBD,oBAAxB,EAA8C;AAC1C;;;;;AAKA;AACA,wBAAIhE,SAASC,QAAQ,KAAKpN,UAAL,CAAgB,qDAAhB,CAAR,CAAb;;AAEA,wBAAImN,MAAJ,EAAY;AACR;;AAEA;;;;AAIA,4BAAIkE,mBAAmB,KAAKpS,SAAL,CAAeqS,GAAf,CAAmBF,mBAAmB,SAAtC,CAAvB;;AAEA,4BAAIC,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,gCAAIE,eAAeF,iBAAiBG,eAAjB,EAAnB;;AAEA;AACAD,yCAAazP,EAAb,GAAkB,KAAK1B,yBAAL,CAA+B0B,EAAjD;AACAyP,yCAAab,gBAAb,GAAgC,IAAhC;AACAa,yCAAaZ,sBAAb,GAAsCA,sBAAtC;AACAY,yCAAaX,2BAAb,GAA2CI,8BAA3C;AACAO,yCAAajH,sBAAb,GAAsCA,sBAAtC;;AAEA;;;;AAIA,iCAAKsC,mCAAL,GAA2C/D,KAAKC,SAAL,CAAeyI,YAAf,CAA3C;;AAEA;AACA,iCAAKE,qCAAL;AACH;AACJ,qBA9BD,MA8BO;AACH;;;;AAIA,6BAAKrR,yBAAL,CAA+BwQ,2BAA/B,GAA6DG,8BAA7D;AACH;AACJ,iBA9CD,MA8CO;AACH;;;;AAIA,yBAAKtD,6BAAL;AACH;AACJ;AACJ;;AAED;;;;;;;;yCAKiBiE,S,EAAW;AACxB,gBAAItH,SAAS,IAAb;;AAEA,gBAAIsH,aAAa,IAAjB,EAAuB;AACnBtH,yBAAS,KAAKzK,cAAL,CAAoBgS,gBAApB,CAAqCD,SAArC,CAAT;AACH;;AAED,mBAAOtH,MAAP;AACH;;AAED;;;;;;6DAGqC;;AAEjC,gBAAI,CAAC,KAAKhK,yBAAL,CAA+BwR,kBAApC,EAAwD;AACpD;;;;;AAKA,qBAAKxR,yBAAL,CAA+B2D,wBAA/B,GAA0D,IAA1D;AACA,qBAAK3D,yBAAL,CAA+B6D,6BAA/B,GAA+D,IAA/D;;AAEA;AACA,qBAAKwJ,6BAAL;AACH;AACJ;;AAED;;;;;;mEAG2C;;AAEvC,gBAAI,KAAKrN,yBAAL,CAA+B2D,wBAA/B,IAA2D,IAA3D,IACA,KAAK3D,yBAAL,CAA+B2D,wBAA/B,IAA2D,EAD/D,EACmE;;AAE/D;;;;AAIA,qBAAK3D,yBAAL,CAA+B6D,6BAA/B,GAA+D,EAA/D;AACH;;AAED;AACA,iBAAKwJ,6BAAL;AACH;;AAED;;;;;;wEAGgD;;AAE5C;AACA,iBAAKA,6BAAL;AACH;;AAED;;;;;;sDAG8B;;AAE1B;AACA,gBAAIoE,OAAO,KAAKjP,oBAAhB;;AAEA;;;;;;;AAOAiP,mBAAO,KAAKrS,aAAL,CAAmBsS,wBAAnB,CAA4CD,IAA5C,CAAP;;AAEA;;;;AAIAA,mBAAO,KAAK/R,WAAL,CAAiBiS,eAAjB,CAAiCF,IAAjC,CAAP;;AAEA;AACA,iBAAKzR,yBAAL,CAA+ByC,MAA/B,GAAwCgP,IAAxC;;AAEA;AACA,iBAAKpE,6BAAL;AACH;;AAED;;;;;;;sDAI8B;AAC1B,gBAAI1J,2BAA2B,IAA/B;;AAEA,gBAAI,KAAK5D,gBAAL,IAAyB,IAAzB,IAAiC,KAAKA,gBAAL,CAAsB4D,wBAAtB,IAAkD,IAAvF,EAA6F;AACzFA,2CAA2B,KAAK5D,gBAAL,CAAsB4D,wBAAjD;;AAEA,oBAAIA,4BAA4B,IAA5B,IAAoCA,4BAA4B,EAApE,EAAwE;AACpE;;;;AAIAA,+CAA2B,KAAK5D,gBAAL,CAAsB6R,gBAAjD;AACH;AACJ;;AAED,mBAAOjO,wBAAP;AACH;;AAED;;;;;;;2DAImC;AAC/B,gBAAIE,gCAAgC,IAApC;;AAEA,gBAAI,KAAK9D,gBAAL,IAAyB,IAAzB,IAAiC,KAAKA,gBAAL,CAAsB8D,6BAAtB,IAAuD,IAA5F,EAAkG;AAC9F,oBAAIA,gCAAgC,KAAK9D,gBAAL,CAAsB8D,6BAA1D;;AAEA,oBAAIA,iCAAiC,IAAjC,IAAyCA,iCAAiC,EAA9E,EAAkF;AAC9E;;;;AAIAA,oDAAgC,KAAK9D,gBAAL,CAAsB8R,qBAAtD;AACH;AACJ;;AAED,mBAAOhO,6BAAP;AACH;;AAED;;;;;;gDAGwB;;AAEpB;;;;AAIA,gBAAIiO,wBAAwB,EAA5B;AACAA,kCAAsBjS,MAAtB,GAA+B,KAAKA,MAApC;AACAiS,kCAAsBhS,WAAtB,GAAoC,IAApC;AACAgS,kCAAsBnN,QAAtB,GAAiC,QAAjC;;AAEA;AACA,gBAAI,KAAK3E,yBAAL,CAA+B+R,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAK/R,yBAAL,CAA+B+R,mBAA/B,GAAqD,EAArD;AACH;;AAED;AACA,iBAAK/R,yBAAL,CAA+B+R,mBAA/B,CAAmDnE,IAAnD,CAAwDkE,qBAAxD;;AAEA;AACA,iBAAKzE,6BAAL;AACH;;AAED;;;;;;;iDAIyB2E,K,EAAO;;AAE5B,gBAAI,KAAKhS,yBAAL,CAA+B+R,mBAA/B,IAAsD,IAA1D,EAAgE;AAC5D,qBAAK/R,yBAAL,CAA+B+R,mBAA/B,CAAmD7D,MAAnD,CAA0D8D,KAA1D,EAAiE,CAAjE;AACH;;AAED;AACA,iBAAK3E,6BAAL;AACH;;AAED;;;;;;;iDAIyB4E,I,EAAM;;AAE3B,gBAAIA,QAAQ,IAAR,IAAgBA,QAAQ,KAA5B,EAAmC;AAC/B;AACA,qBAAKjS,yBAAL,CAA+BmC,cAA/B,GAAgD,KAAhD;AACA,qBAAKnC,yBAAL,CAA+BoC,gBAA/B,GAAkD,KAAlD;AACH,aAJD,MAIO;AACH;AACA,qBAAKpC,yBAAL,CAA+BmC,cAA/B,GAAgD,IAAhD;AACA,qBAAKnC,yBAAL,CAA+BoC,gBAA/B,GAAkD,IAAlD;AACH;;AAED;;;;;AAKA,iBAAKlD,MAAL,CAAY+G,KAAZ,CAAkB,uCAAlB,EAA2D,EAACpG,QAAQ,KAAKA,MAAd,EAAsBC,aAAa,KAAKA,WAAxC,EAAqDsC,kBAAkB6P,IAAvE,EAA3D;AACH;;AAED;;;;;;uDAG+B;;AAE3B;;;;AAIA,iBAAKC,wBAAL,CAA8B,KAAKlS,yBAAL,CAA+BoC,gBAA7D;;AAEA;AACA,iBAAKiL,6BAAL;AACH;;AAED;;;;;;iDAGyB;;AAErB;AACA,gBAAI9M,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,qBAAK,IAAIqL,IAAI,CAAb,EAAgBA,IAAIrL,UAAUwK,MAA9B,EAAsCa,GAAtC,EAA2C;AACvC,wBAAIM,MAAM3L,UAAUqL,CAAV,CAAV;;AAEA,wBAAIM,OAAO,IAAX,EAAiB;;AAEb;AACA,6BAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIvB,IAAInB,MAAxB,EAAgC0C,GAAhC,EAAqC;;AAEjC;AACA,gCAAItB,OAAOD,IAAIuB,CAAJ,CAAX;;AAEA,gCAAItB,QAAQ,IAAZ,EAAkB;;AAEd;AACAA,qCAAK2B,QAAL,GAAgB,KAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;AACA,iBAAKT,6BAAL;AACH;;AAED;;;;;;+CAGuB;;AAEnB;AACA,gBAAI9M,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,qBAAK,IAAIqL,IAAI,CAAb,EAAgBA,IAAIrL,UAAUwK,MAA9B,EAAsCa,GAAtC,EAA2C;AACvC,wBAAIM,MAAM3L,UAAUqL,CAAV,CAAV;;AAEA,wBAAIM,OAAO,IAAX,EAAiB;;AAEb;AACA,6BAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIvB,IAAInB,MAAxB,EAAgC0C,GAAhC,EAAqC;;AAEjC;AACA,gCAAItB,OAAOD,IAAIuB,CAAJ,CAAX;;AAEA,gCAAItB,QAAQ,IAAZ,EAAkB;;AAEd;AACAA,qCAAK2B,QAAL,GAAgB,IAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED;AACA,iBAAKT,6BAAL;AACH;;AAED;;;;;;;;6CAKqBtN,gB,EAAkB;;AAEnC,gBAAIkC,kBAAkB,EAAtB;;AAEA,gBAAIlC,oBAAoB,IAAxB,EAA8B;;AAE1B;AACA,oBAAIQ,YAAYR,iBAAiBQ,SAAjC;;AAEA,oBAAIA,aAAa,IAAjB,EAAuB;AACnB,wBAAI4R,WAAW5R,UAAU,CAAV,CAAf;;AAEA,wBAAI4R,YAAY,IAAhB,EAAsB;;AAElB;AACA,6BAAK,IAAItG,IAAI,CAAb,EAAgBA,IAAIsG,SAASpH,MAA7B,EAAqCc,GAArC,EAA0C;;AAEtC;AACA,gCAAIM,OAAOgG,SAAStG,CAAT,CAAX;;AAEA;;;;AAIA5J,4CAAgB4J,CAAhB,IAAqBM,KAAK4B,IAA1B;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO9L,eAAP;AACH;;AAED;;;;;;uDAG+B+P,K,EAAO;;AAElC,gBAAIA,SAAS,IAAb,EAAmB;AACf,oBAAI/D,WAAW,KAAKhM,eAAL,CAAqB+P,KAArB,CAAf;;AAEA,oBAAI/D,YAAY,EAAhB,EAAoB;AAChBA,+BAAW,IAAX;AACH;;AAED;AACA,qBAAKmE,2BAAL,CAAiCJ,KAAjC,EAAwC/D,QAAxC;AACH;AACJ;;AAED;;;;;;;;oDAK4BoE,M,EAAQtE,I,EAAM;;AAEtC;AACA,gBAAIxN,YAAY,KAAKP,yBAAL,CAA+BO,SAA/C;;AAEA,gBAAIA,aAAa,IAAjB,EAAuB;;AAEnB;AACA,qBAAK,IAAIqL,IAAI,CAAb,EAAgBA,IAAIrL,UAAUwK,MAA9B,EAAsCa,GAAtC,EAA2C;AACvC,wBAAIM,MAAM3L,UAAUqL,CAAV,CAAV;;AAEA,wBAAIM,OAAO,IAAX,EAAiB;;AAEb;AACA,4BAAIC,OAAOD,IAAImG,MAAJ,CAAX;;AAEA,4BAAIlG,QAAQ,IAAZ,EAAkB;AACd;AACAA,iCAAK4B,IAAL,GAAYA,IAAZ;AACH;AACJ;AACJ;AACJ;;AAED;AACA,iBAAKV,6BAAL;AACH;;;;;;AAGL3O,gBAAgB4T,OAAhB,GAA0B,CACtB,eADsB,EAEtB,SAFsB,EAGtB,WAHsB,EAItB,WAJsB,EAKtB,WALsB,EAMtB,IANsB,EAOtB,YAPsB,EAQtB,QARsB,EAStB,mBATsB,EAUtB,eAVsB,EAWtB,aAXsB,EAYtB,iBAZsB,EAatB,gBAbsB,EActB,oBAdsB,EAetB,cAfsB,EAgBtB,aAhBsB,CAA1B;;kBAmBe5T,e","file":"tableController.js","sourcesContent":["import html2canvas from 'html2canvas';\r\n\r\nclass TableController {\r\n    constructor($anchorScroll,\r\n                $filter,\r\n                $injector,\r\n                $location,\r\n                $mdDialog,\r\n                $q,\r\n                $rootScope,\r\n                $scope,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NodeService,\r\n                NotebookService,\r\n                ProjectService,\r\n                StudentDataService,\r\n                TableService,\r\n                UtilService) {\r\n\r\n        this.$anchorScroll = $anchorScroll;\r\n        this.$filter = $filter;\r\n        this.$injector = $injector;\r\n        this.$location = $location;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NodeService = NodeService;\r\n        this.NotebookService = NotebookService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.TableService = TableService;\r\n        this.UtilService = UtilService;\r\n        this.idToOrder = this.ProjectService.idToOrder;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        // the node id of the current node\r\n        this.nodeId = null;\r\n\r\n        // the component id\r\n        this.componentId = null;\r\n\r\n        // field that will hold the component content\r\n        this.componentContent = null;\r\n\r\n        // field that will hold the authoring component content\r\n        this.authoringComponentContent = null;\r\n\r\n        // whether the step should be disabled\r\n        this.isDisabled = false;\r\n\r\n        // whether the student work is dirty and needs saving\r\n        this.isDirty = false;\r\n\r\n        // whether the student work has changed since last submit\r\n        this.isSubmitDirty = false;\r\n\r\n        // message to show next to save/submit buttons\r\n        this.saveMessage = {\r\n            text: '',\r\n            time: ''\r\n        };\r\n\r\n        // holds the the table data\r\n        this.tableData = null;\r\n\r\n        // whether this part is showing previous work\r\n        this.isShowPreviousWork = false;\r\n\r\n        // whether the student work is for a submit\r\n        this.isSubmit = false;\r\n\r\n        // whether students can attach files to their work\r\n        this.isStudentAttachmentEnabled = false;\r\n\r\n        // whether the prompt is shown or not\r\n        this.isPromptVisible = true;\r\n\r\n        // whether the save button is shown or not\r\n        this.isSaveButtonVisible = false;\r\n\r\n        // whether the submit button is shown or not\r\n        this.isSubmitButtonVisible = false;\r\n\r\n        // counter to keep track of the number of submits\r\n        this.submitCounter = 0;\r\n\r\n        // flag for whether to show the advanced authoring\r\n        this.showAdvancedAuthoring = false;\r\n\r\n        // whether the JSON authoring is displayed\r\n        this.showJSONAuthoring = false;\r\n\r\n        // the latest annotations\r\n        this.latestAnnotations = null;\r\n\r\n        // whether the reset table button is shown or not\r\n        this.isResetTableButtonVisible = true;\r\n\r\n        // whether the snip table button is shown or not\r\n        this.isSnipTableButtonVisible = true;\r\n\r\n        // the label for the notebook in thos project\r\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\r\n\r\n        // the options for when to update this component from a connected component\r\n        this.connectedComponentUpdateOnOptions = [\r\n            {\r\n                value: 'change',\r\n                text: 'Change'\r\n            },\r\n            {\r\n                value: 'submit',\r\n                text: 'Submit'\r\n            }\r\n        ];\r\n\r\n        // get the current node and node id\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n        if (currentNode != null) {\r\n            this.nodeId = currentNode.id;\r\n        } else {\r\n            this.nodeId = this.$scope.nodeId;\r\n        }\r\n\r\n        // get the component content from the scope\r\n        this.componentContent = this.$scope.componentContent;\r\n\r\n        // get the authoring component content\r\n        this.authoringComponentContent = this.$scope.authoringComponentContent;\r\n\r\n        /*\r\n         * get the original component content. this is used when showing\r\n         * previous work from another component.\r\n         */\r\n        this.originalComponentContent = this.$scope.originalComponentContent;\r\n\r\n        // the mode to load the component in e.g. 'student', 'grading', 'onlyShowWork'\r\n        this.mode = this.$scope.mode;\r\n\r\n        this.latestConnectedComponentState = null;\r\n        this.latestConnectedComponentParams = null;\r\n\r\n        this.workgroupId = this.$scope.workgroupId;\r\n        this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\r\n\r\n        /*\r\n         * for the authoring view, get the cell sizes for each column if they\r\n         * have been customized\r\n         */\r\n        this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // get the component id\r\n            this.componentId = this.componentContent.id;\r\n\r\n            if (this.mode === 'student') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n\r\n                this.tableId = 'table_' + this.nodeId + \"_\" + this.componentId;\r\n\r\n                // get the latest annotations\r\n                this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                this.isResetTableButtonVisible = true;\r\n            } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isResetTableButtonVisible = false;\r\n                this.isSnipTableButtonVisible = false;\r\n                this.isDisabled = true;\r\n\r\n                if (this.mode === 'grading') {\r\n                    // get the latest annotations\r\n                    this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                }\r\n            } else if (this.mode === 'onlyShowWork') {\r\n                this.isPromptVisible = false;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isResetTableButtonVisible = false;\r\n                this.isSnipTableButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'showPreviousWork') {\r\n                this.isPromptVisible = true;\r\n                this.isSaveButtonVisible = false;\r\n                this.isSubmitButtonVisible = false;\r\n                this.isResetTableButtonVisible = false;\r\n                this.isDisabled = true;\r\n            } else if (this.mode === 'authoring') {\r\n                this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n                // generate the summernote rubric element id\r\n                this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n\r\n                // set the component rubric into the summernote rubric\r\n                this.summernoteRubricHTML = this.componentContent.rubric;\r\n\r\n                // the tooltip text for the insert WISE asset button\r\n                var insertAssetString = this.$translate('INSERT_ASSET');\r\n\r\n                /*\r\n                 * create the custom button for inserting WISE assets into\r\n                 * summernote\r\n                 */\r\n                var InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\r\n\r\n                /*\r\n                 * the options that specifies the tools to display in the\r\n                 * summernote prompt\r\n                 */\r\n                this.summernoteRubricOptions = {\r\n                    toolbar: [\r\n                        ['style', ['style']],\r\n                        ['font', ['bold', 'underline', 'clear']],\r\n                        ['fontname', ['fontname']],\r\n                        ['fontsize', ['fontsize']],\r\n                        ['color', ['color']],\r\n                        ['para', ['ul', 'ol', 'paragraph']],\r\n                        ['table', ['table']],\r\n                        ['insert', ['link', 'video']],\r\n                        ['view', ['fullscreen', 'codeview', 'help']],\r\n                        ['customButton', ['insertAssetButton']]\r\n                    ],\r\n                    height: 300,\r\n                    disableDragAndDrop: true,\r\n                    buttons: {\r\n                        insertAssetButton: InsertAssetButton\r\n                    }\r\n                };\r\n\r\n                this.updateAdvancedAuthoringView();\r\n\r\n                $scope.$watch(function() {\r\n                    return this.authoringComponentContent;\r\n                }.bind(this), function(newValue, oldValue) {\r\n\r\n                    /*\r\n                     * reset the values so that the preview is refreshed with\r\n                     * the new content\r\n                     */\r\n                    this.submitCounter = 0;\r\n                    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\r\n                    this.columnCellSizes = this.parseColumnCellSizes(this.componentContent);\r\n                    this.isSaveButtonVisible = this.componentContent.showSaveButton;\r\n                    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\r\n                    this.resetTable();\r\n                }.bind(this), true);\r\n            }\r\n\r\n            var componentState = null;\r\n\r\n            // get the component state from the scope\r\n            componentState = this.$scope.componentState;\r\n\r\n            // set whether studentAttachment is enabled\r\n            this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\r\n\r\n            if (componentState == null) {\r\n                // check if we need to import work\r\n\r\n                var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\r\n                var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\r\n\r\n                if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n                    // import the work from the other component\r\n                    this.importWork();\r\n                }\r\n            } else {\r\n                // populate the student work into this component\r\n                this.setStudentWork(componentState);\r\n            }\r\n\r\n            // set up the table\r\n            this.setupTable();\r\n\r\n            // check if the student has used up all of their submits\r\n            if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                /*\r\n                 * the student has used up all of their chances to submit so we\r\n                 * will disable the submit button\r\n                 */\r\n                this.isSubmitButtonDisabled = true;\r\n            }\r\n\r\n            // check if we need to lock this component\r\n            this.calculateDisabled();\r\n\r\n            if (this.$scope.$parent.nodeController != null) {\r\n                // register this component with the parent node\r\n                this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * A connected component has changed its student data so we will\r\n         * perform any necessary changes to this component\r\n         * @param connectedComponent the connected component\r\n         * @param connectedComponentParams the connected component params\r\n         * @param componentState the component state from the connected\r\n         * component that has changed\r\n         */\r\n        this.$scope.handleConnectedComponentStudentDataChanged = function(connectedComponent, connectedComponentParams, componentState) {\r\n\r\n            if (connectedComponent != null && connectedComponentParams != null && componentState != null) {\r\n\r\n                if (connectedComponentParams.updateOn === 'change') {\r\n                    // get the component type that has changed\r\n                    var componentType = connectedComponent.type;\r\n\r\n                    /*\r\n                     * make a copy of the component state so we don't accidentally\r\n                     * change any values in the referenced object\r\n                     */\r\n                    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\r\n\r\n                    if (componentType === 'Table') {\r\n\r\n                        // set the table data\r\n                        this.$scope.tableController.setStudentWork(componentState);\r\n\r\n                        // the table has changed\r\n                        this.$scope.tableController.isDirty = true;\r\n                    } else if (componentType === 'Graph') {\r\n\r\n                        // set the graph data into the table\r\n                        this.$scope.tableController.setGraphDataIntoTableData(componentState, connectedComponentParams);\r\n\r\n                        // the table has changed\r\n                        this.$scope.tableController.isDirty = true;\r\n                    } else if (componentType === 'Embedded') {\r\n\r\n                        // set the table data\r\n                        this.$scope.tableController.setStudentWork(componentState);\r\n\r\n                        // the table has changed\r\n                        this.$scope.tableController.isDirty = true;\r\n                    }\r\n                }\r\n            }\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Get the component state from this component. The parent node will\r\n         * call this function to obtain the component state when it needs to\r\n         * save student data.\r\n         * @param isSubmit boolean whether the request is coming from a submit\r\n         * action (optional; default is false)\r\n         * @return a promise of a component state containing the student data\r\n         */\r\n        this.$scope.getComponentState = function(isSubmit) {\r\n            var deferred = this.$q.defer();\r\n            let getState = false;\r\n            let action = 'change';\r\n\r\n            if (isSubmit) {\r\n                if (this.$scope.tableController.isSubmitDirty) {\r\n                    getState = true;\r\n                    action = 'submit';\r\n                }\r\n            } else {\r\n                if (this.$scope.tableController.isDirty) {\r\n                    getState = true;\r\n                    action = 'save';\r\n                }\r\n            }\r\n\r\n            if (getState) {\r\n                // create a component state populated with the student data\r\n                this.$scope.tableController.createComponentState(action).then((componentState) => {\r\n                    deferred.resolve(componentState);\r\n                });\r\n            } else {\r\n                /*\r\n                 * the student does not have any unsaved changes in this component\r\n                 * so we don't need to save a component state for this component.\r\n                 * we will immediately resolve the promise here.\r\n                 */\r\n                deferred.resolve();\r\n            }\r\n\r\n            return deferred.promise;\r\n        }.bind(this);\r\n\r\n        /**\r\n         * The parent node submit button was clicked\r\n         */\r\n        this.$scope.$on('nodeSubmitClicked', angular.bind(this, function(event, args) {\r\n\r\n            // get the node id of the node\r\n            var nodeId = args.nodeId;\r\n\r\n            // make sure the node id matches our parent node\r\n            if (this.nodeId === nodeId) {\r\n\r\n                // trigger the submit\r\n                var submitTriggeredBy = 'nodeSubmitButton';\r\n                this.submit(submitTriggeredBy);\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'studentWorkSavedToServer' event which is fired when\r\n         * we receive the response from saving a component state to the server\r\n         */\r\n        this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\r\n\r\n            let componentState = args.studentWork;\r\n\r\n            // check that the component state is for this component\r\n            if (componentState && this.nodeId === componentState.nodeId\r\n                && this.componentId === componentState.componentId) {\r\n\r\n                // set isDirty to false because the component state was just saved and notify node\r\n                this.isDirty = false;\r\n                this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: false});\r\n\r\n                let isAutoSave = componentState.isAutoSave;\r\n                let isSubmit = componentState.isSubmit;\r\n                let serverSaveTime = componentState.serverSaveTime;\r\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n\r\n                // set save message\r\n                if (isSubmit) {\r\n                    this.setSaveMessage(this.$translate('submitted'), clientSaveTime);\r\n\r\n                    this.lockIfNecessary();\r\n\r\n                    // set isSubmitDirty to false because the component state was just submitted and notify node\r\n                    this.isSubmitDirty = false;\r\n                    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                } else if (isAutoSave) {\r\n                    this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\r\n                } else {\r\n                    this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\r\n                }\r\n            }\r\n\r\n            // check if the component state is from a connected component\r\n            if (this.ProjectService.isConnectedComponent(this.nodeId, this.componentId, componentState.componentId)) {\r\n\r\n                // get the connected component params\r\n                var connectedComponentParams = this.ProjectService.getConnectedComponentParams(this.componentContent, componentState.componentId);\r\n\r\n                if (connectedComponentParams != null) {\r\n\r\n                    if (connectedComponentParams.updateOn === 'save' ||\r\n                        (connectedComponentParams.updateOn === 'submit' && componentState.isSubmit)) {\r\n\r\n                        var performUpdate = false;\r\n\r\n                        /*\r\n                         * make a copy of the component state so we don't accidentally\r\n                         * change any values in the referenced object\r\n                         */\r\n                        componentState = this.UtilService.makeCopyOfJSONObject(componentState);\r\n\r\n                        /*\r\n                         * make sure the student hasn't entered any values into the\r\n                         * table so that we don't overwrite any of their work.\r\n                         */\r\n                        if (this.isTableEmpty() || this.isTableReset()) {\r\n                            /*\r\n                             * the student has not entered any values into the table\r\n                             * so we can update it\r\n                             */\r\n                            performUpdate = true;\r\n                        } else {\r\n                            /*\r\n                             * the student has entered values into the table so we\r\n                             * will ask them if they want to update it\r\n                             */\r\n                            /*\r\n                            var answer = confirm('Do you want to update the connected table?');\r\n\r\n                            if (answer) {\r\n                                // the student answered yes\r\n                                performUpdate = true;\r\n                            }\r\n                            */\r\n                            performUpdate = true;\r\n                        }\r\n\r\n                        if (performUpdate) {\r\n                            // set the table data\r\n                            this.$scope.tableController.setStudentWork(componentState);\r\n\r\n                            // the table has changed\r\n                            this.$scope.tableController.isDirty = true;\r\n                            this.$scope.tableController.isSubmitDirty = true;\r\n                        }\r\n\r\n                        /*\r\n                         * remember the component state and connected component params\r\n                         * in case we need to use them again later\r\n                         */\r\n                        this.latestConnectedComponentState = componentState;\r\n                        this.latestConnectedComponentParams = connectedComponentParams;\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args != null ) {\r\n\r\n                // get the annotation that was saved to the server\r\n                var annotation = args.annotation;\r\n\r\n                if (annotation != null) {\r\n\r\n                    // get the node id and component id of the annotation\r\n                    var annotationNodeId = annotation.nodeId;\r\n                    var annotationComponentId = annotation.componentId;\r\n\r\n                    // make sure the annotation was for this component\r\n                    if (this.nodeId === annotationNodeId &&\r\n                        this.componentId === annotationComponentId) {\r\n\r\n                        // get latest score and comment annotations for this component\r\n                        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'exitNode' event which is fired when the student\r\n         * exits the parent node. This will perform any necessary cleanup\r\n         * when the student exits the parent node.\r\n         */\r\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\r\n\r\n        }));\r\n\r\n        this.$scope.getNumber = function(num) {\r\n            var array = new Array();\r\n\r\n            // make sure num is a valid number\r\n            if (num != null && !isNaN(num)) {\r\n                array = new Array(parseInt(num));\r\n            }\r\n\r\n            return array;\r\n        }\r\n\r\n        /*\r\n         * Listen for the assetSelected event which occurs when the user\r\n         * selects an asset from the choose asset popup\r\n         */\r\n        this.$scope.$on('assetSelected', (event, args) => {\r\n\r\n            if (args != null) {\r\n\r\n                // make sure the event was fired for this component\r\n                if (args.nodeId == this.nodeId && args.componentId == this.componentId) {\r\n                    // the asset was selected for this component\r\n                    var assetItem = args.assetItem;\r\n\r\n                    if (assetItem != null) {\r\n                        var fileName = assetItem.fileName;\r\n\r\n                        if (fileName != null) {\r\n                            /*\r\n                             * get the assets directory path\r\n                             * e.g.\r\n                             * /wise/curriculum/3/\r\n                             */\r\n                            var assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\r\n                            var fullAssetPath = assetsDirectoryPath + '/' + fileName;\r\n\r\n                            var summernoteId = '';\r\n\r\n                            if (args.target == 'prompt') {\r\n                                // the target is the summernote prompt element\r\n                                summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\r\n                            } else if (args.target == 'rubric') {\r\n                                // the target is the summernote rubric element\r\n                                summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\r\n                            }\r\n\r\n                            if (summernoteId != '') {\r\n                                if (this.UtilService.isImage(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // add the image html\r\n                                    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\r\n                                } else if (this.UtilService.isVideo(fileName)) {\r\n                                    /*\r\n                                     * move the cursor back to its position when the asset chooser\r\n                                     * popup was clicked\r\n                                     */\r\n                                    $('#' + summernoteId).summernote('editor.restoreRange');\r\n                                    $('#' + summernoteId).summernote('editor.focus');\r\n\r\n                                    // insert the video element\r\n                                    var videoElement = document.createElement('video');\r\n                                    videoElement.controls = 'true';\r\n                                    videoElement.innerHTML = \"<source ng-src='\" + fullAssetPath + \"' type='video/mp4'>\";\r\n                                    $('#' + summernoteId).summernote('insertNode', videoElement);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // close the popup\r\n            this.$mdDialog.hide();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a copy of the table data\r\n     * @param tableData the table data to copy\r\n     * @return a copy of the table data\r\n     */\r\n    getCopyOfTableData(tableData) {\r\n        var tableDataCopy = null;\r\n\r\n        if (tableData != null) {\r\n            // create a JSON string from the table data\r\n            var tableDataJSONString = JSON.stringify(tableData);\r\n\r\n            // create a JSON object from the table data string\r\n            var tableDataJSON = JSON.parse(tableDataJSONString);\r\n\r\n            tableDataCopy = tableDataJSON;\r\n        }\r\n\r\n        return tableDataCopy;\r\n    };\r\n\r\n    /**\r\n     * Setup the table\r\n     */\r\n    setupTable() {\r\n\r\n        if (this.tableData == null) {\r\n            /*\r\n             * the student does not have any table data so we will use\r\n             * the table data from the component content\r\n             */\r\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset the table data to its initial state from the component content\r\n     */\r\n    resetTable() {\r\n\r\n        var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\r\n        var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\r\n\r\n        if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n            // import the work from the other component\r\n            this.importWork();\r\n        } else {\r\n            // get the original table from the step content\r\n            this.tableData = this.getCopyOfTableData(this.componentContent.tableData);\r\n        }\r\n\r\n        // the table has changed so we will perform additional processing\r\n        this.studentDataChanged();\r\n    };\r\n\r\n    /**\r\n     * Get the rows of the table data\r\n     */\r\n    getTableDataRows() {\r\n        return this.tableData;\r\n    };\r\n\r\n    /**\r\n     * Populate the student work into the component\r\n     * @param componentState the component state to populate into the component\r\n     */\r\n    setStudentWork(componentState) {\r\n\r\n        if (componentState != null) {\r\n\r\n            // get the student data from the component state\r\n            var studentData = componentState.studentData;\r\n\r\n            if (studentData != null) {\r\n                // set the table into the controller\r\n                this.tableData = studentData.tableData;\r\n\r\n                var submitCounter = studentData.submitCounter;\r\n\r\n                if (submitCounter != null) {\r\n                    // populate the submit counter\r\n                    this.submitCounter = submitCounter;\r\n                }\r\n\r\n                this.processLatestSubmit();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check if latest component state is a submission and set isSubmitDirty accordingly\r\n     */\r\n    processLatestSubmit() {\r\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n        if (latestState) {\r\n            let serverSaveTime = latestState.serverSaveTime;\r\n            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\r\n            if (latestState.isSubmit) {\r\n                // latest state is a submission, so set isSubmitDirty to false and notify node\r\n                this.isSubmitDirty = false;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: false});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SUBMITTED'), clientSaveTime);\r\n            } else {\r\n                // latest state is not a submission, so set isSubmitDirty to true and notify node\r\n                this.isSubmitDirty = true;\r\n                this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n                // set save message\r\n                this.setSaveMessage(this.$translate('LAST_SAVED'), clientSaveTime);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the save button\r\n     */\r\n    saveButtonClicked() {\r\n        this.isSubmit = false;\r\n\r\n        // tell the parent node that this component wants to save\r\n        this.$scope.$emit('componentSaveTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n    };\r\n\r\n    /**\r\n     * Called when the student clicks the submit button\r\n     */\r\n    submitButtonClicked() {\r\n        // trigger the submit\r\n        var submitTriggeredBy = 'componentSubmitButton';\r\n        this.submit(submitTriggeredBy);\r\n    };\r\n\r\n    /**\r\n     * A submit was triggered by the component submit button or node submit button\r\n     * @param submitTriggeredBy what triggered the submit\r\n     * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\r\n     */\r\n    submit(submitTriggeredBy) {\r\n\r\n        if (this.isSubmitDirty) {\r\n            // the student has unsubmitted work\r\n\r\n            var performSubmit = true;\r\n\r\n            if (this.componentContent.maxSubmitCount != null) {\r\n                // there is a max submit count\r\n\r\n                // calculate the number of submits this student has left\r\n                var numberOfSubmitsLeft = this.componentContent.maxSubmitCount - this.submitCounter;\r\n\r\n                var message = '';\r\n\r\n                if (numberOfSubmitsLeft <= 0) {\r\n                    // the student does not have any more chances to submit\r\n                    performSubmit = false;\r\n                } else if (numberOfSubmitsLeft == 1) {\r\n                    /*\r\n                     * the student has one more chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                } else if (numberOfSubmitsLeft > 1) {\r\n                    /*\r\n                     * the student has more than one chance to submit left so maybe\r\n                     * we should ask the student if they are sure they want to submit\r\n                     */\r\n                }\r\n            }\r\n\r\n            if (performSubmit) {\r\n\r\n                /*\r\n                 * set isSubmit to true so that when the component state is\r\n                 * created, it will know that is a submit component state\r\n                 * instead of just a save component state\r\n                 */\r\n                this.isSubmit = true;\r\n\r\n                // increment the submit counter\r\n                this.incrementSubmitCounter();\r\n\r\n                // check if the student has used up all of their submits\r\n                if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\r\n                    /*\r\n                     * the student has used up all of their submits so we will\r\n                     * disable the submit button\r\n                     */\r\n                    this.isSubmitButtonDisabled = true;\r\n                }\r\n\r\n                if (this.mode === 'authoring') {\r\n                    /*\r\n                     * we are in authoring mode so we will set values appropriately\r\n                     * here because the 'componentSubmitTriggered' event won't\r\n                     * work in authoring mode\r\n                     */\r\n                    this.isDirty = false;\r\n                    this.isSubmitDirty = false;\r\n                    this.createComponentState('submit');\r\n                }\r\n\r\n                if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\r\n                    // tell the parent node that this component wants to submit\r\n                    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\r\n                } else if (submitTriggeredBy === 'nodeSubmitButton') {\r\n                    // nothing extra needs to be performed\r\n                }\r\n            } else {\r\n                /*\r\n                 * the student has cancelled the submit so if a component state\r\n                 * is created, it will just be a regular save and not submit\r\n                 */\r\n                this.isSubmit = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment the submit counter\r\n     */\r\n    incrementSubmitCounter() {\r\n        this.submitCounter++;\r\n    }\r\n\r\n    lockIfNecessary() {\r\n        // check if we need to lock the component after the student submits\r\n        if (this.isLockAfterSubmit()) {\r\n            this.isDisabled = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Called when the student changes their work\r\n     */\r\n    studentDataChanged() {\r\n        /*\r\n         * set the dirty flag so we will know we need to save the\r\n         * student work later\r\n         */\r\n        this.isDirty = true;\r\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        this.isSubmitDirty = true;\r\n        this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\r\n\r\n        // clear out the save message\r\n        this.setSaveMessage('', null);\r\n\r\n        // get this part id\r\n        var componentId = this.getComponentId();\r\n\r\n        /*\r\n         * the student work in this component has changed so we will tell\r\n         * the parent node that the student data will need to be saved.\r\n         * this will also notify connected parts that this component's student\r\n         * data has changed.\r\n         */\r\n        var action = 'change';\r\n\r\n        // create a component state populated with the student data\r\n        this.createComponentState(action).then((componentState) => {\r\n            this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: componentId, componentState: componentState});\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create a new component state populated with the student data\r\n     * @param action the action that is triggering creating of this component state\r\n     * e.g. 'submit', 'save', 'change'\r\n     * @return a promise that will return a component state\r\n     */\r\n    createComponentState(action) {\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        var studentData = {};\r\n\r\n        // insert the table data\r\n        studentData.tableData = this.getCopyOfTableData(this.tableData);\r\n\r\n        // set the submit counter\r\n        studentData.submitCounter = this.submitCounter;\r\n\r\n        // set the flag for whether the student submitted this work\r\n        componentState.isSubmit = this.isSubmit;\r\n\r\n        // set the student data into the component state\r\n        componentState.studentData = studentData;\r\n\r\n        // set the component type\r\n        componentState.componentType = 'Table';\r\n\r\n        // set the node id\r\n        componentState.nodeId = this.nodeId;\r\n\r\n        // set the component id\r\n        componentState.componentId = this.componentId;\r\n\r\n        /*\r\n         * reset the isSubmit value so that the next component state\r\n         * doesn't maintain the same value\r\n         */\r\n        this.isSubmit = false;\r\n\r\n        /*\r\n         * perform any additional processing that is required before returning\r\n         * the component state\r\n         */\r\n        this.createComponentStateAdditionalProcessing(deferred, componentState, action);\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Create a new component state with no student data\r\n     * @return a component state with no student data\r\n     */\r\n    createBlankComponentState() {\r\n\r\n        // create a new component state\r\n        var componentState = this.NodeService.createNewComponentState();\r\n\r\n        if (componentState != null) {\r\n            var studentData = {};\r\n\r\n            // set the student data into the component state\r\n            componentState.studentData = studentData;\r\n        }\r\n\r\n        return componentState;\r\n    };\r\n\r\n    /**\r\n     * Perform any additional processing that is required before returning the\r\n     * component state\r\n     * Note: this function must call deferred.resolve() otherwise student work\r\n     * will not be saved\r\n     * @param deferred a deferred object\r\n     * @param componentState the component state\r\n     * @param action the action that we are creating the component state for\r\n     * e.g. 'submit', 'save', 'change'\r\n     */\r\n    createComponentStateAdditionalProcessing(deferred, componentState, action) {\r\n        /*\r\n         * we don't need to perform any additional processing so we can resolve\r\n         * the promise immediately\r\n         */\r\n        deferred.resolve(componentState);\r\n    }\r\n\r\n    /**\r\n     * Check if we need to lock the component\r\n     */\r\n    calculateDisabled() {\r\n\r\n        var nodeId = this.nodeId;\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            // check if the parent has set this component to disabled\r\n            if (componentContent.isDisabled) {\r\n                this.isDisabled = true;\r\n            } else if (componentContent.lockAfterSubmit) {\r\n                // we need to lock the step after the student has submitted\r\n\r\n                // get the component states for this component\r\n                var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n\r\n                // check if any of the component states were submitted\r\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\r\n\r\n                if (isSubmitted) {\r\n                    // the student has submitted work for this component\r\n                    this.isDisabled = true;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to show the reset table button\r\n     * @return whether to show the reset table button\r\n     */\r\n    showResetTableButton() {\r\n        return this.isResetTableButtonVisible;\r\n    };\r\n\r\n    /**\r\n     * Check whether we need to lock the component after the student\r\n     * submits an answer.\r\n     */\r\n    isLockAfterSubmit() {\r\n        var result = false;\r\n\r\n        if (this.componentContent != null) {\r\n\r\n            // check the lockAfterSubmit field in the component content\r\n            if (this.componentContent.lockAfterSubmit) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the prompt to show to the student\r\n     */\r\n    getPrompt() {\r\n        var prompt = null;\r\n\r\n        if (this.originalComponentContent != null) {\r\n            // this is a show previous work component\r\n\r\n            if (this.originalComponentContent.showPreviousWorkPrompt) {\r\n                // show the prompt from the previous work component\r\n                prompt = this.componentContent.prompt;\r\n            } else {\r\n                // show the prompt from the original component\r\n                prompt = this.originalComponentContent.prompt;\r\n            }\r\n        } else if (this.componentContent != null) {\r\n            prompt = this.componentContent.prompt;\r\n        }\r\n\r\n        return prompt;\r\n    };\r\n\r\n    /**\r\n     * Import work from another component\r\n     */\r\n    importWork() {\r\n\r\n        // get the component content\r\n        var componentContent = this.componentContent;\r\n\r\n        if (componentContent != null) {\r\n\r\n            var importPreviousWorkNodeId = this.getImportPreviousWorkNodeId();\r\n            var importPreviousWorkComponentId = this.getImportPreviousWorkComponentId();\r\n\r\n            if (importPreviousWorkNodeId != null && importPreviousWorkComponentId != null) {\r\n\r\n                // get the latest component state from the component we are importing from\r\n                var importWorkComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(importPreviousWorkNodeId, importPreviousWorkComponentId);\r\n\r\n                if (importWorkComponentState != null) {\r\n\r\n                    // create a blank component state without student work\r\n                    var defaultComponentState = this.createBlankComponentState();\r\n\r\n                    if (defaultComponentState != null && defaultComponentState.studentData != null) {\r\n                        // set the authored component content table data into the component state\r\n                        defaultComponentState.studentData.tableData = this.getCopyOfTableData(this.componentContent.tableData);\r\n                    }\r\n\r\n                    // copy the cell text values into the default component state\r\n                    var mergedComponentState = this.copyTableDataCellText(importWorkComponentState, defaultComponentState);\r\n\r\n                    // set the merged component state into this component\r\n                    this.setStudentWork(mergedComponentState);\r\n\r\n                    // make the work dirty so that it gets saved\r\n                    this.studentDataChanged();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * handle importing notebook item data (we only support csv for now)\r\n     */\r\n    attachStudentAsset(studentAsset) {\r\n        // TODO: implement me\r\n    };\r\n\r\n    /**\r\n     * Set the graph data into the table data\r\n     * @param componentState the component state to get the graph data from\r\n     * @param params (optional) the params to specify what columns\r\n     * and rows to overwrite in the table data\r\n     */\r\n    setGraphDataIntoTableData(componentState, params) {\r\n\r\n        var trialIndex = 0;\r\n        var seriesIndex = 0;\r\n\r\n        if (params != null) {\r\n\r\n            if (params.trialIndex != null) {\r\n                // get the trial index\r\n                trialIndex = params.trialIndex;\r\n            }\r\n\r\n            if (params.seriesIndex != null) {\r\n                // get the series index\r\n                seriesIndex = params.seriesIndex;\r\n            }\r\n        }\r\n\r\n        if (componentState != null && componentState.studentData != null) {\r\n\r\n            // get the student data\r\n            var studentData = componentState.studentData;\r\n\r\n            // get the student data version\r\n            var studentDataVersion = studentData.version;\r\n\r\n            if (studentDataVersion == null || studentDataVersion == 1) {\r\n                // this is the old student data format that can't contain trials\r\n\r\n                // get the series\r\n                var series = studentData.series;\r\n\r\n                if (series != null && series.length > 0) {\r\n\r\n                    // get the series that we will get data from\r\n                    var tempSeries = series[seriesIndex];\r\n\r\n                    // set the series data into the table\r\n                    this.setSeriesIntoTable(tempSeries);\r\n                }\r\n            } else {\r\n                // this is the new student data format that can contain trials\r\n\r\n                // get all the trials\r\n                var trials = studentData.trials;\r\n\r\n                if (trials != null) {\r\n\r\n                    // get the specific trial we want\r\n                    var trial = trials[trialIndex];\r\n\r\n                    if (trial != null) {\r\n\r\n                        // get the series in the trial\r\n                        var multipleSeries = trial.series;\r\n\r\n                        if (multipleSeries != null) {\r\n\r\n                            // get the specific series we want\r\n                            var series = multipleSeries[seriesIndex];\r\n\r\n                            // set the series data into the table\r\n                            this.setSeriesIntoTable(series);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the series data into the table\r\n     * @param series an object that contains the data for a single series\r\n     * @param params the parameters for where to place the points in the table\r\n     */\r\n    setSeriesIntoTable(series, params) {\r\n\r\n        /*\r\n         * the default is set to not skip the first row and for the\r\n         * x column to be the first column and the y column to be the\r\n         * second column\r\n         */\r\n        var skipFirstRow = true;\r\n        var xColumn = 0;\r\n        var yColumn = 1;\r\n\r\n        if (params != null) {\r\n\r\n            if (params.skipFirstRow != null) {\r\n                // determine whether to skip the first row\r\n                skipFirstRow = params.skipFirstRow;\r\n            }\r\n\r\n            if (params.xColumn != null) {\r\n                // get the x column\r\n                xColumn = params.xColumn;\r\n            }\r\n\r\n            if (params.yColumn != null) {\r\n                // get the y column\r\n                yColumn = params.yColumn;\r\n            }\r\n        }\r\n\r\n        if (series != null) {\r\n\r\n            // get the table data rows\r\n            var tableDataRows = this.getTableDataRows();\r\n\r\n            // get the data from the series\r\n            var data = series.data;\r\n\r\n            if (data != null) {\r\n\r\n                // our counter for traversing the data rows\r\n                var dataRowCounter = 0;\r\n\r\n                // loop through all the table data rows\r\n                for (var r = 0; r < tableDataRows.length; r++) {\r\n\r\n                    if (skipFirstRow && r === 0) {\r\n                        // skip the first table data row\r\n                        continue;\r\n                    }\r\n\r\n                    var x = '';\r\n                    var y = '';\r\n\r\n                    // get the data row\r\n                    var dataRow = data[dataRowCounter];\r\n\r\n                    if (dataRow != null) {\r\n                        // get the x and y values from the data row\r\n                        x = dataRow[0];\r\n                        y = dataRow[1];\r\n                    }\r\n\r\n                    // set the x and y values into the table data\r\n                    this.setTableDataCellValue(xColumn, r, null, x);\r\n                    this.setTableDataCellValue(yColumn, r, null, y);\r\n\r\n                    // increment the data row counter\r\n                    dataRowCounter++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the table data cell value\r\n     * @param x the x index (0 indexed)\r\n     * @param y the y index (0 indexed)\r\n     * @param value the value to set in the cell\r\n     */\r\n    setTableDataCellValue(x, y, table, value) {\r\n\r\n        var tableDataRows = table;\r\n\r\n        if (table == null) {\r\n            // get the table data rows\r\n            tableDataRows = this.getTableDataRows();\r\n        }\r\n\r\n        if (tableDataRows != null) {\r\n\r\n            // get the row we want\r\n            var row = tableDataRows[y];\r\n\r\n            if (row != null) {\r\n\r\n                // get the cell we want\r\n                var cell = row[x];\r\n\r\n                if (cell != null) {\r\n\r\n                    // set the value into the cell\r\n                    cell.text = value;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the value of a cell in the table\r\n     * @param x the x coordinate\r\n     * @param y the y coordinate\r\n     * @param table (optional) table data to get the value from. this is used\r\n     * when we want to look up the value in the default authored table\r\n     * @returns the cell value (text or a number)\r\n     */\r\n    getTableDataCellValue(x, y, table) {\r\n\r\n        var cellValue = null;\r\n\r\n        if (table == null) {\r\n            // get the table data rows\r\n            table = this.getTableDataRows();\r\n        }\r\n\r\n        if (table != null) {\r\n\r\n            // get the row we want\r\n            var row = table[y];\r\n\r\n            if (row != null) {\r\n\r\n                // get the cell we want\r\n                var cell = row[x];\r\n\r\n                if (cell != null) {\r\n\r\n                    // set the value into the cell\r\n                    cellValue = cell.text;\r\n                }\r\n            }\r\n        }\r\n\r\n        return cellValue;\r\n    }\r\n\r\n    /**\r\n     * Get the component id\r\n     * @return the component id\r\n     */\r\n    getComponentId() {\r\n        return this.componentContent.id;\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the regular authoring view so we will save the project\r\n     */\r\n    authoringViewComponentChanged() {\r\n        // update the JSON string in the advanced authoring view textarea\r\n        this.updateAdvancedAuthoringView();\r\n\r\n        /*\r\n         * notify the parent node that the content has changed which will save\r\n         * the project to the server\r\n         */\r\n        this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n    };\r\n\r\n    /**\r\n     * The component has changed in the advanced authoring view so we will update\r\n     * the component and save the project.\r\n     */\r\n    advancedAuthoringViewComponentChanged() {\r\n\r\n        try {\r\n            /*\r\n             * create a new component by converting the JSON string in the advanced\r\n             * authoring view into a JSON object\r\n             */\r\n            var authoringComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\r\n\r\n            // replace the component in the project\r\n            this.ProjectService.replaceComponent(this.nodeId, this.componentId, authoringComponentContent);\r\n\r\n            this.authoringComponentContent = authoringComponentContent;\r\n\r\n            // set the new component into the controller\r\n            this.componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\r\n\r\n            /*\r\n             * notify the parent node that the content has changed which will save\r\n             * the project to the server\r\n             */\r\n            this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\r\n        } catch(e) {\r\n            this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the component JSON string that will be displayed in the advanced authoring view textarea\r\n     */\r\n    updateAdvancedAuthoringView() {\r\n        this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\r\n    };\r\n\r\n    /**\r\n     * Confirm whether user really want to change row/column size. Only confirm if they're decreasing the size.\r\n     */\r\n    authoringViewTableSizeConfirmChange(rowOrColumn, oldValue) {\r\n        if (rowOrColumn === 'rows') {\r\n            if (this.authoringComponentContent.numRows < oldValue) {\r\n                // author wants to decrease number of rows, so confirm\r\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfRows'));\r\n                if (answer) {\r\n                    // author confirms yes, proceed with change\r\n                    this.authoringViewTableSizeChanged();\r\n                } else {\r\n                    // author says no, so revert\r\n                    this.authoringComponentContent.numRows = oldValue;\r\n                }\r\n            } else {\r\n                // author wants to increase number of rows, so let them.\r\n                this.authoringViewTableSizeChanged();\r\n            }\r\n        } else if (rowOrColumn === 'columns') {\r\n            if (this.authoringComponentContent.numColumns < oldValue) {\r\n                // author wants to decrease number of columns, so confirm\r\n                var answer = confirm(this.$translate('table.areYouSureYouWantToDecreaseTheNumberOfColumns'));\r\n                if (answer) {\r\n                    // author confirms yes, proceed with change\r\n                    this.authoringViewTableSizeChanged();\r\n                } else {\r\n                    // author says no, so revert\r\n                    this.authoringComponentContent.numColumns = oldValue;\r\n                }\r\n            } else {\r\n                // author wants to increase number of columns, so let them.\r\n                this.authoringViewTableSizeChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The table size has changed in the authoring view so we will update it\r\n     */\r\n    authoringViewTableSizeChanged() {\r\n\r\n        // create a new table with the new size and populate it with the existing cells\r\n        var newTable = this.getUpdatedTableSize(this.authoringComponentContent.numRows, this.authoringComponentContent.numColumns);\r\n\r\n        // set the new table into the component content\r\n        this.authoringComponentContent.tableData = newTable;\r\n\r\n        // perform preview updating and project saving\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Create a table with the given dimensions. Populate the cells with\r\n     * the cells from the old table.\r\n     * @param newNumRows the number of rows in the new table\r\n     * @param newNumColumns the number of columns in the new table\r\n     * @returns a new table\r\n     */\r\n    getUpdatedTableSize(newNumRows, newNumColumns) {\r\n\r\n        var newTable = [];\r\n\r\n        // create the rows\r\n        for (var r = 0; r < newNumRows; r++) {\r\n\r\n            var newRow = [];\r\n\r\n            // create the columns\r\n            for (var c = 0; c < newNumColumns; c++) {\r\n\r\n                // try to get the cell from the old table\r\n                var cell = this.getCellObjectFromComponentContent(c, r);\r\n\r\n                if (cell == null) {\r\n                    /*\r\n                     * the old table does not have a cell for the given\r\n                     * row/column location so we will create an empty cell\r\n                     */\r\n                    cell = this.createEmptyCell();\r\n                }\r\n\r\n                newRow.push(cell);\r\n            }\r\n\r\n            newTable.push(newRow);\r\n        }\r\n\r\n        return newTable;\r\n    }\r\n\r\n    /**\r\n     * Get the cell object at the given x, y location\r\n     * @param x the column number (zero indexed)\r\n     * @param y the row number (zero indexed)\r\n     * @returns the cell at the given x, y location or null if there is none\r\n     */\r\n    getCellObjectFromComponentContent(x, y) {\r\n        var cellObject = null;\r\n\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            // get the row\r\n            var row = tableData[y];\r\n\r\n            if (row != null) {\r\n\r\n                // get the cell\r\n                cellObject = row[x];\r\n            }\r\n        }\r\n\r\n        return cellObject;\r\n    }\r\n\r\n    /**\r\n     * Create an empty cell\r\n     * @returns an empty cell object\r\n     */\r\n    createEmptyCell() {\r\n        var cell = {};\r\n\r\n        cell.text = '';\r\n        cell.editable = true;\r\n        cell.size = null;\r\n\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * Insert a row into the table from the authoring view\r\n     * @param y the row number to insert at\r\n     */\r\n    authoringViewInsertRow(y) {\r\n\r\n        // get the table\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            // create the new row that we will insert\r\n            var newRow = [];\r\n\r\n            // get the number of columns\r\n            var numColumns = this.authoringComponentContent.numColumns;\r\n\r\n            // populate the new row with the correct number of cells\r\n            for (var c = 0; c < numColumns; c++) {\r\n                // create an empty cell\r\n                var newCell = this.createEmptyCell();\r\n\r\n                // get the column cell size\r\n                var cellSize = this.columnCellSizes[c];\r\n\r\n                if (cellSize != null) {\r\n                    // set the cell size\r\n                    newCell.size = cellSize;\r\n                }\r\n\r\n                newRow.push(newCell);\r\n            }\r\n\r\n            // insert the new row into the table\r\n            tableData.splice(y, 0, newRow);\r\n\r\n            // update the number of rows value\r\n            this.authoringComponentContent.numRows++;\r\n        }\r\n\r\n        // save the project and update the preview\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a row in the table from the authoring view\r\n     * @param y the row number to delete\r\n     */\r\n    authoringViewDeleteRow(y) {\r\n\r\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisRow'));\r\n\r\n        if (answer) {\r\n            // get the table\r\n            var tableData = this.authoringComponentContent.tableData;\r\n\r\n            if (tableData != null) {\r\n\r\n                // remove the row\r\n                tableData.splice(y, 1);\r\n\r\n                // update the number of rows value\r\n                this.authoringComponentContent.numRows--;\r\n            }\r\n\r\n            // save the project and update the preview\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert a column into the table from the authoring view\r\n     * @param x the column number to insert at\r\n     */\r\n    authoringViewInsertColumn(x) {\r\n\r\n        // get the table\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            var numRows = this.authoringComponentContent.numRows;\r\n\r\n            // loop through all the rows\r\n            for (var r = 0; r < numRows; r++) {\r\n\r\n                // get a row\r\n                var tempRow = tableData[r];\r\n\r\n                if (tempRow != null) {\r\n\r\n                    // create an empty cell\r\n                    var newCell = this.createEmptyCell();\r\n\r\n                    // insert the cell into the row\r\n                    tempRow.splice(x, 0, newCell);\r\n                }\r\n            }\r\n\r\n            // update the number of columns value\r\n            this.authoringComponentContent.numColumns++;\r\n\r\n            // update the column cell sizes model\r\n            this.parseColumnCellSizes(this.authoringComponentContent);\r\n        }\r\n\r\n        // save the project and update the preview\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a column in the table from the authoring view\r\n     * @param x the column number to delete\r\n     */\r\n    authoringViewDeleteColumn(x) {\r\n\r\n        var answer = confirm(this.$translate('table.areYouSureYouWantToDeleteThisColumn'));\r\n\r\n        if (answer) {\r\n            // get the table\r\n            var tableData = this.authoringComponentContent.tableData;\r\n\r\n            if (tableData != null) {\r\n\r\n                var numRows = this.authoringComponentContent.numRows;\r\n\r\n                // loop through all the rows\r\n                for (var r = 0; r < numRows; r++) {\r\n\r\n                    // get a row\r\n                    var tempRow = tableData[r];\r\n\r\n                    if (tempRow != null) {\r\n\r\n                        // remove the cell from the row\r\n                        tempRow.splice(x, 1);\r\n                    }\r\n                }\r\n\r\n                // update the number of columns value\r\n                this.authoringComponentContent.numColumns--;\r\n\r\n                // update the column cell sizes model\r\n                this.parseColumnCellSizes(this.authoringComponentContent);\r\n            }\r\n\r\n            // save the project and update the preview\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all the step node ids in the project\r\n     * @returns all the step node ids\r\n     */\r\n    getStepNodeIds() {\r\n        var stepNodeIds = this.ProjectService.getNodeIds();\r\n\r\n        return stepNodeIds;\r\n    }\r\n\r\n    /**\r\n     * Get the step number and title\r\n     * @param nodeId get the step number and title for this node\r\n     * @returns the step number and title\r\n     */\r\n    getNodePositionAndTitleByNodeId(nodeId) {\r\n        var nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n\r\n        return nodePositionAndTitle;\r\n    }\r\n\r\n    /**\r\n     * Get the components in a step\r\n     * @param nodeId get the components in the step\r\n     * @returns the components in the step\r\n     */\r\n    getComponentsByNodeId(nodeId) {\r\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Check if a node is a step node\r\n     * @param nodeId the node id to check\r\n     * @returns whether the node is an application node\r\n     */\r\n    isApplicationNode(nodeId) {\r\n        var result = this.ProjectService.isApplicationNode(nodeId);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the message next to the save button\r\n     * @param message the message to display\r\n     * @param time the time to display\r\n     */\r\n    setSaveMessage(message, time) {\r\n        this.saveMessage.text = message;\r\n        this.saveMessage.time = time;\r\n    };\r\n\r\n    /**\r\n     * Get the number of rows in the table\r\n     * @returns the number of rows in the table\r\n     */\r\n    getNumRows() {\r\n        return this.componentContent.numRows;\r\n    }\r\n\r\n    /**\r\n     * Get the number of columns in the table\r\n     * @returns the number of columns in the table\r\n     */\r\n    getNumColumns() {\r\n        return this.componentContent.numColumns;\r\n    }\r\n\r\n    /**\r\n     * Check if the table is empty. The table is empty if all the\r\n     * cells are empty string.\r\n     * @returns whether the table is empty\r\n     */\r\n    isTableEmpty() {\r\n        var result = true;\r\n\r\n        var numRows = this.getNumRows();\r\n        var numColumns = this.getNumColumns();\r\n\r\n        // loop through all the rows\r\n        for (var r = 0; r < numRows; r++) {\r\n\r\n            // loop through all the cells in the row\r\n            for (var c = 0; c < numColumns; c++) {\r\n\r\n                // get a cell value\r\n                var cellValue = this.getTableDataCellValue(c, r);\r\n\r\n                if (cellValue != null && cellValue != '') {\r\n                    // the cell is not empty so the table is not empty\r\n                    result = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (result == false) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if the table is set to the default values. The table\r\n     * is set to the default values if all the cells match the\r\n     * values in the default authored table.\r\n     * @returns whether the table is set to the default values\r\n     */\r\n    isTableReset() {\r\n        var result = true;\r\n\r\n        var numRows = this.getNumRows();\r\n        var numColumns = this.getNumColumns();\r\n\r\n        // get the default table\r\n        var defaultTable = this.componentContent.tableData;\r\n\r\n        // loop through all the rows\r\n        for (var r = 0; r < numRows; r++) {\r\n\r\n            // loop through all the cells in the row\r\n            for (var c = 0; c < numColumns; c++) {\r\n\r\n                // get the cell value from the student table\r\n                var cellValue = this.getTableDataCellValue(c, r);\r\n\r\n                // get the cell value from the default table\r\n                var defaultCellValue = this.getTableDataCellValue(c, r, defaultTable);\r\n\r\n                if (cellValue != defaultCellValue) {\r\n                    // the cell values do not match so the table is not set to the default values\r\n                    result = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (result == false) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Snip the table by converting it to an image\r\n     * @param $event the click event\r\n     */\r\n    snipTable($event) {\r\n\r\n        // get the table element. this will obtain an array.\r\n        var tableElement = angular.element('#table_' + this.nodeId + '_' + this.componentId);\r\n\r\n        if (tableElement != null && tableElement.length > 0) {\r\n\r\n            // hide all the iframes otherwise html2canvas may cut off the table\r\n            this.UtilService.hideIFrames();\r\n\r\n            // scroll to the component so html2canvas doesn't cut off the table\r\n            this.$location.hash(this.componentId);\r\n            this.$anchorScroll();\r\n\r\n            // get the table element\r\n            tableElement = tableElement[0];\r\n\r\n            try {\r\n                // convert the table element to a canvas element\r\n                html2canvas(tableElement).then((canvas) => {\r\n\r\n                    // get the canvas as a base64 string\r\n                    var img_b64 = canvas.toDataURL('image/png');\r\n\r\n                    // get the image object\r\n                    var imageObject = this.UtilService.getImageObjectFromBase64String(img_b64);\r\n\r\n                    // create a notebook item with the image populated into it\r\n                    this.NotebookService.addNewItem($event, imageObject);\r\n\r\n                    // we are done capturing the table so we will show the iframes again\r\n                    this.UtilService.showIFrames();\r\n\r\n                    /*\r\n                     * scroll to the component in case the view has shifted after\r\n                     * showing the iframe\r\n                     */\r\n                    this.$location.hash(this.componentId);\r\n                    this.$anchorScroll();\r\n                }).catch(() => {\r\n\r\n                    /*\r\n                     * an error occurred while trying to capture the table so we\r\n                     * will show the iframes again\r\n                     */\r\n                    this.UtilService.showIFrames();\r\n\r\n                    /*\r\n                     * scroll to the component in case the view has shifted after\r\n                     * showing the iframe\r\n                     */\r\n                    this.$location.hash(this.componentId);\r\n                    this.$anchorScroll();\r\n                });\r\n            } catch(e) {\r\n\r\n                /*\r\n                 * an error occurred while trying to capture the table so we\r\n                 * will show the iframes again\r\n                 */\r\n                this.UtilService.showIFrames();\r\n\r\n                /*\r\n                 * scroll to the component in case the view has shifted after\r\n                 * showing the iframe\r\n                 */\r\n                this.$location.hash(this.componentId);\r\n                this.$anchorScroll();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check whether we need to show the snip table button\r\n     * @return whether to show the snip table button\r\n     */\r\n    showSnipTableButton() {\r\n        if (this.NotebookService.isNotebookEnabled() && this.isSnipTableButtonVisible) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Copy the table data cell text from one component state to another\r\n     * @param fromComponentState get the cell text values from this component state\r\n     * @param toComponentState set the cell text values in this component state\r\n     */\r\n    copyTableDataCellText(fromComponentState, toComponentState) {\r\n\r\n        if (fromComponentState != null && toComponentState != null) {\r\n            var fromStudentData = fromComponentState.studentData;\r\n            var toStudentData = toComponentState.studentData;\r\n\r\n            if (fromStudentData != null && toStudentData != null) {\r\n                var fromTableData = fromStudentData.tableData;\r\n                var toTableData = toStudentData.tableData;\r\n\r\n                if (fromTableData != null & toTableData != null) {\r\n\r\n                    // loop through all the rows\r\n                    for (var y = 0; y < this.getNumRows(); y++) {\r\n\r\n                        // loop through all the columns\r\n                        for (var x = 0; x < this.getNumColumns(); x++) {\r\n\r\n                            // get the cell value\r\n                            var cellValue = this.getTableDataCellValue(x, y, fromTableData);\r\n\r\n                            if (cellValue != null) {\r\n                                // set the cell value\r\n                                this.setTableDataCellValue(x, y, toTableData, cellValue);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return toComponentState;\r\n    }\r\n\r\n    /**\r\n     * Register the the listener that will listen for the exit event\r\n     * so that we can perform saving before exiting.\r\n     */\r\n    registerExitListener() {\r\n\r\n        /*\r\n         * Listen for the 'exit' event which is fired when the student exits\r\n         * the VLE. This will perform saving before the VLE exits.\r\n         */\r\n        this.exitListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\r\n\r\n            this.$rootScope.$broadcast('doneExiting');\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * The show previous work checkbox was clicked\r\n     */\r\n    authoringShowPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.showPreviousWork) {\r\n            /*\r\n             * show previous work has been turned off so we will clear the\r\n             * show previous work node id, show previous work component id, and\r\n             * show previous work prompt values\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.showPreviousWorkComponentId = null;\r\n            this.authoringComponentContent.showPreviousWorkPrompt = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The show previous work node id has changed\r\n     */\r\n    authoringShowPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.showPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.showPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the show previous work node id is null so we will also set the\r\n             * show previous component id to null\r\n             */\r\n            this.authoringComponentContent.showPreviousWorkComponentId = '';\r\n        } else {\r\n            this.authoringShowPreviousWorkNode = this.ProjectService.getNodeById(this.authoringComponentContent.showPreviousWorkNodeId);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The show previous work component id has changed\r\n     */\r\n    authoringShowPreviousWorkComponentIdChanged() {\r\n\r\n        // get the show previous work node id\r\n        var showPreviousWorkNodeId = this.authoringComponentContent.showPreviousWorkNodeId;\r\n\r\n        // get the show previous work prompt boolean value\r\n        var showPreviousWorkPrompt = this.authoringComponentContent.showPreviousWorkPrompt;\r\n\r\n        // get the old show previous work component id\r\n        var oldShowPreviousWorkComponentId = this.componentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component id\r\n        var newShowPreviousWorkComponentId = this.authoringComponentContent.showPreviousWorkComponentId;\r\n\r\n        // get the new show previous work component\r\n        var newShowPreviousWorkComponent = this.ProjectService.getComponentByNodeIdAndComponentId(showPreviousWorkNodeId, newShowPreviousWorkComponentId);\r\n\r\n        if (newShowPreviousWorkComponent == null || newShowPreviousWorkComponent == '') {\r\n            // the new show previous work component is empty\r\n\r\n            // save the component\r\n            this.authoringViewComponentChanged();\r\n        } else if (newShowPreviousWorkComponent != null) {\r\n\r\n            // get the current component type\r\n            var currentComponentType = this.componentContent.type;\r\n\r\n            // get the new component type\r\n            var newComponentType = newShowPreviousWorkComponent.type;\r\n\r\n            // check if the component types are different\r\n            if (newComponentType != currentComponentType) {\r\n                /*\r\n                 * the component types are different so we will need to change\r\n                 * the whole component\r\n                 */\r\n\r\n                // make sure the author really wants to change the component type\r\n                var answer = confirm(this.$translate('ARE_YOU_SURE_YOU_WANT_TO_CHANGE_THIS_COMPONENT_TYPE'));\r\n\r\n                if (answer) {\r\n                    // the author wants to change the component type\r\n\r\n                    /*\r\n                     * get the component service so we can make a new instance\r\n                     * of the component\r\n                     */\r\n                    var componentService = this.$injector.get(newComponentType + 'Service');\r\n\r\n                    if (componentService != null) {\r\n\r\n                        // create a new component\r\n                        var newComponent = componentService.createComponent();\r\n\r\n                        // set move over the values we need to keep\r\n                        newComponent.id = this.authoringComponentContent.id;\r\n                        newComponent.showPreviousWork = true;\r\n                        newComponent.showPreviousWorkNodeId = showPreviousWorkNodeId;\r\n                        newComponent.showPreviousWorkComponentId = newShowPreviousWorkComponentId;\r\n                        newComponent.showPreviousWorkPrompt = showPreviousWorkPrompt;\r\n\r\n                        /*\r\n                         * update the authoring component content JSON string to\r\n                         * change the component\r\n                         */\r\n                        this.authoringComponentContentJSONString = JSON.stringify(newComponent);\r\n\r\n                        // update the component in the project and save the project\r\n                        this.advancedAuthoringViewComponentChanged();\r\n                    }\r\n                } else {\r\n                    /*\r\n                     * the author does not want to change the component type so\r\n                     * we will rollback the showPreviousWorkComponentId value\r\n                     */\r\n                    this.authoringComponentContent.showPreviousWorkComponentId = oldShowPreviousWorkComponentId;\r\n                }\r\n            } else {\r\n                /*\r\n                 * the component types are the same so we do not need to change\r\n                 * the component type and can just save\r\n                 */\r\n                this.authoringViewComponentChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a component generates student work\r\n     * @param component the component\r\n     * @return whether the component generates student work\r\n     */\r\n    componentHasWork(component) {\r\n        var result = true;\r\n\r\n        if (component != null) {\r\n            result = this.ProjectService.componentHasWork(component);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * The import previous work checkbox was clicked\r\n     */\r\n    authoringImportPreviousWorkClicked() {\r\n\r\n        if (!this.authoringComponentContent.importPreviousWork) {\r\n            /*\r\n             * import previous work has been turned off so we will clear the\r\n             * import previous work node id, and import previous work\r\n             * component id\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkNodeId = null;\r\n            this.authoringComponentContent.importPreviousWorkComponentId = null;\r\n\r\n            // the authoring component content has changed so we will save the project\r\n            this.authoringViewComponentChanged();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The import previous work node id has changed\r\n     */\r\n    authoringImportPreviousWorkNodeIdChanged() {\r\n\r\n        if (this.authoringComponentContent.importPreviousWorkNodeId == null ||\r\n            this.authoringComponentContent.importPreviousWorkNodeId == '') {\r\n\r\n            /*\r\n             * the import previous work node id is null so we will also set the\r\n             * import previous component id to null\r\n             */\r\n            this.authoringComponentContent.importPreviousWorkComponentId = '';\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The import previous work component id has changed\r\n     */\r\n    authoringImportPreviousWorkComponentIdChanged() {\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * The author has changed the rubric\r\n     */\r\n    summernoteRubricHTMLChanged() {\r\n\r\n        // get the summernote rubric html\r\n        var html = this.summernoteRubricHTML;\r\n\r\n        /*\r\n         * remove the absolute asset paths\r\n         * e.g.\r\n         * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\r\n         * will be changed to\r\n         * <img src='sun.png'/>\r\n         */\r\n        html = this.ConfigService.removeAbsoluteAssetPaths(html);\r\n\r\n        /*\r\n         * replace <a> and <button> elements with <wiselink> elements when\r\n         * applicable\r\n         */\r\n        html = this.UtilService.insertWISELinks(html);\r\n\r\n        // update the component rubric\r\n        this.authoringComponentContent.rubric = html;\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Get the import previous work node id\r\n     * @return the import previous work node id or null\r\n     */\r\n    getImportPreviousWorkNodeId() {\r\n        var importPreviousWorkNodeId = null;\r\n\r\n        if (this.componentContent != null && this.componentContent.importPreviousWorkNodeId != null) {\r\n            importPreviousWorkNodeId = this.componentContent.importPreviousWorkNodeId;\r\n\r\n            if (importPreviousWorkNodeId == null || importPreviousWorkNodeId == '') {\r\n                /*\r\n                 * check if the node id is in the field that we used to store\r\n                 * the import previous work node id in\r\n                 */\r\n                importPreviousWorkNodeId = this.componentContent.importWorkNodeId;\r\n            }\r\n        }\r\n\r\n        return importPreviousWorkNodeId;\r\n    }\r\n\r\n    /**\r\n     * Get the import previous work component id\r\n     * @return the import previous work component id or null\r\n     */\r\n    getImportPreviousWorkComponentId() {\r\n        var importPreviousWorkComponentId = null;\r\n\r\n        if (this.componentContent != null && this.componentContent.importPreviousWorkComponentId != null) {\r\n            var importPreviousWorkComponentId = this.componentContent.importPreviousWorkComponentId;\r\n\r\n            if (importPreviousWorkComponentId == null || importPreviousWorkComponentId == '') {\r\n                /*\r\n                 * check if the component id is in the field that we used to store\r\n                 * the import previous work component id in\r\n                 */\r\n                importPreviousWorkComponentId = this.componentContent.importWorkComponentId;\r\n            }\r\n        }\r\n\r\n        return importPreviousWorkComponentId;\r\n    }\r\n\r\n    /**\r\n     * Add a connected component\r\n     */\r\n    addConnectedComponent() {\r\n\r\n        /*\r\n         * create the new connected component object that will contain a\r\n         * node id and component id\r\n         */\r\n        var newConnectedComponent = {};\r\n        newConnectedComponent.nodeId = this.nodeId;\r\n        newConnectedComponent.componentId = null;\r\n        newConnectedComponent.updateOn = 'change';\r\n\r\n        // initialize the array of connected components if it does not exist yet\r\n        if (this.authoringComponentContent.connectedComponents == null) {\r\n            this.authoringComponentContent.connectedComponents = [];\r\n        }\r\n\r\n        // add the connected component\r\n        this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Delete a connected component\r\n     * @param index the index of the component to delete\r\n     */\r\n    deleteConnectedComponent(index) {\r\n\r\n        if (this.authoringComponentContent.connectedComponents != null) {\r\n            this.authoringComponentContent.connectedComponents.splice(index, 1);\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Set the show submit button value\r\n     * @param show whether to show the submit button\r\n     */\r\n    setShowSubmitButtonValue(show) {\r\n\r\n        if (show == null || show == false) {\r\n            // we are hiding the submit button\r\n            this.authoringComponentContent.showSaveButton = false;\r\n            this.authoringComponentContent.showSubmitButton = false;\r\n        } else {\r\n            // we are showing the submit button\r\n            this.authoringComponentContent.showSaveButton = true;\r\n            this.authoringComponentContent.showSubmitButton = true;\r\n        }\r\n\r\n        /*\r\n         * notify the parent node that this component is changing its\r\n         * showSubmitButton value so that it can show save buttons on the\r\n         * step or sibling components accordingly\r\n         */\r\n        this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\r\n    }\r\n\r\n    /**\r\n     * The showSubmitButton value has changed\r\n     */\r\n    showSubmitButtonValueChanged() {\r\n\r\n        /*\r\n         * perform additional processing for when we change the showSubmitButton\r\n         * value\r\n         */\r\n        this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Make all the cells uneditable\r\n     */\r\n    makeAllCellsUneditable() {\r\n\r\n        // get the table data\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            // loop through all the rows\r\n            for (var r = 0; r < tableData.length; r++) {\r\n                var row = tableData[r];\r\n\r\n                if (row != null) {\r\n\r\n                    // loop through all the cells in the row\r\n                    for (var c = 0; c < row.length; c++) {\r\n\r\n                        // get a cell\r\n                        var cell = row[c];\r\n\r\n                        if (cell != null) {\r\n\r\n                            // make the cell uneditable\r\n                            cell.editable = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Make all the cells edtiable\r\n     */\r\n    makeAllCellsEditable() {\r\n\r\n        // get the table data\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            // loop through all the rows\r\n            for (var r = 0; r < tableData.length; r++) {\r\n                var row = tableData[r];\r\n\r\n                if (row != null) {\r\n\r\n                    // loop through all the cells in the row\r\n                    for (var c = 0; c < row.length; c++) {\r\n\r\n                        // get a cell\r\n                        var cell = row[c];\r\n\r\n                        if (cell != null) {\r\n\r\n                            // make the cell editable\r\n                            cell.editable = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n\r\n    /**\r\n     * Parse the column cell sizes. We will get the column cell sizes by looking\r\n     * at size value of each column in the first row.\r\n     * @param componentContent the component content\r\n     */\r\n    parseColumnCellSizes(componentContent) {\r\n\r\n        var columnCellSizes = {};\r\n\r\n        if (componentContent != null) {\r\n\r\n            // get the table data\r\n            var tableData = componentContent.tableData;\r\n\r\n            if (tableData != null) {\r\n                var firstRow = tableData[0];\r\n\r\n                if (firstRow != null) {\r\n\r\n                    // loop through all the columns\r\n                    for (var x = 0; x < firstRow.length; x++) {\r\n\r\n                        // get the cell object\r\n                        var cell = firstRow[x];\r\n\r\n                        /*\r\n                         * get the cell size and set it into our mapping of\r\n                         * column to cell size\r\n                         */\r\n                        columnCellSizes[x] = cell.size;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return columnCellSizes;\r\n    }\r\n\r\n    /**\r\n     * One of the column cell sizes has changed\r\n     */\r\n    authoringViewColumnSizeChanged(index) {\r\n\r\n        if (index != null) {\r\n            var cellSize = this.columnCellSizes[index];\r\n\r\n            if (cellSize == '') {\r\n                cellSize = null;\r\n            }\r\n\r\n            // set the cell size for all the cells in the column\r\n            this.authoringSetColumnCellSizes(index, cellSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the cell sizes for all the cells in a column\r\n     * @param column the column number\r\n     * @param size the cell size\r\n     */\r\n    authoringSetColumnCellSizes(column, size) {\r\n\r\n        // get the table data\r\n        var tableData = this.authoringComponentContent.tableData;\r\n\r\n        if (tableData != null) {\r\n\r\n            // loop through all the rows\r\n            for (var r = 0; r < tableData.length; r++) {\r\n                var row = tableData[r];\r\n\r\n                if (row != null) {\r\n\r\n                    // get the cell in the column\r\n                    var cell = row[column];\r\n\r\n                    if (cell != null) {\r\n                        // set the cell size\r\n                        cell.size = size;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // the authoring component content has changed so we will save the project\r\n        this.authoringViewComponentChanged();\r\n    }\r\n}\r\n\r\nTableController.$inject = [\r\n    '$anchorScroll',\r\n    '$filter',\r\n    '$injector',\r\n    '$location',\r\n    '$mdDialog',\r\n    '$q',\r\n    '$rootScope',\r\n    '$scope',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NodeService',\r\n    'NotebookService',\r\n    'ProjectService',\r\n    'StudentDataService',\r\n    'TableService',\r\n    'UtilService'\r\n];\r\n\r\nexport default TableController;\r\n"]}