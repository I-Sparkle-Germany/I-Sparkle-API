{"version":3,"sources":["tableService.es6"],"names":["TableService","$filter","StudentDataService","UtilService","$translate","component","id","generateKey","type","prompt","showSaveButton","showSubmitButton","globalCellSize","numRows","numColumns","tableData","componentToCopy","createComponent","componentStateFromOtherComponent","componentState","createComponentState","otherComponentType","componentType","studentData","studentDataCopy","makeCopyOfJSONObject","componentStates","componentEvents","nodeEvents","node","result","length","submitRequired","c","l","isSubmit","componentContent","studentTableData","componentContentTableData","studentRows","r","studentRow","studentCell","getTableDataCellValue","componentContentCell","x","y","table","cellValue","row","cell","text","$inject"],"mappings":"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","file":"tableService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass TableService extends NodeService {\n\n    constructor($filter,\n                StudentDataService,\n                UtilService) {\n        super();\n        this.$filter = $filter;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Get the component type label\n     * example\n     * \"Table\"\n     */\n    getComponentTypeLabel() {\n        return this.$translate('table.componentTypeLabel');\n    }\n\n    /**\n     * Create an Table component object\n     * @returns a new Table component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Table';\n        component.prompt = '';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.globalCellSize = 10;\n        component.numRows = 3;\n        component.numColumns = 3;\n        component.tableData = [\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ]\n        ];\n\n        return component;\n    }\n\n    /**\n     * Copies an existing Table component object\n     * @returns a copied Table component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.globalCellSize = componentToCopy.globalCellSize;\n        component.numRows = componentToCopy.numRows;\n        component.numColumns = componentToCopy.numColumns;\n        component.tableData = componentToCopy.tableData;\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Table') {\n                // the other component is an Table component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (let c = 0, l = componentStates.length; c < l; c++) {\n\n                // the component state\n                let componentState = componentStates[c];\n\n                // get the student data from the component state\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    let tableData = studentData.tableData;\n\n                    if (tableData != null) {\n                        // there is a table data so the component has saved work\n                        // TODO: check for actual student data from the table (compare to starting state)\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Whether this component generates student work\n     * @param component (optional) the component object. if the component object\n     * is not provided, we will use the default value of whether the\n     * component type usually has work.\n     * @return whether this component generates student work\n     */\n    componentHasWork(component) {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a save button\n     * @return whether this component uses a save button\n     */\n    componentUsesSaveButton() {\n        return true;\n    }\n\n    /**\n     * Whether this component uses a submit button\n     * @return whether this component uses a submit button\n     */\n    componentUsesSubmitButton() {\n        return true;\n    }\n\n    /**\n     * Check if the component state has student work. Sometimes a component\n     * state may be created if the student visits a component but doesn't\n     * actually perform any work. This is where we will check if the student\n     * actually performed any work.\n     * @param componentState the component state object\n     * @return whether the component state has any work\n     */\n    componentStateHasStudentWork(componentState, componentContent) {\n\n        if (componentState != null) {\n\n            let studentData = componentState.studentData;\n\n            if (studentData != null) {\n\n                // get the table from the student data\n                let studentTableData = studentData.tableData;\n\n                // get the table from the component content\n                let componentContentTableData = componentContent.tableData;\n\n                if (studentTableData != null) {\n\n                    let studentRows = studentTableData;\n\n                    // loop through the student rows\n                    for (let r = 0; r < studentRows.length; r++) {\n                        let studentRow = studentRows[r];\n\n                        if (studentRow != null) {\n\n                            // loop through the student columns\n                            for (let c = 0; c < studentRow.length; c++) {\n\n                                // get cell from the student\n                                let studentCell = this.getTableDataCellValue(r, c, studentTableData);\n\n                                // get a cell from the component content\n                                let componentContentCell = this.getTableDataCellValue(r, c, componentContentTableData);\n\n                                if (studentCell !== componentContentCell) {\n                                    /*\n                                     * the cell values are not the same which means\n                                     * the student has changed the table\n                                     */\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the value of a cell in the table\n     * @param x the x coordinate\n     * @param y the y coordinate\n     * @param table (optional) table data to get the value from. this is used\n     * when we want to look up the value in the default authored table\n     * @returns the cell value (text or a number)\n     */\n    getTableDataCellValue(x, y, table) {\n\n        var cellValue = null;\n\n        if (table != null) {\n\n            // get the row we want\n            var row = table[y];\n\n            if (row != null) {\n\n                // get the cell we want\n                var cell = row[x];\n\n                if (cell != null) {\n\n                    // set the value into the cell\n                    cellValue = cell.text;\n                }\n            }\n        }\n\n        return cellValue;\n    }\n}\n\nTableService.$inject = [\n    '$filter',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default TableService;\n"]}