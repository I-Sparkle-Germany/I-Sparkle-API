{"version":3,"sources":["tableService.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAEM,YAAY;cAAZ,YAAY;;AACd,aADE,YAAY,CACF,kBAAkB,EAAE;8BAD9B,YAAY;;2EAAZ,YAAY;;AAGV,cAAK,kBAAkB,GAAG,kBAAkB,CAAC;;KAChD;;iBAJC,YAAY;;qCAMD,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,cAAc,EAAE,eAAe,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE;AAClH,gBAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,gBAAI,YAAY,KAAK,kBAAkB,EAAE;AACrC,sBAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;aAClD;;AAED,mBAAO,MAAM,CAAC;SACjB;;;6CAEoB,SAAS,EAAE;AAC5B,gBAAI,iBAAiB,GAAG,IAAI,CAAC;;AAE7B,gBAAI,SAAS,IAAI,IAAI,EAAE;AACnB,oBAAI,QAAQ,GAAG,SAAS,CAAC,WAAW,CAAC;;AAErC,oBAAI,QAAQ,IAAI,IAAI,EAAE;AAClB,qCAAiB,GAAG,KAAK,GAAG,QAAQ,GAAG,MAAM,CAAC;iBACjD;aACJ;;AAED,mBAAO,iBAAiB,CAAC;SAC5B;;;;;;;;;;+CAQsB,gCAAgC,EAAE;AACrD,gBAAI,cAAc,GAAG,IAAI,CAAC;;AAE1B,gBAAI,gCAAgC,IAAI,IAAI,EAAE;;;AAG1C,8BAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;;;AAAC,AAGhE,oBAAI,kBAAkB,GAAG,gCAAgC,CAAC,aAAa,CAAC;;AAExE,oBAAI,kBAAkB,KAAK,OAAO,EAAE;;;;AAIhC,wBAAI,WAAW,GAAG,gCAAgC,CAAC,WAAW;;;AAAC,AAG/D,wBAAI,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,WAAW,CAAC;;;AAAC,AAGhF,kCAAc,CAAC,WAAW,GAAG,eAAe,CAAC;iBAChD;aACJ;;AAED,mBAAO,cAAc,CAAC;SACzB;;;;;;;;;;;;oCAUW,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE,UAAU,EAAE;AACjE,gBAAI,MAAM,GAAG,KAAK,CAAC;;AAEnB,gBAAI,eAAe,IAAI,IAAI,EAAE;;;AAGzB,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;;AAG7C,wBAAI,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC;;;AAAC,AAGxC,wBAAI,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;;AAE7C,wBAAI,WAAW,IAAI,IAAI,EAAE;AACrB,4BAAI,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;;AAEtC,4BAAI,SAAS,IAAI,IAAI,EAAE;;AAEnB,kCAAM,GAAG,IAAI,CAAC;AACd,kCAAM;yBACT;qBACJ;iBACJ;aACJ;;AAED,mBAAO,MAAM,CAAC;SACjB;;;WAnGC,YAAY;;;AAsGlB,YAAY,CAAC,OAAO,GAAG,CAAC,oBAAoB,CAAC,CAAC;;kBAE/B,YAAY","file":"tableService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass TableService extends NodeService {\n    constructor(StudentDataService) {\n        super();\n        this.StudentDataService = StudentDataService;\n    }\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'wordCountCompare') {\n            result = this.wordCountCompare(functionParams);\n        }\n\n        return result;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.studentData;\n\n            if (response != null) {\n                studentWorkAsHTML = '<p>' + response + '</p>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Table') {\n                // the other component is an Table component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var tableData = studentData.tableData;\n\n                    if (tableData != null) {\n                        // there is table data so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nTableService.$inject = ['StudentDataService'];\n\nexport default TableService;"]}