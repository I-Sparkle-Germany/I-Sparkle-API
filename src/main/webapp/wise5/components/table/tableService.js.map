{"version":3,"sources":["tableService.es6"],"names":[],"mappings":"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","file":"tableService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass TableService extends NodeService {\n\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create an Table component object\n     * @returns a new Table component object\n     */\n    createComponent() {\n\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Table';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.globalCellSize = 10;\n        component.numRows = 3;\n        component.numColumns = 3;\n        component.tableData = [\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ]\n        ];\n\n        return component;\n    }\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        return null;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.studentData;\n\n            if (response != null) {\n                studentWorkAsHTML = '<p>' + response + '</p>';\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Table') {\n                // the other component is an Table component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.StudentDataService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // the component state\n                var componentState = componentStates[c];\n\n                // get the student data from the component state\n                var studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    var tableData = studentData.tableData;\n\n                    if (tableData != null) {\n                        // there is table data so the component is completed\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nTableService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default TableService;"]}