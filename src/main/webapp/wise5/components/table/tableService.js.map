{"version":3,"sources":["tableService.es6"],"names":[],"mappings":"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","file":"tableService.js","sourcesContent":["import NodeService from '../../services/nodeService';\n\nclass TableService extends NodeService {\n\n    constructor(StudentDataService,\n                UtilService) {\n        super();\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n    }\n\n    /**\n     * Create an Table component object\n     * @returns a new Table component object\n     */\n    createComponent() {\n        var component = {};\n        component.id = this.UtilService.generateKey();\n        component.type = 'Table';\n        component.showSaveButton = false;\n        component.showSubmitButton = false;\n        component.globalCellSize = 10;\n        component.numRows = 3;\n        component.numColumns = 3;\n        component.tableData = [\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ],\n            [\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                },\n                {\n                    \"text\": \"\",\n                    \"editable\": true,\n                    \"size\": null\n                }\n            ]\n        ];\n\n        return component;\n    }\n\n    /**\n     * Copies an existing Table component object\n     * @returns a copied Table component object\n     */\n    copyComponent(componentToCopy) {\n        var component = this.createComponent();\n        component.prompt = componentToCopy.prompt;\n        component.showSaveButton = componentToCopy.showSaveButton;\n        component.showSubmitButton = componentToCopy.showSubmitButton;\n        component.globalCellSize = componentToCopy.globalCellSize;\n        component.numRows = componentToCopy.numRows;\n        component.numColumns = componentToCopy.numColumns;\n        component.tableData = componentToCopy.tableData;\n        return component;\n    }\n\n    /**\n     * Populate a component state with the data from another component state\n     * @param componentStateFromOtherComponent the component state to obtain the data from\n     * @return a new component state that contains the student data from the other\n     * component state\n     */\n    populateComponentState(componentStateFromOtherComponent) {\n        var componentState = null;\n\n        if (componentStateFromOtherComponent != null) {\n\n            // create an empty component state\n            componentState = this.StudentDataService.createComponentState();\n\n            // get the component type of the other component state\n            var otherComponentType = componentStateFromOtherComponent.componentType;\n\n            if (otherComponentType === 'Table') {\n                // the other component is an Table component\n\n                // get the student data from the other component state\n                var studentData = componentStateFromOtherComponent.studentData;\n\n                // create a copy of the student data\n                var studentDataCopy = this.UtilService.makeCopyOfJSONObject(studentData);\n\n                // set the student data into the new component state\n                componentState.studentData = studentDataCopy;\n            }\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Check if the component was completed\n     * @param component the component object\n     * @param componentStates the component states for the specific component\n     * @param componentEvents the events for the specific component\n     * @param nodeEvents the events for the parent node of the component\n     * @param node parent node of the component\n     * @returns whether the component was completed\n     */\n    isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n        let result = false;\n\n        if (componentStates && componentStates.length) {\n            let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n            // loop through all the component states\n            for (let c = 0, l = componentStates.length; c < l; c++) {\n\n                // the component state\n                let componentState = componentStates[c];\n\n                // get the student data from the component state\n                let studentData = componentState.studentData;\n\n                if (studentData != null) {\n                    let tableData = studentData.tableData;\n\n                    if (tableData != null) {\n                        // there is a table data so the component has saved work\n                        // TODO: check for actual student data from the table (compare to starting state)\n                        if (submitRequired) {\n                            // completion requires a submission, so check for isSubmit\n                            if (componentState.isSubmit) {\n                                result = true;\n                                break;\n                            }\n                        } else {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}\n\nTableService.$inject = [\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default TableService;\n"]}