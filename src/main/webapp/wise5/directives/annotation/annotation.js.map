{"version":3,"sources":["annotation.es6"],"names":["AnnotationController","$scope","$element","$attrs","AnnotationService","ConfigService","ProjectService","UtilService","component","value","runId","getRunId","nodeId","componentId","getComponentByNodeIdAndComponentId","gradingMaxScore","maxScore","mode","annotation","annotationParams","fromWorkgroupId","toWorkgroupId","type","studentWorkId","componentStateId","notebookItemId","getLatestAnnotation","data","dataJSONObject","angular","fromJson","active","getAnnotation","annotationId","id","toUserInfo","getUserInfoByWorkgroupId","periodId","clientSaveTime","Date","getTime","convertStringToNumber","createAnnotation","localNotebookItemId","saveAnnotation","then","localAnnotation","result","$inject","Annotation","bindings","templateUrl","controller","controllerAs"],"mappings":"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","file":"annotation.js","sourcesContent":["'use strict';\n\nclass AnnotationController {\n    constructor($scope,\n                $element,\n                $attrs,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.component = null;\n        this.value = null;\n\n        this.runId = ConfigService.getRunId();\n\n        if (this.nodeId != null && this.componentId != null) {\n            // get the component\n            this.component = this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, this.componentId);\n            if (this.component) {\n                this.gradingMaxScore = this.component.maxScore;\n            }\n        }\n\n        if (this.mode === 'student') {\n\n            if (!this.annotation) {\n                let annotationParams = {};\n                annotationParams.nodeId = this.nodeId;\n                annotationParams.componentId = this.componentId;\n                annotationParams.fromWorkgroupId = this.fromWorkgroupId;\n                annotationParams.toWorkgroupId = this.toWorkgroupId;\n                annotationParams.type = this.type;\n                annotationParams.studentWorkId = this.componentStateId;\n                annotationParams.notebookItemId = this.notebookItemId;\n\n                // get the latest annotation that matches the params\n                this.annotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n            }\n\n            if (this.annotation != null) {\n                let data = this.annotation.data;\n                let dataJSONObject = angular.fromJson(data);\n\n                if (dataJSONObject) {\n                    this.value = dataJSONObject.value;\n                }\n            }\n        } else if (this.mode === 'grading') {\n\n            let annotationParams = {};\n            annotationParams.nodeId = this.nodeId;\n            annotationParams.componentId = this.componentId;\n            annotationParams.fromWorkgroupId = this.fromWorkgroupId;\n            annotationParams.toWorkgroupId = this.toWorkgroupId;\n            annotationParams.type = this.type;\n            annotationParams.studentWorkId = this.componentStateId;\n            annotationParams.notebookItemId = this.notebookItemId;\n\n            if (this.active) {\n                /*\n                 * this directive instance is the active annotation that the teacher can use to\n                 * grade so we will get the latest annotation for the student work\n                 */\n                this.annotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n            } else {\n                /*\n                 * this directive instance is not the active annotation so we will get the\n                 * annotation directly associated with the student work\n                 */\n                this.annotation = this.AnnotationService.getAnnotation(annotationParams);\n            }\n\n            if (this.annotation != null) {\n                if (this.componentStateId == this.annotation.studentWorkId) {\n                    /*\n                     * the annotation is for the component state that is being displayed.\n                     * sometimes the annotation may not be for the component state that\n                     * is being displayed which can happen when student submits work,\n                     * the teacher annotates it, and then the student submits new work.\n                     * when this happens, we will show the teacher annotation but the\n                     * annotation is associated with the first student work and not the\n                     * second student work. setting the annotationId in the scope will\n                     * cause the server to update the annotation as opposed to creating\n                     * a new annotation row in the database.\n                     */\n                    this.annotationId = this.annotation.id;\n                }\n            }\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n\n            if (toUserInfo != null) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n\n            if (this.annotation != null) {\n\n                if (this.annotation.data != null) {\n                    this.value = this.annotation.data.value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Save the annotation to the server\n     */\n    postAnnotation() {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null &&\n            this.fromWorkgroupId != null &&\n            this.toWorkgroupId != null &&\n            this.type != null &&\n            this.value != null) {\n\n            // get the current time\n            let clientSaveTime = new Date().getTime();\n\n            // get the value\n            let value = this.value;\n\n            // convert the value to a number if possible\n            value = this.UtilService.convertStringToNumber(value);\n\n            let data = {\n                value: value\n            };\n\n            // create the annotation object\n            let annotation = this.AnnotationService.createAnnotation(\n                this.annotationId,\n                this.runId,\n                this.periodId,\n                this.fromWorkgroupId,\n                this.toWorkgroupId,\n                this.nodeId,\n                this.componentId,\n                this.componentStateId,\n                this.localNotebookItemId,\n                this.notebookItemId,\n                this.type,\n                data,\n                clientSaveTime);\n\n            // save the annotation to the server\n            this.AnnotationService.saveAnnotation(annotation).then(result => {\n                var localAnnotation = result;\n\n                if (localAnnotation != null) {\n                    if (this.annotationId == null) {\n                        // set the annotation id if there was no annotation id\n                        this.annotationId = localAnnotation.id;\n                    }\n                }\n            });\n        }\n    };\n}\n\nAnnotationController.$inject = [\n    '$scope',\n    '$element',\n    '$attrs',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nconst Annotation = {\n    bindings: {\n        annotation: '<',\n        type: '@',\n        mode: '<',\n        nodeId: '<',\n        componentId: '<',\n        fromWorkgroupId: '<',\n        toWorkgroupId: '<',\n        componentStateId: '<',\n        notebookItemId: '<',\n        active: '<',\n        maxScore: '<'\n    },\n    templateUrl: 'wise5/directives/annotation/annotation.html',\n    controller: AnnotationController,\n    controllerAs: 'annotationController'\n};\n\nexport default Annotation;\n"]}