{"version":3,"sources":["annotationController.es6"],"names":[],"mappings":"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","file":"annotationController.js","sourcesContent":["'use strict';\n\nclass AnnotationController {\n    constructor($scope,\n                $element,\n                $attrs,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.component = null;\n        this.value = null;\n\n        this.runId = ConfigService.getRunId();\n\n        if (this.nodeId != null && this.componentId != null) {\n            // get the component\n            this.component = this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, this.componentId);\n            if (this.component) {\n                this.gradingMaxScore = this.component.maxScore;\n            }\n        }\n\n        if (this.mode === 'student') {\n\n            if (!this.annotation) {\n                let annotationParams = {};\n                annotationParams.nodeId = this.nodeId;\n                annotationParams.componentId = this.componentId;\n                annotationParams.fromWorkgroupId = this.fromWorkgroupId;\n                annotationParams.toWorkgroupId = this.toWorkgroupId;\n                annotationParams.type = this.type;\n                annotationParams.studentWorkId = this.componentStateId;\n\n                // get the latest annotation that matches the params\n                this.annotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n            }\n\n            if (this.annotation != null) {\n                let data = this.annotation.data;\n                let dataJSONObject = angular.fromJson(data);\n\n                if (dataJSONObject) {\n                    this.value = dataJSONObject.value;\n                }\n            }\n        } else if (this.mode === 'grading') {\n\n            let annotationParams = {};\n            annotationParams.nodeId = this.nodeId;\n            annotationParams.componentId = this.componentId;\n            annotationParams.fromWorkgroupId = this.fromWorkgroupId;\n            annotationParams.toWorkgroupId = this.toWorkgroupId;\n            annotationParams.type = this.type;\n            annotationParams.studentWorkId = this.componentStateId;\n\n            if (this.active) {\n                /*\n                 * this directive instance is the active annotation that the teacher can use to\n                 * grade so we will get the latest annotation for the student work\n                 */\n                this.annotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n            } else {\n                /*\n                 * this directive instance is not the active annotation so we will get the\n                 * annotation directly associated with the student work\n                 */\n                this.annotation = this.AnnotationService.getAnnotation(annotationParams);\n            }\n\n            if (this.annotation != null) {\n                if (this.componentStateId == this.annotation.studentWorkId) {\n                    /*\n                     * the annotation is for the component state that is being displayed.\n                     * sometimes the annotation may not be for the component state that\n                     * is being displayed which can happen when student submits work,\n                     * the teacher annotates it, and then the student submits new work.\n                     * when this happens, we will show the teacher annotation but the\n                     * annotation is associated with the first student work and not the\n                     * second student work. setting the annotationId in the scope will\n                     * cause the server to update the annotation as opposed to creating\n                     * a new annotation row in the database.\n                     */\n                    this.annotationId = this.annotation.id;\n                }\n            }\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n\n            if (toUserInfo != null) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n\n            if (this.annotation != null) {\n\n                if (this.annotation.data != null) {\n                    this.value = this.annotation.data.value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Save the annotation to the server\n     */\n    postAnnotation() {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null &&\n            this.fromWorkgroupId != null &&\n            this.toWorkgroupId != null &&\n            this.type != null &&\n            this.value != null) {\n\n            // get the current time\n            let clientSaveTime = new Date().getTime();\n\n            // get the value\n            let value = this.value;\n\n            // convert the value to a number if possible\n            value = this.UtilService.convertStringToNumber(value);\n\n            let data = {};\n            data.value = value;\n\n            // create the annotation object\n            let annotation = this.AnnotationService.createAnnotation(\n                this.annotationId,\n                this.runId,\n                this.periodId,\n                this.fromWorkgroupId,\n                this.toWorkgroupId,\n                this.nodeId,\n                this.componentId,\n                this.componentStateId,\n                this.type,\n                data,\n                clientSaveTime);\n\n            // save the annotation to the server\n            this.AnnotationService.saveAnnotation(annotation).then(result => {\n                var localAnnotation = result;\n\n                if (localAnnotation != null) {\n                    if (this.annotationId == null) {\n                        // set the annotation id if there was no annotation id\n                        this.annotationId = localAnnotation.id;\n                    }\n                }\n            });\n        }\n    };\n}\n\nAnnotationController.$inject = [\n    '$scope',\n    '$element',\n    '$attrs',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default AnnotationController;\n"]}