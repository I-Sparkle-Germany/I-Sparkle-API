{"version":3,"sources":["component.es6"],"names":["ComponentController","$injector","$scope","$compile","$element","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","UtilService","mode","$on","event","$eventArgs","imageElement","target","imageObject","getImageObjectFromImageElement","addNote","workgroupId","parseInt","e","teacherWorkgroupId","componentState","getLatestComponentStateByNodeIdAndComponentId","nodeId","componentId","angular","fromJson","authoringComponentContent","getComponentByNodeIdAndComponentId","componentContent","injectAssetPaths","replaceStudentNames","isNotebookEnabled","injectClickToSnipImage","authoringComponentContentJSONString","toJson","nodeAuthoringController","$parent","componentTemplatePath","getComponentAuthoringTemplatePath","type","getComponentTemplatePath","nodeController","componentHTML","html","contents","$inject","Component","bindings","scope","controller"],"mappings":"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","file":"component.js","sourcesContent":["\nclass ComponentController {\n    constructor($injector, $scope, $compile, $element, ConfigService, NodeService, NotebookService, ProjectService, StudentDataService, UtilService) {\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        if (this.mode) {\n            $scope.mode = this.mode;\n        } else {\n            $scope.mode = \"student\";\n        }\n\n        /**\n         * Snip an image from the VLE\n         * @param $event the click event from the student clicking on the image\n         */\n        $scope.$on(\"snipImage\", (event, $eventArgs) => {\n            // get the target that was clicked\n            var imageElement = $eventArgs.target;\n\n            if (imageElement != null) {\n\n                // create an image object\n                var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n\n                if (imageObject != null) {\n\n                    // create a notebook item with the image populated into it\n                    this.NotebookService.addNote($eventArgs, imageObject);\n                }\n            }\n        });\n\n        if (this.workgroupId != null) {\n            try {\n                this.workgroupId = parseInt(this.workgroupId);\n            } catch(e) {\n\n            }\n        }\n\n        if (this.teacherWorkgroupId) {\n            try {\n                this.teacherWorkgroupId = parseInt(this.teacherWorkgroupId);\n            } catch(e) {\n\n            }\n        }\n\n        if (this.componentState == null || this.componentState === '') {\n            this.componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n        } else {\n            this.componentState = angular.fromJson(this.componentState);\n            this.nodeId = this.componentState.nodeId;\n            this.componentId = this.componentState.componentId;\n\n        }\n\n        var authoringComponentContent = this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, this.componentId);\n        var componentContent = this.ProjectService.injectAssetPaths(authoringComponentContent);\n\n        // replace any student names in the component content\n        componentContent = this.ConfigService.replaceStudentNames(componentContent);\n\n        if (this.NotebookService.isNotebookEnabled()) {\n            // inject the click attribute that will snip the image when the image is clicked\n            componentContent = this.ProjectService.injectClickToSnipImage(componentContent);\n        }\n\n        if ($scope.mode === 'authoring') {\n            $scope.authoringComponentContent = authoringComponentContent;\n            $scope.authoringComponentContentJSONString = angular.toJson($scope.authoringComponentContent, 4);\n            $scope.nodeAuthoringController = $scope.$parent.nodeAuthoringController;\n            $scope.componentTemplatePath = this.NodeService.getComponentAuthoringTemplatePath(componentContent.type);\n        } else {\n            $scope.componentTemplatePath = this.NodeService.getComponentTemplatePath(componentContent.type);\n        }\n\n        $scope.componentContent = componentContent;\n        $scope.componentState = this.componentState;\n        $scope.nodeId = this.nodeId;\n        $scope.workgroupId = this.workgroupId;\n        $scope.teacherWorkgroupId = this.teacherWorkgroupId;\n        $scope.type = componentContent.type;\n        $scope.nodeController = $scope.$parent.nodeController;\n\n        var componentHTML =\n            `<div class=\"component__wrapper\">\n                <div ng-include=\"componentTemplatePath\" class=\"component__content component__content--{{type}}\"></div>\n            </div>`;\n\n        if (componentHTML != null) {\n            $element.html(componentHTML);\n            this.$compile($element.contents())($scope);\n        }\n    }\n}\n\nComponentController.$inject = ['$injector', '$scope', '$compile', '$element', 'ConfigService', 'NodeService', 'NotebookService', 'ProjectService', 'StudentDataService', 'UtilService'];\n\nconst Component = {\n    bindings: {\n        componentContent: '@',\n        componentId: '@',\n        componentState: '@',\n        mode: '@',\n        nodeId: '@',\n        teacherWorkgroupId: '@',\n        workgroupId: '@'\n    },\n    scope: true,\n    controller: ComponentController\n};\n\nexport default Component;\n"]}