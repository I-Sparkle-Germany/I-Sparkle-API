{"version":3,"sources":["componentAnnotations.es6"],"names":["ComponentAnnotationsController","$scope","$element","$filter","$mdDialog","$timeout","ConfigService","ProjectService","StudentDataService","$translate","maxScoreDisplay","parseInt","maxScore","themeSettings","getThemeSettings","hideComponentScores","nodeId","componentId","latestAnnotationTime","isNew","label","icon","showScore","showComment","$on","event","args","studentWork","$onChanges","changes","processAnnotations","hide","latest","annotations","comment","score","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestAnnotation","time","convertToClientTimestamp","nodeEvents","getEventsByNodeId","n","length","visitTime","i","latestState","getLatestComponentStateByNodeIdAndComponentId","saveTime","latestVisitTime","getLatestVisitTime","latestSaveTime","getLatestSaveTime","getLatestAnnotationTime","type","displayAnnotation","setLabelAndIcon","$inject","ComponentAnnotations","bindings","templateUrl","controller","controllerAs"],"mappings":"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","file":"componentAnnotations.js","sourcesContent":["'use strict';\r\n\r\nclass ComponentAnnotationsController {\r\n    constructor($scope,\r\n                $element,   // TODO remove after verifying that this is not being used\r\n                $filter,\r\n                $mdDialog,\r\n                $timeout,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentDataService) {\r\n        this.$scope = $scope;\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentDataService = StudentDataService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.maxScoreDisplay = (parseInt(this.maxScore) > 0) ? '/' + this.maxScore : '';\r\n\r\n        this.themeSettings = this.ProjectService.getThemeSettings();\r\n        this.hideComponentScores = this.themeSettings.hideComponentScores;\r\n\r\n        this.nodeId = null;\r\n        this.componentId = null;\r\n\r\n        // the latest annoation time\r\n        this.latestAnnotationTime = null;\r\n\r\n        // whether the annotation is new or not\r\n        this.isNew = false;\r\n\r\n        // the annotation label\r\n        this.label = '';\r\n\r\n        // the avatar icon (default to person/teacher)\r\n        this.icon = 'person';\r\n\r\n        this.showScore = true;\r\n        this.showComment = true;\r\n\r\n        // watch for new component states\r\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\r\n            let nodeId = args.studentWork.nodeId;\r\n            let componentId = args.studentWork.componentId;\r\n            if (nodeId === this.nodeId && componentId === this.componentId) {\r\n                this.isNew = false;\r\n            }\r\n        });\r\n\r\n        /* used to pop up annotation\r\n        $timeout(() => {\r\n            this.$mdDialog.show({\r\n                contentElement: '#componentAnnotationsCard',\r\n                parent: angular.element(document.body)\r\n            });\r\n        });\r\n        */\r\n\r\n        /* uncomment me and use me instead of timeout when we switch to angular 2\r\n        this.$onAfterViewInit = () => {\r\n            this.$mdDialog.show({\r\n                contentElement: '#componentAnnotationsCard',\r\n                parent: angular.element(document.body)\r\n            });\r\n        };\r\n        */\r\n\r\n        this.$onChanges = (changes) => {\r\n            //if (changes.annotations) {\r\n                //this.annotations = angular.copy(changes.annotations.currentValue);\r\n                this.processAnnotations();\r\n            //}\r\n        };\r\n    }\r\n\r\n    closeDialog() {\r\n        this.$mdDialog.hide();\r\n    }\r\n\r\n    /**\r\n     * Get the most recent annotation (from the current score and comment annotations)\r\n     * @return Object (latest annotation)\r\n     */\r\n    getLatestAnnotation() {\r\n        let latest = null;\r\n\r\n        if (this.annotations.comment || this.annotations.score) {\r\n            let commentSaveTime = this.annotations.comment ? this.annotations.comment.serverSaveTime : 0;\r\n            let scoreSaveTime = this.annotations.score ? this.annotations.score.serverSaveTime : 0;\r\n\r\n            if (commentSaveTime >= scoreSaveTime) {\r\n                latest = this.annotations.comment;\r\n            } else if (scoreSaveTime > commentSaveTime) {\r\n                latest = this.annotations.score;\r\n            }\r\n        }\r\n\r\n        return latest;\r\n    };\r\n\r\n    /**\r\n     * Calculate the save time of the latest annotation\r\n     * @return Number (latest annotation post time)\r\n     */\r\n    getLatestAnnotationTime() {\r\n        let latest = this.getLatestAnnotation();\r\n        let time = null;\r\n\r\n        if (latest) {\r\n            let serverSaveTime = latest.serverSaveTime;\r\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\r\n        }\r\n\r\n        return time;\r\n    };\r\n\r\n    /**\r\n     * Find nodeExited time of the latest node visit for this component\r\n     * @return Number (latest node exit time)\r\n     */\r\n    getLatestVisitTime() {\r\n        let nodeEvents = this.StudentDataService.getEventsByNodeId(this.nodeId);\r\n        let n = nodeEvents.length - 1;\r\n        let visitTime = null;\r\n\r\n        for (let i = n; i > 0; i--) {\r\n            let event = nodeEvents[i];\r\n            if (event.event === 'nodeExited') {\r\n                visitTime = this.ConfigService.convertToClientTimestamp(event.serverSaveTime);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return visitTime;\r\n    };\r\n\r\n    /**\r\n     * Find and the latest save time for this component\r\n     * @return Number (latest save time)\r\n     */\r\n    getLatestSaveTime() {\r\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\r\n        let saveTime = null;\r\n\r\n        if (latestState) {\r\n            saveTime = this.ConfigService.convertToClientTimestamp(latestState.serverSaveTime);\r\n        }\r\n\r\n        return saveTime;\r\n    };\r\n\r\n    /**\r\n     * Check whether the current annotation for this component is new to the\r\n     * workgroup (i.e. if the workgroup hasn't seen the annotation on a previous\r\n     * node visit and the latest annotation came after the latest component state)\r\n     * @return Boolean (true or false)\r\n     */\r\n    isNewAnnotation() {\r\n        let latestVisitTime = this.getLatestVisitTime();\r\n        let latestSaveTime = this.getLatestSaveTime();\r\n        let latestAnnotationTime = this.getLatestAnnotationTime();\r\n        let isNew = true;\r\n\r\n        if (latestVisitTime && (latestVisitTime > latestAnnotationTime)) {\r\n            isNew = false;\r\n        }\r\n\r\n        if (latestSaveTime && (latestSaveTime > latestAnnotationTime)) {\r\n            isNew = false;\r\n        }\r\n\r\n        return isNew;\r\n    };\r\n\r\n    /**\r\n     * Set the label based on whether this is an automated or teacher annotation\r\n     **/\r\n    setLabelAndIcon() {\r\n        let latest = this.getLatestAnnotation();\r\n\r\n        if (latest) {\r\n            if (latest.type === 'autoComment' || latest.type === 'autoScore') {\r\n                this.label = this.$translate('automatedFeedbackLabel');\r\n                this.icon = 'keyboard';\r\n            } else {\r\n                this.label = this.$translate('teacherFeedbackLabel');\r\n                this.icon = \"person\";\r\n            }\r\n        }\r\n    };\r\n\r\n    processAnnotations() {\r\n        if (this.annotations != null) {\r\n            if (this.annotations.comment || this.annotations.score) {\r\n                this.nodeId = this.annotations.comment ? this.annotations.comment.nodeId : this.annotations.score.nodeId;\r\n                this.componentId = this.annotations.comment ? this.annotations.comment.componentId : this.annotations.score.nodeId;\r\n\r\n                if (!this.ProjectService.displayAnnotation(this.annotations.score)) {\r\n                    // we do not want to show the score\r\n                    this.showScore = false;\r\n                } else {\r\n                    this.showScore = true;\r\n\r\n                }\r\n\r\n                if (!this.ProjectService.displayAnnotation(this.annotations.comment)) {\r\n                    // we do not want to show the comment\r\n                    this.showComment = false;\r\n                } else {\r\n                    this.showComment = true;\r\n                }\r\n\r\n                // set the annotation label and icon\r\n                this.setLabelAndIcon();\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nComponentAnnotationsController.$inject = [\r\n    '$scope',\r\n    '$element',\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$timeout',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentDataService'\r\n];\r\n\r\nconst ComponentAnnotations = {\r\n    bindings: {\r\n        annotations: '<',\r\n        maxScore: '<'\r\n    },\r\n    templateUrl: 'wise5/directives/componentAnnotations/componentAnnotations.html',\r\n    controller: ComponentAnnotationsController,\r\n    controllerAs: 'componentAnnotationsCtrl'\r\n};\r\n\r\nexport default ComponentAnnotations;\r\n"]}