{"version":3,"sources":["componentAnnotationsController.es6"],"names":[],"mappings":"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","file":"componentAnnotationsController.js","sourcesContent":["'use strict';\n\nclass ComponentAnnotationsController {\n    constructor($scope,\n                $element,\n                $translate,\n                ConfigService,\n                ProjectService,\n                StudentDataService) {\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.maxScoreDisplay = (parseInt(this.maxScore) > 0) ? '/' + this.maxScore : '';\n\n        this.themeSettings = this.ProjectService.getThemeSettings();\n        this.hideComponentScores = this.themeSettings.hideComponentScores;\n\n        this.nodeId = null;\n        this.componentId = null;\n\n        // the latest annoation time\n        this.latestAnnotationTime = null;\n\n        // whether the annotation is new or not\n        this.isNew = false;\n\n        // the annotation label\n        this.label = '';\n\n        // the avatar icon (default to person/teacher)\n        this.icon = 'person';\n\n        // watch for new component states\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n            let nodeId = args.studentWork.nodeId;\n            let componentId = args.studentWork.componentId;\n            if (nodeId === this.nodeId && componentId === this.componentId) {\n                this.isNew = false;\n            }\n        });\n\n        this.$onChanges = (changes) => {\n            this.processAnnotations();\n        };\n    }\n\n    /**\n     * Get the most recent annotation (from the current score and comment annotations)\n     * @return Object (latest annotation)\n     */\n    getLatestAnnotation() {\n        let latest = null;\n\n        if (this.commentAnnotation || this.scoreAnnotation) {\n            let commentSaveTime = this.commentAnnotation ? this.commentAnnotation.serverSaveTime : 0;\n            let scoreSaveTime = this.scoreAnnotation ? this.scoreAnnotation.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latest = this.commentAnnotation;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latest = this.scoreAnnotation;\n            }\n        }\n\n        return latest;\n    };\n\n    /**\n     * Calculate the save time of the latest annotation\n     * @return Number (latest annotation post time)\n     */\n    getLatestAnnotationTime() {\n        let latest = this.getLatestAnnotation();\n        let time = null;\n\n        if (latest) {\n            let serverSaveTime = latest.serverSaveTime;\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n        }\n\n        return time;\n    };\n\n    /**\n     * Find nodeExited time of the latest node visit for this component\n     * @return Number (latest node exit time)\n     */\n    getLatestVisitTime() {\n        let nodeEvents = this.StudentDataService.getEventsByNodeId(this.nodeId);\n        let n = nodeEvents.length - 1;\n        let visitTime = null;\n\n        for (let i = n; i > 0; i--) {\n            let event = nodeEvents[i];\n            if (event.event === 'nodeExited') {\n                visitTime = this.ConfigService.convertToClientTimestamp(event.serverSaveTime);\n                break;\n            }\n        }\n\n        return visitTime;\n    };\n\n    /**\n     * Find and the latest save time for this component\n     * @return Number (latest save time)\n     */\n    getLatestSaveTime() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n        let saveTime = null;\n\n        if (latestState) {\n            saveTime = this.ConfigService.convertToClientTimestamp(latestState.serverSaveTime);\n        }\n\n        return saveTime;\n    };\n\n    /**\n     * Check whether the current annotation for this component is new to the\n     * workgroup (i.e. if the workgroup hasn't seen the annotation on a previous\n     * node visit and the latest annotation came after the latest component state)\n     * @return Boolean (true or false)\n     */\n    isNewAnnotation() {\n        let latestVisitTime = this.getLatestVisitTime();\n        let latestSaveTime = this.getLatestSaveTime();\n        let latestAnnotationTime = this.getLatestAnnotationTime();\n        let isNew = true;\n\n        if (latestVisitTime && (latestVisitTime > latestAnnotationTime)) {\n            isNew = false;\n        }\n\n        if (latestSaveTime && (latestSaveTime > latestAnnotationTime)) {\n            isNew = false;\n        }\n\n        return isNew;\n    };\n\n    /**\n     * Set the label based on whether this is an automated or teacher annotation\n     **/\n    setLabelAndIcon() {\n        let latest = this.getLatestAnnotation();\n\n        if (latest) {\n            if (latest.type === 'autoComment' || latest.type === 'autoScore') {\n                this.$translate(['automatedFeedbackLabel']).then((translations) => {\n                    this.label = translations.automatedFeedbackLabel;\n                    this.icon = 'keyboard';\n                });\n            } else {\n                this.$translate(['teacherFeedbackLabel']).then((translations) => {\n                    this.label = translations.teacherFeedbackLabel;\n                    this.icon = \"person\";\n                });\n            }\n        }\n    };\n\n    processAnnotations() {\n        if (this.commentAnnotation || this.scoreAnnotation) {\n            this.nodeId = this.commentAnnotation ? this.commentAnnotation.nodeId : this.scoreAnnotation.nodeId;\n            this.componentId = this.commentAnnotation ? this.commentAnnotation.componentId : this.scoreAnnotation.nodeId;\n\n            // set the latest annotation time\n            //this.latestAnnotationTime = this.getLatestAnnotationTime();\n\n            // set whether the annotation is new or not\n            //this.isNew = this.isNewAnnotation();\n\n            // set the annotation label and icon\n            this.setLabelAndIcon();\n        }\n    };\n}\n\nComponentAnnotationsController.$inject = [\n    '$scope',\n    '$element',\n    '$translate',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default ComponentAnnotationsController;\n"]}