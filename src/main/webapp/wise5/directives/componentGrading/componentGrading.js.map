{"version":3,"sources":["componentGrading.es6"],"names":["ComponentGradingController","$scope","$translate","AnnotationService","ConfigService","TeacherDataService","UtilService","$onInit","runId","getRunId","toUserInfo","getUserInfoByWorkgroupId","toWorkgroupId","periodId","$onChanges","changes","maxScore","hasMaxScore","componentStates","getComponentStatesByWorkgroupIdAndComponentId","componentId","latestComponentStateTime","getLatestComponentStateTime","processAnnotations","$on","event","args","annotation","annotationNodeId","nodeId","annotationComponentId","latestAnnotations","getLatestComponentAnnotations","comment","latestComment","type","data","value","score","result","latestTeacherAnnotationTime","getLatestTeacherAnnotationTime","n","length","latestComponentState","id","studentWorkId","latest","latestScore","latestTeacherComment","latestTeacherScore","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestTeacherAnnotation","time","convertToClientTimestamp","total","clientSaveTime","Date","getTime","fromWorkgroupId","getWorkgroupId","convertStringToNumber","createAnnotation","annotationId","componentStateId","saveAnnotation","then","localAnnotation","$inject","ComponentGrading","bindings","active","templateUrl","controller"],"mappings":"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","file":"componentGrading.js","sourcesContent":["'use strict';\n\nclass ComponentGradingController {\n    constructor($scope,\n                $translate,\n                AnnotationService,\n                ConfigService,\n                TeacherDataService,\n                UtilService,) {\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n\n        this.$onInit = () => {\n            this.runId = this.ConfigService.getRunId();\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n            if (toUserInfo) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n        };\n\n        this.$onChanges = (changes) => {\n\n            if (changes.maxScore) {\n                this.hasMaxScore = (typeof this.maxScore === 'number');\n            }\n\n            this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.toWorkgroupId, this.componentId);\n            this.latestComponentStateTime = this.getLatestComponentStateTime();\n\n            this.processAnnotations();\n        };\n\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            // TODO: we're watching this here and in the parent component's controller; probably want to optimize!\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    let annotationNodeId = annotation.nodeId;\n                    let annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.processAnnotations();\n                    }\n                }\n            }\n        });\n    }\n\n    processAnnotations() {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.toWorkgroupId);\n\n        if (this.latestAnnotations && this.latestAnnotations.comment) {\n            let latestComment = this.latestAnnotations.comment;\n            if (latestComment.type === 'comment') {\n                this.comment = latestComment.data.value;\n            } else {\n                this.comment = null;\n            }\n        }\n\n        if (this.latestAnnotations && this.latestAnnotations.score) {\n            this.score = this.latestAnnotations.score.data.value;\n        }\n    }\n\n    hasNewWork() {\n        let result = false;\n\n        if (this.latestComponentStateTime) {\n            // there is work for this component\n\n            let latestTeacherAnnotationTime = this.getLatestTeacherAnnotationTime();\n            if (latestTeacherAnnotationTime) {\n                if (this.latestComponentStateTime > latestTeacherAnnotationTime) {\n                    // latest component state is newer than latest annotation, so work is new\n                    result = true;\n                    this.comment = null;\n                }\n            } else {\n                // there are no annotations, so work is new\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns true if the latest comment is an auto comment and it's\n     * studentWorkId matches the latest component state's id\n     */\n    showAutoComment() {\n        let result = false;\n        let latestComment = this.latestAnnotations.comment;\n        if (latestComment && latestComment.type === 'autoComment') {\n            let n = this.componentStates.length;\n            if (n > 0) {\n                let latestComponentState = this.componentStates[n-1]\n                if (latestComponentState.id === latestComment.studentWorkId) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the most recent teacher annotation (from the current score and comment annotations)\n     * @return Object (latest teacher annotation)\n     */\n    getLatestTeacherAnnotation() {\n        let latest = null;\n        let latestComment = this.latestAnnotations.comment;\n        let latestScore = this.latestAnnotations.score;\n        let latestTeacherComment = (latestComment && latestComment.type === 'comment') ? latestComment : null;\n        let latestTeacherScore = (latestScore && latestScore.type === 'score') ? latestScore : null;\n\n        if (latestTeacherComment || latestTeacherScore) {\n            let commentSaveTime = latestTeacherComment ? latestTeacherComment.serverSaveTime : 0;\n            let scoreSaveTime = latestTeacherScore ? latestTeacherScore.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latest = latestTeacherComment;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latest = latestTeacherScore;\n            }\n        }\n\n        return latest;\n    }\n\n    /**\n     * Calculate the save time of the latest teacher annotation\n     * @return Number (latest teacher annotation post time)\n     */\n    getLatestTeacherAnnotationTime() {\n        let latest = this.getLatestTeacherAnnotation();\n        let time = 0;\n\n        if (latest) {\n            let serverSaveTime = latest.serverSaveTime;\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n        }\n\n        return time;\n    }\n\n    /**\n     * Calculate the save time of the latest component state\n     * @return Number (latest annotation post time)\n     */\n    getLatestComponentStateTime() {\n        let total = this.componentStates.length;\n        let time = null;\n\n        if (total) {\n            let latest = this.componentStates[total-1];\n\n            if (latest) {\n                let serverSaveTime = latest.serverSaveTime;\n                time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * Save the annotation to the server\n     * @param type String to indicate which type of annotation to post\n     */\n    postAnnotation(type) {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null &&\n            this.toWorkgroupId != null &&\n            type) {\n\n            // get the current time\n            let clientSaveTime = new Date().getTime();\n\n            // get the logged in teacher's id\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            // get the value\n            let value = null;\n            if (type === 'score') {\n                value = this.score;\n                // convert the value to a number if possible\n                value = this.UtilService.convertStringToNumber(value);\n            } else if (type === 'comment') {\n                value = this.comment;\n            }\n\n            if ((type === 'comment' && value) || (type === 'score' && typeof value === 'number' && value >= 0)) {\n                let data = {};\n                data.value = value;\n\n                // create the annotation object\n                let annotation = this.AnnotationService.createAnnotation(\n                    this.annotationId,\n                    this.runId,\n                    this.periodId,\n                    this.fromWorkgroupId,\n                    this.toWorkgroupId,\n                    this.nodeId,\n                    this.componentId,\n                    this.componentStateId,\n                    type,\n                    data,\n                    clientSaveTime);\n\n                // save the annotation to the server\n                this.AnnotationService.saveAnnotation(annotation).then(result => {\n                    let localAnnotation = result;\n\n                    if (localAnnotation != null) {\n                        if (this.annotationId == null) {\n                            // set the annotation id if there was no annotation id\n                            this.annotationId = localAnnotation.id;\n                        }\n\n                        this.processAnnotations();\n                    }\n                });\n            }\n        }\n    }\n}\n\nComponentGradingController.$inject = [\n    '$scope',\n    '$translate',\n    'AnnotationService',\n    'ConfigService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nconst ComponentGrading = {\n    bindings: {\n        nodeId: '<',\n        componentId: '<',\n        maxScore: '<',\n        fromWorkgroupId: '<',\n        toWorkgroupId: '<',\n        componentStateId: '<',\n        active: '<'\n    },\n    templateUrl: 'wise5/directives/componentGrading/componentGrading.html',\n    controller: ComponentGradingController\n};\n\nexport default ComponentGrading;\n"]}