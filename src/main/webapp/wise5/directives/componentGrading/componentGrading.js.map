{"version":3,"sources":["componentGrading.es6"],"names":["ComponentGradingController","$filter","$mdDialog","$scope","AnnotationService","ConfigService","ProjectService","TeacherDataService","UtilService","$translate","$onInit","runId","getRunId","toUserInfo","getUserInfoByWorkgroupId","toWorkgroupId","periodId","userNamesArray","getUserNamesByWorkgroupId","userNames","map","obj","name","join","$onChanges","changes","maxScore","currentValue","componentStates","getComponentStatesByWorkgroupIdAndComponentId","componentId","latestComponentStateTime","getLatestComponentStateTime","processAnnotations","$on","event","args","annotation","annotationNodeId","nodeId","annotationComponentId","getMaxScoreForComponent","latestAnnotations","getLatestComponentAnnotations","comment","latestComment","type","data","value","score","latestTeacherAnnotationTime","getLatestTeacherAnnotationTime","hasNewWork","checkHasNewWork","result","n","length","latestComponentState","id","studentWorkId","latest","latestScore","latestTeacherComment","latestTeacherScore","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestTeacherAnnotation","time","convertToClientTimestamp","total","$event","workgroupId","show","parent","angular","element","document","body","targetEvent","fullscreen","template","locals","controller","RevisionsController","close","hide","$inject","clientSaveTime","Date","getTime","fromWorkgroupId","getWorkgroupId","convertStringToNumber","localNotebookItemId","notebookItemId","createAnnotation","annotationId","componentStateId","saveAnnotation","then","setMaxScoreForComponent","saveProject","ComponentGrading","bindings","active","templateUrl"],"mappings":"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","file":"componentGrading.js","sourcesContent":["'use strict';\n\nclass ComponentGradingController {\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                TeacherDataService,\n                UtilService,) {\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.$onInit = () => {\n            this.runId = this.ConfigService.getRunId();\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n            if (toUserInfo) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n\n            // get the workgroup user names\n            let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(this.toWorkgroupId);\n            this.userNames = userNamesArray.map( (obj) => {\n                return obj.name;\n            }).join(', ');\n        };\n\n        this.$onChanges = (changes) => {\n\n            if (changes.maxScore) {\n                this.maxScore = typeof changes.maxScore.currentValue === 'number' ? changes.maxScore.currentValue : 0;\n            }\n\n            this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.toWorkgroupId, this.componentId);\n            this.latestComponentStateTime = this.getLatestComponentStateTime();\n\n            this.processAnnotations();\n        };\n\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            // TODO: we're watching this here and in the parent component's controller; probably want to optimize!\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    let annotationNodeId = annotation.nodeId;\n                    let annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.processAnnotations();\n                    }\n                }\n            }\n        });\n\n        this.$scope.$on('projectSaved', (event, args) => {\n            // update maxScore\n            this.maxScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n        });\n\n    }\n\n    processAnnotations() {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.toWorkgroupId);\n\n        if (this.latestAnnotations && this.latestAnnotations.comment) {\n            let latestComment = this.latestAnnotations.comment;\n            if (latestComment.type === 'comment') {\n                this.comment = latestComment.data.value;\n            }\n        }\n\n        if (this.latestAnnotations && this.latestAnnotations.score) {\n            this.score = this.latestAnnotations.score.data.value;\n        }\n\n        this.latestTeacherAnnotationTime = this.getLatestTeacherAnnotationTime();\n\n        this.hasNewWork = this.checkHasNewWork();\n    }\n\n    checkHasNewWork() {\n        let result = false;\n\n        if (this.latestComponentStateTime) {\n            // there is work for this component\n\n            if (this.latestTeacherAnnotationTime) {\n                if (this.latestComponentStateTime > this.latestTeacherAnnotationTime) {\n                    // latest component state is newer than latest annotation, so work is new\n                    result = true;\n                    this.comment = null;\n                }\n            } else {\n                // there are no annotations, so work is new\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns true if the latest comment is an auto comment and it's\n     * studentWorkId matches the latest component state's id\n     */\n    showAutoComment() {\n        let result = false;\n        if (this.latestAnnotations) {\n            let latestComment = this.latestAnnotations.comment;\n            if (latestComment && latestComment.type === 'autoComment') {\n                let n = this.componentStates.length;\n                if (n > 0) {\n                    let latestComponentState = this.componentStates[n-1]\n                    if (latestComponentState.id === latestComment.studentWorkId) {\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the most recent teacher annotation (from the current score and comment annotations)\n     * @return Object (latest teacher annotation)\n     */\n    getLatestTeacherAnnotation() {\n        let latest = null;\n        let latestComment = this.latestAnnotations.comment;\n        let latestScore = this.latestAnnotations.score;\n        let latestTeacherComment = (latestComment && latestComment.type === 'comment') ? latestComment : null;\n        let latestTeacherScore = (latestScore && latestScore.type === 'score') ? latestScore : null;\n\n        if (latestTeacherComment || latestTeacherScore) {\n            let commentSaveTime = latestTeacherComment ? latestTeacherComment.serverSaveTime : 0;\n            let scoreSaveTime = latestTeacherScore ? latestTeacherScore.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latest = latestTeacherComment;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latest = latestTeacherScore;\n            }\n        }\n\n        return latest;\n    }\n\n    /**\n     * Calculate the save time of the latest teacher annotation\n     * @return Number (latest teacher annotation post time)\n     */\n    getLatestTeacherAnnotationTime() {\n        let latest = this.getLatestTeacherAnnotation();\n        let time = 0;\n\n        if (latest) {\n            let serverSaveTime = latest.serverSaveTime;\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n        }\n\n        return time;\n    }\n\n    /**\n     * Calculate the save time of the latest component state\n     * @return Number (latest annotation post time)\n     */\n    getLatestComponentStateTime() {\n        let total = this.componentStates.length;\n        let time = null;\n\n        if (total) {\n            let latest = this.componentStates[total-1];\n\n            if (latest) {\n                let serverSaveTime = latest.serverSaveTime;\n                time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n            }\n        }\n\n        return time;\n    }\n\n    showRevisions($event) {\n        let workgroupId = this.toWorkgroupId;\n        let componentId = this.componentId;\n        let maxScore  = this.maxScore;\n        let userNames = this.userNames;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            fullscreen: true,\n            template:\n                `<md-dialog aria-label=\"{{ 'revisionsForTeam' | translate:{teamNames: userNames} }}\" class=\"dialog--wider\">\n                    <md-toolbar>\n                        <div class=\"md-toolbar-tools gray-darkest-bg\">\n                            <h2 class=\"overflow--ellipsis\">{{ 'revisionsForTeam' | translate:{teamNames: userNames} }}</h2>\n                        </div>\n                    </md-toolbar>\n                    <md-dialog-content>\n                        <div class=\"md-dialog-content gray-lighter-bg\">\n                            <workgroup-component-revisions workgroup-id=\"workgroupId\" component-id=\"{{ componentId }}\" max-score=\"maxScore\"></workgroup-component-revisions>\n                        </div>\n                    </md-dialog-content>\n                    <md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                        <md-button class=\"md-primary\" ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\n                    </md-dialog-actions>\n                </md-dialog>`,\n            locals: {\n                workgroupId: workgroupId,\n                componentId: componentId,\n                maxScore: maxScore,\n                userNames: userNames\n            },\n            controller: RevisionsController\n        });\n        function RevisionsController($scope, $mdDialog, workgroupId, componentId, maxScore, userNames) {\n            $scope.workgroupId = workgroupId;\n            $scope.componentId = componentId;\n            $scope.maxScore = maxScore;\n            $scope.userNames = userNames;\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"workgroupId\", \"componentId\", \"maxScore\", \"userNames\"];\n    }\n\n    /**\n     * Save the annotation to the server\n     * @param type String to indicate which type of annotation to post\n     */\n    postAnnotation(type) {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null &&\n            this.toWorkgroupId != null &&\n            type) {\n\n            // get the current time\n            let clientSaveTime = new Date().getTime();\n\n            // get the logged in teacher's id\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            // get the value\n            let value = null;\n            if (type === 'score') {\n                value = this.score;\n                // convert the value to a number if possible\n                value = this.UtilService.convertStringToNumber(value);\n            } else if (type === 'comment') {\n                value = this.comment;\n            }\n\n            if ((type === 'comment' && value) || (type === 'score' && typeof value === 'number' && value >= 0)) {\n                let data = {};\n                data.value = value;\n                let localNotebookItemId = null;  // we're not grading notebook item in this view.\n                let notebookItemId = null;  // we're not grading notebook item in this view.\n\n                // create the annotation object\n                let annotation = this.AnnotationService.createAnnotation(\n                    this.annotationId,\n                    this.runId,\n                    this.periodId,\n                    this.fromWorkgroupId,\n                    this.toWorkgroupId,\n                    this.nodeId,\n                    this.componentId,\n                    this.componentStateId,\n                    localNotebookItemId,\n                    notebookItemId,\n                    type,\n                    data,\n                    clientSaveTime);\n\n                // save the annotation to the server\n                this.AnnotationService.saveAnnotation(annotation).then(result => {\n                    /*let localAnnotation = result;\n\n                    if (localAnnotation != null) {\n                        if (this.annotationId == null) {\n                            // set the annotation id if there was no annotation id\n                            this.annotationId = localAnnotation.id;\n                        }\n\n                        this.processAnnotations();\n                    }*/\n                });\n            }\n        }\n    }\n\n    /**\n     * Save the maxScore of this component to the server\n     */\n    updateMaxScore() {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null) {\n\n            // get the new maxScore\n            let maxScore = this.maxScore;\n            // convert to number if possible\n            maxScore = this.UtilService.convertStringToNumber(maxScore);\n\n            if (typeof maxScore === 'number' && maxScore >= 0) {\n                this.ProjectService.setMaxScoreForComponent(this.nodeId, this.componentId, maxScore);\n                this.ProjectService.saveProject();\n            }\n        }\n    }\n}\n\nComponentGradingController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nconst ComponentGrading = {\n    bindings: {\n        nodeId: '<',\n        componentId: '<',\n        maxScore: '<',\n        fromWorkgroupId: '<',\n        toWorkgroupId: '<',\n        componentStateId: '<',\n        active: '<'\n    },\n    templateUrl: 'wise5/directives/componentGrading/componentGrading.html',\n    controller: ComponentGradingController\n};\n\nexport default ComponentGrading;\n"]}