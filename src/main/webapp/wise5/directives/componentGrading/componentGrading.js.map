{"version":3,"sources":["componentGrading.es6"],"names":["ComponentGradingController","$mdDialog","$scope","$translate","AnnotationService","ConfigService","TeacherDataService","UtilService","$onInit","runId","getRunId","toUserInfo","getUserInfoByWorkgroupId","toWorkgroupId","periodId","userNamesArray","getUserNamesByWorkgroupId","userNames","map","obj","name","join","$onChanges","changes","maxScore","hasMaxScore","componentStates","getComponentStatesByWorkgroupIdAndComponentId","componentId","latestComponentStateTime","getLatestComponentStateTime","processAnnotations","$on","event","args","annotation","annotationNodeId","nodeId","annotationComponentId","latestAnnotations","getLatestComponentAnnotations","comment","latestComment","type","data","value","score","latestTeacherAnnotationTime","getLatestTeacherAnnotationTime","result","n","length","latestComponentState","id","studentWorkId","latest","latestScore","latestTeacherComment","latestTeacherScore","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestTeacherAnnotation","time","convertToClientTimestamp","total","$event","workgroupId","show","parent","angular","element","document","body","targetEvent","fullscreen","template","locals","controller","RevisionsController","close","hide","$inject","clientSaveTime","Date","getTime","fromWorkgroupId","getWorkgroupId","convertStringToNumber","createAnnotation","annotationId","componentStateId","saveAnnotation","then","ComponentGrading","bindings","active","templateUrl"],"mappings":"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","file":"componentGrading.js","sourcesContent":["'use strict';\n\nclass ComponentGradingController {\n    constructor($mdDialog,\n                $scope,\n                $translate,\n                AnnotationService,\n                ConfigService,\n                TeacherDataService,\n                UtilService,) {\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n\n        this.$onInit = () => {\n            this.runId = this.ConfigService.getRunId();\n\n            let toUserInfo = this.ConfigService.getUserInfoByWorkgroupId(this.toWorkgroupId);\n            if (toUserInfo) {\n                // set the period id\n                this.periodId = toUserInfo.periodId;\n            }\n\n            // get the workgroup user names\n            let userNamesArray = this.ConfigService.getUserNamesByWorkgroupId(this.toWorkgroupId);\n            this.userNames = userNamesArray.map( (obj) => {\n                return obj.name;\n            }).join(', ');\n        };\n\n        this.$onChanges = (changes) => {\n\n            if (changes.maxScore) {\n                this.hasMaxScore = (typeof this.maxScore === 'number');\n            }\n\n            this.componentStates = this.TeacherDataService.getComponentStatesByWorkgroupIdAndComponentId(this.toWorkgroupId, this.componentId);\n            this.latestComponentStateTime = this.getLatestComponentStateTime();\n\n            this.processAnnotations();\n        };\n\n        this.$scope.$on('annotationSavedToServer', (event, args) => {\n            // TODO: we're watching this here and in the parent component's controller; probably want to optimize!\n            if (args != null ) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                if (annotation != null) {\n\n                    // get the node id and component id of the annotation\n                    let annotationNodeId = annotation.nodeId;\n                    let annotationComponentId = annotation.componentId;\n\n                    // make sure the annotation was for this component\n                    if (this.nodeId === annotationNodeId &&\n                        this.componentId === annotationComponentId) {\n\n                        // get latest score and comment annotations for this component\n                        this.processAnnotations();\n                    }\n                }\n            }\n        });\n    }\n\n    processAnnotations() {\n        this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.toWorkgroupId);\n\n        if (this.latestAnnotations && this.latestAnnotations.comment) {\n            let latestComment = this.latestAnnotations.comment;\n            if (latestComment.type === 'comment') {\n                this.comment = latestComment.data.value;\n            } else {\n                this.comment = null;\n            }\n        }\n\n        if (this.latestAnnotations && this.latestAnnotations.score) {\n            this.score = this.latestAnnotations.score.data.value;\n        }\n\n        this.latestTeacherAnnotationTime = this.getLatestTeacherAnnotationTime();\n    }\n\n    hasNewWork() {\n        let result = false;\n\n        if (this.latestComponentStateTime) {\n            // there is work for this component\n\n            if (this.latestTeacherAnnotationTime) {\n                if (this.latestComponentStateTime > this.latestTeacherAnnotationTime) {\n                    // latest component state is newer than latest annotation, so work is new\n                    result = true;\n                    this.comment = null;\n                }\n            } else {\n                // there are no annotations, so work is new\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns true if the latest comment is an auto comment and it's\n     * studentWorkId matches the latest component state's id\n     */\n    showAutoComment() {\n        let result = false;\n        let latestComment = this.latestAnnotations.comment;\n        if (latestComment && latestComment.type === 'autoComment') {\n            let n = this.componentStates.length;\n            if (n > 0) {\n                let latestComponentState = this.componentStates[n-1]\n                if (latestComponentState.id === latestComment.studentWorkId) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the most recent teacher annotation (from the current score and comment annotations)\n     * @return Object (latest teacher annotation)\n     */\n    getLatestTeacherAnnotation() {\n        let latest = null;\n        let latestComment = this.latestAnnotations.comment;\n        let latestScore = this.latestAnnotations.score;\n        let latestTeacherComment = (latestComment && latestComment.type === 'comment') ? latestComment : null;\n        let latestTeacherScore = (latestScore && latestScore.type === 'score') ? latestScore : null;\n\n        if (latestTeacherComment || latestTeacherScore) {\n            let commentSaveTime = latestTeacherComment ? latestTeacherComment.serverSaveTime : 0;\n            let scoreSaveTime = latestTeacherScore ? latestTeacherScore.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latest = latestTeacherComment;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latest = latestTeacherScore;\n            }\n        }\n\n        return latest;\n    }\n\n    /**\n     * Calculate the save time of the latest teacher annotation\n     * @return Number (latest teacher annotation post time)\n     */\n    getLatestTeacherAnnotationTime() {\n        let latest = this.getLatestTeacherAnnotation();\n        let time = 0;\n\n        if (latest) {\n            let serverSaveTime = latest.serverSaveTime;\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n        }\n\n        return time;\n    }\n\n    /**\n     * Calculate the save time of the latest component state\n     * @return Number (latest annotation post time)\n     */\n    getLatestComponentStateTime() {\n        let total = this.componentStates.length;\n        let time = null;\n\n        if (total) {\n            let latest = this.componentStates[total-1];\n\n            if (latest) {\n                let serverSaveTime = latest.serverSaveTime;\n                time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n            }\n        }\n\n        return time;\n    }\n\n    showRevisions($event) {\n        let workgroupId = this.toWorkgroupId;\n        let componentId = this.componentId;\n        let maxScore  = this.maxScore;\n        let userNames = this.userNames;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            fullscreen: true,\n            template:\n                `<md-dialog aria-label=\"Revisions for {{userNames}}\" class=\"dialog--wider\">\n                    <md-toolbar md-theme=\"light\">\n                        <div class=\"md-toolbar-tools\">\n                            <h2 class=\"overflow--ellipsis\">Revisions for {{userNames}}</h2>\n                            <span flex></span>\n                            <md-button class=\"md-icon-button\" ng-click=\"close()\">\n                                <md-icon aria-label=\"Close dialog\"> close </md-icon>\n                            </md-button>\n                        </div>\n                    </md-toolbar>\n                    <md-dialog-content class=\"md-dialog-content gray-light-bg\">\n                        <workgroup-component-revisions workgroup-id=\"workgroupId\" component-id=\"{{componentId}}\" max-score=\"maxScore\"></workgroup-component-revisions>\n                    </md-dialog-content>\n                    <md-dialog-actions layout=\"row\">\n                        <md-button ng-click=\"close()\" class=\"md-primary\">Close</md-button>\n                    </md-dialog-actions>\n                </md-dialog>`,\n            locals: {\n                workgroupId: workgroupId,\n                componentId: componentId,\n                maxScore: maxScore,\n                userNames: userNames\n            },\n            controller: RevisionsController\n        });\n        function RevisionsController($scope, $mdDialog, workgroupId, componentId, maxScore, userNames) {\n            $scope.workgroupId = workgroupId;\n            $scope.componentId = componentId;\n            $scope.maxScore = maxScore;\n            $scope.userNames = userNames;\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"workgroupId\", \"componentId\", \"maxScore\", \"userNames\"];\n    }\n\n    /**\n     * Save the annotation to the server\n     * @param type String to indicate which type of annotation to post\n     */\n    postAnnotation(type) {\n\n        if (this.runId != null &&\n            this.periodId != null &&\n            this.nodeId != null &&\n            this.componentId != null &&\n            this.toWorkgroupId != null &&\n            type) {\n\n            // get the current time\n            let clientSaveTime = new Date().getTime();\n\n            // get the logged in teacher's id\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n\n            // get the value\n            let value = null;\n            if (type === 'score') {\n                value = this.score;\n                // convert the value to a number if possible\n                value = this.UtilService.convertStringToNumber(value);\n            } else if (type === 'comment') {\n                value = this.comment;\n            }\n\n            if ((type === 'comment' && value) || (type === 'score' && typeof value === 'number' && value >= 0)) {\n                let data = {};\n                data.value = value;\n\n                // create the annotation object\n                let annotation = this.AnnotationService.createAnnotation(\n                    this.annotationId,\n                    this.runId,\n                    this.periodId,\n                    this.fromWorkgroupId,\n                    this.toWorkgroupId,\n                    this.nodeId,\n                    this.componentId,\n                    this.componentStateId,\n                    type,\n                    data,\n                    clientSaveTime);\n\n                // save the annotation to the server\n                this.AnnotationService.saveAnnotation(annotation).then(result => {\n                    /*let localAnnotation = result;\n\n                    if (localAnnotation != null) {\n                        if (this.annotationId == null) {\n                            // set the annotation id if there was no annotation id\n                            this.annotationId = localAnnotation.id;\n                        }\n\n                        this.processAnnotations();\n                    }*/\n                });\n            }\n        }\n    }\n}\n\nComponentGradingController.$inject = [\n    '$mdDialog',\n    '$scope',\n    '$translate',\n    'AnnotationService',\n    'ConfigService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nconst ComponentGrading = {\n    bindings: {\n        nodeId: '<',\n        componentId: '<',\n        maxScore: '<',\n        fromWorkgroupId: '<',\n        toWorkgroupId: '<',\n        componentStateId: '<',\n        active: '<'\n    },\n    templateUrl: 'wise5/directives/componentGrading/componentGrading.html',\n    controller: ComponentGradingController\n};\n\nexport default ComponentGrading;\n"]}