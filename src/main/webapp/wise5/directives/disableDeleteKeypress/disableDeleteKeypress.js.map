{"version":3,"sources":["disableDeleteKeypress.es6"],"names":["DisableDeleteKeypressController","$document","bind","e","keyCode","nodeName","target","targetType","type","toLowerCase","contentEditable","preventDefault","$inject","DisableDeleteKeypress","bindings","controller"],"mappings":";;;;;;;;AAAA;;;;IAIMA,+B,GACF,yCAAYC,SAAZ,EAAuB;AAAA;;AAEnBA,cAAUC,IAAV,CAAe,SAAf,EAA0B,UAAUC,CAAV,EAAa;;AAEnC;AACA,YAAIA,EAAEC,OAAF,KAAc,CAAlB,EAAqB;AACjB;;AAEA;AACA,gBAAIC,WAAWF,EAAEG,MAAF,CAASD,QAAxB;;AAEA;AACA,gBAAIE,aAAaJ,EAAEG,MAAF,CAASE,IAA1B;;AAEA,gBAAIH,YAAY,IAAhB,EAAsB;AAClBA,2BAAWA,SAASI,WAAT,EAAX;AACH;;AAED,gBAAIF,cAAc,IAAlB,EAAwB;AACpBA,6BAAaA,WAAWE,WAAX,EAAb;AACH;;AAED,gBAAIC,kBAAkBP,EAAEG,MAAF,CAASI,eAAT,KAA6B,MAAnD;;AAEA,gBAAKL,aAAa,OAAb,IAAwBE,eAAe,MAAxC,IACCF,aAAa,OAAb,IAAwBE,eAAe,UADxC,IAECF,aAAa,OAAb,IAAwBE,eAAe,MAFxC,IAGCF,aAAa,OAAb,IAAwBE,eAAe,QAHxC,IAICF,aAAa,OAAb,IAAwBE,eAAe,OAJxC,IAKCF,aAAa,OAAb,IAAwBE,eAAe,QALxC,IAMCF,aAAa,OAAb,IAAwBE,eAAe,MANxC,IAOAF,aAAa,UAPb,IAO2BK,eAP/B,EAOgD;AAC5C;;;;AAIH,aAZD,MAYO;AACH;;;;AAIAP,kBAAEQ,cAAF;AACH;AACJ;AACJ,KA1CD;AA2CH,C;;AAGLX,gCAAgCY,OAAhC,GAA0C,CAAC,WAAD,CAA1C;;AAEA,IAAMC,wBAAwB;AAC1BC,cAAU,EADgB;AAG1BC,gBAAYf;AAHc,CAA9B;;kBAMea,qB","file":"disableDeleteKeypress.js","sourcesContent":["/**\n * Disable the backspace key so that it does not navigate the user back\n * in their browser history.\n */\nclass DisableDeleteKeypressController {\n    constructor($document) {\n\n        $document.bind('keydown', function (e) {\n\n            // check for the delete key press\n            if (e.keyCode === 8) {\n                // the delete key was pressed\n\n                // get the name of the node e.g. body, input, div, etc.\n                let nodeName = e.target.nodeName;\n\n                // get the type if applicable e.g. text, password, file, etc.\n                let targetType = e.target.type;\n\n                if (nodeName != null) {\n                    nodeName = nodeName.toLowerCase();\n                }\n\n                if (targetType != null) {\n                    targetType = targetType.toLowerCase();\n                }\n\n                let contentEditable = e.target.contentEditable === 'true';\n\n                if ((nodeName === 'input' && targetType === 'text') ||\n                    (nodeName === 'input' && targetType === 'password') ||\n                    (nodeName === 'input' && targetType === 'file') ||\n                    (nodeName === 'input' && targetType === 'search') ||\n                    (nodeName === 'input' && targetType === 'email') ||\n                    (nodeName === 'input' && targetType === 'number') ||\n                    (nodeName === 'input' && targetType === 'date') ||\n                    nodeName === 'textarea' || contentEditable) {\n                    /*\n                     * the user is typing in a valid input element so we will\n                     * allow the delete key press\n                     */\n                } else {\n                    /*\n                     * the user is not typing in an input element so we will\n                     * not allow the delete key press\n                     */\n                    e.preventDefault();\n                }\n            }\n        });\n    }\n}\n\nDisableDeleteKeypressController.$inject = ['$document'];\n\nconst DisableDeleteKeypress = {\n    bindings: {\n    },\n    controller: DisableDeleteKeypressController\n};\n\nexport default DisableDeleteKeypress;"]}