{"version":3,"sources":["draggable.es6"],"names":["DraggableController","$document","$element","startX","startY","bind","event","preventDefault","leftString","topString","left","top","length","style","parseInt","replace","pageX","pageY","on","$","proxy","mousemove","mouseup","linkTypeChooserWidth","linkTypeChooserHeight","linkTypeChooserWidthString","angular","element","css","linkTypeChooserHeightString","overlayWidth","scope","$eval","attributes","value","overlayHeight","x","y","conceptMapController","mode","conceptMapContainer","offset","offsetTop","off","$inject","Draggable","bindings","controller"],"mappings":"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","file":"draggable.js","sourcesContent":["/**\n * Make the element draggable\n */\nclass DraggableController {\n    constructor($document, $element) {\n        this.$document = $document;\n        this.$element = $element;\n\n        /*\n         * used to remember the start x and y coordinate of the top left corner\n         * of the element\n         */\n        this.startX = 0;\n        this.startY = 0;\n\n        // set the attributes into the element so we can access them later\n        //this.attributes = attr;\n\n        $element.bind('mousedown', (event) => {\n\n            // Prevent default dragging of selected content\n            event.preventDefault();\n\n            var leftString = null;\n            var topString = null;\n            var left = null;\n            var top = null;\n\n            if (this.$element != null && this.$element.length > 0) {\n                /*\n                 * get the pixel location of the top left corner relative to its\n                 * parent container\n                 */\n                leftString = this.$element[0].style.left;\n                topString = this.$element[0].style.top;\n\n                if (leftString != null) {\n                    // get the integer value of the left\n                    left = parseInt(leftString.replace('px', ''));\n                }\n\n                if (topString != null) {\n                    // get the integer value of the top\n                    top = parseInt(topString.replace('px', ''));\n                }\n\n                /*\n                 * get the position of the mouse and subtract the distance from\n                 * the upper left corner of the parent container to the upper\n                 * left corner of the element.\n                 * this will be equal to the sum of two values.\n                 * the first value is the x and y difference between the upper\n                 * left corner of the browser screen to the upper left corner\n                 * of the parent container.\n                 * the second value is the x and y difference between the upper\n                 * left corner of the element to the mouse position.\n                 * we will use the sum of these two values later to calculate\n                 * where to place the element when it is being dragged.\n                 */\n                this.startX = event.pageX - left;\n                this.startY = event.pageY - top;\n\n                // add mouse listeners to handle moving the element\n                this.$document.on('mousemove', $.proxy(this.mousemove, this));\n                this.$document.on('mouseup', $.proxy(this.mouseup, this));\n            }\n        });\n    }\n\n    mousemove(event) {\n\n        var linkTypeChooserWidth = null;\n        var linkTypeChooserHeight = null;\n\n        // get the width and height of the element we are dragging\n        var linkTypeChooserWidthString = angular.element(this.$element[0]).css('width');\n        var linkTypeChooserHeightString = angular.element(this.$element[0]).css('height');\n\n        if (linkTypeChooserWidthString != null && linkTypeChooserHeightString != null) {\n            // get the integer values of the width and height\n            linkTypeChooserWidth = parseInt(linkTypeChooserWidthString.replace('px', ''));\n            linkTypeChooserHeight = parseInt(linkTypeChooserHeightString.replace('px', ''));\n        }\n\n        /*\n         * get the width and height of the container that we want to restrict\n         * the element within. the user will not be able to drag the element\n         * outside of these boundaries.\n         */\n        var overlayWidth = this.$element.scope().$eval(this.$element[0].attributes['container-width'].value);\n        var overlayHeight = this.$element.scope().$eval(this.$element[0].attributes['container-height'].value);\n\n        /*\n         * calculate the x and y position of where the element should be\n         * placed. we will calculate the position by taking the mouse\n         * position and subtracting the value we previously calculated\n         * in the mousedown event. performing the subtraction will give\n         * us the x and y difference between the upper left corner of the\n         * parent container and the upper left corner of the element.\n         */\n        var x = event.pageX - this.startX;\n        var y = event.pageY - this.startY;\n\n        var top = 0;\n\n        if (this.$element.scope().conceptMapController.mode == 'authoring') {\n            /*\n             * if we are in authoring mode we need to include the offset of\n             * the container for some reason.\n             * TODO: figure out why the offset is required in authoring mode\n             * but not in student mode.\n             */\n\n            // get the concept map container\n            var conceptMapContainer = angular.element('#conceptMapContainer');\n\n            // get the offset of the container relative to the whole page\n            var offset = conceptMapContainer.offset();\n\n            // get the top offset\n            var offsetTop = offset.top;\n\n            // set the top to the offset\n            top = offsetTop;\n        }\n\n        if (x < 0) {\n            /*\n             * the x position that we have calculated for the left\n             * side of the element is past the left side of the parent\n             * container so we will set the x position to 0 so that the\n             * element is up against the left side of the parent container\n             */\n            x = 0;\n        } else if((x + linkTypeChooserWidth) > overlayWidth) {\n            /*\n             * the x position that we have calculated for the right\n             * side of the element is past the right side of the parent\n             * container so we will set the x position so that the element\n             * is up against the right side of the parent container\n             */\n            x = overlayWidth - linkTypeChooserWidth;\n        }\n\n        if (y < top) {\n            /*\n             * the y position that we have calculated for the top\n             * side of the element is past the top side of the parent\n             * container so we will set the y position to 0 so that the\n             * element is up against the top side of the parent container\n             */\n            y = top;\n        } else if ((y + linkTypeChooserHeight) > (overlayHeight + top)) {\n            /*\n             * the y position that we have calculated for the bottom\n             * side of the element is past the bottom side of the parent\n             * container so we will set the y position so that the element\n             * is up against the bottom side of the parent container\n             */\n            y = (overlayHeight + top) - linkTypeChooserHeight;\n        }\n\n        // move the element to the new position\n        this.$element.css({\n            top: y + 'px',\n            left:  x + 'px'\n        });\n    }\n\n    mouseup() {\n        // remove the mousemove listener\n        this.$document.off('mousemove', this.mousemove);\n\n        // remove the mouseup listener\n        this.$document.off('mouseup', this.mouseup);\n    }\n}\n\nDraggableController.$inject = ['$document', '$element'];\n\nconst Draggable = {\n    bindings: {\n    },\n    controller: DraggableController\n};\n\nexport default Draggable;"]}