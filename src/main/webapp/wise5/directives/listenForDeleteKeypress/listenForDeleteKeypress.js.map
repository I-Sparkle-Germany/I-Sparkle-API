{"version":3,"sources":["listenForDeleteKeypress.es6"],"names":["ListenForDeleteKeypressController","$document","$rootScope","bind","e","keyCode","$broadcast","$inject","ListenForDeleteKeypress","bindings","controller"],"mappings":";;;;;;;;AACA;;;;IAIMA,iC,GACF,2CAAYC,SAAZ,EAAuBC,UAAvB,EAAmC;AAAA;;AAC/BD,cAAUE,IAAV,CAAe,SAAf,EAA0B,UAACC,CAAD,EAAO;;AAE7B;AACA,YAAIA,EAAEC,OAAF,KAAc,CAAlB,EAAqB;AACjB;;AAEA;AACAH,uBAAWI,UAAX,CAAsB,kBAAtB;AACH;AACJ,KATD;AAUH,C;;AAGLN,kCAAkCO,OAAlC,GAA4C,CAAC,WAAD,EAAc,YAAd,CAA5C;;AAGA,IAAMC,0BAA0B;AAC5BC,cAAU,EADkB;AAG5BC,gBAAYV;AAHgB,CAAhC;;kBAMeQ,uB","file":"listenForDeleteKeypress.js","sourcesContent":["\n/**\n * Listen for the backspace key press so we can perform special processing\n * specific for components such as deleting a point in a graph component.\n */\nclass ListenForDeleteKeypressController {\n    constructor($document, $rootScope) {\n        $document.bind('keydown', (e) => {\n\n            // check for the delete key press\n            if (e.keyCode === 8) {\n                // the delete key was pressed\n\n                // fire the deleteKeyPressed event\n                $rootScope.$broadcast('deleteKeyPressed');\n            }\n        });\n    }\n}\n\nListenForDeleteKeypressController.$inject = ['$document', '$rootScope'];\n\n\nconst ListenForDeleteKeypress = {\n    bindings: {\n    },\n    controller: ListenForDeleteKeypressController\n};\n\nexport default ListenForDeleteKeypress;"]}