{"version":3,"sources":["notebookItemAnnotations.es6"],"names":["NotebookItemAnnotationsController","$scope","$filter","AnnotationService","ConfigService","NotebookService","ProjectService","StudentDataService","$translate","maxScore","localNotebookItemId","notebookItem","content","reportId","reportNoteContent","getReportNoteContentByReportId","annotations","getLatestNotebookItemAnnotations","workgroupId","maxScoreDisplay","parseInt","latestAnnotationTime","isNew","label","icon","showScore","showComment","latest","comment","score","commentSaveTime","serverSaveTime","scoreSaveTime","getLatestAnnotation","time","convertToClientTimestamp","nodeEvents","getEventsByNodeId","nodeId","n","length","visitTime","i","event","latestState","getLatestComponentStateByNodeIdAndComponentId","componentId","saveTime","latestVisitTime","getLatestVisitTime","latestSaveTime","getLatestSaveTime","getLatestAnnotationTime","type","displayAnnotation","setLabelAndIcon","$inject","NotebookItemAnnotations","bindings","templateUrl","controller","controllerAs"],"mappings":"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","file":"notebookItemAnnotations.js","sourcesContent":["'use strict';\n\nclass NotebookItemAnnotationsController {\n    constructor($scope,\n                $filter,\n                AnnotationService,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$scope = $scope;\n        this.$filter = $filter;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.maxScore = 0;\n        let localNotebookItemId = null;  // unique id that is local to this student, that identifies a note and its revisions. e.g. \"finalReport\", \"xyzabc\"\n        if (this.notebookItem != null && this.notebookItem.content != null && this.notebookItem.content.reportId != null) {\n            localNotebookItemId = this.notebookItem.localNotebookItemId;\n            let reportNoteContent = this.NotebookService.getReportNoteContentByReportId(this.notebookItem.content.reportId);\n            if (reportNoteContent != null && reportNoteContent.maxScore != null) {\n                this.maxScore = reportNoteContent.maxScore;\n            }\n        }\n\n        // get the latest annotation for this notebook item\n        this.annotations = this.AnnotationService.getLatestNotebookItemAnnotations(this.workgroupId, localNotebookItemId);\n\n        this.maxScoreDisplay = (parseInt(this.maxScore) > 0) ? '/' + this.maxScore : '';\n\n        // the latest annotation time\n        this.latestAnnotationTime = null;\n\n        // whether the annotation is new or not\n        this.isNew = false;\n\n        // the annotation label\n        this.label = '';\n\n        // the avatar icon (default to person/teacher)\n        this.icon = 'person';\n\n        this.showScore = true;\n        this.showComment = true;\n\n        // watch for new component states\n        /*\n        this.$scope.$on('studentWorkSavedToServer', (event, args) => {\n            let nodeId = args.studentWork.nodeId;\n            let componentId = args.studentWork.componentId;\n            if (nodeId === this.nodeId && componentId === this.componentId) {\n                this.isNew = false;\n            }\n        });\n\n        this.$onChanges = (changes) => {\n            this.processAnnotations();\n        };\n        */\n    }\n\n    /**\n     * Get the most recent annotation (from the current score and comment annotations)\n     * @return Object (latest annotation)\n     */\n    getLatestAnnotation() {\n        let latest = null;\n\n        if (this.annotations.comment || this.annotations.score) {\n            let commentSaveTime = this.annotations.comment ? this.annotations.comment.serverSaveTime : 0;\n            let scoreSaveTime = this.annotations.score ? this.annotations.score.serverSaveTime : 0;\n\n            if (commentSaveTime >= scoreSaveTime) {\n                latest = this.annotations.comment;\n            } else if (scoreSaveTime > commentSaveTime) {\n                latest = this.annotations.score;\n            }\n        }\n\n        return latest;\n    };\n\n    /**\n     * Calculate the save time of the latest annotation\n     * @return Number (latest annotation post time)\n     */\n    getLatestAnnotationTime() {\n        let latest = this.getLatestAnnotation();\n        let time = null;\n\n        if (latest) {\n            let serverSaveTime = latest.serverSaveTime;\n            time = this.ConfigService.convertToClientTimestamp(serverSaveTime)\n        }\n\n        return time;\n    };\n\n    /**\n     * Find nodeExited time of the latest node visit for this component\n     * @return Number (latest node exit time)\n     */\n    getLatestVisitTime() {\n        let nodeEvents = this.StudentDataService.getEventsByNodeId(this.nodeId);\n        let n = nodeEvents.length - 1;\n        let visitTime = null;\n\n        for (let i = n; i > 0; i--) {\n            let event = nodeEvents[i];\n            if (event.event === 'nodeExited') {\n                visitTime = this.ConfigService.convertToClientTimestamp(event.serverSaveTime);\n                break;\n            }\n        }\n\n        return visitTime;\n    };\n\n    /**\n     * Find and the latest save time for this component\n     * @return Number (latest save time)\n     */\n    getLatestSaveTime() {\n        let latestState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n        let saveTime = null;\n\n        if (latestState) {\n            saveTime = this.ConfigService.convertToClientTimestamp(latestState.serverSaveTime);\n        }\n\n        return saveTime;\n    };\n\n    /**\n     * Check whether the current annotation for this component is new to the\n     * workgroup (i.e. if the workgroup hasn't seen the annotation on a previous\n     * node visit and the latest annotation came after the latest component state)\n     * @return Boolean (true or false)\n     */\n    isNewAnnotation() {\n        let latestVisitTime = this.getLatestVisitTime();\n        let latestSaveTime = this.getLatestSaveTime();\n        let latestAnnotationTime = this.getLatestAnnotationTime();\n        let isNew = true;\n\n        if (latestVisitTime && (latestVisitTime > latestAnnotationTime)) {\n            isNew = false;\n        }\n\n        if (latestSaveTime && (latestSaveTime > latestAnnotationTime)) {\n            isNew = false;\n        }\n\n        return isNew;\n    };\n\n    /**\n     * Set the label based on whether this is an automated or teacher annotation\n     **/\n    setLabelAndIcon() {\n        let latest = this.getLatestAnnotation();\n\n        if (latest) {\n            if (latest.type === 'autoComment' || latest.type === 'autoScore') {\n                this.label = this.$translate('automatedFeedbackLabel');\n                this.icon = 'keyboard';\n            } else {\n                this.label = this.$translate('teacherFeedbackLabel');\n                this.icon = \"person\";\n            }\n        }\n    };\n\n    processAnnotations() {\n        if (this.annotations != null) {\n            if (this.annotations.comment || this.annotations.score) {\n                this.nodeId = this.annotations.comment ? this.annotations.comment.nodeId : this.annotations.score.nodeId;\n                this.componentId = this.annotations.comment ? this.annotations.comment.componentId : this.annotations.score.nodeId;\n\n                if (!this.ProjectService.displayAnnotation(this.annotations.score)) {\n                    // we do not want to show the score\n                    this.showScore = false;\n                }\n\n                if (!this.ProjectService.displayAnnotation(this.annotations.comment)) {\n                    // we do not want to show the comment\n                    this.showComment = false;\n                }\n\n                // set the annotation label and icon\n                this.setLabelAndIcon();\n            }\n        }\n    };\n}\n\nNotebookItemAnnotationsController.$inject = [\n    '$scope',\n    '$filter',\n    'AnnotationService',\n    'ConfigService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nconst NotebookItemAnnotations = {\n    bindings: {\n        notebookItem: '<'\n    },\n    templateUrl: 'wise5/directives/notebookItemAnnotations/notebookItemAnnotations.html',\n    controller: NotebookItemAnnotationsController,\n    controllerAs: 'notebookItemAnnotationsCtrl'\n};\n\nexport default NotebookItemAnnotations;\n"]}