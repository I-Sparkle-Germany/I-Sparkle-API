{"version":3,"sources":["summaryDisplay.es6"],"names":["SummaryDisplayController","$filter","$injector","$q","AnnotationService","ConfigService","ProjectService","$translate","numDummySamples","defaultMaxScore","maxScore","dataService","chartType","isVLEPreview","isStudentRun","get","isClassroomMonitor","isAuthoringPreview","renderDisplay","$onChanges","changes","isPreview","isAuthoring","summaryComponent","getComponentByNodeIdAndComponentId","nodeId","componentId","studentDataType","getComponentStates","periodId","then","componentStates","processComponentStates","setMaxScore","getScores","annotations","processScoreAnnotations","clearChartConfig","component","chartConfig","options","legend","enabled","exporting","credits","getDummyStudentWorkForVLEPreview","getDummyStudentWorkForAuthoringPreview","getClassmateStudentWork","retrieveLatestStudentDataByNodeIdAndComponentIdAndPeriodId","getDummyStudentScoresForVLEPreview","getDummyStudentScoresForAuthoringPreview","getClassmateScores","filterLatestScoreAnnotations","getAnnotationsByNodeIdAndPeriodId","resolveData","latestAnnotations","annotation","type","setLatestAnnotationIfNewer","convertObjectToArray","workgroupId","toWorkgroupId","latestAnnotation","serverSaveTime","obj","Object","keys","map","key","createDummyComponentStates","componentState","getLatestComponentStateByNodeIdAndComponentId","push","createDummyScoreAnnotations","getLatestScoreAnnotation","getWorkgroupId","data","deferred","defer","setTimeout","resolve","promise","choices","dummyComponentStates","dummyCounter","createDummyComponentState","studentData","studentChoices","id","getRandomChoice","Math","floor","random","length","dummyScoreAnnotations","createDummyScoreAnnotation","value","getRandomScore","ceil","summaryData","createChoicesSummaryData","createChoicesSeriesData","total","renderGraph","calculateCountsAndPercentage","updateMaxScoreIfNecessary","createScoresSummaryData","createScoresSeriesData","calculateMaxScore","maxScoreSoFar","score","getScoreFromAnnotation","max","choice","createChoiceSummaryData","text","isCorrect","addComponentStateDataToSummaryData","count","incrementSummaryData","hasCorrectness","hasCorrectAnswer","getSummaryDataCount","color","getDataPointColor","dataPoint","createDataPoint","name","y","scoreValue","createScoreSummaryData","addAnnotationDataToSummaryData","title","getGraphTitle","xAxisType","series","createSeries","createChartConfig","dataLabels","isStudentDataTypeResponses","isStudentDataTypeScores","isStudentDataType","chart","tooltip","formatter","s","point","round","xAxis","yAxis","plotOptions","pie","format","dataCount","numResponses","totalWorkgroups","getTotalWorkgroups","percentResponded","getPercentResponded","numWorkgroups","getNumberOfWorkgroupsInPeriod","$inject","SummaryDisplay","bindings","templateUrl","controller","controllerAs"],"mappings":"AAAA;;;;;;;;;;;;;IAEMA,wB;;;AACJ,oCAAYC,OAAZ,EAAqBC,SAArB,EAAgCC,EAAhC,EAAoCC,iBAApC,EAAuDC,aAAvD,EAAsEC,cAAtE,EAAsF;AAAA;;AAAA;;AACpF,SAAKL,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,UAAL,GAAkB,KAAKN,OAAL,CAAa,WAAb,CAAlB;AACA,SAAKO,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,QAAL,GAAgB,KAAKD,eAArB;AACA,SAAKE,WAAL,GAAmB,IAAnB;;AACA,QAAI,KAAKC,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,WAAKA,SAAL,GAAiB,QAAjB;AACD;;AACD,QAAI,KAAKC,YAAL,MAAuB,KAAKC,YAAL,EAA3B,EAAgD;AAC9C,WAAKH,WAAL,GAAmB,KAAKT,SAAL,CAAea,GAAf,CAAmB,oBAAnB,CAAnB;AACD,KAFD,MAEO,IAAI,KAAKC,kBAAL,MAA6B,KAAKC,kBAAL,EAAjC,EAA4D;AACjE,WAAKN,WAAL,GAAmB,KAAKT,SAAL,CAAea,GAAf,CAAmB,oBAAnB,CAAnB;AACD;;AACD,SAAKG,aAAL;;AACA,QAAI,KAAKD,kBAAL,EAAJ,EAA+B;AAC7B,WAAKE,UAAL,GAAkB,UAACC,OAAD,EAAa;AAC7B,QAAA,KAAI,CAACF,aAAL;AACD,OAFD;AAGD;AACF;;;;mCAEc;AACb,aAAO,KAAKb,aAAL,CAAmBgB,SAAnB,EAAP;AACD;;;yCAEoB;AACnB,aAAO,KAAKhB,aAAL,CAAmBiB,WAAnB,EAAP;AACD;;;mCAEc;AACb,aAAO,KAAKjB,aAAL,CAAmBS,YAAnB,EAAP;AACD;;;yCAEoB;AACnB,aAAO,KAAKT,aAAL,CAAmBW,kBAAnB,EAAP;AACD;;;oCAEe;AAAA;;AACd,UAAMO,gBAAgB,GAClB,KAAKjB,cAAL,CAAoBkB,kCAApB,CAAuD,KAAKC,MAA5D,EAAoE,KAAKC,WAAzE,CADJ;;AAEA,UAAIH,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAI,KAAKI,eAAL,KAAyB,WAA7B,EAA0C;AACxC,eAAKC,kBAAL,CAAwB,KAAKH,MAA7B,EAAqC,KAAKC,WAA1C,EAAuD,KAAKG,QAA5D,EACKC,IADL,CACU,YAA0B;AAAA,gBAAzBC,eAAyB,uEAAP,EAAO;;AAClC,YAAA,MAAI,CAACC,sBAAL,CAA4BD,eAA5B;AACD,WAHD;AAID,SALD,MAKO,IAAI,KAAKJ,eAAL,KAAyB,QAA7B,EAAuC;AAC5C,eAAKM,WAAL,CAAiBV,gBAAjB;AACA,eAAKW,SAAL,CAAe,KAAKT,MAApB,EAA4B,KAAKC,WAAjC,EAA8C,KAAKG,QAAnD,EAA6DC,IAA7D,CAAkE,UAACK,WAAD,EAAiB;AACjF,YAAA,MAAI,CAACC,uBAAL,CAA6BD,WAA7B;AACD,WAFD;AAGD;AACF,OAZD,MAYO;AACL,aAAKE,gBAAL;AACD;AACF;;;gCAEWC,S,EAAW;AACrB,UAAIA,SAAS,CAAC5B,QAAV,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,QAAL,GAAgB4B,SAAS,CAAC5B,QAA1B;AACD,OAFD,MAEO;AACL,aAAKA,QAAL,GAAgB,KAAKD,eAArB;AACD;AACF;;;uCAEkB;AACjB,WAAK8B,WAAL,GAAmB;AACjBC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAE;AADH,WADD;AAIPC,UAAAA,SAAS,EAAE;AACTD,YAAAA,OAAO,EAAE;AADA,WAJJ;AAOPE,UAAAA,OAAO,EAAE;AACPF,YAAAA,OAAO,EAAE;AADF;AAPF;AADQ,OAAnB;AAaD;;;uCAEkBjB,M,EAAQC,W,EAAaG,Q,EAAU;AAChD,UAAI,KAAKhB,YAAL,EAAJ,EAAyB;AACvB,eAAO,KAAKgC,gCAAL,CAAsCpB,MAAtC,EAA8CC,WAA9C,CAAP;AACD,OAFD,MAEO,IAAI,KAAKT,kBAAL,EAAJ,EAA+B;AACpC,eAAO,KAAK6B,sCAAL,CAA4CrB,MAA5C,EAAoDC,WAApD,CAAP;AACD,OAFM,MAEA,IAAI,KAAKZ,YAAL,EAAJ,EAAyB;AAC9B,eAAO,KAAKH,WAAL,CAAiBoC,uBAAjB,CAAyCtB,MAAzC,EAAiDC,WAAjD,EAA8DG,QAA9D,CAAP;AACD,OAFM,MAEA,IAAI,KAAKb,kBAAL,EAAJ,EAA+B;AACpC,eAAO,KAAKL,WAAL,CAAiBqC,0DAAjB,CACHvB,MADG,EACKC,WADL,EACkBG,QADlB,CAAP;AAED;AACF;;;8BAESJ,M,EAAQC,W,EAAaG,Q,EAAU;AAAA;;AACvC,UAAI,KAAKhB,YAAL,EAAJ,EAAyB;AACvB,eAAO,KAAKoC,kCAAL,CAAwCxB,MAAxC,EAAgDC,WAAhD,CAAP;AACD,OAFD,MAEO,IAAI,KAAKT,kBAAL,EAAJ,EAA+B;AACpC,eAAO,KAAKiC,wCAAL,CAA8CzB,MAA9C,EAAsDC,WAAtD,CAAP;AACD,OAFM,MAEA,IAAI,KAAKZ,YAAL,EAAJ,EAAyB;AAC9B,eAAO,KAAKH,WAAL,CAAiBwC,kBAAjB,CAAoC1B,MAApC,EAA4CC,WAA5C,EAAyDG,QAAzD,EACDC,IADC,CACI,UAACK,WAAD,EAAiB;AAC1B,iBAAO,MAAI,CAACiB,4BAAL,CAAkCjB,WAAlC,CAAP;AACD,SAHM,CAAP;AAID,OALM,MAKA,IAAI,KAAKnB,kBAAL,EAAJ,EAA+B;AACpC,YAAMmB,WAAW,GAAG,KAAKxB,WAAL,CAAiB0C,iCAAjB,CAAmD5B,MAAnD,EAA2DI,QAA3D,CAApB;AACA,eAAO,KAAKyB,WAAL,CAAiB,KAAKF,4BAAL,CAAkCjB,WAAlC,CAAjB,CAAP;AACD;AACF;;;iDAE4BA,W,EAAa;AACxC,UAAMoB,iBAAiB,GAAG,EAA1B;AADwC;AAAA;AAAA;;AAAA;AAExC,6BAAyBpB,WAAzB,8HAAsC;AAAA,cAA3BqB,UAA2B;;AACpC,cAAIA,UAAU,CAACC,IAAX,KAAoB,OAApB,IAA+BD,UAAU,CAACC,IAAX,KAAoB,WAAvD,EAAoE;AAClE,iBAAKC,0BAAL,CAAgCH,iBAAhC,EAAmDC,UAAnD;AACD;AACF;AANuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOxC,aAAO,KAAKG,oBAAL,CAA0BJ,iBAA1B,CAAP;AACD;;;+CAE0BA,iB,EAAmBC,U,EAAY;AACxD,UAAMI,WAAW,GAAGJ,UAAU,CAACK,aAA/B;AACA,UAAMC,gBAAgB,GAAGP,iBAAiB,CAACK,WAAD,CAA1C;;AACA,UAAIE,gBAAgB,IAAI,IAApB,IAA4BN,UAAU,CAACO,cAAX,GAA4BD,gBAAgB,CAACC,cAA7E,EAA6F;AAC3FR,QAAAA,iBAAiB,CAACK,WAAD,CAAjB,GAAiCJ,UAAjC;AACD;AACF;;;yCAEoBQ,G,EAAK;AACxB,aAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqB,UAACC,GAAD,EAAS;AACnC,eAAOJ,GAAG,CAACI,GAAD,CAAV;AACD,OAFM,CAAP;AAGD;;;qDAEgC3C,M,EAAQC,W,EAAa;AACpD,UAAMK,eAAe,GAAG,KAAKsC,0BAAL,EAAxB;AACA,UAAMC,cAAc,GAAG,KAAK3D,WAAL,CAClB4D,6CADkB,CAC4B9C,MAD5B,EACoCC,WADpC,CAAvB;;AAEA,UAAI4C,cAAc,IAAI,IAAtB,EAA4B;AAC1BvC,QAAAA,eAAe,CAACyC,IAAhB,CAAqBF,cAArB;AACD;;AACD,aAAO,KAAKhB,WAAL,CAAiBvB,eAAjB,CAAP;AACD;;;uDAEkCN,M,EAAQC,W,EAAa;AACtD,UAAMS,WAAW,GAAG,KAAKsC,2BAAL,EAApB;AACA,UAAMjB,UAAU,GAAG,KAAKpD,iBAAL,CAAuBsE,wBAAvB,CACfjD,MADe,EACPC,WADO,EACM,KAAKrB,aAAL,CAAmBsE,cAAnB,EADN,CAAnB;;AAEA,UAAInB,UAAU,IAAI,IAAlB,EAAwB;AACtBrB,QAAAA,WAAW,CAACqC,IAAZ,CAAiBhB,UAAjB;AACD;;AACD,aAAO,KAAKF,WAAL,CAAiBnB,WAAjB,CAAP;AACD;;;6DAEwC;AACvC,aAAO,KAAKmB,WAAL,CAAiB,KAAKe,0BAAL,EAAjB,CAAP;AACD;;;+DAE0C;AACzC,aAAO,KAAKf,WAAL,CAAiB,KAAKmB,2BAAL,EAAjB,CAAP;AACD;;;gCAEWG,I,EAAM;AAChB,UAAMC,QAAQ,GAAG,KAAK1E,EAAL,CAAQ2E,KAAR,EAAjB,CADgB,CAEhB;;AACAC,MAAAA,UAAU,CAAC,YAAM;AACfF,QAAAA,QAAQ,CAACG,OAAT,CAAiBJ,IAAjB;AACD,OAFS,EAEP,CAFO,CAAV;AAGA,aAAOC,QAAQ,CAACI,OAAhB;AACD;;;iDAE4B;AAC3B,UAAM3C,SAAS,GAAG,KAAKhC,cAAL,CAAoBkB,kCAApB,CACd,KAAKC,MADS,EACD,KAAKC,WADJ,CAAlB;AAEA,UAAMwD,OAAO,GAAG5C,SAAS,CAAC4C,OAA1B;AACA,UAAMC,oBAAoB,GAAG,EAA7B;;AACA,WAAK,IAAIC,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAG,KAAK5E,eAA/C,EAAgE4E,YAAY,EAA5E,EAAgF;AAC9ED,QAAAA,oBAAoB,CAACX,IAArB,CAA0B,KAAKa,yBAAL,CAA+BH,OAA/B,CAA1B;AACD;;AACD,aAAOC,oBAAP;AACD;;;8CAEyBD,O,EAAS;AACjC,aAAO;AACLI,QAAAA,WAAW,EAAE;AACXC,UAAAA,cAAc,EAAE,CACd;AAAEC,YAAAA,EAAE,EAAE,KAAKC,eAAL,CAAqBP,OAArB,EAA8BM;AAApC,WADc;AADL;AADR,OAAP;AAOD;;;oCAEeN,O,EAAS;AACvB,aAAOA,OAAO,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,OAAO,CAACW,MAAnC,CAAD,CAAd;AACD;;;kDAE6B;AAC5B,UAAMC,qBAAqB,GAAG,EAA9B;;AACA,WAAK,IAAIV,YAAY,GAAG,CAAxB,EAA2BA,YAAY,GAAG,KAAK5E,eAA/C,EAAgE4E,YAAY,EAA5E,EAAgF;AAC9EU,QAAAA,qBAAqB,CAACtB,IAAtB,CAA2B,KAAKuB,0BAAL,EAA3B;AACD;;AACD,aAAOD,qBAAP;AACD;;;iDAE4B;AAC3B,aAAO;AACLlB,QAAAA,IAAI,EAAE;AACJoB,UAAAA,KAAK,EAAE,KAAKC,cAAL;AADH,SADD;AAILxC,QAAAA,IAAI,EAAE;AAJD,OAAP;AAMD;;;qCAEgB;AACf,aAAOiC,IAAI,CAACQ,IAAL,CAAUR,IAAI,CAACE,MAAL,KAAgB,KAAKlF,QAA/B,CAAP;AACD;;;2CAEsBqB,e,EAAiB;AACtC,UAAMO,SAAS,GAAG,KAAKhC,cAAL,CAAoBkB,kCAApB,CACd,KAAKC,MADS,EACD,KAAKC,WADJ,CAAlB;AAEA,UAAMyE,WAAW,GAAG,KAAKC,wBAAL,CAA8B9D,SAA9B,EAAyCP,eAAzC,CAApB;;AAHsC,kCAId,KAAKsE,uBAAL,CAA6B/D,SAA7B,EAAwC6D,WAAxC,CAJc;AAAA,UAI9BvB,IAJ8B,yBAI9BA,IAJ8B;AAAA,UAIxB0B,KAJwB,yBAIxBA,KAJwB;;AAKtC,WAAKC,WAAL,CAAiB3B,IAAjB,EAAuB0B,KAAvB;AACA,WAAKE,4BAAL,CAAkCzE,eAAe,CAAC8D,MAAlD;AACD;;;4CAEuB1D,W,EAAa;AACnC,WAAKsE,yBAAL,CAA+BtE,WAA/B;AACA,UAAMgE,WAAW,GAAG,KAAKO,uBAAL,CAA6BvE,WAA7B,CAApB;;AAFmC,kCAGX,KAAKwE,sBAAL,CAA4BR,WAA5B,CAHW;AAAA,UAG3BvB,IAH2B,yBAG3BA,IAH2B;AAAA,UAGrB0B,KAHqB,yBAGrBA,KAHqB;;AAInC,WAAKC,WAAL,CAAiB3B,IAAjB,EAAuB0B,KAAvB;AACA,WAAKE,4BAAL,CAAkCrE,WAAW,CAAC0D,MAA9C;AACD;;;8CAEyB1D,W,EAAa;AACrC,WAAKzB,QAAL,GAAgB,KAAKkG,iBAAL,CAAuBzE,WAAvB,CAAhB;AACD;;;sCAEiBA,W,EAAa;AAC7B,UAAI0E,aAAa,GAAG,KAAKnG,QAAzB;AAD6B;AAAA;AAAA;;AAAA;AAE7B,8BAAyByB,WAAzB,mIAAsC;AAAA,cAA3BqB,UAA2B;AACpC,cAAMsD,KAAK,GAAG,KAAKC,sBAAL,CAA4BvD,UAA5B,CAAd;AACAqD,UAAAA,aAAa,GAAGnB,IAAI,CAACsB,GAAL,CAAS,KAAKtG,QAAd,EAAwBoG,KAAxB,CAAhB;AACD;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM7B,aAAOD,aAAP;AACD;;;6CAEwBvE,S,EAAWP,e,EAAiB;AACnD,UAAMoE,WAAW,GAAG,EAApB;AADmD;AAAA;AAAA;;AAAA;AAEnD,8BAAqB7D,SAAS,CAAC4C,OAA/B,mIAAwC;AAAA,cAA7B+B,MAA6B;AACtCd,UAAAA,WAAW,CAACc,MAAM,CAACzB,EAAR,CAAX,GAAyB,KAAK0B,uBAAL,CACrBD,MAAM,CAACzB,EADc,EACVyB,MAAM,CAACE,IADG,EACGF,MAAM,CAACG,SADV,CAAzB;AAED;AALkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAMnD,8BAA6BrF,eAA7B,mIAA8C;AAAA,cAAnCuC,cAAmC;AAC5C,eAAK+C,kCAAL,CAAwClB,WAAxC,EAAqD7B,cAArD;AACD;AARkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASnD,aAAO6B,WAAP;AACD;;;4CAEuBX,E,EAAI2B,I,EAAMC,S,EAAW;AAC3C,aAAO;AACL5B,QAAAA,EAAE,EAAEA,EADC;AAEL2B,QAAAA,IAAI,EAAEA,IAFD;AAGLC,QAAAA,SAAS,EAAEA,SAHN;AAILE,QAAAA,KAAK,EAAE;AAJF,OAAP;AAMD;;;uDAEkCnB,W,EAAa7B,c,EAAgB;AAAA;AAAA;AAAA;;AAAA;AAC9D,8BAAqBA,cAAc,CAACgB,WAAf,CAA2BC,cAAhD,mIAAgE;AAAA,cAArD0B,MAAqD;AAC9D,eAAKM,oBAAL,CAA0BpB,WAA1B,EAAuCc,MAAM,CAACzB,EAA9C;AACD;AAH6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI/D;;;4CAEuBlD,S,EAAW6D,W,EAAa;AAC9C,UAAMvB,IAAI,GAAG,EAAb;AACA,UAAI0B,KAAK,GAAG,CAAZ;AACA,UAAMkB,cAAc,GAAG,KAAKC,gBAAL,CAAsBnF,SAAtB,CAAvB;AAH8C;AAAA;AAAA;;AAAA;AAI9C,8BAAqBA,SAAS,CAAC4C,OAA/B,mIAAwC;AAAA,cAA7B+B,MAA6B;AACtC,cAAMK,KAAK,GAAG,KAAKI,mBAAL,CAAyBvB,WAAzB,EAAsCc,MAAM,CAACzB,EAA7C,CAAd;AACA,cAAMmC,KAAK,GAAG,KAAKC,iBAAL,CAAuBX,MAAvB,EAA+BO,cAA/B,CAAd;AACA,cAAMK,SAAS,GAAG,KAAKC,eAAL,CAAqBb,MAAM,CAACE,IAA5B,EAAkCG,KAAlC,EAAyCK,KAAzC,CAAlB;AACA/C,UAAAA,IAAI,CAACJ,IAAL,CAAUqD,SAAV;AACAvB,UAAAA,KAAK,IAAIgB,KAAT;AACD;AAV6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAW9C,aAAO;AAAE1C,QAAAA,IAAI,EAAEA,IAAR;AAAc0B,QAAAA,KAAK,EAAEA;AAArB,OAAP;AACD;;;qCAEgBhE,S,EAAW;AAAA;AAAA;AAAA;;AAAA;AAC1B,8BAAqBA,SAAS,CAAC4C,OAA/B,mIAAwC;AAAA,cAA7B+B,MAA6B;;AACtC,cAAIA,MAAM,CAACG,SAAX,EAAsB;AACpB,mBAAO,IAAP;AACD;AACF;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM1B,aAAO,KAAP;AACD;;;sCAEiBH,M,EAAQO,c,EAAgB;AACxC,UAAIG,KAAK,GAAG,IAAZ;;AACA,UAAIH,cAAJ,EAAoB;AAClB,YAAIP,MAAM,CAACG,SAAX,EAAsB;AACpBO,UAAAA,KAAK,GAAG,OAAR;AACD,SAFD,MAEO;AACLA,UAAAA,KAAK,GAAG,KAAR;AACD;AACF;;AACD,aAAOA,KAAP;AACD;;;oCAEeI,I,EAAMC,C,EAAGL,K,EAAO;AAC9B,aAAO;AACLI,QAAAA,IAAI,EAAEA,IADD;AAELC,QAAAA,CAAC,EAAEA,CAFE;AAGLL,QAAAA,KAAK,EAAEA;AAHF,OAAP;AAKD;;;4CAEuBxF,W,EAAa;AACnC,UAAMgE,WAAW,GAAG,EAApB;;AACA,WAAK,IAAI8B,UAAU,GAAG,CAAtB,EAAyBA,UAAU,IAAI,KAAKvH,QAA5C,EAAsDuH,UAAU,EAAhE,EAAoE;AAClE9B,QAAAA,WAAW,CAAC8B,UAAD,CAAX,GAA0B,KAAKC,sBAAL,CAA4BD,UAA5B,CAA1B;AACD;;AAJkC;AAAA;AAAA;;AAAA;AAKnC,8BAAyB9F,WAAzB,mIAAsC;AAAA,cAA3BqB,UAA2B;AACpC,eAAK2E,8BAAL,CAAoChC,WAApC,EAAiD3C,UAAjD;AACD;AAPkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQnC,aAAO2C,WAAP;AACD;;;2CAEsBW,K,EAAO;AAC5B,aAAO;AACLA,QAAAA,KAAK,EAAEA,KADF;AAELQ,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;;mDAE8BnB,W,EAAa3C,U,EAAY;AACtD,UAAMsD,KAAK,GAAG,KAAKC,sBAAL,CAA4BvD,UAA5B,CAAd;AACA,WAAK+D,oBAAL,CAA0BpB,WAA1B,EAAuCW,KAAvC;AACD;;;2CAEsBtD,U,EAAY;AACjC,aAAOA,UAAU,CAACoB,IAAX,CAAgBoB,KAAvB;AACD;;;yCAEoBG,W,EAAaX,E,EAAI;AACpCW,MAAAA,WAAW,CAACX,EAAD,CAAX,CAAgB8B,KAAhB,IAAyB,CAAzB;AACD;;;2CAEsBnB,W,EAAa;AAClC,UAAMvB,IAAI,GAAG,EAAb;AACA,UAAI0B,KAAK,GAAG,CAAZ;;AACA,WAAK,IAAI2B,UAAU,GAAG,CAAtB,EAAyBA,UAAU,IAAI,KAAKvH,QAA5C,EAAsDuH,UAAU,EAAhE,EAAoE;AAClE,YAAMX,KAAK,GAAG,KAAKI,mBAAL,CAAyBvB,WAAzB,EAAsC8B,UAAtC,CAAd;AACA,YAAMJ,SAAS,GAAG,KAAKC,eAAL,CAAqBG,UAArB,EAAiCX,KAAjC,CAAlB;AACA1C,QAAAA,IAAI,CAACJ,IAAL,CAAUqD,SAAV;AACAvB,QAAAA,KAAK,IAAIgB,KAAT;AACD;;AACD,aAAO;AAAE1C,QAAAA,IAAI,EAAEA,IAAR;AAAc0B,QAAAA,KAAK,EAAEA;AAArB,OAAP;AACD;;;gCAEW1B,I,EAAM0B,K,EAAO;AACvB,UAAM1F,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMwH,KAAK,GAAG,KAAKC,aAAL,EAAd;AACA,UAAMC,SAAS,GAAG,UAAlB;AACA,UAAMC,MAAM,GAAG,KAAKC,YAAL,CAAkB5D,IAAlB,CAAf;AACA,WAAKrC,WAAL,GAAoB,KAAKkG,iBAAL,CAAuB7H,SAAvB,EAAkCwH,KAAlC,EAAyCE,SAAzC,EAAoDhC,KAApD,EAA2DiC,MAA3D,CAApB;AACD;;;iCAEY3D,I,EAAM;AACjB,aAAO,CAAC;AACNA,QAAAA,IAAI,EAAEA,IADA;AAEN8D,QAAAA,UAAU,EAAE;AACVhG,UAAAA,OAAO,EAAE;AADC;AAFN,OAAD,CAAP;AAMD;;;oCAEe;AACd,UAAI,KAAKiG,0BAAL,EAAJ,EAAuC;AACrC,eAAO,KAAKpI,UAAL,CAAgB,sBAAhB,CAAP;AACD,OAFD,MAEO,IAAI,KAAKqI,uBAAL,EAAJ,EAAoC;AACzC,eAAO,KAAKrI,UAAL,CAAgB,qBAAhB,CAAP;AACD;AACF;;;iDAE4B;AAC3B,aAAO,KAAKsI,iBAAL,CAAuB,WAAvB,CAAP;AACD;;;8CAEyB;AACxB,aAAO,KAAKA,iBAAL,CAAuB,QAAvB,CAAP;AACD;;;sCAEiBlH,e,EAAiB;AACjC,aAAO,KAAKA,eAAL,KAAyBA,eAAhC;AACD;;;sCAEiBf,S,EAAWwH,K,EAAOE,S,EAAWhC,K,EAAOiC,M,EAAQ;AAC5D,UAAMhG,WAAW,GAAG;AAClBC,QAAAA,OAAO,EAAE;AACPsG,UAAAA,KAAK,EAAE;AACLrF,YAAAA,IAAI,EAAE7C;AADD,WADA;AAIP6B,UAAAA,MAAM,EAAE;AACNC,YAAAA,OAAO,EAAE;AADH,WAJD;AAOPqG,UAAAA,OAAO,EAAE;AACPC,YAAAA,SAAS,EAAE,mBAASC,CAAT,EAAYC,KAAZ,EAAmB;AAC5B,qBAAO,KAAK9E,GAAL,GAAW,IAAX,GAAkBsB,IAAI,CAACyD,KAAL,CAAW,MAAM,KAAKnB,CAAX,GAAe1B,KAA1B,CAAlB,GAAqD,GAA5D;AACD;AAHM,WAPF;AAYP3D,UAAAA,SAAS,EAAE;AACTD,YAAAA,OAAO,EAAE;AADA,WAZJ;AAePE,UAAAA,OAAO,EAAE;AACPF,YAAAA,OAAO,EAAE;AADF;AAfF,SADS;AAoBlB0F,QAAAA,KAAK,EAAE;AACLjB,UAAAA,IAAI,EAAEiB;AADD,SApBW;AAuBlBgB,QAAAA,KAAK,EAAE;AACL3F,UAAAA,IAAI,EAAE6E;AADD,SAvBW;AA0BlBe,QAAAA,KAAK,EAAE;AACLjB,UAAAA,KAAK,EAAE;AACLjB,YAAAA,IAAI,EAAE,KAAK5G,UAAL,CAAgB,OAAhB;AADD;AADF,SA1BW;AA+BlBgI,QAAAA,MAAM,EAAEA;AA/BU,OAApB;;AAiCA,UAAI3H,SAAS,KAAK,KAAlB,EAAyB;AACvB2B,QAAAA,WAAW,CAACC,OAAZ,CAAoB8G,WAApB,GAAkC;AAChCC,UAAAA,GAAG,EAAE;AACHb,YAAAA,UAAU,EAAE;AACVhG,cAAAA,OAAO,EAAE,IADC;AAEV8G,cAAAA,MAAM,EAAE;AAFE;AADT;AAD2B,SAAlC;AAQD;;AACD,aAAOjH,WAAP;AACD;;;iDAE4BkH,S,EAAW;AACtC,WAAKC,YAAL,GAAoBD,SAApB;AACA,WAAKE,eAAL,GAAuB,KAAKC,kBAAL,CAAwBH,SAAxB,CAAvB;AACA,WAAKI,gBAAL,GAAwB,KAAKC,mBAAL,CAAyBL,SAAzB,EAAoC,KAAKE,eAAzC,CAAxB;AACD;;;uCAEkBF,S,EAAW;AAC5B,UAAI,KAAK5I,YAAL,MAAuB,KAAKI,kBAAL,EAA3B,EAAsD;AACpD,eAAOwI,SAAP;AACD,OAFD,MAEO;AACL,YAAMM,aAAa,GAAG,KAAK1J,aAAL,CAAmB2J,6BAAnB,CAAiD,KAAKnI,QAAtD,CAAtB;AACA,eAAO6D,IAAI,CAACsB,GAAL,CAAS+C,aAAT,EAAwBN,SAAxB,CAAP;AACD;AACF;;;wCAEmBC,Y,EAAcC,e,EAAiB;AACjD,aAAOjE,IAAI,CAACC,KAAL,CAAW,MAAM+D,YAAN,GAAqBC,eAAhC,CAAP;AACD;;;wCAEmBxD,W,EAAaX,E,EAAI;AACnC,aAAOW,WAAW,CAACX,EAAD,CAAX,CAAgB8B,KAAvB;AACD;;;;;;AAGHtH,wBAAwB,CAACiK,OAAzB,GAAmC,CACjC,SADiC,EAEjC,WAFiC,EAGjC,IAHiC,EAIjC,mBAJiC,EAKjC,eALiC,EAMjC,gBANiC,EAOjC,oBAPiC,CAAnC;AAUA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACR1I,IAAAA,MAAM,EAAE,GADA;AAERC,IAAAA,WAAW,EAAE,GAFL;AAGRC,IAAAA,eAAe,EAAE,GAHT;AAIRE,IAAAA,QAAQ,EAAE,GAJF;AAKRjB,IAAAA,SAAS,EAAE;AALH,GADW;AAQrBwJ,EAAAA,WAAW,EAAE,qDARQ;AASrBC,EAAAA,UAAU,EAAErK,wBATS;AAUrBsK,EAAAA,YAAY,EAAE;AAVO,CAAvB;eAaeJ,c","sourcesContent":["'use strict';\n\nclass SummaryDisplayController {\n  constructor($filter, $injector, $q, AnnotationService, ConfigService, ProjectService) {\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.$translate = this.$filter('translate');\n    this.numDummySamples = 20;\n    this.defaultMaxScore = 5;\n    this.maxScore = this.defaultMaxScore;\n    this.dataService = null;\n    if (this.chartType == null) {\n      this.chartType = 'column';\n    }\n    if (this.isVLEPreview() || this.isStudentRun()) {\n      this.dataService = this.$injector.get('StudentDataService');\n    } else if (this.isClassroomMonitor() || this.isAuthoringPreview()) {\n      this.dataService = this.$injector.get('TeacherDataService'); \n    }\n    this.renderDisplay();\n    if (this.isAuthoringPreview()) {\n      this.$onChanges = (changes) => {\n        this.renderDisplay();\n      }\n    }\n  }\n\n  isVLEPreview() {\n    return this.ConfigService.isPreview();\n  }\n\n  isAuthoringPreview() {\n    return this.ConfigService.isAuthoring();\n  }\n\n  isStudentRun() {\n    return this.ConfigService.isStudentRun();\n  }\n\n  isClassroomMonitor() {\n    return this.ConfigService.isClassroomMonitor();\n  }\n\n  renderDisplay() {\n    const summaryComponent = \n        this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, this.componentId);\n    if (summaryComponent != null) {\n      if (this.studentDataType === 'responses') {\n        this.getComponentStates(this.nodeId, this.componentId, this.periodId)\n            .then((componentStates = []) => {\n          this.processComponentStates(componentStates);\n        });\n      } else if (this.studentDataType === 'scores') {\n        this.setMaxScore(summaryComponent);\n        this.getScores(this.nodeId, this.componentId, this.periodId).then((annotations) => {\n          this.processScoreAnnotations(annotations);\n        });\n      }\n    } else {\n      this.clearChartConfig();\n    }\n  }\n\n  setMaxScore(component) {\n    if (component.maxScore != null) {\n      this.maxScore = component.maxScore;\n    } else {\n      this.maxScore = this.defaultMaxScore;\n    }\n  }\n\n  clearChartConfig() {\n    this.chartConfig = {\n      options: {\n        legend: {\n          enabled: false\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        }\n      }\n    };\n  }\n\n  getComponentStates(nodeId, componentId, periodId) {\n    if (this.isVLEPreview()) {\n      return this.getDummyStudentWorkForVLEPreview(nodeId, componentId);\n    } else if (this.isAuthoringPreview()) {\n      return this.getDummyStudentWorkForAuthoringPreview(nodeId, componentId);\n    } else if (this.isStudentRun()) {\n      return this.dataService.getClassmateStudentWork(nodeId, componentId, periodId);\n    } else if (this.isClassroomMonitor()) {\n      return this.dataService.retrieveLatestStudentDataByNodeIdAndComponentIdAndPeriodId(\n          nodeId, componentId, periodId);\n    }\n  }\n\n  getScores(nodeId, componentId, periodId) {\n    if (this.isVLEPreview()) {\n      return this.getDummyStudentScoresForVLEPreview(nodeId, componentId);\n    } else if (this.isAuthoringPreview()) {\n      return this.getDummyStudentScoresForAuthoringPreview(nodeId, componentId);\n    } else if (this.isStudentRun()) {\n      return this.dataService.getClassmateScores(nodeId, componentId, periodId\n          ).then((annotations) => {\n        return this.filterLatestScoreAnnotations(annotations);\n      });\n    } else if (this.isClassroomMonitor()) {\n      const annotations = this.dataService.getAnnotationsByNodeIdAndPeriodId(nodeId, periodId);\n      return this.resolveData(this.filterLatestScoreAnnotations(annotations));\n    }\n  }\n\n  filterLatestScoreAnnotations(annotations) {\n    const latestAnnotations = {};\n    for (const annotation of annotations) {\n      if (annotation.type === 'score' || annotation.type === 'autoScore') {\n        this.setLatestAnnotationIfNewer(latestAnnotations, annotation);\n      }\n    }\n    return this.convertObjectToArray(latestAnnotations);\n  }\n\n  setLatestAnnotationIfNewer(latestAnnotations, annotation) {\n    const workgroupId = annotation.toWorkgroupId;\n    const latestAnnotation = latestAnnotations[workgroupId];\n    if (latestAnnotation == null || annotation.serverSaveTime > latestAnnotation.serverSaveTime) {\n      latestAnnotations[workgroupId] = annotation;\n    }\n  }\n\n  convertObjectToArray(obj) {\n    return Object.keys(obj).map((key) => {\n      return obj[key]\n    }) \n  }\n\n  getDummyStudentWorkForVLEPreview(nodeId, componentId) {\n    const componentStates = this.createDummyComponentStates();\n    const componentState = this.dataService\n        .getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (componentState != null) {\n      componentStates.push(componentState);\n    }\n    return this.resolveData(componentStates);\n  }\n\n  getDummyStudentScoresForVLEPreview(nodeId, componentId) {\n    const annotations = this.createDummyScoreAnnotations();\n    const annotation = this.AnnotationService.getLatestScoreAnnotation(\n        nodeId, componentId, this.ConfigService.getWorkgroupId());\n    if (annotation != null) {\n      annotations.push(annotation);\n    }\n    return this.resolveData(annotations);\n  }\n\n  getDummyStudentWorkForAuthoringPreview() {\n    return this.resolveData(this.createDummyComponentStates());\n  }\n\n  getDummyStudentScoresForAuthoringPreview() {\n    return this.resolveData(this.createDummyScoreAnnotations());\n  }\n\n  resolveData(data) {\n    const deferred = this.$q.defer();\n    // We need to set a delay otherwise the graph won't render properly\n    setTimeout(() => {\n      deferred.resolve(data);\n    }, 1);\n    return deferred.promise;\n  }\n\n  createDummyComponentStates() {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(\n        this.nodeId, this.componentId);\n    const choices = component.choices;\n    const dummyComponentStates = [];\n    for (let dummyCounter = 0; dummyCounter < this.numDummySamples; dummyCounter++) {\n      dummyComponentStates.push(this.createDummyComponentState(choices));\n    }\n    return dummyComponentStates;\n  }\n\n  createDummyComponentState(choices) {\n    return {\n      studentData: {\n        studentChoices: [\n          { id: this.getRandomChoice(choices).id }\n        ]\n      }\n    }; \n  }\n  \n  getRandomChoice(choices) {\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  createDummyScoreAnnotations() {\n    const dummyScoreAnnotations = [];\n    for (let dummyCounter = 0; dummyCounter < this.numDummySamples; dummyCounter++) {\n      dummyScoreAnnotations.push(this.createDummyScoreAnnotation());\n    }\n    return dummyScoreAnnotations;\n  }\n\n  createDummyScoreAnnotation() {\n    return {\n      data: {\n        value: this.getRandomScore()\n      },\n      type: 'score'\n    }; \n  }\n\n  getRandomScore() {\n    return Math.ceil(Math.random() * this.maxScore);\n  }\n\n  processComponentStates(componentStates) {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(\n        this.nodeId, this.componentId);\n    const summaryData = this.createChoicesSummaryData(component, componentStates);\n    const { data, total } = this.createChoicesSeriesData(component, summaryData);\n    this.renderGraph(data, total);\n    this.calculateCountsAndPercentage(componentStates.length);\n  }\n\n  processScoreAnnotations(annotations) {\n    this.updateMaxScoreIfNecessary(annotations);\n    const summaryData = this.createScoresSummaryData(annotations);\n    const { data, total } = this.createScoresSeriesData(summaryData);\n    this.renderGraph(data, total);\n    this.calculateCountsAndPercentage(annotations.length);\n  }\n  \n  updateMaxScoreIfNecessary(annotations) {\n    this.maxScore = this.calculateMaxScore(annotations);\n  }\n\n  calculateMaxScore(annotations) {\n    let maxScoreSoFar = this.maxScore;\n    for (const annotation of annotations) {\n      const score = this.getScoreFromAnnotation(annotation);\n      maxScoreSoFar = Math.max(this.maxScore, score);\n    }\n    return maxScoreSoFar;\n  }\n\n  createChoicesSummaryData(component, componentStates) {\n    const summaryData = {};\n    for (const choice of component.choices) {\n      summaryData[choice.id] = this.createChoiceSummaryData(\n          choice.id, choice.text, choice.isCorrect);\n    }\n    for (const componentState of componentStates) {\n      this.addComponentStateDataToSummaryData(summaryData, componentState);\n    }\n    return summaryData;\n  }\n\n  createChoiceSummaryData(id, text, isCorrect) {\n    return {\n      id: id,\n      text: text,\n      isCorrect: isCorrect,\n      count: 0\n    };\n  }\n\n  addComponentStateDataToSummaryData(summaryData, componentState) {\n    for (const choice of componentState.studentData.studentChoices) {\n      this.incrementSummaryData(summaryData, choice.id);\n    }\n  }\n\n  createChoicesSeriesData(component, summaryData) {\n    const data = [];\n    let total = 0;\n    const hasCorrectness = this.hasCorrectAnswer(component);\n    for (const choice of component.choices) {\n      const count = this.getSummaryDataCount(summaryData, choice.id);\n      const color = this.getDataPointColor(choice, hasCorrectness);\n      const dataPoint = this.createDataPoint(choice.text, count, color);\n      data.push(dataPoint);\n      total += count;\n    }\n    return { data: data, total: total };\n  }\n\n  hasCorrectAnswer(component) {\n    for (const choice of component.choices) {\n      if (choice.isCorrect) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getDataPointColor(choice, hasCorrectness) {\n    let color = null;\n    if (hasCorrectness) {\n      if (choice.isCorrect) {\n        color = 'green';\n      } else {\n        color = 'red';\n      }\n    }\n    return color;\n  }\n  \n  createDataPoint(name, y, color) {\n    return {\n      name: name,\n      y: y,\n      color: color\n    };\n  }\n\n  createScoresSummaryData(annotations) {\n    const summaryData = {};\n    for (let scoreValue = 0; scoreValue <= this.maxScore; scoreValue++) {\n      summaryData[scoreValue] = this.createScoreSummaryData(scoreValue);\n    }\n    for (const annotation of annotations) {\n      this.addAnnotationDataToSummaryData(summaryData, annotation);\n    }\n    return summaryData;\n  }\n\n  createScoreSummaryData(score) {\n    return {\n      score: score,\n      count: 0\n    };\n  }\n\n  addAnnotationDataToSummaryData(summaryData, annotation) {\n    const score = this.getScoreFromAnnotation(annotation);\n    this.incrementSummaryData(summaryData, score);\n  }\n\n  getScoreFromAnnotation(annotation) {\n    return annotation.data.value;\n  }\n\n  incrementSummaryData(summaryData, id) {\n    summaryData[id].count += 1;\n  }\n\n  createScoresSeriesData(summaryData) {\n    const data = [];\n    let total = 0;\n    for (let scoreValue = 1; scoreValue <= this.maxScore; scoreValue++) {\n      const count = this.getSummaryDataCount(summaryData, scoreValue);\n      const dataPoint = this.createDataPoint(scoreValue, count);\n      data.push(dataPoint);\n      total += count;\n    }\n    return { data: data, total: total }; \n  }\n\n  renderGraph(data, total) {\n    const chartType = this.chartType;\n    const title = this.getGraphTitle();\n    const xAxisType = 'category';\n    const series = this.createSeries(data);\n    this.chartConfig =  this.createChartConfig(chartType, title, xAxisType, total, series);\n  }\n\n  createSeries(data) {\n    return [{\n      data: data,\n      dataLabels: {\n        enabled: true\n      }\n    }];\n  }\n\n  getGraphTitle() {\n    if (this.isStudentDataTypeResponses()) {\n      return this.$translate('CLASS_CHOICE_RESULTS');\n    } else if (this.isStudentDataTypeScores()) {\n      return this.$translate('CLASS_SCORE_RESULTS');\n    }\n  }\n\n  isStudentDataTypeResponses() {\n    return this.isStudentDataType('responses');\n  }\n\n  isStudentDataTypeScores() {\n    return this.isStudentDataType('scores');\n  }\n  \n  isStudentDataType(studentDataType) {\n    return this.studentDataType === studentDataType;\n  }\n\n  createChartConfig(chartType, title, xAxisType, total, series) {\n    const chartConfig = {\n      options: {\n        chart: {\n          type: chartType\n        },\n        legend: {\n          enabled: false\n        },\n        tooltip: {\n          formatter: function(s, point) {\n            return this.key + ': ' + Math.round(100 * this.y / total) + '%';\n          }\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        type: xAxisType\n      },\n      yAxis: {\n        title: {\n          text: this.$translate('COUNT')\n        }\n      },\n      series: series\n    };\n    if (chartType === 'pie') {\n      chartConfig.options.plotOptions = {\n        pie: {\n          dataLabels: {\n            enabled: true,\n            format: '<br>{point.name}</b>: {point.y}'\n          }\n        }\n      };\n    }\n    return chartConfig;\n  }\n\n  calculateCountsAndPercentage(dataCount) {\n    this.numResponses = dataCount;\n    this.totalWorkgroups = this.getTotalWorkgroups(dataCount);\n    this.percentResponded = this.getPercentResponded(dataCount, this.totalWorkgroups); \n  }\n\n  getTotalWorkgroups(dataCount) {\n    if (this.isVLEPreview() || this.isAuthoringPreview()) {\n      return dataCount;\n    } else {\n      const numWorkgroups = this.ConfigService.getNumberOfWorkgroupsInPeriod(this.periodId);\n      return Math.max(numWorkgroups, dataCount);\n    }\n  }\n\n  getPercentResponded(numResponses, totalWorkgroups) {\n    return Math.floor(100 * numResponses / totalWorkgroups);\n  }\n\n  getSummaryDataCount(summaryData, id) {\n    return summaryData[id].count;\n  }\n}\n\nSummaryDisplayController.$inject = [\n  '$filter',\n  '$injector',\n  '$q',\n  'AnnotationService',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService'\n];\n\nconst SummaryDisplay = {\n  bindings: {\n    nodeId: '<',\n    componentId: '<',\n    studentDataType: '<',\n    periodId: '<',\n    chartType: '<'\n  },\n  templateUrl: 'wise5/directives/summaryDisplay/summaryDisplay.html',\n  controller: SummaryDisplayController,\n  controllerAs: 'summaryDisplayCtrl'\n}\n\nexport default SummaryDisplay;"],"file":"summaryDisplay.js"}