{"version":3,"sources":["summaryDisplay.es6"],"names":["SummaryDisplayController","$filter","$injector","$q","ConfigService","ProjectService","$translate","dataService","chartType","mode","getMode","isPreview","get","renderDisplay","$onChanges","changes","summaryComponent","getComponentByNodeIdAndComponentId","nodeId","componentId","getComponentStates","periodId","then","componentStates","processComponentStates","clearChartConfig","chartConfig","options","legend","enabled","exporting","credits","getClassmateStudentWorkForPreview","getClassmateStudentWork","retrieveStudentDataByNodeIdAndComponentIdAndPeriodId","createDummyClassmateStudentWork","componentState","getLatestComponentStateByNodeIdAndComponentId","push","deferred","defer","setTimeout","resolve","promise","component","choices","dummyComponentStates","dummyCounter","createDummyComponentState","studentData","studentChoices","id","getRandomChoice","Math","floor","random","length","summaryData","createSummaryData","createSeriesData","data","total","series","createSeries","title","xAxisType","createChartConfig","numResponses","totalWorkgroups","getTotalWorkgroups","percentResponded","getPercentResponded","getNumberOfWorkgroupsInPeriod","choice","createChoiceSummaryData","text","isCorrect","addComponentStateDataToSummaryData","count","incrementSummaryData","chart","type","tooltip","formatter","s","point","key","round","y","xAxis","yAxis","plotOptions","pie","dataLabels","format","hasCorrectness","hasCorrectAnswer","getSummaryDataCount","color","getDataPointColor","dataPoint","createDataPoint","name","$inject","SummaryDisplay","bindings","templateUrl","controller","controllerAs"],"mappings":"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","sourcesContent":["'use strict';\n\nclass SummaryDisplayController {\n  constructor($filter,\n      $injector,\n      $q,\n      ConfigService,\n      ProjectService) {\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.$translate = this.$filter('translate');\n    this.dataService = null;\n    if (this.chartType == null) {\n      this.chartType = 'column';\n    }\n    const mode = this.ConfigService.getMode();\n    if (this.ConfigService.isPreview() || mode === 'studentRun') {\n      this.dataService = this.$injector.get('StudentDataService');\n    } else if (mode === 'classroomMonitor' || mode === 'author') {\n      this.dataService = this.$injector.get('TeacherDataService'); \n    }\n    this.renderDisplay();\n    if (mode === 'author') {\n      this.$onChanges = (changes) => {\n        this.renderDisplay();\n      }\n    }\n  }\n\n  renderDisplay() {\n    const summaryComponent = \n        this.ProjectService.getComponentByNodeIdAndComponentId(this.nodeId, this.componentId);\n    if (summaryComponent != null) {\n      this.getComponentStates(this.nodeId, this.componentId, this.periodId)\n          .then((componentStates = []) => {\n        this.processComponentStates(componentStates);\n      });\n    } else {\n      this.clearChartConfig();\n    }\n  }\n\n  clearChartConfig() {\n    this.chartConfig = {\n      options: {\n        legend: {\n          enabled: false\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        }\n      }\n    };\n  }\n\n  getComponentStates(nodeId, componentId, periodId) {\n    if (this.ConfigService.isPreview() || this.ConfigService.getMode() === 'author') {\n      return this.getClassmateStudentWorkForPreview(nodeId, componentId);\n    } else if (this.ConfigService.getMode() === 'studentRun') {\n      return this.dataService.getClassmateStudentWork(nodeId, componentId, periodId);\n    } else if (this.ConfigService.getMode() === 'classroomMonitor') {\n      return this.dataService.retrieveStudentDataByNodeIdAndComponentIdAndPeriodId(\n          nodeId, componentId, periodId);\n    }\n  }\n\n  getClassmateStudentWorkForPreview(nodeId, componentId) {\n    const componentStates = this.createDummyClassmateStudentWork();\n    if (this.ConfigService.isPreview()) {\n      const componentState = this.dataService\n          .getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n      if (componentState != null) {\n        componentStates.push(componentState);\n      }\n    }\n    // We need to set a delay otherwise the graph won't render properly\n    const deferred = this.$q.defer();\n    setTimeout(function() {\n      deferred.resolve(componentStates);\n    }, 1);\n    return deferred.promise;\n  }\n\n  createDummyClassmateStudentWork() {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(\n        this.nodeId, this.componentId);\n    const choices = component.choices;\n    const dummyComponentStates = [];\n    for (let dummyCounter = 0; dummyCounter < 10; dummyCounter++) {\n      dummyComponentStates.push(this.createDummyComponentState(choices));\n    }\n    return dummyComponentStates;\n  }\n\n  createDummyComponentState(choices) {\n    return {\n      studentData: {\n        studentChoices: [\n          { id: this.getRandomChoice(choices).id }\n        ]\n      }\n    }; \n  }\n  \n  getRandomChoice(choices) {\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  processComponentStates(componentStates) {\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(\n        this.nodeId, this.componentId);\n    const summaryData = this.createSummaryData(component, componentStates);\n    const { data, total } = this.createSeriesData(component, summaryData);\n    const series = this.createSeries(data);\n    const chartType = this.chartType;\n    const title = this.$translate('CLASS_RESULTS');\n    const xAxisType = 'category';\n    this.chartConfig =  this.createChartConfig(chartType, title, xAxisType, total, series);\n    this.numResponses = componentStates.length;\n    this.totalWorkgroups = this.getTotalWorkgroups(componentStates);\n    this.percentResponded = this.getPercentResponded(this.numResponses, this.totalWorkgroups);\n  }\n\n  getTotalWorkgroups(componentStates) {\n    if (this.ConfigService.isPreview() || this.ConfigService.getMode() === 'author') {\n      return componentStates.length;\n    } else {\n      return this.ConfigService.getNumberOfWorkgroupsInPeriod(this.periodId);\n    }\n  }\n\n  getPercentResponded(numResponses, totalWorkgroups) {\n    return Math.floor(100 * numResponses / totalWorkgroups);\n  }\n\n  createSummaryData(component, componentStates) {\n    const summaryData = {};\n    for (const choice of component.choices) {\n      summaryData[choice.id] = this.createChoiceSummaryData(\n          choice.id, choice.text, choice.isCorrect);\n    }\n    for (const componentState of componentStates) {\n      this.addComponentStateDataToSummaryData(summaryData, componentState);\n    }\n    return summaryData;\n  }\n\n  createChoiceSummaryData(id, text, isCorrect) {\n    return {\n      id: id,\n      text: text,\n      isCorrect: isCorrect,\n      count: 0\n    };\n  }\n\n  addComponentStateDataToSummaryData(summaryData, componentState) {\n    for (const choice of componentState.studentData.studentChoices) {\n      this.incrementSummaryData(summaryData, choice.id);\n    }\n  }\n\n  incrementSummaryData(summaryData, id) {\n    summaryData[id].count += 1;\n  }\n\n  getSummaryDataCount(summaryData, id) {\n    return summaryData[id].count;\n  }\n\n  createChartConfig(chartType, title, xAxisType, total, series) {\n    const chartConfig = {\n      options: {\n        chart: {\n          type: chartType\n        },\n        legend: {\n          enabled: false\n        },\n        tooltip: {\n          formatter: function(s, point) {\n            return this.key + ': ' + Math.round(100 * this.y / total) + '%';\n          }\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        }\n      },\n      title: {\n        text: title\n      },\n      xAxis: {\n        type: xAxisType\n      },\n      yAxis: {\n        title: {\n          text: this.$translate('COUNT')\n        }\n      },\n      series: series\n    };\n    if (chartType === 'pie') {\n      chartConfig.options.plotOptions = {\n        pie: {\n          dataLabels: {\n            enabled: true,\n            format: '<br>{point.name}</b>: {point.y}'\n          }\n        }\n      };\n    }\n    return chartConfig;\n  }\n\n  hasCorrectAnswer(component) {\n    for (const choice of component.choices) {\n      if (choice.isCorrect) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  createSeriesData(component, summaryData) {\n    const data = [];\n    let total = 0;\n    const hasCorrectness = this.hasCorrectAnswer(component);\n    for (const choice of component.choices) {\n      const count = this.getSummaryDataCount(summaryData, choice.id);\n      total += count;\n      const color = this.getDataPointColor(choice, hasCorrectness);\n      const dataPoint = this.createDataPoint(choice.text, count, color);\n      data.push(dataPoint);\n    }\n    return { data: data, total: total };\n  }\n\n  getDataPointColor(choice, hasCorrectness) {\n    let color = null;\n    if (hasCorrectness) {\n      if (choice.isCorrect) {\n        color = 'green';\n      } else {\n        color = 'red';\n      }\n    }\n    return color;\n  }\n  \n  createDataPoint(name, y, color) {\n    return {\n      name: name,\n      y: y,\n      color: color\n    };\n  }\n\n  createSeries(data) {\n    return [{\n      data: data,\n      dataLabels: {\n        enabled: true\n      }\n    }];\n  }\n}\n\nSummaryDisplayController.$inject = [\n  '$filter',\n  '$injector',\n  '$q',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService'\n];\n\nconst SummaryDisplay = {\n  bindings: {\n    nodeId: '<',\n    componentId: '<',\n    periodId: '<',\n    chartType: '<'\n  },\n  templateUrl: 'wise5/directives/summaryDisplay/summaryDisplay.html',\n  controller: SummaryDisplayController,\n  controllerAs: 'summaryDisplayCtrl'\n}\n\nexport default SummaryDisplay;"],"file":"summaryDisplay.js"}