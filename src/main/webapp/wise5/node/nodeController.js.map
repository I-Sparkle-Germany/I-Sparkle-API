{"version":3,"sources":["nodeController.es6"],"names":["NodeController","$filter","$q","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","$translate","autoSaveInterval","nodeId","nodeContent","nodeStatus","nodeTitle","dirtyComponentIds","dirtySubmitComponentIds","submit","workgroupId","getWorkgroupId","teacherWorkgroupId","getTeacherWorkgroupId","componentToScope","saveMessage","text","time","getCurrentNode","isApplicationNode","getCurrentNodeId","currentNode","id","getNodeById","getNodeTitleByNodeId","nodeStatuses","calculateDisabled","startAutoSaveInterval","registerExitListener","hasTransitionLogic","evaluateTransitionLogicOn","evaluateTransitionLogic","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","latestClientSaveTime","clientSaveTime","isSubmit","setSaveMessage","componentId","componentType","category","event","eventData","saveVLEEvent","$on","args","isAutoSave","nodeContainsComponent","createAndSaveComponentData","componentState","notifyConnectedParts","isDirty","index","indexOf","push","splice","nodeToExit","saveTriggeredBy","stopAutoSaveInterval","nodeUnloaded","script","retrieveScript","then","Function","call","childScope","component","revisions","componentStates","getComponentStatesByNodeIdAndComponentId","$event","isComponentDisabled","getRevisions","allowRevert","componentController","openResponseController","drawController","$broadcast","discussionController","tableController","graphController","lockAfterSubmit","getComponentStatesByNodeId","isSubmitted","isWorkSubmitted","isDisabled","components","c","length","getComponents","tempComponent","tempComponentId","result","getComponentTemplatePath","showSaveButton","showSubmitButton","componentContent","message","autoSaveIntervalId","setInterval","clearInterval","createComponentStates","componentAnnotations","componentEvents","nodeStates","annotations","concat","saveToServer","savedStudentDataResponse","componentAnnotation","type","studentWorkList","latestStudentWork","serverSaveTime","convertToClientTimestamp","componentStatePromises","getComponentById","runId","getRunId","periodId","getPeriodId","getComponentState","componentStatePromise","getComponentStateFromChildScope","all","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","changedComponentId","connectedComponents","cc","connectedComponentParams","connectedComponentId","connectedNodeId","connectedComponent","componentScope","handleConnectedComponentStudentDataChanged","submitDirty","l","latestState","getComponentStateByComponentId","logOutListener","$inject"],"mappings":";;;;;;;;;;IAAMA,c;AACF,4BAAYC,OAAZ,EACYC,EADZ,EAEYC,UAFZ,EAGYC,MAHZ,EAIYC,iBAJZ,EAKYC,aALZ,EAMYC,WANZ,EAOYC,eAPZ,EAQYC,cARZ,EASYC,kBATZ,EASgC;AAAA;;AAAA;;AAE5B,aAAKT,OAAL,GAAeA,OAAf;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,WAAL,GAAmBA,WAAnB;AACA,aAAKC,eAAL,GAAuBA,eAAvB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA,aAAKC,UAAL,GAAkB,KAAKV,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKW,gBAAL,GAAwB,KAAxB;;AAEA;AACA,aAAKC,MAAL,GAAc,IAAd;;AAEA;AACA,aAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,aAAKC,UAAL,GAAkB,IAAlB;;AAEA;AACA,aAAKC,SAAL,GAAiB,IAAjB;;AAEA;AACA,aAAKC,iBAAL,GAAyB,EAAzB;;AAEA;AACA,aAAKC,uBAAL,GAA+B,EAA/B;;AAEA;AACA,aAAKC,MAAL,GAAc,KAAd;;AAEA,aAAKC,WAAL,GAAmB,KAAKd,aAAL,CAAmBe,cAAnB,EAAnB;;AAEA,aAAKC,kBAAL,GAA0B,KAAKhB,aAAL,CAAmBiB,qBAAnB,EAA1B;;AAEA;;;;AAIA,aAAKC,gBAAL,GAAwB,EAAxB;;AAEA;AACA,aAAKC,WAAL,GAAmB;AACfC,kBAAM,EADS;AAEfC,kBAAM;AAFS,SAAnB;;AAKA;AACA,YAAI,KAAKjB,kBAAL,CAAwBkB,cAAxB,MAA4C,KAAKnB,cAAL,CAAoBoB,iBAApB,CAAsC,KAAKnB,kBAAL,CAAwBoB,gBAAxB,EAAtC,CAAhD,EAAmI;AAC/H;AACA,gBAAIC,cAAc,KAAKrB,kBAAL,CAAwBkB,cAAxB,EAAlB;AACA,gBAAIG,eAAe,IAAnB,EAAyB;AACrB,qBAAKlB,MAAL,GAAckB,YAAYC,EAA1B;AACH;;AAED;AACA,iBAAKlB,WAAL,GAAmB,KAAKL,cAAL,CAAoBwB,WAApB,CAAgC,KAAKpB,MAArC,CAAnB;;AAEA,iBAAKG,SAAL,GAAiB,KAAKP,cAAL,CAAoByB,oBAApB,CAAyC,KAAKrB,MAA9C,CAAjB;;AAEA,iBAAKE,UAAL,GAAkB,KAAKL,kBAAL,CAAwByB,YAAxB,CAAqC,KAAKtB,MAA1C,CAAlB;;AAEA;AACA;;AAEA;AACA,iBAAKuB,iBAAL;;AAEA;;AAEA;AACA,iBAAKC,qBAAL;;AAEA;AACA,iBAAKC,oBAAL;;AAEA,gBAAI,KAAK/B,WAAL,CAAiBgC,kBAAjB,MAAyC,KAAKhC,WAAL,CAAiBiC,yBAAjB,CAA2C,WAA3C,CAA7C,EAAsG;AAClG,qBAAKjC,WAAL,CAAiBkC,uBAAjB;AACH;;AAED;AACA;AACA;AACA,gBAAIC,uBAAuB,KAAKhC,kBAAL,CAAwBiC,6CAAxB,CAAsE,KAAK9B,MAA3E,CAA3B;AACA,gBAAI6B,oBAAJ,EAA0B;AACtB,oBAAIE,uBAAuBF,qBAAqBG,cAAhD;AACA,oBAAIH,qBAAqBI,QAAzB,EAAmC;AAC/B,yBAAKC,cAAL,CAAoB,KAAKpC,UAAL,CAAgB,gBAAhB,CAApB,EAAuDiC,oBAAvD;AACH,iBAFD,MAEO;AACH,yBAAKG,cAAL,CAAoB,KAAKpC,UAAL,CAAgB,YAAhB,CAApB,EAAmDiC,oBAAnD;AACH;AACJ;;AAED;AACA,gBAAI/B,SAAS,KAAKA,MAAlB;AACA,gBAAImC,cAAc,IAAlB;AACA,gBAAIC,gBAAgB,IAApB;AACA,gBAAIC,WAAW,YAAf;AACA,gBAAIC,QAAQ,aAAZ;AACA,gBAAIC,YAAY,EAAhB;AACAA,sBAAUvC,MAAV,GAAmBA,MAAnB;AACA,iBAAKH,kBAAL,CAAwB2C,YAAxB,CAAqCxC,MAArC,EAA6CmC,WAA7C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFC,KAAnF,EAA0FC,SAA1F;AACH;;AAED;;;;AAIA,aAAKhD,MAAL,CAAYkD,GAAZ,CAAgB,wBAAhB,EAA0C,UAACH,KAAD,EAAQI,IAAR,EAAiB;AACvD,gBAAIC,aAAa,KAAjB;;AAEA,gBAAID,QAAQ,IAAZ,EAAkB;AACd,oBAAI1C,SAAS0C,KAAK1C,MAAlB;AACA,oBAAImC,cAAcO,KAAKP,WAAvB;;AAEA,oBAAInC,UAAU,IAAV,IAAkBmC,eAAe,IAArC,EAA2C;AACvC,wBAAI,MAAKnC,MAAL,IAAeA,MAAf,IAAyB,MAAK4C,qBAAL,CAA2BT,WAA3B,CAA7B,EAAsE;AAClE;;;;AAIA,8BAAKU,0BAAL,CAAgCF,UAAhC,EAA4CR,WAA5C;AACH;AACJ;AACJ;AACJ,SAjBD;;AAmBA;;;;AAIA,aAAK5C,MAAL,CAAYkD,GAAZ,CAAgB,0BAAhB,EAA4C,UAACH,KAAD,EAAQI,IAAR,EAAiB;AACzD,gBAAIC,aAAa,KAAjB;AACA,gBAAIV,WAAW,IAAf;;AAEA,gBAAIS,QAAQ,IAAZ,EAAkB;AACd,oBAAI1C,SAAS0C,KAAK1C,MAAlB;AACA,oBAAImC,cAAcO,KAAKP,WAAvB;;AAEA,oBAAInC,UAAU,IAAV,IAAkBmC,eAAe,IAArC,EAA2C;AACvC,wBAAI,MAAKnC,MAAL,IAAeA,MAAf,IAAyB,MAAK4C,qBAAL,CAA2BT,WAA3B,CAA7B,EAAsE;AAClE;;;;AAIA,8BAAKU,0BAAL,CAAgCF,UAAhC,EAA4CR,WAA5C,EAAyDF,QAAzD;AACH;AACJ;AACJ;AACJ,SAlBD;;AAoBA;;;;;;AAMA,aAAK1C,MAAL,CAAYkD,GAAZ,CAAgB,6BAAhB,EAA+C,UAACH,KAAD,EAAQI,IAAR,EAAiB;AAC5D;;;;AAIA,gBAAIA,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIP,cAAcO,KAAKP,WAAvB;;AAEA;AACA,oBAAIW,iBAAiBJ,KAAKI,cAA1B;;AAEA,oBAAIX,eAAe,IAAf,IAAuBW,kBAAkB,IAA7C,EAAmD;;AAE/C;;;;AAIA,0BAAKC,oBAAL,CAA0BZ,WAA1B,EAAuCW,cAAvC;AACH;AACJ;AACJ,SAtBD;;AAwBA;;;;;;AAMA,aAAKvD,MAAL,CAAYkD,GAAZ,CAAgB,gBAAhB,EAAkC,UAACH,KAAD,EAAQI,IAAR,EAAiB;AAC/C,gBAAIP,cAAcO,KAAKP,WAAvB;;AAEA,gBAAIA,WAAJ,EAAiB;AACb,oBAAIa,UAAUN,KAAKM,OAAnB;AACA,oBAAIC,QAAQ,MAAK7C,iBAAL,CAAuB8C,OAAvB,CAA+Bf,WAA/B,CAAZ;;AAEA,oBAAIa,WAAWC,UAAU,CAAC,CAA1B,EAA6B;AACzB;AACA,0BAAK7C,iBAAL,CAAuB+C,IAAvB,CAA4BhB,WAA5B;AACH,iBAHD,MAGO,IAAI,CAACa,OAAD,IAAYC,QAAQ,CAAC,CAAzB,EAA2B;AAC9B;AACA,0BAAK7C,iBAAL,CAAuBgD,MAAvB,CAA8BH,KAA9B,EAAqC,CAArC;AACH;AACJ;AACJ,SAfD;;AAiBA;;;;;;;AAOA,aAAK1D,MAAL,CAAYkD,GAAZ,CAAgB,sBAAhB,EAAwC,UAACH,KAAD,EAAQI,IAAR,EAAiB;AACrD,gBAAIP,cAAcO,KAAKP,WAAvB;;AAEA,gBAAIA,WAAJ,EAAiB;AACb,oBAAIa,UAAUN,KAAKM,OAAnB;AACA,oBAAIC,QAAQ,MAAK5C,uBAAL,CAA6B6C,OAA7B,CAAqCf,WAArC,CAAZ;;AAEA,oBAAIa,WAAWC,UAAU,CAAC,CAA1B,EAA6B;AACzB;AACA,0BAAK5C,uBAAL,CAA6B8C,IAA7B,CAAkChB,WAAlC;AACH,iBAHD,MAGO,IAAI,CAACa,OAAD,IAAYC,QAAQ,CAAC,CAAzB,EAA2B;AAC9B;AACA,0BAAK5C,uBAAL,CAA6B+C,MAA7B,CAAoCH,KAApC,EAA2C,CAA3C;AACH;AACJ;AACJ,SAfD;;AAiBA;;;;;AAKA,aAAK1D,MAAL,CAAYkD,GAAZ,CAAgB,UAAhB,EAA4B,UAACH,KAAD,EAAQI,IAAR,EAAiB;AACzC;AACA,gBAAIW,aAAaX,KAAKW,UAAtB;;AAEA;;;;AAIA,gBAAIA,WAAWlC,EAAX,KAAkB,MAAKnB,MAA3B,EAAmC;AAC/B,oBAAIsD,kBAAkB,UAAtB;;AAEA;AACA,sBAAKC,oBAAL;;AAEA;;;;AAIA,sBAAKC,YAAL,CAAkB,MAAKxD,MAAvB;;AAEA;AACA,oBAAI,MAAKN,WAAL,CAAiBgC,kBAAjB,MAAyC,MAAKhC,WAAL,CAAiBiC,yBAAjB,CAA2C,UAA3C,CAA7C,EAAqG;AACjG;AACA,0BAAKjC,WAAL,CAAiBkC,uBAAjB;AACH;AACJ;AACJ,SA1BD;;AA4BA;AACA,YAAI6B,SAAS,KAAKxD,WAAL,CAAiBwD,MAA9B;AACA,YAAIA,UAAU,IAAd,EAAoB;AAChB,iBAAK7D,cAAL,CAAoB8D,cAApB,CAAmCD,MAAnC,EAA2CE,IAA3C,CAAgD,UAACF,MAAD,EAAY;AACxD,oBAAIG,QAAJ,CAAaH,MAAb,EAAqBI,IAArB;AACH,aAFD;AAGH;AACJ;;AAED;;;;;;;;;;oDAM4BC,U,EAAYC,S,EAAW;AAC/C,gBAAID,cAAc,IAAd,IAAsBC,aAAa,IAAvC,EAA6C;AACzC;AACA,oBAAI5B,cAAc4B,UAAU5C,EAA5B;;AAEA;AACA,qBAAKR,gBAAL,CAAsBwB,WAAtB,IAAqC2B,UAArC;AACH;AACJ;;AAED;;;;;;yCAGiB,CAEhB;;;;;AAED;;;qCAGa,CAEZ;;;;;AAED;;;qCAGa3B,W,EAAa;AACtB,gBAAI6B,YAAY,EAAhB;AACA;AACA,gBAAIC,kBAAkB,KAAKpE,kBAAL,CAAwBqE,wCAAxB,CAAiE,KAAKlE,MAAtE,EAA8EmC,WAA9E,CAAtB;AACA,mBAAO8B,eAAP;AACH;;;sCAEaE,M,EAAQhC,W,EAAaiC,mB,EAAqB;AACpD,gBAAIJ,YAAY,KAAKK,YAAL,CAAkBlC,WAAlB,CAAhB;AACA,gBAAImC,cAAc,CAACF,mBAAnB;;AAEA;AACA,gBAAIN,aAAa,KAAKnD,gBAAL,CAAsBwB,WAAtB,CAAjB;;AAEA;AACA,gBAAIoC,sBAAsB,IAA1B;;AAEA,gBAAIT,WAAWU,sBAAf,EAAuC;AACnCD,sCAAsBT,WAAWU,sBAAjC;AACH,aAFD,MAEO,IAAIV,WAAWW,cAAf,EAA+B;AAClCF,sCAAsBT,WAAWW,cAAjC;AACH;;AAED;AACA,iBAAKnF,UAAL,CAAgBoF,UAAhB,CAA2B,eAA3B,EAA4C,EAACV,WAAWA,SAAZ,EAAuBO,qBAAqBA,mBAA5C,EAAiED,aAAaA,WAA9E,EAA2FH,QAAQA,MAAnG,EAA5C;AACH;;;;;AAED;;;;;0CAKkBA,M,EAAQhC,W,EAAa;;AAEnC;AACA,gBAAI2B,aAAa,KAAKnD,gBAAL,CAAsBwB,WAAtB,CAAjB;;AAEA;AACA,gBAAIoC,sBAAsB,IAA1B;;AAEA,gBAAIT,WAAWU,sBAAf,EAAuC;AACnCD,sCAAsBT,WAAWU,sBAAjC;AACH,aAFD,MAEO,IAAIV,WAAWW,cAAf,EAA+B;AAClCF,sCAAsBT,WAAWW,cAAjC;AACH,aAFM,MAEA,IAAIX,WAAWa,oBAAf,EAAqC;AACxCJ,sCAAsBT,WAAWa,oBAAjC;AACH,aAFM,MAEA,IAAIb,WAAWc,eAAf,EAAgC;AACnCL,sCAAsBT,WAAWc,eAAjC;AACH,aAFM,MAEA,IAAId,WAAWe,eAAf,EAAgC;AACnCN,sCAAsBT,WAAWe,eAAjC;AACH;;AAED,iBAAKvF,UAAL,CAAgBoF,UAAhB,CAA2B,mBAA3B,EAAgD,EAACH,qBAAqBA,mBAAtB,EAA2CJ,QAAQA,MAAnD,EAAhD;AACH;;;;;AAED;;;4CAGoB;;AAEhB;AACA,iBAAK7E,UAAL,CAAgBoF,UAAhB,CAA2B,iBAA3B,EAA8C,EAAC1E,QAAQ,KAAKA,MAAd,EAA9C;;AAEA,gBAAI2C,aAAa,KAAjB;;AAEA;;;;AAIA,iBAAKE,0BAAL,CAAgCF,UAAhC;AACH;;;;;AAED;;;8CAGsB;;AAElB;AACA,iBAAKrD,UAAL,CAAgBoF,UAAhB,CAA2B,mBAA3B,EAAgD,EAAC1E,QAAQ,KAAKA,MAAd,EAAhD;;AAEA,gBAAI2C,aAAa,KAAjB;AACA,gBAAIV,WAAW,IAAf;;AAEA;;;;AAIA,iBAAKY,0BAAL,CAAgCF,UAAhC,EAA4C,IAA5C,EAAkDV,QAAlD;AACH;;;;;AAED;;;4CAGoB;;AAEhB,gBAAIjC,SAAS,KAAKA,MAAlB;;AAEA;AACA,gBAAIC,cAAc,KAAKA,WAAvB;;AAEA,gBAAIA,WAAJ,EAAiB;AACb,oBAAI6E,kBAAkB7E,YAAY6E,eAAlC;;AAEA,oBAAIA,eAAJ,EAAqB;AACjB;;AAEA;AACA,wBAAIb,kBAAkB,KAAKpE,kBAAL,CAAwBkF,0BAAxB,CAAmD/E,MAAnD,CAAtB;;AAEA;AACA,wBAAIgF,cAAc,KAAKtF,WAAL,CAAiBuF,eAAjB,CAAiChB,eAAjC,CAAlB;;AAEA,wBAAIe,WAAJ,EAAiB;AACb;AACA,6BAAKE,UAAL,GAAkB,IAAlB;AACH;AACJ;AACJ;AACJ;;;;;AAED;;;;wCAIgB;AACZ,gBAAIC,aAAa,IAAjB;;AAEA,gBAAI,KAAKlF,WAAL,IAAoB,IAAxB,EAA8B;AAC1BkF,6BAAa,KAAKlF,WAAL,CAAiBkF,UAA9B;AACH;;AAED,gBAAIA,cAAc,IAAd,IAAsB,KAAKD,UAA/B,EAA2C;AACvC,qBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;AACxC,wBAAIrB,YAAYoB,WAAWC,CAAX,CAAhB;;AAEArB,8BAAUmB,UAAV,GAAuB,IAAvB;AACH;AACJ;;AAED,gBAAIC,cAAc,IAAd,IAAsB,KAAKlF,WAAL,CAAiB6E,eAA3C,EAA4D;AACxD,qBAAKM,IAAI,CAAT,EAAYA,IAAID,WAAWE,MAA3B,EAAmCD,GAAnC,EAAwC;AACpCrB,gCAAYoB,WAAWC,CAAX,CAAZ;;AAEArB,8BAAUe,eAAV,GAA4B,IAA5B;AACH;AACJ;;AAED,mBAAOK,UAAP;AACH;;;;;AAED;;;;;yCAKiBhD,W,EAAa;;AAE1B,gBAAI4B,YAAY,IAAhB;;AAEA,gBAAI5B,eAAe,IAAnB,EAAyB;;AAErB;AACA,oBAAIgD,aAAa,KAAKG,aAAL,EAAjB;;AAEA;AACA,qBAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;;AAExC;AACA,wBAAIG,gBAAgBJ,WAAWC,CAAX,CAApB;;AAEA,wBAAIG,iBAAiB,IAArB,EAA2B;AACvB,4BAAIC,kBAAkBD,cAAcpE,EAApC;;AAEA;AACA,4BAAIqE,oBAAoBrD,WAAxB,EAAqC;AACjC;AACA4B,wCAAYwB,aAAZ;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOxB,SAAP;AACH;;;;;AAED;;;;;8CAKsB5B,W,EAAa;AAC/B,gBAAIsD,SAAS,KAAb;;AAEA,gBAAItD,eAAe,IAAnB,EAAyB;;AAErB;AACA,oBAAIgD,aAAa,KAAKG,aAAL,EAAjB;;AAEA;AACA,qBAAK,IAAIF,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;;AAExC;AACA,wBAAIG,gBAAgBJ,WAAWC,CAAX,CAApB;;AAEA,wBAAIG,iBAAiB,IAArB,EAA2B;AACvB,4BAAIC,kBAAkBD,cAAcpE,EAApC;;AAEA;AACA,4BAAIqE,oBAAoBrD,WAAxB,EAAqC;AACjC;AACAsD,qCAAS,IAAT;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;;iDAKyBrD,a,EAAe;AACpC,mBAAO,KAAK1C,WAAL,CAAiBgG,wBAAjB,CAA0CtD,aAA1C,CAAP;AACH;;;;;AAED;;;;yCAIiB;AACb,gBAAIqD,SAAS,KAAb;;AAEA,gBAAI,KAAKxF,WAAL,IAAoB,IAApB,IAA4B,KAAKA,WAAL,CAAiB0F,cAAjD,EAAiE;AAC7DF,yBAAS,IAAT;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;2CAImB;AACf,gBAAIA,SAAS,KAAb;;AAEA,gBAAI,KAAKxF,WAAL,IAAoB,IAApB,IAA4B,KAAKA,WAAL,CAAiB2F,gBAAjD,EAAmE;AAC/DH,yBAAS,IAAT;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;4CAIoB;AAChB,gBAAIA,SAAS,KAAb;;AAEA,gBAAI,KAAKI,gBAAL,IAAyB,IAA7B,EAAmC;;AAE/B;AACA,oBAAI,KAAKA,gBAAL,CAAsBf,eAA1B,EAA2C;AACvCW,6BAAS,IAAT;AACH;AACJ;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;;uCAKeK,O,EAAShF,I,EAAM;AAC1B,iBAAKF,WAAL,CAAiBC,IAAjB,GAAwBiF,OAAxB;AACA,iBAAKlF,WAAL,CAAiBE,IAAjB,GAAwBA,IAAxB;AACH;;;;;AAED;;;gDAGwB;AAAA;;AACpB,iBAAKiF,kBAAL,GAA0BC,YAAY,YAAM;AACxC;AACA,oBAAI,OAAK5F,iBAAL,CAAuBiF,MAA3B,EAAmC;AAC/B;;AAEA,wBAAI1C,aAAa,IAAjB;;AAEA;;;;AAIA,2BAAKE,0BAAL,CAAgCF,UAAhC;AACH;AACJ,aAbyB,EAavB,KAAK5C,gBAbkB,CAA1B;AAcH;;;;;AAED;;;+CAGuB;AACnBkG,0BAAc,KAAKF,kBAAnB;AACH;;;;;AAED;;;;;;;;;;mDAU2BpD,U,EAAYR,W,EAAaF,Q,EAAU;AAAA;;AAE1D;AACA,mBAAO,KAAKiE,qBAAL,CAA2BvD,UAA3B,EAAuCR,WAAvC,EAAoDF,QAApD,EAA8D0B,IAA9D,CAAmE,UAACM,eAAD,EAAqB;AAC3F,oBAAIkC,uBAAuB,EAA3B;AACA,oBAAIC,kBAAkB,IAAtB;AACA,oBAAIC,aAAa,IAAjB;;AAEA,oBAAKpC,mBAAmB,IAAnB,IAA2BA,gBAAgBoB,MAA5C,IACCc,wBAAwB,IAAxB,IAAgCA,qBAAqBd,MADtD,IAECe,mBAAmB,IAAnB,IAA2BA,gBAAgBf,MAFhD,EAEyD;;AAErD;AACA,yBAAK,IAAID,IAAI,CAAb,EAAgBA,IAAInB,gBAAgBoB,MAApC,EAA4CD,GAA5C,EAAiD;AAC7C,4BAAItC,iBAAiBmB,gBAAgBmB,CAAhB,CAArB;;AAEA,4BAAItC,kBAAkB,IAAtB,EAA4B;AACxB,gCAAIwD,cAAcxD,eAAewD,WAAjC;;AAEA,gCAAIA,eAAe,IAAnB,EAAyB;AACrB;;;;AAIAH,uDAAuBA,qBAAqBI,MAArB,CAA4BD,WAA5B,CAAvB;AACH;;AAED;AACA,mCAAOxD,eAAewD,WAAtB;AACH;AACJ;;AAED;AACA,2BAAO,OAAKzG,kBAAL,CAAwB2G,YAAxB,CAAqCvC,eAArC,EAAsDoC,UAAtD,EAAkED,eAAlE,EAAmFD,oBAAnF,EAAyGxC,IAAzG,CAA8G,UAAC8C,wBAAD,EAA8B;AAC/I,4BAAIA,wBAAJ,EAA8B;AAC1B;AACA,gCAAI,OAAK/G,WAAL,CAAiBgC,kBAAjB,MAAyC,OAAKhC,WAAL,CAAiBiC,yBAAjB,CAA2C,oBAA3C,CAA7C,EAA+G;AAC3G;AACA,uCAAKjC,WAAL,CAAiBkC,uBAAjB;AACH;;AAED;AACA,gCAAI,OAAKlC,WAAL,CAAiBgC,kBAAjB,MAAyC,OAAKhC,WAAL,CAAiBiC,yBAAjB,CAA2C,cAA3C,CAA7C,EAAyG;;AAErG,oCAAIwE,wBAAwB,IAAxB,IAAgCA,qBAAqBd,MAArB,GAA8B,CAAlE,EAAqE;AACjE,wCAAIzD,0BAA0B,KAA9B;;AAEA;AACA,yCAAK,IAAIwD,IAAI,CAAb,EAAgBA,IAAIe,qBAAqBd,MAAzC,EAAiDD,GAAjD,EAAsD;AAClD,4CAAIsB,sBAAsBP,qBAAqBf,CAArB,CAA1B;;AAEA,4CAAIsB,uBAAuB,IAA3B,EAAiC;AAC7B,gDAAIA,oBAAoBC,IAApB,KAA6B,WAAjC,EAA8C;AAC1C/E,0EAA0B,IAA1B;AACH;AACJ;AACJ;;AAED,wCAAIA,uBAAJ,EAA6B;AACzB;AACA,+CAAKlC,WAAL,CAAiBkC,uBAAjB;AACH;AACJ;AACJ;;AAED,gCAAIgF,kBAAkBH,yBAAyBG,eAA/C;AACA,gCAAI,CAACzE,WAAD,IAAgByE,eAAhB,IAAmCA,gBAAgBvB,MAAvD,EAA+D;AAC3D;AACA,oCAAIwB,oBAAoBD,gBAAgBA,gBAAgBvB,MAAhB,GAAyB,CAAzC,CAAxB;AACA,oCAAIyB,iBAAiBD,kBAAkBC,cAAvC;AACA,oCAAI9E,iBAAiB,OAAKvC,aAAL,CAAmBsH,wBAAnB,CAA4CD,cAA5C,CAArB;;AAEA,oCAAInE,UAAJ,EAAgB;AACZ,2CAAKT,cAAL,CAAoB,OAAKpC,UAAL,CAAgB,YAAhB,CAApB,EAAmDkC,cAAnD;AACH,iCAFD,MAEO,IAAIC,QAAJ,EAAc;AACjB,2CAAKC,cAAL,CAAoB,OAAKpC,UAAL,CAAgB,WAAhB,CAApB,EAAkDkC,cAAlD;AACH,iCAFM,MAEA;AACH,2CAAKE,cAAL,CAAoB,OAAKpC,UAAL,CAAgB,OAAhB,CAApB,EAA8CkC,cAA9C;AACH;AACJ,6BAbD,MAaO;AACH,uCAAKE,cAAL,CAAoB,EAApB,EAAwB,IAAxB;AACH;AACJ;;AAED,+BAAOuE,wBAAP;AACH,qBApDM,CAAP;AAqDH;AACJ,aApFM,CAAP;AAqFH;;;;;AAED;;;;;;;;8CAQsB9D,U,EAAYR,W,EAAaF,Q,EAAU;AACrD,gBAAIkD,aAAa,EAAjB;AACA,gBAAI6B,yBAAyB,EAA7B;;AAEA;AACA,gBAAI7E,WAAJ,EAAiB;AACb,oBAAI4B,YAAY,KAAKkD,gBAAL,CAAsB9E,WAAtB,CAAhB;AACA,oBAAI4B,SAAJ,EAAe;AACXoB,+BAAWhC,IAAX,CAAgBY,SAAhB;AACH;AACJ,aALD,MAKO;AACHoB,6BAAa,KAAKG,aAAL,EAAb;AACH;;AAED,gBAAIH,WAAWE,MAAf,EAAuB;;AAEnB,oBAAI6B,QAAQ,KAAKzH,aAAL,CAAmB0H,QAAnB,EAAZ;AACA,oBAAIC,WAAW,KAAK3H,aAAL,CAAmB4H,WAAnB,EAAf;AACA,oBAAI9G,cAAc,KAAKd,aAAL,CAAmBe,cAAnB,EAAlB;AACA,oBAAIR,SAAS,KAAKA,MAAlB;;AAEA;AACA,qBAAK,IAAIoF,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;;AAExC;AACA,wBAAIrB,YAAYoB,WAAWC,CAAX,CAAhB;;AAEA,wBAAIrB,aAAa,IAAjB,EAAuB;AACnB;AACA,4BAAIyB,kBAAkBzB,UAAU5C,EAAhC;AACA,4BAAIiB,gBAAgB2B,UAAU4C,IAA9B;;AAEA;AACA,4BAAI7C,aAAa,KAAKnD,gBAAL,CAAsB6E,eAAtB,CAAjB;;AAEA,4BAAI1B,cAAc,IAAlB,EAAwB;AACpB,gCAAIA,WAAWwD,iBAAf,EAAkC;AAC9B;AACA,oCAAIC,wBAAwB,KAAKC,+BAAL,CAAqC1D,UAArC,EAAiDoD,KAAjD,EAAwDE,QAAxD,EAAkE7G,WAAlE,EAA+EP,MAA/E,EAAuFmC,WAAvF,EAAoGqD,eAApG,EAAqHpD,aAArH,EAAoIO,UAApI,EAAgJV,QAAhJ,CAA5B;AACA+E,uDAAuB7D,IAAvB,CAA4BoE,qBAA5B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO,KAAKlI,EAAL,CAAQoI,GAAR,CAAYT,sBAAZ,CAAP;AACH;;;;;AAED;;;;;;;;;;;;;;wDAcgClD,U,EAAYoD,K,EAAOE,Q,EAAU7G,W,EAAaP,M,EAAQmC,W,EAAaqD,e,EAAiBpD,a,EAAeO,U,EAAYV,Q,EAAU;AAAA;;AACjJ,mBAAO6B,WAAWwD,iBAAX,CAA6BrF,QAA7B,EAAuC0B,IAAvC,CAA4C,UAACb,cAAD,EAAoB;AACnE,oBAAIA,kBAAkB,IAAtB,EAA4B;;AAExBA,mCAAeoE,KAAf,GAAuBA,KAAvB;AACApE,mCAAesE,QAAf,GAA0BA,QAA1B;AACAtE,mCAAevC,WAAf,GAA6BA,WAA7B;AACAuC,mCAAe9C,MAAf,GAAwB,OAAKA,MAA7B;;AAEA;AACA8C,mCAAeX,WAAf,GAA6BqD,eAA7B;;AAEA;AACA1C,mCAAeV,aAAf,GAA+BA,aAA/B;;AAEA,wBAAID,eAAe,IAAnB,EAAyB;AACrB;;;;;AAKAW,uCAAeH,UAAf,GAA4BA,UAA5B;;AAEA,4BAAIV,QAAJ,EAAc;AACV;;;;AAIA,gCAAIa,eAAeb,QAAf,IAA2B,IAA/B,EAAqC;AACjCa,+CAAeb,QAAf,GAA0B,IAA1B;AACH;AACJ;AACJ,qBAjBD,MAiBO;AACH;;;;;;AAMA,4BAAIE,gBAAgBqD,eAApB,EAAqC;AACjC;AACA1C,2CAAeH,UAAf,GAA4B,KAA5B;;AAEA,gCAAIV,QAAJ,EAAc;AACV;;;;AAIA,oCAAIa,eAAeb,QAAf,IAA2B,IAA/B,EAAqC;AACjCa,mDAAeb,QAAf,GAA0B,IAA1B;AACH;AACJ;AACJ;AACJ;;AAED,2BAAOa,cAAP;AACH;AACJ,aAxDM,CAAP;AAyDH;;AAED;;;;;;;;;sDAM8BX,W,EAAa;AACvC,gBAAIuF,wBAAwB,IAA5B;AACA,gBAAIC,0BAA0B,IAA9B;;AAEA,gBAAI3H,SAAS,KAAKA,MAAlB;AACA,gBAAIO,cAAc,KAAKA,WAAvB;;AAEA;AACAmH,oCAAwB,KAAKlI,iBAAL,CAAuBoI,wBAAvB,CAAgD5H,MAAhD,EAAwDmC,WAAxD,EAAqE5B,WAArE,EAAkF,KAAlF,CAAxB;;AAEA;AACAoH,sCAA0B,KAAKnI,iBAAL,CAAuBqI,0BAAvB,CAAkD7H,MAAlD,EAA0DmC,WAA1D,EAAuE5B,WAAvE,EAAoF,KAApF,CAA1B;;AAEA,mBAAO;AACH,yBAASmH,qBADN;AAEH,2BAAWC;AAFR,aAAP;AAIH;;;;;AAED;;;;;6CAKqBG,kB,EAAoBhF,c,EAAgB;;AAErD,gBAAIgF,sBAAsB,IAAtB,IAA8BhF,kBAAkB,IAApD,EAA0D;;AAEtD;AACA,oBAAIqC,aAAa,KAAKG,aAAL,EAAjB;;AAEA,oBAAIH,cAAc,IAAlB,EAAwB;;AAEpB;;;;;;AAMA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,WAAWE,MAA/B,EAAuCD,GAAvC,EAA4C;;AAExC;AACA,4BAAIG,gBAAgBJ,WAAWC,CAAX,CAApB;;AAEA,4BAAIG,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,gCAAIC,kBAAkBD,cAAcpE,EAApC;;AAEA;;;;AAIA,gCAAI4G,sBAAsBxC,cAAcwC,mBAAxC;;AAEA,gCAAIA,uBAAuB,IAA3B,EAAiC;;AAE7B;AACA,qCAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKD,oBAAoB1C,MAA1C,EAAkD2C,IAAlD,EAAwD;;AAEpD;AACA,wCAAIC,2BAA2BF,oBAAoBC,EAApB,CAA/B;;AAEA,wCAAIC,4BAA4B,IAAhC,EAAsC;;AAElC;AACA,4CAAIjI,SAASiI,yBAAyBjI,MAAtC;;AAEA;AACA,4CAAImC,cAAc8F,yBAAyB9F,WAA3C;;AAEA;;;;;AAKA,4CAAIhB,KAAK8G,yBAAyB9G,EAAlC;;AAEA,4CAAInB,UAAU,IAAV,IAAkBmC,eAAe,IAArC,EAA2C;AACvC;AACA,gDAAI+F,uBAAuB/F,WAA3B;AACA,gDAAIgG,kBAAkBnI,MAAtB;;AAEA;AACA,gDAAImI,mBAAmB,KAAKnI,MAAxB,IAAkCkI,yBAAyBJ,kBAA/D,EAAmF;;AAE/E,oDAAIM,qBAAqB,KAAKnB,gBAAL,CAAsBiB,oBAAtB,CAAzB;;AAEA;AACA,oDAAIG,iBAAiB,KAAK1H,gBAAL,CAAsB6E,eAAtB,CAArB;;AAEA;AACA,oDAAI6C,eAAeC,0CAAf,IAA6D,IAAjE,EAAuE;;AAEnE;AACAD,mEAAeC,0CAAf,CAA0DF,kBAA1D,EAA8EH,wBAA9E,EAAwGnF,cAAxG;AACH;AACJ;AACJ,yCApBD,MAoBO,IAAIX,eAAe,IAAnB,EAAyB;AAC5B;;;;AAIA,gDAAI+F,uBAAuB/F,WAA3B;;AAEA;AACA,gDAAI+F,yBAAyBJ,kBAA7B,EAAiD;;AAE7C,oDAAIM,qBAAqB,KAAKnB,gBAAL,CAAsBiB,oBAAtB,CAAzB;;AAEA;AACA,oDAAIG,iBAAiB,KAAK1H,gBAAL,CAAsB6E,eAAtB,CAArB;;AAEA;AACA,oDAAI6C,eAAeC,0CAAf,IAA6D,IAAjE,EAAuE;;AAEnE;AACAD,mEAAeC,0CAAf,CAA0DF,kBAA1D,EAA8EH,wBAA9E,EAAwGnF,cAAxG;AACH;AACJ;AACJ,yCAtBM,MAsBA,IAAI3B,MAAM,IAAV,EAAgB;AACnB;;;;;;AAMA,gDAAI+G,uBAAuB/G,EAA3B;;AAEA;AACA,gDAAI+G,yBAAyBJ,kBAA7B,EAAiD;;AAE7C,oDAAIM,qBAAqB,KAAKnB,gBAAL,CAAsBiB,oBAAtB,CAAzB;;AAEA;AACA,oDAAIG,iBAAiB,KAAK1H,gBAAL,CAAsB6E,eAAtB,CAArB;;AAEA;AACA,oDAAI6C,eAAeC,0CAAf,IAA6D,IAAjE,EAAuE;;AAEnE;AACAD,mEAAeC,0CAAf,CAA0DF,kBAA1D,EAA8EH,wBAA9E,EAAwGnF,cAAxG;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;;;;AAED;;;;;uDAK+BX,W,EAAa;AACxC,gBAAIW,iBAAiB,IAArB;;AAEA,gBAAIX,eAAe,IAAnB,EAAyB;;AAErB;AACAW,iCAAiB,KAAKjD,kBAAL,CAAwBiC,6CAAxB,CAAsE,KAAK9B,MAA3E,EAAmFmC,WAAnF,CAAjB;AACH;;AAED,mBAAOW,cAAP;AACH;;;;;AAED;;;;;;gEAMwC9C,M,EAAQmC,W,EAAa;AACzD,gBAAIW,iBAAiB,IAArB;;AAEA,gBAAI9C,UAAU,IAAV,IAAkBmC,eAAe,IAArC,EAA2C;;AAEvC;AACAW,iCAAiB,KAAKjD,kBAAL,CAAwBiC,6CAAxB,CAAsE9B,MAAtE,EAA8EmC,WAA9E,CAAjB;AACH;;AAED,mBAAOW,cAAP;AACH;;;qCAEY9C,M,EAAQ;AACjB,gBAAI2C,aAAa,IAAjB;;AAEA,iBAAKE,0BAAL,CAAgCF,UAAhC;;AAEA;AACA,gBAAIR,cAAc,IAAlB;AACA,gBAAIC,gBAAgB,IAApB;AACA,gBAAIC,WAAW,YAAf;AACA,gBAAIC,QAAQ,YAAZ;AACA,gBAAIC,YAAY,EAAhB;AACAA,sBAAUvC,MAAV,GAAmBA,MAAnB;AACA,iBAAKH,kBAAL,CAAwB2C,YAAxB,CAAqCxC,MAArC,EAA6CmC,WAA7C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFC,KAAnF,EAA0FC,SAA1F;AACH;;;;;AAED;;;;yCAIiB;AACb,gBAAIgG,cAAc,KAAlB;AACA,gBAAIpD,aAAa,KAAKG,aAAL,EAAjB;;AAEA,gBAAIH,cAAc,IAAlB,EAAwB;AACpB,qBAAK,IAAIC,IAAI,CAAR,EAAWoD,IAAIrD,WAAWE,MAA/B,EAAuCD,IAAIoD,CAA3C,EAA8CpD,GAA9C,EAAmD;AAC/C,wBAAIjE,KAAKgE,WAAWC,CAAX,EAAcjE,EAAvB;AACA,wBAAIsH,cAAc,KAAKC,8BAAL,CAAoCvH,EAApC,CAAlB;;AAEA,wBAAIsH,eAAe,CAACA,YAAYxG,QAAhC,EAA0C;AACtCsG,sCAAc,IAAd;AACA;AACH;AACJ;AACJ;;AAED,mBAAOA,WAAP;AACH;;;;;AAED;;;;+CAIuB;AAAA;;AACnB;;;;AAIA,iBAAKI,cAAL,GAAsB,KAAKpJ,MAAL,CAAYkD,GAAZ,CAAgB,MAAhB,EAAwB,UAACH,KAAD,EAAQI,IAAR,EAAiB;;AAE3D;AACA,uBAAKa,oBAAL;;AAEA;;;;AAIA,uBAAKC,YAAL,CAAkB,OAAKxD,MAAvB;;AAEA;AACA,uBAAK2I,cAAL;;AAEA;;;;AAIA,uBAAKrJ,UAAL,CAAgBoF,UAAhB,CAA2B,aAA3B;AACH,aAnBqB,CAAtB;AAoBH;;;;;;AAGLvF,eAAeyJ,OAAf,GAAyB,CACrB,SADqB,EAErB,IAFqB,EAGrB,YAHqB,EAIrB,QAJqB,EAKrB,mBALqB,EAMrB,eANqB,EAOrB,aAPqB,EAQrB,iBARqB,EASrB,gBATqB,EAUrB,oBAVqB,CAAzB;;kBAaezJ,c","file":"nodeController.js","sourcesContent":["class NodeController {\n    constructor($filter,\n                $q,\n                $rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.$translate = this.$filter('translate');\n\n        // the auto save interval in milliseconds\n        this.autoSaveInterval = 60000;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        // field that will hold the node status\n        this.nodeStatus = null;\n\n        // field that will hold the node title\n        this.nodeTitle = null;\n\n        // array to hold ids of dirty component\n        this.dirtyComponentIds = [];\n\n        // array to hold ids of components where student work has changed since last submission\n        this.dirtySubmitComponentIds = [];\n\n        // whether the student work has changed since last submit\n        this.submit = false;\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n\n        this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n\n        /*\n         * an object that holds the mappings with the key being the component\n         * and the value being the scope object from the child controller\n         */\n        this.componentToScope = {};\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // perform setup of this node only if the current node is not a group.\n        if (this.StudentDataService.getCurrentNode() && this.ProjectService.isApplicationNode(this.StudentDataService.getCurrentNodeId())) {\n            // get the current node and node id\n            var currentNode = this.StudentDataService.getCurrentNode();\n            if (currentNode != null) {\n                this.nodeId = currentNode.id;\n            }\n\n            // get the node content\n            this.nodeContent = this.ProjectService.getNodeById(this.nodeId);\n\n            this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n\n            this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n\n            // populate the student work into this node\n            //this.setStudentWork();\n\n            // check if we need to lock this node\n            this.calculateDisabled();\n\n            //this.importWork();\n\n            // start the auto save interval\n            this.startAutoSaveInterval();\n\n            // register this controller to listen for the exit event\n            this.registerExitListener();\n\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n                this.NodeService.evaluateTransitionLogic();\n            }\n\n            // set save message with last save/submission\n            // for now, we'll use the latest component state (since we don't currently keep track of node-level saves)\n            // TODO: use node states once we implement node state saving\n            let latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId);\n            if (latestComponentState) {\n                let latestClientSaveTime = latestComponentState.clientSaveTime;\n                if (latestComponentState.isSubmit) {\n                    this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestClientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('LAST_SAVED'), latestClientSaveTime);\n                }\n            }\n\n            // save nodeEntered event\n            var nodeId = this.nodeId;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"nodeEntered\";\n            var eventData = {};\n            eventData.nodeId = nodeId;\n            this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n        }\n\n        /**\n         * Listen for the componentSaveTriggered event which occurs when a\n         * component is requesting student data to be saved\n         */\n        this.$scope.$on('componentSaveTriggered', (event, args) => {\n            var isAutoSave = false;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentSubmitTriggered event which occurs when a\n         * component is requesting student data to be submitted\n         */\n        this.$scope.$on('componentSubmitTriggered', (event, args) => {\n            var isAutoSave = false;\n            var isSubmit = true;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId, isSubmit);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentStudentDataChanged event that will come from\n         * child component scopes\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentStudentDataChanged', (event, args) => {\n            /*\n             * the student data in one of our child scopes has changed so\n             * we will need to save\n             */\n            if (args != null) {\n\n                // get the part id\n                var componentId = args.componentId;\n\n                // get the new component state\n                var componentState = args.componentState;\n\n                if (componentId != null && componentState != null) {\n\n                    /*\n                     * notify the parts that are connected that the student\n                     * data has changed\n                     */\n                    this.notifyConnectedParts(componentId, componentState);\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentDirty event that will come from child component\n         * scopes; notifies node that component has/doesn't have unsaved work\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentDirty', (event, args) => {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtyComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty components\n                    this.dirtyComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty components\n                    this.dirtyComponentIds.splice(index, 1);\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentSubmitDirty event that will come from child\n         * component scopes; notifies node that work has/has not changed for a\n         * component since last submission\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentSubmitDirty', (event, args) => {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtySubmitComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty submit components\n                    this.dirtySubmitComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty submit components\n                    this.dirtySubmitComponentIds.splice(index, 1);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the node. This will perform saving when the student exits\n         * the node.\n         */\n        this.$scope.$on('exitNode', (event, args) => {\n            // get the node that is exiting\n            var nodeToExit = args.nodeToExit;\n\n            /*\n             * make sure the node id of the node that is exiting is\n             * this node\n             */\n            if (nodeToExit.id === this.nodeId) {\n                var saveTriggeredBy = 'exitNode';\n\n                // stop the auto save interval for this node\n                this.stopAutoSaveInterval();\n\n                /*\n                 * tell the parent that this node is done performing\n                 * everything it needs to do before exiting\n                 */\n                this.nodeUnloaded(this.nodeId);\n\n                // check if this node has transition logic that should be run when the student exits the node\n                if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n                    // this node has transition logic\n                    this.NodeService.evaluateTransitionLogic();\n                }\n            }\n        });\n\n        // load script for this node, if any\n        let script = this.nodeContent.script;\n        if (script != null) {\n            this.ProjectService.retrieveScript(script).then((script) => {\n                new Function(script).call(this);\n            });\n        }\n    }\n\n    /**\n     * The function that child component controllers will call to register\n     * themselves with this node\n     * @param childScope the child scope object\n     * @param component the component content for the component\n     */\n    registerComponentController(childScope, component) {\n        if (childScope != null && component != null) {\n            // get the component id\n            var componentId = component.id;\n\n            // add the component id to child scope mapping\n            this.componentToScope[componentId] = childScope;\n        }\n    }\n\n    /**\n     * Populate the student work into the node\n     */\n    setStudentWork() {\n\n    };\n\n    /**\n     * Import work from another node\n     */\n    importWork() {\n\n    };\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions(componentId) {\n        var revisions = [];\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n        return componentStates;\n    };\n\n    showRevisions($event, componentId, isComponentDisabled) {\n        var revisions = this.getRevisions(componentId);\n        var allowRevert = !isComponentDisabled;\n\n        // get the scope for the component\n        var childScope = this.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        }\n\n        // broadcast showRevisions event\n        this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n    };\n\n    /**\n     * Show student assets\n     * @param $event\n     * @param componentId\n     */\n    showStudentAssets($event, componentId) {\n\n        // get the scope for the component\n        var childScope = this.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        } else if (childScope.discussionController) {\n            componentController = childScope.discussionController;\n        } else if (childScope.tableController) {\n            componentController = childScope.tableController;\n        } else if (childScope.graphController) {\n            componentController = childScope.graphController;\n        }\n\n        this.$rootScope.$broadcast('showStudentAssets', {componentController: componentController, $event: $event});\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // notify the child components that the save button was clicked\n        this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        // notify the child components that the submit button was clicked\n        this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n        var isSubmit = true;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave, null, isSubmit);\n    };\n\n    /**\n     * Check if we need to lock the node\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the node content\n        var nodeContent = this.nodeContent;\n\n        if (nodeContent) {\n            var lockAfterSubmit = nodeContent.lockAfterSubmit;\n\n            if (lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for the node\n                var componentStates = this.StudentDataService.getComponentStatesByNodeId(nodeId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this node\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components.\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    /**\n     * Get the component given the component id\n     * @param componentId the component id we want\n     * @return the component object with the given component id\n     */\n    getComponentById(componentId) {\n\n        var component = null;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Check if this node contains a given component id\n     * @param componentId the component id\n     * @returns whether this node contains the component\n     */\n    nodeContainsComponent(componentId) {\n        var result = false;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSaveButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSubmitButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Start the auto save interval for this node\n     */\n    startAutoSaveInterval() {\n        this.autoSaveIntervalId = setInterval(() => {\n            // check if the student work is dirty\n            if (this.dirtyComponentIds.length) {\n                // the student work is dirty so we will save\n\n                var isAutoSave = true;\n\n                /*\n                 * obtain the component states from the children and save them\n                 * to the server\n                 */\n                this.createAndSaveComponentData(isAutoSave);\n            }\n        }, this.autoSaveInterval);\n    };\n\n    /**\n     * Stop the auto save interval for this node\n     */\n    stopAutoSaveInterval() {\n        clearInterval(this.autoSaveIntervalId);\n    };\n\n    /**\n     * Obtain the componentStates and annotations from the children and save them\n     * to the server\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a sumission or not\n     * @returns a promise that will save all the component states for the step\n     * that need saving\n     */\n    createAndSaveComponentData(isAutoSave, componentId, isSubmit) {\n\n        // obtain the component states from the children\n        return this.createComponentStates(isAutoSave, componentId, isSubmit).then((componentStates) => {\n            var componentAnnotations = [];\n            var componentEvents = null;\n            var nodeStates = null;\n\n            if ((componentStates != null && componentStates.length) ||\n                (componentAnnotations != null && componentAnnotations.length) ||\n                (componentEvents != null && componentEvents.length)) {\n\n                // get the annotations from the components\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null) {\n                        var annotations = componentState.annotations;\n\n                        if (annotations != null) {\n                            /*\n                             * add the annotations to our array of annotations that will\n                             * be saved to the server\n                             */\n                            componentAnnotations = componentAnnotations.concat(annotations);\n                        }\n\n                        // remove the annotations from the component state\n                        delete componentState.annotations;\n                    }\n                }\n\n                // save the component states to the server\n                return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations).then((savedStudentDataResponse) => {\n                    if (savedStudentDataResponse) {\n                        // check if this node has transition logic that should be run when the student data changes\n                        if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n                            // this node has transition logic\n                            this.NodeService.evaluateTransitionLogic();\n                        }\n\n                        // check if this node has transition logic that should be run when the student score changes\n                        if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('scoreChanged')) {\n\n                            if (componentAnnotations != null && componentAnnotations.length > 0) {\n                                var evaluateTransitionLogic = false;\n\n                                // loop through all the annotations and check if any were score annotations\n                                for (var c = 0; c < componentAnnotations.length; c++) {\n                                    var componentAnnotation = componentAnnotations[c];\n\n                                    if (componentAnnotation != null) {\n                                        if (componentAnnotation.type === 'autoScore') {\n                                            evaluateTransitionLogic = true;\n                                        }\n                                    }\n                                }\n\n                                if (evaluateTransitionLogic) {\n                                    // the student score has changed so we will evaluate the transition logic\n                                    this.NodeService.evaluateTransitionLogic();\n                                }\n                            }\n                        }\n\n                        let studentWorkList = savedStudentDataResponse.studentWorkList;\n                        if (!componentId && studentWorkList && studentWorkList.length) {\n                            // this was a step save or submission and student work was saved, so set save message\n                            let latestStudentWork = studentWorkList[studentWorkList.length - 1];\n                            let serverSaveTime = latestStudentWork.serverSaveTime;\n                            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                            if (isAutoSave) {\n                                this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                            } else if (isSubmit) {\n                                this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n                            } else {\n                                this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                            }\n                        } else {\n                            this.setSaveMessage('', null);\n                        }\n                    }\n\n                    return savedStudentDataResponse;\n                });\n            }\n        });\n    };\n\n    /**\n     * Loop through this node's components and get/create component states\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a submission or not\n     * @returns an array of promises that will return component states\n     */\n    createComponentStates(isAutoSave, componentId, isSubmit) {\n        var components = [];\n        var componentStatePromises = [];\n\n        // get the components for this node\n        if (componentId) {\n            var component = this.getComponentById(componentId);\n            if (component) {\n                components.push(component);\n            }\n        } else {\n            components = this.getComponents();\n        }\n\n        if (components.length) {\n\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var nodeId = this.nodeId;\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n                    var componentType = component.type;\n\n                    // get the scope for the component\n                    var childScope = this.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n                        if (childScope.getComponentState) {\n                            // get the component state promise from the child scope\n                            var componentStatePromise = this.getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit);\n                            componentStatePromises.push(componentStatePromise);\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.$q.all(componentStatePromises);\n    };\n\n    /**\n     * Get the component state from the child scope\n     * @param childScope the child scope\n     * @param runId the run id\n     * @param periodId the period id\n     * @param workgroupId the workgroup id\n     * @param nodeId the node id\n     * @param componentId the component id that has triggered the save\n     * @param tempComponentId the component id of the component we are obtaining\n     * a component state for\n     * @param componentType the component type\n     * @param isAutoSave whether this save was triggered by an auto save\n     * @param isSubmit whether this save was triggered by a submit\n     */\n    getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit) {\n        return childScope.getComponentState(isSubmit).then((componentState) => {\n            if (componentState != null) {\n\n                componentState.runId = runId;\n                componentState.periodId = periodId;\n                componentState.workgroupId = workgroupId;\n                componentState.nodeId = this.nodeId;\n\n                // set the component id into the student work object\n                componentState.componentId = tempComponentId;\n\n                // set the component type\n                componentState.componentType = componentType;\n\n                if (componentId == null) {\n                    /*\n                     * the node has triggered the save so all the components will\n                     * either have isAutoSave set to true or false; if this is a\n                     * submission, all the components will have isSubmit set to true\n                     */\n                    componentState.isAutoSave = isAutoSave;\n\n                    if (isSubmit) {\n                        /*\n                         * set the isSubmit value in the component state if\n                         * it wasn't set by the component\n                         */\n                        if (componentState.isSubmit == null) {\n                            componentState.isSubmit = true;\n                        }\n                    }\n                } else {\n                    /*\n                     * a component has triggered the save so only that component will\n                     * have isAutoSave set to false; if this is a submission,\n                     * component will have isSubmit set to true\n                     */\n\n                    if (componentId === tempComponentId) {\n                        // this component triggered the save\n                        componentState.isAutoSave = false;\n\n                        if (isSubmit) {\n                            /*\n                             * set the isSubmit value in the component state if\n                             * it wasn't set by the component\n                             */\n                            if (componentState.isSubmit == null) {\n                                componentState.isSubmit = true;\n                            }\n                        }\n                    }\n                }\n\n                return componentState\n            }\n        });\n    }\n\n    /**\n     * Get the latest annotations for a given component\n     * TODO: move to a parent component class in the future?\n     * @param componentId the component's id\n     * @return object containing the component's latest score and comment annotations\n     */\n    getLatestComponentAnnotations(componentId) {\n        let latestScoreAnnotation = null;\n        let latestCommentAnnotation = null;\n\n        let nodeId = this.nodeId;\n        let workgroupId = this.workgroupId;\n\n        // get the latest score annotation for this component\n        latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, 'any');\n\n        // get the latest comment annotation for this component\n        latestCommentAnnotation = this.AnnotationService.getLatestCommentAnnotation(nodeId, componentId, workgroupId, 'any');\n\n        return {\n            'score': latestScoreAnnotation,\n            'comment': latestCommentAnnotation\n        };\n    };\n\n    /**\n     * Notify any connected components that the student data has changed\n     * @param componentId the component id that has changed\n     * @param componentState the new component state\n     */\n    notifyConnectedParts(changedComponentId, componentState) {\n\n        if (changedComponentId != null && componentState != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            if (components != null) {\n\n                /*\n                 * loop through all the components and look for components\n                 * that are listening for the given component id to change.\n                 * only notify components that are listening for changes\n                 * from the specific component id.\n                 */\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        // get this component id\n                        var tempComponentId = tempComponent.id;\n\n                        /*\n                         * get the connected components that this component is\n                         * listening for\n                         */\n                        var connectedComponents = tempComponent.connectedComponents;\n\n                        if (connectedComponents != null) {\n\n                            // loop through all the connected components\n                            for (var cc = 0; cc < connectedComponents.length; cc++) {\n\n                                // get a connected component\n                                var connectedComponentParams = connectedComponents[cc];\n\n                                if (connectedComponentParams != null) {\n\n                                    // get the node id\n                                    var nodeId = connectedComponentParams.nodeId;\n\n                                    // get the component id\n                                    var componentId = connectedComponentParams.componentId;\n\n                                    /*\n                                     * get the id which is the old field that we used to store\n                                     * the component id in. this is here to maintain backwards\n                                     * compatibility.\n                                     */\n                                    var id = connectedComponentParams.id;\n\n                                    if (nodeId != null && componentId != null) {\n                                        // the node id and component id was provided\n                                        var connectedComponentId = componentId;\n                                        var connectedNodeId = nodeId;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedNodeId == this.nodeId && connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    } else if (componentId != null) {\n                                        /*\n                                         * the node id was not provided but the component id was provided\n                                         * so we will assume the component id is in the current node\n                                         */\n                                        var connectedComponentId = componentId;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    } else if (id != null) {\n                                        /*\n                                         * the node id and component id were not provided but the\n                                         * id was provided which is the old field we used to set\n                                         * the component id in. this is here to maintain backwards\n                                         * compatibility.\n                                         */\n                                        var connectedComponentId = id;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByComponentId(componentId) {\n        var componentState = null;\n\n        if (componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the nodeId\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var componentState = null;\n\n        if (nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    nodeUnloaded(nodeId) {\n        var isAutoSave = true;\n\n        this.createAndSaveComponentData(isAutoSave);\n\n        // save nodeExited event\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"nodeExited\";\n        var eventData = {};\n        eventData.nodeId = nodeId;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Checks whether any of the node's components have unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    getSubmitDirty() {\n        let submitDirty = false;\n        let components = this.getComponents();\n\n        if (components != null) {\n            for (let c = 0, l = components.length; c < l; c++) {\n                let id = components[c].id;\n                let latestState = this.getComponentStateByComponentId(id);\n\n                if (latestState && !latestState.isSubmit) {\n                    submitDirty = true;\n                    break;\n                }\n            }\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n        /**\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before exiting.\n         */\n        this.logOutListener = this.$scope.$on('exit', (event, args) => {\n\n            // stop the auto save interval for this node\n            this.stopAutoSaveInterval();\n\n            /*\n             * tell the parent that this node is done performing\n             * everything it needs to do before exiting\n             */\n            this.nodeUnloaded(this.nodeId);\n\n            // call this function to remove the listener\n            this.logOutListener();\n\n            /*\n             * tell the session service that this listener is done\n             * performing everything it needs to do before exiting\n             */\n            this.$rootScope.$broadcast('doneExiting');\n        });\n    };\n}\n\nNodeController.$inject = [\n    '$filter',\n    '$q',\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NodeController;\n"]}