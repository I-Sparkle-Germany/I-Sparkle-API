{"version":3,"sources":["nodeController.es6"],"names":["NodeController","$compile","$filter","$q","$rootScope","$scope","$state","$timeout","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","$translate","autoSaveInterval","nodeId","nodeContent","nodeStatus","nodeTitle","dirtyComponentIds","dirtySubmitComponentIds","submit","workgroupId","getWorkgroupId","teacherWorkgroupId","getTeacherWorkgroupId","componentToScope","saveMessage","text","time","rubric","mode","getMode","getCurrentNode","isApplicationNode","getCurrentNodeId","currentNode","id","getNodeById","getNodeTitleByNodeId","nodeStatuses","calculateDisabled","startAutoSaveInterval","registerExitListener","hasTransitionLogic","evaluateTransitionLogicOn","evaluateTransitionLogic","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","latestClientSaveTime","clientSaveTime","isSubmit","setSaveMessage","componentId","componentType","category","event","eventData","saveVLEEvent","createRubricTour","params","componentElement","$","originalBackgroundColor","css","animate","scrollTop","prop","$on","args","isAutoSave","nodeContainsComponent","createAndSaveComponentData","componentState","notifyConnectedParts","$broadcast","isDirty","index","indexOf","push","splice","nodeToExit","saveTriggeredBy","stopAutoSaveInterval","nodeUnloaded","script","retrieveScript","then","Function","call","rubricTour","arrowWidth","bubblePadding","bubbleWidth","container","steps","showPrevButton","showNextButton","scrollDuration","customRenderer","getRubricTemplate","customData","$ctrl","i18n","nextBtn","prevBtn","doneBtn","closeTooltip","thisTarget","target","placement","title","content","replaceAssetPaths","xOffset","arrowOffset","onShow","onShowRubric","viewed","components","getComponents","l","length","i","component","yOffset","step","hopscotch","endTour","startTour","details","buttons","tour","template","width","padding","isTour","stepNum","showClose","showCTA","ctaLabel","showPrev","showNext","templateHTML","outerHTML","getCurrStepNum","getCurrTour","childScope","revisions","componentStates","getComponentStatesByNodeIdAndComponentId","$event","isComponentDisabled","getRevisions","allowRevert","componentController","openResponseController","drawController","discussionController","tableController","graphController","lockAfterSubmit","getComponentStatesByNodeId","isSubmitted","isWorkSubmitted","isDisabled","c","tempComponent","tempComponentId","result","getComponentTemplatePath","showSaveButton","showSubmitButton","componentContent","message","autoSaveIntervalId","setInterval","clearInterval","createComponentStates","componentAnnotations","componentEvents","nodeStates","annotations","concat","saveToServer","savedStudentDataResponse","componentAnnotation","type","studentWorkList","latestStudentWork","serverSaveTime","convertToClientTimestamp","componentStatePromises","getComponentById","runId","getRunId","periodId","getPeriodId","getComponentState","componentStatePromise","getComponentStateFromChildScope","all","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","changedComponentId","connectedComponents","cc","connectedComponentParams","connectedComponentId","connectedNodeId","connectedComponent","componentScope","handleConnectedComponentStudentDataChanged","submitDirty","latestState","getComponentStateByComponentId","logOutListener","$inject"],"mappings":"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","file":"nodeController.js","sourcesContent":["class NodeController {\n    constructor($compile,\n                $filter,\n                $q,\n                $rootScope,\n                $scope,\n                $state,\n                $timeout,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$compile = $compile;\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$timeout = $timeout;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.$translate = this.$filter('translate');\n\n        // the auto save interval in milliseconds\n        this.autoSaveInterval = 60000;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        // field that will hold the node status\n        this.nodeStatus = null;\n\n        // field that will hold the node title\n        this.nodeTitle = null;\n\n        // array to hold ids of dirty component\n        this.dirtyComponentIds = [];\n\n        // array to hold ids of components where student work has changed since last submission\n        this.dirtySubmitComponentIds = [];\n\n        // whether the student work has changed since last submit\n        this.submit = false;\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n\n        this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n\n        /*\n         * an object that holds the mappings with the key being the component\n         * and the value being the scope object from the child controller\n         */\n        this.componentToScope = {};\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // the step rubric\n        this.rubric = null;\n\n        // get the mode e.g. 'preview', 'student', 'authoring', 'grading', etc.\n        this.mode = this.ConfigService.getMode();\n\n        // perform setup of this node only if the current node is not a group.\n        if (this.StudentDataService.getCurrentNode() && this.ProjectService.isApplicationNode(this.StudentDataService.getCurrentNodeId())) {\n            // get the current node and node id\n            var currentNode = this.StudentDataService.getCurrentNode();\n            if (currentNode != null) {\n                this.nodeId = currentNode.id;\n            }\n\n            // get the node content\n            this.nodeContent = this.ProjectService.getNodeById(this.nodeId);\n\n            this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n\n            this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n\n            // populate the student work into this node\n            //this.setStudentWork();\n\n            // check if we need to lock this node\n            this.calculateDisabled();\n\n            //this.importWork();\n\n            // start the auto save interval\n            this.startAutoSaveInterval();\n\n            // register this controller to listen for the exit event\n            this.registerExitListener();\n\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n                this.NodeService.evaluateTransitionLogic();\n            }\n\n            // set save message with last save/submission\n            // for now, we'll use the latest component state (since we don't currently keep track of node-level saves)\n            // TODO: use node states once we implement node state saving\n            let latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId);\n            if (latestComponentState) {\n                let latestClientSaveTime = latestComponentState.clientSaveTime;\n                if (latestComponentState.isSubmit) {\n                    this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestClientSaveTime);\n                } else {\n                    this.setSaveMessage(this.$translate('LAST_SAVED'), latestClientSaveTime);\n                }\n            }\n\n            // save nodeEntered event\n            var nodeId = this.nodeId;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"nodeEntered\";\n            var eventData = {};\n            eventData.nodeId = nodeId;\n            this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            if (this.nodeContent != null) {\n                // get the step rubric\n                this.rubric = this.nodeContent.rubric;\n\n                // create the rubric tour bubbles\n                this.createRubricTour();\n            }\n\n            /*\n             * Check if the component id was provided in the state params. If\n             * it is provided, we will scroll to it and then briefly highlight\n             * it.\n             */\n            if (this.$state != null &&\n                this.$state.params != null &&\n                this.$state.params.componentId != null) {\n\n                // get the component id\n                var componentId = this.$state.params.componentId;\n\n                this.$timeout(() => {\n                    // get the UI element of the component\n                    let componentElement = $(\"#component_\" + componentId);\n\n                    if (componentElement != null) {\n                        // save the original background color\n                        let originalBackgroundColor = componentElement.css(\"backgroundColor\");\n\n                        // highlight the background briefly to draw attention to it\n                        componentElement.css(\"background-color\", \"#FFFF9C\");\n\n                        // scroll to the first new component that we've added\n                        $('#content').animate({\n                            scrollTop: componentElement.prop(\"offsetTop\")\n                        }, 1000);\n\n                        /*\n                         * remove the background highlighting so that it returns\n                         * to its original color\n                         */\n                        componentElement.css({\n                            'transition': 'background-color 3s ease-in-out',\n                            'background-color': originalBackgroundColor\n                        });\n                    }\n                }, 1000);\n            }\n        }\n\n        /**\n         * Listen for the componentSaveTriggered event which occurs when a\n         * component is requesting student data to be saved\n         */\n        this.$scope.$on('componentSaveTriggered', (event, args) => {\n            var isAutoSave = false;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentSubmitTriggered event which occurs when a\n         * component is requesting student data to be submitted\n         */\n        this.$scope.$on('componentSubmitTriggered', (event, args) => {\n            var isAutoSave = false;\n            var isSubmit = true;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId, isSubmit);\n                    }\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentStudentDataChanged event that will come from\n         * child component scopes\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentStudentDataChanged', (event, args) => {\n            /*\n             * the student data in one of our child scopes has changed so\n             * we will need to save\n             */\n            if (args != null) {\n\n                // get the part id\n                var componentId = args.componentId;\n\n                // get the new component state\n                var componentState = args.componentState;\n\n                if (componentId != null && componentState != null) {\n\n                    if (componentState.nodeId == null) {\n\n                        if (args.nodeId != null) {\n                            /*\n                             * set the node id into the component state because\n                             * the component state hasn't had it set at this\n                             * point.\n                             */\n                            componentState.nodeId = args.nodeId;\n                        }\n                    }\n\n                    if (componentState.componentId == null) {\n\n                        if (args.componentId != null) {\n                            /*\n                             * set the component id into the component state\n                             * because the component state hasn't had it set at\n                             * this point.\n                             */\n                            componentState.componentId = args.componentId;\n                        }\n                    }\n\n                    /*\n                     * notify the parts that are connected that the student\n                     * data has changed\n                     */\n                    this.notifyConnectedParts(componentId, componentState);\n\n                    this.$scope.$broadcast('siblingComponentStudentDataChanged', args);\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentDirty event that will come from child component\n         * scopes; notifies node that component has/doesn't have unsaved work\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentDirty', (event, args) => {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtyComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty components\n                    this.dirtyComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty components\n                    this.dirtyComponentIds.splice(index, 1);\n                }\n            }\n        });\n\n        /**\n         * Listen for the componentSubmitDirty event that will come from child\n         * component scopes; notifies node that work has/has not changed for a\n         * component since last submission\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentSubmitDirty', (event, args) => {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtySubmitComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty submit components\n                    this.dirtySubmitComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty submit components\n                    this.dirtySubmitComponentIds.splice(index, 1);\n                }\n            }\n        });\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the node. This will perform saving when the student exits\n         * the node.\n         */\n        this.$scope.$on('exitNode', (event, args) => {\n            // get the node that is exiting\n            var nodeToExit = args.nodeToExit;\n\n            /*\n             * make sure the node id of the node that is exiting is\n             * this node\n             */\n            if (nodeToExit.id === this.nodeId) {\n                var saveTriggeredBy = 'exitNode';\n\n                // stop the auto save interval for this node\n                this.stopAutoSaveInterval();\n\n                /*\n                 * tell the parent that this node is done performing\n                 * everything it needs to do before exiting\n                 */\n                this.nodeUnloaded(this.nodeId);\n\n                // check if this node has transition logic that should be run when the student exits the node\n                if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n                    // this node has transition logic\n                    this.NodeService.evaluateTransitionLogic();\n                }\n            }\n        });\n\n        // load script for this node, if any\n        let script = this.nodeContent.script;\n        if (script != null) {\n            this.ProjectService.retrieveScript(script).then((script) => {\n                new Function(script).call(this);\n            });\n        }\n    }\n\n    /**\n     * Create the tour bubbles for all of the rubrics for this node\n     */\n    createRubricTour() {\n        this.rubricTour = {\n            id: 'rubricTour',\n            arrowWidth: 12,\n            bubblePadding: 0,\n            bubbleWidth: 800,\n            container: '#content',\n            steps: [],\n            showPrevButton: true,\n            showNextButton: true,\n            scrollDuration: 400,\n            customRenderer: this.getRubricTemplate,\n            customData: {\n                $ctrl: this\n            },\n            i18n: {\n                nextBtn: this.$translate('NEXT'),\n                prevBtn: this.$translate('PREVIOUS'),\n                doneBtn: this.$translate('DONE'),\n                closeTooltip: this.$translate('CLOSE')\n            }\n        };\n\n        if (this.rubric) {\n            let thisTarget = '#nodeRubric_' + this.nodeId;\n\n            // add a tour bubble for the node rubric\n            this.rubricTour.steps.push(\n                {\n                    target: thisTarget,\n                    placement: 'bottom',\n                    title: this.$translate('STEP_INFO'),\n                    content: this.ProjectService.replaceAssetPaths(this.rubric),\n                    xOffset: 'center',\n                    arrowOffset: 'center',\n                    onShow: this.onShowRubric,\n                    viewed: false\n                }\n            );\n        }\n\n        // add tour bubbles for each of the component rubrics\n        let components = this.getComponents();\n        let l = components.length, i = 0;\n        for (; i < l; i++) {\n            let component = components[i];\n\n            if (component.rubric) {\n                let thisTarget = '#rubric_' + component.id;\n                this.rubricTour.steps.push(\n                    {\n                        target: thisTarget,\n                        arrowOffset: 21,\n                        placement: 'right',\n                        yOffset: 1,\n                        title: this.$translate('TEACHING_TIPS'),\n                        content: this.ProjectService.replaceAssetPaths(component.rubric),\n                        onShow: this.onShowRubric,\n                        viewed: false\n                    }\n                );\n            }\n        }\n    }\n\n    /**\n     * Show the tour bubble for the rubric with the given componentId or nodeId\n     * @param id componentId or nodeId of rubric to show\n     */\n    showRubric(id) {\n        if (this.rubricTour) {\n            let step = -1;\n            let index = 0;\n\n            let thisTarget = '#nodeRubric_' + this.nodeId;\n            if (this.nodeId === id) {\n                // the given id matches this nodeId\n                step = index;\n            }\n\n            if (step < 0) {\n                index++;\n\n                let components = this.getComponents();\n                let l = components.length, i = 0;\n                for (; i < l; i++) {\n                    let component = components[i];\n                    if (component.rubric) {\n                        thisTarget = '#rubric_' + component.id;\n                        if (component.id === id) {\n                            // the given id matches the current componentId\n                            step = index;\n                            break;\n                        }\n                        index++;\n                    }\n                }\n            }\n\n            // end any currently running rubric tour\n            hopscotch.endTour(this.rubricTour);\n            // show the rubric tour starting with the step for the matched index\n            hopscotch.startTour(this.rubricTour, step);\n        }\n    }\n\n    /**\n     * Create and return the custom template for the rubric tour bubbles\n     * @param details Object with the tour details\n     * @return HTML string\n     */\n    getRubricTemplate(details) {\n        let i18n = details.i18n;\n        let buttons = details.buttons;\n        let step = details.step;\n        let tour = details.tour;\n        let $ctrl = tour.customData.$ctrl;\n        let template =\n            `<div class=\"hopscotch-bubble-container help-bubble md-whiteframe-4dp\" style=\"width: ${ step.width }px; padding: ${ step.padding }px;\">\n                <md-toolbar class=\"md-subhead help-bubble__title md-toolbar--wise\">\n                    <div class=\"help-bubble___title__content\" layout=\"row\" layout-align=\"start center\" flex>\n                        <span>${ tour.isTour ? `${ i18n.stepNum } | ` : '' }${ step.title !== '' ? `${ step.title }` : '' }</span>\n                        <span flex></span>\n                        ${ buttons.showClose ? `<md-button class=\"md-icon-button hopscotch-close\">\n                            <md-icon aria-label=\"${ i18n.closeTooltip }\"> close </md-icon>\n                        </md-button>` : ''}\n                    </div>\n                </md-toolbar>\n                <div class=\"help-bubble__content\">\n                    ${ step.content  !== '' ? `${ step.content }` : '' }\n                    ${ buttons.showCTA ? `<md-button class=\"hopscotch-cta md-primary md-raised\">${ i18n.ctaLabel }</md-button>` : ''}\n                </div>\n                <md-divider></md-divider>\n                <div class=\"help-bubble__actions gray-lightest-bg\" layout=\"row\" layout-align=\"start center\">\n                    ${ buttons.showClose ? `<md-button class=\"button--small hopscotch-close\">${ i18n.closeTooltip }</md-button>` : ''}\n                    <span flex></span>\n                    ${ buttons.showPrev ? `<md-button class=\"button--small info hopscotch-prev\">${ i18n.prevBtn }</md-button>` : ''}\n                    ${ buttons.showNext ? `<md-button class=\"button--small info hopscotch-next\">${ i18n.nextBtn }</md-button>` : ''}\n                </md-card-actions>\n            </div>`;\n\n        // need to compile the template here because Hopscotch inserts raw html\n        let templateHTML = $ctrl.$compile(template)($ctrl.$scope)[0].outerHTML +\n            `<div class=\"hopscotch-bubble-arrow-container hopscotch-arrow\">\n                <div class=\"hopscotch-bubble-arrow-border\"></div>\n                <div class=\"hopscotch-bubble-arrow\"></div>\n            </div>`;\n        return templateHTML;\n    }\n\n    /**\n     * Callback for when a rubric tour bubble is shown\n     */\n    onShowRubric() {\n        // stop the pulsing animation on the info button for the rubric being shown\n        let index = hopscotch.getCurrStepNum();\n        hopscotch.getCurrTour().customData.$ctrl.rubricTour.steps[index].viewed = true;\n    }\n\n    /**\n     * The function that child component controllers will call to register\n     * themselves with this node\n     * @param childScope the child scope object\n     * @param component the component content for the component\n     */\n    registerComponentController(childScope, component) {\n        if (childScope != null && component != null) {\n            // get the component id\n            var componentId = component.id;\n\n            // add the component id to child scope mapping\n            this.componentToScope[componentId] = childScope;\n        }\n    }\n\n    /**\n     * Populate the student work into the node\n     */\n    setStudentWork() {\n\n    };\n\n    /**\n     * Import work from another node\n     */\n    importWork() {\n\n    };\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions(componentId) {\n        var revisions = [];\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n        return componentStates;\n    };\n\n    showRevisions($event, componentId, isComponentDisabled) {\n        var revisions = this.getRevisions(componentId);\n        var allowRevert = !isComponentDisabled;\n\n        // get the scope for the component\n        var childScope = this.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        }\n\n        // broadcast showRevisions event\n        this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n    };\n\n    /**\n     * Show student assets\n     * @param $event\n     * @param componentId\n     */\n    showStudentAssets($event, componentId) {\n\n        // get the scope for the component\n        var childScope = this.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        } else if (childScope.discussionController) {\n            componentController = childScope.discussionController;\n        } else if (childScope.tableController) {\n            componentController = childScope.tableController;\n        } else if (childScope.graphController) {\n            componentController = childScope.graphController;\n        }\n\n        this.$rootScope.$broadcast('showStudentAssets', {componentController: componentController, $event: $event});\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // notify the child components that the save button was clicked\n        this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        // notify the child components that the submit button was clicked\n        this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n        var isSubmit = true;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave, null, isSubmit);\n    };\n\n    /**\n     * Check if we need to lock the node\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the node content\n        var nodeContent = this.nodeContent;\n\n        if (nodeContent) {\n            var lockAfterSubmit = nodeContent.lockAfterSubmit;\n\n            if (lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for the node\n                var componentStates = this.StudentDataService.getComponentStatesByNodeId(nodeId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this node\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components.\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    /**\n     * Get the component given the component id\n     * @param componentId the component id we want\n     * @return the component object with the given component id\n     */\n    getComponentById(componentId) {\n\n        var component = null;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Check if this node contains a given component id\n     * @param componentId the component id\n     * @returns whether this node contains the component\n     */\n    nodeContainsComponent(componentId) {\n        var result = false;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSaveButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSubmitButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Start the auto save interval for this node\n     */\n    startAutoSaveInterval() {\n        this.autoSaveIntervalId = setInterval(() => {\n            // check if the student work is dirty\n            if (this.dirtyComponentIds.length) {\n                // the student work is dirty so we will save\n\n                var isAutoSave = true;\n\n                /*\n                 * obtain the component states from the children and save them\n                 * to the server\n                 */\n                this.createAndSaveComponentData(isAutoSave);\n            }\n        }, this.autoSaveInterval);\n    };\n\n    /**\n     * Stop the auto save interval for this node\n     */\n    stopAutoSaveInterval() {\n        clearInterval(this.autoSaveIntervalId);\n    };\n\n    /**\n     * Obtain the componentStates and annotations from the children and save them\n     * to the server\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a sumission or not\n     * @returns a promise that will save all the component states for the step\n     * that need saving\n     */\n    createAndSaveComponentData(isAutoSave, componentId, isSubmit) {\n\n        // obtain the component states from the children\n        return this.createComponentStates(isAutoSave, componentId, isSubmit).then((componentStates) => {\n            var componentAnnotations = [];\n            var componentEvents = null;\n            var nodeStates = null;\n\n            if ((componentStates != null && componentStates.length) ||\n                (componentAnnotations != null && componentAnnotations.length) ||\n                (componentEvents != null && componentEvents.length)) {\n\n                // get the annotations from the components\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null) {\n                        var annotations = componentState.annotations;\n\n                        if (annotations != null) {\n                            /*\n                             * add the annotations to our array of annotations that will\n                             * be saved to the server\n                             */\n                            componentAnnotations = componentAnnotations.concat(annotations);\n                        }\n\n                        // remove the annotations from the component state\n                        delete componentState.annotations;\n                    }\n                }\n\n                // save the component states to the server\n                return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations).then((savedStudentDataResponse) => {\n                    if (savedStudentDataResponse) {\n                        // check if this node has transition logic that should be run when the student data changes\n                        if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n                            // this node has transition logic\n                            this.NodeService.evaluateTransitionLogic();\n                        }\n\n                        // check if this node has transition logic that should be run when the student score changes\n                        if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('scoreChanged')) {\n\n                            if (componentAnnotations != null && componentAnnotations.length > 0) {\n                                var evaluateTransitionLogic = false;\n\n                                // loop through all the annotations and check if any were score annotations\n                                for (var c = 0; c < componentAnnotations.length; c++) {\n                                    var componentAnnotation = componentAnnotations[c];\n\n                                    if (componentAnnotation != null) {\n                                        if (componentAnnotation.type === 'autoScore') {\n                                            evaluateTransitionLogic = true;\n                                        }\n                                    }\n                                }\n\n                                if (evaluateTransitionLogic) {\n                                    // the student score has changed so we will evaluate the transition logic\n                                    this.NodeService.evaluateTransitionLogic();\n                                }\n                            }\n                        }\n\n                        let studentWorkList = savedStudentDataResponse.studentWorkList;\n                        if (!componentId && studentWorkList && studentWorkList.length) {\n                            // this was a step save or submission and student work was saved, so set save message\n                            let latestStudentWork = studentWorkList[studentWorkList.length - 1];\n                            let serverSaveTime = latestStudentWork.serverSaveTime;\n                            let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                            if (isAutoSave) {\n                                this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n                            } else if (isSubmit) {\n                                this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n                            } else {\n                                this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n                            }\n                        } else {\n                            this.setSaveMessage('', null);\n                        }\n                    }\n\n                    return savedStudentDataResponse;\n                });\n            }\n        });\n    };\n\n    /**\n     * Loop through this node's components and get/create component states\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a submission or not\n     * @returns an array of promises that will return component states\n     */\n    createComponentStates(isAutoSave, componentId, isSubmit) {\n        var components = [];\n        var componentStatePromises = [];\n\n        // get the components for this node\n        if (componentId) {\n            var component = this.getComponentById(componentId);\n            if (component) {\n                components.push(component);\n            }\n        } else {\n            components = this.getComponents();\n        }\n\n        if (components.length) {\n\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var nodeId = this.nodeId;\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n                    var componentType = component.type;\n\n                    // get the scope for the component\n                    var childScope = this.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n                        if (childScope.getComponentState) {\n                            // get the component state promise from the child scope\n                            var componentStatePromise = this.getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit);\n                            componentStatePromises.push(componentStatePromise);\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.$q.all(componentStatePromises);\n    };\n\n    /**\n     * Get the component state from the child scope\n     * @param childScope the child scope\n     * @param runId the run id\n     * @param periodId the period id\n     * @param workgroupId the workgroup id\n     * @param nodeId the node id\n     * @param componentId the component id that has triggered the save\n     * @param tempComponentId the component id of the component we are obtaining\n     * a component state for\n     * @param componentType the component type\n     * @param isAutoSave whether this save was triggered by an auto save\n     * @param isSubmit whether this save was triggered by a submit\n     */\n    getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit) {\n        return childScope.getComponentState(isSubmit).then((componentState) => {\n            if (componentState != null) {\n\n                componentState.runId = runId;\n                componentState.periodId = periodId;\n                componentState.workgroupId = workgroupId;\n                componentState.nodeId = this.nodeId;\n\n                // set the component id into the student work object\n                componentState.componentId = tempComponentId;\n\n                // set the component type\n                componentState.componentType = componentType;\n\n                if (componentId == null) {\n                    /*\n                     * the node has triggered the save so all the components will\n                     * either have isAutoSave set to true or false; if this is a\n                     * submission, all the components will have isSubmit set to true\n                     */\n                    componentState.isAutoSave = isAutoSave;\n\n                    if (isSubmit) {\n                        /*\n                         * set the isSubmit value in the component state if\n                         * it wasn't set by the component\n                         */\n                        if (componentState.isSubmit == null) {\n                            componentState.isSubmit = true;\n                        }\n                    }\n                } else {\n                    /*\n                     * a component has triggered the save so only that component will\n                     * have isAutoSave set to false; if this is a submission,\n                     * component will have isSubmit set to true\n                     */\n\n                    if (componentId === tempComponentId) {\n                        // this component triggered the save\n                        componentState.isAutoSave = false;\n\n                        if (isSubmit) {\n                            /*\n                             * set the isSubmit value in the component state if\n                             * it wasn't set by the component\n                             */\n                            if (componentState.isSubmit == null) {\n                                componentState.isSubmit = true;\n                            }\n                        }\n                    }\n                }\n\n                return componentState\n            }\n        });\n    }\n\n    /**\n     * Get the latest annotations for a given component\n     * TODO: move to a parent component class in the future?\n     * @param componentId the component's id\n     * @return object containing the component's latest score and comment annotations\n     */\n    getLatestComponentAnnotations(componentId) {\n        let latestScoreAnnotation = null;\n        let latestCommentAnnotation = null;\n\n        let nodeId = this.nodeId;\n        let workgroupId = this.workgroupId;\n\n        // get the latest score annotation for this component\n        latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, 'any');\n\n        // get the latest comment annotation for this component\n        latestCommentAnnotation = this.AnnotationService.getLatestCommentAnnotation(nodeId, componentId, workgroupId, 'any');\n\n        return {\n            'score': latestScoreAnnotation,\n            'comment': latestCommentAnnotation\n        };\n    };\n\n    /**\n     * Notify any connected components that the student data has changed\n     * @param componentId the component id that has changed\n     * @param componentState the new component state\n     */\n    notifyConnectedParts(changedComponentId, componentState) {\n\n        if (changedComponentId != null && componentState != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            if (components != null) {\n\n                /*\n                 * loop through all the components and look for components\n                 * that are listening for the given component id to change.\n                 * only notify components that are listening for changes\n                 * from the specific component id.\n                 */\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        // get this component id\n                        var tempComponentId = tempComponent.id;\n\n                        /*\n                         * get the connected components that this component is\n                         * listening for\n                         */\n                        var connectedComponents = tempComponent.connectedComponents;\n\n                        if (connectedComponents != null) {\n\n                            // loop through all the connected components\n                            for (var cc = 0; cc < connectedComponents.length; cc++) {\n\n                                // get a connected component\n                                var connectedComponentParams = connectedComponents[cc];\n\n                                if (connectedComponentParams != null) {\n\n                                    // get the node id\n                                    var nodeId = connectedComponentParams.nodeId;\n\n                                    // get the component id\n                                    var componentId = connectedComponentParams.componentId;\n\n                                    /*\n                                     * get the id which is the old field that we used to store\n                                     * the component id in. this is here to maintain backwards\n                                     * compatibility.\n                                     */\n                                    var id = connectedComponentParams.id;\n\n                                    if (nodeId != null && componentId != null) {\n                                        // the node id and component id was provided\n                                        var connectedComponentId = componentId;\n                                        var connectedNodeId = nodeId;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedNodeId == this.nodeId && connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    } else if (componentId != null) {\n                                        /*\n                                         * the node id was not provided but the component id was provided\n                                         * so we will assume the component id is in the current node\n                                         */\n                                        var connectedComponentId = componentId;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    } else if (id != null) {\n                                        /*\n                                         * the node id and component id were not provided but the\n                                         * id was provided which is the old field we used to set\n                                         * the component id in. this is here to maintain backwards\n                                         * compatibility.\n                                         */\n                                        var connectedComponentId = id;\n\n                                        // check if the component id matches the one that has changed\n                                        if (connectedComponentId === changedComponentId) {\n\n                                            var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                            // get the scope for the listening component\n                                            var componentScope = this.componentToScope[tempComponentId];\n\n                                            // check if the listening component has a handler function\n                                            if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                                // tell the listening part to handle the student data changing\n                                                componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByComponentId(componentId) {\n        var componentState = null;\n\n        if (componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the nodeId\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var componentState = null;\n\n        if (nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    nodeUnloaded(nodeId) {\n        hopscotch.endTour(this.rubricTour);\n\n        var isAutoSave = true;\n\n        this.createAndSaveComponentData(isAutoSave);\n\n        // save nodeExited event\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"nodeExited\";\n        var eventData = {};\n        eventData.nodeId = nodeId;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Checks whether any of the node's components have unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    getSubmitDirty() {\n        let submitDirty = false;\n        let components = this.getComponents();\n\n        if (components != null) {\n            for (let c = 0, l = components.length; c < l; c++) {\n                let id = components[c].id;\n                let latestState = this.getComponentStateByComponentId(id);\n\n                if (latestState && !latestState.isSubmit) {\n                    submitDirty = true;\n                    break;\n                }\n            }\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n        /**\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before exiting.\n         */\n        this.logOutListener = this.$scope.$on('exit', (event, args) => {\n\n            // stop the auto save interval for this node\n            this.stopAutoSaveInterval();\n\n            /*\n             * tell the parent that this node is done performing\n             * everything it needs to do before exiting\n             */\n            this.nodeUnloaded(this.nodeId);\n\n            // call this function to remove the listener\n            this.logOutListener();\n\n            /*\n             * tell the session service that this listener is done\n             * performing everything it needs to do before exiting\n             */\n            this.$rootScope.$broadcast('doneExiting');\n        });\n    };\n}\n\nNodeController.$inject = [\n    '$compile',\n    '$filter',\n    '$q',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$timeout',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NodeController;\n"]}