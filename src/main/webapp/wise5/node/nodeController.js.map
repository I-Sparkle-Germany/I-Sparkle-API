{"version":3,"sources":["nodeController.es6"],"names":[],"mappings":"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","file":"nodeController.js","sourcesContent":["class NodeController {\n    constructor($rootScope,\n                $scope,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the auto save interval in milliseconds\n        this.autoSaveInterval = 60000;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        // field that will hold the node status\n        this.nodeStatus = null;\n\n        // field that will hold the node title\n        this.nodeTitle = null;\n\n        // whether the student work is dirty and needs saving\n        this.isDirty = false;\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n\n        this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n\n        /*\n         * an object that holds the mappings with the key being the component\n         * and the value being the scope object from the child controller\n         */\n        this.$scope.componentToScope = {};\n        this.notebookOpen = false;\n\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // perform setup of this node only if the current node is not a group.\n        if (this.StudentDataService.getCurrentNode() && this.ProjectService.isApplicationNode(this.StudentDataService.getCurrentNodeId())) {\n            // get the current node and node id\n            var currentNode = this.StudentDataService.getCurrentNode();\n            if (currentNode != null) {\n                this.nodeId = currentNode.id;\n            }\n\n            // save nodeEntered event\n            var nodeId = this.nodeId;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"nodeEntered\";\n            var eventData = {};\n            eventData.nodeId = nodeId;\n            this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            // get the node content\n            this.nodeContent = this.ProjectService.getNodeContentByNodeId(this.nodeId);\n\n            this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n\n            this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n\n            // populate the student work into this node\n            //this.setStudentWork();\n\n            // check if we need to lock this node\n            this.calculateDisabled();\n\n            //this.importWork();\n\n            // tell the parent controller that this node has loaded\n            //this.nodeLoaded(this.nodeId);\n\n            // start the auto save interval\n            this.startAutoSaveInterval();\n\n            // register this controller to listen for the exit event\n            this.registerExitListener();\n\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n                this.NodeService.evaluateTransitionLogic();\n            }\n        }\n\n        /**\n         * The function that child component controllers will call to register\n         * themselves with this node\n         * @param childScope the child scope object\n         * @param component the component content for the component\n         */\n        this.$scope.registerComponentController = function(childScope, component) {\n\n            if (this.$scope != null && component != null) {\n                // get the component id\n                var componentId = component.id;\n\n                // add the component id to child scope mapping\n                this.$scope.componentToScope[componentId] = childScope;\n            }\n        }.bind(this);\n\n        /**\n         * Listen for the componentSaveTriggered event which occurs when a\n         * component is requesting student data to be saved\n         */\n        this.$scope.$on('componentSaveTriggered', angular.bind(this, function(event, args) {\n            var isAutoSave = false;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId);\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentSubmitTriggered event which occurs when a\n         * component is requesting student data to be submitted\n         */\n        this.$scope.$on('componentSubmitTriggered', angular.bind(this, function(event, args) {\n            var isAutoSave = false;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId);\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentStudentDataChanged event that will come from\n         * child component scopes\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentStudentDataChanged', angular.bind(this, function(event, args) {\n            /*\n             * the student data in one of our child scopes has changed so\n             * we will need to save\n             */\n            this.isDirty = true;\n            this.setSaveMessage('');\n\n            if (args != null) {\n\n                // get the part id\n                var componentId = args.componentId;\n\n                // get the new component state\n                var componentState = args.componentState;\n\n                if (componentId != null && componentState != null) {\n\n                    /*\n                     * notify the parts that are connected that the student\n                     * data has changed\n                     */\n                    this.notifyConnectedParts(componentId, componentState);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the node. This will perform saving when the student exits\n         * the node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n            // get the node that is exiting\n            var nodeToExit = args.nodeToExit;\n\n            /*\n             * make sure the node id of the node that is exiting is\n             * this node\n             */\n            if (nodeToExit.id === this.nodeId) {\n                var saveTriggeredBy = 'exitNode';\n\n                // stop the auto save interval for this node\n                this.stopAutoSaveInterval();\n\n                /*\n                 * tell the parent that this node is done performing\n                 * everything it needs to do before exiting\n                 */\n                this.nodeUnloaded(this.nodeId);\n\n                // check if this node has transition logic that should be run when the student exits the node\n                if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n                    // this node has transition logic\n                    this.NodeService.evaluateTransitionLogic();\n                }\n            }\n        }));\n    }\n\n    /**\n     * Populate the student work into the node\n     */\n    setStudentWork() {\n\n    };\n\n    /**\n     * Import work from another node\n     */\n    importWork() {\n\n    };\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions(componentId) {\n        var revisions = [];\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n        return componentStates;\n    };\n\n    showRevisions($event, componentId, isComponentDisabled) {\n        var revisions = this.getRevisions(componentId);\n        var allowRevert = !isComponentDisabled;\n\n        // get the scope for the component\n        var childScope = this.$scope.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        }\n\n        // broadcast showRevisions event\n        this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n    };\n\n    showNotebook($event, componentId) {\n\n        // get the scope for the component\n        var childScope = this.$scope.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        } else if (childScope.discussionController) {\n            componentController = childScope.discussionController;\n        } else if (childScope.tableController) {\n            componentController = childScope.tableController;\n        } else if (childScope.graphController) {\n            componentController = childScope.graphController;\n        }\n\n        // TODO: support filtering by notebook item type/filetype\n        var notebookFilters = [{'name': 'files', 'label': 'Files'}];\n\n        this.$rootScope.$broadcast('showNotebook', {componentController: componentController, notebookFilters: notebookFilters, $event: $event});\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // notify the child components that the save button was clicked\n        this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        // notify the child components that the submit button was clicked\n        this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n    };\n\n    /**\n     * Check if we need to lock the node\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the node content\n        var nodeContent = this.nodeContent;\n\n        if (nodeContent) {\n            var lockAfterSubmit = nodeContent.lockAfterSubmit;\n\n            if (lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for the node\n                var componentStates = this.StudentDataService.getComponentStatesByNodeId(nodeId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this node\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    /**\n     * Get the component given the component id\n     * @param componentId the component id we want\n     * @return the component object with the given component id\n     */\n    getComponentById(componentId) {\n\n        var component = null;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Check if this node contains a given component id\n     * @param componentId the component id\n     * @returns whether this node contains the component\n     */\n    nodeContainsComponent(componentId) {\n        var result = false;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSaveButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSubmitButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     */\n    setSaveMessage(message) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = new Date();\n    };\n\n    /**\n     * Start the auto save interval for this node\n     */\n    startAutoSaveInterval() {\n        this.autoSaveIntervalId = setInterval(angular.bind(this, function() {\n            // check if the student work is dirty\n            if (this.isDirty) {\n                // the student work is dirty so we will save\n\n                var isAutoSave = true;\n\n                /*\n                 * obtain the component states from the children and save them\n                 * to the server\n                 */\n                this.createAndSaveComponentData(isAutoSave);\n                //this.setSaveMessage('Auto-Saved');\n            }\n        }), this.autoSaveInterval);\n    };\n\n    /**\n     * Stop the auto save interval for this node\n     */\n    stopAutoSaveInterval() {\n        clearInterval(this.autoSaveIntervalId);\n    };\n\n    /**\n     * Obtain the componentStates and annotations from the children and save them\n     * to the server\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     */\n    createAndSaveComponentData(isAutoSave, componentId) {\n\n        // obtain the component states from the children\n        var componentStates = this.createComponentStates(isAutoSave, componentId);\n        var componentAnnotations = this.getComponentAnnotations();\n        var componentEvents = null;\n        var nodeStates = null;\n\n        if (this.ConfigService.getConfigParam('mode') === 'preview') {\n            // we are in preview mode so we will pretend that the data was saved to the server\n\n            this.isDirty = false;\n\n            if (isAutoSave) {\n                this.setSaveMessage('Auto-Saved');\n            } else {\n                this.setSaveMessage('Saved');\n            }\n        }\n\n        if ((componentStates != null && componentStates.length > 0) ||\n            (componentAnnotations != null && componentAnnotations.length > 0) ||\n            (componentEvents != null && componentEvents.length > 0)) {\n            // save the component states to the server\n            return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations).then(angular.bind(this, function(savedStudentDataResponse) {\n                // check if this node has transition logic that should be run when the student data changes\n                if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n                    // this node has transition logic\n                    this.NodeService.evaluateTransitionLogic();\n                }\n\n                // TODO: handle error response from server if POST fails\n                this.isDirty = false;\n\n                if (isAutoSave) {\n                    this.setSaveMessage('Auto-Saved');\n                } else {\n                    this.setSaveMessage('Saved');\n                }\n\n                return savedStudentDataResponse;\n            }));\n        }\n    };\n\n    /**\n     * Loop through this node's components and get/create component states\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @returns an array of component states\n     */\n    createComponentStates(isAutoSave, componentId) {\n        var componentStates = [];\n\n        // get the components for this node\n        var components = this.getComponents();\n\n        if (components != null) {\n\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n\n                    // get the scope for the component\n                    var childScope = this.$scope.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n                        var componentState = null;\n\n                        if (childScope.getComponentState != null) {\n                            // get the student work object from the child scope\n                            componentState = childScope.getComponentState();\n                        }\n\n                        if (componentState != null) {\n\n                            componentState.runId = runId;\n                            componentState.periodId = periodId;\n                            componentState.workgroupId = workgroupId;\n                            componentState.nodeId = this.nodeId;\n\n                            // set the component id into the student work object\n                            componentState.componentId = tempComponentId;\n\n                            // set the component type\n                            componentState.componentType = component.type;\n\n                            if (componentId == null) {\n                                /*\n                                 * the node has triggered the save so all the components will\n                                 * either have isAutoSave set to true or false\n                                 */\n                                componentState.isAutoSave = isAutoSave;\n                            } else {\n                                /*\n                                 * a component has triggered the save so that component will\n                                 * have isAutoSave set to false but all other components will\n                                 * have isAutoSave set to true\n                                 */\n\n                                if (componentId === tempComponentId) {\n                                    // this component triggered the save\n                                    componentState.isAutoSave = false;\n                                } else {\n                                    // this component did not trigger the save\n                                    componentState.isAutoSave = true;\n                                }\n                            }\n\n                            // add the student work object to our components array\n                            componentStates.push(componentState);\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStates;\n    };\n\n    /**\n     * Loop through this node's components and get annotations\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @returns an array of component states\n     */\n    getComponentAnnotations() {\n        var componentAnnotations = [];\n\n        // get the components for this node\n        var components = this.getComponents();\n\n        if (components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n\n                    // get the scope for the component\n                    var childScope = this.$scope.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n\n                        var componentState = null;\n\n                        if (childScope.getUnSavedAnnotation != null) {\n                            // get the student work object from the child scope\n                            componentAnnotation = childScope.getUnSavedAnnotation();\n\n                            if (componentAnnotation != null) {\n                                // add the student work object to our components array\n                                componentAnnotations.push(componentAnnotation);\n\n                                childScope.setUnSavedAnnotation(null);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentAnnotations;\n    };\n\n    /**\n     * Notify any connected components that the student data has changed\n     * @param componentId the component id that has changed\n     * @param componentState the new component state\n     */\n    notifyConnectedParts(changedComponentId, componentState) {\n\n        if (changedComponentId != null && componentState != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            if (components != null) {\n\n                /*\n                 * loop through all the components and look for components\n                 * that are listening for the given component id to change.\n                 * only notify components that are listening for changes\n                 * from the specific component id.\n                 */\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        // get this component id\n                        var tempComponentId = tempComponent.id;\n\n                        /*\n                         * get the connected components that this component is\n                         * listening for\n                         */\n                        var connectedComponents = tempComponent.connectedComponents;\n\n                        if (connectedComponents != null) {\n\n                            // loop through all the connected components\n                            for (var cc = 0; cc < connectedComponents.length; cc++) {\n\n                                // get a connected component\n                                var connectedComponentParams = connectedComponents[cc];\n\n                                if (connectedComponentParams != null) {\n\n                                    // get the connected component id\n                                    var connectedComponentId = connectedComponentParams.id;\n\n                                    // check if the component id matches the one that has changed\n                                    if (connectedComponentId === changedComponentId) {\n\n                                        var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                        // get the scope for the listening component\n                                        var componentScope = this.$scope.componentToScope[tempComponentId];\n\n                                        // check if the listening component has a handler function\n                                        if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                            // tell the listening part to handle the student data changing\n                                            componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByComponentId(componentId) {\n        var componentState = null;\n\n        if (componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the nodeId\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var componentState = null;\n\n        if (nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    nodeLoaded(nodeId) {\n        //var newNodeVisit = this.StudentDataService.createNodeVisit(nodeId);\n    };\n\n    nodeUnloaded(nodeId) {\n        var isAutoSave = true;\n\n        this.createAndSaveComponentData(isAutoSave);\n\n        // save nodeExited event\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"nodeExited\";\n        var eventData = {};\n        eventData.nodeId = nodeId;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    // saves current work and adds to notebook as needed\n    addStudentWorkItemToNotebook(componentId) {\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode != null) {\n            var currentNodeId = currentNode.id;\n\n            // get the scope for the component\n            var childScope = this.$scope.componentToScope[componentId];\n\n            if (childScope != null && childScope.isDirty()) {\n                // we need to save this component first before adding to notebook\n                var isAutoSave = false;\n\n                this.createAndSaveComponentData(isAutoSave, componentId).then(angular.bind(this, function(saveResult) {\n                    var currentComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(currentNodeId, componentId);\n                    if (currentComponentState != null) {\n                        this.NotebookService.addStudentWorkNotebookItem(currentComponentState);\n                    }\n                }));\n            } else {\n                // no new data to save. Get the latest componentstate and add to notebook\n                var currentComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(currentNodeId, componentId);\n                if (currentComponentState != null) {\n                    this.NotebookService.addStudentWorkNotebookItem(currentComponentState);\n                }\n            }\n        }\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n        /**\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before exiting.\n         */\n        this.logOutListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // stop the auto save interval for this node\n            this.stopAutoSaveInterval();\n\n            /*\n             * tell the parent that this node is done performing\n             * everything it needs to do before exiting\n             */\n            this.nodeUnloaded(this.nodeId);\n\n            // call this function to remove the listener\n            this.logOutListener();\n\n            /*\n             * tell the session service that this listener is done\n             * performing everything it needs to do before exiting\n             */\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nNodeController.$inject = [\n    '$rootScope',\n    '$scope',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NodeController;\n"]}