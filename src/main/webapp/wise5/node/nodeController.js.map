{"version":3,"sources":["nodeController.es6"],"names":[],"mappings":";;;;;;;;;;IAAM;AACF,aADE,cACF,CAAY,UAAZ,EACY,MADZ,EAEY,iBAFZ,EAGY,aAHZ,EAIY,WAJZ,EAKY,eALZ,EAMY,cANZ,EAOY,kBAPZ,EAOgC;8BAR9B,gBAQ8B;;AAE5B,aAAK,UAAL,GAAkB,UAAlB,CAF4B;AAG5B,aAAK,MAAL,GAAc,MAAd,CAH4B;AAI5B,aAAK,iBAAL,GAAyB,iBAAzB,CAJ4B;AAK5B,aAAK,aAAL,GAAqB,aAArB,CAL4B;AAM5B,aAAK,WAAL,GAAmB,WAAnB,CAN4B;AAO5B,aAAK,eAAL,GAAuB,eAAvB,CAP4B;AAQ5B,aAAK,cAAL,GAAsB,cAAtB,CAR4B;AAS5B,aAAK,kBAAL,GAA0B,kBAA1B;;;AAT4B,YAY5B,CAAK,gBAAL,GAAwB,KAAxB;;;AAZ4B,YAe5B,CAAK,MAAL,GAAc,IAAd;;;AAf4B,YAkB5B,CAAK,WAAL,GAAmB,IAAnB;;;AAlB4B,YAqB5B,CAAK,UAAL,GAAkB,IAAlB;;;AArB4B,YAwB5B,CAAK,SAAL,GAAiB,IAAjB;;;AAxB4B,YA2B5B,CAAK,iBAAL,GAAyB,EAAzB;;;AA3B4B,YA8B5B,CAAK,uBAAL,GAA+B,EAA/B;;;AA9B4B,YAiC5B,CAAK,MAAL,GAAc,KAAd,CAjC4B;;AAmC5B,aAAK,WAAL,GAAmB,KAAK,aAAL,CAAmB,cAAnB,EAAnB,CAnC4B;;AAqC5B,aAAK,kBAAL,GAA0B,KAAK,aAAL,CAAmB,qBAAnB,EAA1B;;;;;;AArC4B,YA2C5B,CAAK,MAAL,CAAY,gBAAZ,GAA+B,EAA/B,CA3C4B;AA4C5B,aAAK,YAAL,GAAoB,KAApB;;;AA5C4B,YA+C5B,CAAK,WAAL,GAAmB;AACf,kBAAM,EAAN;AACA,kBAAM,EAAN;SAFJ;;;AA/C4B,YAqDxB,KAAK,kBAAL,CAAwB,cAAxB,MAA4C,KAAK,cAAL,CAAoB,iBAApB,CAAsC,KAAK,kBAAL,CAAwB,gBAAxB,EAAtC,CAA5C,EAA+H;;AAE/H,gBAAI,cAAc,KAAK,kBAAL,CAAwB,cAAxB,EAAd,CAF2H;AAG/H,gBAAI,eAAe,IAAf,EAAqB;AACrB,qBAAK,MAAL,GAAc,YAAY,EAAZ,CADO;aAAzB;;;AAH+H,gBAQ/H,CAAK,WAAL,GAAmB,KAAK,cAAL,CAAoB,WAApB,CAAgC,KAAK,MAAL,CAAnD,CAR+H;;AAU/H,iBAAK,SAAL,GAAiB,KAAK,cAAL,CAAoB,oBAApB,CAAyC,KAAK,MAAL,CAA1D,CAV+H;;AAY/H,iBAAK,UAAL,GAAkB,KAAK,kBAAL,CAAwB,YAAxB,CAAqC,KAAK,MAAL,CAAvD;;;;;;AAZ+H,gBAkB/H,CAAK,iBAAL;;;;;AAlB+H,gBAuB/H,CAAK,qBAAL;;;AAvB+H,gBA0B/H,CAAK,oBAAL,GA1B+H;;AA4B/H,gBAAI,KAAK,WAAL,CAAiB,kBAAjB,MAAyC,KAAK,WAAL,CAAiB,yBAAjB,CAA2C,WAA3C,CAAzC,EAAkG;AAClG,qBAAK,WAAL,CAAiB,uBAAjB,GADkG;aAAtG;;;;;AA5B+H,gBAmC3H,uBAAuB,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAAL,CAA7F,CAnC2H;AAoC/H,gBAAI,oBAAJ,EAA0B;AACtB,oBAAI,uBAAuB,qBAAqB,cAArB,CADL;AAEtB,oBAAI,qBAAqB,QAArB,EAA+B;AAC/B,yBAAK,cAAL,CAAoB,gBAApB,EAAsC,oBAAtC,EAD+B;iBAAnC,MAEO;AACH,yBAAK,cAAL,CAAoB,YAApB,EAAkC,oBAAlC,EADG;iBAFP;aAFJ;;;AApC+H,gBA8C3H,SAAS,KAAK,MAAL,CA9CkH;AA+C/H,gBAAI,cAAc,IAAd,CA/C2H;AAgD/H,gBAAI,gBAAgB,IAAhB,CAhD2H;AAiD/H,gBAAI,WAAW,YAAX,CAjD2H;AAkD/H,gBAAI,QAAQ,aAAR,CAlD2H;AAmD/H,gBAAI,YAAY,EAAZ,CAnD2H;AAoD/H,sBAAU,MAAV,GAAmB,MAAnB,CApD+H;AAqD/H,iBAAK,kBAAL,CAAwB,YAAxB,CAAqC,MAArC,EAA6C,WAA7C,EAA0D,aAA1D,EAAyE,QAAzE,EAAmF,KAAnF,EAA0F,SAA1F,EArD+H;SAAnI;;;;;;;;AArD4B,YAmH5B,CAAK,MAAL,CAAY,2BAAZ,GAA0C,UAAS,UAAT,EAAqB,SAArB,EAAgC;;AAEtE,gBAAI,KAAK,MAAL,IAAe,IAAf,IAAuB,aAAa,IAAb,EAAmB;;AAE1C,oBAAI,cAAc,UAAU,EAAV;;;AAFwB,oBAK1C,CAAK,MAAL,CAAY,gBAAZ,CAA6B,WAA7B,IAA4C,UAA5C,CAL0C;aAA9C;SAFsC,CASxC,IATwC,CASnC,IATmC,CAA1C;;;;;;AAnH4B,YAkI5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,wBAAhB,EAA0C,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC/E,gBAAI,aAAa,KAAb,CAD2E;;AAG/E,gBAAI,QAAQ,IAAR,EAAc;AACd,oBAAI,SAAS,KAAK,MAAL,CADC;AAEd,oBAAI,cAAc,KAAK,WAAL,CAFJ;;AAId,oBAAI,UAAU,IAAV,IAAkB,eAAe,IAAf,EAAqB;AACvC,wBAAI,KAAK,MAAL,IAAe,MAAf,IAAyB,KAAK,qBAAL,CAA2B,WAA3B,CAAzB,EAAkE;;;;;AAKlE,6BAAK,0BAAL,CAAgC,UAAhC,EAA4C,WAA5C,EALkE;qBAAtE;iBADJ;aAJJ;SAHyD,CAA7D;;;;;;AAlI4B,YAyJ5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,0BAAhB,EAA4C,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACjF,gBAAI,aAAa,KAAb,CAD6E;AAEjF,gBAAI,WAAW,IAAX,CAF6E;;AAIjF,gBAAI,QAAQ,IAAR,EAAc;AACd,oBAAI,SAAS,KAAK,MAAL,CADC;AAEd,oBAAI,cAAc,KAAK,WAAL,CAFJ;;AAId,oBAAI,UAAU,IAAV,IAAkB,eAAe,IAAf,EAAqB;AACvC,wBAAI,KAAK,MAAL,IAAe,MAAf,IAAyB,KAAK,qBAAL,CAA2B,WAA3B,CAAzB,EAAkE;;;;;AAKlE,6BAAK,0BAAL,CAAgC,UAAhC,EAA4C,WAA5C,EAAyD,QAAzD,EALkE;qBAAtE;iBADJ;aAJJ;SAJ2D,CAA/D;;;;;;;;AAzJ4B,YAmL5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,6BAAhB,EAA+C,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;;;;;AAMpF,gBAAI,QAAQ,IAAR,EAAc;;;AAGd,oBAAI,cAAc,KAAK,WAAL;;;AAHJ,oBAMV,iBAAiB,KAAK,cAAL,CANP;;AAQd,oBAAI,eAAe,IAAf,IAAuB,kBAAkB,IAAlB,EAAwB;;;;;;AAM/C,yBAAK,oBAAL,CAA0B,WAA1B,EAAuC,cAAvC,EAN+C;iBAAnD;aARJ;SAN8D,CAAlE;;;;;;;;AAnL4B,YAkN5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,gBAAhB,EAAkC,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AACvE,gBAAI,cAAc,KAAK,WAAL,CADqD;;AAGvE,gBAAI,WAAJ,EAAiB;AACb,oBAAI,UAAU,KAAK,OAAL,CADD;AAEb,oBAAI,QAAQ,KAAK,iBAAL,CAAuB,OAAvB,CAA+B,WAA/B,CAAR,CAFS;;AAIb,oBAAI,WAAW,UAAU,CAAC,CAAD,EAAI;;AAEzB,yBAAK,iBAAL,CAAuB,IAAvB,CAA4B,WAA5B,EAFyB;iBAA7B,MAGO,IAAI,CAAC,OAAD,IAAY,QAAQ,CAAC,CAAD,EAAG;;AAE9B,yBAAK,iBAAL,CAAuB,MAAvB,CAA8B,KAA9B,EAAqC,CAArC,EAF8B;iBAA3B;aAPX;SAHiD,CAArD;;;;;;;;;AAlN4B,YA0O5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,sBAAhB,EAAwC,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC7E,gBAAI,cAAc,KAAK,WAAL,CAD2D;;AAG7E,gBAAI,WAAJ,EAAiB;AACb,oBAAI,UAAU,KAAK,OAAL,CADD;AAEb,oBAAI,QAAQ,KAAK,uBAAL,CAA6B,OAA7B,CAAqC,WAArC,CAAR,CAFS;;AAIb,oBAAI,WAAW,UAAU,CAAC,CAAD,EAAI;;AAEzB,yBAAK,uBAAL,CAA6B,IAA7B,CAAkC,WAAlC,EAFyB;iBAA7B,MAGO,IAAI,CAAC,OAAD,IAAY,QAAQ,CAAC,CAAD,EAAG;;AAE9B,yBAAK,uBAAL,CAA6B,MAA7B,CAAoC,KAApC,EAA2C,CAA3C,EAF8B;iBAA3B;aAPX;SAHuD,CAA3D;;;;;;;AA1O4B,YAgQ5B,CAAK,MAAL,CAAY,GAAZ,CAAgB,UAAhB,EAA4B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;;AAGjE,gBAAI,aAAa,KAAK,UAAL;;;;;;AAHgD,gBAS7D,WAAW,EAAX,KAAkB,KAAK,MAAL,EAAa;AAC/B,oBAAI,kBAAkB,UAAlB;;;AAD2B,oBAI/B,CAAK,oBAAL;;;;;;AAJ+B,oBAU/B,CAAK,YAAL,CAAkB,KAAK,MAAL,CAAlB;;;AAV+B,oBAa3B,KAAK,WAAL,CAAiB,kBAAjB,MAAyC,KAAK,WAAL,CAAiB,yBAAjB,CAA2C,UAA3C,CAAzC,EAAiG;;AAEjG,yBAAK,WAAL,CAAiB,uBAAjB,GAFiG;iBAArG;aAbJ;SAT2C,CAA/C,EAhQ4B;KAPhC;;;;;;;iBADE;;yCAySe;;;;;;;;qCAOJ;;;;;;;;qCAOA,aAAa;AACtB,gBAAI,YAAY,EAAZ;;AADkB,gBAGlB,kBAAkB,KAAK,kBAAL,CAAwB,wCAAxB,CAAiE,KAAK,MAAL,EAAa,WAA9E,CAAlB,CAHkB;AAItB,mBAAO,eAAP,CAJsB;;;;sCAOZ,QAAQ,aAAa,qBAAqB;AACpD,gBAAI,YAAY,KAAK,YAAL,CAAkB,WAAlB,CAAZ,CADgD;AAEpD,gBAAI,cAAc,CAAC,mBAAD;;;AAFkC,gBAKhD,aAAa,KAAK,MAAL,CAAY,gBAAZ,CAA6B,WAA7B,CAAb;;;AALgD,gBAQhD,sBAAsB,IAAtB,CARgD;;AAUpD,gBAAI,WAAW,sBAAX,EAAmC;AACnC,sCAAsB,WAAW,sBAAX,CADa;aAAvC,MAEO,IAAI,WAAW,cAAX,EAA2B;AAClC,sCAAsB,WAAW,cAAX,CADY;aAA/B;;;AAZ6C,gBAiBpD,CAAK,UAAL,CAAgB,UAAhB,CAA2B,eAA3B,EAA4C,EAAC,WAAW,SAAX,EAAsB,qBAAqB,mBAArB,EAA0C,aAAa,WAAb,EAA0B,QAAQ,MAAR,EAAvI,EAjBoD;;;;;;;;;;;0CAyBtC,QAAQ,aAAa;;;AAGnC,gBAAI,aAAa,KAAK,MAAL,CAAY,gBAAZ,CAA6B,WAA7B,CAAb;;;AAH+B,gBAM/B,sBAAsB,IAAtB,CAN+B;;AAQnC,gBAAI,WAAW,sBAAX,EAAmC;AACnC,sCAAsB,WAAW,sBAAX,CADa;aAAvC,MAEO,IAAI,WAAW,cAAX,EAA2B;AAClC,sCAAsB,WAAW,cAAX,CADY;aAA/B,MAEA,IAAI,WAAW,oBAAX,EAAiC;AACxC,sCAAsB,WAAW,oBAAX,CADkB;aAArC,MAEA,IAAI,WAAW,eAAX,EAA4B;AACnC,sCAAsB,WAAW,eAAX,CADa;aAAhC,MAEA,IAAI,WAAW,eAAX,EAA4B;AACnC,sCAAsB,WAAW,eAAX,CADa;aAAhC;;AAIP,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,mBAA3B,EAAgD,EAAC,qBAAqB,mBAArB,EAA0C,QAAQ,MAAR,EAA3F,EApBmC;;;;;;;;;4CA0BnB;;;AAGhB,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,iBAA3B,EAA8C,EAAC,QAAQ,KAAK,MAAL,EAAvD,EAHgB;;AAKhB,gBAAI,aAAa,KAAb;;;;;;AALY,gBAWhB,CAAK,0BAAL,CAAgC,UAAhC,EAXgB;;;;;;;;;8CAiBE;;;AAGlB,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,mBAA3B,EAAgD,EAAC,QAAQ,KAAK,MAAL,EAAzD,EAHkB;;AAKlB,gBAAI,aAAa,KAAb,CALc;AAMlB,gBAAI,WAAW,IAAX;;;;;;AANc,gBAYlB,CAAK,0BAAL,CAAgC,UAAhC,EAA4C,IAA5C,EAAkD,QAAlD,EAZkB;;;;;;;;;4CAkBF;;AAEhB,gBAAI,SAAS,KAAK,MAAL;;;AAFG,gBAKZ,cAAc,KAAK,WAAL,CALF;;AAOhB,gBAAI,WAAJ,EAAiB;AACb,oBAAI,kBAAkB,YAAY,eAAZ,CADT;;AAGb,oBAAI,eAAJ,EAAqB;;;;AAIjB,wBAAI,kBAAkB,KAAK,kBAAL,CAAwB,0BAAxB,CAAmD,MAAnD,CAAlB;;;AAJa,wBAOb,cAAc,KAAK,WAAL,CAAiB,eAAjB,CAAiC,eAAjC,CAAd,CAPa;;AASjB,wBAAI,WAAJ,EAAiB;;AAEb,6BAAK,UAAL,GAAkB,IAAlB,CAFa;qBAAjB;iBATJ;aAHJ;;;;;;;;;;wCAwBY;AACZ,gBAAI,aAAa,IAAb,CADQ;;AAGZ,gBAAI,KAAK,WAAL,IAAoB,IAApB,EAA0B;AAC1B,6BAAa,KAAK,WAAL,CAAiB,UAAjB,CADa;aAA9B;;AAIA,gBAAI,cAAc,IAAd,IAAsB,KAAK,UAAL,EAAiB;AACvC,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;AACxC,wBAAI,YAAY,WAAW,CAAX,CAAZ,CADoC;;AAGxC,8BAAU,UAAV,GAAuB,IAAvB,CAHwC;iBAA5C;aADJ;;AAQA,gBAAI,cAAc,IAAd,IAAsB,KAAK,WAAL,CAAiB,eAAjB,EAAkC;AACxD,qBAAK,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAnC,EAAwC;AACpC,gCAAY,WAAW,CAAX,CAAZ,CADoC;;AAGpC,8BAAU,eAAV,GAA4B,IAA5B,CAHoC;iBAAxC;aADJ;;AAQA,mBAAO,UAAP,CAvBY;;;;;;;;;;;yCA+BC,aAAa;;AAE1B,gBAAI,YAAY,IAAZ,CAFsB;;AAI1B,gBAAI,eAAe,IAAf,EAAqB;;;AAGrB,oBAAI,aAAa,KAAK,aAAL,EAAb;;;AAHiB,qBAMhB,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;;;AAGxC,wBAAI,gBAAgB,WAAW,CAAX,CAAhB,CAHoC;;AAKxC,wBAAI,iBAAiB,IAAjB,EAAuB;AACvB,4BAAI,kBAAkB,cAAc,EAAd;;;AADC,4BAInB,oBAAoB,WAApB,EAAiC;;AAEjC,wCAAY,aAAZ,CAFiC;AAGjC,kCAHiC;yBAArC;qBAJJ;iBALJ;aANJ;;AAwBA,mBAAO,SAAP,CA5B0B;;;;;;;;;;;8CAoCR,aAAa;AAC/B,gBAAI,SAAS,KAAT,CAD2B;;AAG/B,gBAAI,eAAe,IAAf,EAAqB;;;AAGrB,oBAAI,aAAa,KAAK,aAAL,EAAb;;;AAHiB,qBAMhB,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;;;AAGxC,wBAAI,gBAAgB,WAAW,CAAX,CAAhB,CAHoC;;AAKxC,wBAAI,iBAAiB,IAAjB,EAAuB;AACvB,4BAAI,kBAAkB,cAAc,EAAd;;;AADC,4BAInB,oBAAoB,WAApB,EAAiC;;AAEjC,qCAAS,IAAT,CAFiC;AAGjC,kCAHiC;yBAArC;qBAJJ;iBALJ;aANJ;;AAwBA,mBAAO,MAAP,CA3B+B;;;;;;;;;;;iDAmCV,eAAe;AACpC,mBAAO,KAAK,WAAL,CAAiB,wBAAjB,CAA0C,aAA1C,CAAP,CADoC;;;;;;;;;;yCAQvB;AACb,gBAAI,SAAS,KAAT,CADS;;AAGb,gBAAI,KAAK,WAAL,IAAoB,IAApB,IAA4B,KAAK,WAAL,CAAiB,cAAjB,EAAiC;AAC7D,yBAAS,IAAT,CAD6D;aAAjE;;AAIA,mBAAO,MAAP,CAPa;;;;;;;;;;2CAcE;AACf,gBAAI,SAAS,KAAT,CADW;;AAGf,gBAAI,KAAK,WAAL,IAAoB,IAApB,IAA4B,KAAK,WAAL,CAAiB,gBAAjB,EAAmC;AAC/D,yBAAS,IAAT,CAD+D;aAAnE;;AAIA,mBAAO,MAAP,CAPe;;;;;;;;;;4CAcC;AAChB,gBAAI,SAAS,KAAT,CADY;;AAGhB,gBAAI,KAAK,gBAAL,IAAyB,IAAzB,EAA+B;;;AAG/B,oBAAI,KAAK,gBAAL,CAAsB,eAAtB,EAAuC;AACvC,6BAAS,IAAT,CADuC;iBAA3C;aAHJ;;AAQA,mBAAO,MAAP,CAXgB;;;;;;;;;;;uCAmBL,SAAS,MAAM;AAC1B,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,OAAxB,CAD0B;AAE1B,iBAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAxB,CAF0B;;;;;;;;;gDAQN;AACpB,iBAAK,kBAAL,GAA0B,YAAY,QAAQ,IAAR,CAAa,IAAb,EAAmB,YAAW;;AAEhE,oBAAI,KAAK,iBAAL,CAAuB,MAAvB,EAA+B;;;AAG/B,wBAAI,aAAa,IAAb;;;;;;AAH2B,wBAS/B,CAAK,0BAAL,CAAgC,UAAhC,EAT+B;iBAAnC;aAFqD,CAA/B,EAatB,KAAK,gBAAL,CAbJ,CADoB;;;;;;;;;+CAoBD;AACnB,0BAAc,KAAK,kBAAL,CAAd,CADmB;;;;;;;;;;;;;;mDAYI,YAAY,aAAa,UAAU;;;AAG1D,gBAAI,kBAAkB,KAAK,qBAAL,CAA2B,UAA3B,EAAuC,WAAvC,EAAoD,QAApD,CAAlB,CAHsD;AAI1D,gBAAI,uBAAuB,KAAK,uBAAL,EAAvB,CAJsD;AAK1D,gBAAI,kBAAkB,IAAlB,CALsD;AAM1D,gBAAI,aAAa,IAAb,CANsD;;AAQ1D,gBAAI,eAAC,IAAmB,IAAnB,IAA2B,gBAAgB,MAAhB,IAC3B,wBAAwB,IAAxB,IAAgC,qBAAqB,MAArB,IAChC,mBAAmB,IAAnB,IAA2B,gBAAgB,MAAhB,EAAyB;;AAErD,uBAAO,KAAK,kBAAL,CAAwB,YAAxB,CAAqC,eAArC,EAAsD,UAAtD,EAAkE,eAAlE,EAAmF,oBAAnF,EAAyG,IAAzG,CAA8G,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,wBAAT,EAAmC;AACvK,wBAAI,wBAAJ,EAA8B;;AAE1B,4BAAI,KAAK,WAAL,CAAiB,kBAAjB,MAAyC,KAAK,WAAL,CAAiB,yBAAjB,CAA2C,oBAA3C,CAAzC,EAA2G;;AAE3G,iCAAK,WAAL,CAAiB,uBAAjB,GAF2G;yBAA/G;;AAKA,4BAAI,kBAAkB,yBAAyB,eAAzB,CAPI;AAQ1B,4BAAI,CAAC,WAAD,IAAgB,eAAhB,IAAmC,gBAAgB,MAAhB,EAAwB;;AAE3D,gCAAI,oBAAoB,gBAAgB,gBAAgB,MAAhB,GAAyB,CAAzB,CAApC,CAFuD;AAG3D,gCAAI,iBAAiB,kBAAkB,cAAlB,CAHsC;;AAK3D,gCAAI,UAAJ,EAAgB;AACZ,qCAAK,cAAL,CAAoB,YAApB,EAAkC,cAAlC,EADY;6BAAhB,MAEO,IAAI,QAAJ,EAAc;AACjB,qCAAK,cAAL,CAAoB,WAApB,EAAiC,cAAjC,EADiB;6BAAd,MAEA;AACH,qCAAK,cAAL,CAAoB,OAApB,EAA6B,cAA7B,EADG;6BAFA;yBAPX,MAYO;AACH,iCAAK,cAAL,CAAoB,EAApB,EAAwB,IAAxB,EADG;yBAZP;qBARJ;;AAyBA,2BAAO,wBAAP,CA1BuK;iBAAnC,CAAjI,CAAP,CAFqD;aAFzD;;;;;;;;;;;;;;8CA2CkB,YAAY,aAAa,UAAU;AACrD,gBAAI,kBAAkB,EAAlB,CADiD;AAErD,gBAAI,aAAa,EAAb;;;AAFiD,gBAKjD,WAAJ,EAAiB;AACb,oBAAI,YAAY,KAAK,gBAAL,CAAsB,WAAtB,CAAZ,CADS;AAEb,oBAAI,SAAJ,EAAe;AACX,+BAAW,IAAX,CAAgB,SAAhB,EADW;iBAAf;aAFJ,MAKO;AACH,6BAAa,KAAK,aAAL,EAAb,CADG;aALP;AAQA,gBAAI,WAAW,MAAX,EAAmB;;AAEnB,oBAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,EAAR,CAFe;AAGnB,oBAAI,WAAW,KAAK,aAAL,CAAmB,WAAnB,EAAX,CAHe;AAInB,oBAAI,cAAc,KAAK,aAAL,CAAmB,cAAnB,EAAd;;;AAJe,qBAOd,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;;;AAGxC,wBAAI,YAAY,WAAW,CAAX,CAAZ,CAHoC;;AAKxC,wBAAI,aAAa,IAAb,EAAmB;;AAEnB,4BAAI,kBAAkB,UAAU,EAAV;;;AAFH,4BAKf,aAAa,KAAK,MAAL,CAAY,gBAAZ,CAA6B,eAA7B,CAAb,CALe;;AAOnB,4BAAI,cAAc,IAAd,EAAoB;AACpB,gCAAI,iBAAiB,IAAjB,CADgB;;AAGpB,gCAAI,WAAW,iBAAX,EAA8B;;AAE9B,iDAAiB,WAAW,iBAAX,CAA6B,QAA7B,CAAjB,CAF8B;6BAAlC;;AAKA,gCAAI,kBAAkB,IAAlB,EAAwB;;AAExB,+CAAe,KAAf,GAAuB,KAAvB,CAFwB;AAGxB,+CAAe,QAAf,GAA0B,QAA1B,CAHwB;AAIxB,+CAAe,WAAf,GAA6B,WAA7B,CAJwB;AAKxB,+CAAe,MAAf,GAAwB,KAAK,MAAL;;;AALA,8CAQxB,CAAe,WAAf,GAA6B,eAA7B;;;AARwB,8CAWxB,CAAe,aAAf,GAA+B,UAAU,IAAV,CAXP;;AAaxB,oCAAI,eAAe,IAAf,EAAqB;;;;;;AAMrB,mDAAe,UAAf,GAA4B,UAA5B,CANqB;;AAQrB,wCAAI,QAAJ,EAAc;AACV,uDAAe,QAAf,GAA0B,IAA1B,CADU;qCAAd;;;AARqB,mDAarB,CAAgB,IAAhB,CAAqB,cAArB,EAbqB;iCAAzB,MAcO;;;;;;;AAOH,wCAAI,gBAAgB,eAAhB,EAAiC;;AAEjC,uDAAe,UAAf,GAA4B,KAA5B,CAFiC;;AAIjC,4CAAI,QAAJ,EAAc;AACV,2DAAe,QAAf,GAA0B,IAA1B,CADU;yCAAd;;;AAJiC,uDASjC,CAAgB,IAAhB,CAAqB,cAArB,EATiC;;AAWjC,8CAXiC;qCAArC;iCArBJ;6BAbJ;yBARJ;qBAPJ;iBALJ;aAPJ;;AAiFA,mBAAO,eAAP,CA9FqD;;;;;;;;;;;;;kDAwG/B;AACtB,gBAAI,uBAAuB,EAAvB;;;AADkB,gBAIlB,aAAa,KAAK,aAAL,EAAb,CAJkB;;AAMtB,gBAAI,cAAc,IAAd,EAAoB;;;AAGpB,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;;;AAGxC,wBAAI,YAAY,WAAW,CAAX,CAAZ,CAHoC;;AAKxC,wBAAI,aAAa,IAAb,EAAmB;;AAEnB,4BAAI,kBAAkB,UAAU,EAAV;;;AAFH,4BAKf,aAAa,KAAK,MAAL,CAAY,gBAAZ,CAA6B,eAA7B,CAAb,CALe;;AAOnB,4BAAI,cAAc,IAAd,EAAoB;;AAEpB,gCAAI,iBAAiB,IAAjB,CAFgB;;AAIpB,gCAAI,WAAW,oBAAX,IAAmC,IAAnC,EAAyC;;AAEzC,sDAAsB,WAAW,oBAAX,EAAtB,CAFyC;;AAIzC,oCAAI,uBAAuB,IAAvB,EAA6B;;AAE7B,yDAAqB,IAArB,CAA0B,mBAA1B,EAF6B;;AAI7B,+CAAW,oBAAX,CAAgC,IAAhC,EAJ6B;iCAAjC;6BAJJ;yBAJJ;qBAPJ;iBALJ;aAHJ;;AAmCA,mBAAO,oBAAP,CAzCsB;;;;;;;;;;;;sDAkDI,aAAa;AACvC,gBAAI,wBAAwB,IAAxB,CADmC;AAEvC,gBAAI,0BAA0B,IAA1B,CAFmC;AAGvC,gBAAI,mBAAmB,EAAnB,CAHmC;AAIvC,6BAAiB,MAAjB,GAA0B,KAAK,MAAL,CAJa;AAKvC,6BAAiB,WAAjB,GAA+B,WAA/B,CALuC;AAMvC,6BAAiB,eAAjB,GAAmC,KAAK,kBAAL,CANI;AAOvC,6BAAiB,aAAjB,GAAiC,KAAK,WAAL;;;AAPM,4BAUvC,CAAiB,IAAjB,GAAwB,OAAxB,CAVuC;AAWvC,oCAAwB,KAAK,iBAAL,CAAuB,mBAAvB,CAA2C,gBAA3C,CAAxB,CAXuC;;AAavC,6BAAiB,IAAjB,GAAwB,SAAxB,CAbuC;AAcvC,sCAA0B,KAAK,iBAAL,CAAuB,mBAAvB,CAA2C,gBAA3C,CAA1B,CAduC;;AAgBvC,mBAAO;AACH,yBAAS,qBAAT;AACA,2BAAW,uBAAX;aAFJ,CAhBuC;;;;;;;;;;;6CA2BtB,oBAAoB,gBAAgB;;AAErD,gBAAI,sBAAsB,IAAtB,IAA8B,kBAAkB,IAAlB,EAAwB;;;AAGtD,oBAAI,aAAa,KAAK,aAAL,EAAb,CAHkD;;AAKtD,oBAAI,cAAc,IAAd,EAAoB;;;;;;;;AAQpB,yBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAvC,EAA4C;;;AAGxC,4BAAI,gBAAgB,WAAW,CAAX,CAAhB,CAHoC;;AAKxC,4BAAI,iBAAiB,IAAjB,EAAuB;;;AAGvB,gCAAI,kBAAkB,cAAc,EAAd;;;;;;AAHC,gCASnB,sBAAsB,cAAc,mBAAd,CATH;;AAWvB,gCAAI,uBAAuB,IAAvB,EAA6B;;;AAG7B,qCAAK,IAAI,KAAK,CAAL,EAAQ,KAAK,oBAAoB,MAApB,EAA4B,IAAlD,EAAwD;;;AAGpD,wCAAI,2BAA2B,oBAAoB,EAApB,CAA3B,CAHgD;;AAKpD,wCAAI,4BAA4B,IAA5B,EAAkC;;;AAGlC,4CAAI,uBAAuB,yBAAyB,EAAzB;;;AAHO,4CAM9B,yBAAyB,kBAAzB,EAA6C;;AAE7C,gDAAI,qBAAqB,KAAK,gBAAL,CAAsB,oBAAtB,CAArB;;;AAFyC,gDAKzC,iBAAiB,KAAK,MAAL,CAAY,gBAAZ,CAA6B,eAA7B,CAAjB;;;AALyC,gDAQzC,eAAe,0CAAf,IAA6D,IAA7D,EAAmE;;;AAGnE,+DAAe,0CAAf,CAA0D,kBAA1D,EAA8E,wBAA9E,EAAwG,cAAxG,EAHmE;6CAAvE;yCARJ;qCANJ;iCALJ;6BAHJ;yBAXJ;qBALJ;iBARJ;aALJ;;;;;;;;;;;uDAuE2B,aAAa;AACxC,gBAAI,iBAAiB,IAAjB,CADoC;;AAGxC,gBAAI,eAAe,IAAf,EAAqB;;;AAGrB,iCAAiB,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,KAAK,MAAL,EAAa,WAAnF,CAAjB,CAHqB;aAAzB;;AAMA,mBAAO,cAAP,CATwC;;;;;;;;;;;;gEAkBJ,QAAQ,aAAa;AACzD,gBAAI,iBAAiB,IAAjB,CADqD;;AAGzD,gBAAI,UAAU,IAAV,IAAkB,eAAe,IAAf,EAAqB;;;AAGvC,iCAAiB,KAAK,kBAAL,CAAwB,6CAAxB,CAAsE,MAAtE,EAA8E,WAA9E,CAAjB,CAHuC;aAA3C;;AAMA,mBAAO,cAAP,CATyD;;;;qCAYhD,QAAQ;AACjB,gBAAI,aAAa,IAAb,CADa;;AAGjB,iBAAK,0BAAL,CAAgC,UAAhC;;;AAHiB,gBAMb,cAAc,IAAd,CANa;AAOjB,gBAAI,gBAAgB,IAAhB,CAPa;AAQjB,gBAAI,WAAW,YAAX,CARa;AASjB,gBAAI,QAAQ,YAAR,CATa;AAUjB,gBAAI,YAAY,EAAZ,CAVa;AAWjB,sBAAU,MAAV,GAAmB,MAAnB,CAXiB;AAYjB,iBAAK,kBAAL,CAAwB,YAAxB,CAAqC,MAArC,EAA6C,WAA7C,EAA0D,aAA1D,EAAyE,QAAzE,EAAmF,KAAnF,EAA0F,SAA1F,EAZiB;;;;;;;;;;yCAmBJ;AACb,gBAAI,cAAc,KAAd,CADS;AAEb,gBAAI,aAAa,KAAK,aAAL,EAAb,CAFS;;AAIb,gBAAI,cAAc,IAAd,EAAoB;AACpB,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,IAAI,CAAJ,EAAO,GAA9C,EAAmD;AAC/C,wBAAI,KAAK,WAAW,CAAX,EAAc,EAAd,CADsC;AAE/C,wBAAI,cAAc,KAAK,8BAAL,CAAoC,EAApC,CAAd,CAF2C;;AAI/C,wBAAI,eAAe,CAAC,YAAY,QAAZ,EAAsB;AACtC,sCAAc,IAAd,CADsC;AAEtC,8BAFsC;qBAA1C;iBAJJ;aADJ;;AAYA,mBAAO,WAAP,CAhBa;;;;;;;;;;+CAuBM;;;;;AAKnB,iBAAK,cAAL,GAAsB,KAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB,EAAwB,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;;;AAGnF,qBAAK,oBAAL;;;;;;AAHmF,oBASnF,CAAK,YAAL,CAAkB,KAAK,MAAL,CAAlB;;;AATmF,oBAYnF,CAAK,cAAL;;;;;;AAZmF,oBAkBnF,CAAK,UAAL,CAAgB,UAAhB,CAA2B,aAA3B,EAlBmF;aAAtB,CAA3C,CAAtB,CALmB;;;;WAj/BrB;;;AA6gCN,eAAe,OAAf,GAAyB,CACrB,YADqB,EAErB,QAFqB,EAGrB,mBAHqB,EAIrB,eAJqB,EAKrB,aALqB,EAMrB,iBANqB,EAOrB,gBAPqB,EAQrB,oBARqB,CAAzB;;kBAWe","file":"nodeController.js","sourcesContent":["class NodeController {\n    constructor($rootScope,\n                $scope,\n                AnnotationService,\n                ConfigService,\n                NodeService,\n                NotebookService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NodeService = NodeService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        // the auto save interval in milliseconds\n        this.autoSaveInterval = 60000;\n\n        // the node id of the current node\n        this.nodeId = null;\n\n        // field that will hold the node content\n        this.nodeContent = null;\n\n        // field that will hold the node status\n        this.nodeStatus = null;\n\n        // field that will hold the node title\n        this.nodeTitle = null;\n\n        // array to hold ids of dirty component\n        this.dirtyComponentIds = [];\n\n        // array to hold ids of components where student work has changed since last submission\n        this.dirtySubmitComponentIds = [];\n\n        // whether the student work has changed since last submit\n        this.submit = false;\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n\n        this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n\n        /*\n         * an object that holds the mappings with the key being the component\n         * and the value being the scope object from the child controller\n         */\n        this.$scope.componentToScope = {};\n        this.notebookOpen = false;\n\n        // message to show next to save/submit buttons\n        this.saveMessage = {\n            text: '',\n            time: ''\n        };\n\n        // perform setup of this node only if the current node is not a group.\n        if (this.StudentDataService.getCurrentNode() && this.ProjectService.isApplicationNode(this.StudentDataService.getCurrentNodeId())) {\n            // get the current node and node id\n            var currentNode = this.StudentDataService.getCurrentNode();\n            if (currentNode != null) {\n                this.nodeId = currentNode.id;\n            }\n\n            // get the node content\n            this.nodeContent = this.ProjectService.getNodeById(this.nodeId);\n\n            this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n\n            this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n\n            // populate the student work into this node\n            //this.setStudentWork();\n\n            // check if we need to lock this node\n            this.calculateDisabled();\n\n            //this.importWork();\n\n            // start the auto save interval\n            this.startAutoSaveInterval();\n\n            // register this controller to listen for the exit event\n            this.registerExitListener();\n\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n                this.NodeService.evaluateTransitionLogic();\n            }\n\n            // set save message with last save/submission\n            // for now, we'll use the latest component state (since we don't currently keep track of node-level saves)\n            // TODO: use node states once we implement node state saving\n            let latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId);\n            if (latestComponentState) {\n                let latestClientSaveTime = latestComponentState.clientSaveTime;\n                if (latestComponentState.isSubmit) {\n                    this.setSaveMessage('Last submitted', latestClientSaveTime);\n                } else {\n                    this.setSaveMessage('Last saved', latestClientSaveTime);\n                }\n            }\n\n            // save nodeEntered event\n            var nodeId = this.nodeId;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"nodeEntered\";\n            var eventData = {};\n            eventData.nodeId = nodeId;\n            this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n        }\n\n        /**\n         * The function that child component controllers will call to register\n         * themselves with this node\n         * @param childScope the child scope object\n         * @param component the component content for the component\n         */\n        this.$scope.registerComponentController = function(childScope, component) {\n\n            if (this.$scope != null && component != null) {\n                // get the component id\n                var componentId = component.id;\n\n                // add the component id to child scope mapping\n                this.$scope.componentToScope[componentId] = childScope;\n            }\n        }.bind(this);\n\n        /**\n         * Listen for the componentSaveTriggered event which occurs when a\n         * component is requesting student data to be saved\n         */\n        this.$scope.$on('componentSaveTriggered', angular.bind(this, function(event, args) {\n            var isAutoSave = false;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId);\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentSubmitTriggered event which occurs when a\n         * component is requesting student data to be submitted\n         */\n        this.$scope.$on('componentSubmitTriggered', angular.bind(this, function(event, args) {\n            var isAutoSave = false;\n            var isSubmit = true;\n\n            if (args != null) {\n                var nodeId = args.nodeId;\n                var componentId = args.componentId;\n\n                if (nodeId != null && componentId != null) {\n                    if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n                        /*\n                         * obtain the component states from the children and save them\n                         * to the server\n                         */\n                        this.createAndSaveComponentData(isAutoSave, componentId, isSubmit);\n                    }\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentStudentDataChanged event that will come from\n         * child component scopes\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentStudentDataChanged', angular.bind(this, function(event, args) {\n            /*\n             * the student data in one of our child scopes has changed so\n             * we will need to save\n             */\n\n            if (args != null) {\n\n                // get the part id\n                var componentId = args.componentId;\n\n                // get the new component state\n                var componentState = args.componentState;\n\n                if (componentId != null && componentState != null) {\n\n                    /*\n                     * notify the parts that are connected that the student\n                     * data has changed\n                     */\n                    this.notifyConnectedParts(componentId, componentState);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentDirty event that will come from child component\n         * scopes; notifies node that component has/doesn't have unsaved work\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentDirty', angular.bind(this, function(event, args) {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtyComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty components\n                    this.dirtyComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty components\n                    this.dirtyComponentIds.splice(index, 1);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the componentSubmitDirty event that will come from child\n         * component scopes; notifies node that work has/has not changed for a\n         * component since last submission\n         * @param event\n         * @param args the arguments provided when the event is fired\n         */\n        this.$scope.$on('componentSubmitDirty', angular.bind(this, function(event, args) {\n            let componentId = args.componentId;\n\n            if (componentId) {\n                let isDirty = args.isDirty;\n                let index = this.dirtySubmitComponentIds.indexOf(componentId);\n\n                if (isDirty && index === -1) {\n                    // add component id to array of dirty submit components\n                    this.dirtySubmitComponentIds.push(componentId);\n                } else if (!isDirty && index > -1){\n                    // remove component id from array of dirty submit components\n                    this.dirtySubmitComponentIds.splice(index, 1);\n                }\n            }\n        }));\n\n        /**\n         * Listen for the 'exitNode' event which is fired when the student\n         * exits the node. This will perform saving when the student exits\n         * the node.\n         */\n        this.$scope.$on('exitNode', angular.bind(this, function(event, args) {\n\n            // get the node that is exiting\n            var nodeToExit = args.nodeToExit;\n\n            /*\n             * make sure the node id of the node that is exiting is\n             * this node\n             */\n            if (nodeToExit.id === this.nodeId) {\n                var saveTriggeredBy = 'exitNode';\n\n                // stop the auto save interval for this node\n                this.stopAutoSaveInterval();\n\n                /*\n                 * tell the parent that this node is done performing\n                 * everything it needs to do before exiting\n                 */\n                this.nodeUnloaded(this.nodeId);\n\n                // check if this node has transition logic that should be run when the student exits the node\n                if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n                    // this node has transition logic\n                    this.NodeService.evaluateTransitionLogic();\n                }\n            }\n        }));\n    }\n\n    /**\n     * Populate the student work into the node\n     */\n    setStudentWork() {\n\n    };\n\n    /**\n     * Import work from another node\n     */\n    importWork() {\n\n    };\n\n    /**\n     * Returns all the revisions made by this user for the specified component\n     */\n    getRevisions(componentId) {\n        var revisions = [];\n        // get the component states for this component\n        var componentStates = this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n        return componentStates;\n    };\n\n    showRevisions($event, componentId, isComponentDisabled) {\n        var revisions = this.getRevisions(componentId);\n        var allowRevert = !isComponentDisabled;\n\n        // get the scope for the component\n        var childScope = this.$scope.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        }\n\n        // broadcast showRevisions event\n        this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n    };\n\n    /**\n     * Show student assets\n     * @param $event\n     * @param componentId\n     */\n    showStudentAssets($event, componentId) {\n\n        // get the scope for the component\n        var childScope = this.$scope.componentToScope[componentId];\n\n        // TODO: generalize for other controllers\n        var componentController = null;\n\n        if (childScope.openResponseController) {\n            componentController = childScope.openResponseController;\n        } else if (childScope.drawController) {\n            componentController = childScope.drawController;\n        } else if (childScope.discussionController) {\n            componentController = childScope.discussionController;\n        } else if (childScope.tableController) {\n            componentController = childScope.tableController;\n        } else if (childScope.graphController) {\n            componentController = childScope.graphController;\n        }\n\n        this.$rootScope.$broadcast('showStudentAssets', {componentController: componentController, $event: $event});\n    };\n\n    /**\n     * Called when the student clicks the save button\n     */\n    saveButtonClicked() {\n\n        // notify the child components that the save button was clicked\n        this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n    };\n\n    /**\n     * Called when the student clicks the submit button\n     */\n    submitButtonClicked() {\n\n        // notify the child components that the submit button was clicked\n        this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n        var isAutoSave = false;\n        var isSubmit = true;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave, null, isSubmit);\n    };\n\n    /**\n     * Check if we need to lock the node\n     */\n    calculateDisabled() {\n\n        var nodeId = this.nodeId;\n\n        // get the node content\n        var nodeContent = this.nodeContent;\n\n        if (nodeContent) {\n            var lockAfterSubmit = nodeContent.lockAfterSubmit;\n\n            if (lockAfterSubmit) {\n                // we need to lock the step after the student has submitted\n\n                // get the component states for the node\n                var componentStates = this.StudentDataService.getComponentStatesByNodeId(nodeId);\n\n                // check if any of the component states were submitted\n                var isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n\n                if (isSubmitted) {\n                    // the student has submitted work for this node\n                    this.isDisabled = true;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the components for this node.\n     * @return an array that contains the content for the components.\n     */\n    getComponents() {\n        var components = null;\n\n        if (this.nodeContent != null) {\n            components = this.nodeContent.components;\n        }\n\n        if (components != null && this.isDisabled) {\n            for (var c = 0; c < components.length; c++) {\n                var component = components[c];\n\n                component.isDisabled = true;\n            }\n        }\n\n        if (components != null && this.nodeContent.lockAfterSubmit) {\n            for (c = 0; c < components.length; c++) {\n                component = components[c];\n\n                component.lockAfterSubmit = true;\n            }\n        }\n\n        return components;\n    };\n\n    /**\n     * Get the component given the component id\n     * @param componentId the component id we want\n     * @return the component object with the given component id\n     */\n    getComponentById(componentId) {\n\n        var component = null;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return component;\n    };\n\n    /**\n     * Check if this node contains a given component id\n     * @param componentId the component id\n     * @returns whether this node contains the component\n     */\n    nodeContainsComponent(componentId) {\n        var result = false;\n\n        if (componentId != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    // check if the component id matches the one we want\n                    if (tempComponentId === componentId) {\n                        // the component id matches\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n        return this.NodeService.getComponentTemplatePath(componentType);\n    };\n\n    /**\n     * Check whether we need to show the save button\n     * @return whether to show the save button\n     */\n    showSaveButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSaveButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to show the submit button\n     * @return whether to show the submit button\n     */\n    showSubmitButton() {\n        var result = false;\n\n        if (this.nodeContent != null && this.nodeContent.showSubmitButton) {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Check whether we need to lock the component after the student\n     * submits an answer.\n     */\n    isLockAfterSubmit() {\n        var result = false;\n\n        if (this.componentContent != null) {\n\n            // check the lockAfterSubmit field in the component content\n            if (this.componentContent.lockAfterSubmit) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Set the message next to the save button\n     * @param message the message to display\n     * @param time the time to display\n     */\n    setSaveMessage(message, time) {\n        this.saveMessage.text = message;\n        this.saveMessage.time = time;\n    };\n\n    /**\n     * Start the auto save interval for this node\n     */\n    startAutoSaveInterval() {\n        this.autoSaveIntervalId = setInterval(angular.bind(this, function() {\n            // check if the student work is dirty\n            if (this.dirtyComponentIds.length) {\n                // the student work is dirty so we will save\n\n                var isAutoSave = true;\n\n                /*\n                 * obtain the component states from the children and save them\n                 * to the server\n                 */\n                this.createAndSaveComponentData(isAutoSave);\n            }\n        }), this.autoSaveInterval);\n    };\n\n    /**\n     * Stop the auto save interval for this node\n     */\n    stopAutoSaveInterval() {\n        clearInterval(this.autoSaveIntervalId);\n    };\n\n    /**\n     * Obtain the componentStates and annotations from the children and save them\n     * to the server\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a sumission or not\n     */\n    createAndSaveComponentData(isAutoSave, componentId, isSubmit) {\n\n        // obtain the component states from the children\n        var componentStates = this.createComponentStates(isAutoSave, componentId, isSubmit);\n        var componentAnnotations = this.getComponentAnnotations();\n        var componentEvents = null;\n        var nodeStates = null;\n\n        if ((componentStates != null && componentStates.length) ||\n            (componentAnnotations != null && componentAnnotations.length) ||\n            (componentEvents != null && componentEvents.length)) {\n            // save the component states to the server\n            return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations).then(angular.bind(this, function(savedStudentDataResponse) {\n                if (savedStudentDataResponse) {\n                    // check if this node has transition logic that should be run when the student data changes\n                    if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n                        // this node has transition logic\n                        this.NodeService.evaluateTransitionLogic();\n                    }\n\n                    let studentWorkList = savedStudentDataResponse.studentWorkList;\n                    if (!componentId && studentWorkList && studentWorkList.length) {\n                        // this was a step save or submission and student work was saved, so set save message\n                        let latestStudentWork = studentWorkList[studentWorkList.length - 1];\n                        let clientSaveTime = latestStudentWork.clientSaveTime;\n\n                        if (isAutoSave) {\n                            this.setSaveMessage('Auto-Saved', clientSaveTime);\n                        } else if (isSubmit) {\n                            this.setSaveMessage('Submitted', clientSaveTime);\n                        } else {\n                            this.setSaveMessage('Saved', clientSaveTime);\n                        }\n                    } else {\n                        this.setSaveMessage('', null);\n                    }\n                }\n\n                return savedStudentDataResponse;\n            }));\n        }\n    };\n\n    /**\n     * Loop through this node's components and get/create component states\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @param isSubmit (optional) whether this is a submission or not\n     * @returns an array of component states\n     */\n    createComponentStates(isAutoSave, componentId, isSubmit) {\n        var componentStates = [];\n        var components = [];\n\n        // get the components for this node\n        if (componentId) {\n            var component = this.getComponentById(componentId);\n            if (component) {\n                components.push(component);\n            }\n        } else {\n            components = this.getComponents();\n        }\n        if (components.length) {\n\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n\n                    // get the scope for the component\n                    var childScope = this.$scope.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n                        var componentState = null;\n\n                        if (childScope.getComponentState) {\n                            // get the student work object from the child scope\n                            componentState = childScope.getComponentState(isSubmit);\n                        }\n\n                        if (componentState != null) {\n\n                            componentState.runId = runId;\n                            componentState.periodId = periodId;\n                            componentState.workgroupId = workgroupId;\n                            componentState.nodeId = this.nodeId;\n\n                            // set the component id into the student work object\n                            componentState.componentId = tempComponentId;\n\n                            // set the component type\n                            componentState.componentType = component.type;\n\n                            if (componentId == null) {\n                                /*\n                                 * the node has triggered the save so all the components will\n                                 * either have isAutoSave set to true or false; if this is a\n                                 * submission, all the components will have isSubmit set to true\n                                 */\n                                componentState.isAutoSave = isAutoSave;\n\n                                if (isSubmit) {\n                                    componentState.isSubmit = true;\n                                }\n\n                                // add the student work object to our components array\n                                componentStates.push(componentState);\n                            } else {\n                                /*\n                                 * a component has triggered the save so only that component will\n                                 * have isAutoSave set to false; if this is a submission,\n                                 * component will have isSubmit set to true\n                                 */\n\n                                if (componentId === tempComponentId) {\n                                    // this component triggered the save\n                                    componentState.isAutoSave = false;\n\n                                    if (isSubmit) {\n                                        componentState.isSubmit = true;\n                                    }\n\n                                    // add the student work object to our components array\n                                    componentStates.push(componentState);\n\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStates;\n    };\n\n    /**\n     * Loop through this node's components and get annotations\n     * @param isAutoSave whether the component states were auto saved\n     * @param componentId (optional) the component id of the component\n     * that triggered the save\n     * @returns an array of component states\n     */\n    getComponentAnnotations() {\n        var componentAnnotations = [];\n\n        // get the components for this node\n        var components = this.getComponents();\n\n        if (components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n\n                // get a component\n                var component = components[c];\n\n                if (component != null) {\n                    // get the component id\n                    var tempComponentId = component.id;\n\n                    // get the scope for the component\n                    var childScope = this.$scope.componentToScope[tempComponentId];\n\n                    if (childScope != null) {\n\n                        var componentState = null;\n\n                        if (childScope.getUnSavedAnnotation != null) {\n                            // get the student work object from the child scope\n                            componentAnnotation = childScope.getUnSavedAnnotation();\n\n                            if (componentAnnotation != null) {\n                                // add the student work object to our components array\n                                componentAnnotations.push(componentAnnotation);\n\n                                childScope.setUnSavedAnnotation(null);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentAnnotations;\n    };\n\n    /**\n     * Get the latest annotations for a given component\n     * TODO: move to a parent component class in the future?\n     * @param componentId the component's id\n     * @return object containing the component's latest score and comment annotations\n     */\n    getLatestComponentAnnotations(componentId) {\n        let latestScoreAnnotation = null;\n        let latestCommentAnnotation = null;\n        let annotationParams = {};\n        annotationParams.nodeId = this.nodeId;\n        annotationParams.componentId = componentId;\n        annotationParams.fromWorkgroupId = this.teacherWorkgroupId;\n        annotationParams.toWorkgroupId = this.workgroupId;\n\n        // get the latest annotations for this component\n        annotationParams.type = \"score\";\n        latestScoreAnnotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n\n        annotationParams.type = \"comment\";\n        latestCommentAnnotation = this.AnnotationService.getLatestAnnotation(annotationParams);\n\n        return {\n            'score': latestScoreAnnotation,\n            'comment': latestCommentAnnotation\n        };\n    };\n\n    /**\n     * Notify any connected components that the student data has changed\n     * @param componentId the component id that has changed\n     * @param componentState the new component state\n     */\n    notifyConnectedParts(changedComponentId, componentState) {\n\n        if (changedComponentId != null && componentState != null) {\n\n            // get all the components\n            var components = this.getComponents();\n\n            if (components != null) {\n\n                /*\n                 * loop through all the components and look for components\n                 * that are listening for the given component id to change.\n                 * only notify components that are listening for changes\n                 * from the specific component id.\n                 */\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        // get this component id\n                        var tempComponentId = tempComponent.id;\n\n                        /*\n                         * get the connected components that this component is\n                         * listening for\n                         */\n                        var connectedComponents = tempComponent.connectedComponents;\n\n                        if (connectedComponents != null) {\n\n                            // loop through all the connected components\n                            for (var cc = 0; cc < connectedComponents.length; cc++) {\n\n                                // get a connected component\n                                var connectedComponentParams = connectedComponents[cc];\n\n                                if (connectedComponentParams != null) {\n\n                                    // get the connected component id\n                                    var connectedComponentId = connectedComponentParams.id;\n\n                                    // check if the component id matches the one that has changed\n                                    if (connectedComponentId === changedComponentId) {\n\n                                        var connectedComponent = this.getComponentById(connectedComponentId);\n\n                                        // get the scope for the listening component\n                                        var componentScope = this.$scope.componentToScope[tempComponentId];\n\n                                        // check if the listening component has a handler function\n                                        if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n\n                                            // tell the listening part to handle the student data changing\n                                            componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByComponentId(componentId) {\n        var componentState = null;\n\n        if (componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    /**\n     * Get the student data for a specific part\n     * @param the nodeId\n     * @param the componentId\n     * @return the student data for the given component\n     */\n    getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var componentState = null;\n\n        if (nodeId != null && componentId != null) {\n\n            // get the latest component state for the component\n            componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        }\n\n        return componentState;\n    };\n\n    nodeUnloaded(nodeId) {\n        var isAutoSave = true;\n\n        this.createAndSaveComponentData(isAutoSave);\n\n        // save nodeExited event\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"nodeExited\";\n        var eventData = {};\n        eventData.nodeId = nodeId;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Checks whether any of the node's components have unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    getSubmitDirty() {\n        let submitDirty = false;\n        let components = this.getComponents();\n\n        if (components != null) {\n            for (let c = 0, l = components.length; c < l; c++) {\n                let id = components[c].id;\n                let latestState = this.getComponentStateByComponentId(id);\n\n                if (latestState && !latestState.isSubmit) {\n                    submitDirty = true;\n                    break;\n                }\n            }\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Register the the listener that will listen for the exit event\n     * so that we can perform saving before exiting.\n     */\n    registerExitListener() {\n        /**\n         * Listen for the 'exit' event which is fired when the student exits\n         * the VLE. This will perform saving before exiting.\n         */\n        this.logOutListener = this.$scope.$on('exit', angular.bind(this, function(event, args) {\n\n            // stop the auto save interval for this node\n            this.stopAutoSaveInterval();\n\n            /*\n             * tell the parent that this node is done performing\n             * everything it needs to do before exiting\n             */\n            this.nodeUnloaded(this.nodeId);\n\n            // call this function to remove the listener\n            this.logOutListener();\n\n            /*\n             * tell the session service that this listener is done\n             * performing everything it needs to do before exiting\n             */\n            this.$rootScope.$broadcast('doneExiting');\n        }));\n    };\n}\n\nNodeController.$inject = [\n    '$rootScope',\n    '$scope',\n    'AnnotationService',\n    'ConfigService',\n    'NodeService',\n    'NotebookService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NodeController;\n"]}