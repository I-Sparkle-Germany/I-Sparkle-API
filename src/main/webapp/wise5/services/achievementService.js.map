{"version":3,"sources":["achievementService.es6"],"names":["AchievementService","$http","$q","$rootScope","ConfigService","ProjectService","StudentDataService","UtilService","studentAchievementsByWorkgroupId","debug","loadProjectAchievements","str","console","log","workgroupId","type","isPreview","getWorkgroupId","Promise","resolve","config","method","url","getAchievementsURL","params","getMode","periodId","getPeriodId","then","response","studentAchievements","data","studentAchievement","addOrUpdateStudentAchievement","projectAchievement","getAchievementByAchievementId","achievementId","completed","deregisterFunction","debugOutput","id","projectAchievements","getAchievementItems","isAchievementCompletedBySignedInStudent","isProjectAchievementSatisfied","studentCompletedAchievement","achievementWorkgroupId","Array","found","studentAchievementIndex","length","push","deferred","defer","promise","headers","angular","toJson","$","param","result","achievement","fromJson","getAchievements","isEnabled","projectAchievementItems","items","createNodeCompletedListener","createAggregateAchievementListener","achievements","getStudentAchievementsByWorkgroupId","isVisible","alert","name","achievementCopy","makeCopyOfJSONObject","newAchievement","createNewStudentAchievement","saveAchievementToServer","$broadcast","thisAchievementService","thisAchievement","$on","event","args","nodeId","checkNodeCompletedAchievement","checkAggregateAchievement","nodeIds","n","isCompleted","achievementIds","a","tempAchievementId","achievementsByAchievementId","workgroupIds","getClassmateWorkgroupIds","achievementsForWorkgroup","achievementIdToAchievements","getStudentAchievementsByAchievementId","generateKey","$inject"],"mappings":";;;;;;;;;;IAAMA,kB;AACJ,8BACIC,KADJ,EAEIC,EAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,cALJ,EAMIC,kBANJ,EAOIC,WAPJ,EAOiB;AAAA;;AACf,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA;AACA,SAAKC,gCAAL,GAAwC,EAAxC;;AAEA;AACA,SAAKC,KAAL,GAAa,KAAb;;AAEA,SAAKC,uBAAL;AACD;;AAED;;;;;;;;gCAIYC,G,EAAK;AACf,UAAI,KAAKF,KAAT,EAAgB;AACdG,gBAAQC,GAAR,CAAYF,GAAZ;AACD;AACF;;;kDAE4D;AAAA;;AAAA,UAAjCG,WAAiC,uEAAnB,IAAmB;AAAA,UAAbC,IAAa,uEAAN,IAAM;;AAC3D,UAAI,KAAKX,aAAL,CAAmBY,SAAnB,EAAJ,EAAoC;AAClC,YAAMF,eAAc,KAAKV,aAAL,CAAmBa,cAAnB,EAApB;AACA,aAAKT,gCAAL,CAAsCM,YAAtC,IAAqD,EAArD;AACA,eAAOI,QAAQC,OAAR,CAAgB,KAAKX,gCAArB,CAAP;AACD,OAJD,MAIO;AACL,YAAMY,SAAS;AACbC,kBAAQ,KADK;AAEbC,eAAK,KAAKlB,aAAL,CAAmBmB,kBAAnB,EAFQ;AAGbC,kBAAQ;AAHK,SAAf;AAKA,YAAIV,eAAe,IAAnB,EAAyB;AACvBM,iBAAOI,MAAP,CAAcV,WAAd,GAA4BA,WAA5B;AACD,SAFD,MAEO,IAAI,KAAKV,aAAL,CAAmBqB,OAAnB,OAAiC,kBAArC,EAAyD;AAC9DL,iBAAOI,MAAP,CAAcV,WAAd,GAA4B,KAAKV,aAAL,CAAmBa,cAAnB,EAA5B;AACAG,iBAAOI,MAAP,CAAcE,QAAd,GAAyB,KAAKtB,aAAL,CAAmBuB,WAAnB,EAAzB;AACD;AACD,YAAIZ,QAAQ,IAAZ,EAAkB;AAChBK,iBAAOI,MAAP,CAAcT,IAAd,GAAqBA,IAArB;AACD;;AAED,eAAO,KAAKd,KAAL,CAAWmB,MAAX,EAAmBQ,IAAnB,CAAwB,UAACC,QAAD,EAAc;AAC3C,cAAIC,sBAAsBD,SAASE,IAAnC;AACA,cAAID,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,mCAA+BA,mBAA/B,8HAAoD;AAAA,oBAA3CE,kBAA2C;;AAClD,sBAAKC,6BAAL,CAAmCD,kBAAnC;;AAEA,oBAAI,MAAK5B,aAAL,CAAmBqB,OAAnB,OAAiC,YAArC,EAAmD;AACjD,sBAAMS,sBAAqB,MAAK7B,cAAL,CACtB8B,6BADsB,CACQH,mBAAmBI,aAD3B,CAA3B;AAEA,sBAAIF,uBAAsB,IAA1B,EAAgC;AAC9B;;;;;AAKAA,wCAAmBG,SAAnB,GAA+B,IAA/B;AACA,wBAAIH,oBAAmBI,kBAAnB,IAAyC,IAA7C,EAAmD;AACjD;;;;AAIAJ,0CAAmBI,kBAAnB;AACA,4BAAKC,WAAL,CAAiB,mBAAmBL,oBAAmBM,EAAvD;AACD;AACF;AACF;AACF;AAxB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0B/B,gBAAI,MAAKpC,aAAL,CAAmBqB,OAAnB,MAAgC,YAApC,EAAkD;AAChD;;;;;;;;;;;;AAYA,kBAAMgB,sBAAsB,MAAKpC,cAAL,CAAoBqC,mBAApB,EAA5B;AACA,kBAAID,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,wCAA+BA,mBAA/B,mIAAoD;AAAA,wBAA3CP,kBAA2C;;AAClD,wBAAI,CAAC,MAAKS,uCAAL,CAA6CT,mBAAmBM,EAAhE,CAAL,EAA0E;AACxE,0BAAI,MAAKI,6BAAL,CAAmCV,kBAAnC,CAAJ,EAA4D;AAC1D;;;;AAIA,8BAAKW,2BAAL,CAAiCX,kBAAjC;AACD;AACF;AACF;AAX8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYhC;AACF;AACF,WAtDD,MAsDO;AACL,kBAAK1B,gCAAL,GAAwC,EAAxC;AACD;;AAED,iBAAO,MAAKA,gCAAZ;AACD,SA7DM,CAAP;AA8DD;AACF;;AAED;;;;;;;kDAI8BwB,kB,EAAoB;AAChD,UAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,YAAMc,yBAAyBd,mBAAmBlB,WAAlD;AACA,YAAI,KAAKN,gCAAL,CAAsCsC,sBAAtC,KAAiE,IAArE,EAA2E;AACzE,eAAKtC,gCAAL,CAAsCsC,sBAAtC,IAAgE,IAAIC,KAAJ,EAAhE;AACD;AACD,YAAMjB,sBAAsB,KAAKtB,gCAAL,CAAsCsC,sBAAtC,CAA5B;AACA,YAAIE,QAAQ,KAAZ;AACA,aAAK,IAAIC,0BAA0B,CAAnC,EAAsCA,0BAA0BnB,oBAAoBoB,MAApF,EAA4FD,yBAA5F,EAAuH;AACrH,cAAIjB,sBAAqBF,oBAAoBmB,uBAApB,CAAzB;;AAEA,cAAIjB,oBAAmBI,aAAnB,IAAoC,IAApC,IACAJ,oBAAmBI,aAAnB,KAAqCJ,oBAAmBI,aADxD,IAEAJ,oBAAmBlB,WAAnB,IAAkC,IAFlC,IAGAkB,oBAAmBlB,WAAnB,KAAmCkB,oBAAmBlB,WAH1D,EAGuE;AACrE;;;;AAIAgB,gCAAoBmB,uBAApB,IAA+CjB,mBAA/C;AACAgB,oBAAQ,IAAR,CANqE,CAMtD;AACf;AACD;AACF;AACD,YAAI,CAACA,KAAL,EAAY;AACV;AACAlB,8BAAoBqB,IAApB,CAAyBnB,kBAAzB;AACD;AACF;AACF;;AAED;;;;;;;4CAIwBA,kB,EAAoB;AAAA;;AAC1C,UAAI,KAAK5B,aAAL,CAAmBY,SAAnB,EAAJ,EAAoC;AAClC;AACA,YAAMoC,WAAW,KAAKlD,EAAL,CAAQmD,KAAR,EAAjB;AACAD,iBAASjC,OAAT,CAAiBa,kBAAjB;AACA,eAAOoB,SAASE,OAAhB;AACD,OALD,MAKO;AACL,YAAMlC,SAAS;AACbC,kBAAQ,MADK;AAEbC,eAAK,KAAKlB,aAAL,CAAmBmB,kBAAnB,EAFQ;AAGbgC,mBAAS;AACP,4BAAgB;AADT;AAHI,SAAf;;AAQA,YAAI/B,SAAS;AACXY,yBAAeJ,mBAAmBI,aADvB;AAEXtB,uBAAakB,mBAAmBlB,WAFrB;AAGXC,gBAAMiB,mBAAmBjB;AAHd,SAAb;;AAMA,YAAIiB,mBAAmBQ,EAAnB,IAAyB,IAA7B,EAAmC;AACjChB,iBAAOgB,EAAP,GAAYR,mBAAmBQ,EAA/B;AACD;AACD,YAAIR,mBAAmBD,IAAnB,IAA2B,IAA/B,EAAqC;AACnCP,iBAAOO,IAAP,GAAcyB,QAAQC,MAAR,CAAezB,mBAAmBD,IAAlC,CAAd;AACD;;AAEDX,eAAOW,IAAP,GAAc2B,EAAEC,KAAF,CAAQnC,MAAR,CAAd;;AAEA,eAAO,KAAKvB,KAAL,CAAWmB,MAAX,EAAmBQ,IAAnB,CAAwB,UAACgC,MAAD,EAAY;AACzC,cAAIC,cAAcD,OAAO7B,IAAzB;AACA,cAAI8B,YAAY9B,IAAZ,IAAoB,IAAxB,EAA8B;AAC5B8B,wBAAY9B,IAAZ,GAAmByB,QAAQM,QAAR,CAAiBD,YAAY9B,IAA7B,CAAnB;AACD;AACD,iBAAKE,6BAAL,CAAmC4B,WAAnC;AACA,iBAAOA,WAAP;AACD,SAPM,CAAP;AAQD;AACF;;AAED;;;;;;;;;;;gDAQ4B9C,I,EAAMqB,a,EAAgD;AAAA,UAAjCL,IAAiC,uEAA1B,IAA0B;AAAA,UAApBjB,WAAoB,uEAAN,IAAM;;AAChF,UAAIA,eAAe,IAAnB,EAAyB;AACvBA,sBAAc,KAAKV,aAAL,CAAmBa,cAAnB,EAAd;AACD;AACD,aAAO;AACLuB,YAAI,IADC;AAELzB,cAAMA,IAFD;AAGLqB,uBAAeA,aAHV;AAILtB,qBAAaA,WAJR;AAKLiB,cAAMA;AALD,OAAP;AAOD;;AAED;;;;;;8CAG0B;AACxB,UAAMU,sBAAsB,KAAKpC,cAAL,CAAoB0D,eAApB,EAA5B;AACA,UAAItB,uBAAuB,IAAvB,IAA+BA,oBAAoBuB,SAAvD,EAAkE;AAChE,YAAMC,0BAA0BxB,oBAAoByB,KAApD;AACA,YAAID,2BAA2B,IAA/B,EAAqC;AAAA;AAAA;AAAA;;AAAA;AACnC,kCAA+BA,uBAA/B,mIAAwD;AAAA,kBAA/C/B,kBAA+C;;AACtD,kBAAII,qBAAqB,IAAzB;AACA,kBAAIJ,mBAAmBnB,IAAnB,KAA4B,WAA5B,IAA2CmB,mBAAmBnB,IAAnB,KAA4B,YAA3E,EAAyF;AACvFuB,qCAAqB,KAAK6B,2BAAL,CAAiCjC,kBAAjC,CAArB;AACD,eAFD,MAEO,IAAIA,mBAAmBnB,IAAnB,KAA4B,WAAhC,EAA6C;AAClDuB,qCAAqB,KAAK8B,kCAAL,CAAwClC,kBAAxC,CAArB;AACD;AACD;;;;;;AAMAA,iCAAmBI,kBAAnB,GAAwCA,kBAAxC;AACD;AAfkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBpC;AACF;AACF;;AAED;;;;;;;;4DAKwCF,a,EAAe;AACrD,UAAMtB,cAAc,KAAKV,aAAL,CAAmBa,cAAnB,EAApB;AACA,UAAMoD,eAAe,KAAKC,mCAAL,CAAyCxD,WAAzC,CAArB;AACA,UAAIuD,gBAAgB,IAApB,EAA0B;AAAA;AAAA;AAAA;;AAAA;AACxB,gCAAwBA,YAAxB,mIAAsC;AAAA,gBAA7BR,WAA6B;;AACpC,gBAAIA,YAAYzB,aAAZ,KAA8BA,aAAlC,EAAiD;AAC/C,qBAAO,IAAP;AACD;AACF;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzB;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;gDAI4ByB,W,EAAa;AACvC,UAAIA,YAAYU,SAAhB,EAA2B;AACzB;;;;AAIAC,kDAAwCX,YAAYY,IAApD;AACA7D,gBAAQC,GAAR,qCAA8CgD,YAAYY,IAA1D;AACD;;AAED,UAAMvC,qBAAqB,KAAK7B,cAAL,CAAoB8B,6BAApB,CAAkD0B,YAAYrB,EAA9D,CAA3B;AACA,UAAIN,sBAAsB,IAAtB,IAA8BA,mBAAmBI,kBAAnB,IAAyC,IAA3E,EAAiF;AAC/E;;;;AAIAJ,2BAAmBI,kBAAnB;AACA,aAAKC,WAAL,CAAiB,mBAAmBL,mBAAmBM,EAAvD;AACD;;AAED;;;;AAIA,UAAMkC,kBAAkB,KAAKnE,WAAL,CAAiBoE,oBAAjB,CAAsCd,WAAtC,CAAxB;AACA,UAAM/C,cAAc,KAAKV,aAAL,CAAmBa,cAAnB,EAApB;AACA,UAAMF,OAAO2D,gBAAgB3D,IAA7B;AACA,UAAMyB,KAAKkC,gBAAgBlC,EAA3B;AACA,UAAMT,OAAO2C,eAAb;AACA,UAAME,iBAAiB,KAAKC,2BAAL,CAAiC9D,IAAjC,EAAuCyB,EAAvC,EAA2CT,IAA3C,EAAiDjB,WAAjD,CAAvB;AACA,UAAMuD,eAAe,KAAKC,mCAAL,CAAyCxD,WAAzC,CAArB;AACAuD,mBAAalB,IAAb,CAAkByB,cAAlB;AACA,WAAKE,uBAAL,CAA6BF,cAA7B;AACA,WAAKzE,UAAL,CAAgB4E,UAAhB,CAA2B,sBAA3B,EAAmD,EAAE3C,eAAesC,gBAAgBlC,EAAjC,EAAnD;AACD;;AAED;;;;;;;;gDAK4BN,kB,EAAoB;AAAA;;AAC9C;AACA,UAAM8C,yBAAyB,IAA/B;;AAEA;AACA,UAAMC,kBAAkB/C,kBAAxB;;AAEA,WAAKK,WAAL,CAAiB,iBAAiBL,mBAAmBM,EAArD;;AAEA,UAAMF,qBAAqB,KAAKnC,UAAL,CAAgB+E,GAAhB,CAAoB,eAApB,EAAqC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC/E;;;;AAIA,YAAMvB,cAAcoB,eAApB;AACA,YAAIpB,eAAe,IAAnB,EAAyB;AACvB,iBAAKtB,WAAL,CAAiB,0CAA0CsB,YAAYrB,EAAtD,GAA2D,aAA3D,GAA2E4C,KAAKC,MAAjG;AACA,cAAM7C,KAAKqB,YAAYrB,EAAvB;;AAEA,cAAI,CAAC,OAAKG,uCAAL,CAA6CH,EAA7C,CAAL,EAAuD;AACrD;;;;AAIA;AACA,gBAAMH,YAAY,OAAKiD,6BAAL,CAAmCzB,WAAnC,CAAlB;AACA,gBAAIxB,SAAJ,EAAe;AACb2C,qCAAuBnC,2BAAvB,CAAmDgB,WAAnD;AACD;AACF;AACF;AACF,OAtB0B,CAA3B;AAuBA,aAAOvB,kBAAP;AACD;;AAED;;;;;;;;kDAK8BJ,kB,EAAoB;AAChD,UAAIG,YAAY,KAAhB;AACA,UAAIH,sBAAsB,IAA1B,EAAgC;AAC9B,YAAIA,mBAAmBnB,IAAnB,KAA4B,WAA5B,IAA2CmB,mBAAmBnB,IAAnB,KAA4B,YAA3E,EAAyF;AACvFsB,sBAAY,KAAKiD,6BAAL,CAAmCpD,kBAAnC,CAAZ;AACD,SAFD,MAEO,IAAIA,mBAAmBnB,IAAnB,KAA4B,WAAhC,EAA6C;AAClDsB,sBAAY,KAAKkD,yBAAL,CAA+BrD,kBAA/B,CAAZ;AACD;AACF;AACD,aAAOG,SAAP;AACD;;AAED;;;;;;;;kDAK8BH,kB,EAAoB;AAChD,UAAIG,YAAY,KAAhB;AACA,UAAMb,SAASU,mBAAmBV,MAAlC;AACA,UAAIA,UAAU,IAAd,EAAoB;AAClB,YAAMgE,UAAUhE,OAAOgE,OAAvB;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,QAAQtC,MAA5B,EAAoCuC,GAApC,EAAyC;AACvC,cAAMJ,SAASG,QAAQC,CAAR,CAAf;AACA,cAAIA,MAAM,CAAV,EAAa;AACX;AACApD,wBAAY,KAAK/B,kBAAL,CAAwBoF,WAAxB,CAAoCL,MAApC,CAAZ;AACD,WAHD,MAGO;AACL;;;;AAIAhD,wBAAYA,aAAa,KAAK/B,kBAAL,CAAwBoF,WAAxB,CAAoCL,MAApC,CAAzB;AACD;AACF;AACF;AACD,aAAOhD,SAAP;AACD;;AAED;;;;;;;;uDAKmCH,kB,EAAoB;AAAA;;AACrD,UAAM8C,yBAAyB,IAA/B;AACA,UAAMC,kBAAkB/C,kBAAxB;AACA,WAAKK,WAAL,CAAiB,iBAAiBL,mBAAmBM,EAArD;AACA,UAAMF,qBAAqB,KAAKnC,UAAL,CAAgB+E,GAAhB,CAAoB,sBAApB,EAA4C,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACtF;;;;AAIA,YAAMlD,qBAAqB+C,eAA3B;AACA,YAAI/C,sBAAsB,IAA1B,EAAgC;AAC9B,iBAAKK,WAAL,CAAiB,iDAAiDL,mBAAmBM,EAApE,GAAyE,aAAzE,GAAyF4C,KAAKhD,aAA/G;;AAEA,cAAMI,KAAKN,mBAAmBM,EAA9B;AACA,cAAMJ,gBAAgBgD,KAAKhD,aAA3B;;AAEA,cAAI,CAAC,OAAKO,uCAAL,CAA6CH,EAA7C,CAAL,EAAuD;AACrD;;;;;AAKA,gBAAMH,YAAY,OAAKkD,yBAAL,CAA+BrD,kBAA/B,CAAlB;AACA,gBAAIG,SAAJ,EAAe;AACb2C,qCAAuBnC,2BAAvB,CAAmDX,kBAAnD;AACD;AACF;AACF;AACF,OAxB0B,CAA3B;AAyBA,aAAOI,kBAAP;AACD;;AAED;;;;;;;;8CAK0BJ,kB,EAAoB;AAC5C,UAAIG,YAAY,KAAhB;AACA,UAAMb,SAASU,mBAAmBV,MAAlC;AACA,UAAIA,UAAU,IAAd,EAAoB;AAClB,YAAMmE,iBAAiBnE,OAAOmE,cAA9B;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,eAAezC,MAAnC,EAA2C0C,GAA3C,EAAgD;AAC9C,cAAMC,oBAAoBF,eAAeC,CAAf,CAA1B;AACA,cAAIA,MAAM,CAAV,EAAa;AACX;AACAvD,wBAAY,KAAKM,uCAAL,CAA6CkD,iBAA7C,CAAZ;AACD,WAHD,MAGO;AACL;;;;AAIAxD,wBAAYA,aAAa,KAAKM,uCAAL,CAA6CkD,iBAA7C,CAAzB;AACD;AACF;AACF;AACD,aAAOxD,SAAP;AACD;;AAED;;;;;;;;0DAKwD;AAAA,UAApBvB,WAAoB,uEAAN,IAAM;;AACtD,UAAIA,eAAe,IAAnB,EAAyB;AACvBA,sBAAc,KAAKV,aAAL,CAAmBa,cAAnB,EAAd;AACD;AACD,UAAI,KAAKT,gCAAL,CAAsCM,WAAtC,KAAsD,IAA1D,EAAgE;AAC9D,aAAKN,gCAAL,CAAsCM,WAAtC,IAAqD,EAArD;AACA,eAAO,KAAKN,gCAAL,CAAsCM,WAAtC,CAAP;AACD,OAHD,MAGO,IAAI,KAAKN,gCAAL,CAAsCM,WAAtC,KAAsD,IAA1D,EAAgE;AACrE,eAAO,KAAKN,gCAAL,CAAsCM,WAAtC,CAAP;AACD;AACD,aAAO,EAAP;AACD;;AAED;;;;;;;;;0DAMsCsB,a,EAAe;AACnD,UAAM0D,8BAA8B,EAApC;AACA,UAAMC,eAAe,KAAK3F,aAAL,CAAmB4F,wBAAnB,EAArB;AAFmD;AAAA;AAAA;;AAAA;AAGnD,8BAAwBD,YAAxB,mIAAsC;AAAA,cAA7BjF,WAA6B;;AACpC,cAAMmF,2BAA2B,KAAKzF,gCAAL,CAAsCM,WAAtC,CAAjC;AACA,cAAImF,4BAA4B,IAAhC,EAAsC;AACpC,iBAAK,IAAIL,IAAIK,yBAAyB/C,MAAzB,GAAkC,CAA/C,EAAkD0C,KAAK,CAAvD,EAA0DA,GAA1D,EAA+D;AAC7D,kBAAM5D,qBAAqBiE,yBAAyBL,CAAzB,CAA3B;AACA,kBAAI5D,sBAAsB,IAAtB,IAA8BA,mBAAmBD,IAAnB,IAA2B,IAA7D,EAAmE;AACjE,oBAAIC,mBAAmBD,IAAnB,CAAwBS,EAAxB,KAA+BJ,aAAnC,EAAkD;AAChD0D,8CAA4B3C,IAA5B,CAAiCnB,kBAAjC;AACD;AACF;AACF;AACF;AACF;AAfkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBnD,aAAO8D,2BAAP;AACD;;AAED;;;;;;;;;kEAM8C1D,a,EAAe;AAC3D,UAAM8D,8BAA8B,EAApC;AACA,UAAMzD,sBAAsB,KAAKpC,cAAL,CAAoBqC,mBAApB,EAA5B;AAF2D;AAAA;AAAA;;AAAA;AAG3D,8BAA+BD,mBAA/B,mIAAoD;AAAA,cAA3CP,kBAA2C;;AAClD,cAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,gBAAMJ,sBACJ,KAAKqE,qCAAL,CAA2CjE,mBAAmBM,EAA9D,CADF;AAEA0D,wCAA4BhE,mBAAmBM,EAA/C,IAAqDV,mBAArD;AACD;AACF;AAT0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAU3D,aAAOoE,2BAAP;AACD;;AAED;;;;;;;gDAI4B;AAC1B,UAAI1D,KAAK,IAAT;AACA,UAAM6B,eAAe,KAAKhE,cAAL,CAAoBqC,mBAApB,EAArB;AACA,aAAOF,MAAM,IAAb,EAAmB;AACjBA,aAAK,KAAKjC,WAAL,CAAiB6F,WAAjB,CAA6B,EAA7B,CAAL;AADiB;AAAA;AAAA;;AAAA;AAEjB,gCAAwB/B,YAAxB,mIAAsC;AAAA,gBAA7BR,WAA6B;;AACpC,gBAAIA,YAAYrB,EAAZ,KAAmBA,EAAvB,EAA2B;AACzB;;;;AAIAA,mBAAK,IAAL;AACA;AACD;AACF;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYlB;AACD,aAAOA,EAAP;AACD;;;;;;AAGHxC,mBAAmBqG,OAAnB,GAA6B,CAC3B,OAD2B,EAE3B,IAF2B,EAG3B,YAH2B,EAI3B,eAJ2B,EAK3B,gBAL2B,EAM3B,oBAN2B,EAO3B,aAP2B,CAA7B;;kBAUerG,kB","file":"achievementService.js","sourcesContent":["class AchievementService {\n  constructor(\n      $http,\n      $q,\n      $rootScope,\n      ConfigService,\n      ProjectService,\n      StudentDataService,\n      UtilService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    // an object of projectAchievements, where key is workgroupId and value is the array of projectAchievements for the workgroup.\n    this.studentAchievementsByWorkgroupId = {};\n\n    // whether to print debug output to the console\n    this.debug = false;\n\n    this.loadProjectAchievements();\n  }\n\n  /**\n   * Output the string to the console if debug=true\n   * @param str the string to output to the console\n   */\n  debugOutput(str) {\n    if (this.debug) {\n      console.log(str);\n    }\n  }\n\n  retrieveStudentAchievements(workgroupId = null, type = null) {\n    if (this.ConfigService.isPreview()) {\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      this.studentAchievementsByWorkgroupId[workgroupId] = [];\n      return Promise.resolve(this.studentAchievementsByWorkgroupId);\n    } else {\n      const config = {\n        method: 'GET',\n        url: this.ConfigService.getAchievementsURL(),\n        params: {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        config.params.workgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n      if (type != null) {\n        config.params.type = type;\n      }\n\n      return this.$http(config).then((response) => {\n        let studentAchievements = response.data;\n        if (studentAchievements != null) {\n          for (let studentAchievement of studentAchievements) {\n            this.addOrUpdateStudentAchievement(studentAchievement);\n\n            if (this.ConfigService.getMode() === 'studentRun') {\n              const projectAchievement = this.ProjectService\n                  .getAchievementByAchievementId(studentAchievement.achievementId);\n              if (projectAchievement != null) {\n                /*\n                 * set the completed field to true in case we ever\n                 * need to easily see which projectAchievements the student\n                 * has completed\n                 */\n                projectAchievement.completed = true;\n                if (projectAchievement.deregisterFunction != null) {\n                  /*\n                   * the student has completed this achievement\n                   * so we no longer need to listen for it\n                   */\n                  projectAchievement.deregisterFunction();\n                  this.debugOutput('deregistering ' + projectAchievement.id);\n                }\n              }\n            }\n          }\n\n          if (this.ConfigService.getMode() == 'studentRun') {\n            /*\n             * Loop through all the project projectAchievements and\n             * re-evaluate whether the student has completed each.\n             * This is to make sure students never get stuck in a\n             * state where they did everything required to complete\n             * a certain achievement but some error or bug occurred\n             * which prevented their student achievement from being\n             * saved and then they end up never being able to\n             * complete that achievement. We will avoid this\n             * situation by re-evaluating all the project\n             * projectAchievements each time the student loads the VLE.\n             */\n            const projectAchievements = this.ProjectService.getAchievementItems();\n            if (projectAchievements != null) {\n              for (let projectAchievement of projectAchievements) {\n                if (!this.isAchievementCompletedBySignedInStudent(projectAchievement.id)) {\n                  if (this.isProjectAchievementSatisfied(projectAchievement)) {\n                    /*\n                     * the student has satisfied everything that is\n                     * required of the achievement\n                     */\n                    this.studentCompletedAchievement(projectAchievement);\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          this.studentAchievementsByWorkgroupId = {};\n        }\n\n        return this.studentAchievementsByWorkgroupId;\n      });\n    }\n  }\n\n  /**\n   * Add Achievement to local bookkeeping\n   * @param studentAchievement the student achievement to add or update\n   */\n  addOrUpdateStudentAchievement(studentAchievement) {\n    if (studentAchievement != null) {\n      const achievementWorkgroupId = studentAchievement.workgroupId;\n      if (this.studentAchievementsByWorkgroupId[achievementWorkgroupId] == null) {\n        this.studentAchievementsByWorkgroupId[achievementWorkgroupId] = new Array();\n      }\n      const studentAchievements = this.studentAchievementsByWorkgroupId[achievementWorkgroupId];\n      let found = false;\n      for (let studentAchievementIndex = 0; studentAchievementIndex < studentAchievements.length; studentAchievementIndex++) {\n        let studentAchievement = studentAchievements[studentAchievementIndex];\n\n        if (studentAchievement.achievementId != null &&\n            studentAchievement.achievementId === studentAchievement.achievementId &&\n            studentAchievement.workgroupId != null &&\n            studentAchievement.workgroupId === studentAchievement.workgroupId) {\n          /*\n           * the achievement 10 character alphanumeric id matches and\n           * the workgroup id matches so we will update it\n           */\n          studentAchievements[studentAchievementIndex] = studentAchievement;\n          found = true;  // remember this so we don't insert later.\n          break;\n        }\n      }\n      if (!found) {\n        // we did not find the achievement so we will add it to the array\n        studentAchievements.push(studentAchievement);\n      }\n    }\n  }\n\n  /**\n   * Saves the achievement for the logged-in user\n   * @param studentAchievement\n   */\n  saveAchievementToServer(studentAchievement) {\n    if (this.ConfigService.isPreview()) {\n      // if we're in preview, don't make any request to the server and resolve the promise right away\n      const deferred = this.$q.defer();\n      deferred.resolve(studentAchievement);\n      return deferred.promise;\n    } else {\n      const config = {\n        method: \"POST\",\n        url: this.ConfigService.getAchievementsURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      let params = {\n        achievementId: studentAchievement.achievementId,\n        workgroupId: studentAchievement.workgroupId,\n        type: studentAchievement.type\n      };\n\n      if (studentAchievement.id != null) {\n        params.id = studentAchievement.id;\n      }\n      if (studentAchievement.data != null) {\n        params.data = angular.toJson(studentAchievement.data);\n      }\n\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let achievement = result.data;\n        if (achievement.data != null) {\n          achievement.data = angular.fromJson(achievement.data);\n        }\n        this.addOrUpdateStudentAchievement(achievement);\n        return achievement;\n      });\n    }\n  }\n\n  /**\n   * Creates a new student achievement object\n   * @param type type of achievement [\"completion\", \"milestone\", etc]\n   * @param achievementId id of achievement in project content\n   * @param data other extra information about this achievement\n   * @param workgroupId id of workgroup whom this achievement is for\n   * @returns newly created student achievement object\n   */\n  createNewStudentAchievement(type, achievementId, data = null, workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    return {\n      id: null,\n      type: type,\n      achievementId: achievementId,\n      workgroupId: workgroupId,\n      data: data\n    };\n  }\n\n  /**\n   * Load the project achievements by creating listeners for the appropriate events\n   */\n  loadProjectAchievements() {\n    const projectAchievements = this.ProjectService.getAchievements();\n    if (projectAchievements != null && projectAchievements.isEnabled) {\n      const projectAchievementItems = projectAchievements.items;\n      if (projectAchievementItems != null) {\n        for (let projectAchievement of projectAchievementItems) {\n          let deregisterFunction = null;\n          if (projectAchievement.type === 'milestone' || projectAchievement.type === 'completion') {\n            deregisterFunction = this.createNodeCompletedListener(projectAchievement);\n          } else if (projectAchievement.type === 'aggregate') {\n            deregisterFunction = this.createAggregateAchievementListener(projectAchievement);\n          }\n          /*\n           * set the deregisterFunction into the project\n           * achievement so that we can deregister the\n           * listener after the student has completed the\n           * achievement\n           */\n          projectAchievement.deregisterFunction = deregisterFunction;\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the student has completed the achievement\n   * @param achievementId\n   * @return whether the student has completed the achievement\n   */\n  isAchievementCompletedBySignedInStudent(achievementId) {\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    const achievements = this.getStudentAchievementsByWorkgroupId(workgroupId);\n    if (achievements != null) {\n      for (let achievement of achievements) {\n        if (achievement.achievementId === achievementId) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The student has just completed an achievement\n   * @param achievement the achievement the student completed\n   */\n  studentCompletedAchievement(achievement) {\n    if (achievement.isVisible) {\n      /*\n       * this is a visible achievement so we will display a message\n       * to the student\n       */\n      alert(`Congratulations you completed: ${achievement.name}`);\n      console.log(`Congratulations you completed: ${achievement.name}`);\n    }\n\n    const projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.id);\n    if (projectAchievement != null && projectAchievement.deregisterFunction != null) {\n      /*\n       * deregister the achievement listener now that the student has\n       * completed the achievement\n       */\n      projectAchievement.deregisterFunction();\n      this.debugOutput('deregistering ' + projectAchievement.id);\n    }\n\n    /*\n     * create a copy of the achievement to make sure we don't cause\n     * any referencing problems in the future\n     */\n    const achievementCopy = this.UtilService.makeCopyOfJSONObject(achievement);\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    const type = achievementCopy.type;\n    const id = achievementCopy.id;\n    const data = achievementCopy;\n    const newAchievement = this.createNewStudentAchievement(type, id, data, workgroupId);\n    const achievements = this.getStudentAchievementsByWorkgroupId(workgroupId);\n    achievements.push(newAchievement);\n    this.saveAchievementToServer(newAchievement);\n    this.$rootScope.$broadcast('achievementCompleted', { achievementId: achievementCopy.id });\n  }\n\n  /**\n   * Create a listener for the node completed achievement\n   * @param projectAchievement the achievement to listen for\n   * @return the deregister function for the listener\n   */\n  createNodeCompletedListener(projectAchievement) {\n    // save this to a variable so that we can access it in the callback\n    const thisAchievementService = this;\n\n    // save the achievement to a variable so that we can access it in the callback\n    const thisAchievement = projectAchievement;\n\n    this.debugOutput('registering ' + projectAchievement.id);\n\n    const deregisterFunction = this.$rootScope.$on('nodeCompleted', (event, args) => {\n      /*\n       * the nodeCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n      const achievement = thisAchievement;\n      if (achievement != null) {\n        this.debugOutput('createNodeCompletedListener checking ' + achievement.id + ' completed ' + args.nodeId);\n        const id = achievement.id;\n\n        if (!this.isAchievementCompletedBySignedInStudent(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n          // check if the student has completed this node completed achievement\n          const completed = this.checkNodeCompletedAchievement(achievement);\n          if (completed) {\n            thisAchievementService.studentCompletedAchievement(achievement);\n          }\n        }\n      }\n    });\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a specific achievement\n   * @param projectAchievement an achievement\n   * @return whether the student completed the achievement\n   */\n  isProjectAchievementSatisfied(projectAchievement) {\n    let completed = false;\n    if (projectAchievement != null) {\n      if (projectAchievement.type === 'milestone' || projectAchievement.type === 'completion') {\n        completed = this.checkNodeCompletedAchievement(projectAchievement);\n      } else if (projectAchievement.type === 'aggregate') {\n        completed = this.checkAggregateAchievement(projectAchievement);\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Check if the student completed a node completed achievement\n   * @param projectAchievement a node completed achievement\n   * @return whether the student completed the node completed achievement\n   */\n  checkNodeCompletedAchievement(projectAchievement) {\n    let completed = false;\n    const params = projectAchievement.params;\n    if (params != null) {\n      const nodeIds = params.nodeIds;\n      for (let n = 0; n < nodeIds.length; n++) {\n        const nodeId = nodeIds[n];\n        if (n === 0) {\n          // this is the first node id\n          completed = this.StudentDataService.isCompleted(nodeId);\n        } else {\n          /*\n           * this is a node id after the first node id so\n           * we will use an and conditional\n           */\n          completed = completed && this.StudentDataService.isCompleted(nodeId);\n        }\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Create a listener for an aggregate achievement\n   * @param projectAchievement the project achievement\n   * @return the deregister function for the listener\n   */\n  createAggregateAchievementListener(projectAchievement) {\n    const thisAchievementService = this;\n    const thisAchievement = projectAchievement;\n    this.debugOutput('registering ' + projectAchievement.id);\n    const deregisterFunction = this.$rootScope.$on('achievementCompleted', (event, args) => {\n      /*\n       * the achievementCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n      const projectAchievement = thisAchievement;\n      if (projectAchievement != null) {\n        this.debugOutput('createAggregateAchievementListener checking ' + projectAchievement.id + ' completed ' + args.achievementId);\n\n        const id = projectAchievement.id;\n        const achievementId = args.achievementId;\n\n        if (!this.isAchievementCompletedBySignedInStudent(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n\n          const completed = this.checkAggregateAchievement(projectAchievement);\n          if (completed) {\n            thisAchievementService.studentCompletedAchievement(projectAchievement);\n          }\n        }\n      }\n    });\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a aggregate achievement\n   * @param projectAchievement an aggregate achievement\n   * @return whether the student completed the aggregate achievement\n   */\n  checkAggregateAchievement(projectAchievement) {\n    let completed = false;\n    const params = projectAchievement.params;\n    if (params != null) {\n      const achievementIds = params.achievementIds;\n      for (let a = 0; a < achievementIds.length; a++) {\n        const tempAchievementId = achievementIds[a];\n        if (a === 0) {\n          // this is the first node id\n          completed = this.isAchievementCompletedBySignedInStudent(tempAchievementId);\n        } else {\n          /*\n           * this is a node id after the first node id so\n           * we will use an and conditional\n           */\n          completed = completed && this.isAchievementCompletedBySignedInStudent(tempAchievementId);\n        }\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Get student achievements for a workgroup id\n   * @param workgroupId the workgroup id\n   * @return an array of student achievements completed by the workgroup\n   */\n  getStudentAchievementsByWorkgroupId(workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    if (this.studentAchievementsByWorkgroupId[workgroupId] == null) {\n      this.studentAchievementsByWorkgroupId[workgroupId] = [];\n      return this.studentAchievementsByWorkgroupId[workgroupId];\n    } else if (this.studentAchievementsByWorkgroupId[workgroupId] != null) {\n      return this.studentAchievementsByWorkgroupId[workgroupId];\n    }\n    return [];\n  }\n\n  /**\n   * Get an array of student projectAchievements for a given achievement id\n   * @param achievementId a 10 character achievement id\n   * @return an array of student projectAchievements. student projectAchievements are\n   * created when a workgroup completes an achievement.\n   */\n  getStudentAchievementsByAchievementId(achievementId) {\n    const achievementsByAchievementId = [];\n    const workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n    for (let workgroupId of workgroupIds) {\n      const achievementsForWorkgroup = this.studentAchievementsByWorkgroupId[workgroupId];\n      if (achievementsForWorkgroup != null) {\n        for (let a = achievementsForWorkgroup.length - 1; a >= 0; a--) {\n          const studentAchievement = achievementsForWorkgroup[a];\n          if (studentAchievement != null && studentAchievement.data != null) {\n            if (studentAchievement.data.id === achievementId) {\n              achievementsByAchievementId.push(studentAchievement);\n            }\n          }\n        }\n      }\n    }\n    return achievementsByAchievementId;\n  }\n\n  /**\n   * Get a mapping from achievement id to array of student projectAchievements\n   * @param achievementId the achievement id\n   * @return a mapping from achievement id to array of student projectAchievements\n   * student projectAchievements are created when a workgroup completes an achievement.\n   */\n  getAchievementIdToStudentAchievementsMappings(achievementId) {\n    const achievementIdToAchievements = {};\n    const projectAchievements = this.ProjectService.getAchievementItems();\n    for (let projectAchievement of projectAchievements) {\n      if (projectAchievement != null) {\n        const studentAchievements =\n          this.getStudentAchievementsByAchievementId(projectAchievement.id);\n        achievementIdToAchievements[projectAchievement.id] = studentAchievements;\n      }\n    }\n    return achievementIdToAchievements;\n  }\n\n  /**\n   * Get an achievement id that isn't being used\n   * @return an achievement id that isn't being used\n   */\n  getAvailableAchievementId() {\n    let id = null;\n    const achievements = this.ProjectService.getAchievementItems();\n    while (id == null) {\n      id = this.UtilService.generateKey(10);\n      for (let achievement of achievements) {\n        if (achievement.id === id) {\n          /*\n           * the id is already being used so we need to find\n           * a different one\n           */\n          id = null;\n          break;\n        }\n      }\n    }\n    return id;\n  }\n}\n\nAchievementService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AchievementService;\n"]}