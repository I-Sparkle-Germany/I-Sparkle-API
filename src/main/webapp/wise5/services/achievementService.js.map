{"version":3,"sources":["achievementService.es6"],"names":["AchievementService","$http","$q","$rootScope","ConfigService","ProjectService","UtilService","achievementsByWorkgroupId","workgroupId","type","isPreview","Promise","resolve","achievementsURL","getAchievementsURL","config","method","url","params","getMode","getWorkgroupId","periodId","getPeriodId","then","response","achievements","data","i","length","achievement","addOrUpdateAchievement","achievementWorkgroupId","Array","found","w","a","id","push","deferred","defer","promise","headers","achievementId","angular","toJson","$","param","result","fromJson","$inject"],"mappings":"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","file":"achievementService.js","sourcesContent":["class AchievementService {\n    constructor($http, $q, $rootScope, ConfigService, ProjectService, UtilService) {\n\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n        this.achievementsByWorkgroupId = {};  // an object of achievements, where key is workgroupId and value is the array of achievements for the workgroup.\n    }\n\n    /**\n     * Retrieves achievements from the server\n     */\n    retrieveAchievements(workgroupId = null, type = null) {\n\n        if (this.ConfigService.isPreview()) {\n            return Promise.resolve(this.achievementsByWorkgroupId);\n        } else {\n            let achievementsURL = this.ConfigService.getAchievementsURL();\n\n            let config = {\n                method: \"GET\",\n                url: achievementsURL,\n                params: {}\n            };\n            if (workgroupId != null) {\n                config.params.workgroupId = workgroupId;\n            } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n                // get the achievements for the logged-in workgroup\n                config.params.workgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n            if (type != null) {\n                config.params.type = type;\n            }\n\n            return this.$http(config).then((response) => {\n                let achievements = response.data;\n\n                if (achievements != null) {\n                    for (let i = 0; i < achievements.length; i++) {\n                        let achievement = achievements[i];\n                        this.addOrUpdateAchievement(achievement);\n                    }\n                } else {\n                    this.achievementsByWorkgroupId = {};\n                }\n\n                return this.achievementsByWorkgroupId;\n            });\n        }\n    }\n\n    /**\n     * Add Achievement to local bookkeeping\n     * @param achievement the Achievement to add or update\n     */\n    addOrUpdateAchievement(achievement) {\n        let achievementWorkgroupId = achievement.workgroupId;\n        if (this.achievementsByWorkgroupId[achievementWorkgroupId] == null) {\n            this.achievementsByWorkgroupId[achievementWorkgroupId] = new Array();\n        }\n        let found = false;\n        for (let w = 0; w < this.achievementsByWorkgroupId[achievementWorkgroupId].length; w++) {\n            let a = this.achievementsByWorkgroupId[achievementWorkgroupId][w];\n            if (a.id != null && a.id === achievement.id) {\n                // found the same achievement id, so just update it in place.\n                this.achievementsByWorkgroupId[achievementWorkgroupId][w] = achievement;\n                found = true;  // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.achievementsByWorkgroupId[achievementWorkgroupId].push(achievement);\n        }\n    }\n\n    /**\n     * Saves the achievement for the logged-in user\n     * @param achievement\n     */\n    saveAchievementToServer(achievement) {\n\n        if (this.ConfigService.isPreview()) {\n            // if we're in preview, don't make any request to the server but pretend that we did\n            let deferred = this.$q.defer();\n            deferred.resolve(achievement);\n            return deferred.promise;\n\n        } else {\n\n            let config = {\n                method: \"POST\",\n                url: this.ConfigService.getAchievementsURL(),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            };\n\n            let params = {\n                achievementId: achievement.achievementId,\n                workgroupId: achievement.workgroupId,\n                type: achievement.type\n            };\n            if (achievement.id != null) {\n                params.id = achievement.id;\n            }\n            if (achievement.data != null) {\n                params.data = angular.toJson(achievement.data);\n            }\n\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let achievement = result.data;\n                if (achievement.data != null) {\n                    // parse the data string into a JSON object\n                    achievement.data = angular.fromJson(achievement.data);\n                }\n                this.addOrUpdateAchievement(achievement);\n                return achievement;\n            })\n        }\n    }\n\n    /**\n     * Creates a new achievement object\n     * @param type type of achievement [\"completion\", \"milestone\", etc]\n     * @param achievementId id of achievement in project content\n     * @param data other extra information about this achievement\n     * @param workgroupId id of workgroup whom this achievement is for\n     * @returns newly created achievement object\n     */\n    createNewAchievement(type, achievementId, data = null, workgroupId = null) {\n        if (workgroupId == null) {\n            workgroupId = this.ConfigService.getWorkgroupId();\n        }\n        return {\n            id: null,\n            type: type,\n            achievementId: achievementId,\n            workgroupId: workgroupId,\n            data: data\n        };\n    }\n}\n\nAchievementService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default AchievementService;\n"]}