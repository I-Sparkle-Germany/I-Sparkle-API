{"version":3,"sources":["achievementService.es6"],"names":["AchievementService","$http","$q","$rootScope","ConfigService","ProjectService","StudentDataService","UtilService","achievementsByWorkgroupId","debug","loadAchievements","str","console","log","workgroupId","type","isPreview","getWorkgroupId","Promise","resolve","achievementsURL","getAchievementsURL","config","method","url","params","getMode","periodId","getPeriodId","then","response","achievements","data","i","length","achievement","addOrUpdateAchievement","projectAchievement","getAchievementByAchievementId","achievementId","completed","deregisterFunction","debugOutput","id","projectAchievements","getAchievementItems","p","isAchievementCompleted","checkAchievement","studentCompletedAchievement","achievementWorkgroupId","Array","found","w","a","push","deferred","defer","promise","headers","angular","toJson","$","param","result","fromJson","getAchievements","isEnabled","projectAchievementItems","items","createNodeCompletedListener","createAggregateAchievementListener","getAchievementsByWorkgroupId","isVisible","alert","name","makeCopyOfJSONObject","newAchievement","createNewAchievement","saveAchievementToServer","$broadcast","thisAchievementService","thisAchievement","$on","event","args","nodeId","checkNodeCompletedAchievement","checkAggregateAchievement","nodeIds","n","isCompleted","achievementIds","tempAchievementId","achievementsByAchievementId","workgroupIds","getClassmateWorkgroupIds","achievementsForWorkgroup","achievementIdToAchievements","studentAchievements","getAchievementsByAchievementId","generateKey","$inject"],"mappings":"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","file":"achievementService.js","sourcesContent":["class AchievementService {\n    constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentDataService, UtilService) {\n\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.achievementsByWorkgroupId = {};  // an object of achievements, where key is workgroupId and value is the array of achievements for the workgroup.\n\n        // whether to print debug output to the console\n        this.debug = false;\n\n        // load the achievements in the project\n        this.loadAchievements();\n    }\n\n    /**\n     * Output the string to the console if debug=true\n     * @param str the string to output to the console\n     */\n    debugOutput(str) {\n        if (this.debug) {\n            console.log(str);\n        }\n    }\n\n    /**\n     * Retrieves achievements from the server\n     */\n    retrieveAchievements(workgroupId = null, type = null) {\n\n        if (this.ConfigService.isPreview()) {\n\n            // get the signed in workgroup id\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            // initialize the achievements for the workgroup to an empty array\n            this.achievementsByWorkgroupId[workgroupId] = [];\n\n            return Promise.resolve(this.achievementsByWorkgroupId);\n        } else {\n            let achievementsURL = this.ConfigService.getAchievementsURL();\n\n            let config = {\n                method: \"GET\",\n                url: achievementsURL,\n                params: {}\n            };\n            if (workgroupId != null) {\n                config.params.workgroupId = workgroupId;\n            } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n                // get the achievements for the logged-in workgroup\n                config.params.workgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n            if (type != null) {\n                config.params.type = type;\n            }\n\n            return this.$http(config).then((response) => {\n                let achievements = response.data;\n\n                if (achievements != null) {\n\n                    // loop through all the student achievements\n                    for (let i = 0; i < achievements.length; i++) {\n\n                        // get a student achievement\n                        let achievement = achievements[i];\n\n                        // add the student achievement to our local data structure\n                        this.addOrUpdateAchievement(achievement);\n\n                        if (this.ConfigService.getMode() == 'studentRun') {\n\n                            // get the project achievement object\n                            var projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.achievementId);\n\n                            if (projectAchievement != null) {\n\n                                /*\n                                 * set the completed field to true in case we ever\n                                 * need to easily see which achievements the student\n                                 * has completed\n                                 */\n                                projectAchievement.completed = true;\n\n                                if (projectAchievement.deregisterFunction != null) {\n                                    /*\n                                     * the student has completed this achievement\n                                     * so we no longer need to listen for it\n                                     */\n                                    projectAchievement.deregisterFunction();\n                                    this.debugOutput('deregistering ' + projectAchievement.id);\n                                }\n                            }\n                        }\n                    }\n\n                    if (this.ConfigService.getMode() == 'studentRun') {\n\n                        /*\n                         * Loop through all the project achievements and\n                         * re-evaluate whether the student has completed each.\n                         * This is to make sure students never get stuck in a\n                         * state where they did everything required to complete\n                         * a certain achievement but some error or bug occurred\n                         * which prevented their student achievement from being\n                         * saved and then they end up never being able to\n                         * complete that achievement. We will avoid this\n                         * situation by re-evaluating all the project\n                         * achievements each time the student loads the VLE.\n                         */\n\n                        // get all the project achievements\n                        var projectAchievements = this.ProjectService.getAchievementItems();\n\n                        if (projectAchievements != null) {\n\n                            // loop through all the project achievements\n                            for (var p = 0; p < projectAchievements.length; p++) {\n                                var projectAchievement = projectAchievements[p];\n\n                                if (projectAchievement != null) {\n\n                                    if (!this.isAchievementCompleted(projectAchievement.id)) {\n                                        /*\n                                         * the student has not completed this project achievement\n                                         * yet\n                                         */\n\n                                        if (this.checkAchievement(projectAchievement)) {\n                                            /*\n                                             * the student has satisfied everything that is\n                                             * required of the achievement\n                                             */\n                                            this.studentCompletedAchievement(projectAchievement);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    this.achievementsByWorkgroupId = {};\n                }\n\n                return this.achievementsByWorkgroupId;\n            });\n        }\n    }\n\n    /**\n     * Add Achievement to local bookkeeping\n     * @param achievement the Achievement to add or update\n     */\n    addOrUpdateAchievement(achievement) {\n\n        if (achievement != null) {\n\n            // get the workgroup id\n            let achievementWorkgroupId = achievement.workgroupId;\n\n            /*\n             * initialize the workgroup's array of achievements if it does\n             * not exist yet\n             */\n            if (this.achievementsByWorkgroupId[achievementWorkgroupId] == null) {\n                this.achievementsByWorkgroupId[achievementWorkgroupId] = new Array();\n            }\n\n            // get the achievements the workgroup has completed\n            let achievements = this.achievementsByWorkgroupId[achievementWorkgroupId];\n\n            let found = false;\n\n            // loop through all the achievements this workgroup has completed\n            for (let w = 0; w < achievements.length; w++) {\n\n                // get an achievement the workgroup has compeleted\n                let a = achievements[w];\n\n                if (a.achievementId != null && a.achievementId === achievement.achievementId &&\n                            a.workgroupId != null && a.workgroupId === achievement.workgroupId) {\n                    /*\n                     * the achievement 10 character alphanumeric id matches and\n                     * the workgroup id matches so we will update it\n                     */\n                    achievements[w] = achievement;\n                    found = true;  // remember this so we don't insert later.\n                    break;\n                }\n            }\n\n            if (!found) {\n                // we did not find the achievement so we will add it to the array\n                achievements.push(achievement);\n            }\n        }\n    }\n\n    /**\n     * Saves the achievement for the logged-in user\n     * @param achievement\n     */\n    saveAchievementToServer(achievement) {\n\n        if (this.ConfigService.isPreview()) {\n            // if we're in preview, don't make any request to the server but pretend that we did\n            let deferred = this.$q.defer();\n            deferred.resolve(achievement);\n            return deferred.promise;\n\n        } else {\n\n            let config = {\n                method: \"POST\",\n                url: this.ConfigService.getAchievementsURL(),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            };\n\n            let params = {\n                achievementId: achievement.achievementId,\n                workgroupId: achievement.workgroupId,\n                type: achievement.type\n            };\n            if (achievement.id != null) {\n                params.id = achievement.id;\n            }\n            if (achievement.data != null) {\n                params.data = angular.toJson(achievement.data);\n            }\n\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let achievement = result.data;\n                if (achievement.data != null) {\n                    // parse the data string into a JSON object\n                    achievement.data = angular.fromJson(achievement.data);\n                }\n                this.addOrUpdateAchievement(achievement);\n                return achievement;\n            })\n        }\n    }\n\n    /**\n     * Creates a new achievement object\n     * @param type type of achievement [\"completion\", \"milestone\", etc]\n     * @param achievementId id of achievement in project content\n     * @param data other extra information about this achievement\n     * @param workgroupId id of workgroup whom this achievement is for\n     * @returns newly created achievement object\n     */\n    createNewAchievement(type, achievementId, data = null, workgroupId = null) {\n        if (workgroupId == null) {\n            workgroupId = this.ConfigService.getWorkgroupId();\n        }\n        return {\n            id: null,\n            type: type,\n            achievementId: achievementId,\n            workgroupId: workgroupId,\n            data: data\n        };\n    }\n\n    /**\n     * Load the achievements by creating listeners for the appropriate events\n     */\n    loadAchievements() {\n\n        var projectAchievements = this.ProjectService.getAchievements();\n\n        if (projectAchievements != null) {\n            if (projectAchievements.isEnabled) {\n\n                // get all the achievements in the project\n                var projectAchievementItems = projectAchievements.items;\n\n                if (projectAchievementItems != null) {\n\n                    // loop through all the achievements in the project\n                    for (var a = 0; a < projectAchievementItems.length; a++) {\n\n                        var projectAchievement = projectAchievementItems[a];\n\n                        if (projectAchievement != null) {\n\n                            var deregisterFunction = null;\n\n                            // create a listener for the achievement\n                            if (projectAchievement.type == 'milestone' || projectAchievement.type == 'completion') {\n                                deregisterFunction = this.createNodeCompletedListener(projectAchievement);\n                            } else if (projectAchievement.type == 'aggregate') {\n                                deregisterFunction = this.createAggregateAchievementListener(projectAchievement);\n                            }\n\n                            /*\n                             * set the deregisterFunction into the project\n                             * achievement so that we can deregister the\n                             * listener after the student has completed the\n                             * achievement\n                             */\n                            projectAchievement.deregisterFunction = deregisterFunction;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the student has completed the achievement\n     * @param achievementId\n     * @return whether the student has completed the achievement\n     */\n    isAchievementCompleted(achievementId) {\n\n        if (achievementId != null) {\n\n            // get the student workgroup id\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            // get all the achievements the student has completed\n            var achievements = this.getAchievementsByWorkgroupId(workgroupId);\n\n            if (achievements != null) {\n\n                // loop through all the achievements the student has completed\n                for (var a = 0; a < achievements.length; a++) {\n                    var achievement = achievements[a];\n\n                    if (achievement != null) {\n                        if (achievement.achievementId == achievementId) {\n                            /*\n                             * we have found the achievement with the matching\n                             * achievement id which means the student has\n                             * completed the achievement\n                             */\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * The student has just completed an achievement\n     * @param achievement the achievement the student completed\n     */\n    studentCompletedAchievement(achievement) {\n\n        if (achievement != null) {\n\n            if (achievement.isVisible == true) {\n                /*\n                 * this is a visible achievement so we will display a message\n                 * to the student\n                 */\n                alert(\"Congratulations you completed: \" + achievement.name);\n                console.log(\"Congratulations you completed: \" + achievement.name);\n            }\n\n            // get the project achievement object\n            var projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.id);\n\n            if (projectAchievement != null && projectAchievement.deregisterFunction != null) {\n                /*\n                 * deregister the achievement listener now that the student has\n                 * completed the achievement\n                 */\n                projectAchievement.deregisterFunction();\n                this.debugOutput('deregistering ' + projectAchievement.id);\n            }\n\n            /*\n             * create a copy of the achievement to make sure we don't cause\n             * any referencing problems in the future\n             */\n            var achievement = this.UtilService.makeCopyOfJSONObject(achievement);\n\n            // get the student workgroup id\n            var workgroupId = this.ConfigService.getWorkgroupId();\n\n            // get the parameters for creating an achievement\n            var type = achievement.type;\n            var id = achievement.id;\n            var data = achievement;\n\n            // create the student achievement\n            var newAchievement = this.createNewAchievement(type, id, data, workgroupId);\n\n            // get all the achievements the student has completed\n            var achievements = this.getAchievementsByWorkgroupId(workgroupId);\n\n            // add the achievement to the array of student completed achievements\n            achievements.push(newAchievement);\n\n            // save the new achievement to the server\n            this.saveAchievementToServer(newAchievement);\n\n            // fire an achievementCompleted event\n            this.$rootScope.$broadcast('achievementCompleted', { achievementId: achievement.id });\n        }\n    }\n\n    /**\n     * Create a listener for the node completed achievement\n     * @param achievement the achievement to listen for\n     * @return the deregister function for the listener\n     */\n    createNodeCompletedListener(achievement) {\n\n        // save this to a variable so that we can access it in the callback\n        var thisAchievementService = this;\n\n        // save the achievement to a variable so that we can access it in the callback\n        var thisAchievement = achievement;\n\n        this.debugOutput('registering ' + achievement.id);\n\n        // listen for the nodeCompleted event\n        var deregisterFunction = this.$rootScope.$on('nodeCompleted', (event, args) => {\n            /*\n             * the nodeCompleted event was fired so we will check if this\n             * achievement has been completed\n             */\n\n            var achievement = thisAchievement;\n\n            if (achievement != null) {\n                this.debugOutput('createNodeCompletedListener checking ' + achievement.id + ' completed ' + args.nodeId);\n\n                // get the id of the achievement we need to check\n                var id = achievement.id;\n\n                if (!this.isAchievementCompleted(id)) {\n                    /*\n                     * the student has not completed this achievement before\n                     * so we will now check if they have completed it\n                     */\n\n                    // check if the student has completed this node completed achievement\n                    var completed = this.checkNodeCompletedAchievement(achievement);\n\n                    if (completed) {\n                        // the student has just completed the achievement\n                        thisAchievementService.studentCompletedAchievement(achievement);\n                    }\n                }\n            }\n        });\n\n        return deregisterFunction;\n    }\n\n    /**\n     * Check if the student completed a specific achievement\n     * @param achievement an achievement\n     * @return whether the student completed the achievement\n     */\n    checkAchievement(achievement) {\n\n        var completed = false;\n\n        if (achievement != null) {\n            if (achievement.type == 'milestone' || achievement.type == 'completion') {\n                // this is a milestone or completion achievement\n                completed = this.checkNodeCompletedAchievement(achievement);\n            } else if (achievement.type == 'aggregate') {\n                // this is an aggregate achievement\n                completed = this.checkAggregateAchievement(achievement);\n            }\n        }\n\n        return completed;\n    }\n\n    /**\n     * Check if the student completed a node completed achievement\n     * @param achievement a node completed achievement\n     * @return whether the student completed the node completed achievement\n     */\n    checkNodeCompletedAchievement(achievement) {\n\n        var completed = false;\n\n        if (achievement != null) {\n\n            // get the achievement params\n            var params = achievement.params;\n\n            if (params != null) {\n\n                // get the node ids that need to be completed\n                var nodeIds = params.nodeIds;\n\n                /*\n                 * loop through all the node ids that need to be completed\n                 * for the achievement\n                 */\n                for (var n = 0; n < nodeIds.length; n++) {\n                    var nodeId = nodeIds[n];\n\n                    if (n == 0) {\n                        // this is the first node id\n                        completed = this.StudentDataService.isCompleted(nodeId);\n                    } else {\n                        /*\n                         * this is a node id after the first node id so\n                         * we will use an and conditional\n                         */\n                        completed = completed && this.StudentDataService.isCompleted(nodeId);\n                    }\n                }\n            }\n        }\n\n        return completed;\n    }\n\n    /**\n     * Create a listener for an aggregate achievement\n     * @param achievement the project achievement\n     * @return the deregister function for the listener\n     */\n    createAggregateAchievementListener(achievement) {\n\n        var thisAchievementService = this;\n        var thisAchievement = achievement;\n\n        this.debugOutput('registering ' + achievement.id);\n\n        // listen for the achievementCompleted event\n        var deregisterFunction = this.$rootScope.$on('achievementCompleted', (event, args) => {\n            /*\n             * the achievementCompleted event was fired so we will check if this\n             * achievement has been completed\n             */\n\n            var achievement = thisAchievement;\n\n            if (achievement != null) {\n                this.debugOutput('createAggregateAchievementListener checking ' + achievement.id + ' completed ' + args.achievementId);\n\n                // get the id of the achievement we need to check\n                var id = achievement.id;\n\n                // the achievement that was just completed\n                var achievementId = args.achievementId;\n\n                if (!this.isAchievementCompleted(id)) {\n                    /*\n                     * the student has not completed this achievement before\n                     * so we will now check if they have completed it\n                     */\n\n                    // check if the student has completed this aggregate achievement\n                    var completed = this.checkAggregateAchievement(achievement);\n\n                    if (completed) {\n                        // the student has just completed the achievement\n                        thisAchievementService.studentCompletedAchievement(achievement);\n                    }\n                }\n            }\n        });\n\n        return deregisterFunction;\n    }\n\n    /**\n     * Check if the student completed a aggregate achievement\n     * @param achievement an aggregate achievement\n     * @return whether the student completed the aggregate achievement\n     */\n    checkAggregateAchievement(achievement) {\n\n        var completed = false;\n\n        if (achievement != null) {\n\n            // get the achievement params\n            var params = achievement.params;\n\n            if (params != null) {\n\n                // get the achievement ids that need to be completed\n                var achievementIds = params.achievementIds;\n\n                var completed = false;\n\n                /*\n                 * loop through all the achievement ids that need to be\n                 * completed\n                 */\n                for (var a = 0; a < achievementIds.length; a++) {\n                    var tempAchievementId = achievementIds[a];\n\n                    if (a == 0) {\n                        // this is the first node id\n                        completed = this.isAchievementCompleted(tempAchievementId);\n                    } else {\n                        /*\n                         * this is a node id after the first node id so\n                         * we will use an and conditional\n                         */\n                        completed = completed && this.isAchievementCompleted(tempAchievementId);\n                    }\n                }\n            }\n        }\n\n        return completed;\n    }\n\n    /**\n     * Get achievements for a workgroup id\n     * @param workgroupId the workgroup id\n     * @return an array of achievements completed by the workgroup\n     */\n    getAchievementsByWorkgroupId(workgroupId = null) {\n\n        var achievements = [];\n\n        if (workgroupId == null) {\n            // get the signed in workgroup id\n            workgroupId = this.ConfigService.getWorkgroupId();\n        }\n\n        if (this.achievementsByWorkgroupId[workgroupId] == null) {\n            /*\n             * this workgroup does not have an array of achievements yet so we\n             * will make it\n             */\n            this.achievementsByWorkgroupId[workgroupId] = [];\n            achievements = this.achievementsByWorkgroupId[workgroupId];\n        } else if (this.achievementsByWorkgroupId[workgroupId] != null) {\n            // this workgroup has an array of achievements\n            achievements = this.achievementsByWorkgroupId[workgroupId];\n        }\n\n        return achievements;\n    }\n\n    /**\n     * Get an array of student achievements for a given achievement id\n     * @param achievementId a 10 character achievement id\n     * @return an array of student achievements. student achievements are\n     * created when a workgroup completes an achievement.\n     */\n    getAchievementsByAchievementId(achievementId) {\n\n        var achievementsByAchievementId = [];\n\n        if (achievementId != null) {\n\n            // get all the workgroup ids\n            var workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n            if (workgroupIds != null) {\n\n                // loop through all the workgroup ids\n                for (var w = 0; w < workgroupIds.length; w++) {\n\n                    var workgroupId = workgroupIds[w];\n\n                    if (workgroupId != null) {\n\n                        // get all the achievements this workgroup has completed\n                        var achievementsForWorkgroup = this.achievementsByWorkgroupId[workgroupId];\n\n                        if (achievementsForWorkgroup != null) {\n\n                            // loop through all the achievements this workgroup has completed\n                            for (var a = achievementsForWorkgroup.length - 1; a >= 0; a--) {\n                                var achievement = achievementsForWorkgroup[a];\n\n                                if (achievement != null && achievement.data != null) {\n                                    if (achievementId == achievement.data.id) {\n                                        /*\n                                         * the workgroup has completed the achievement we are\n                                         * looking for\n                                         */\n                                        achievementsByAchievementId.push(achievement);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return achievementsByAchievementId;\n    }\n\n    /**\n     * Get a mapping from achievement id to array of student achievements\n     * @param achievementId the achievement id\n     * @return a mapping from achievement id to array of student achievements\n     * student achievements are created when a workgroup completes an achievement.\n     */\n    getAchievementIdToAchievementsMappings(achievementId) {\n        var achievementIdToAchievements = {};\n\n        // get all the project achievements\n        var projectAchievements = this.ProjectService.getAchievementItems();\n\n        // get the workgroup ids\n        var workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n        if (projectAchievements != null) {\n\n            // loop through all the project achievements\n            for (var a = 0; a < projectAchievements.length; a++) {\n                var projectAchievement = projectAchievements[a];\n\n                if (projectAchievement != null) {\n\n                    // get an array of student achievements for the given achievement id\n                    var studentAchievements = this.getAchievementsByAchievementId(projectAchievement.id);\n\n                    // add the array to the mapping\n                    achievementIdToAchievements[projectAchievement.id] = studentAchievements;\n                }\n            }\n        }\n\n        return achievementIdToAchievements;\n    }\n\n    /**\n     * Get an available achievement id\n     * @return an achievement id that isn't being used\n     */\n    getAvailableAchievementId() {\n\n        var id = null;\n\n        while (id == null) {\n\n            // generate a 10 character id\n            var id = this.UtilService.generateKey(10);\n\n            // check to make sure the id isn't already being used\n\n            var achievements = this.ProjectService.getAchievementItems();\n\n            // loop through all the achievements\n            for (var a = 0; a < achievements.length; a++) {\n                var achievement = achievements[a];\n\n                if (achievement != null) {\n                    if (id == achievement.id) {\n                        /*\n                         * the id is already being used so we need to find\n                         * a different one\n                         */\n                        id = null;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return id;\n    }\n}\n\nAchievementService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default AchievementService;\n"]}