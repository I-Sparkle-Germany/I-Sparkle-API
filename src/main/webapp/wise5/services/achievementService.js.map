{"version":3,"sources":["achievementService.es6"],"names":["AchievementService","$http","$q","$rootScope","ConfigService","ProjectService","StudentDataService","UtilService","achievementsByWorkgroupId","debug","loadAchievements","str","console","log","workgroupId","type","isPreview","getWorkgroupId","Promise","resolve","config","method","url","getAchievementsURL","params","getMode","periodId","getPeriodId","then","response","achievements","data","achievement","addOrUpdateAchievement","projectAchievement","getAchievementByAchievementId","achievementId","completed","deregisterFunction","debugOutput","id","projectAchievements","getAchievementItems","isAchievementCompleted","checkAchievement","studentCompletedAchievement","achievementWorkgroupId","Array","found","w","length","a","push","deferred","defer","promise","headers","angular","toJson","$","param","result","fromJson","getAchievements","isEnabled","projectAchievementItems","items","createNodeCompletedListener","createAggregateAchievementListener","getAchievementsByWorkgroupId","isVisible","alert","name","achievementCopy","makeCopyOfJSONObject","newAchievement","createNewAchievement","saveAchievementToServer","$broadcast","thisAchievementService","thisAchievement","$on","event","args","nodeId","checkNodeCompletedAchievement","checkAggregateAchievement","nodeIds","n","isCompleted","achievementIds","tempAchievementId","achievementsByAchievementId","workgroupIds","getClassmateWorkgroupIds","achievementsForWorkgroup","achievementIdToAchievements","studentAchievements","getAchievementsByAchievementId","generateKey","$inject"],"mappings":"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","file":"achievementService.js","sourcesContent":["class AchievementService {\n  constructor(\n      $http,\n      $q,\n      $rootScope,\n      ConfigService,\n      ProjectService,\n      StudentDataService,\n      UtilService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.achievementsByWorkgroupId = {};  // an object of achievements, where key is workgroupId and value is the array of achievements for the workgroup.\n\n    // whether to print debug output to the console\n    this.debug = false;\n\n    this.loadAchievements();\n  }\n\n  /**\n   * Output the string to the console if debug=true\n   * @param str the string to output to the console\n   */\n  debugOutput(str) {\n    if (this.debug) {\n      console.log(str);\n    }\n  }\n\n  /**\n   * Retrieves achievements from the server\n   */\n  retrieveAchievements(workgroupId = null, type = null) {\n    if (this.ConfigService.isPreview()) {\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      this.achievementsByWorkgroupId[workgroupId] = [];\n      return Promise.resolve(this.achievementsByWorkgroupId);\n    } else {\n      const config = {\n        method: 'GET',\n        url: this.ConfigService.getAchievementsURL(),\n        params: {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        config.params.workgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n      if (type != null) {\n        config.params.type = type;\n      }\n\n      \n      return this.$http(config).then((response) => {\n        let achievements = response.data;\n\n        if (achievements != null) {\n          for (let achievement of achievements) {\n            this.addOrUpdateAchievement(achievement);\n\n            if (this.ConfigService.getMode() == 'studentRun') {\n              const projectAchievement = this.ProjectService\n                  .getAchievementByAchievementId(achievement.achievementId);\n              if (projectAchievement != null) {\n\n                /*\n                 * set the completed field to true in case we ever\n                 * need to easily see which achievements the student\n                 * has completed\n                 */\n                projectAchievement.completed = true;\n\n                if (projectAchievement.deregisterFunction != null) {\n                  /*\n                   * the student has completed this achievement\n                   * so we no longer need to listen for it\n                   */\n                  projectAchievement.deregisterFunction();\n                  this.debugOutput('deregistering ' + projectAchievement.id);\n                }\n              }\n            }\n          }\n\n          if (this.ConfigService.getMode() == 'studentRun') {\n            /*\n             * Loop through all the project achievements and\n             * re-evaluate whether the student has completed each.\n             * This is to make sure students never get stuck in a\n             * state where they did everything required to complete\n             * a certain achievement but some error or bug occurred\n             * which prevented their student achievement from being\n             * saved and then they end up never being able to\n             * complete that achievement. We will avoid this\n             * situation by re-evaluating all the project\n             * achievements each time the student loads the VLE.\n             */\n\n            const projectAchievements =\n                this.ProjectService.getAchievementItems();\n            if (projectAchievements != null) {\n              for (let projectAchievement of projectAchievements) {\n                if (projectAchievement != null) {\n\n                  if (!this.isAchievementCompleted(projectAchievement.id)) {\n                    /*\n                     * the student has not completed this project achievement\n                     * yet\n                     */\n\n                    if (this.checkAchievement(projectAchievement)) {\n                      /*\n                       * the student has satisfied everything that is\n                       * required of the achievement\n                       */\n                      this.studentCompletedAchievement(projectAchievement);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          this.achievementsByWorkgroupId = {};\n        }\n\n        return this.achievementsByWorkgroupId;\n      });\n    }\n  }\n\n  /**\n   * Add Achievement to local bookkeeping\n   * @param achievement the Achievement to add or update\n   */\n  addOrUpdateAchievement(achievement) {\n    if (achievement != null) {\n      let achievementWorkgroupId = achievement.workgroupId;\n\n      /*\n       * initialize the workgroup's array of achievements if it does\n       * not exist yet\n       */\n      if (this.achievementsByWorkgroupId[achievementWorkgroupId] == null) {\n        this.achievementsByWorkgroupId[achievementWorkgroupId] = new Array();\n      }\n\n      let achievements = this.achievementsByWorkgroupId[achievementWorkgroupId];\n      let found = false;\n\n      for (let w = 0; w < achievements.length; w++) {\n        let a = achievements[w];\n\n        if (a.achievementId != null && a.achievementId === achievement.achievementId &&\n          a.workgroupId != null && a.workgroupId === achievement.workgroupId) {\n          /*\n           * the achievement 10 character alphanumeric id matches and\n           * the workgroup id matches so we will update it\n           */\n          achievements[w] = achievement;\n          found = true;  // remember this so we don't insert later.\n          break;\n        }\n      }\n\n      if (!found) {\n        // we did not find the achievement so we will add it to the array\n        achievements.push(achievement);\n      }\n    }\n  }\n\n  /**\n   * Saves the achievement for the logged-in user\n   * @param achievement\n   */\n  saveAchievementToServer(achievement) {\n    if (this.ConfigService.isPreview()) {\n      // if we're in preview, don't make any request to the server and resolve\n      // the promise right away\n      let deferred = this.$q.defer();\n      deferred.resolve(achievement);\n      return deferred.promise;\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getAchievementsURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      let params = {\n        achievementId: achievement.achievementId,\n        workgroupId: achievement.workgroupId,\n        type: achievement.type\n      };\n\n      if (achievement.id != null) {\n        params.id = achievement.id;\n      }\n      if (achievement.data != null) {\n        params.data = angular.toJson(achievement.data);\n      }\n\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let achievement = result.data;\n        if (achievement.data != null) {\n          achievement.data = angular.fromJson(achievement.data);\n        }\n        this.addOrUpdateAchievement(achievement);\n        return achievement;\n      })\n    }\n  }\n\n  /**\n   * Creates a new achievement object\n   * @param type type of achievement [\"completion\", \"milestone\", etc]\n   * @param achievementId id of achievement in project content\n   * @param data other extra information about this achievement\n   * @param workgroupId id of workgroup whom this achievement is for\n   * @returns newly created achievement object\n   */\n  createNewAchievement(type, achievementId, data = null, workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    return {\n      id: null,\n      type: type,\n      achievementId: achievementId,\n      workgroupId: workgroupId,\n      data: data\n    };\n  }\n\n  /**\n   * Load the achievements by creating listeners for the appropriate events\n   */\n  loadAchievements() {\n    const projectAchievements = this.ProjectService.getAchievements();\n    if (projectAchievements != null) {\n      if (projectAchievements.isEnabled) {\n        const projectAchievementItems = projectAchievements.items;\n        if (projectAchievementItems != null) {\n          for (let projectAchievement of projectAchievementItems) {\n            if (projectAchievement != null) {\n              let deregisterFunction = null;\n\n              // create a listener for the achievement\n              if (projectAchievement.type === 'milestone' || projectAchievement.type === 'completion') {\n                deregisterFunction = this.createNodeCompletedListener(projectAchievement);\n              } else if (projectAchievement.type === 'aggregate') {\n                deregisterFunction = this.createAggregateAchievementListener(projectAchievement);\n              }\n\n              /*\n               * set the deregisterFunction into the project\n               * achievement so that we can deregister the\n               * listener after the student has completed the\n               * achievement\n               */\n              projectAchievement.deregisterFunction = deregisterFunction;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the student has completed the achievement\n   * @param achievementId\n   * @return whether the student has completed the achievement\n   */\n  isAchievementCompleted(achievementId) {\n    if (achievementId != null) {\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const achievements = this.getAchievementsByWorkgroupId(workgroupId);\n      if (achievements != null) {\n        for (let achievement of achievements) {\n          if (achievement != null) {\n            if (achievement.achievementId === achievementId) {\n              /*\n               * we have found the achievement with the matching\n               * achievement id which means the student has\n               * completed the achievement\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * The student has just completed an achievement\n   * @param achievement the achievement the student completed\n   */\n  studentCompletedAchievement(achievement) {\n    if (achievement != null) {\n      if (achievement.isVisible) {\n        /*\n         * this is a visible achievement so we will display a message\n         * to the student\n         */\n        alert(`Congratulations you completed: ${achievement.name}`);\n        console.log(`Congratulations you completed: ${achievement.name}`);\n      }\n\n      const projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.id);\n      if (projectAchievement != null && projectAchievement.deregisterFunction != null) {\n        /*\n         * deregister the achievement listener now that the student has\n         * completed the achievement\n         */\n        projectAchievement.deregisterFunction();\n        this.debugOutput('deregistering ' + projectAchievement.id);\n      }\n\n      /*\n       * create a copy of the achievement to make sure we don't cause\n       * any referencing problems in the future\n       */\n      const achievementCopy = this.UtilService.makeCopyOfJSONObject(achievement);\n\n      const workgroupId = this.ConfigService.getWorkgroupId();\n\n      const type = achievementCopy.type;\n      const id = achievementCopy.id;\n      const data = achievementCopy;\n      const newAchievement = this.createNewAchievement(type, id, data, workgroupId);\n      const achievements = this.getAchievementsByWorkgroupId(workgroupId);\n      achievements.push(newAchievement);\n\n      // save the new achievement to the server\n      this.saveAchievementToServer(newAchievement);\n\n      // fire an achievementCompleted event\n      this.$rootScope.$broadcast('achievementCompleted', { achievementId: achievementCopy.id });\n    }\n  }\n\n  /**\n   * Create a listener for the node completed achievement\n   * @param achievement the achievement to listen for\n   * @return the deregister function for the listener\n   */\n  createNodeCompletedListener(achievement) {\n    // save this to a variable so that we can access it in the callback\n    const thisAchievementService = this;\n\n    // save the achievement to a variable so that we can access it in the callback\n    const thisAchievement = achievement;\n\n    this.debugOutput('registering ' + achievement.id);\n\n    const deregisterFunction = this.$rootScope.$on('nodeCompleted', (event, args) => {\n      /*\n       * the nodeCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n      const achievement = thisAchievement;\n      if (achievement != null) {\n        this.debugOutput('createNodeCompletedListener checking ' + achievement.id + ' completed ' + args.nodeId);\n        const id = achievement.id;\n\n        if (!this.isAchievementCompleted(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n          // check if the student has completed this node completed achievement\n          const completed = this.checkNodeCompletedAchievement(achievement);\n          if (completed) {\n            thisAchievementService.studentCompletedAchievement(achievement);\n          }\n        }\n      }\n    });\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a specific achievement\n   * @param achievement an achievement\n   * @return whether the student completed the achievement\n   */\n  checkAchievement(achievement) {\n    let completed = false;\n    if (achievement != null) {\n      if (achievement.type === 'milestone' || achievement.type === 'completion') {\n        completed = this.checkNodeCompletedAchievement(achievement);\n      } else if (achievement.type === 'aggregate') {\n        completed = this.checkAggregateAchievement(achievement);\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Check if the student completed a node completed achievement\n   * @param achievement a node completed achievement\n   * @return whether the student completed the node completed achievement\n   */\n  checkNodeCompletedAchievement(achievement) {\n    let completed = false;\n    if (achievement != null) {\n      const params = achievement.params;\n      if (params != null) {\n        const nodeIds = params.nodeIds;\n        for (let n = 0; n < nodeIds.length; n++) {\n          const nodeId = nodeIds[n];\n          if (n === 0) {\n            // this is the first node id\n            completed = this.StudentDataService.isCompleted(nodeId);\n          } else {\n            /*\n             * this is a node id after the first node id so\n             * we will use an and conditional\n             */\n            completed = completed && this.StudentDataService.isCompleted(nodeId);\n          }\n        }\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Create a listener for an aggregate achievement\n   * @param achievement the project achievement\n   * @return the deregister function for the listener\n   */\n  createAggregateAchievementListener(achievement) {\n    const thisAchievementService = this;\n    const thisAchievement = achievement;\n    this.debugOutput('registering ' + achievement.id);\n    const deregisterFunction = this.$rootScope.$on('achievementCompleted', (event, args) => {\n      /*\n       * the achievementCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n      const achievement = thisAchievement;\n      if (achievement != null) {\n        this.debugOutput('createAggregateAchievementListener checking ' + achievement.id + ' completed ' + args.achievementId);\n\n        const id = achievement.id;\n        const achievementId = args.achievementId;\n\n        if (!this.isAchievementCompleted(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n\n          const completed = this.checkAggregateAchievement(achievement);\n          if (completed) {\n            thisAchievementService.studentCompletedAchievement(achievement);\n          }\n        }\n      }\n    });\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a aggregate achievement\n   * @param achievement an aggregate achievement\n   * @return whether the student completed the aggregate achievement\n   */\n  checkAggregateAchievement(achievement) {\n    let completed = false;\n    if (achievement != null) {\n      const params = achievement.params;\n      if (params != null) {\n        const achievementIds = params.achievementIds;\n        for (let a = 0; a < achievementIds.length; a++) {\n          const tempAchievementId = achievementIds[a];\n          if (a === 0) {\n            // this is the first node id\n            completed = this.isAchievementCompleted(tempAchievementId);\n          } else {\n            /*\n             * this is a node id after the first node id so\n             * we will use an and conditional\n             */\n            completed = completed && this.isAchievementCompleted(tempAchievementId);\n          }\n        }\n      }\n    }\n    return completed;\n  }\n\n  /**\n   * Get achievements for a workgroup id\n   * @param workgroupId the workgroup id\n   * @return an array of achievements completed by the workgroup\n   */\n  getAchievementsByWorkgroupId(workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    if (this.achievementsByWorkgroupId[workgroupId] == null) {\n      /*\n       * this workgroup does not have an array of achievements yet so we\n       * will make it\n       */\n      this.achievementsByWorkgroupId[workgroupId] = [];\n      return this.achievementsByWorkgroupId[workgroupId];\n    } else if (this.achievementsByWorkgroupId[workgroupId] != null) {\n      return this.achievementsByWorkgroupId[workgroupId];\n    }\n    return [];\n  }\n\n  /**\n   * Get an array of student achievements for a given achievement id\n   * @param achievementId a 10 character achievement id\n   * @return an array of student achievements. student achievements are\n   * created when a workgroup completes an achievement.\n   */\n  getAchievementsByAchievementId(achievementId) {\n    const achievementsByAchievementId = [];\n    const workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n    for (let workgroupId of workgroupIds) {\n      const achievementsForWorkgroup = this.achievementsByWorkgroupId[workgroupId];\n      if (achievementsForWorkgroup != null) {\n        for (let a = achievementsForWorkgroup.length - 1; a >= 0; a--) {\n          const achievement = achievementsForWorkgroup[a];\n          if (achievement != null && achievement.data != null) {\n            if (achievement.data.id === achievementId) {\n              achievementsByAchievementId.push(achievement);\n            }\n          }\n        }\n      }\n    }\n    return achievementsByAchievementId;\n  }\n\n  /**\n   * Get a mapping from achievement id to array of student achievements\n   * @param achievementId the achievement id\n   * @return a mapping from achievement id to array of student achievements\n   * student achievements are created when a workgroup completes an achievement.\n   */\n  getAchievementIdToAchievementsMappings(achievementId) {\n    const achievementIdToAchievements = {};\n    const projectAchievements = this.ProjectService.getAchievementItems();\n    for (let projectAchievement of projectAchievements) {\n      if (projectAchievement != null) {\n        const studentAchievements =\n          this.getAchievementsByAchievementId(projectAchievement.id);\n        achievementIdToAchievements[projectAchievement.id] = studentAchievements;\n      }\n    }\n    return achievementIdToAchievements;\n  }\n\n  /**\n   * Get an achievement id that isn't being used\n   * @return an achievement id that isn't being used\n   */\n  getAvailableAchievementId() {\n    let id = null;\n    const achievements = this.ProjectService.getAchievementItems();\n    while (id == null) {\n      id = this.UtilService.generateKey(10);\n      for (let achievement of achievements) {\n        if (achievement.id === id) {\n          /*\n           * the id is already being used so we need to find\n           * a different one\n           */\n          id = null;\n          break;\n        }\n      }\n    }\n    return id;\n  }\n}\n\nAchievementService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AchievementService;\n"]}