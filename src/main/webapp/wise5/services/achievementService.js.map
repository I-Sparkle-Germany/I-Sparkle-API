{"version":3,"sources":["achievementService.es6"],"names":["AchievementService","$http","$q","$rootScope","ConfigService","ProjectService","StudentDataService","UtilService","achievementsByWorkgroupId","debug","loadAchievements","str","console","log","workgroupId","type","isPreview","getWorkgroupId","Promise","resolve","achievementsURL","getAchievementsURL","config","method","url","params","getMode","periodId","getPeriodId","then","response","achievements","data","achievement","addOrUpdateAchievement","projectAchievement","getAchievementByAchievementId","achievementId","completed","deregisterFunction","debugOutput","id","projectAchievements","getAchievementItems","isAchievementCompleted","checkAchievement","studentCompletedAchievement","achievementWorkgroupId","Array","found","w","length","a","push","deferred","defer","promise","headers","angular","toJson","$","param","result","fromJson","getAchievements","isEnabled","projectAchievementItems","items","createNodeCompletedListener","createAggregateAchievementListener","getAchievementsByWorkgroupId","isVisible","alert","name","makeCopyOfJSONObject","newAchievement","createNewAchievement","saveAchievementToServer","$broadcast","thisAchievementService","thisAchievement","$on","event","args","nodeId","checkNodeCompletedAchievement","checkAggregateAchievement","nodeIds","n","isCompleted","achievementIds","tempAchievementId","achievementsByAchievementId","workgroupIds","getClassmateWorkgroupIds","achievementsForWorkgroup","achievementIdToAchievements","studentAchievements","getAchievementsByAchievementId","generateKey","$inject"],"mappings":"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","file":"achievementService.js","sourcesContent":["class AchievementService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentDataService, UtilService) {\n\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.achievementsByWorkgroupId = {};  // an object of achievements, where key is workgroupId and value is the array of achievements for the workgroup.\n\n    // whether to print debug output to the console\n    this.debug = false;\n\n    // load the achievements in the project\n    this.loadAchievements();\n  }\n\n  /**\n   * Output the string to the console if debug=true\n   * @param str the string to output to the console\n   */\n  debugOutput(str) {\n    if (this.debug) {\n      console.log(str);\n    }\n  }\n\n  /**\n   * Retrieves achievements from the server\n   */\n  retrieveAchievements(workgroupId = null, type = null) {\n\n    if (this.ConfigService.isPreview()) {\n\n      // get the signed in workgroup id\n      const workgroupId = this.ConfigService.getWorkgroupId();\n\n      // initialize the achievements for the workgroup to an empty array\n      this.achievementsByWorkgroupId[workgroupId] = [];\n\n      return Promise.resolve(this.achievementsByWorkgroupId);\n    } else {\n      let achievementsURL = this.ConfigService.getAchievementsURL();\n\n      let config = {\n        method: \"GET\",\n        url: achievementsURL,\n        params: {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        // get the achievements for the logged-in workgroup\n        config.params.workgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n      if (type != null) {\n        config.params.type = type;\n      }\n\n      return this.$http(config).then((response) => {\n        let achievements = response.data;\n\n        if (achievements != null) {\n\n          // loop through all the student achievements\n          for (let achievement of achievements) {\n\n            // add the student achievement to our local data structure\n            this.addOrUpdateAchievement(achievement);\n\n            if (this.ConfigService.getMode() == 'studentRun') {\n\n              // get the project achievement object\n              const projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.achievementId);\n\n              if (projectAchievement != null) {\n\n                /*\n                 * set the completed field to true in case we ever\n                 * need to easily see which achievements the student\n                 * has completed\n                 */\n                projectAchievement.completed = true;\n\n                if (projectAchievement.deregisterFunction != null) {\n                  /*\n                   * the student has completed this achievement\n                   * so we no longer need to listen for it\n                   */\n                  projectAchievement.deregisterFunction();\n                  this.debugOutput('deregistering ' + projectAchievement.id);\n                }\n              }\n            }\n          }\n\n          if (this.ConfigService.getMode() == 'studentRun') {\n\n            /*\n             * Loop through all the project achievements and\n             * re-evaluate whether the student has completed each.\n             * This is to make sure students never get stuck in a\n             * state where they did everything required to complete\n             * a certain achievement but some error or bug occurred\n             * which prevented their student achievement from being\n             * saved and then they end up never being able to\n             * complete that achievement. We will avoid this\n             * situation by re-evaluating all the project\n             * achievements each time the student loads the VLE.\n             */\n\n            // get all the project achievements\n            const projectAchievements = this.ProjectService.getAchievementItems();\n\n            if (projectAchievements != null) {\n\n              // loop through all the project achievements\n              for (let projectAchievement of projectAchievements) {\n                if (projectAchievement != null) {\n\n                  if (!this.isAchievementCompleted(projectAchievement.id)) {\n                    /*\n                     * the student has not completed this project achievement\n                     * yet\n                     */\n\n                    if (this.checkAchievement(projectAchievement)) {\n                      /*\n                       * the student has satisfied everything that is\n                       * required of the achievement\n                       */\n                      this.studentCompletedAchievement(projectAchievement);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          this.achievementsByWorkgroupId = {};\n        }\n\n        return this.achievementsByWorkgroupId;\n      });\n    }\n  }\n\n  /**\n   * Add Achievement to local bookkeeping\n   * @param achievement the Achievement to add or update\n   */\n  addOrUpdateAchievement(achievement) {\n\n    if (achievement != null) {\n\n      // get the workgroup id\n      let achievementWorkgroupId = achievement.workgroupId;\n\n      /*\n       * initialize the workgroup's array of achievements if it does\n       * not exist yet\n       */\n      if (this.achievementsByWorkgroupId[achievementWorkgroupId] == null) {\n        this.achievementsByWorkgroupId[achievementWorkgroupId] = new Array();\n      }\n\n      // get the achievements the workgroup has completed\n      let achievements = this.achievementsByWorkgroupId[achievementWorkgroupId];\n\n      let found = false;\n\n      // loop through all the achievements this workgroup has completed\n      for (let w = 0; w < achievements.length; w++) {\n\n        // get an achievement the workgroup has compeleted\n        let a = achievements[w];\n\n        if (a.achievementId != null && a.achievementId === achievement.achievementId &&\n          a.workgroupId != null && a.workgroupId === achievement.workgroupId) {\n          /*\n           * the achievement 10 character alphanumeric id matches and\n           * the workgroup id matches so we will update it\n           */\n          achievements[w] = achievement;\n          found = true;  // remember this so we don't insert later.\n          break;\n        }\n      }\n\n      if (!found) {\n        // we did not find the achievement so we will add it to the array\n        achievements.push(achievement);\n      }\n    }\n  }\n\n  /**\n   * Saves the achievement for the logged-in user\n   * @param achievement\n   */\n  saveAchievementToServer(achievement) {\n\n    if (this.ConfigService.isPreview()) {\n      // if we're in preview, don't make any request to the server but pretend that we did\n      let deferred = this.$q.defer();\n      deferred.resolve(achievement);\n      return deferred.promise;\n\n    } else {\n\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getAchievementsURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      let params = {\n        achievementId: achievement.achievementId,\n        workgroupId: achievement.workgroupId,\n        type: achievement.type\n      };\n      if (achievement.id != null) {\n        params.id = achievement.id;\n      }\n      if (achievement.data != null) {\n        params.data = angular.toJson(achievement.data);\n      }\n\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let achievement = result.data;\n        if (achievement.data != null) {\n          // parse the data string into a JSON object\n          achievement.data = angular.fromJson(achievement.data);\n        }\n        this.addOrUpdateAchievement(achievement);\n        return achievement;\n      })\n    }\n  }\n\n  /**\n   * Creates a new achievement object\n   * @param type type of achievement [\"completion\", \"milestone\", etc]\n   * @param achievementId id of achievement in project content\n   * @param data other extra information about this achievement\n   * @param workgroupId id of workgroup whom this achievement is for\n   * @returns newly created achievement object\n   */\n  createNewAchievement(type, achievementId, data = null, workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    return {\n      id: null,\n      type: type,\n      achievementId: achievementId,\n      workgroupId: workgroupId,\n      data: data\n    };\n  }\n\n  /**\n   * Load the achievements by creating listeners for the appropriate events\n   */\n  loadAchievements() {\n\n    const projectAchievements = this.ProjectService.getAchievements();\n\n    if (projectAchievements != null) {\n      if (projectAchievements.isEnabled) {\n\n        // get all the achievements in the project\n        const projectAchievementItems = projectAchievements.items;\n\n        if (projectAchievementItems != null) {\n\n          // loop through all the achievements in the project\n          for (let projectAchievement of projectAchievementItems) {\n\n            if (projectAchievement != null) {\n\n              let deregisterFunction = null;\n\n              // create a listener for the achievement\n              if (projectAchievement.type == 'milestone' || projectAchievement.type == 'completion') {\n                deregisterFunction = this.createNodeCompletedListener(projectAchievement);\n              } else if (projectAchievement.type == 'aggregate') {\n                deregisterFunction = this.createAggregateAchievementListener(projectAchievement);\n              }\n\n              /*\n               * set the deregisterFunction into the project\n               * achievement so that we can deregister the\n               * listener after the student has completed the\n               * achievement\n               */\n              projectAchievement.deregisterFunction = deregisterFunction;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the student has completed the achievement\n   * @param achievementId\n   * @return whether the student has completed the achievement\n   */\n  isAchievementCompleted(achievementId) {\n\n    if (achievementId != null) {\n\n      // get the student workgroup id\n      const workgroupId = this.ConfigService.getWorkgroupId();\n\n      // get all the achievements the student has completed\n      const achievements = this.getAchievementsByWorkgroupId(workgroupId);\n\n      if (achievements != null) {\n\n        // loop through all the achievements the student has completed\n        for (let achievement of achievements) {\n          if (achievement != null) {\n            if (achievement.achievementId == achievementId) {\n              /*\n               * we have found the achievement with the matching\n               * achievement id which means the student has\n               * completed the achievement\n               */\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * The student has just completed an achievement\n   * @param achievement the achievement the student completed\n   */\n  studentCompletedAchievement(achievement) {\n\n    if (achievement != null) {\n\n      if (achievement.isVisible == true) {\n        /*\n         * this is a visible achievement so we will display a message\n         * to the student\n         */\n        alert(\"Congratulations you completed: \" + achievement.name);\n        console.log(\"Congratulations you completed: \" + achievement.name);\n      }\n\n      // get the project achievement object\n      const projectAchievement = this.ProjectService.getAchievementByAchievementId(achievement.id);\n\n      if (projectAchievement != null && projectAchievement.deregisterFunction != null) {\n        /*\n         * deregister the achievement listener now that the student has\n         * completed the achievement\n         */\n        projectAchievement.deregisterFunction();\n        this.debugOutput('deregistering ' + projectAchievement.id);\n      }\n\n      /*\n       * create a copy of the achievement to make sure we don't cause\n       * any referencing problems in the future\n       */\n      const achievement = this.UtilService.makeCopyOfJSONObject(achievement);\n\n      // get the student workgroup id\n      const workgroupId = this.ConfigService.getWorkgroupId();\n\n      // get the parameters for creating an achievement\n      const type = achievement.type;\n      const id = achievement.id;\n      const data = achievement;\n\n      // create the student achievement\n      const newAchievement = this.createNewAchievement(type, id, data, workgroupId);\n\n      // get all the achievements the student has completed\n      const achievements = this.getAchievementsByWorkgroupId(workgroupId);\n\n      // add the achievement to the array of student completed achievements\n      achievements.push(newAchievement);\n\n      // save the new achievement to the server\n      this.saveAchievementToServer(newAchievement);\n\n      // fire an achievementCompleted event\n      this.$rootScope.$broadcast('achievementCompleted', { achievementId: achievement.id });\n    }\n  }\n\n  /**\n   * Create a listener for the node completed achievement\n   * @param achievement the achievement to listen for\n   * @return the deregister function for the listener\n   */\n  createNodeCompletedListener(achievement) {\n\n    // save this to a variable so that we can access it in the callback\n    const thisAchievementService = this;\n\n    // save the achievement to a variable so that we can access it in the callback\n    const thisAchievement = achievement;\n\n    this.debugOutput('registering ' + achievement.id);\n\n    // listen for the nodeCompleted event\n    const deregisterFunction = this.$rootScope.$on('nodeCompleted', (event, args) => {\n      /*\n       * the nodeCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n\n      const achievement = thisAchievement;\n\n      if (achievement != null) {\n        this.debugOutput('createNodeCompletedListener checking ' + achievement.id + ' completed ' + args.nodeId);\n\n        // get the id of the achievement we need to check\n        const id = achievement.id;\n\n        if (!this.isAchievementCompleted(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n\n          // check if the student has completed this node completed achievement\n          const completed = this.checkNodeCompletedAchievement(achievement);\n\n          if (completed) {\n            // the student has just completed the achievement\n            thisAchievementService.studentCompletedAchievement(achievement);\n          }\n        }\n      }\n    });\n\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a specific achievement\n   * @param achievement an achievement\n   * @return whether the student completed the achievement\n   */\n  checkAchievement(achievement) {\n\n    let completed = false;\n\n    if (achievement != null) {\n      if (achievement.type == 'milestone' || achievement.type == 'completion') {\n        // this is a milestone or completion achievement\n        completed = this.checkNodeCompletedAchievement(achievement);\n      } else if (achievement.type == 'aggregate') {\n        // this is an aggregate achievement\n        completed = this.checkAggregateAchievement(achievement);\n      }\n    }\n\n    return completed;\n  }\n\n  /**\n   * Check if the student completed a node completed achievement\n   * @param achievement a node completed achievement\n   * @return whether the student completed the node completed achievement\n   */\n  checkNodeCompletedAchievement(achievement) {\n\n    let completed = false;\n\n    if (achievement != null) {\n\n      // get the achievement params\n      const params = achievement.params;\n\n      if (params != null) {\n\n        // get the node ids that need to be completed\n        const nodeIds = params.nodeIds;\n\n        /*\n         * loop through all the node ids that need to be completed\n         * for the achievement\n         */\n        for (let n = 0; n < nodeIds.length; n++) {\n          const nodeId = nodeIds[n];\n\n          if (n == 0) {\n            // this is the first node id\n            completed = this.StudentDataService.isCompleted(nodeId);\n          } else {\n            /*\n             * this is a node id after the first node id so\n             * we will use an and conditional\n             */\n            completed = completed && this.StudentDataService.isCompleted(nodeId);\n          }\n        }\n      }\n    }\n\n    return completed;\n  }\n\n  /**\n   * Create a listener for an aggregate achievement\n   * @param achievement the project achievement\n   * @return the deregister function for the listener\n   */\n  createAggregateAchievementListener(achievement) {\n\n    const thisAchievementService = this;\n    const thisAchievement = achievement;\n\n    this.debugOutput('registering ' + achievement.id);\n\n    // listen for the achievementCompleted event\n    const deregisterFunction = this.$rootScope.$on('achievementCompleted', (event, args) => {\n      /*\n       * the achievementCompleted event was fired so we will check if this\n       * achievement has been completed\n       */\n\n      const achievement = thisAchievement;\n\n      if (achievement != null) {\n        this.debugOutput('createAggregateAchievementListener checking ' + achievement.id + ' completed ' + args.achievementId);\n\n        // get the id of the achievement we need to check\n        const id = achievement.id;\n\n        // the achievement that was just completed\n        const achievementId = args.achievementId;\n\n        if (!this.isAchievementCompleted(id)) {\n          /*\n           * the student has not completed this achievement before\n           * so we will now check if they have completed it\n           */\n\n          // check if the student has completed this aggregate achievement\n          const completed = this.checkAggregateAchievement(achievement);\n\n          if (completed) {\n            // the student has just completed the achievement\n            thisAchievementService.studentCompletedAchievement(achievement);\n          }\n        }\n      }\n    });\n\n    return deregisterFunction;\n  }\n\n  /**\n   * Check if the student completed a aggregate achievement\n   * @param achievement an aggregate achievement\n   * @return whether the student completed the aggregate achievement\n   */\n  checkAggregateAchievement(achievement) {\n\n    let completed = false;\n\n    if (achievement != null) {\n\n      // get the achievement params\n      const params = achievement.params;\n\n      if (params != null) {\n\n        // get the achievement ids that need to be completed\n        const achievementIds = params.achievementIds;\n\n        /*\n         * loop through all the achievement ids that need to be\n         * completed\n         */\n        for (let a = 0; a < achievementIds.length; a++) {\n          const tempAchievementId = achievementIds[a];\n\n          if (a == 0) {\n            // this is the first node id\n            completed = this.isAchievementCompleted(tempAchievementId);\n          } else {\n            /*\n             * this is a node id after the first node id so\n             * we will use an and conditional\n             */\n            completed = completed && this.isAchievementCompleted(tempAchievementId);\n          }\n        }\n      }\n    }\n\n    return completed;\n  }\n\n  /**\n   * Get achievements for a workgroup id\n   * @param workgroupId the workgroup id\n   * @return an array of achievements completed by the workgroup\n   */\n  getAchievementsByWorkgroupId(workgroupId = null) {\n\n    let achievements = [];\n\n    if (workgroupId == null) {\n      // get the signed in workgroup id\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n\n    if (this.achievementsByWorkgroupId[workgroupId] == null) {\n      /*\n       * this workgroup does not have an array of achievements yet so we\n       * will make it\n       */\n      this.achievementsByWorkgroupId[workgroupId] = [];\n      achievements = this.achievementsByWorkgroupId[workgroupId];\n    } else if (this.achievementsByWorkgroupId[workgroupId] != null) {\n      // this workgroup has an array of achievements\n      achievements = this.achievementsByWorkgroupId[workgroupId];\n    }\n\n    return achievements;\n  }\n\n  /**\n   * Get an array of student achievements for a given achievement id\n   * @param achievementId a 10 character achievement id\n   * @return an array of student achievements. student achievements are\n   * created when a workgroup completes an achievement.\n   */\n  getAchievementsByAchievementId(achievementId) {\n\n    const achievementsByAchievementId = [];\n\n    if (achievementId != null) {\n\n      // get all the workgroup ids\n      const workgroupIds = this.ConfigService.getClassmateWorkgroupIds();\n\n      if (workgroupIds != null) {\n\n        // loop through all the workgroup ids\n        for (let workgroupId of workgroupIds) {\n\n          if (workgroupId != null) {\n\n            // get all the achievements this workgroup has completed\n            const achievementsForWorkgroup = this.achievementsByWorkgroupId[workgroupId];\n\n            if (achievementsForWorkgroup != null) {\n\n              // loop through all the achievements this workgroup has completed\n              for (let a = achievementsForWorkgroup.length - 1; a >= 0; a--) {\n                const achievement = achievementsForWorkgroup[a];\n\n                if (achievement != null && achievement.data != null) {\n                  if (achievementId == achievement.data.id) {\n                    /*\n                     * the workgroup has completed the achievement we are\n                     * looking for\n                     */\n                    achievementsByAchievementId.push(achievement);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return achievementsByAchievementId;\n  }\n\n  /**\n   * Get a mapping from achievement id to array of student achievements\n   * @param achievementId the achievement id\n   * @return a mapping from achievement id to array of student achievements\n   * student achievements are created when a workgroup completes an achievement.\n   */\n  getAchievementIdToAchievementsMappings(achievementId) {\n    const achievementIdToAchievements = {};\n\n    // get all the project achievements\n    const projectAchievements = this.ProjectService.getAchievementItems();\n\n    if (projectAchievements != null) {\n\n      // loop through all the project achievements\n      for (let projectAchievement of projectAchievements) {\n\n        if (projectAchievement != null) {\n\n          // get an array of student achievements for the given achievement id\n          const studentAchievements = this.getAchievementsByAchievementId(projectAchievement.id);\n\n          // add the array to the mapping\n          achievementIdToAchievements[projectAchievement.id] = studentAchievements;\n        }\n      }\n    }\n\n    return achievementIdToAchievements;\n  }\n\n  /**\n   * Get an available achievement id\n   * @return an achievement id that isn't being used\n   */\n  getAvailableAchievementId() {\n\n    let id = null;\n\n    while (id == null) {\n\n      // generate a 10 character id\n      id = this.UtilService.generateKey(10);\n\n      // check to make sure the id isn't already being used\n\n      const achievements = this.ProjectService.getAchievementItems();\n\n      // loop through all the achievements\n      for (let achievement of achievements) {\n        if (achievement != null) {\n          if (id == achievement.id) {\n            /*\n             * the id is already being used so we need to find\n             * a different one\n             */\n            id = null;\n            break;\n          }\n        }\n      }\n    }\n\n    return id;\n  }\n}\n\nAchievementService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AchievementService;\n"]}