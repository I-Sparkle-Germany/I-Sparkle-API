{"version":3,"sources":["annotationService.es6"],"names":[],"mappings":"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","file":"annotationService.js","sourcesContent":["'use strict';\n\nclass AnnotationService {\n    constructor($http, $rootScope, ConfigService, UtilService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.UtilService = UtilService;\n\n        this.annotations = null;\n    }\n\n    /**\n     * Get the latest annotation with the given params\n     * @param params an object containing the params to match\n     * @returns the latest annotation that matches the params\n     */\n    getLatestAnnotation(params) {\n        var annotation = null;\n\n        if (params != null) {\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var fromWorkgroupId = params.fromWorkgroupId;\n            var toWorkgroupId = params.toWorkgroupId;\n            var type = params.type;\n\n            var annotations = this.annotations;\n\n            if (annotations != null) {\n                for (var a = annotations.length - 1; a >= 0; a--) {\n                    var tempAnnotation = annotations[a];\n\n                    if (tempAnnotation != null) {\n\n                        if (tempAnnotation.nodeId === nodeId &&\n                            tempAnnotation.componentId === componentId &&\n                            tempAnnotation.fromWorkgroupId === fromWorkgroupId &&\n                            tempAnnotation.toWorkgroupId === toWorkgroupId &&\n                            tempAnnotation.type === type) {\n\n                            annotation = tempAnnotation;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return annotation;\n    };\n\n    /**\n     * Create an annotation object\n     * @param annotationId the annotation id\n     * @param runId the run id\n     * @param periodId the period id\n     * @param fromWorkgroupId the from workgroup id\n     * @param toWorkgroupId the to workgroup id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param studentWorkId the student work id\n     * @param annotationType the annotation type\n     * @param data the data\n     * @param clientSaveTime the client save time\n     * @returns an annotation object\n     */\n    createAnnotation(\n        annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n        nodeId, componentId, studentWorkId,\n        annotationType, data, clientSaveTime) {\n\n        var annotation = {};\n        annotation.id = annotationId;\n        annotation.runId = runId;\n        annotation.periodId = periodId;\n        annotation.fromWorkgroupId = fromWorkgroupId;\n        annotation.toWorkgroupId = toWorkgroupId;\n        annotation.nodeId = nodeId;\n        annotation.componentId = componentId;\n        annotation.studentWorkId = studentWorkId;\n        annotation.type = annotationType;\n        annotation.data = data;\n        annotation.clientSaveTime = clientSaveTime;\n\n        return annotation;\n    };\n\n    /**\n     * Save the annotation to the server\n     * @param annotation the annotation object\n     * @returns a promise\n     */\n    saveAnnotation(annotation) {\n\n        if (annotation != null) {\n            var annotations = [];\n            annotations.push(annotation);\n\n            // loop through all the annotations and inject a request token\n            if (annotations != null && annotations.length > 0) {\n                for (var a = 0; a < annotations.length; a++) {\n                    var annotation = annotations[a];\n\n                    if (annotation != null) {\n                        annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                        this.addOrUpdateAnnotation(annotation);\n                    }\n                }\n            } else {\n                annotations = [];\n            }\n\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.annotations = angular.toJson(annotations);\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n                var localAnnotation = null;\n\n                if (result != null && result.data != null) {\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        // get the saved annotations\n                        var savedAnnotations = data.annotations;\n\n                        // get the local annotations\n                        var localAnnotations = this.annotations;\n\n                        if (savedAnnotations != null && localAnnotations != null) {\n\n                            // loop through all the saved annotations\n                            for (var x = 0; x < savedAnnotations.length; x++) {\n                                var savedAnnotation = savedAnnotations[x];\n\n                                // loop through all the local annotations\n                                for (var y = localAnnotations.length - 1; y >= 0; y--) {\n                                    localAnnotation = localAnnotations[y];\n\n                                    if (localAnnotation.requestToken != null &&\n                                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n\n                                        // we have found the matching local annotation so we will update it\n                                        localAnnotation.id = savedAnnotation.id;\n                                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n                                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return localAnnotation;\n            }));\n        }\n    };\n\n    /**\n     * Add or update the annotation to our local collection\n     * @param annotation the annotation object\n     */\n    addOrUpdateAnnotation(annotation) {\n\n        if (annotation != null) {\n\n            var updated = false;\n\n            var annotations = this.annotations;\n\n            if (annotations != null) {\n\n                // loop through all the local annotations\n                for (var a = annotations.length - 1; a >= 0; a--) {\n                    var tempAnnotation = annotations[a];\n\n                    if (tempAnnotation != null) {\n\n                        if (annotation.id == tempAnnotation.id &&\n                            annotation.nodeId == tempAnnotation.nodeId &&\n                            annotation.componentId == tempAnnotation.componentId &&\n                            annotation.fromWorkgroupId == tempAnnotation.fromWorkgroupId &&\n                            annotation.toWorkgroupId == tempAnnotation.toWorkgroupId &&\n                            annotation.type == tempAnnotation.type &&\n                            annotation.studentWorkId == tempAnnotation.studentWorkId &&\n                            annotation.runId == tempAnnotation.runId &&\n                            annotation.periodId == tempAnnotation.periodId) {\n\n                            // the annotation matches so we will update it\n                            tempAnnotation.data = annotation.data;\n                            tempAnnotation.clientSaveTime = annotation.clientSaveTime;\n                            tempAnnotation.serverSaveTime = annotation.serverSaveTime;\n                        }\n                    }\n                }\n            }\n\n            if (!updated) {\n                // we did not find a match so we will add it\n                annotations.push(annotation);\n            }\n        }\n    };\n\n    /**\n     * Set the annotations\n     * @param annotations the annotations aray\n     */\n    setAnnotations(annotations) {\n        this.annotations = annotations;\n    };\n}\n\nAnnotationService.$inject = ['$http', '$rootScope', 'ConfigService', 'UtilService'];\n\nexport default AnnotationService;\n"]}