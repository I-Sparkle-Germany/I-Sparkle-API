{"version":3,"sources":["annotationService.es6"],"names":["AnnotationService","$filter","$http","$q","$rootScope","ConfigService","ProjectService","UtilService","$translate","annotations","dummyAnnotationId","annotationId","annotation","id","params","nodeId","componentId","fromWorkgroupId","toWorkgroupId","type","a","length","tempAnnotation","match","constructor","Array","i","thisType","runId","periodId","studentWorkId","localNotebookItemId","notebookItemId","annotationType","data","clientSaveTime","push","requestToken","generateKey","addOrUpdateAnnotation","isPreview","savedAnnotationDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","getRunId","workgroupId","getWorkgroupId","angular","toJson","httpParams","method","url","getConfigParam","headers","$","param","then","bind","result","localAnnotation","savedAnnotations","localAnnotations","x","savedAnnotation","y","serverSaveTime","$broadcast","updated","totalScore","scoresFound","isActive","scoreFound","indexOf","value","isNaN","score","tempNodeId","Date","parse","createAnnotation","scoreType","commentType","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","getLatestNotebookItemScoreAnnotation","getLatestNotebookItemCommentAnnotation","getAnnotations","acceptAnnotation","tempComponentId","tempToWorkgroupId","tempAnnotationType","scoreAnnotation","scoreValue","allGlobalAnnotations","getAllGlobalAnnotations","globalAnnotationsByNodeIdAndComponentId","filter","globalAnnotation","globalAnnotations","isGlobal","globalAnnotationGroups","annotationGroupName","annotationGroupCreatedTime","sameGroupFound","g","globalAnnotationGroup","annotationGroupNameAndTime","annotationGroup","console","error","activeGlobalAnnotationGroups","unGlobalizedTimestamp","ag","activeGlobalAnnotationGroup","his","inActiveGlobalAnnotations","getLatestAnnotationByStudentWorkIdAndType","index","$inject"],"mappings":"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","file":"annotationService.js","sourcesContent":["'use strict';\r\n\r\nclass AnnotationService {\r\n    constructor($filter,\r\n                $http,\r\n                $q,\r\n                $rootScope,\r\n                ConfigService,\r\n                ProjectService,\r\n                UtilService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.annotations = null;\r\n\r\n        /*\r\n         * A dummy annotation id that is used in preview mode when we simulate\r\n         * saving of annotation.\r\n         */\r\n        this.dummyAnnotationId = 1;\r\n    }\r\n\r\n    /**\r\n     * Get all the annotations\r\n     */\r\n    getAnnotations() {\r\n        return this.annotations;\r\n    }\r\n\r\n    /**\r\n     * Get the annotation with the specified id, or null if not found\r\n     * @param annotationId\r\n     */\r\n    getAnnotationById(annotationId) {\r\n        for (let annotation of this.annotations) {\r\n            if (annotation.id === annotationId) {\r\n                return annotation;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the latest annotation with the given params\r\n     * @param params an object containing the params to match\r\n     * @returns the latest annotation that matches the params\r\n     */\r\n    getLatestAnnotation(params) {\r\n        let annotation = null;\r\n\r\n        if (params != null) {\r\n            let nodeId = params.nodeId;\r\n            let componentId = params.componentId;\r\n            let fromWorkgroupId = params.fromWorkgroupId;\r\n            let toWorkgroupId = params.toWorkgroupId;\r\n            let type = params.type;\r\n\r\n            let annotations = this.annotations;\r\n\r\n            if (annotations != null) {\r\n                for (let a = annotations.length - 1; a >= 0; a--) {\r\n                    let tempAnnotation = annotations[a];\r\n\r\n                    if (tempAnnotation != null) {\r\n                        let match = true;\r\n\r\n                        if (nodeId && tempAnnotation.nodeId !== nodeId) {\r\n                            match = false;\r\n                        }\r\n                        if (match && componentId && tempAnnotation.componentId !== componentId) {\r\n                            match = false;\r\n                        }\r\n                        if (match && fromWorkgroupId && tempAnnotation.fromWorkgroupId !== fromWorkgroupId) {\r\n                            match = false;\r\n                        }\r\n                        if (match && toWorkgroupId && tempAnnotation.toWorkgroupId !== toWorkgroupId) {\r\n                            match = false;\r\n                        }\r\n                        if (match && type) {\r\n                            if (type.constructor === Array) {\r\n                                for (let i = 0; i < type.length; i++) {\r\n                                    let thisType = type[i];\r\n                                    if (tempAnnotation.type !== thisType) {\r\n                                        match = false;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                if (tempAnnotation.type !== type) {\r\n                                    match = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (match) {\r\n                            annotation = tempAnnotation;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return annotation;\r\n    };\r\n\r\n    /**\r\n     * Create an annotation object\r\n     * @param annotationId the annotation id\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param fromWorkgroupId the from workgroup id\r\n     * @param toWorkgroupId the to workgroup id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param studentWorkId the student work id\r\n     * @param annotationType the annotation type\r\n     * @param data the data\r\n     * @param clientSaveTime the client save time\r\n     * @returns an annotation object\r\n     */\r\n    createAnnotation(\r\n        annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\r\n        nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\r\n        annotationType, data, clientSaveTime) {\r\n\r\n        var annotation = {};\r\n        annotation.id = annotationId;\r\n        annotation.runId = runId;\r\n        annotation.periodId = periodId;\r\n        annotation.fromWorkgroupId = fromWorkgroupId;\r\n        annotation.toWorkgroupId = toWorkgroupId;\r\n        annotation.nodeId = nodeId;\r\n        annotation.componentId = componentId;\r\n        annotation.studentWorkId = studentWorkId;\r\n        annotation.localNotebookItemId = localNotebookItemId;\r\n        annotation.notebookItemId = notebookItemId;\r\n        annotation.type = annotationType;\r\n        annotation.data = data;\r\n        annotation.clientSaveTime = clientSaveTime;\r\n\r\n        return annotation;\r\n    };\r\n\r\n    /**\r\n     * Save the annotation to the server\r\n     * @param annotation the annotation object\r\n     * @returns a promise\r\n     */\r\n    saveAnnotation(annotation) {\r\n\r\n        if (annotation != null) {\r\n            let annotations = [];\r\n            annotations.push(annotation);\r\n\r\n            // loop through all the annotations and inject a request token\r\n            if (annotations != null && annotations.length > 0) {\r\n                for (let a = 0; a < annotations.length; a++) {\r\n                    let annotation = annotations[a];\r\n\r\n                    if (annotation != null) {\r\n                        annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\r\n                        this.addOrUpdateAnnotation(annotation);\r\n                    }\r\n                }\r\n            } else {\r\n                annotations = [];\r\n            }\r\n\r\n            if (this.ConfigService.isPreview()) {\r\n                // if we're in preview, don't make any request to the server but pretend we did\r\n                let savedAnnotationDataResponse = {\r\n                    annotations: annotations\r\n                };\r\n                let annotation = this.saveToServerSuccess(savedAnnotationDataResponse);\r\n\r\n                let deferred = this.$q.defer();\r\n                deferred.resolve(annotation);\r\n                return deferred.promise;\r\n            } else {\r\n                let params = {\r\n                    runId: this.ConfigService.getRunId(),\r\n                    workgroupId: this.ConfigService.getWorkgroupId(),\r\n                    annotations: angular.toJson(annotations)\r\n                };\r\n\r\n                let httpParams = {\r\n                    method: \"POST\",\r\n                    url: this.ConfigService.getConfigParam('teacherDataURL'),\r\n                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n                    data: $.param(params)\r\n                };\r\n\r\n                return this.$http(httpParams).then(angular.bind(this, function(result) {\r\n\r\n                    let localAnnotation = null;\r\n\r\n                    if (result != null && result.data != null) {\r\n                        let savedAnnotationDataResponse = result.data;\r\n                        localAnnotation = this.saveToServerSuccess(savedAnnotationDataResponse);\r\n                    }\r\n\r\n                    return localAnnotation;\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    saveToServerSuccess(savedAnnotationDataResponse) {\r\n        let localAnnotation = null;\r\n        if (savedAnnotationDataResponse != null) {\r\n\r\n            // get the saved annotations\r\n            let savedAnnotations = savedAnnotationDataResponse.annotations;\r\n\r\n            // get the local annotations\r\n            let localAnnotations = this.annotations;\r\n\r\n            if (savedAnnotations != null && localAnnotations != null) {\r\n\r\n                // loop through all the saved annotations\r\n                for (let x = 0; x < savedAnnotations.length; x++) {\r\n                    let savedAnnotation = savedAnnotations[x];\r\n\r\n                    // loop through all the local annotations\r\n                    for (let y = localAnnotations.length - 1; y >= 0; y--) {\r\n                        localAnnotation = localAnnotations[y];\r\n\r\n                        if (localAnnotation.id != null &&\r\n                            localAnnotation.id === savedAnnotation.id) {\r\n\r\n                            // we have found the matching local annotation so we will update it\r\n                            localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\r\n                            //localAnnotation.requestToken = null; // requestToken is no longer needed.\r\n\r\n                            this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\r\n                            break;\r\n                        } else if (localAnnotation.requestToken != null &&\r\n                            localAnnotation.requestToken === savedAnnotation.requestToken) {\r\n\r\n                            // we have found the matching local annotation so we will update it\r\n                            localAnnotation.id = savedAnnotation.id;\r\n                            localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\r\n                            localAnnotation.requestToken = null; // requestToken is no longer needed.\r\n\r\n                            if (this.ConfigService.isPreview() && localAnnotation.id == null) {\r\n                                /*\r\n                                 * we are in preview mode so we will set a dummy\r\n                                 * annotation id into the annotation\r\n                                 */\r\n                                localAnnotation.id = this.dummyAnnotationId;\r\n                                /*\r\n                                 * increment the dummy annotation id for the next\r\n                                 * annotation\r\n                                 */\r\n                                this.dummyAnnotationId++;\r\n                            }\r\n\r\n                            this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return localAnnotation;\r\n    }\r\n\r\n    /**\r\n     * Add or update the annotation to our local collection\r\n     * @param annotation the annotation object\r\n     */\r\n    addOrUpdateAnnotation(annotation) {\r\n\r\n        if (annotation != null) {\r\n\r\n            var updated = false;\r\n\r\n            var annotations = this.annotations;\r\n\r\n            if (annotations != null) {\r\n\r\n                // loop through all the local annotations\r\n                for (var a = annotations.length - 1; a >= 0; a--) {\r\n                    var tempAnnotation = annotations[a];\r\n\r\n                    if (tempAnnotation != null) {\r\n\r\n                        if (annotation.id == tempAnnotation.id &&\r\n                            annotation.nodeId == tempAnnotation.nodeId &&\r\n                            annotation.componentId == tempAnnotation.componentId &&\r\n                            annotation.fromWorkgroupId == tempAnnotation.fromWorkgroupId &&\r\n                            annotation.toWorkgroupId == tempAnnotation.toWorkgroupId &&\r\n                            annotation.type == tempAnnotation.type &&\r\n                            annotation.studentWorkId == tempAnnotation.studentWorkId &&\r\n                            annotation.runId == tempAnnotation.runId &&\r\n                            annotation.periodId == tempAnnotation.periodId) {\r\n\r\n                            // the annotation matches so we will update it\r\n                            tempAnnotation.data = annotation.data;\r\n                            tempAnnotation.clientSaveTime = annotation.clientSaveTime;\r\n                            tempAnnotation.serverSaveTime = annotation.serverSaveTime;\r\n                            updated = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!updated) {\r\n                // we did not find a match so we will add it\r\n                annotations.push(annotation);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the annotations\r\n     * @param annotations the annotations aray\r\n     */\r\n    setAnnotations(annotations) {\r\n        this.annotations = annotations;\r\n    };\r\n\r\n    /**\r\n     * Get the total score for a workgroup\r\n     * @param annotations an array of annotations\r\n     * @param workgroupId the workgroup id\r\n     */\r\n    getTotalScore(annotations, workgroupId) {\r\n\r\n        var totalScore = 0;\r\n\r\n        var scoresFound = [];\r\n\r\n        if (annotations != null && workgroupId != null) {\r\n            // loop through all the annotations from newest to oldest\r\n            for (var a = annotations.length - 1; a >= 0; a--) {\r\n\r\n                // get an annotation\r\n                var annotation = annotations[a];\r\n\r\n                // check that the annotation is for the workgroup id we are looking for\r\n                if (annotation != null && annotation.toWorkgroupId == workgroupId) {\r\n\r\n                    // check that the annotation is a score annotation\r\n                    if (annotation.type === 'score' || annotation.type === \"autoScore\") {\r\n\r\n                        var nodeId = annotation.nodeId;\r\n                        var componentId = annotation.componentId;\r\n                        var data = annotation.data;\r\n\r\n                        // make sure the annotation is for an active component\r\n                        if (this.ProjectService.isActive(nodeId, componentId)) {\r\n\r\n                            var scoreFound = nodeId + '-' + componentId;\r\n\r\n                            // check if we have obtained a score from this component already\r\n                            if (scoresFound.indexOf(scoreFound) == -1) {\r\n                                // we have not obtained a score from this component yet\r\n\r\n                                if (data != null) {\r\n                                    var value = data.value;\r\n\r\n                                    if (!isNaN(value)) {\r\n\r\n                                        if (totalScore == null) {\r\n                                            totalScore = value;\r\n                                        } else {\r\n                                            totalScore += value;\r\n                                        }\r\n\r\n                                        /*\r\n                                         * remember that we have found a score for this component\r\n                                         * so that we don't double count it if the teacher scored\r\n                                         * the component more than once\r\n                                         */\r\n                                        scoresFound.push(scoreFound);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalScore;\r\n    }\r\n\r\n    /**\r\n     * Get the score for a workgroup for a node\r\n     * @param workgroupId the workgroup id\r\n     * @param nodeId the node id\r\n     * @returns the score for a workgroup for a node\r\n     */\r\n    getScore(workgroupId, nodeId) {\r\n\r\n        var score = null;\r\n\r\n        /*\r\n         * an array to keep track of the components that we have obtained a\r\n         * score for. we do not want to double count components if the student\r\n         * has received a score multiple times for a node from the teacher.\r\n         */\r\n        var scoresFound = [];\r\n\r\n        // get all the annotations\r\n        var annotations = this.annotations;\r\n\r\n        if (workgroupId != null && nodeId != null) {\r\n            // loop through all the annotations from newest to oldest\r\n            for (var a = annotations.length - 1; a >= 0; a--) {\r\n\r\n                // get an annotation\r\n                var annotation = annotations[a];\r\n\r\n                // check that the annotation is for the workgroup id we are looking for\r\n                if (annotation != null && annotation.toWorkgroupId == workgroupId) {\r\n\r\n                    // check that the annotation is a score annotation\r\n                    if (annotation.type === 'score' || annotation.type === 'autoScore') {\r\n\r\n                        var tempNodeId = annotation.nodeId;\r\n\r\n                        // check that the annotation is for the node we are looking for\r\n                        if (nodeId == tempNodeId) {\r\n                            var componentId = annotation.componentId;\r\n                            var data = annotation.data;\r\n\r\n                            var scoreFound = tempNodeId + '-' + componentId;\r\n\r\n                            // check if we have obtained a score from this component already\r\n                            if (scoresFound.indexOf(scoreFound) == -1) {\r\n                                // we have not obtained a score from this component yet\r\n\r\n                                if (data != null) {\r\n                                    var value = data.value;\r\n\r\n                                    if (!isNaN(value)) {\r\n\r\n                                        if (score == null) {\r\n                                            score = value;\r\n                                        } else {\r\n                                            score += value;\r\n                                        }\r\n\r\n                                        /*\r\n                                         * remember that we have found a score for this component\r\n                                         * so that we don't double count it if the teacher scored\r\n                                         * the component more than once\r\n                                         */\r\n                                        scoresFound.push(scoreFound);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return score;\r\n    }\r\n\r\n    /**\r\n     * Create an auto score annotation\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param toWorkgroupId the student workgroup id\r\n     * @param data the annotation data\r\n     * @returns the auto score annotation\r\n     */\r\n    createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\r\n        var annotationId = null;\r\n        var fromWorkgroupId = null;\r\n        var studentWorkId = null;\r\n        var localNotebookItemId = null;\r\n        var notebookItemId = null;\r\n        var annotationType = 'autoScore';\r\n        var clientSaveTime = Date.parse(new Date());\r\n\r\n        var annotation = this.createAnnotation(\r\n            annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\r\n            nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\r\n            annotationType, data, clientSaveTime\r\n        );\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Create an auto comment annotation\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param toWorkgroupId the student workgroup id\r\n     * @param data the annotation data\r\n     * @returns the auto comment annotation\r\n     */\r\n    createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\r\n        var annotationId = null;\r\n        var fromWorkgroupId = null;\r\n        var studentWorkId = null;\r\n        var localNotebookItemId = null;\r\n        var notebookItemId = null;\r\n        var annotationType = 'autoComment';\r\n        var clientSaveTime = Date.parse(new Date());\r\n\r\n        var annotation = this.createAnnotation(\r\n            annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\r\n            nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\r\n            annotationType, data, clientSaveTime\r\n        );\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Create an auto comment annotation\r\n     * @param runId the run id\r\n     * @param periodId the period id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param fromWorkgroupId the teacher workgroup id\r\n     * @param toWorkgroupId the student workgroup id\r\n     * @param studentWorkId the component state id\r\n     * @param data the annotation data\r\n     * @returns the inappropriate flag annotation\r\n     */\r\n    createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data) {\r\n        var annotationId = null;\r\n        var localNotebookItemId = null;\r\n        var notebookItemId = null;\r\n        var annotationType = 'inappropriateFlag';\r\n        var clientSaveTime = Date.parse(new Date());\r\n\r\n        var annotation = this.createAnnotation(\r\n            annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\r\n            nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\r\n            annotationType, data, clientSaveTime\r\n        );\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Get the latest annotations for a given component (as an object)\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param workgroupId the workgroup id\r\n     * @param scoreType (optional) the type of score\r\n     * e.g.\r\n     * 'autoScore' for auto graded score\r\n     * 'score' for teacher graded score\r\n     * 'any' for auto graded score or teacher graded score\r\n     * @param commentType (optional) the type of comment\r\n     * e.g.\r\n     * 'autoComment' for auto graded comment\r\n     * 'comment' for teacher graded comment\r\n     * 'any' for auto graded comment or teacher graded comment\r\n     * @return object containing the component's latest score and comment annotations\r\n     */\r\n    getLatestComponentAnnotations(nodeId, componentId, workgroupId, scoreType, commentType) {\r\n        let latestScoreAnnotation = null;\r\n        let latestCommentAnnotation = null;\r\n\r\n        // get the latest score annotation for this component\r\n        latestScoreAnnotation = this.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\r\n\r\n        // get the latest comment annotation for this component\r\n        latestCommentAnnotation = this.getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType);\r\n\r\n        return {\r\n            'score': latestScoreAnnotation,\r\n            'comment': latestCommentAnnotation\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the latest annotations for a given notebook item (as an object)\r\n     * @param workgroupId the workgroup id that did the notebook\r\n     * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\r\n     */\r\n    getLatestNotebookItemAnnotations(workgroupId, localNotebookItemId) {\r\n        let latestScoreAnnotation = null;\r\n        let latestCommentAnnotation = null;\r\n\r\n        // get the latest score annotation for this component\r\n        latestScoreAnnotation = this.getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId);\r\n\r\n        // get the latest comment annotation for this component\r\n        latestCommentAnnotation = this.getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId);\r\n\r\n        return {\r\n            'score': latestScoreAnnotation,\r\n            'comment': latestCommentAnnotation\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the latest score annotation for this workgroup and localNotebookItemId, or null if not found\r\n     * @param workgroupId the workgroup id that did the notebook\r\n     * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\r\n     */\r\n    getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId) {\r\n\r\n        let annotations = this.getAnnotations();\r\n\r\n        // loop through all the annotations from newest to oldest\r\n        for (let a = annotations.length - 1; a >= 0; a--) {\r\n            let annotation = annotations[a];\r\n\r\n            if (annotation != null && annotation.type === \"score\" && annotation.notebookItemId != null &&\r\n                annotation.localNotebookItemId === localNotebookItemId) {\r\n                return annotation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the latest comment annotation for this workgroup and localNotebookItemId, or null if not found\r\n     * @param workgroupId the workgroup id that did the notebook\r\n     * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\r\n     */\r\n    getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId) {\r\n\r\n        let annotations = this.getAnnotations();\r\n\r\n        // loop through all the annotations from newest to oldest\r\n        for (let a = annotations.length - 1; a >= 0; a--) {\r\n            let annotation = annotations[a];\r\n\r\n            if (annotation != null && annotation.type === \"comment\" && annotation.notebookItemId != null &&\r\n                annotation.localNotebookItemId === localNotebookItemId) {\r\n                return annotation;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the latest score annotation\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param workgroupId the workgroup id\r\n     * @param scoreType (optional) the type of score\r\n     * e.g.\r\n     * 'autoScore' for auto graded score\r\n     * 'score' for teacher graded score\r\n     * 'any' for auto graded score or teacher graded score\r\n     * @returns the latest score annotation\r\n     */\r\n    getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType) {\r\n\r\n        var annotation = null;\r\n\r\n        var annotations = this.getAnnotations();\r\n\r\n        if (scoreType == null) {\r\n            // default to 'any'\r\n            scoreType = 'any';\r\n        }\r\n\r\n        // loop through all the annotations from newest to oldest\r\n        for (var a = annotations.length - 1; a >= 0; a--) {\r\n            var tempAnnotation = annotations[a];\r\n\r\n            if (tempAnnotation != null) {\r\n                var acceptAnnotation = false;\r\n                var tempNodeId = tempAnnotation.nodeId;\r\n                var tempComponentId = tempAnnotation.componentId;\r\n                var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\r\n                var tempAnnotationType = tempAnnotation.type;\r\n\r\n                // make sure the annotation values match what we are looking for\r\n                if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\r\n\r\n                    if (scoreType === 'any' && (tempAnnotationType === 'autoScore' || tempAnnotationType === 'score')) {\r\n                        // we are looking for an auto score or teacher score and have found one\r\n                        acceptAnnotation = true;\r\n                    } else if (scoreType === 'autoScore' && tempAnnotationType === 'autoScore') {\r\n                        // we are looking for an auto score and have found one\r\n                        acceptAnnotation = true;\r\n                    } else if (scoreType === 'score' && tempAnnotationType === 'score') {\r\n                        // we are looking for a teacher score and have found one\r\n                        acceptAnnotation = true;\r\n                    }\r\n\r\n                    if (acceptAnnotation) {\r\n                        // we have found the latest score annotation of the type we want\r\n                        annotation = tempAnnotation;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Get the latest comment annotation\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @param workgroupId the workgroup id\r\n     * @param commentType (optional) the type of comment\r\n     * e.g.\r\n     * 'autoComment' for auto graded comment\r\n     * 'comment' for teacher graded comment\r\n     * 'any' for auto graded comment or teacher graded comment\r\n     * @returns the latest comment annotation\r\n     */\r\n    getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType) {\r\n\r\n        var annotation = null;\r\n\r\n        var annotations = this.getAnnotations();\r\n\r\n        if (commentType == null) {\r\n            // default to 'any'\r\n            commentType = 'any';\r\n        }\r\n\r\n        // loop through all the annotations from newest to oldest\r\n        for (var a = annotations.length - 1; a >= 0; a--) {\r\n            var tempAnnotation = annotations[a];\r\n\r\n            if (tempAnnotation != null) {\r\n                var acceptAnnotation = false;\r\n                var tempNodeId = tempAnnotation.nodeId;\r\n                var tempComponentId = tempAnnotation.componentId;\r\n                var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\r\n                var tempAnnotationType = tempAnnotation.type;\r\n\r\n                // make sure the annotation values match what we are looking for\r\n                if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\r\n\r\n                    if (commentType === 'any' && (tempAnnotationType === 'autoComment' || tempAnnotationType === 'comment')) {\r\n                        // we are looking for an auto comment or teacher comment and have found one\r\n                        acceptAnnotation = true;\r\n                    } else if (commentType === 'autoComment' && tempAnnotationType === 'autoComment') {\r\n                        // we are looking for an auto comment and have found one\r\n                        acceptAnnotation = true;\r\n                    } else if (commentType === 'comment' && tempAnnotationType === 'comment') {\r\n                        // we are looking for a teacher comment and have found one\r\n                        acceptAnnotation = true;\r\n                    }\r\n\r\n                    if (acceptAnnotation) {\r\n                        // we have found the latest comment annotation of the type we want\r\n                        annotation = tempAnnotation;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return annotation;\r\n    }\r\n\r\n    /**\r\n     * Get the score value from the score annotation\r\n     * @param scoreAnnotation a score annotation\r\n     * @returns the score value e.g. 5\r\n     */\r\n    getScoreValueFromScoreAnnotation(scoreAnnotation) {\r\n        var scoreValue = null;\r\n\r\n        if (scoreAnnotation != null) {\r\n            var data = scoreAnnotation.data;\r\n\r\n            if (data != null) {\r\n                scoreValue = data.value;\r\n            }\r\n        }\r\n\r\n        return scoreValue;\r\n    }\r\n\r\n    /**\r\n     * Get all global annotations that are active and inactive for a specified node and component\r\n     * @returns all global annotations that are active and inactive for a specified node and component\r\n     */\r\n    getAllGlobalAnnotationsByNodeIdAndComponentId(nodeId, componentId) {\r\n        let allGlobalAnnotations = this.getAllGlobalAnnotations();\r\n        let globalAnnotationsByNodeIdAndComponentId = allGlobalAnnotations.filter((globalAnnotation) => {\r\n            return globalAnnotation.nodeId === nodeId && globalAnnotation.componentId === componentId;\r\n        });\r\n        return globalAnnotationsByNodeIdAndComponentId;\r\n    };\r\n\r\n    /**\r\n     * Get all global annotations that are active and inactive\r\n     * @returns all global annotations that are active and inactive\r\n     */\r\n    getAllGlobalAnnotations() {\r\n        let globalAnnotations = [];\r\n\r\n        for (let a = 0; a < this.annotations.length; a++) {\r\n            let annotation = this.annotations[a];\r\n            if (annotation != null && annotation.data != null) {\r\n                if (annotation.data.isGlobal) {\r\n                    globalAnnotations.push(annotation);\r\n                }\r\n            }\r\n        }\r\n\r\n        return globalAnnotations;\r\n    };\r\n\r\n    /**\r\n     * Get all global annotations that are active and inactive and groups them by annotation group name\r\n     * @returns all global annotations that are active and inactive\r\n     */\r\n    getAllGlobalAnnotationGroups() {\r\n        let globalAnnotationGroups = [];\r\n\r\n        for (let a = 0; a < this.annotations.length; a++) {\r\n            let annotation = this.annotations[a];\r\n            if (annotation != null && annotation.data != null) {\r\n                if (annotation.data.isGlobal) {\r\n                    // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\r\n                    if (annotation.data.annotationGroupName != null && annotation.data.annotationGroupCreatedTime != null) {\r\n                        let sameGroupFound = false;\r\n                        for (let g = 0; g < globalAnnotationGroups.length; g++) {\r\n                            let globalAnnotationGroup = globalAnnotationGroups[g];\r\n                            if (globalAnnotationGroup.annotationGroupNameAndTime == (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime)) {\r\n                                // push this annotation to the end of the group\r\n                                globalAnnotationGroup.annotations.push(annotation);\r\n                                sameGroupFound = true;\r\n                            }\r\n                        }\r\n                        if (!sameGroupFound) {\r\n                            let annotationGroup = {\r\n                                \"annotationGroupNameAndTime\": (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime),\r\n                                \"annotations\": [annotation]\r\n                            };\r\n                            globalAnnotationGroups.push(annotationGroup);\r\n                        }\r\n                    } else {\r\n                        // each global annotation should have a name, so it shouldn't get here\r\n                        console.error(this.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return globalAnnotationGroups;\r\n    };\r\n\r\n    /**\r\n     * Get all global annotations that are active\r\n     * @returns all global annotations that are active, in a group\r\n     * [\r\n     * {\r\n     *   annotationGroupName:\"score1\",\r\n     *   annotations:[\r\n     *   {\r\n     *     type:autoScore,\r\n     *     value:1\r\n     *   },\r\n     *   {\r\n     *     type:autoComment,\r\n     *     value:\"you received a score of 1.\"\r\n     *   }\r\n     *   ]\r\n     * },\r\n     * {\r\n     *   annotationGroupName:\"score2\",\r\n     *   annotations:[...]\r\n     * }\r\n     * ]\r\n     */\r\n    getActiveGlobalAnnotationGroups() {\r\n        return this.activeGlobalAnnotationGroups;\r\n    };\r\n\r\n    /**\r\n     * Calculates the active global annotations and groups them by annotation group name\r\n     */\r\n    calculateActiveGlobalAnnotationGroups() {\r\n        this.activeGlobalAnnotationGroups = [];\r\n\r\n        for (let a = 0; a < this.annotations.length; a++) {\r\n            let annotation = this.annotations[a];\r\n            if (annotation != null && annotation.data != null) {\r\n                if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp == null) {\r\n                    // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\r\n                    if (annotation.data.annotationGroupName != null) {\r\n                        let sameGroupFound = false;\r\n                        for (let ag = 0; ag < this.activeGlobalAnnotationGroups.length; ag++) {\r\n                            let activeGlobalAnnotationGroup = this.activeGlobalAnnotationGroups[ag];\r\n                            if (activeGlobalAnnotationGroup.annotationGroupName == (annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime)) {\r\n                                // push this annotation to the end of the group\r\n                                activeGlobalAnnotationGroup.annotations.push(annotation);\r\n                                sameGroupFound = true;\r\n                            }\r\n                        }\r\n                        if (!sameGroupFound) {\r\n                            let annotationGroup = {\r\n                                \"annotationGroupName\": annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime,\r\n                                \"annotations\": [annotation],\r\n                                \"nodeId\": annotation.nodeId,\r\n                                \"componentId\": annotation.componentId,\r\n                                \"serverSaveTime\": annotation.serverSaveTime\r\n                            };\r\n                            this.activeGlobalAnnotationGroups.push(annotationGroup);\r\n                        }\r\n                    } else {\r\n                        // each global annotation should have a name, so it shouldn't get here\r\n                        console.error(his.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all global annotations that are in-active\r\n     * @returns all global annotations that are in-active\r\n     * In-active global annotations has data.isGlobal = false and data.unGlobalizedTimestamp is set.\r\n     */\r\n    getInActiveGlobalAnnotations() {\r\n        let inActiveGlobalAnnotations = [];\r\n\r\n        for (let a = 0; a < this.annotations.length; a++) {\r\n            let annotation = this.annotations[a];\r\n            if (annotation != null && annotation.data != null) {\r\n                if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp != null) {\r\n                    inActiveGlobalAnnotations.push(annotation);\r\n                }\r\n            }\r\n        }\r\n\r\n        return inActiveGlobalAnnotations;\r\n    };\r\n\r\n    /**\r\n     * Get the latest teacher score annotation for a student work id\r\n     * @param studentWorkId the student work id\r\n     * @return the latest teacher score annotation for the student work\r\n     */\r\n    getLatestTeacherScoreAnnotationByStudentWorkId(studentWorkId) {\r\n        return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'score');\r\n    }\r\n\r\n    /**\r\n     * Get the latest teacher comment annotation for a student work id\r\n     * @param studentWorkId the student work id\r\n     * @return the latest teacher comment annotation for the student work\r\n     */\r\n    getLatestTeacherCommentAnnotationByStudentWorkId(studentWorkId) {\r\n        return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'comment');\r\n    }\r\n\r\n    /**\r\n     * Get the latest auto score annotation for a student work id\r\n     * @param studentWorkId the student work id\r\n     * @return the latest auto score annotation for the student work\r\n     */\r\n    getLatestAutoScoreAnnotationByStudentWorkId(studentWorkId) {\r\n        return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoScore');\r\n    }\r\n\r\n    /**\r\n     * Get the latest auto comment annotation for a student work id\r\n     * @param studentWorkId the student work id\r\n     * @return the latest auto comment annotation for the student work\r\n     */\r\n    getLatestAutoCommentAnnotationByStudentWorkId(studentWorkId) {\r\n        return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoComment');\r\n    }\r\n\r\n    /**\r\n     * Get the latest annotation for the given student work and annotation type\r\n     * @param studentWorkId the student work id\r\n     * @param type the type of annotation\r\n     * @return the latest annotation for the given student work and annotation type\r\n     */\r\n    getLatestAnnotationByStudentWorkIdAndType(studentWorkId, type) {\r\n\r\n        // loop through all the annotations backwards\r\n        for (var a = this.annotations.length - 1; a >= 0; a--) {\r\n\r\n            // get an annotation\r\n            var annotation = this.annotations[a];\r\n\r\n            if (annotation != null) {\r\n                if (studentWorkId == annotation.studentWorkId && type == annotation.type) {\r\n                    /*\r\n                     * we have found an annotation with the given student work\r\n                     * id and annotation type\r\n                     */\r\n                    return annotation;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the annotations for the given student work\r\n     * @param studentWorkId the student work id\r\n     * @return array of annotations for the given student work\r\n     */\r\n    getAnnotationsByStudentWorkId(studentWorkId) {\r\n        let annotations = [];\r\n\r\n        // loop through all the annotations\r\n        for (let index = 0; index < this.annotations.length; index++) {\r\n            let annotation = this.annotations[index];\r\n            if (annotation) {\r\n                if (studentWorkId == annotation.studentWorkId) {\r\n                    annotations.push(annotation);\r\n                }\r\n            }\r\n        }\r\n        return annotations;\r\n    }\r\n}\r\n\r\nAnnotationService.$inject = [\r\n    '$filter',\r\n    '$http',\r\n    '$q',\r\n    '$rootScope',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'UtilService'\r\n];\r\n\r\nexport default AnnotationService;\r\n"]}