{"version":3,"sources":["annotationService.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,iB;AACF,+BAAY,KAAZ,EAAmB,UAAnB,EAA+B,aAA/B,EAA8C,WAA9C,EAA2D;AAAA;;AACvD,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,WAAL,GAAmB,WAAnB;;AAEA,aAAK,WAAL,GAAmB,IAAnB;AACH;;AAED;;;;;;;yCAGiB;AACb,mBAAO,KAAK,WAAZ;AACH;;AAED;;;;;;;;4CAKoB,M,EAAQ;AACxB,gBAAI,aAAa,IAAjB;;AAEA,gBAAI,UAAU,IAAd,EAAoB;AAChB,oBAAI,SAAS,OAAO,MAApB;AACA,oBAAI,cAAc,OAAO,WAAzB;AACA,oBAAI,kBAAkB,OAAO,eAA7B;AACA,oBAAI,gBAAgB,OAAO,aAA3B;AACA,oBAAI,OAAO,OAAO,IAAlB;;AAEA,oBAAI,cAAc,KAAK,WAAvB;;AAEA,oBAAI,eAAe,IAAnB,EAAyB;AACrB,yBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;AAC9C,4BAAI,iBAAiB,YAAY,CAAZ,CAArB;;AAEA,4BAAI,kBAAkB,IAAtB,EAA4B;;AAExB,gCAAI,eAAe,MAAf,KAA0B,MAA1B,IACA,eAAe,WAAf,KAA+B,WAD/B,IAEA,eAAe,eAAf,KAAmC,eAFnC,IAGA,eAAe,aAAf,KAAiC,aAHjC,IAIA,eAAe,IAAf,KAAwB,IAJ5B,EAIkC;;AAE9B,6CAAa,cAAb;AACA;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO,UAAP;AACH;;;;;AAED;;;;;;;;;;;;;;;yCAgBI,Y,EAAc,K,EAAO,Q,EAAU,e,EAAiB,a,EAChD,M,EAAQ,W,EAAa,a,EACrB,c,EAAgB,I,EAAM,c,EAAgB;;AAEtC,gBAAI,aAAa,EAAjB;AACA,uBAAW,EAAX,GAAgB,YAAhB;AACA,uBAAW,KAAX,GAAmB,KAAnB;AACA,uBAAW,QAAX,GAAsB,QAAtB;AACA,uBAAW,eAAX,GAA6B,eAA7B;AACA,uBAAW,aAAX,GAA2B,aAA3B;AACA,uBAAW,MAAX,GAAoB,MAApB;AACA,uBAAW,WAAX,GAAyB,WAAzB;AACA,uBAAW,aAAX,GAA2B,aAA3B;AACA,uBAAW,IAAX,GAAkB,cAAlB;AACA,uBAAW,IAAX,GAAkB,IAAlB;AACA,uBAAW,cAAX,GAA4B,cAA5B;;AAEA,mBAAO,UAAP;AACH;;;;;AAED;;;;;uCAKe,U,EAAY;;AAEvB,gBAAI,cAAc,IAAlB,EAAwB;AACpB,oBAAI,cAAc,EAAlB;AACA,4BAAY,IAAZ,CAAiB,UAAjB;;AAEA;AACA,oBAAI,eAAe,IAAf,IAAuB,YAAY,MAAZ,GAAqB,CAAhD,EAAmD;AAC/C,yBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,YAAY,MAAhC,EAAwC,GAAxC,EAA6C;AACzC,4BAAI,aAAa,YAAY,CAAZ,CAAjB;;AAEA,4BAAI,cAAc,IAAlB,EAAwB;AACpB,uCAAW,YAAX,GAA0B,KAAK,WAAL,CAAiB,WAAjB,EAA1B,CADoB,CACsC;AAC1D,iCAAK,qBAAL,CAA2B,UAA3B;AACH;AACJ;AACJ,iBATD,MASO;AACH,kCAAc,EAAd;AACH;;AAED,oBAAI,SAAS,EAAb;AACA,uBAAO,KAAP,GAAe,KAAK,aAAL,CAAmB,QAAnB,EAAf;AACA,uBAAO,WAAP,GAAqB,KAAK,aAAL,CAAmB,cAAnB,EAArB;AACA,uBAAO,WAAP,GAAqB,QAAQ,MAAR,CAAe,WAAf,CAArB;;AAEA,oBAAI,aAAa,EAAjB;AACA,2BAAW,MAAX,GAAoB,MAApB;AACA,2BAAW,GAAX,GAAiB,KAAK,aAAL,CAAmB,cAAnB,CAAkC,gBAAlC,CAAjB;AACA,2BAAW,OAAX,GAAqB,EAAC,gBAAgB,mCAAjB,EAArB;AACA,2BAAW,IAAX,GAAkB,EAAE,KAAF,CAAQ,MAAR,CAAlB;;AAEA,uBAAO,KAAK,KAAL,CAAW,UAAX,EAAuB,IAAvB,CAA4B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,MAAT,EAAiB;;AAEnE,wBAAI,kBAAkB,IAAtB;;AAEA,wBAAI,UAAU,IAAV,IAAkB,OAAO,IAAP,IAAe,IAArC,EAA2C;AACvC,4BAAI,OAAO,OAAO,IAAlB;;AAEA,4BAAI,QAAQ,IAAZ,EAAkB;;AAEd;AACA,gCAAI,mBAAmB,KAAK,WAA5B;;AAEA;AACA,gCAAI,mBAAmB,KAAK,WAA5B;;AAEA,gCAAI,oBAAoB,IAApB,IAA4B,oBAAoB,IAApD,EAA0D;;AAEtD;AACA,qCAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,iBAAiB,MAArC,EAA6C,GAA7C,EAAkD;AAC9C,wCAAI,kBAAkB,iBAAiB,CAAjB,CAAtB;;AAEA;AACA,yCAAK,IAAI,IAAI,iBAAiB,MAAjB,GAA0B,CAAvC,EAA0C,KAAK,CAA/C,EAAkD,GAAlD,EAAuD;AACnD,0DAAkB,iBAAiB,CAAjB,CAAlB;;AAEA,4CAAI,gBAAgB,YAAhB,IAAgC,IAAhC,IACA,gBAAgB,YAAhB,KAAiC,gBAAgB,YADrD,EACmE;;AAE/D;AACA,4DAAgB,EAAhB,GAAqB,gBAAgB,EAArC;AACA,4DAAgB,cAAhB,GAAiC,gBAAgB,cAAjD;AACA,4DAAgB,YAAhB,GAA+B,IAA/B,CAL+D,CAK1B;;AAErC,iDAAK,UAAL,CAAgB,UAAhB,CAA2B,yBAA3B,EAAsD,EAAC,YAAY,eAAb,EAAtD;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,2BAAO,eAAP;AACH,iBA3CkC,CAA5B,CAAP;AA4CH;AACJ;;;;;AAED;;;;8CAIsB,U,EAAY;;AAE9B,gBAAI,cAAc,IAAlB,EAAwB;;AAEpB,oBAAI,UAAU,KAAd;;AAEA,oBAAI,cAAc,KAAK,WAAvB;;AAEA,oBAAI,eAAe,IAAnB,EAAyB;;AAErB;AACA,yBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;AAC9C,4BAAI,iBAAiB,YAAY,CAAZ,CAArB;;AAEA,4BAAI,kBAAkB,IAAtB,EAA4B;;AAExB,gCAAI,WAAW,EAAX,IAAiB,eAAe,EAAhC,IACA,WAAW,MAAX,IAAqB,eAAe,MADpC,IAEA,WAAW,WAAX,IAA0B,eAAe,WAFzC,IAGA,WAAW,eAAX,IAA8B,eAAe,eAH7C,IAIA,WAAW,aAAX,IAA4B,eAAe,aAJ3C,IAKA,WAAW,IAAX,IAAmB,eAAe,IALlC,IAMA,WAAW,aAAX,IAA4B,eAAe,aAN3C,IAOA,WAAW,KAAX,IAAoB,eAAe,KAPnC,IAQA,WAAW,QAAX,IAAuB,eAAe,QAR1C,EAQoD;;AAEhD;AACA,+CAAe,IAAf,GAAsB,WAAW,IAAjC;AACA,+CAAe,cAAf,GAAgC,WAAW,cAA3C;AACA,+CAAe,cAAf,GAAgC,WAAW,cAA3C;AACA,0CAAU,IAAV;AACH;AACJ;AACJ;AACJ;;AAED,oBAAI,CAAC,OAAL,EAAc;AACV;AACA,gCAAY,IAAZ,CAAiB,UAAjB;AACH;AACJ;AACJ;;;;;AAED;;;;uCAIe,W,EAAa;AACxB,iBAAK,WAAL,GAAmB,WAAnB;AACH;;;;;AAED;;;;;sCAKc,W,EAAa,W,EAAa;;AAEpC,gBAAI,aAAa,CAAjB;;AAEA,gBAAI,cAAc,EAAlB;;AAEA,gBAAI,eAAe,IAAf,IAAuB,eAAe,IAA1C,EAAgD;AAC5C;AACA,qBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;;AAE9C;AACA,wBAAI,aAAa,YAAY,CAAZ,CAAjB;;AAEA;AACA,wBAAI,cAAc,IAAd,IAAsB,WAAW,aAAX,IAA4B,WAAtD,EAAmE;;AAE/D;AACA,4BAAI,WAAW,IAAX,KAAoB,OAAxB,EAAiC;;AAE7B,gCAAI,SAAS,WAAW,MAAxB;AACA,gCAAI,cAAc,WAAW,WAA7B;AACA,gCAAI,OAAO,WAAW,IAAtB;;AAEA,gCAAI,aAAa,SAAS,GAAT,GAAe,WAAhC;;AAEA;AACA,gCAAI,YAAY,OAAZ,CAAoB,UAApB,KAAmC,CAAC,CAAxC,EAA2C;AACvC;;AAEA,oCAAI,QAAQ,IAAZ,EAAkB;AACd,wCAAI,QAAQ,KAAK,KAAjB;;AAEA,wCAAI,CAAC,MAAM,KAAN,CAAL,EAAmB;;AAEf,4CAAI,cAAc,IAAlB,EAAwB;AACpB,yDAAa,KAAb;AACH,yCAFD,MAEO;AACH,0DAAc,KAAd;AACH;;AAED;;;;;AAKA,oDAAY,IAAZ,CAAiB,UAAjB;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO,UAAP;AACH;;AAED;;;;;;;;;iCAMS,W,EAAa,M,EAAQ;;AAE1B,gBAAI,QAAQ,IAAZ;;AAEA;;;;;AAKA,gBAAI,cAAc,EAAlB;;AAEA;AACA,gBAAI,cAAc,KAAK,WAAvB;;AAEA,gBAAI,eAAe,IAAf,IAAuB,UAAU,IAArC,EAA2C;AACvC;AACA,qBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;;AAE9C;AACA,wBAAI,aAAa,YAAY,CAAZ,CAAjB;;AAEA;AACA,wBAAI,cAAc,IAAd,IAAsB,WAAW,aAAX,IAA4B,WAAtD,EAAmE;;AAE/D;AACA,4BAAI,WAAW,IAAX,KAAoB,OAAxB,EAAiC;;AAE7B,gCAAI,aAAa,WAAW,MAA5B;;AAEA;AACA,gCAAI,UAAU,UAAd,EAA0B;AACtB,oCAAI,cAAc,WAAW,WAA7B;AACA,oCAAI,OAAO,WAAW,IAAtB;;AAEA,oCAAI,aAAa,aAAa,GAAb,GAAmB,WAApC;;AAEA;AACA,oCAAI,YAAY,OAAZ,CAAoB,UAApB,KAAmC,CAAC,CAAxC,EAA2C;AACvC;;AAEA,wCAAI,QAAQ,IAAZ,EAAkB;AACd,4CAAI,QAAQ,KAAK,KAAjB;;AAEA,4CAAI,CAAC,MAAM,KAAN,CAAL,EAAmB;;AAEf,gDAAI,SAAS,IAAb,EAAmB;AACf,wDAAQ,KAAR;AACH,6CAFD,MAEO;AACH,yDAAS,KAAT;AACH;;AAED;;;;;AAKA,wDAAY,IAAZ,CAAiB,UAAjB;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAO,KAAP;AACH;;AAED;;;;;;;;;;;;;kDAU0B,K,EAAO,Q,EAAU,M,EAAQ,W,EAAa,a,EAAe,I,EAAM;AACjF,gBAAI,eAAe,IAAnB;AACA,gBAAI,kBAAkB,IAAtB;AACA,gBAAI,gBAAgB,IAApB;AACA,gBAAI,iBAAiB,WAArB;AACA,gBAAI,iBAAiB,KAAK,KAAL,CAAW,IAAI,IAAJ,EAAX,CAArB;;AAEA,gBAAI,aAAa,KAAK,gBAAL,CACb,YADa,EACC,KADD,EACQ,QADR,EACkB,eADlB,EACmC,aADnC,EAEb,MAFa,EAEL,WAFK,EAEQ,aAFR,EAGb,cAHa,EAGG,IAHH,EAGS,cAHT,CAAjB;;AAMA,mBAAO,UAAP;AACH;;AAED;;;;;;;;;;;;;oDAU4B,K,EAAO,Q,EAAU,M,EAAQ,W,EAAa,a,EAAe,I,EAAM;AACnF,gBAAI,eAAe,IAAnB;AACA,gBAAI,kBAAkB,IAAtB;AACA,gBAAI,gBAAgB,IAApB;AACA,gBAAI,iBAAiB,aAArB;AACA,gBAAI,iBAAiB,KAAK,KAAL,CAAW,IAAI,IAAJ,EAAX,CAArB;;AAEA,gBAAI,aAAa,KAAK,gBAAL,CACb,YADa,EACC,KADD,EACQ,QADR,EACkB,eADlB,EACmC,aADnC,EAEb,MAFa,EAEL,WAFK,EAEQ,aAFR,EAGb,cAHa,EAGG,IAHH,EAGS,cAHT,CAAjB;;AAMA,mBAAO,UAAP;AACH;;AAED;;;;;;;;;;;;;;;iDAYyB,M,EAAQ,W,EAAa,W,EAAa,S,EAAW;;AAElE,gBAAI,aAAa,IAAjB;;AAEA,gBAAI,cAAc,KAAK,cAAL,EAAlB;;AAEA,gBAAI,aAAa,IAAjB,EAAuB;AACnB;AACA,4BAAY,KAAZ;AACH;;AAED;AACA,iBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;AAC9C,oBAAI,iBAAiB,YAAY,CAAZ,CAArB;;AAEA,oBAAI,kBAAkB,IAAtB,EAA4B;AACxB,wBAAI,mBAAmB,KAAvB;AACA,wBAAI,aAAa,eAAe,MAAhC;AACA,wBAAI,kBAAkB,eAAe,WAArC;AACA,wBAAI,oBAAoB,eAAe,aAAvC;AACA,wBAAI,qBAAqB,eAAe,IAAxC;;AAEA;AACA,wBAAI,UAAU,UAAV,IAAwB,eAAe,eAAvC,IAA0D,eAAe,iBAA7E,EAAgG;;AAE5F,4BAAI,cAAc,KAAd,KAAwB,uBAAuB,WAAvB,IAAsC,uBAAuB,OAArF,CAAJ,EAAmG;AAC/F;AACA,+CAAmB,IAAnB;AACH,yBAHD,MAGO,IAAI,cAAc,WAAd,IAA6B,uBAAuB,WAAxD,EAAqE;AACxE;AACA,+CAAmB,IAAnB;AACH,yBAHM,MAGA,IAAI,cAAc,OAAd,IAAyB,uBAAuB,OAApD,EAA6D;AAChE;AACA,+CAAmB,IAAnB;AACH;;AAED,4BAAI,gBAAJ,EAAsB;AAClB;AACA,yCAAa,cAAb;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO,UAAP;AACH;;AAED;;;;;;;;;;;;;;;mDAY2B,M,EAAQ,W,EAAa,W,EAAa,W,EAAa;;AAEtE,gBAAI,aAAa,IAAjB;;AAEA,gBAAI,cAAc,KAAK,cAAL,EAAlB;;AAEA,gBAAI,eAAe,IAAnB,EAAyB;AACrB;AACA,8BAAc,KAAd;AACH;;AAED;AACA,iBAAK,IAAI,IAAI,YAAY,MAAZ,GAAqB,CAAlC,EAAqC,KAAK,CAA1C,EAA6C,GAA7C,EAAkD;AAC9C,oBAAI,iBAAiB,YAAY,CAAZ,CAArB;;AAEA,oBAAI,kBAAkB,IAAtB,EAA4B;AACxB,wBAAI,mBAAmB,KAAvB;AACA,wBAAI,aAAa,eAAe,MAAhC;AACA,wBAAI,kBAAkB,eAAe,WAArC;AACA,wBAAI,oBAAoB,eAAe,aAAvC;AACA,wBAAI,qBAAqB,eAAe,IAAxC;;AAEA;AACA,wBAAI,UAAU,UAAV,IAAwB,eAAe,eAAvC,IAA0D,eAAe,iBAA7E,EAAgG;;AAE5F,4BAAI,gBAAgB,KAAhB,KAA0B,uBAAuB,aAAvB,IAAwC,uBAAuB,SAAzF,CAAJ,EAAyG;AACrG;AACA,+CAAmB,IAAnB;AACH,yBAHD,MAGO,IAAI,gBAAgB,aAAhB,IAAiC,uBAAuB,aAA5D,EAA2E;AAC9E;AACA,+CAAmB,IAAnB;AACH,yBAHM,MAGA,IAAI,gBAAgB,SAAhB,IAA6B,uBAAuB,SAAxD,EAAmE;AACtE;AACA,+CAAmB,IAAnB;AACH;;AAED,4BAAI,gBAAJ,EAAsB;AAClB;AACA,yCAAa,cAAb;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAO,UAAP;AACH;;AAED;;;;;;;;yDAKiC,e,EAAiB;AAC9C,gBAAI,aAAa,IAAjB;;AAEA,gBAAI,mBAAmB,IAAvB,EAA6B;AACzB,oBAAI,OAAO,gBAAgB,IAA3B;;AAEA,oBAAI,QAAQ,IAAZ,EAAkB;AACd,iCAAa,KAAK,KAAlB;AACH;AACJ;;AAED,mBAAO,UAAP;AACH;;;;;;AAGL,kBAAkB,OAAlB,GAA4B,CACxB,OADwB,EAExB,YAFwB,EAGxB,eAHwB,EAIxB,aAJwB,CAA5B;;kBAOe,iB","file":"annotationService.js","sourcesContent":["'use strict';\n\nclass AnnotationService {\n    constructor($http, $rootScope, ConfigService, UtilService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.UtilService = UtilService;\n\n        this.annotations = null;\n    }\n\n    /**\n     * Get all the annotations\n     */\n    getAnnotations() {\n        return this.annotations;\n    }\n\n    /**\n     * Get the latest annotation with the given params\n     * @param params an object containing the params to match\n     * @returns the latest annotation that matches the params\n     */\n    getLatestAnnotation(params) {\n        var annotation = null;\n\n        if (params != null) {\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var fromWorkgroupId = params.fromWorkgroupId;\n            var toWorkgroupId = params.toWorkgroupId;\n            var type = params.type;\n\n            var annotations = this.annotations;\n\n            if (annotations != null) {\n                for (var a = annotations.length - 1; a >= 0; a--) {\n                    var tempAnnotation = annotations[a];\n\n                    if (tempAnnotation != null) {\n\n                        if (tempAnnotation.nodeId === nodeId &&\n                            tempAnnotation.componentId === componentId &&\n                            tempAnnotation.fromWorkgroupId === fromWorkgroupId &&\n                            tempAnnotation.toWorkgroupId === toWorkgroupId &&\n                            tempAnnotation.type === type) {\n\n                            annotation = tempAnnotation;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return annotation;\n    };\n\n    /**\n     * Create an annotation object\n     * @param annotationId the annotation id\n     * @param runId the run id\n     * @param periodId the period id\n     * @param fromWorkgroupId the from workgroup id\n     * @param toWorkgroupId the to workgroup id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param studentWorkId the student work id\n     * @param annotationType the annotation type\n     * @param data the data\n     * @param clientSaveTime the client save time\n     * @returns an annotation object\n     */\n    createAnnotation(\n        annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n        nodeId, componentId, studentWorkId,\n        annotationType, data, clientSaveTime) {\n\n        var annotation = {};\n        annotation.id = annotationId;\n        annotation.runId = runId;\n        annotation.periodId = periodId;\n        annotation.fromWorkgroupId = fromWorkgroupId;\n        annotation.toWorkgroupId = toWorkgroupId;\n        annotation.nodeId = nodeId;\n        annotation.componentId = componentId;\n        annotation.studentWorkId = studentWorkId;\n        annotation.type = annotationType;\n        annotation.data = data;\n        annotation.clientSaveTime = clientSaveTime;\n\n        return annotation;\n    };\n\n    /**\n     * Save the annotation to the server\n     * @param annotation the annotation object\n     * @returns a promise\n     */\n    saveAnnotation(annotation) {\n\n        if (annotation != null) {\n            var annotations = [];\n            annotations.push(annotation);\n\n            // loop through all the annotations and inject a request token\n            if (annotations != null && annotations.length > 0) {\n                for (var a = 0; a < annotations.length; a++) {\n                    var annotation = annotations[a];\n\n                    if (annotation != null) {\n                        annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                        this.addOrUpdateAnnotation(annotation);\n                    }\n                }\n            } else {\n                annotations = [];\n            }\n\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.annotations = angular.toJson(annotations);\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n                var localAnnotation = null;\n\n                if (result != null && result.data != null) {\n                    var data = result.data;\n\n                    if (data != null) {\n\n                        // get the saved annotations\n                        var savedAnnotations = data.annotations;\n\n                        // get the local annotations\n                        var localAnnotations = this.annotations;\n\n                        if (savedAnnotations != null && localAnnotations != null) {\n\n                            // loop through all the saved annotations\n                            for (var x = 0; x < savedAnnotations.length; x++) {\n                                var savedAnnotation = savedAnnotations[x];\n\n                                // loop through all the local annotations\n                                for (var y = localAnnotations.length - 1; y >= 0; y--) {\n                                    localAnnotation = localAnnotations[y];\n\n                                    if (localAnnotation.requestToken != null &&\n                                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n\n                                        // we have found the matching local annotation so we will update it\n                                        localAnnotation.id = savedAnnotation.id;\n                                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n                                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return localAnnotation;\n            }));\n        }\n    };\n\n    /**\n     * Add or update the annotation to our local collection\n     * @param annotation the annotation object\n     */\n    addOrUpdateAnnotation(annotation) {\n\n        if (annotation != null) {\n\n            var updated = false;\n\n            var annotations = this.annotations;\n\n            if (annotations != null) {\n\n                // loop through all the local annotations\n                for (var a = annotations.length - 1; a >= 0; a--) {\n                    var tempAnnotation = annotations[a];\n\n                    if (tempAnnotation != null) {\n\n                        if (annotation.id == tempAnnotation.id &&\n                            annotation.nodeId == tempAnnotation.nodeId &&\n                            annotation.componentId == tempAnnotation.componentId &&\n                            annotation.fromWorkgroupId == tempAnnotation.fromWorkgroupId &&\n                            annotation.toWorkgroupId == tempAnnotation.toWorkgroupId &&\n                            annotation.type == tempAnnotation.type &&\n                            annotation.studentWorkId == tempAnnotation.studentWorkId &&\n                            annotation.runId == tempAnnotation.runId &&\n                            annotation.periodId == tempAnnotation.periodId) {\n\n                            // the annotation matches so we will update it\n                            tempAnnotation.data = annotation.data;\n                            tempAnnotation.clientSaveTime = annotation.clientSaveTime;\n                            tempAnnotation.serverSaveTime = annotation.serverSaveTime;\n                            updated = true;\n                        }\n                    }\n                }\n            }\n\n            if (!updated) {\n                // we did not find a match so we will add it\n                annotations.push(annotation);\n            }\n        }\n    };\n\n    /**\n     * Set the annotations\n     * @param annotations the annotations aray\n     */\n    setAnnotations(annotations) {\n        this.annotations = annotations;\n    };\n\n    /**\n     * Get the total score for a workgroup\n     * @param annotations an array of annotations\n     * @param workgroupId the workgroup id\n     */\n    getTotalScore(annotations, workgroupId) {\n\n        var totalScore = 0;\n\n        var scoresFound = [];\n\n        if (annotations != null && workgroupId != null) {\n            // loop through all the annotations from newest to oldest\n            for (var a = annotations.length - 1; a >= 0; a--) {\n\n                // get an annotation\n                var annotation = annotations[a];\n\n                // check that the annotation is for the workgroup id we are looking for\n                if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n\n                    // check that the annotation is a score annotation\n                    if (annotation.type === 'score') {\n\n                        var nodeId = annotation.nodeId;\n                        var componentId = annotation.componentId;\n                        var data = annotation.data;\n\n                        var scoreFound = nodeId + '-' + componentId;\n\n                        // check if we have obtained a score from this component already\n                        if (scoresFound.indexOf(scoreFound) == -1) {\n                            // we have not obtained a score from this component yet\n\n                            if (data != null) {\n                                var value = data.value;\n\n                                if (!isNaN(value)) {\n\n                                    if (totalScore == null) {\n                                        totalScore = value;\n                                    } else {\n                                        totalScore += value;\n                                    }\n\n                                    /*\n                                     * remember that we have found a score for this component\n                                     * so that we don't double count it if the teacher scored\n                                     * the component more than once\n                                     */\n                                    scoresFound.push(scoreFound);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the score for a workgroup for a node\n     * @param workgroupId the workgroup id\n     * @param nodeId the node id\n     * @returns the score for a workgroup for a node\n     */\n    getScore(workgroupId, nodeId) {\n\n        var score = null;\n\n        /*\n         * an array to keep track of the components that we have obtained a\n         * score for. we do not want to double count components if the student\n         * has received a score multiple times for a node from the teacher.\n         */\n        var scoresFound = [];\n\n        // get all the annotations\n        var annotations = this.annotations;\n\n        if (workgroupId != null && nodeId != null) {\n            // loop through all the annotations from newest to oldest\n            for (var a = annotations.length - 1; a >= 0; a--) {\n\n                // get an annotation\n                var annotation = annotations[a];\n\n                // check that the annotation is for the workgroup id we are looking for\n                if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n\n                    // check that the annotation is a score annotation\n                    if (annotation.type === 'score') {\n\n                        var tempNodeId = annotation.nodeId;\n\n                        // check that the annotation is for the node we are looking for\n                        if (nodeId == tempNodeId) {\n                            var componentId = annotation.componentId;\n                            var data = annotation.data;\n\n                            var scoreFound = tempNodeId + '-' + componentId;\n\n                            // check if we have obtained a score from this component already\n                            if (scoresFound.indexOf(scoreFound) == -1) {\n                                // we have not obtained a score from this component yet\n\n                                if (data != null) {\n                                    var value = data.value;\n\n                                    if (!isNaN(value)) {\n\n                                        if (score == null) {\n                                            score = value;\n                                        } else {\n                                            score += value;\n                                        }\n\n                                        /*\n                                         * remember that we have found a score for this component\n                                         * so that we don't double count it if the teacher scored\n                                         * the component more than once\n                                         */\n                                        scoresFound.push(scoreFound);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return score;\n    }\n    \n    /**\n     * Create an auto score annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto score annotation\n     */\n    createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\n        var annotationId = null;\n        var fromWorkgroupId = null;\n        var studentWorkId = null;\n        var annotationType = 'autoScore';\n        var clientSaveTime = Date.parse(new Date());\n        \n        var annotation = this.createAnnotation(\n            annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n            nodeId, componentId, studentWorkId,\n            annotationType, data, clientSaveTime\n        );\n        \n        return annotation;\n    }\n    \n    /**\n     * Create an auto comment annotation\n     * @param runId the run id\n     * @param periodId the period id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param toWorkgroupId the student workgroup id\n     * @param data the annotation data\n     * @returns the auto comment annotation\n     */\n    createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\n        var annotationId = null;\n        var fromWorkgroupId = null;\n        var studentWorkId = null;\n        var annotationType = 'autoComment';\n        var clientSaveTime = Date.parse(new Date());\n        \n        var annotation = this.createAnnotation(\n            annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n            nodeId, componentId, studentWorkId,\n            annotationType, data, clientSaveTime\n        );\n        \n        return annotation;\n    }\n    \n    /**\n     * Get the latest score annotation\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param workgroupId the workgroup id\n     * @param scoreType (optional) the type of score \n     * e.g.\n     * 'autoScore' for auto graded score\n     * 'score' for teacher graded score\n     * 'any' for auto graded score or teacher graded score\n     * @returns the latest score annotation\n     */\n    getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType) {\n        \n        var annotation = null;\n        \n        var annotations = this.getAnnotations();\n        \n        if (scoreType == null) {\n            // default to 'any'\n            scoreType = 'any';\n        }\n        \n        // loop through all the annotations from newest to oldest\n        for (var a = annotations.length - 1; a >= 0; a--) {\n            var tempAnnotation = annotations[a];\n            \n            if (tempAnnotation != null) {\n                var acceptAnnotation = false;\n                var tempNodeId = tempAnnotation.nodeId;\n                var tempComponentId = tempAnnotation.componentId;\n                var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n                var tempAnnotationType = tempAnnotation.type;\n                \n                // make sure the annotation values match what we are looking for\n                if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\n                    \n                    if (scoreType === 'any' && (tempAnnotationType === 'autoScore' || tempAnnotationType === 'score')) {\n                        // we are looking for an auto score or teacher score and have found one\n                        acceptAnnotation = true;\n                    } else if (scoreType === 'autoScore' && tempAnnotationType === 'autoScore') {\n                        // we are looking for an auto score and have found one\n                        acceptAnnotation = true;\n                    } else if (scoreType === 'score' && tempAnnotationType === 'score') {\n                        // we are looking for a teacher score and have found one\n                        acceptAnnotation = true;\n                    }\n                    \n                    if (acceptAnnotation) {\n                        // we have found the latest score annotation of the type we want\n                        annotation = tempAnnotation;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return annotation;\n    }\n    \n    /**\n     * Get the latest comment annotation\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param workgroupId the workgroup id\n     * @param commentType (optional) the type of comment \n     * e.g.\n     * 'autoComment' for auto graded comment\n     * 'comment' for teacher graded comment\n     * 'any' for auto graded comment or teacher graded comment\n     * @returns the latest comment annotation\n     */\n    getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType) {\n        \n        var annotation = null;\n        \n        var annotations = this.getAnnotations();\n        \n        if (commentType == null) {\n            // default to 'any'\n            commentType = 'any';\n        }\n        \n        // loop through all the annotations from newest to oldest\n        for (var a = annotations.length - 1; a >= 0; a--) {\n            var tempAnnotation = annotations[a];\n            \n            if (tempAnnotation != null) {\n                var acceptAnnotation = false;\n                var tempNodeId = tempAnnotation.nodeId;\n                var tempComponentId = tempAnnotation.componentId;\n                var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n                var tempAnnotationType = tempAnnotation.type;\n                \n                // make sure the annotation values match what we are looking for\n                if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\n                    \n                    if (commentType === 'any' && (tempAnnotationType === 'autoComment' || tempAnnotationType === 'comment')) {\n                        // we are looking for an auto comment or teacher comment and have found one\n                        acceptAnnotation = true;\n                    } else if (commentType === 'autoComment' && tempAnnotationType === 'autoComment') {\n                        // we are looking for an auto comment and have found one\n                        acceptAnnotation = true;\n                    } else if (commentType === 'comment' && tempAnnotationType === 'comment') {\n                        // we are looking for a teacher comment and have found one\n                        acceptAnnotation = true;\n                    }\n                    \n                    if (acceptAnnotation) {\n                        // we have found the latest comment annotation of the type we want\n                        annotation = tempAnnotation;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        return annotation;\n    }\n    \n    /**\n     * Get the score value from the score annotation\n     * @param scoreAnnotation a score annotation\n     * @returns the score value e.g. 5\n     */\n    getScoreValueFromScoreAnnotation(scoreAnnotation) {\n        var scoreValue = null;\n        \n        if (scoreAnnotation != null) {\n            var data = scoreAnnotation.data;\n            \n            if (data != null) {\n                scoreValue = data.value;\n            }\n        }\n        \n        return scoreValue;\n    }\n}\n\nAnnotationService.$inject = [\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'UtilService'\n];\n\nexport default AnnotationService;\n"]}