{"version":3,"sources":["annotationService.es6"],"names":["AnnotationService","$filter","$http","$q","$rootScope","ConfigService","ProjectService","UtilService","$translate","annotations","dummyAnnotationId","annotationId","annotation","id","params","nodeId","componentId","fromWorkgroupId","toWorkgroupId","type","a","length","tempAnnotation","match","constructor","Array","thisType","runId","periodId","studentWorkId","localNotebookItemId","notebookItemId","annotationType","data","clientSaveTime","push","requestToken","generateKey","addOrUpdateAnnotation","isPreview","savedAnnotationDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","getRunId","workgroupId","getWorkgroupId","angular","toJson","httpParams","method","url","getConfigParam","headers","$","param","then","bind","result","localAnnotation","savedAnnotations","localAnnotations","savedAnnotation","y","serverSaveTime","$broadcast","isAnnotationFound","isAnnotationMatch","annotation1","annotation2","totalScore","scoresFound","isActive","scoreFound","indexOf","value","isNaN","score","tempNodeId","tempComponentId","componentExists","getComponentByNodeIdAndComponentId","Date","parse","createAnnotation","scoreType","commentType","latestScoreAnnotation","getLatestScoreAnnotation","latestCommentAnnotation","getLatestCommentAnnotation","getLatestNotebookItemScoreAnnotation","getLatestNotebookItemCommentAnnotation","getAnnotations","acceptAnnotation","tempToWorkgroupId","tempAnnotationType","scoreAnnotation","allGlobalAnnotations","getAllGlobalAnnotations","globalAnnotationsByNodeIdAndComponentId","filter","globalAnnotation","globalAnnotations","isGlobal","globalAnnotationGroups","annotationGroupName","annotationGroupCreatedTime","sameGroupFound","globalAnnotationGroup","annotationGroupNameAndTime","annotationGroup","console","error","activeGlobalAnnotationGroups","unGlobalizedTimestamp","activeGlobalAnnotationGroup","his","inActiveGlobalAnnotations","getLatestAnnotationByStudentWorkIdAndType","totalScoreSoFar","annotationsCounted","getAllLatestScoreAnnotations","getSubScore","getScoreFromAnnotation","workgroupIdsFound","latestScoreAnnotations","scores","$inject"],"mappings":"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","file":"annotationService.js","sourcesContent":["'use strict';\n\nclass AnnotationService {\n  constructor(\n      $filter,\n      $http,\n      $q,\n      $rootScope,\n      ConfigService,\n      ProjectService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.annotations = null;\n\n    /*\n     * A dummy annotation id that is used in preview mode when we simulate\n     * saving of annotation.\n     */\n    this.dummyAnnotationId = 1;\n  }\n\n  /**\n   * Get all the annotations\n   */\n  getAnnotations() {\n    return this.annotations;\n  }\n\n  /**\n   * Get the annotation with the specified id, or null if not found\n   * @param annotationId\n   */\n  getAnnotationById(annotationId) {\n    for (let annotation of this.annotations) {\n      if (annotation.id === annotationId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest annotation with the given params\n   * @param params an object containing the params to match\n   * @returns the latest annotation that matches the params\n   */\n  getLatestAnnotation(params) {\n    let annotation = null;\n\n    if (params != null) {\n      let nodeId = params.nodeId;\n      let componentId = params.componentId;\n      let fromWorkgroupId = params.fromWorkgroupId;\n      let toWorkgroupId = params.toWorkgroupId;\n      let type = params.type;\n\n      let annotations = this.annotations;\n\n      if (annotations != null) {\n        for (let a = annotations.length - 1; a >= 0; a--) {\n          let tempAnnotation = annotations[a];\n\n          if (tempAnnotation != null) {\n            let match = true;\n\n            if (nodeId && tempAnnotation.nodeId !== nodeId) {\n              match = false;\n            }\n            if (match && componentId && tempAnnotation.componentId !== componentId) {\n              match = false;\n            }\n            if (match && fromWorkgroupId && tempAnnotation.fromWorkgroupId !== fromWorkgroupId) {\n              match = false;\n            }\n            if (match && toWorkgroupId && tempAnnotation.toWorkgroupId !== toWorkgroupId) {\n              match = false;\n            }\n            if (match && type) {\n              if (type.constructor === Array) {\n                for (let thisType of type) {\n                  if (tempAnnotation.type !== thisType) {\n                    match = false;\n                  }\n                }\n              } else {\n                if (tempAnnotation.type !== type) {\n                  match = false;\n                }\n              }\n            }\n\n            if (match) {\n              annotation = tempAnnotation;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return annotation;\n  };\n\n  /**\n   * Create an annotation object\n   * @param annotationId the annotation id\n   * @param runId the run id\n   * @param periodId the period id\n   * @param fromWorkgroupId the from workgroup id\n   * @param toWorkgroupId the to workgroup id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param studentWorkId the student work id\n   * @param annotationType the annotation type\n   * @param data the data\n   * @param clientSaveTime the client save time\n   * @returns an annotation object\n   */\n  createAnnotation(annotationId, runId, periodId, fromWorkgroupId,\n      toWorkgroupId, nodeId, componentId, studentWorkId, localNotebookItemId,\n      notebookItemId, annotationType, data, clientSaveTime) {\n    const annotation = {};\n    annotation.id = annotationId;\n    annotation.runId = runId;\n    annotation.periodId = periodId;\n    annotation.fromWorkgroupId = fromWorkgroupId;\n    annotation.toWorkgroupId = toWorkgroupId;\n    annotation.nodeId = nodeId;\n    annotation.componentId = componentId;\n    annotation.studentWorkId = studentWorkId;\n    annotation.localNotebookItemId = localNotebookItemId;\n    annotation.notebookItemId = notebookItemId;\n    annotation.type = annotationType;\n    annotation.data = data;\n    annotation.clientSaveTime = clientSaveTime;\n    return annotation;\n  };\n\n  /**\n   * Save the annotation to the server\n   * @param annotation the annotation object\n   * @returns a promise\n   */\n  saveAnnotation(annotation) {\n    if (annotation != null) {\n      let annotations = [];\n      annotations.push(annotation);\n      if (annotations != null && annotations.length > 0) {\n        for (let annotation of annotations) {\n          if (annotation != null) {\n            annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n            this.addOrUpdateAnnotation(annotation);\n          }\n        }\n      } else {\n        annotations = [];\n      }\n\n      if (this.ConfigService.isPreview()) {\n        // if we're in preview, don't make any request to the server but pretend we did\n        let savedAnnotationDataResponse = {\n          annotations: annotations\n        };\n        let annotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n\n        let deferred = this.$q.defer();\n        deferred.resolve(annotation);\n        return deferred.promise;\n      } else {\n        let params = {\n          runId: this.ConfigService.getRunId(),\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          annotations: angular.toJson(annotations)\n        };\n\n        let httpParams = {\n          method: \"POST\",\n          url: this.ConfigService.getConfigParam('teacherDataURL'),\n          headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n          data: $.param(params)\n        };\n\n        return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n          let localAnnotation = null;\n\n          if (result != null && result.data != null) {\n            let savedAnnotationDataResponse = result.data;\n            localAnnotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n          }\n\n          return localAnnotation;\n        }));\n      }\n    }\n  };\n\n  saveToServerSuccess(savedAnnotationDataResponse) {\n    let localAnnotation = null;\n    if (savedAnnotationDataResponse != null) {\n      let savedAnnotations = savedAnnotationDataResponse.annotations;\n      let localAnnotations = this.annotations;\n      if (savedAnnotations != null && localAnnotations != null) {\n        for (let savedAnnotation of savedAnnotations) {\n          for (let y = localAnnotations.length - 1; y >= 0; y--) {\n            localAnnotation = localAnnotations[y];\n\n            if (localAnnotation.id != null &&\n              localAnnotation.id === savedAnnotation.id) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              //localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            } else if (localAnnotation.requestToken != null &&\n              localAnnotation.requestToken === savedAnnotation.requestToken) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.id = savedAnnotation.id;\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              if (this.ConfigService.isPreview() && localAnnotation.id == null) {\n                /*\n                 * we are in preview mode so we will set a dummy\n                 * annotation id into the annotation\n                 */\n                localAnnotation.id = this.dummyAnnotationId;\n                /*\n                 * increment the dummy annotation id for the next\n                 * annotation\n                 */\n                this.dummyAnnotationId++;\n              }\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            }\n          }\n        }\n      }\n    }\n    return localAnnotation;\n  }\n\n  addOrUpdateAnnotation(annotation) {\n    let isAnnotationFound = false;\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const localAnnotation = this.annotations[a];\n      if (this.isAnnotationMatch(annotation, localAnnotation)) {\n        isAnnotationFound = true;\n        localAnnotation.data = annotation.data;\n        localAnnotation.clientSaveTime = annotation.clientSaveTime;\n        localAnnotation.serverSaveTime = annotation.serverSaveTime;\n      }\n    }\n    if (!isAnnotationFound) {\n      this.annotations.push(annotation);\n    }\n  }\n\n  isAnnotationMatch(annotation1, annotation2) {\n    return annotation1.id === annotation2.id &&\n      annotation1.nodeId === annotation2.nodeId &&\n      annotation1.componentId === annotation2.componentId &&\n      annotation1.fromWorkgroupId === annotation2.fromWorkgroupId &&\n      annotation1.toWorkgroupId === annotation2.toWorkgroupId &&\n      annotation1.type === annotation2.type &&\n      annotation1.studentWorkId === annotation2.studentWorkId &&\n      annotation1.runId === annotation2.runId &&\n      annotation1.periodId === annotation2.periodId;\n  }\n\n  /**\n   * Set the annotations\n   * @param annotations the annotations aray\n   */\n  setAnnotations(annotations) {\n    this.annotations = annotations;\n  };\n\n  /**\n   * Get the total score for a workgroup\n   * @param annotations an array of annotations\n   * @param workgroupId the workgroup id\n   */\n  getTotalScore(annotations, workgroupId) {\n    let totalScore = 0;\n    const scoresFound = [];\n\n    if (annotations != null && workgroupId != null) {\n      for (let a = annotations.length - 1; a >= 0; a--) {\n        const annotation = annotations[a];\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n          if (annotation.type === 'score' || annotation.type === \"autoScore\") {\n            const nodeId = annotation.nodeId;\n            const componentId = annotation.componentId;\n            const data = annotation.data;\n            if (this.ProjectService.isActive(nodeId)) {\n              const scoreFound = nodeId + '-' + componentId;\n              if (scoresFound.indexOf(scoreFound) == -1) {\n                if (data != null) {\n                  const value = data.value;\n                  if (!isNaN(value)) {\n                    if (totalScore == null) {\n                      totalScore = value;\n                    } else {\n                      totalScore += value;\n                    }\n\n                    /*\n                     * remember that we have found a score for this component\n                     * so that we don't double count it if the teacher scored\n                     * the component more than once\n                     */\n                    scoresFound.push(scoreFound);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return totalScore;\n  }\n\n  /**\n   * Get the score for a workgroup for a node\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @returns the score for a workgroup for a node\n   */\n  getScore(workgroupId, nodeId) {\n    let score = null;\n\n    /*\n     * an array to keep track of the components that we have obtained a\n     * score for. we do not want to double count components if the student\n     * has received a score multiple times for a node from the teacher.\n     */\n    const scoresFound = [];\n    const annotations = this.annotations;\n\n    if (workgroupId != null && nodeId != null) {\n      for (let a = annotations.length - 1; a >= 0; a--) {\n        const annotation = annotations[a];\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n          if (annotation.type === 'score' || annotation.type === 'autoScore') {\n            const tempNodeId = annotation.nodeId;\n            if (nodeId == tempNodeId) {\n              const tempComponentId = annotation.componentId;\n              if (this.componentExists(tempNodeId, tempComponentId)) {\n                const data = annotation.data;\n                const scoreFound = tempNodeId + '-' + tempComponentId;\n                if (scoresFound.indexOf(scoreFound) == -1) {\n                  if (data != null) {\n                    const value = data.value;\n                    if (!isNaN(value)) {\n                      if (score == null) {\n                        score = value;\n                      } else {\n                        score += value;\n                      }\n\n                      /*\n                       * remember that we have found a score for this component\n                       * so that we don't double count it if the teacher scored\n                       * the component more than once\n                       */\n                      scoresFound.push(scoreFound);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return score;\n  }\n\n  componentExists(nodeId, componentId) {\n    return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId) != null;\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(runId, periodId, nodeId, componentId,\n      toWorkgroupId, data) {\n    const annotationId = null;\n    const fromWorkgroupId = null;\n    const studentWorkId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'autoScore';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(\n      annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n      nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n      annotationType, data, clientSaveTime\n    );\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(runId, periodId, nodeId, componentId,\n      toWorkgroupId, data) {\n    const annotationId = null;\n    const fromWorkgroupId = null;\n    const studentWorkId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'autoComment';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(annotationId, runId, periodId,\n        fromWorkgroupId, toWorkgroupId, nodeId, componentId, studentWorkId,\n        localNotebookItemId, notebookItemId, annotationType, data,\n        clientSaveTime);\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param fromWorkgroupId the teacher workgroup id\n   * @param toWorkgroupId the student workgroup id\n   * @param studentWorkId the component state id\n   * @param data the annotation data\n   * @returns the inappropriate flag annotation\n   */\n  createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId,\n      fromWorkgroupId, toWorkgroupId, studentWorkId, data) {\n    const annotationId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'inappropriateFlag';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(annotationId, runId, periodId,\n        fromWorkgroupId, toWorkgroupId, nodeId, componentId, studentWorkId,\n        localNotebookItemId, notebookItemId, annotationType, data,\n        clientSaveTime);\n    return annotation;\n  }\n\n  /**\n   * Get the latest annotations for a given component (as an object)\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @return object containing the component's latest score and comment annotations\n   */\n  getLatestComponentAnnotations(nodeId, componentId, workgroupId, scoreType,\n      commentType) {\n    let latestScoreAnnotation = this.getLatestScoreAnnotation(nodeId,\n        componentId, workgroupId, scoreType);\n    let latestCommentAnnotation = this.getLatestCommentAnnotation(nodeId,\n        componentId, workgroupId, commentType);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest annotations for a given notebook item (as an object)\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemAnnotations(workgroupId, localNotebookItemId) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n    latestScoreAnnotation = this.getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId);\n    latestCommentAnnotation = this.getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest score annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId) {\n    let annotations = this.getAnnotations();\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n      if (annotation != null && annotation.type === \"score\" &&\n          annotation.notebookItemId != null &&\n          annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest comment annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId) {\n    let annotations = this.getAnnotations();\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n      if (annotation != null && annotation.type === \"comment\" &&\n          annotation.notebookItemId != null &&\n          annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Get the latest score annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @returns the latest score annotation\n   */\n  getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType) {\n    let annotation = null;\n    const annotations = this.getAnnotations();\n\n    if (scoreType == null) {\n      scoreType = 'any';\n    }\n\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      const tempAnnotation = annotations[a];\n      if (tempAnnotation != null) {\n        let acceptAnnotation = false;\n        const tempNodeId = tempAnnotation.nodeId;\n        const tempComponentId = tempAnnotation.componentId;\n        const tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        const tempAnnotationType = tempAnnotation.type;\n\n        if (nodeId == tempNodeId && componentId == tempComponentId &&\n            workgroupId == tempToWorkgroupId) {\n          if (scoreType === 'any' && (tempAnnotationType === 'autoScore' || tempAnnotationType === 'score')) {\n            acceptAnnotation = true;\n          } else if (scoreType === 'autoScore' && tempAnnotationType === 'autoScore') {\n            acceptAnnotation = true;\n          } else if (scoreType === 'score' && tempAnnotationType === 'score') {\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n    return annotation;\n  }\n\n  /**\n   * Get the latest comment annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @returns the latest comment annotation\n   */\n  getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType) {\n    let annotation = null;\n    const annotations = this.getAnnotations();\n\n    if (commentType == null) {\n      commentType = 'any';\n    }\n\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      const tempAnnotation = annotations[a];\n      if (tempAnnotation != null) {\n        let acceptAnnotation = false;\n        const tempNodeId = tempAnnotation.nodeId;\n        const tempComponentId = tempAnnotation.componentId;\n        const tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        const tempAnnotationType = tempAnnotation.type;\n\n        if (nodeId == tempNodeId && componentId == tempComponentId &&\n            workgroupId == tempToWorkgroupId) {\n          if (commentType === 'any' && (tempAnnotationType === 'autoComment' || tempAnnotationType === 'comment')) {\n            acceptAnnotation = true;\n          } else if (commentType === 'autoComment' && tempAnnotationType === 'autoComment') {\n            acceptAnnotation = true;\n          } else if (commentType === 'comment' && tempAnnotationType === 'comment') {\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n    return annotation;\n  }\n\n  /**\n   * Get the score value from the score annotation\n   * @param scoreAnnotation a score annotation\n   * @returns the score value e.g. 5\n   */\n  getScoreValueFromScoreAnnotation(scoreAnnotation) {\n    if (scoreAnnotation != null) {\n      const data = scoreAnnotation.data;\n\n      if (data != null) {\n        return data.value;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get all global annotations that are active and inactive for a specified node and component\n   * @returns all global annotations that are active and inactive for a specified node and component\n   */\n  getAllGlobalAnnotationsByNodeIdAndComponentId(nodeId, componentId) {\n    let allGlobalAnnotations = this.getAllGlobalAnnotations();\n    let globalAnnotationsByNodeIdAndComponentId = allGlobalAnnotations.filter((globalAnnotation) => {\n      return globalAnnotation.nodeId === nodeId && globalAnnotation.componentId === componentId;\n    });\n    return globalAnnotationsByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotations() {\n    let globalAnnotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          globalAnnotations.push(annotation);\n        }\n      }\n    }\n    return globalAnnotations;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive and groups them by annotation group name\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotationGroups() {\n    let globalAnnotationGroups = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null && annotation.data.annotationGroupCreatedTime != null) {\n            let sameGroupFound = false;\n            for (let globalAnnotationGroup of globalAnnotationGroups) {\n              if (globalAnnotationGroup.annotationGroupNameAndTime == (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                globalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupNameAndTime\": (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime),\n                \"annotations\": [annotation]\n              };\n              globalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(this.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n    return globalAnnotationGroups;\n  };\n\n  /**\n   * Get all global annotations that are active\n   * @returns all global annotations that are active, in a group\n   * [\n   * {\n     *   annotationGroupName:\"score1\",\n     *   annotations:[\n     *   {\n     *     type:autoScore,\n     *     value:1\n     *   },\n     *   {\n     *     type:autoComment,\n     *     value:\"you received a score of 1.\"\n     *   }\n     *   ]\n     * },\n   * {\n     *   annotationGroupName:\"score2\",\n     *   annotations:[...]\n     * }\n   * ]\n   */\n  getActiveGlobalAnnotationGroups() {\n    return this.activeGlobalAnnotationGroups;\n  };\n\n  /**\n   * Calculates the active global annotations and groups them by annotation group name\n   */\n  calculateActiveGlobalAnnotationGroups() {\n    this.activeGlobalAnnotationGroups = [];\n\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp == null) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null) {\n            let sameGroupFound = false;\n            for (let activeGlobalAnnotationGroup of this.activeGlobalAnnotationGroups) {\n              if (activeGlobalAnnotationGroup.annotationGroupName == (annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                activeGlobalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupName\": annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime,\n                \"annotations\": [annotation],\n                \"nodeId\": annotation.nodeId,\n                \"componentId\": annotation.componentId,\n                \"serverSaveTime\": annotation.serverSaveTime\n              };\n              this.activeGlobalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(his.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get all global annotations that are in-active\n   * @returns all global annotations that are in-active\n   * In-active global annotations has data.isGlobal = false and data.unGlobalizedTimestamp is set.\n   */\n  getInActiveGlobalAnnotations() {\n    let inActiveGlobalAnnotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp != null) {\n          inActiveGlobalAnnotations.push(annotation);\n        }\n      }\n    }\n    return inActiveGlobalAnnotations;\n  };\n\n  /**\n   * Get the latest teacher score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher score annotation for the student work\n   */\n  getLatestTeacherScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'score');\n  }\n\n  /**\n   * Get the latest teacher comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher comment annotation for the student work\n   */\n  getLatestTeacherCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'comment');\n  }\n\n  /**\n   * Get the latest auto score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto score annotation for the student work\n   */\n  getLatestAutoScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoScore');\n  }\n\n  /**\n   * Get the latest auto comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto comment annotation for the student work\n   */\n  getLatestAutoCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoComment');\n  }\n\n  /**\n   * Get the latest annotation for the given student work and annotation type\n   * @param studentWorkId the student work id\n   * @param type the type of annotation\n   * @return the latest annotation for the given student work and annotation type\n   */\n  getLatestAnnotationByStudentWorkIdAndType(studentWorkId, type) {\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const annotation = this.annotations[a];\n\n      if (annotation != null) {\n        if (studentWorkId == annotation.studentWorkId && type == annotation.type) {\n          /*\n           * we have found an annotation with the given student work\n           * id and annotation type\n           */\n          return annotation;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the annotations for the given student work\n   * @param studentWorkId the student work id\n   * @return array of annotations for the given student work\n   */\n  getAnnotationsByStudentWorkId(studentWorkId) {\n    let annotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation && studentWorkId == annotation.studentWorkId) {\n        annotations.push(annotation);\n      }\n    }\n    return annotations;\n  }\n\n  getAverageAutoScore(nodeId, componentId, periodId = -1, type = null) {\n    let totalScoreSoFar = 0;\n    let annotationsCounted = 0;\n    for (let annotation of this.getAllLatestScoreAnnotations(nodeId, componentId, periodId)) {\n      if (annotation.nodeId === nodeId &&\n          annotation.componentId === componentId &&\n          (periodId === -1 || annotation.periodId === periodId)) {\n        let score = null;\n        if (type != null) {\n          score = this.getSubScore(annotation, type);\n        } else {\n          score = this.getScoreFromAnnotation(annotation);\n        }\n        if (score != null) {\n          totalScoreSoFar += score;\n          annotationsCounted++;\n        }\n      }\n    }\n    return totalScoreSoFar / annotationsCounted;\n  }\n\n  getAllLatestScoreAnnotations(nodeId, componentId, periodId) {\n    const workgroupIdsFound = {};\n    const latestScoreAnnotations = [];\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const annotation = this.annotations[a];\n      const workgroupId = annotation.toWorkgroupId;\n      if (workgroupIdsFound[workgroupId] == null &&\n          nodeId === annotation.nodeId &&\n          componentId === annotation.componentId &&\n          (periodId === -1 || periodId === annotation.periodId) &&\n          ('score' === annotation.type || 'autoScore' === annotation.type)) {\n        workgroupIdsFound[workgroupId] = annotation;\n        latestScoreAnnotations.push(annotation);\n      }\n    }\n    return latestScoreAnnotations;\n  }\n\n  getScoreFromAnnotation(annotation) {\n    return annotation.data.value;\n  }\n\n  getSubScore(annotation, type) {\n    for (let score of annotation.data.scores) {\n      if (score.id === type) {\n        return score.score;\n      }\n    }\n    return null;\n  }\n}\n\nAnnotationService.$inject = [\n  '$filter',\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default AnnotationService;\n"]}