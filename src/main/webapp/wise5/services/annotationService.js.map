{"version":3,"sources":["annotationService.es6"],"names":["AnnotationService","$filter","$http","$q","$rootScope","ConfigService","ProjectService","UtilService","$translate","annotations","dummyAnnotationId","annotationId","annotation","id","params","nodeId","componentId","fromWorkgroupId","toWorkgroupId","type","a","length","tempAnnotation","match","constructor","Array","i","thisType","runId","periodId","studentWorkId","localNotebookItemId","notebookItemId","annotationType","data","clientSaveTime","push","requestToken","generateKey","addOrUpdateAnnotation","isPreview","savedAnnotationDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","getRunId","workgroupId","getWorkgroupId","angular","toJson","httpParams","method","url","getConfigParam","headers","$","param","then","bind","result","localAnnotation","savedAnnotations","localAnnotations","x","savedAnnotation","y","serverSaveTime","$broadcast","updated","totalScore","scoresFound","isActive","scoreFound","indexOf","value","isNaN","score","tempNodeId","Date","parse","createAnnotation","scoreType","commentType","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","getLatestNotebookItemScoreAnnotation","getLatestNotebookItemCommentAnnotation","getAnnotations","acceptAnnotation","tempComponentId","tempToWorkgroupId","tempAnnotationType","scoreAnnotation","scoreValue","allGlobalAnnotations","getAllGlobalAnnotations","globalAnnotationsByNodeIdAndComponentId","filter","globalAnnotation","globalAnnotations","isGlobal","globalAnnotationGroups","annotationGroupName","annotationGroupCreatedTime","sameGroupFound","g","globalAnnotationGroup","annotationGroupNameAndTime","annotationGroup","console","error","activeGlobalAnnotationGroups","unGlobalizedTimestamp","ag","activeGlobalAnnotationGroup","his","inActiveGlobalAnnotations","getLatestAnnotationByStudentWorkIdAndType","$inject"],"mappings":"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","file":"annotationService.js","sourcesContent":["'use strict';\n\nclass AnnotationService {\n  constructor($filter,\n              $http,\n              $q,\n              $rootScope,\n              ConfigService,\n              ProjectService,\n              UtilService) {\n\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n\n    this.annotations = null;\n\n    /*\n     * A dummy annotation id that is used in preview mode when we simulate\n     * saving of annotation.\n     */\n    this.dummyAnnotationId = 1;\n  }\n\n  /**\n   * Get all the annotations\n   */\n  getAnnotations() {\n    return this.annotations;\n  }\n\n  /**\n   * Get the annotation with the specified id, or null if not found\n   * @param annotationId\n   */\n  getAnnotationById(annotationId) {\n    for (let annotation of this.annotations) {\n      if (annotation.id === annotationId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest annotation with the given params\n   * @param params an object containing the params to match\n   * @returns the latest annotation that matches the params\n   */\n  getLatestAnnotation(params) {\n    let annotation = null;\n\n    if (params != null) {\n      let nodeId = params.nodeId;\n      let componentId = params.componentId;\n      let fromWorkgroupId = params.fromWorkgroupId;\n      let toWorkgroupId = params.toWorkgroupId;\n      let type = params.type;\n\n      let annotations = this.annotations;\n\n      if (annotations != null) {\n        for (let a = annotations.length - 1; a >= 0; a--) {\n          let tempAnnotation = annotations[a];\n\n          if (tempAnnotation != null) {\n            let match = true;\n\n            if (nodeId && tempAnnotation.nodeId !== nodeId) {\n              match = false;\n            }\n            if (match && componentId && tempAnnotation.componentId !== componentId) {\n              match = false;\n            }\n            if (match && fromWorkgroupId && tempAnnotation.fromWorkgroupId !== fromWorkgroupId) {\n              match = false;\n            }\n            if (match && toWorkgroupId && tempAnnotation.toWorkgroupId !== toWorkgroupId) {\n              match = false;\n            }\n            if (match && type) {\n              if (type.constructor === Array) {\n                for (let i = 0; i < type.length; i++) {\n                  let thisType = type[i];\n                  if (tempAnnotation.type !== thisType) {\n                    match = false;\n                  }\n                }\n              } else {\n                if (tempAnnotation.type !== type) {\n                  match = false;\n                }\n              }\n            }\n\n            if (match) {\n              annotation = tempAnnotation;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return annotation;\n  };\n\n  /**\n   * Create an annotation object\n   * @param annotationId the annotation id\n   * @param runId the run id\n   * @param periodId the period id\n   * @param fromWorkgroupId the from workgroup id\n   * @param toWorkgroupId the to workgroup id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param studentWorkId the student work id\n   * @param annotationType the annotation type\n   * @param data the data\n   * @param clientSaveTime the client save time\n   * @returns an annotation object\n   */\n  createAnnotation(\n    annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n    nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n    annotationType, data, clientSaveTime) {\n\n    var annotation = {};\n    annotation.id = annotationId;\n    annotation.runId = runId;\n    annotation.periodId = periodId;\n    annotation.fromWorkgroupId = fromWorkgroupId;\n    annotation.toWorkgroupId = toWorkgroupId;\n    annotation.nodeId = nodeId;\n    annotation.componentId = componentId;\n    annotation.studentWorkId = studentWorkId;\n    annotation.localNotebookItemId = localNotebookItemId;\n    annotation.notebookItemId = notebookItemId;\n    annotation.type = annotationType;\n    annotation.data = data;\n    annotation.clientSaveTime = clientSaveTime;\n\n    return annotation;\n  };\n\n  /**\n   * Save the annotation to the server\n   * @param annotation the annotation object\n   * @returns a promise\n   */\n  saveAnnotation(annotation) {\n\n    if (annotation != null) {\n      let annotations = [];\n      annotations.push(annotation);\n\n      // loop through all the annotations and inject a request token\n      if (annotations != null && annotations.length > 0) {\n        for (let a = 0; a < annotations.length; a++) {\n          let annotation = annotations[a];\n\n          if (annotation != null) {\n            annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n            this.addOrUpdateAnnotation(annotation);\n          }\n        }\n      } else {\n        annotations = [];\n      }\n\n      if (this.ConfigService.isPreview()) {\n        // if we're in preview, don't make any request to the server but pretend we did\n        let savedAnnotationDataResponse = {\n          annotations: annotations\n        };\n        let annotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n\n        let deferred = this.$q.defer();\n        deferred.resolve(annotation);\n        return deferred.promise;\n      } else {\n        let params = {\n          runId: this.ConfigService.getRunId(),\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          annotations: angular.toJson(annotations)\n        };\n\n        let httpParams = {\n          method: \"POST\",\n          url: this.ConfigService.getConfigParam('teacherDataURL'),\n          headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n          data: $.param(params)\n        };\n\n        return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n          let localAnnotation = null;\n\n          if (result != null && result.data != null) {\n            let savedAnnotationDataResponse = result.data;\n            localAnnotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n          }\n\n          return localAnnotation;\n        }));\n      }\n    }\n  };\n\n  saveToServerSuccess(savedAnnotationDataResponse) {\n    let localAnnotation = null;\n    if (savedAnnotationDataResponse != null) {\n\n      // get the saved annotations\n      let savedAnnotations = savedAnnotationDataResponse.annotations;\n\n      // get the local annotations\n      let localAnnotations = this.annotations;\n\n      if (savedAnnotations != null && localAnnotations != null) {\n\n        // loop through all the saved annotations\n        for (let x = 0; x < savedAnnotations.length; x++) {\n          let savedAnnotation = savedAnnotations[x];\n\n          // loop through all the local annotations\n          for (let y = localAnnotations.length - 1; y >= 0; y--) {\n            localAnnotation = localAnnotations[y];\n\n            if (localAnnotation.id != null &&\n              localAnnotation.id === savedAnnotation.id) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              //localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            } else if (localAnnotation.requestToken != null &&\n              localAnnotation.requestToken === savedAnnotation.requestToken) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.id = savedAnnotation.id;\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              if (this.ConfigService.isPreview() && localAnnotation.id == null) {\n                /*\n                 * we are in preview mode so we will set a dummy\n                 * annotation id into the annotation\n                 */\n                localAnnotation.id = this.dummyAnnotationId;\n                /*\n                 * increment the dummy annotation id for the next\n                 * annotation\n                 */\n                this.dummyAnnotationId++;\n              }\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            }\n          }\n        }\n      }\n    }\n    return localAnnotation;\n  }\n\n  /**\n   * Add or update the annotation to our local collection\n   * @param annotation the annotation object\n   */\n  addOrUpdateAnnotation(annotation) {\n\n    if (annotation != null) {\n\n      var updated = false;\n\n      var annotations = this.annotations;\n\n      if (annotations != null) {\n\n        // loop through all the local annotations\n        for (var a = annotations.length - 1; a >= 0; a--) {\n          var tempAnnotation = annotations[a];\n\n          if (tempAnnotation != null) {\n\n            if (annotation.id == tempAnnotation.id &&\n              annotation.nodeId == tempAnnotation.nodeId &&\n              annotation.componentId == tempAnnotation.componentId &&\n              annotation.fromWorkgroupId == tempAnnotation.fromWorkgroupId &&\n              annotation.toWorkgroupId == tempAnnotation.toWorkgroupId &&\n              annotation.type == tempAnnotation.type &&\n              annotation.studentWorkId == tempAnnotation.studentWorkId &&\n              annotation.runId == tempAnnotation.runId &&\n              annotation.periodId == tempAnnotation.periodId) {\n\n              // the annotation matches so we will update it\n              tempAnnotation.data = annotation.data;\n              tempAnnotation.clientSaveTime = annotation.clientSaveTime;\n              tempAnnotation.serverSaveTime = annotation.serverSaveTime;\n              updated = true;\n            }\n          }\n        }\n      }\n\n      if (!updated) {\n        // we did not find a match so we will add it\n        annotations.push(annotation);\n      }\n    }\n  };\n\n  /**\n   * Set the annotations\n   * @param annotations the annotations aray\n   */\n  setAnnotations(annotations) {\n    this.annotations = annotations;\n  };\n\n  /**\n   * Get the total score for a workgroup\n   * @param annotations an array of annotations\n   * @param workgroupId the workgroup id\n   */\n  getTotalScore(annotations, workgroupId) {\n\n    var totalScore = 0;\n\n    var scoresFound = [];\n\n    if (annotations != null && workgroupId != null) {\n      // loop through all the annotations from newest to oldest\n      for (var a = annotations.length - 1; a >= 0; a--) {\n\n        // get an annotation\n        var annotation = annotations[a];\n\n        // check that the annotation is for the workgroup id we are looking for\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n\n          // check that the annotation is a score annotation\n          if (annotation.type === 'score' || annotation.type === \"autoScore\") {\n\n            var nodeId = annotation.nodeId;\n            var componentId = annotation.componentId;\n            var data = annotation.data;\n\n            // make sure the annotation is for an active component\n            if (this.ProjectService.isActive(nodeId, componentId)) {\n\n              var scoreFound = nodeId + '-' + componentId;\n\n              // check if we have obtained a score from this component already\n              if (scoresFound.indexOf(scoreFound) == -1) {\n                // we have not obtained a score from this component yet\n\n                if (data != null) {\n                  var value = data.value;\n\n                  if (!isNaN(value)) {\n\n                    if (totalScore == null) {\n                      totalScore = value;\n                    } else {\n                      totalScore += value;\n                    }\n\n                    /*\n                     * remember that we have found a score for this component\n                     * so that we don't double count it if the teacher scored\n                     * the component more than once\n                     */\n                    scoresFound.push(scoreFound);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return totalScore;\n  }\n\n  /**\n   * Get the score for a workgroup for a node\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @returns the score for a workgroup for a node\n   */\n  getScore(workgroupId, nodeId) {\n\n    var score = null;\n\n    /*\n     * an array to keep track of the components that we have obtained a\n     * score for. we do not want to double count components if the student\n     * has received a score multiple times for a node from the teacher.\n     */\n    var scoresFound = [];\n\n    // get all the annotations\n    var annotations = this.annotations;\n\n    if (workgroupId != null && nodeId != null) {\n      // loop through all the annotations from newest to oldest\n      for (var a = annotations.length - 1; a >= 0; a--) {\n\n        // get an annotation\n        var annotation = annotations[a];\n\n        // check that the annotation is for the workgroup id we are looking for\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n\n          // check that the annotation is a score annotation\n          if (annotation.type === 'score' || annotation.type === 'autoScore') {\n\n            var tempNodeId = annotation.nodeId;\n\n            // check that the annotation is for the node we are looking for\n            if (nodeId == tempNodeId) {\n              var componentId = annotation.componentId;\n              var data = annotation.data;\n\n              var scoreFound = tempNodeId + '-' + componentId;\n\n              // check if we have obtained a score from this component already\n              if (scoresFound.indexOf(scoreFound) == -1) {\n                // we have not obtained a score from this component yet\n\n                if (data != null) {\n                  var value = data.value;\n\n                  if (!isNaN(value)) {\n\n                    if (score == null) {\n                      score = value;\n                    } else {\n                      score += value;\n                    }\n\n                    /*\n                     * remember that we have found a score for this component\n                     * so that we don't double count it if the teacher scored\n                     * the component more than once\n                     */\n                    scoresFound.push(scoreFound);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return score;\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\n    var annotationId = null;\n    var fromWorkgroupId = null;\n    var studentWorkId = null;\n    var localNotebookItemId = null;\n    var notebookItemId = null;\n    var annotationType = 'autoScore';\n    var clientSaveTime = Date.parse(new Date());\n\n    var annotation = this.createAnnotation(\n      annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n      nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n      annotationType, data, clientSaveTime\n    );\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data) {\n    var annotationId = null;\n    var fromWorkgroupId = null;\n    var studentWorkId = null;\n    var localNotebookItemId = null;\n    var notebookItemId = null;\n    var annotationType = 'autoComment';\n    var clientSaveTime = Date.parse(new Date());\n\n    var annotation = this.createAnnotation(\n      annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n      nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n      annotationType, data, clientSaveTime\n    );\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param fromWorkgroupId the teacher workgroup id\n   * @param toWorkgroupId the student workgroup id\n   * @param studentWorkId the component state id\n   * @param data the annotation data\n   * @returns the inappropriate flag annotation\n   */\n  createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId, fromWorkgroupId, toWorkgroupId, studentWorkId, data) {\n    var annotationId = null;\n    var localNotebookItemId = null;\n    var notebookItemId = null;\n    var annotationType = 'inappropriateFlag';\n    var clientSaveTime = Date.parse(new Date());\n\n    var annotation = this.createAnnotation(\n      annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n      nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n      annotationType, data, clientSaveTime\n    );\n\n    return annotation;\n  }\n\n  /**\n   * Get the latest annotations for a given component (as an object)\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @return object containing the component's latest score and comment annotations\n   */\n  getLatestComponentAnnotations(nodeId, componentId, workgroupId, scoreType, commentType) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n\n    // get the latest score annotation for this component\n    latestScoreAnnotation = this.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n    // get the latest comment annotation for this component\n    latestCommentAnnotation = this.getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest annotations for a given notebook item (as an object)\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemAnnotations(workgroupId, localNotebookItemId) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n\n    // get the latest score annotation for this component\n    latestScoreAnnotation = this.getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId);\n\n    // get the latest comment annotation for this component\n    latestCommentAnnotation = this.getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest score annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId) {\n\n    let annotations = this.getAnnotations();\n\n    // loop through all the annotations from newest to oldest\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n\n      if (annotation != null && annotation.type === \"score\" && annotation.notebookItemId != null &&\n        annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the latest comment annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId) {\n\n    let annotations = this.getAnnotations();\n\n    // loop through all the annotations from newest to oldest\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n\n      if (annotation != null && annotation.type === \"comment\" && annotation.notebookItemId != null &&\n        annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Get the latest score annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @returns the latest score annotation\n   */\n  getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType) {\n\n    var annotation = null;\n\n    var annotations = this.getAnnotations();\n\n    if (scoreType == null) {\n      // default to 'any'\n      scoreType = 'any';\n    }\n\n    // loop through all the annotations from newest to oldest\n    for (var a = annotations.length - 1; a >= 0; a--) {\n      var tempAnnotation = annotations[a];\n\n      if (tempAnnotation != null) {\n        var acceptAnnotation = false;\n        var tempNodeId = tempAnnotation.nodeId;\n        var tempComponentId = tempAnnotation.componentId;\n        var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        var tempAnnotationType = tempAnnotation.type;\n\n        // make sure the annotation values match what we are looking for\n        if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\n\n          if (scoreType === 'any' && (tempAnnotationType === 'autoScore' || tempAnnotationType === 'score')) {\n            // we are looking for an auto score or teacher score and have found one\n            acceptAnnotation = true;\n          } else if (scoreType === 'autoScore' && tempAnnotationType === 'autoScore') {\n            // we are looking for an auto score and have found one\n            acceptAnnotation = true;\n          } else if (scoreType === 'score' && tempAnnotationType === 'score') {\n            // we are looking for a teacher score and have found one\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            // we have found the latest score annotation of the type we want\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n\n    return annotation;\n  }\n\n  /**\n   * Get the latest comment annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @returns the latest comment annotation\n   */\n  getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType) {\n\n    var annotation = null;\n\n    var annotations = this.getAnnotations();\n\n    if (commentType == null) {\n      // default to 'any'\n      commentType = 'any';\n    }\n\n    // loop through all the annotations from newest to oldest\n    for (var a = annotations.length - 1; a >= 0; a--) {\n      var tempAnnotation = annotations[a];\n\n      if (tempAnnotation != null) {\n        var acceptAnnotation = false;\n        var tempNodeId = tempAnnotation.nodeId;\n        var tempComponentId = tempAnnotation.componentId;\n        var tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        var tempAnnotationType = tempAnnotation.type;\n\n        // make sure the annotation values match what we are looking for\n        if (nodeId == tempNodeId && componentId == tempComponentId && workgroupId == tempToWorkgroupId) {\n\n          if (commentType === 'any' && (tempAnnotationType === 'autoComment' || tempAnnotationType === 'comment')) {\n            // we are looking for an auto comment or teacher comment and have found one\n            acceptAnnotation = true;\n          } else if (commentType === 'autoComment' && tempAnnotationType === 'autoComment') {\n            // we are looking for an auto comment and have found one\n            acceptAnnotation = true;\n          } else if (commentType === 'comment' && tempAnnotationType === 'comment') {\n            // we are looking for a teacher comment and have found one\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            // we have found the latest comment annotation of the type we want\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n\n    return annotation;\n  }\n\n  /**\n   * Get the score value from the score annotation\n   * @param scoreAnnotation a score annotation\n   * @returns the score value e.g. 5\n   */\n  getScoreValueFromScoreAnnotation(scoreAnnotation) {\n    var scoreValue = null;\n\n    if (scoreAnnotation != null) {\n      var data = scoreAnnotation.data;\n\n      if (data != null) {\n        scoreValue = data.value;\n      }\n    }\n\n    return scoreValue;\n  }\n\n  /**\n   * Get all global annotations that are active and inactive for a specified node and component\n   * @returns all global annotations that are active and inactive for a specified node and component\n   */\n  getAllGlobalAnnotationsByNodeIdAndComponentId(nodeId, componentId) {\n    let allGlobalAnnotations = this.getAllGlobalAnnotations();\n    let globalAnnotationsByNodeIdAndComponentId = allGlobalAnnotations.filter((globalAnnotation) => {\n      return globalAnnotation.nodeId === nodeId && globalAnnotation.componentId === componentId;\n    });\n    return globalAnnotationsByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotations() {\n    let globalAnnotations = [];\n\n    for (let a = 0; a < this.annotations.length; a++) {\n      let annotation = this.annotations[a];\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          globalAnnotations.push(annotation);\n        }\n      }\n    }\n\n    return globalAnnotations;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive and groups them by annotation group name\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotationGroups() {\n    let globalAnnotationGroups = [];\n\n    for (let a = 0; a < this.annotations.length; a++) {\n      let annotation = this.annotations[a];\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null && annotation.data.annotationGroupCreatedTime != null) {\n            let sameGroupFound = false;\n            for (let g = 0; g < globalAnnotationGroups.length; g++) {\n              let globalAnnotationGroup = globalAnnotationGroups[g];\n              if (globalAnnotationGroup.annotationGroupNameAndTime == (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                globalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupNameAndTime\": (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime),\n                \"annotations\": [annotation]\n              };\n              globalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(this.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n\n    return globalAnnotationGroups;\n  };\n\n  /**\n   * Get all global annotations that are active\n   * @returns all global annotations that are active, in a group\n   * [\n   * {\n     *   annotationGroupName:\"score1\",\n     *   annotations:[\n     *   {\n     *     type:autoScore,\n     *     value:1\n     *   },\n     *   {\n     *     type:autoComment,\n     *     value:\"you received a score of 1.\"\n     *   }\n     *   ]\n     * },\n   * {\n     *   annotationGroupName:\"score2\",\n     *   annotations:[...]\n     * }\n   * ]\n   */\n  getActiveGlobalAnnotationGroups() {\n    return this.activeGlobalAnnotationGroups;\n  };\n\n  /**\n   * Calculates the active global annotations and groups them by annotation group name\n   */\n  calculateActiveGlobalAnnotationGroups() {\n    this.activeGlobalAnnotationGroups = [];\n\n    for (let a = 0; a < this.annotations.length; a++) {\n      let annotation = this.annotations[a];\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp == null) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null) {\n            let sameGroupFound = false;\n            for (let ag = 0; ag < this.activeGlobalAnnotationGroups.length; ag++) {\n              let activeGlobalAnnotationGroup = this.activeGlobalAnnotationGroups[ag];\n              if (activeGlobalAnnotationGroup.annotationGroupName == (annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                activeGlobalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupName\": annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime,\n                \"annotations\": [annotation],\n                \"nodeId\": annotation.nodeId,\n                \"componentId\": annotation.componentId,\n                \"serverSaveTime\": annotation.serverSaveTime\n              };\n              this.activeGlobalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(his.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get all global annotations that are in-active\n   * @returns all global annotations that are in-active\n   * In-active global annotations has data.isGlobal = false and data.unGlobalizedTimestamp is set.\n   */\n  getInActiveGlobalAnnotations() {\n    let inActiveGlobalAnnotations = [];\n\n    for (let a = 0; a < this.annotations.length; a++) {\n      let annotation = this.annotations[a];\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp != null) {\n          inActiveGlobalAnnotations.push(annotation);\n        }\n      }\n    }\n\n    return inActiveGlobalAnnotations;\n  };\n\n  /**\n   * Get the latest teacher score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher score annotation for the student work\n   */\n  getLatestTeacherScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'score');\n  }\n\n  /**\n   * Get the latest teacher comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher comment annotation for the student work\n   */\n  getLatestTeacherCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'comment');\n  }\n\n  /**\n   * Get the latest auto score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto score annotation for the student work\n   */\n  getLatestAutoScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoScore');\n  }\n\n  /**\n   * Get the latest auto comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto comment annotation for the student work\n   */\n  getLatestAutoCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoComment');\n  }\n\n  /**\n   * Get the latest annotation for the given student work and annotation type\n   * @param studentWorkId the student work id\n   * @param type the type of annotation\n   * @return the latest annotation for the given student work and annotation type\n   */\n  getLatestAnnotationByStudentWorkIdAndType(studentWorkId, type) {\n\n    // loop through all the annotations backwards\n    for (var a = this.annotations.length - 1; a >= 0; a--) {\n\n      // get an annotation\n      var annotation = this.annotations[a];\n\n      if (annotation != null) {\n        if (studentWorkId == annotation.studentWorkId && type == annotation.type) {\n          /*\n           * we have found an annotation with the given student work\n           * id and annotation type\n           */\n          return annotation;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the annotations for the given student work\n   * @param studentWorkId the student work id\n   * @return array of annotations for the given student work\n   */\n  getAnnotationsByStudentWorkId(studentWorkId) {\n    let annotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation && studentWorkId == annotation.studentWorkId) {\n        annotations.push(annotation);\n      }\n    }\n    return annotations;\n  }\n}\n\nAnnotationService.$inject = [\n  '$filter',\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default AnnotationService;\n"]}