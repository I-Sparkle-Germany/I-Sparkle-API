{"version":3,"sources":["authorWebSocketService.es6"],"names":["AuthorWebSocketService","$rootScope","$websocket","ConfigService","dataStream","webSocketURL","getWebSocketURL","getProjectId","onMessage","message","handleMessage","data","JSON","parse","messageType","$broadcast","currentAuthorsUsernames","messageJSON","send","$inject"],"mappings":";;;;;;;;;;IAAMA,sB;AACJ,kCAAYC,UAAZ,EAAwBC,UAAxB,EAAoCC,aAApC,EAAmD;AAAA;;AACjD,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAED;;;;;;;iCAGa;AAAA;;AACX;AACA,UAAMC,eAAe,KAAKF,aAAL,CAAmBG,eAAnB,KACjB,aADiB,GACD,KAAKH,aAAL,CAAmBI,YAAnB,EADpB;AAEA,WAAKH,UAAL,GAAkB,KAAKF,UAAL,CAAgBG,YAAhB,CAAlB;AACA;AACA,WAAKD,UAAL,CAAgBI,SAAhB,CAA0B,UAACC,OAAD,EAAa;AACrC,cAAKC,aAAL,CAAmBD,OAAnB;AACD,OAFD;AAGD;;;kCAEaA,O,EAAS;AACrB,UAAIE,OAAOC,KAAKC,KAAL,CAAWJ,QAAQE,IAAnB,CAAX;AACA,UAAIG,cAAcH,KAAKG,WAAvB;AACA,UAAIA,gBAAgB,gBAApB,EAAsC;AACpC,aAAKb,UAAL,CAAgBc,UAAhB,CAA2B,wBAA3B,EAAqD,EAACC,yBAAyBL,KAAKK,uBAA/B,EAArD;AACD;AAEF;;;gCAEWC,W,EAAa;AACvB;AACA,WAAKb,UAAL,CAAgBc,IAAhB,CAAqBD,WAArB;AACD;;;;;;AAGHjB,uBAAuBmB,OAAvB,GAAiC,CAC/B,YAD+B,EAE/B,YAF+B,EAG/B,eAH+B,CAAjC;;kBAMenB,sB","file":"authorWebSocketService.js","sourcesContent":["class AuthorWebSocketService {\n  constructor($rootScope, $websocket, ConfigService) {\n    this.$rootScope = $rootScope;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.dataStream = null;\n  }\n\n  /**\n   * Initialize the websocket connection\n   */\n  initialize() {\n    // start the websocket connection\n    const webSocketURL = this.ConfigService.getWebSocketURL() +\n        \"?projectId=\" + this.ConfigService.getProjectId();\n    this.dataStream = this.$websocket(webSocketURL);\n    // this is the function that handles messages we receive from web sockets\n    this.dataStream.onMessage((message) => {\n      this.handleMessage(message);\n    });\n  };\n\n  handleMessage(message) {\n    let data = JSON.parse(message.data);\n    let messageType = data.messageType;\n    if (messageType === \"currentAuthors\") {\n      this.$rootScope.$broadcast('currentAuthorsReceived', {currentAuthorsUsernames: data.currentAuthorsUsernames});\n    }\n\n  };\n\n  sendMessage(messageJSON) {\n    // send the websocket message\n    this.dataStream.send(messageJSON);\n  }\n}\n\nAuthorWebSocketService.$inject = [\n  '$rootScope',\n  '$websocket',\n  'ConfigService'\n];\n\nexport default AuthorWebSocketService;\n"]}