{"version":3,"sources":["authorWebSocketService.es6"],"names":["AuthorWebSocketService","$rootScope","$websocket","ConfigService","dataStream","webSocketURL","getWebSocketURL","onMessage","message","handleMessage","data","JSON","parse","messageType","handleStudentStatusReceived","handleStudentsOnlineReceived","handleStudentDisconnected","projectId","messageJSON","username","getUserInfo","myUserInfo","userName","sendMessage","send","studentsOnlineMessage","studentsOnlineArray","studentsOnlineList","$broadcast","studentsOnline","studentStatus","workgroupId","StudentStatusService","setStudentStatusForWorkgroupId","$emit","studentDisconnectedMessage","periodId","messageParticipants","$inject"],"mappings":";;;;;;;;;;IAAMA,sB;AACF,oCAAYC,UAAZ,EAAwBC,UAAxB,EAAoCC,aAApC,EAAmD;AAAA;;AAC/C,aAAKF,UAAL,GAAkBA,UAAlB;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACH;;AAED;;;;;;;qCAGa;AAAA;;AACT;AACA,gBAAIC,eAAe,KAAKF,aAAL,CAAmBG,eAAnB,EAAnB;AACA,iBAAKF,UAAL,GAAkB,KAAKF,UAAL,CAAgBG,YAAhB,CAAlB;;AAEA;AACA,iBAAKD,UAAL,CAAgBG,SAAhB,CAA0B,UAACC,OAAD,EAAa;AACnC,sBAAKC,aAAL,CAAmBD,OAAnB;AACH,aAFD;AAGH;;;sCAEaA,O,EAAS;AACnB;AACA,gBAAIE,OAAOC,KAAKC,KAAL,CAAWJ,QAAQE,IAAnB,CAAX;AACA,gBAAIG,cAAcH,KAAKG,WAAvB;;AAEA,gBAAIA,gBAAgB,eAApB,EAAqC;AACjC,qBAAKC,2BAAL,CAAiCJ,IAAjC;AACH,aAFD,MAEO,IAAIG,gBAAgB,oBAApB,EAA0C;AAC7C,qBAAKE,4BAAL,CAAkCL,IAAlC;AACH,aAFM,MAEA,IAAIG,gBAAgB,kBAApB,EAAwC,CAE9C,CAFM,MAEA,IAAIA,gBAAgB,qBAApB,EAA2C;AAC9C,qBAAKG,yBAAL,CAA+BN,IAA/B;AACH;AACJ;;;iDAEwBO,S,EAAW;AAChC,gBAAIA,aAAa,IAAjB,EAAuB;AACnB;AACA,oBAAIC,cAAc,EAAlB;;AAEAA,4BAAYL,WAAZ,GAA0B,oBAA1B;AACAK,4BAAYD,SAAZ,GAAwBA,SAAxB;AACAC,4BAAYC,QAAZ,GAAuB,KAAKhB,aAAL,CAAmBiB,WAAnB,GAAiCC,UAAjC,CAA4CC,QAAnE;;AAEA;AACA,qBAAKC,WAAL,CAAiBL,WAAjB;AACH;AACJ;;;oCAEWA,W,EAAa;AACrB;AACA,iBAAKd,UAAL,CAAgBoB,IAAhB,CAAqBN,WAArB;AACH;;;qDAE4BO,qB,EAAuB;AAChD,iBAAKC,mBAAL,GAA2BD,sBAAsBE,kBAAjD;;AAEA,iBAAK1B,UAAL,CAAgB2B,UAAhB,CAA2B,wBAA3B,EAAqD,EAACC,gBAAgB,KAAKH,mBAAtB,EAArD;AACH;;;4CAEmB;AAChB,gBAAIG,iBAAiB,EAArB;AACA,gBAAI,KAAKH,mBAAL,IAA4B,IAAhC,EAAsC;AAClCG,iCAAiB,KAAKH,mBAAtB;AACH;AACD,mBAAOG,cAAP;AACH;;;;;AAED;;;;oDAI4BC,a,EAAe;AACvC,gBAAIC,cAAcD,cAAcC,WAAhC;;AAEA;AACA,iBAAKC,oBAAL,CAA0BC,8BAA1B,CAAyDF,WAAzD,EAAsED,aAAtE;;AAEA;AACA,iBAAK7B,UAAL,CAAgBiC,KAAhB,CAAsB,uBAAtB,EAA+C,EAACJ,eAAeA,aAAhB,EAA/C;AACH;;;;;AAED;;;kDAG0BK,0B,EAA4B;;AAElD;AACA,iBAAKlC,UAAL,CAAgB2B,UAAhB,CAA2B,qBAA3B,EAAkD,EAAClB,MAAMyB,0BAAP,EAAlD;AACH;;AAED;;;;;;;;qCAKaC,Q,EAAU;;AAEnB;AACA,gBAAIlB,cAAc,EAAlB;;AAEAA,wBAAYL,WAAZ,GAA0B,aAA1B;;AAEA,gBAAGuB,YAAY,IAAZ,IAAoBA,YAAY,CAAC,CAApC,EAAuC;AACnC;AACAlB,4BAAYmB,mBAAZ,GAAkC,wBAAlC;AACH,aAHD,MAGO,IAAGD,YAAY,IAAf,EAAqB;AACxB;AACAlB,4BAAYkB,QAAZ,GAAuBA,QAAvB;AACAlB,4BAAYmB,mBAAZ,GAAkC,2BAAlC;AACH;;AAED;AACA,iBAAKd,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;;uCAKekB,Q,EAAU;;AAErB;AACA,gBAAIlB,cAAc,EAAlB;;AAEAA,wBAAYL,WAAZ,GAA0B,eAA1B;;AAEA,gBAAGuB,YAAY,IAAZ,IAAoBA,YAAY,CAAC,CAApC,EAAuC;AACnC;AACAlB,4BAAYmB,mBAAZ,GAAkC,wBAAlC;AACH,aAHD,MAGO,IAAGD,YAAY,IAAf,EAAqB;AACxB;AACAlB,4BAAYkB,QAAZ,GAAuBA,QAAvB;AACAlB,4BAAYmB,mBAAZ,GAAkC,2BAAlC;AACH;;AAED;AACA,iBAAKd,WAAL,CAAiBL,WAAjB;AACH;;;;;;AAGLlB,uBAAuBsC,OAAvB,GAAiC,CAAC,YAAD,EAAe,YAAf,EAA6B,eAA7B,CAAjC;;kBAEetC,sB","file":"authorWebSocketService.js","sourcesContent":["class AuthorWebSocketService {\n    constructor($rootScope, $websocket, ConfigService) {\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize() {\n        // start the websocket connection\n        var webSocketURL = this.ConfigService.getWebSocketURL();\n        this.dataStream = this.$websocket(webSocketURL);\n\n        // this is the function that handles messages we receive from web sockets\n        this.dataStream.onMessage((message) => {\n            this.handleMessage(message);\n        });\n    };\n\n    handleMessage(message) {\n        debugger;\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'studentStatus') {\n            this.handleStudentStatusReceived(data);\n        } else if (messageType === 'studentsOnlineList') {\n            this.handleStudentsOnlineReceived(data);\n        } else if (messageType === 'studentConnected') {\n\n        } else if (messageType === 'studentDisconnected') {\n            this.handleStudentDisconnected(data);\n        }\n    };\n\n    notifyAuthorProjectBegin(projectId) {\n        if (projectId != null) {\n            // create the websocket message\n            let messageJSON = {};\n\n            messageJSON.messageType = 'authorProjectBegin';\n            messageJSON.projectId = projectId;\n            messageJSON.username = this.ConfigService.getUserInfo().myUserInfo.userName;\n\n            // send the websocket message\n            this.sendMessage(messageJSON);\n        }\n    }\n\n    sendMessage(messageJSON) {\n        // send the websocket message\n        this.dataStream.send(messageJSON);\n    }\n\n    handleStudentsOnlineReceived(studentsOnlineMessage) {\n        this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n\n        this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n    };\n\n    getStudentsOnline() {\n        var studentsOnline = [];\n        if (this.studentsOnlineArray != null) {\n            studentsOnline = this.studentsOnlineArray;\n        }\n        return studentsOnline;\n    };\n\n    /**\n     * This function is called when the teacher receives a websocket message\n     * with messageType 'studentStatus'.\n     */\n    handleStudentStatusReceived(studentStatus) {\n        var workgroupId = studentStatus.workgroupId;\n\n        // update the student status for the workgroup\n        this.StudentStatusService.setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n\n        // fire the student status received event\n        this.$rootScope.$emit('studentStatusReceived', {studentStatus: studentStatus});\n    };\n\n    /**\n     * Handle the student disconnected message\n     */\n    handleStudentDisconnected(studentDisconnectedMessage) {\n\n        // fire the student disconnected event\n        this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n    }\n\n    /**\n     * Pause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will pause\n     * all the periods\n     */\n    pauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'pauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to pause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to pause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n\n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n\n    /**\n     * Unpause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will unpause\n     * all the periods\n     */\n    unPauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'unPauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to unpause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to unpause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n        \n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n}\n\nAuthorWebSocketService.$inject = ['$rootScope', '$websocket', 'ConfigService'];\n\nexport default AuthorWebSocketService;\n"]}