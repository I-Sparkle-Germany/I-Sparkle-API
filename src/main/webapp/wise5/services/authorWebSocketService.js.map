{"version":3,"sources":["authorWebSocketService.es6"],"names":[],"mappings":"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","file":"authorWebSocketService.js","sourcesContent":["class AuthorWebSocketService {\n    constructor($rootScope, $websocket, ConfigService) {\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize(projectId) {\n        // start the websocket connection\n        var webSocketURL = this.ConfigService.getWebSocketURL() + \"?projectId=\" + projectId;\n        this.dataStream = this.$websocket(webSocketURL);\n\n        // this is the function that handles messages we receive from web sockets\n        this.dataStream.onMessage((message) => {\n            this.handleMessage(message);\n        });\n    };\n\n    handleMessage(message) {\n        debugger;\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'studentStatus') {\n            this.handleStudentStatusReceived(data);\n        } else if (messageType === 'studentsOnlineList') {\n            this.handleStudentsOnlineReceived(data);\n        } else if (messageType === 'studentConnected') {\n\n        } else if (messageType === 'studentDisconnected') {\n            this.handleStudentDisconnected(data);\n        }\n    };\n\n    notifyAuthorProjectBegin(projectId) {\n        if (projectId != null) {\n            // create the websocket message\n            let messageJSON = {};\n\n            messageJSON.messageType = 'authorProjectBegin';\n            messageJSON.projectId = projectId;\n            messageJSON.username = this.ConfigService.getUserInfo().myUserInfo.userName;\n\n            // send the websocket message\n            this.sendMessage(messageJSON);\n        }\n    }\n\n    sendMessage(messageJSON) {\n        // send the websocket message\n        this.dataStream.send(messageJSON);\n    }\n\n    handleStudentsOnlineReceived(studentsOnlineMessage) {\n        this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n\n        this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n    };\n\n    getStudentsOnline() {\n        var studentsOnline = [];\n        if (this.studentsOnlineArray != null) {\n            studentsOnline = this.studentsOnlineArray;\n        }\n        return studentsOnline;\n    };\n\n    /**\n     * This function is called when the teacher receives a websocket message\n     * with messageType 'studentStatus'.\n     */\n    handleStudentStatusReceived(studentStatus) {\n        var workgroupId = studentStatus.workgroupId;\n\n        // update the student status for the workgroup\n        this.StudentStatusService.setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n\n        // fire the student status received event\n        this.$rootScope.$emit('studentStatusReceived', {studentStatus: studentStatus});\n    };\n\n    /**\n     * Handle the student disconnected message\n     */\n    handleStudentDisconnected(studentDisconnectedMessage) {\n\n        // fire the student disconnected event\n        this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n    }\n\n    /**\n     * Pause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will pause\n     * all the periods\n     */\n    pauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'pauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to pause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to pause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n\n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n\n    /**\n     * Unpause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will unpause\n     * all the periods\n     */\n    unPauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'unPauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to unpause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to unpause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n        \n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n}\n\nAuthorWebSocketService.$inject = ['$rootScope', '$websocket', 'ConfigService'];\n\nexport default AuthorWebSocketService;\n"]}