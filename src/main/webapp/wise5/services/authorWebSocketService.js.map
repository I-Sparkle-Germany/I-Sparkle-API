{"version":3,"sources":["authorWebSocketService.es6"],"names":["AuthorWebSocketService","$rootScope","$stomp","$websocket","ConfigService","dataStream","webSocketURL","getWebSocketURL","connect","payload","headers","res","console","log","e","projectId","currentAuthorsSubscription","subscribe","message","data","JSON","parse","messageType","$broadcast","currentAuthorsUsernames","messageJSON","send","$inject"],"mappings":";;;;;;;;;;IAAMA,sB;AACJ,kCAAYC,UAAZ,EAAwBC,MAAxB,EAAgCC,UAAhC,EAA4CC,aAA5C,EAA2D;AAAA;;AACzD,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAED;;;;;;;iCAGa;AACX,UAAMC,eAAe,KAAKF,aAAL,CAAmBG,eAAnB,EAArB;AACA,UAAI;AACF,aAAKL,MAAL,CAAYM,OAAZ,CAAoBF,YAApB,EAAkC,UAACG,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AAC3DC,kBAAQC,GAAR,uBAAgCJ,OAAhC;AACD,SAFD,EAEG,EAFH;AAGD,OAJD,CAIE,OAAMK,CAAN,EAAS;AACTF,gBAAQC,GAAR,CAAYC,CAAZ;AACD;AACF;;;8CAEyBC,S,EAAW;AACnC,UAAI;AACF,YAAMC,6BAA6B,KAAKd,MAAL,CAAYe,SAAZ,6BAAgDF,SAAhD,EAA6D,UAACN,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AACzHC,kBAAQC,GAAR,gBAAyBJ,OAAzB;AACD,SAFkC,EAEhC,EAFgC,CAAnC;AAGD,OAJD,CAIE,OAAMK,CAAN,EAAS;AACTF,gBAAQC,GAAR,CAAYC,CAAZ;AACD;AACF;;;kCAEaI,O,EAAS;AACrB,UAAIC,OAAOC,KAAKC,KAAL,CAAWH,QAAQC,IAAnB,CAAX;AACA,UAAIG,cAAcH,KAAKG,WAAvB;AACA,UAAIA,gBAAgB,gBAApB,EAAsC;AACpC,aAAKrB,UAAL,CAAgBsB,UAAhB,CAA2B,wBAA3B,EACI,EAACC,yBAAyBL,KAAKK,uBAA/B,EADJ;AAED;AACF;;;gCAEWC,W,EAAa;AACvB,WAAKpB,UAAL,CAAgBqB,IAAhB,CAAqBD,WAArB;AACD;;;;;;AAGHzB,uBAAuB2B,OAAvB,GAAiC,CAC/B,YAD+B,EAE/B,QAF+B,EAG/B,YAH+B,EAI/B,eAJ+B,CAAjC;;kBAOe3B,sB","file":"authorWebSocketService.js","sourcesContent":["class AuthorWebSocketService {\n  constructor($rootScope, $stomp, $websocket, ConfigService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.dataStream = null;\n  }\n\n  /**\n   * Initialize the websocket connection and listens for messages\n   */\n  initialize() {\n    const webSocketURL = this.ConfigService.getWebSocketURL();\n    try {\n      this.$stomp.connect(webSocketURL, (payload, headers, res) => {\n        console.log(`Current Authors: ${payload}`);\n      }, {});\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  subscribeToCurrentAuthors(projectId) {\n    try {\n      const currentAuthorsSubscription = this.$stomp.subscribe(`/topic/current-authors/${projectId}`, (payload, headers, res) => {\n        console.log(`Greeting: ${payload}`);\n      }, {});\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  handleMessage(message) {\n    let data = JSON.parse(message.data);\n    let messageType = data.messageType;\n    if (messageType === \"currentAuthors\") {\n      this.$rootScope.$broadcast('currentAuthorsReceived',\n          {currentAuthorsUsernames: data.currentAuthorsUsernames});\n    }\n  }\n\n  sendMessage(messageJSON) {\n    this.dataStream.send(messageJSON);\n  }\n}\n\nAuthorWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService'\n];\n\nexport default AuthorWebSocketService;\n"]}