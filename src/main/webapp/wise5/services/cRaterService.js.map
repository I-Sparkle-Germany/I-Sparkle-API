{"version":3,"sources":["cRaterService.es6"],"names":[],"mappings":"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","file":"cRaterService.js","sourcesContent":["class CRaterService {\n    constructor($http, ConfigService) {\n        this.$http = $http;\n        this.ConfigService = ConfigService;\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterRequestType the CRater request type 'scoring' or 'verify'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterRequest(cRaterItemType, \n            cRaterItemId, \n            cRaterRequestType, \n            cRaterResponseId, \n            studentData) {\n        \n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = this.ConfigService.getCRaterRequestURL();\n        httpParams.params = {\n            cRaterItemType: cRaterItemType,\n            itemId: cRaterItemId,\n            cRaterRequestType: cRaterRequestType,\n            responseId: cRaterResponseId,\n            studentData: studentData,\n            wiseRunMode: 'preview'\n        };\n        \n        // make the CRater request\n        return this.$http(httpParams).then((response) => {\n            return response;\n        });\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterScoringRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'scoring';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Make a CRater request to verifythe item type and item id\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterVerifyRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'verify';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Get the CRater item type from the component\n     * @param component the component content\n     */\n    getCRaterItemType(component) {\n        var cRaterItemType = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemType = component.cRater.itemType;\n        }\n        \n        return cRaterItemType;\n    }\n    \n    /**\n     * Get the CRater item id from the component\n     * @param component the component content\n     */\n    getCRaterItemId(component) {\n        var cRaterItemId = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemId = component.cRater.itemId;\n        }\n        \n        return cRaterItemId;\n    }\n    \n    /**\n     * Find when we should perform the CRater scoring\n     * @param component the component content\n     * @returns when to perform the CRater scoring e.g. 'submit', 'save', 'change', 'exit'\n     */\n    getCRaterScoreOn(component) {\n        var scoreOn = null;\n        \n        if (component != null && component.cRater != null) {\n            scoreOn = component.cRater.scoreOn;\n        }\n        \n        return scoreOn;\n    }\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @param component the component content\n     */\n    isCRaterEnabled(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // get the item type and item id\n            var cRaterItemType = this.getCRaterItemType(component);\n            var cRaterItemId = this.getCRaterItemId(component);\n            \n            if (cRaterItemType != null && cRaterItemId != null) {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on save\n     * @param component the component content\n     * @returns whether the CRater is set to score on save\n     */\n    isCRaterScoreOnSave(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'save') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on submit\n     * @param component the component content\n     * @returns whether the CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'submit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on change\n     * @param component the component content\n     * @returns whether the CRater is set to score on change\n     */\n    isCRaterScoreOnChange(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'change') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on exit\n     * @param component the component content\n     * @returns whether the CRater is set to score on exit\n     */\n    isCRaterScoreOnExit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'exit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get the CRater scoring rule by score\n     * @param component the component content\n     * @param score the score\n     * @returns the scoring rule for the given score\n     */\n    getCRaterScoringRuleByScore(component, score) {\n        var scoringRule = null;\n        \n        if (component != null && score != null) {\n            var cRater = component.cRater;\n            \n            if (cRater != null) {\n                var scoringRules = cRater.scoringRules;\n                \n                if (scoringRules != null) {\n                    \n                    // loop through all the scoring rules\n                    for (var s = 0; s < scoringRules.length; s++) {\n                        var tempScoringRule = scoringRules[s];\n                        \n                        if (tempScoringRule != null) {\n                            \n                            if (tempScoringRule.score == score) {\n                                /*\n                                 * the score matches so we have found\n                                 * the scoring rule that we want\n                                 */\n                                scoringRule = tempScoringRule;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return scoringRule;\n    }\n    \n    /**\n     * Get the feedback text for the given score\n     * @param component the component content\n     * @param score the score we want feedback for\n     * @returns the feedback text for the given score\n     */\n    getCRaterFeedbackTextByScore(component, score) {\n        \n        var feedbackText = null;\n        \n        // get the scoring rule for the given score\n        var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n        \n        if (scoringRule != null) {\n            // get the feedback text\n            feedbackText = scoringRule.feedbackText;\n        }\n        \n        return feedbackText;\n    }\n\n    /**\n     * Get the notification for the given score, if exists.\n     * @param component the component content\n     * @param score the score we want notification for\n     * @returns the notification for the given score\n     */\n    getNotificationsByScore(component, score) {\n\n        var notifications = null;\n\n        // get the scoring rule for the given score\n        var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n\n        if (scoringRule != null) {\n            // get the feedback text\n            notifications = scoringRule.notifications;\n        }\n\n        return notifications;\n    }\n}\n\nCRaterService.$inject = [\n    '$http',\n    'ConfigService'\n];\n\nexport default CRaterService;"]}