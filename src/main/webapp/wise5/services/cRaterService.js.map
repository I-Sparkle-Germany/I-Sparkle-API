{"version":3,"sources":["cRaterService.es6"],"names":["CRaterService","$http","ConfigService","cRaterItemType","cRaterItemId","cRaterRequestType","cRaterResponseId","studentData","httpParams","method","url","getCRaterRequestURL","params","itemId","responseId","wiseRunMode","then","response","Date","getTime","makeCRaterRequest","component","cRater","itemType","scoreOn","enableCRater","hasOwnProperty","result","getCRaterItemType","getCRaterItemId","getCRaterScoreOn","score","scoringRule","scoringRules","s","length","tempScoringRule","feedbackText","getCRaterScoringRuleByScore","previousScore","currentScore","getMultipleAttemptCRaterScoringRuleByScore","multipleAttemptScoringRules","m","multipleAttemptScoringRule","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","$inject"],"mappings":"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","file":"cRaterService.js","sourcesContent":["class CRaterService {\n  constructor($http, ConfigService) {\n    this.$http = $http;\n    this.ConfigService = ConfigService;\n  }\n\n  /**\n   * Make a CRater request to score student data\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterRequestType the CRater request type 'scoring' or 'verify'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterRequest(cRaterItemType,\n                    cRaterItemId,\n                    cRaterRequestType,\n                    cRaterResponseId,\n                    studentData) {\n\n    var httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = this.ConfigService.getCRaterRequestURL();\n    httpParams.params = {\n      cRaterItemType: cRaterItemType,\n      itemId: cRaterItemId,\n      cRaterRequestType: cRaterRequestType,\n      responseId: cRaterResponseId,\n      studentData: studentData,\n      wiseRunMode: 'preview'\n    };\n\n    // make the CRater request\n    return this.$http(httpParams).then((response) => {\n      return response;\n    });\n  }\n\n  /**\n   * Make a CRater request to score student data\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterScoringRequest(cRaterItemType,\n                           cRaterItemId,\n                           studentData) {\n\n    var cRaterRequestType = 'scoring';\n    var cRaterResponseId = new Date().getTime();\n\n    return this.makeCRaterRequest(cRaterItemType,\n      cRaterItemId,\n      cRaterRequestType,\n      cRaterResponseId,\n      studentData);\n  }\n\n  /**\n   * Make a CRater request to verifythe item type and item id\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterVerifyRequest(cRaterItemType,\n                          cRaterItemId,\n                          studentData) {\n\n    var cRaterRequestType = 'verify';\n    var cRaterResponseId = new Date().getTime();\n\n    return this.makeCRaterRequest(cRaterItemType,\n      cRaterItemId,\n      cRaterRequestType,\n      cRaterResponseId,\n      studentData);\n  }\n\n  /**\n   * Get the CRater item type from the component\n   * @param component the component content\n   */\n  getCRaterItemType(component) {\n    var cRaterItemType = null;\n\n    if (component != null && component.cRater != null) {\n      cRaterItemType = component.cRater.itemType;\n    }\n\n    return cRaterItemType;\n  }\n\n  /**\n   * Get the CRater item id from the component\n   * @param component the component content\n   */\n  getCRaterItemId(component) {\n    var cRaterItemId = null;\n\n    if (component != null && component.cRater != null) {\n      cRaterItemId = component.cRater.itemId;\n    }\n\n    return cRaterItemId;\n  }\n\n  /**\n   * Find when we should perform the CRater scoring\n   * @param component the component content\n   * @returns when to perform the CRater scoring e.g. 'submit', 'save', 'change', 'exit'\n   */\n  getCRaterScoreOn(component) {\n    var scoreOn = null;\n\n    if (component != null) {\n\n      /*\n       * CRater can be enabled in two ways\n       * 1. the enableCRater field is true\n       * 2. there is no enableCRater field but there is a cRater object (this is for legacy purposes)\n       */\n      if ((component.enableCRater && component.cRater != null) ||\n        (!component.hasOwnProperty('enableCRater') && component.cRater != null)) {\n\n        // get the score on value e.g. 'submit', 'save', 'change', or 'exit'\n        scoreOn = component.cRater.scoreOn;\n      }\n\n    }\n\n    return scoreOn;\n  }\n\n  /**\n   * Check if CRater is enabled for this component\n   * @param component the component content\n   */\n  isCRaterEnabled(component) {\n    var result = false;\n\n    if (component != null) {\n\n      // get the item type and item id\n      var cRaterItemType = this.getCRaterItemType(component);\n      var cRaterItemId = this.getCRaterItemId(component);\n\n      if (cRaterItemType != null && cRaterItemId != null) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the CRater is set to score on save\n   * @param component the component content\n   * @returns whether the CRater is set to score on save\n   */\n  isCRaterScoreOnSave(component) {\n    var result = false;\n\n    if (component != null) {\n\n      // find when we should perform the CRater scoring\n      var scoreOn = this.getCRaterScoreOn(component);\n\n      if (scoreOn != null && scoreOn === 'save') {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the CRater is set to score on submit\n   * @param component the component content\n   * @returns whether the CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit(component) {\n    var result = false;\n\n    if (component != null) {\n\n      // find when we should perform the CRater scoring\n      var scoreOn = this.getCRaterScoreOn(component);\n\n      if (scoreOn != null && scoreOn === 'submit') {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the CRater is set to score on change\n   * @param component the component content\n   * @returns whether the CRater is set to score on change\n   */\n  isCRaterScoreOnChange(component) {\n    var result = false;\n\n    if (component != null) {\n\n      // find when we should perform the CRater scoring\n      var scoreOn = this.getCRaterScoreOn(component);\n\n      if (scoreOn != null && scoreOn === 'change') {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the CRater is set to score on exit\n   * @param component the component content\n   * @returns whether the CRater is set to score on exit\n   */\n  isCRaterScoreOnExit(component) {\n    var result = false;\n\n    if (component != null) {\n\n      // find when we should perform the CRater scoring\n      var scoreOn = this.getCRaterScoreOn(component);\n\n      if (scoreOn != null && scoreOn === 'exit') {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the CRater scoring rule by score\n   * @param component the component content\n   * @param score the score\n   * @returns the scoring rule for the given score\n   */\n  getCRaterScoringRuleByScore(component, score) {\n    var scoringRule = null;\n\n    if (component != null && score != null) {\n      var cRater = component.cRater;\n\n      if (cRater != null) {\n        var scoringRules = cRater.scoringRules;\n\n        if (scoringRules != null) {\n\n          // loop through all the scoring rules\n          for (var s = 0; s < scoringRules.length; s++) {\n            var tempScoringRule = scoringRules[s];\n\n            if (tempScoringRule != null) {\n\n              if (tempScoringRule.score == score) {\n                /*\n                 * the score matches so we have found\n                 * the scoring rule that we want\n                 */\n                scoringRule = tempScoringRule;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return scoringRule;\n  }\n\n  /**\n   * Get the feedback text for the given score\n   * @param component the component content\n   * @param score the score we want feedback for\n   * @returns the feedback text for the given score\n   */\n  getCRaterFeedbackTextByScore(component, score) {\n\n    var feedbackText = null;\n\n    // get the scoring rule for the given score\n    var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n\n    if (scoringRule != null) {\n      // get the feedback text\n      feedbackText = scoringRule.feedbackText;\n    }\n\n    return feedbackText;\n  }\n\n  /**\n   * Get the feedback text for the given previous score and current score\n   * @param component the component content\n   * @param previousScore the score from the last submit\n   * @param currentScore the score from the current submit\n   * @returns the feedback text for the given previous score and current score\n   */\n  getMultipleAttemptCRaterFeedbackTextByScore(component, previousScore, currentScore) {\n\n    var feedbackText = null;\n\n    // get the scoring rule for the given score\n    var scoringRule = this.getMultipleAttemptCRaterScoringRuleByScore(component, previousScore, currentScore);\n\n    if (scoringRule != null) {\n      // get the feedback text\n      feedbackText = scoringRule.feedbackText;\n    }\n\n    return feedbackText;\n  }\n\n  /**\n   * Get the multiple attempt CRater scoring rule by previous score and\n   * current score\n   * @param component the component content\n   * @param previousScore the score from the last submit\n   * @param currentScore the score from the current submit\n   * @returns the scoring rule for the given previous score and current score\n   */\n  getMultipleAttemptCRaterScoringRuleByScore(component, previousScore, currentScore) {\n    var scoringRule = null;\n\n    if (component != null && previousScore != null && currentScore != null) {\n      var cRater = component.cRater;\n\n      if (cRater != null) {\n\n        // get the multiple attempt scoring rules\n        var multipleAttemptScoringRules = cRater.multipleAttemptScoringRules;\n\n        if (multipleAttemptScoringRules != null) {\n\n          // loop through all the multiple attempt scoring rules\n          for (var m = 0; m < multipleAttemptScoringRules.length; m++) {\n            var multipleAttemptScoringRule = multipleAttemptScoringRules[m];\n\n            if (multipleAttemptScoringRule != null) {\n\n              // get a multiple attempt scoring rule\n              var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n\n              if (scoreSequence != null) {\n\n                /*\n                 * get the expected previous score and current score\n                 * that will satisfy the rule\n                 */\n                var previousScoreMatch = scoreSequence[0];\n                var currentScoreMatch = scoreSequence[1];\n\n                if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                  currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n\n                  /*\n                   * the previous score and current score match the\n                   * expected scores so we have found the rule we want\n                   */\n                  scoringRule = multipleAttemptScoringRule;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return scoringRule;\n  }\n}\n\nCRaterService.$inject = [\n  '$http',\n  'ConfigService'\n];\n\nexport default CRaterService;\n"]}