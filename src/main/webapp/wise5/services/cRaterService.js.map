{"version":3,"sources":["cRaterService.es6"],"names":["CRaterService","$http","ConfigService","cRaterItemType","cRaterItemId","cRaterRequestType","cRaterResponseId","studentData","httpParams","method","url","getCRaterRequestURL","params","itemId","responseId","wiseRunMode","then","response","Date","getTime","makeCRaterRequest","component","cRater","itemType","scoreOn","enableCRater","hasOwnProperty","result","getCRaterItemType","getCRaterItemId","getCRaterScoreOn","score","scoringRule","scoringRules","s","length","tempScoringRule","feedbackText","getCRaterScoringRuleByScore","notifications","previousScore","currentScore","getMultipleAttemptCRaterScoringRuleByScore","multipleAttemptScoringRules","m","multipleAttemptScoringRule","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","$inject"],"mappings":"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","file":"cRaterService.js","sourcesContent":["class CRaterService {\n    constructor($http, ConfigService) {\n        this.$http = $http;\n        this.ConfigService = ConfigService;\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterRequestType the CRater request type 'scoring' or 'verify'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterRequest(cRaterItemType, \n            cRaterItemId, \n            cRaterRequestType, \n            cRaterResponseId, \n            studentData) {\n        \n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = this.ConfigService.getCRaterRequestURL();\n        httpParams.params = {\n            cRaterItemType: cRaterItemType,\n            itemId: cRaterItemId,\n            cRaterRequestType: cRaterRequestType,\n            responseId: cRaterResponseId,\n            studentData: studentData,\n            wiseRunMode: 'preview'\n        };\n        \n        // make the CRater request\n        return this.$http(httpParams).then((response) => {\n            return response;\n        });\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterScoringRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'scoring';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Make a CRater request to verifythe item type and item id\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterVerifyRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'verify';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Get the CRater item type from the component\n     * @param component the component content\n     */\n    getCRaterItemType(component) {\n        var cRaterItemType = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemType = component.cRater.itemType;\n        }\n        \n        return cRaterItemType;\n    }\n    \n    /**\n     * Get the CRater item id from the component\n     * @param component the component content\n     */\n    getCRaterItemId(component) {\n        var cRaterItemId = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemId = component.cRater.itemId;\n        }\n        \n        return cRaterItemId;\n    }\n    \n    /**\n     * Find when we should perform the CRater scoring\n     * @param component the component content\n     * @returns when to perform the CRater scoring e.g. 'submit', 'save', 'change', 'exit'\n     */\n    getCRaterScoreOn(component) {\n        var scoreOn = null;\n        \n        if (component != null) {\n            \n            /*\n             * CRater can be enabled in two ways\n             * 1. the enableCRater field is true\n             * 2. there is no enableCRater field but there is a cRater object (this is for legacy purposes)\n             */\n            if ((component.enableCRater && component.cRater != null) || \n                (!component.hasOwnProperty('enableCRater') && component.cRater != null)) {\n                \n                // get the score on value e.g. 'submit', 'save', 'change', or 'exit'\n                scoreOn = component.cRater.scoreOn;\n            }\n            \n        }\n        \n        return scoreOn;\n    }\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @param component the component content\n     */\n    isCRaterEnabled(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // get the item type and item id\n            var cRaterItemType = this.getCRaterItemType(component);\n            var cRaterItemId = this.getCRaterItemId(component);\n            \n            if (cRaterItemType != null && cRaterItemId != null) {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on save\n     * @param component the component content\n     * @returns whether the CRater is set to score on save\n     */\n    isCRaterScoreOnSave(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'save') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on submit\n     * @param component the component content\n     * @returns whether the CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'submit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on change\n     * @param component the component content\n     * @returns whether the CRater is set to score on change\n     */\n    isCRaterScoreOnChange(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'change') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on exit\n     * @param component the component content\n     * @returns whether the CRater is set to score on exit\n     */\n    isCRaterScoreOnExit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'exit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get the CRater scoring rule by score\n     * @param component the component content\n     * @param score the score\n     * @returns the scoring rule for the given score\n     */\n    getCRaterScoringRuleByScore(component, score) {\n        var scoringRule = null;\n        \n        if (component != null && score != null) {\n            var cRater = component.cRater;\n            \n            if (cRater != null) {\n                var scoringRules = cRater.scoringRules;\n                \n                if (scoringRules != null) {\n                    \n                    // loop through all the scoring rules\n                    for (var s = 0; s < scoringRules.length; s++) {\n                        var tempScoringRule = scoringRules[s];\n                        \n                        if (tempScoringRule != null) {\n                            \n                            if (tempScoringRule.score == score) {\n                                /*\n                                 * the score matches so we have found\n                                 * the scoring rule that we want\n                                 */\n                                scoringRule = tempScoringRule;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return scoringRule;\n    }\n    \n    /**\n     * Get the feedback text for the given score\n     * @param component the component content\n     * @param score the score we want feedback for\n     * @returns the feedback text for the given score\n     */\n    getCRaterFeedbackTextByScore(component, score) {\n        \n        var feedbackText = null;\n        \n        // get the scoring rule for the given score\n        var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n        \n        if (scoringRule != null) {\n            // get the feedback text\n            feedbackText = scoringRule.feedbackText;\n        }\n        \n        return feedbackText;\n    }\n\n    /**\n     * Get the notification for the given score, if exists.\n     * @param component the component content\n     * @param score the score we want notification for\n     * @returns the notification for the given score\n     */\n    getNotificationsByScore(component, score) {\n\n        var notifications = null;\n\n        // get the scoring rule for the given score\n        var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n\n        if (scoringRule != null) {\n            // get the feedback text\n            notifications = scoringRule.notifications;\n        }\n\n        return notifications;\n    }\n    \n    /**\n     * Get the feedback text for the given previous score and current score\n     * @param component the component content\n     * @param previousScore the score from the last submit\n     * @param currentScore the score from the current submit\n     * @returns the feedback text for the given previous score and current score\n     */\n    getMultipleAttemptCRaterFeedbackTextByScore(component, previousScore, currentScore) {\n        \n        var feedbackText = null;\n        \n        // get the scoring rule for the given score\n        var scoringRule = this.getMultipleAttemptCRaterScoringRuleByScore(component, previousScore, currentScore);\n        \n        if (scoringRule != null) {\n            // get the feedback text\n            feedbackText = scoringRule.feedbackText;\n        }\n        \n        return feedbackText;\n    }\n    \n    /**\n     * Get the multiple attempt CRater scoring rule by previous score and\n     * current score\n     * @param component the component content\n     * @param previousScore the score from the last submit\n     * @param currentScore the score from the current submit\n     * @returns the scoring rule for the given previous score and current score\n     */\n    getMultipleAttemptCRaterScoringRuleByScore(component, previousScore, currentScore) {\n        var scoringRule = null;\n        \n        if (component != null && previousScore != null && currentScore != null) {\n            var cRater = component.cRater;\n            \n            if (cRater != null) {\n                \n                // get the multiple attempt scoring rules\n                var multipleAttemptScoringRules = cRater.multipleAttemptScoringRules;\n                \n                if (multipleAttemptScoringRules != null) {\n                    \n                    // loop through all the multiple attempt scoring rules\n                    for (var m = 0; m < multipleAttemptScoringRules.length; m++) {\n                        var multipleAttemptScoringRule = multipleAttemptScoringRules[m];\n                        \n                        if (multipleAttemptScoringRule != null) {\n                            \n                            // get a multiple attempt scoring rule\n                            var scoreSequence = multipleAttemptScoringRule.scoreSequence;\n                            \n                            if (scoreSequence != null) {\n                                \n                                /*\n                                 * get the expected previous score and current score\n                                 * that will satisfy the rule\n                                 */\n                                var previousScoreMatch = scoreSequence[0];\n                                var currentScoreMatch = scoreSequence[1];\n                                \n                                if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") && \n                                    currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                    \n                                    /*\n                                     * the previous score and current score match the \n                                     * expected scores so we have found the rule we want\n                                     */\n                                    scoringRule = multipleAttemptScoringRule;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return scoringRule;\n    }\n}\n\nCRaterService.$inject = [\n    '$http',\n    'ConfigService'\n];\n\nexport default CRaterService;"]}