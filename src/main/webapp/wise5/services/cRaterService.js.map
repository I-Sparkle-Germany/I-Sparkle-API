{"version":3,"sources":["cRaterService.es6"],"names":[],"mappings":"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","file":"cRaterService.js","sourcesContent":["class CRaterService {\n    constructor($http, ConfigService) {\n        this.$http = $http;\n        this.ConfigService = ConfigService;\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterRequestType the CRater request type 'scoring' or 'verify'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterRequest(cRaterItemType, \n            cRaterItemId, \n            cRaterRequestType, \n            cRaterResponseId, \n            studentData) {\n        \n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = this.ConfigService.getCRaterRequestURL();\n        httpParams.params = {\n            cRaterItemType: cRaterItemType,\n            itemId: cRaterItemId,\n            cRaterRequestType: cRaterRequestType,\n            responseId: cRaterResponseId,\n            studentData: studentData,\n            wiseRunMode: 'preview'\n        };\n        \n        // make the CRater request\n        return this.$http(httpParams).then((response) => {\n            return response;\n        });\n    }\n    \n    /**\n     * Make a CRater request to score student data\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterScoringRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'scoring';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Make a CRater request to verifythe item type and item id\n     * @param cRaterItemType the CRater item type e.g. 'HENRY'\n     * @param cRaterResponseId a randomly generated id used to keep track\n     * of the request\n     * @param studentData the student data\n     * @returns a promise that returns the result of the CRater request\n     */\n    makeCRaterVerifyRequest(cRaterItemType, \n            cRaterItemId, \n            studentData) {\n        \n        var cRaterRequestType = 'verify';\n        var cRaterResponseId = new Date().getTime();\n        \n        return this.makeCRaterRequest(cRaterItemType, \n                cRaterItemId, \n                cRaterRequestType, \n                cRaterResponseId, \n                studentData);\n    }\n    \n    /**\n     * Get the CRater item type from the component\n     * @param component the component content\n     */\n    getCRaterItemType(component) {\n        var cRaterItemType = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemType = component.cRater.itemType;\n        }\n        \n        return cRaterItemType;\n    }\n    \n    /**\n     * Get the CRater item id from the component\n     * @param component the component content\n     */\n    getCRaterItemId(component) {\n        var cRaterItemId = null;\n        \n        if (component != null && component.cRater != null) {\n            cRaterItemId = component.cRater.itemId;\n        }\n        \n        return cRaterItemId;\n    }\n    \n    /**\n     * Find when we should perform the CRater scoring\n     * @param component the component content\n     * @returns when to perform the CRater scoring e.g. 'submit', 'save', 'change', 'exit'\n     */\n    getCRaterScoreOn(component) {\n        var scoreOn = null;\n        \n        if (component != null && component.cRater != null) {\n            scoreOn = component.cRater.scoreOn;\n        }\n        \n        return scoreOn;\n    }\n    \n    /**\n     * Check if CRater is enabled for this component\n     * @param component the component content\n     */\n    isCRaterEnabled(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // get the item type and item id\n            var cRaterItemType = this.getCRaterItemType(component);\n            var cRaterItemId = this.getCRaterItemId(component);\n            \n            if (cRaterItemType != null && cRaterItemId != null) {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on save\n     * @param component the component content\n     * @returns whether the CRater is set to score on save\n     */\n    isCRaterScoreOnSave(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'save') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on submit\n     * @param component the component content\n     * @returns whether the CRater is set to score on submit\n     */\n    isCRaterScoreOnSubmit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'submit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on change\n     * @param component the component content\n     * @returns whether the CRater is set to score on change\n     */\n    isCRaterScoreOnChange(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'change') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the CRater is set to score on exit\n     * @param component the component content\n     * @returns whether the CRater is set to score on exit\n     */\n    isCRaterScoreOnExit(component) {\n        var result = false;\n        \n        if (component != null) {\n            \n            // find when we should perform the CRater scoring\n            var scoreOn = this.getCRaterScoreOn(component);\n            \n            if (scoreOn != null && scoreOn === 'exit') {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get the CRater scoring rule by score\n     * @param component the component content\n     * @param score the score\n     * @returns the scoring rule for the given score\n     */\n    getCRaterScoringRuleByScore(component, score) {\n        var scoringRule = null;\n        \n        if (component != null && score != null) {\n            var cRater = component.cRater;\n            \n            if (cRater != null) {\n                var scoringRules = cRater.scoringRules;\n                \n                if (scoringRules != null) {\n                    \n                    // loop through all the scoring rules\n                    for (var s = 0; s < scoringRules.length; s++) {\n                        var tempScoringRule = scoringRules[s];\n                        \n                        if (tempScoringRule != null) {\n                            \n                            if (tempScoringRule.score == score) {\n                                /*\n                                 * the score matches so we have found\n                                 * the scoring rule that we want\n                                 */\n                                scoringRule = tempScoringRule;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return scoringRule;\n    }\n    \n    /**\n     * Get the feedback text for the given score\n     * @param component the component content\n     * @param score the score we want feedback for\n     * @returns the feedback text for the given score\n     */\n    getCRaterFeedbackTextByScore(component, score) {\n        \n        var feedbackText = null;\n        \n        // get the scoring rule for the given score\n        var scoringRule = this.getCRaterScoringRuleByScore(component, score);\n        \n        if (scoringRule != null) {\n            // get the feedback text\n            feedbackText = scoringRule.feedbackText;\n        }\n        \n        return feedbackText;\n    }\n}\n\nCRaterService.$inject = [\n    '$http',\n    'ConfigService'\n];\n\nexport default CRaterService;"]}