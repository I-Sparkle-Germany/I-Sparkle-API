{"version":3,"sources":["configService.es6"],"names":["ConfigService","$http","$location","config","sortClassmateUserInfosAlphabeticallyByName","configURL","get","then","result","configJSON","data","retrievalTimestamp","clientTimestamp","Date","getTime","serverTimestamp","timestampDiff","constraints","absURL","$$absUrl","regEx","RegExp","match","setConfig","isPreview","myUserInfo","getMyUserInfo","workgroupId","Math","floor","random","paramName","getConfigParam","periodId","periods","myClassInfo","userInfo","getUserInfo","classmateUserInfos","teacherWorkgroupId","teacherUserInfo","getTeacherUserInfo","sharedTeacherUserInfos","includeSelf","workgroupIds","push","getWorkgroupId","getClassmateUserInfos","c","length","classmateUserInfo","sort","sortClassmateUserInfosAlphabeticallyByNameHelper","a","b","aUserName","userName","bUserName","tempWorkgroupId","getUserInfoByWorkgroupId","studentNames","userNames","getUserNameByWorkgroupId","userNamesSplit","split","x","indexOfSpace","indexOf","studentFirstName","substring","userNamesObjects","i","name","id","regex","matches","exec","mode","getMode","getSharedTeacherUserInfos","s","sharedTeacherUserInfo","role","isRunOwner","isRunSharedTeacher","getSharedTeacherRole","content","contentString","JSON","stringify","firstNames","getStudentFirstNamesByWorkgroupId","replace","join","parse","$inject"],"mappings":"AAAA;;;;;;;;;;;;IAEMA,a;AAEF,2BAAYC,KAAZ,EAAmBC,SAAnB,EAA8B;AAAA;;AAC1B,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,MAAL,GAAc,IAAd;AACH;;;;kCAESA,M,EAAQ;AACd,iBAAKA,MAAL,GAAcA,MAAd;AACA,iBAAKC,0CAAL;AACH;;;uCAEcC,S,EAAW;AAAA;;AACtB,mBAAO,KAAKJ,KAAL,CAAWK,GAAX,CAAeD,SAAf,EAA0BE,IAA1B,CAA+B,UAACC,MAAD,EAAY;AAC9C,oBAAIC,aAAaD,OAAOE,IAAxB;;AAEA,oBAAID,WAAWE,kBAAX,IAAiC,IAArC,EAA2C;AACvC;AACA,wBAAIC,kBAAkB,IAAIC,IAAJ,GAAWC,OAAX,EAAtB;;AAEA;AACA,wBAAIC,kBAAkBN,WAAWE,kBAAjC;;AAEA;AACA,wBAAIK,gBAAgBJ,kBAAkBG,eAAtC;;AAEA;AACAN,+BAAWO,aAAX,GAA2BA,aAA3B;AACH;;AAED,oBAAIC,cAAc,IAAlB;;AAEA;AACA,oBAAIC,SAAS,MAAKhB,SAAL,CAAeiB,QAA5B;;AAEA;AACA,oBAAIC,QAAQ,IAAIC,MAAJ,CAAW,mBAAX,EAAgC,IAAhC,CAAZ;;AAEA,oBAAIH,UAAU,IAAV,IAAkBA,OAAOI,KAAP,CAAaF,KAAb,CAAtB,EAA2C;AACvC;AACAH,kCAAc,KAAd;AACH;;AAED;AACAR,2BAAWQ,WAAX,GAAyBA,WAAzB;;AAEA,sBAAKM,SAAL,CAAed,UAAf;;AAEA,oBAAI,MAAKe,SAAL,EAAJ,EAAsB;AAClB;AACA,wBAAIC,aAAa,MAAKC,aAAL,EAAjB;AACA,wBAAID,cAAc,IAAlB,EAAwB;AACpB;AACAA,mCAAWE,WAAX,GAAyBC,KAAKC,KAAL,CAAW,MAAMD,KAAKE,MAAL,EAAjB,IAAkC,CAA3D;AACH;AACJ;;AAED,uBAAOrB,UAAP;AACH,aA7CM,CAAP;AA8CH;;;uCAEcsB,S,EAAW;AACtB,gBAAI,KAAK5B,MAAL,KAAgB,IAApB,EAA0B;AACtB,uBAAO,KAAKA,MAAL,CAAY4B,SAAZ,CAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;;;8CAEqB;AAClB,mBAAO,KAAKC,cAAL,CAAoB,kBAApB,CAAP;AACH;;;6CAEoB;AACjB,mBAAO,KAAKA,cAAL,CAAoB,iBAApB,CAAP;AACH;;;6CAEoB;AACjB,mBAAO,KAAKA,cAAL,CAAoB,iBAApB,CAAP;AACH;;;mCAEU;AACP,mBAAO,KAAKA,cAAL,CAAoB,OAApB,CAAP;AACH;;;uCAEc;AACX,mBAAO,KAAKA,cAAL,CAAoB,WAApB,CAAP;AACH;;;wCAEe;AACZ,mBAAO,KAAKA,cAAL,CAAoB,YAApB,CAAP;AACH;;;8CAEqB;AAClB,mBAAO,KAAKA,cAAL,CAAoB,kBAApB,CAAP;AACH;;;8CAEqB;AAClB,mBAAO,KAAKA,cAAL,CAAoB,kBAApB,CAAP;AACH;;;8CAEqB;AAClB,mBAAO,KAAKA,cAAL,CAAoB,kBAApB,CAAP;AACH;;;uDAE8B;AAC3B,mBAAO,KAAKA,cAAL,CAAoB,2BAApB,CAAP;AACH;;;gDAEuB;AACpB,mBAAO,KAAKA,cAAL,CAAoB,oBAApB,CAAP;AACH;;;mDAE0B;AACvB,mBAAO,KAAKA,cAAL,CAAoB,uBAApB,CAAP;AACH;;;sCAEa;AACV,mBAAO,KAAKA,cAAL,CAAoB,UAApB,CAAP;AACH;;;0CAEiB;AACd,mBAAO,KAAKA,cAAL,CAAoB,cAApB,CAAP;AACH;;;yCAEgB;AACb,mBAAO,KAAKA,cAAL,CAAoB,aAApB,CAAP;AACH;;;oCAEW;AACR,mBAAO,KAAKA,cAAL,CAAoB,QAApB,KAAiC,IAAxC;AACH;;;kCAES;AACN,mBAAO,KAAKA,cAAL,CAAoB,MAApB,CAAP;AACH;;;;;AAED;;;sCAGc;AACV,gBAAIC,WAAW,IAAf;AACA,gBAAIR,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpBQ,2BAAWR,WAAWQ,QAAtB;AACH;AACD,mBAAOA,QAAP;AACH;;;;;AAED;;;;qCAIa;AACT,gBAAIC,UAAU,EAAd;;AAEA,gBAAIT,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;;AAEpB,oBAAIU,cAAcV,WAAWU,WAA7B;AACA,oBAAIA,eAAe,IAAnB,EAAyB;;AAErB,wBAAIA,YAAYD,OAAZ,IAAuB,IAA3B,EAAiC;AAC7BA,kCAAUC,YAAYD,OAAtB;AACH;AACJ;AACJ;;AAED,mBAAOA,OAAP;AACH;;;yCAEgB;AACb,gBAAIP,cAAc,IAAlB;;AAEA,gBAAIF,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpBE,8BAAcF,WAAWE,WAAzB;AACH;;AAED,mBAAOA,WAAP;AACH;;;wCAEe;AACZ,gBAAIF,aAAa,IAAjB;;AAEA,gBAAIW,WAAW,KAAKC,WAAL,EAAf;AACA,gBAAID,YAAY,IAAhB,EAAsB;AAClBX,6BAAaW,SAASX,UAAtB;AACH;;AAED,mBAAOA,UAAP;AACH;;;gDAEuB;AACpB,gBAAIa,qBAAqB,IAAzB;AACA,gBAAIb,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpB,oBAAIU,cAAcV,WAAWU,WAA7B;AACA,oBAAIA,eAAe,IAAnB,EAAyB;AACrBG,yCAAqBH,YAAYG,kBAAjC;AACH;AACJ;;AAED,mBAAOA,kBAAP;AACH;;;gDAEuB;AACpB,gBAAIC,qBAAqB,IAAzB;AACA,gBAAIC,kBAAkB,KAAKC,kBAAL,EAAtB;AACA,gBAAID,mBAAmB,IAAvB,EAA6B;AACzBD,qCAAqBC,gBAAgBb,WAArC;AACH;AACD,mBAAOY,kBAAP;AACH;;;6CAEoB;AACjB,gBAAIC,kBAAkB,IAAtB;AACA,gBAAIf,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpB,oBAAIU,cAAcV,WAAWU,WAA7B;AACA,oBAAIA,eAAe,IAAnB,EAAyB;AACrBK,sCAAkBL,YAAYK,eAA9B;AACH;AACJ;AACD,mBAAOA,eAAP;AACH;;;;;AAED;;;oDAG4B;AACxB,gBAAIE,yBAAyB,IAA7B;AACA,gBAAIjB,aAAa,KAAKC,aAAL,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpB,oBAAIU,cAAcV,WAAWU,WAA7B;AACA,oBAAIA,eAAe,IAAnB,EAAyB;AACrBO,6CAAyBP,YAAYO,sBAArC;AACH;AACJ;AACD,mBAAOA,sBAAP;AACH;;;iDAEwBC,W,EAAa;AAClC,gBAAIC,eAAe,EAAnB;;AAEA,gBAAID,WAAJ,EAAiB;AACbC,6BAAaC,IAAb,CAAkB,KAAKC,cAAL,EAAlB;AACH;;AAED,gBAAIR,qBAAqB,KAAKS,qBAAL,EAAzB;;AAEA,gBAAIT,sBAAsB,IAA1B,EAAgC;AAC5B,qBAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIV,mBAAmBW,MAAvC,EAA+CD,GAA/C,EAAoD;AAChD,wBAAIE,oBAAoBZ,mBAAmBU,CAAnB,CAAxB;;AAEA,wBAAIE,qBAAqB,IAAzB,EAA+B;AAC3B,4BAAIvB,cAAcuB,kBAAkBvB,WAApC;;AAEA,4BAAIA,eAAe,IAAnB,EAAyB;AACrBiB,yCAAaC,IAAb,CAAkBlB,WAAlB;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOiB,YAAP;AACH;;;qEAE4C;AACzC,gBAAIN,qBAAqB,KAAKS,qBAAL,EAAzB;;AAEA,gBAAIT,sBAAsB,IAA1B,EAAgC;AAC5BA,mCAAmBa,IAAnB,CAAwB,KAAKC,gDAA7B;AACH;;AAED,mBAAOd,kBAAP;AACH;;;yEAEgDe,C,EAAGC,C,EAAG;AACnD,gBAAIC,YAAYF,EAAEG,QAAlB;AACA,gBAAIC,YAAYH,EAAEE,QAAlB;AACA,gBAAIhD,SAAS,CAAb;;AAEA,gBAAI+C,YAAYE,SAAhB,EAA2B;AACvBjD,yBAAS,CAAC,CAAV;AACH,aAFD,MAEO,IAAI+C,YAAYE,SAAhB,EAA2B;AAC9BjD,yBAAS,CAAT;AACH;;AAED,mBAAOA,MAAP;AACH;;;iDAEwBmB,W,EAAa;AAClC,gBAAIS,WAAW,IAAf;;AAEA,gBAAIT,eAAe,IAAnB,EAAyB;;AAErB,oBAAIF,aAAa,KAAKC,aAAL,EAAjB;;AAEA,oBAAID,cAAc,IAAlB,EAAwB;AACpB,wBAAIiC,kBAAkBjC,WAAWE,WAAjC;;AAEA,wBAAIA,gBAAgB+B,eAApB,EAAqC;AACjCtB,mCAAWX,UAAX;AACH;AACJ;;AAED,oBAAIW,YAAY,IAAhB,EAAsB;AAClB,wBAAIE,qBAAqB,KAAKS,qBAAL,EAAzB;;AAEA,wBAAIT,sBAAsB,IAA1B,EAAgC;AAC5B,6BAAK,IAAIU,IAAI,CAAb,EAAgBA,IAAIV,mBAAmBW,MAAvC,EAA+CD,GAA/C,EAAoD;AAChD,gCAAIE,oBAAoBZ,mBAAmBU,CAAnB,CAAxB;;AAEA,gCAAIE,qBAAqB,IAAzB,EAA+B;AAC3B,oCAAIQ,kBAAkBR,kBAAkBvB,WAAxC;;AAEA,oCAAIA,eAAe+B,eAAnB,EAAoC;AAChCtB,+CAAWc,iBAAX;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAOd,QAAP;AACH;;;;;AAED;;;;;iDAKyBT,W,EAAa;AAClC,gBAAIM,WAAW,IAAf;;AAEA,gBAAIN,eAAe,IAAnB,EAAyB;AACrB,oBAAIS,WAAW,KAAKuB,wBAAL,CAA8BhC,WAA9B,CAAf;;AAEA,oBAAIS,YAAY,IAAhB,EAAsB;AAClBH,+BAAWG,SAASH,QAApB;AACH;AACJ;;AAED,mBAAOA,QAAP;AACH;;;;;AAED;;;;;0DAKkCN,W,EAAa;AAC3C,gBAAIiC,eAAe,EAAnB;;AAEA;AACA,gBAAIC,YAAY,KAAKC,wBAAL,CAA8BnC,WAA9B,CAAhB;;AAEA,gBAAIkC,aAAa,IAAjB,EAAuB;AACnB;AACA,oBAAIE,iBAAiBF,UAAUG,KAAV,CAAgB,GAAhB,CAArB;;AAEA,oBAAID,kBAAkB,IAAtB,EAA4B;AACxB;AACA,yBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,eAAed,MAAnC,EAA2CgB,GAA3C,EAAgD;AAC5C;AACA,4BAAIT,WAAWO,eAAeE,CAAf,CAAf;;AAEA;AACA,4BAAIC,eAAeV,SAASW,OAAT,CAAiB,GAAjB,CAAnB;;AAEA;AACA,4BAAIC,mBAAmBZ,SAASa,SAAT,CAAmB,CAAnB,EAAsBH,YAAtB,CAAvB;;AAEA;AACAN,qCAAaf,IAAb,CAAkBuB,gBAAlB;AACH;AACJ;AACJ;;AAED,mBAAOR,YAAP;AACH;;;iDAEwBjC,W,EAAa;AAClC,gBAAI6B,WAAW,IAAf;;AAEA,gBAAI7B,eAAe,IAAnB,EAAyB;AACrB,oBAAIS,WAAW,KAAKuB,wBAAL,CAA8BhC,WAA9B,CAAf;;AAEA,oBAAIS,YAAY,IAAhB,EAAsB;AAClBoB,+BAAWpB,SAASoB,QAApB;AACH;AACJ;;AAED,mBAAOA,QAAP;AACH;;;kDAEyB7B,W,EAAa;AACnC,gBAAI2C,mBAAmB,EAAvB;;AAEA,gBAAI3C,eAAe,IAAnB,EAAyB;AACrB,oBAAIS,WAAW,KAAKuB,wBAAL,CAA8BhC,WAA9B,CAAf;;AAEA,oBAAIS,YAAY,IAAhB,EAAsB;AAClB,wBAAIyB,YAAYzB,SAASoB,QAAT,CAAkBQ,KAAlB,CAAwB,GAAxB,CAAhB;;AAEA,yBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIV,UAAUZ,MAA9B,EAAsCsB,GAAtC,EAA2C;AACvC,4BAAIC,OAAOX,UAAUU,CAAV,CAAX;AACA,4BAAIE,KAAK,EAAT;AACA,4BAAIC,QAAQ,gBAAZ;AACA,4BAAIC,UAAUD,MAAME,IAAN,CAAWJ,IAAX,CAAd;AACA,4BAAIG,OAAJ,EAAa;AACTH,mCAAOG,QAAQ,CAAR,CAAP;AACAF,iCAAKE,QAAQ,CAAR,CAAL;AACH;AACDL,yCAAiBzB,IAAjB,CAAsB;AAClB2B,kCAAMA,IADY;AAElBC,gCAAIA;AAFc,yBAAtB;AAIH;AACJ;AACJ;;AAED,mBAAOH,gBAAP;AACH;;;oCAEW;AACR,gBAAI9D,SAAS,KAAb;;AAEA,gBAAIqE,OAAO,KAAKC,OAAL,EAAX;;AAEA,gBAAID,QAAQ,IAAR,IAAgBA,SAAS,SAA7B,EAAwC;AACpCrE,yBAAS,IAAT;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;AAED;;;;;iDAKyBI,e,EAAiB;;AAEtC;AACA,gBAAII,gBAAgB,KAAKgB,cAAL,CAAoB,eAApB,CAApB;;AAEA;AACA,gBAAIjB,kBAAkBH,kBAAkBI,aAAxC;;AAEA,mBAAOD,eAAP;AACH;;AAED;;;;;;;;iDAKyBA,e,EAAiB;;AAEtC;AACA,gBAAIC,gBAAgB,KAAKgB,cAAL,CAAoB,eAApB,CAApB;;AAEA;AACA,gBAAIpB,kBAAkBG,kBAAkBC,aAAxC;;AAEA,mBAAOJ,eAAP;AACH;;AAED;;;;;;;;mCAKWe,W,EAAa;;AAEpB,gBAAInB,SAAS,KAAb;;AAEA,gBAAImB,eAAe,IAAnB,EAAyB;AACrB,oBAAIa,kBAAkB,KAAKC,kBAAL,EAAtB;;AAEA,oBAAID,mBAAmB,IAAvB,EAA6B;;AAEzB,wBAAIb,eAAea,gBAAgBb,WAAnC,EAAgD;AAC5CnB,iCAAS,IAAT;AACH;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;2CAKmBmB,W,EAAa;;AAE5B,gBAAInB,SAAS,KAAb;;AAEA,gBAAImB,eAAe,IAAnB,EAAyB;AACrB,oBAAIe,yBAAyB,KAAKqC,yBAAL,EAA7B;;AAEA,oBAAIrC,0BAA0B,IAA9B,EAAoC;;AAEhC,yBAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAItC,uBAAuBO,MAA3C,EAAmD+B,GAAnD,EAAwD;AACpD,4BAAIC,wBAAwBvC,uBAAuBsC,CAAvB,CAA5B;;AAEA,4BAAIC,yBAAyB,IAA7B,EAAmC;AAC/B,gCAAItD,eAAesD,sBAAsBtD,WAAzC,EAAsD;AAClDnB,yCAAS,IAAT;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAOA,MAAP;AACH;;AAED;;;;;;;;;uCAMemB,W,EAAa;AACxB,gBAAIuD,OAAO,IAAX;;AAEA,gBAAI,KAAKC,UAAL,CAAgBxD,WAAhB,CAAJ,EAAkC;AAC9B;AACAuD,uBAAO,OAAP;AACH,aAHD,MAGO,IAAI,KAAKE,kBAAL,CAAwBzD,WAAxB,CAAJ,EAA0C;AAC7C;AACAuD,uBAAO,KAAKG,oBAAL,CAA0B1D,WAA1B,CAAP;AACH;;AAED,mBAAOuD,IAAP;AACH;;AAED;;;;;;;;;6CAMqBvD,W,EAAa;AAC9B,gBAAIuD,OAAO,IAAX;;AAEA,gBAAIvD,eAAe,IAAnB,EAAyB;AACrB,oBAAIe,yBAAyB,KAAKqC,yBAAL,EAA7B;;AAEA,oBAAIrC,0BAA0B,IAA9B,EAAoC;;AAEhC,yBAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAItC,uBAAuBO,MAA3C,EAAmD+B,GAAnD,EAAwD;AACpD,4BAAIC,wBAAwBvC,uBAAuBsC,CAAvB,CAA5B;;AAEA,4BAAIC,yBAAyB,IAA7B,EAAmC;AAC/B,gCAAItD,eAAesD,sBAAsBtD,WAAzC,EAAsD;AAClDuD,uCAAOD,sBAAsBC,IAA7B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,mBAAOA,IAAP;AACH;;AAED;;;;;;;;;;4CAOoBI,O,EAAS;AACzB,gBAAIA,WAAW,IAAf,EAAqB;;AAEjB,oBAAIC,gBAAgBD,OAApB;;AAEA,oBAAI,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAC7B;AACAC,oCAAgBC,KAAKC,SAAL,CAAeH,OAAf,CAAhB;AACH;;AAED,oBAAIC,iBAAiB,IAArB,EAA2B;;AAEvB;AACA,wBAAI5D,cAAc,KAAKmB,cAAL,EAAlB;;AAEA;AACA,wBAAI4C,aAAa,KAAKC,iCAAL,CAAuChE,WAAvC,CAAjB;;AAEA,wBAAI+D,WAAWzC,MAAX,IAAqB,CAAzB,EAA4B;AACxB;;;;;AAKAsC,wCAAgBA,cAAcK,OAAd,CAAsB,IAAIvE,MAAJ,CAAW,2BAAX,EAAwC,IAAxC,CAAtB,EAAqEqE,WAAW,CAAX,CAArE,CAAhB;;AAEA;;;;AAIAH,wCAAgBA,cAAcK,OAAd,CAAsB,IAAIvE,MAAJ,CAAW,uBAAX,EAAoC,IAApC,CAAtB,EAAiEqE,WAAWG,IAAX,CAAgB,IAAhB,CAAjE,CAAhB;AACH;;AAED,wBAAIH,WAAWzC,MAAX,IAAqB,CAAzB,EAA4B;AACxB;;;;;AAKAsC,wCAAgBA,cAAcK,OAAd,CAAsB,IAAIvE,MAAJ,CAAW,4BAAX,EAAyC,IAAzC,CAAtB,EAAsEqE,WAAW,CAAX,CAAtE,CAAhB;AACH;;AAED,wBAAIA,WAAWzC,MAAX,IAAqB,CAAzB,EAA4B;AACxB;;;;;AAKAsC,wCAAgBA,cAAcK,OAAd,CAAsB,IAAIvE,MAAJ,CAAW,2BAAX,EAAwC,IAAxC,CAAtB,EAAqEqE,WAAW,CAAX,CAArE,CAAhB;AACH;AACJ;;AAED,oBAAI,QAAOJ,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AAC7B;AACAA,8BAAUE,KAAKM,KAAL,CAAWP,aAAX,CAAV;AACH,iBAHD,MAGO,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AACpC;AACAA,8BAAUC,aAAV;AACH;AACJ;;AAED,mBAAOD,OAAP;AACH;;;;;;AACJ;;AAEDtF,cAAc+F,OAAd,GAAwB,CACpB,OADoB,EAEpB,WAFoB,CAAxB;;kBAKe/F,a","file":"configService.js","sourcesContent":["'use strict';\n\nclass ConfigService {\n\n    constructor($http, $location) {\n        this.$http = $http;\n        this.$location = $location;\n        this.config = null;\n    };\n\n    setConfig(config) {\n        this.config = config;\n        this.sortClassmateUserInfosAlphabeticallyByName();\n    };\n\n    retrieveConfig(configURL) {\n        return this.$http.get(configURL).then((result) => {\n            var configJSON = result.data;\n\n            if (configJSON.retrievalTimestamp != null) {\n                // get the client timestamp\n                var clientTimestamp = new Date().getTime();\n\n                // get the server timestamp\n                var serverTimestamp = configJSON.retrievalTimestamp;\n\n                // get the difference between the client and server time\n                var timestampDiff = clientTimestamp - serverTimestamp;\n\n                // add the timestamp diff to the config object\n                configJSON.timestampDiff = timestampDiff;\n            }\n            \n            var constraints = true;\n            \n            // get the full url\n            var absURL = this.$location.$$absUrl;\n            \n            // regex to match constraints=false in the url\n            var regEx = new RegExp(\"constraints=false\", 'gi');\n            \n            if (absURL != null && absURL.match(regEx)) {\n                // the url contains constraints=false\n                constraints = false;\n            }\n            \n            // set the constraints value into the config so we can access it later\n            configJSON.constraints = constraints;\n\n            this.setConfig(configJSON);\n\n            if (this.isPreview()) {\n                // assign a random workgroup id\n                var myUserInfo = this.getMyUserInfo();\n                if (myUserInfo != null) {\n                    // set the workgroup id to a random integer between 1 and 100\n                    myUserInfo.workgroupId = Math.floor(100 * Math.random()) + 1;\n                }\n            }\n\n            return configJSON;\n        });\n    };\n\n    getConfigParam(paramName) {\n        if (this.config !== null) {\n            return this.config[paramName];\n        } else {\n            return null;\n        }\n    };\n\n    getCRaterRequestURL() {\n        return this.getConfigParam('cRaterRequestURL');\n    };\n\n    getMainHomePageURL() {\n        return this.getConfigParam('mainHomePageURL');\n    };\n\n    getNotificationURL() {\n        return this.getConfigParam('notificationURL');\n    };\n\n    getRunId() {\n        return this.getConfigParam('runId');\n    };\n\n    getProjectId() {\n        return this.getConfigParam('projectId');\n    };\n\n    getOpenCPUURL() {\n        return this.getConfigParam('openCPUURL');\n    };\n\n    getSessionLogOutURL() {\n        return this.getConfigParam('sessionLogOutURL');\n    };\n\n    getStudentAssetsURL() {\n        return this.getConfigParam('studentAssetsURL');\n    };\n\n    getStudentStatusURL() {\n        return this.getConfigParam('studentStatusURL');\n    };\n\n    getStudentMaxTotalAssetsSize() {\n        return this.getConfigParam('studentMaxTotalAssetsSize');\n    };\n\n    getStudentNotebookURL() {\n        return this.getConfigParam('studentNotebookURL');\n    };\n\n    getStudentUploadsBaseURL() {\n        return this.getConfigParam('studentUploadsBaseURL');\n    };\n\n    getUserInfo() {\n        return this.getConfigParam('userInfo');\n    };\n\n    getWebSocketURL() {\n        return this.getConfigParam('webSocketURL');\n    };\n\n    getWISEBaseURL() {\n        return this.getConfigParam('wiseBaseURL');\n    };\n\n    getLocale() {\n        return this.getConfigParam('locale') || 'en';\n    };\n\n    getMode() {\n        return this.getConfigParam('mode');\n    };\n\n    /**\n     * Returns the period id of the logged-in user.\n     */\n    getPeriodId() {\n        var periodId = null;\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n            periodId = myUserInfo.periodId;\n        }\n        return periodId;\n    };\n\n    /**\n     * Get the periods\n     * @returns an array of period objects\n     */\n    getPeriods() {\n        var periods = [];\n\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n\n            var myClassInfo = myUserInfo.myClassInfo;\n            if (myClassInfo != null) {\n\n                if (myClassInfo.periods != null) {\n                    periods = myClassInfo.periods;\n                }\n            }\n        }\n\n        return periods;\n    };\n\n    getWorkgroupId() {\n        var workgroupId = null;\n\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n            workgroupId = myUserInfo.workgroupId;\n        }\n\n        return workgroupId;\n    };\n\n    getMyUserInfo() {\n        var myUserInfo = null;\n\n        var userInfo = this.getUserInfo();\n        if (userInfo != null) {\n            myUserInfo = userInfo.myUserInfo;\n        }\n\n        return myUserInfo;\n    };\n\n    getClassmateUserInfos() {\n        var classmateUserInfos = null;\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n            var myClassInfo = myUserInfo.myClassInfo;\n            if (myClassInfo != null) {\n                classmateUserInfos = myClassInfo.classmateUserInfos;\n            }\n        }\n\n        return classmateUserInfos;\n    };\n\n    getTeacherWorkgroupId() {\n        var teacherWorkgroupId = null;\n        var teacherUserInfo = this.getTeacherUserInfo();\n        if (teacherUserInfo != null) {\n            teacherWorkgroupId = teacherUserInfo.workgroupId;\n        }\n        return teacherWorkgroupId;\n    };\n\n    getTeacherUserInfo() {\n        var teacherUserInfo = null;\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n            var myClassInfo = myUserInfo.myClassInfo;\n            if (myClassInfo != null) {\n                teacherUserInfo = myClassInfo.teacherUserInfo;\n            }\n        }\n        return teacherUserInfo;\n    };\n    \n    /**\n     * Get the shared teacher user infos for the run\n     */\n    getSharedTeacherUserInfos() {\n        var sharedTeacherUserInfos = null;\n        var myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n            var myClassInfo = myUserInfo.myClassInfo;\n            if (myClassInfo != null) {\n                sharedTeacherUserInfos = myClassInfo.sharedTeacherUserInfos;\n            }\n        }\n        return sharedTeacherUserInfos;\n    }\n\n    getClassmateWorkgroupIds(includeSelf) {\n        var workgroupIds = [];\n\n        if (includeSelf) {\n            workgroupIds.push(this.getWorkgroupId());\n        }\n\n        var classmateUserInfos = this.getClassmateUserInfos();\n\n        if (classmateUserInfos != null) {\n            for (var c = 0; c < classmateUserInfos.length; c++) {\n                var classmateUserInfo = classmateUserInfos[c];\n\n                if (classmateUserInfo != null) {\n                    var workgroupId = classmateUserInfo.workgroupId;\n\n                    if (workgroupId != null) {\n                        workgroupIds.push(workgroupId);\n                    }\n                }\n            }\n        }\n\n        return workgroupIds;\n    };\n\n    sortClassmateUserInfosAlphabeticallyByName() {\n        var classmateUserInfos = this.getClassmateUserInfos();\n\n        if (classmateUserInfos != null) {\n            classmateUserInfos.sort(this.sortClassmateUserInfosAlphabeticallyByNameHelper);\n        }\n\n        return classmateUserInfos;\n    };\n\n    sortClassmateUserInfosAlphabeticallyByNameHelper(a, b) {\n        var aUserName = a.userName;\n        var bUserName = b.userName;\n        var result = 0;\n\n        if (aUserName < bUserName) {\n            result = -1;\n        } else if (aUserName > bUserName) {\n            result = 1;\n        }\n\n        return result;\n    };\n\n    getUserInfoByWorkgroupId(workgroupId) {\n        var userInfo = null;\n\n        if (workgroupId != null) {\n\n            var myUserInfo = this.getMyUserInfo();\n\n            if (myUserInfo != null) {\n                var tempWorkgroupId = myUserInfo.workgroupId;\n\n                if (workgroupId === tempWorkgroupId) {\n                    userInfo = myUserInfo;\n                }\n            }\n\n            if (userInfo == null) {\n                var classmateUserInfos = this.getClassmateUserInfos();\n\n                if (classmateUserInfos != null) {\n                    for (var c = 0; c < classmateUserInfos.length; c++) {\n                        var classmateUserInfo = classmateUserInfos[c];\n\n                        if (classmateUserInfo != null) {\n                            var tempWorkgroupId = classmateUserInfo.workgroupId;\n\n                            if (workgroupId == tempWorkgroupId) {\n                                userInfo = classmateUserInfo;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return userInfo;\n    };\n\n    /**\n     * Get the period id for a workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the period id the workgroup id is in\n     */\n    getPeriodIdByWorkgroupId(workgroupId) {\n        var periodId = null;\n\n        if (workgroupId != null) {\n            var userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n            if (userInfo != null) {\n                periodId = userInfo.periodId;\n            }\n        }\n\n        return periodId;\n    };\n\n    /**\n     * Get the student names\n     * @param workgroupId the workgroup id\n     * @return an array containing the student names\n     */\n    getStudentFirstNamesByWorkgroupId(workgroupId) {\n        var studentNames = [];\n\n        // get the user names for the workgroup e.g. \"Spongebob Squarepants (SpongebobS0101):Patrick Star (PatrickS0101)\"\n        var userNames = this.getUserNameByWorkgroupId(workgroupId);\n\n        if (userNames != null) {\n            // split the user names string by ':'\n            var userNamesSplit = userNames.split(':');\n\n            if (userNamesSplit != null) {\n                // loop through each user name\n                for (var x = 0; x < userNamesSplit.length; x++) {\n                    // get a user name e.g. \"Spongebob Squarepants (spongebobs0101)\"\n                    var userName = userNamesSplit[x];\n\n                    // get the index of the first empty space\n                    var indexOfSpace = userName.indexOf(' ');\n\n                    // get the student first name e.g. \"Spongebob\"\n                    var studentFirstName = userName.substring(0, indexOfSpace);\n\n                    // add the student name to the array\n                    studentNames.push(studentFirstName);\n                }\n            }\n        }\n\n        return studentNames;\n    };\n\n    getUserNameByWorkgroupId(workgroupId) {\n        var userName = null;\n\n        if (workgroupId != null) {\n            var userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n            if (userInfo != null) {\n                userName = userInfo.userName;\n            }\n        }\n\n        return userName;\n    };\n\n    getUserNamesByWorkgroupId(workgroupId) {\n        let userNamesObjects = [];\n\n        if (workgroupId != null) {\n            let userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n            if (userInfo != null) {\n                let userNames = userInfo.userName.split(':');\n\n                for (let i = 0; i < userNames.length; i++) {\n                    let name = userNames[i];\n                    let id = \"\";\n                    let regex = /(.+) \\((.+)\\)/g;\n                    let matches = regex.exec(name);\n                    if (matches) {\n                        name = matches[1];\n                        id = matches[2];\n                    }\n                    userNamesObjects.push({\n                        name: name,\n                        id: id\n                    });\n                }\n            }\n        }\n\n        return userNamesObjects;\n    };\n\n    isPreview() {\n        var result = false;\n\n        var mode = this.getMode();\n\n        if (mode != null && mode === 'preview') {\n            result = true;\n        }\n\n        return result;\n    };\n\n    /**\n     * Convert a client timestamp to a server timestamp. This is required\n     * in case the client and server clocks are not synchronized.\n     * @param clientTimestamp the client timestamp\n     */\n    convertToServerTimestamp(clientTimestamp) {\n\n        // get the difference between the client time and server time\n        var timestampDiff = this.getConfigParam('timestampDiff');\n\n        // convert the client timestamp to a server timestamp\n        var serverTimestamp = clientTimestamp - timestampDiff;\n\n        return serverTimestamp;\n    }\n\n    /**\n     * Convert a server timestamp to a client timestamp. This is required\n     * in case the client and server clocks are not synchronized.\n     * @param serverTimestamp the client timestamp\n     */\n    convertToClientTimestamp(serverTimestamp) {\n\n        // get the difference between the client time and server time\n        var timestampDiff = this.getConfigParam('timestampDiff');\n\n        // convert the client timestamp to a server timestamp\n        var clientTimestamp = serverTimestamp + timestampDiff;\n\n        return clientTimestamp;\n    }\n    \n    /**\n     * Check if the workgroup is the owner of the run\n     * @param workgroupId the workgroup id\n     * @returns whether the workgroup is the owner of the run\n     */\n    isRunOwner(workgroupId) {\n        \n        var result = false;\n        \n        if (workgroupId != null) {\n            var teacherUserInfo = this.getTeacherUserInfo();\n            \n            if (teacherUserInfo != null) {\n                \n                if (workgroupId == teacherUserInfo.workgroupId) {\n                    result = true;\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Check if the workgroup is a shared teacher for the run\n     * @param workgroupId the workgroup id\n     * @returns whether the workgroup is a shared teacher of the run\n     */\n    isRunSharedTeacher(workgroupId) {\n        \n        var result = false;\n        \n        if (workgroupId != null) {\n            var sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n            \n            if (sharedTeacherUserInfos != null) {\n                \n                for (var s = 0; s < sharedTeacherUserInfos.length; s++) {\n                    var sharedTeacherUserInfo = sharedTeacherUserInfos[s];\n                    \n                    if (sharedTeacherUserInfo != null) {\n                        if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get the teacher role for the run\n     * @param workgroupId the workgroup id\n     * @returns the role of the teacher for the run. the possible values are\n     * 'owner', 'write', 'read'\n     */\n    getTeacherRole(workgroupId) {\n        var role = null;\n        \n        if (this.isRunOwner(workgroupId)) {\n            // the teacher is the owner of the run\n            role = 'owner';\n        } else if (this.isRunSharedTeacher(workgroupId)) {\n            // the teacher is a shared teacher so their role may be 'write' or 'read'\n            role = this.getSharedTeacherRole(workgroupId);\n        }\n        \n        return role;\n    }\n    \n    /**\n     * Get the shared teacher role for the run\n     * @param workgroupId the workgroup id\n     * @returns the shared teacher role for the run. the possible values are\n     * 'write' or 'read'\n     */\n    getSharedTeacherRole(workgroupId) {\n        var role = null;\n        \n        if (workgroupId != null) {\n            var sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n            \n            if (sharedTeacherUserInfos != null) {\n                \n                for (var s = 0; s < sharedTeacherUserInfos.length; s++) {\n                    var sharedTeacherUserInfo = sharedTeacherUserInfos[s];\n                    \n                    if (sharedTeacherUserInfo != null) {\n                        if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n                            role = sharedTeacherUserInfo.role;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return role;\n    }\n    \n    /** \n     * Replace student names in the content.\n     * For example, we will replace instances of {{firstStudentFirstName}} \n     * with the actual first name of the first student in the workgroup.\n     * @param content a content object or string\n     * @return an updated content object or string\n     */\n    replaceStudentNames(content) {\n        if (content != null) {\n\n            var contentString = content;\n\n            if (typeof content === 'object') {\n                // get the content as a string\n                contentString = JSON.stringify(content);\n            }\n            \n            if (contentString != null) {\n\n                // get the workgroup id\n                var workgroupId = this.getWorkgroupId();\n                \n                // get all the first names\n                var firstNames = this.getStudentFirstNamesByWorkgroupId(workgroupId);\n                \n                if (firstNames.length >= 1) {\n                    /*\n                     * there are 1 or more students in the workgroup so we can \n                     * replace the first student first name with the actual\n                     * name\n                     */\n                    contentString = contentString.replace(new RegExp('{{firstStudentFirstName}}', 'gi'), firstNames[0]);\n                    \n                    /*\n                     * there are 1 or more students in the workgroup so we can \n                     * replace the student first names with the actual names\n                     */\n                    contentString = contentString.replace(new RegExp('{{studentFirstNames}}', 'gi'), firstNames.join(\", \"));\n                }\n                \n                if (firstNames.length >= 2) {\n                    /*\n                     * there are 2 or more students in the workgroup so we can \n                     * replace the second student first name with the actual\n                     * name\n                     */\n                    contentString = contentString.replace(new RegExp('{{secondStudentFirstName}}', 'gi'), firstNames[1]);\n                }\n                \n                if (firstNames.length >= 3) {\n                    /*\n                     * there are 3 or more students in the workgroup so we can \n                     * replace the third student first name with the actual\n                     * name\n                     */\n                    contentString = contentString.replace(new RegExp('{{thirdStudentFirstName}}', 'gi'), firstNames[2]);\n                }\n            }\n            \n            if (typeof content === 'object') {\n                // convert the content string back into an object\n                content = JSON.parse(contentString);\n            } else if (typeof content === 'string') {\n                // the content was a string so we can just use the content string\n                content = contentString;\n            }\n        }\n\n        return content;\n    }\n};\n\nConfigService.$inject = [\n    '$http',\n    '$location'\n];\n\nexport default ConfigService;\n"]}