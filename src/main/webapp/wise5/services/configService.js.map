{"version":3,"sources":["configService.es6"],"names":["ConfigService","$filter","$http","$location","config","$translate","sortClassmateUserInfosAlphabeticallyByName","setPermissions","setClassmateDisplayNames","configURL","get","then","result","configJSON","data","retrievalTimestamp","clientTimestamp","Date","getTime","serverTimestamp","timestampDiff","constraints","absURL","$$absUrl","mode","constraintsRegEx","RegExp","match","showProjectPathRegEx","host","location","origin","projectURL","projectPath","console","log","setConfig","isPreview","myUserInfo","getMyUserInfo","workgroupId","Math","floor","random","paramName","getConfigParam","periodId","periods","myClassInfo","userId","id","userInfo","getUserInfo","userName","classmateUserInfos","getClassmateUserInfos","workgroup","displayNames","getDisplayUserNamesByWorkgroupId","sortedClassmateUserInfos","classmateUserInfo","push","sort","compareClassmateUserInfosByWorkgroupId","a","b","teacherWorkgroupId","teacherUserInfo","getTeacherUserInfo","sharedTeacherUserInfos","includeSelf","workgroupIds","getWorkgroupId","sortClassmateUserInfosAlphabeticallyByNameHelper","aUserName","toLowerCase","bUserName","role","getTeacherRole","canViewStudentNames","canGradeStudentWork","isSwitchedUser","tempWorkgroupId","getUserInfoByWorkgroupId","studentNames","userNames","getUserNameByWorkgroupId","userNamesSplit","split","indexOfSpace","indexOf","studentFirstName","substring","userIds","userNamesObjects","name","regex","matches","exec","usernames","getPermissions","names","getUserNamesByWorkgroupId","l","length","i","getUserIdsByWorkgroupId","getMode","getSharedTeacherUserInfos","sharedTeacherUserInfo","isRunOwner","isRunSharedTeacher","getSharedTeacherRole","content","contentString","JSON","stringify","firstNames","getStudentFirstNamesByWorkgroupId","replace","join","parse","avatarColors","modulo","getLibraryProjectsURL","reverse","includeHost","projectAssetsDirectoryPath","projectBaseURL","window","html","assetsDirectoryPathIncludingHost","getProjectAssetsDirectoryPath","assetsDirectoryPathIncludingHostRegEx","assetsDirectoryPathNotIncludingHost","assetsDirectoryPathNotIncludingHostRegEx","wiseIds","projects","sharedProjects","authorableProjects","concat","sortByProjectId","projectA","projectB","projectIdA","projectIdB","$inject"],"mappings":"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","file":"configService.js","sourcesContent":["'use strict';\n\nclass ConfigService {\n\n  constructor($filter, $http, $location) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$location = $location;\n    this.config = null;\n\n    this.$translate = this.$filter('translate');\n  };\n\n  setConfig(config) {\n    this.config = config;\n    this.sortClassmateUserInfosAlphabeticallyByName();\n    this.setPermissions();\n    this.setClassmateDisplayNames();\n  };\n\n  retrieveConfig(configURL) {\n    return this.$http.get(configURL).then((result) => {\n      const configJSON = result.data;\n\n      if (configJSON.retrievalTimestamp != null) {\n        // get the client timestamp\n        const clientTimestamp = new Date().getTime();\n\n        // get the server timestamp\n        const serverTimestamp = configJSON.retrievalTimestamp;\n\n        // get the difference between the client and server time\n        const timestampDiff = clientTimestamp - serverTimestamp;\n\n        // add the timestamp diff to the config object\n        configJSON.timestampDiff = timestampDiff;\n      }\n\n      let constraints = true;\n\n      // get the full url\n      const absURL = this.$location.$$absUrl;\n      \n      if (configJSON.mode == 'preview') {\n        // constraints can only be disabled using the url in preview mode\n\n        // regex to match constraints=false in the url\n        const constraintsRegEx = new RegExp(\"constraints=false\", 'gi');\n\n        if (absURL != null && absURL.match(constraintsRegEx)) {\n          // the url contains constraints=false\n          constraints = false;\n        }\n      }\n\n      // set the constraints value into the config so we can access it later\n      configJSON.constraints = constraints;\n\n      // regex to match showProjectPath=true in the url\n      const showProjectPathRegEx = new RegExp(\"showProjectPath=true\", 'gi');\n\n      if (absURL != null && absURL.match(showProjectPathRegEx)) {\n        // the url contains showProjectPath=true\n\n        // get the host e.g. http://wise.berkeley.edu\n        const host = location.origin;\n\n        // get the project URL e.g. /wise/curriculum/123/project.json\n        const projectURL = configJSON.projectURL;\n\n        // get the full project path\n        const projectPath = host + projectURL;\n\n        // output the full project path to the console\n        console.log(projectPath);\n      }\n\n      this.setConfig(configJSON);\n\n      if (this.isPreview()) {\n        // assign a random workgroup id\n        const myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n          // set the workgroup id to a random integer between 1 and 100\n          myUserInfo.workgroupId = Math.floor(100 * Math.random()) + 1;\n        }\n      }\n\n      return configJSON;\n    });\n  };\n\n  getConfigParam(paramName) {\n    if (this.config !== null) {\n      return this.config[paramName];\n    } else {\n      return null;\n    }\n  };\n\n  getAchievementsURL() {\n    return this.getConfigParam('achievementURL');\n  };\n\n  getCRaterRequestURL() {\n    return this.getConfigParam('cRaterRequestURL');\n  };\n\n  getMainHomePageURL() {\n    return this.getConfigParam('mainHomePageURL');\n  };\n\n  getNotificationURL() {\n    return this.getConfigParam('notificationURL');\n  };\n\n  getRunId() {\n    return this.getConfigParam('runId');\n  };\n\n  getProjectId() {\n    return this.getConfigParam('projectId');\n  };\n\n  getOpenCPUURL() {\n    return this.getConfigParam('openCPUURL');\n  };\n\n  getSessionLogOutURL() {\n    return this.getConfigParam('sessionLogOutURL');\n  };\n\n  getStudentAssetsURL() {\n    return this.getConfigParam('studentAssetsURL');\n  };\n\n  getStudentStatusURL() {\n    return this.getConfigParam('studentStatusURL');\n  };\n\n  getStudentMaxTotalAssetsSize() {\n    return this.getConfigParam('studentMaxTotalAssetsSize');\n  };\n\n  getStudentNotebookURL() {\n    return this.getConfigParam('studentNotebookURL');\n  };\n\n  getStudentUploadsBaseURL() {\n    return this.getConfigParam('studentUploadsBaseURL');\n  };\n\n  getUserInfo() {\n    return this.getConfigParam('userInfo');\n  };\n\n  getWebSocketURL() {\n    return this.getConfigParam('webSocketURL');\n  };\n\n  getWISEBaseURL() {\n    return this.getConfigParam('wiseBaseURL');\n  };\n\n  getLocale() {\n    return this.getConfigParam('locale') || 'en';\n  };\n\n  getMode() {\n    return this.getConfigParam('mode');\n  };\n\n  /**\n   * Returns the period id of the logged-in user.\n   */\n  getPeriodId() {\n    let periodId = null;\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      periodId = myUserInfo.periodId;\n    }\n    return periodId;\n  };\n\n  /**\n   * Get the periods\n   * @returns an array of period objects\n   */\n  getPeriods() {\n    let periods = [];\n\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n\n        if (myClassInfo.periods != null) {\n          periods = myClassInfo.periods;\n        }\n      }\n    }\n\n    return periods;\n  };\n\n  getWorkgroupId() {\n    let workgroupId = null;\n\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      workgroupId = myUserInfo.workgroupId;\n    }\n\n    return workgroupId;\n  };\n\n  /**\n   * Get the user id (aka WISE ID)\n   * @return the user id\n   */\n  getUserId() {\n\n    let userId = null;\n\n    const myUserInfo = this.getMyUserInfo();\n\n    if (myUserInfo != null) {\n      userId = myUserInfo.id;\n    }\n\n    return userId;\n  }\n\n  getMyUserInfo() {\n    let myUserInfo = null;\n\n    const userInfo = this.getUserInfo();\n    if (userInfo != null) {\n      myUserInfo = userInfo.myUserInfo;\n    }\n\n    return myUserInfo;\n  };\n\n  /**\n   * Get the user name of the signed in user\n   * @return the user name of the signed in user\n   */\n  getMyUserName() {\n\n    let userName = null;\n\n    // get my user info\n    const myUserInfo = this.getMyUserInfo();\n\n    if (myUserInfo != null) {\n      // get the user name\n      userName = myUserInfo.userName;\n    }\n\n    return userName;\n  }\n\n  getClassmateUserInfos() {\n    let classmateUserInfos = null;\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        classmateUserInfos = myClassInfo.classmateUserInfos;\n      }\n    }\n\n    return classmateUserInfos;\n  };\n\n  setClassmateDisplayNames() {\n    let classmateUserInfos = this.getClassmateUserInfos();\n\n    if (classmateUserInfos) {\n      for (let workgroup of classmateUserInfos) {\n        workgroup.displayNames = this.getDisplayUserNamesByWorkgroupId(workgroup.workgroupId);\n      }\n    }\n  }\n\n  /**\n   * Get the classmate user infos sorted by ascending workgroup id\n   * @return an array of classmate user info objects sorted by ascending\n   * workgroup id\n   */\n  getClassmateUserInfosSortedByWorkgroupId() {\n\n    const sortedClassmateUserInfos = [];\n\n    // get all the classmate user info objects\n    const classmateUserInfos = this.getClassmateUserInfos();\n\n    if (classmateUserInfos != null) {\n\n      /*\n       * loop through all the classmate user info objects and add it to\n       * new array of classmate user infos\n       */\n      for (let classmateUserInfo of classmateUserInfos) {\n        sortedClassmateUserInfos.push(classmateUserInfo);\n      }\n    }\n\n    // sort the new classmate user infos array by ascending workgroup id\n    sortedClassmateUserInfos.sort(this.compareClassmateUserInfosByWorkgroupId);\n\n    return sortedClassmateUserInfos;\n  }\n\n  /**\n   * Used to sort the classmate user infos by ascending workgroup id.\n   * Use by calling myArray.sort(compareClassmateUserInfosByWorkgroupId)\n   * @param a a user info object\n   * @param b a user info Object\n   * @return -1 if a comes before b\n   * 1 if a comes after b\n   * 0 if a equals b\n   */\n  compareClassmateUserInfosByWorkgroupId(a, b) {\n    if (a.workgroupId < b.workgroupId) {\n      return -1;\n    } else if (a.workgroupId > b.workgroupId) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  getTeacherWorkgroupId() {\n    let teacherWorkgroupId = null;\n    const teacherUserInfo = this.getTeacherUserInfo();\n    if (teacherUserInfo != null) {\n      teacherWorkgroupId = teacherUserInfo.workgroupId;\n    }\n    return teacherWorkgroupId;\n  };\n\n  getTeacherUserInfo() {\n    let teacherUserInfo = null;\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        teacherUserInfo = myClassInfo.teacherUserInfo;\n      }\n    }\n    return teacherUserInfo;\n  };\n\n  /**\n   * Get the shared teacher user infos for the run\n   */\n  getSharedTeacherUserInfos() {\n    let sharedTeacherUserInfos = null;\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        sharedTeacherUserInfos = myClassInfo.sharedTeacherUserInfos;\n      }\n    }\n    return sharedTeacherUserInfos;\n  }\n\n  getClassmateWorkgroupIds(includeSelf) {\n    const workgroupIds = [];\n\n    if (includeSelf) {\n      workgroupIds.push(this.getWorkgroupId());\n    }\n\n    const classmateUserInfos = this.getClassmateUserInfos();\n\n    if (classmateUserInfos != null) {\n      for (let classmateUserInfo of classmateUserInfos) {\n        if (classmateUserInfo != null) {\n          const workgroupId = classmateUserInfo.workgroupId;\n\n          if (workgroupId != null) {\n            workgroupIds.push(workgroupId);\n          }\n        }\n      }\n    }\n\n    return workgroupIds;\n  };\n\n  sortClassmateUserInfosAlphabeticallyByName() {\n    const classmateUserInfos = this.getClassmateUserInfos();\n\n    if (classmateUserInfos != null) {\n      classmateUserInfos.sort(this.sortClassmateUserInfosAlphabeticallyByNameHelper);\n    }\n\n    return classmateUserInfos;\n  };\n\n  sortClassmateUserInfosAlphabeticallyByNameHelper(a, b) {\n    let result = 0;\n\n    if (a != null && a.userName != null && b != null && b.userName != null) {\n      const aUserName = a.userName.toLowerCase();\n      const bUserName = b.userName.toLowerCase();\n\n      if (aUserName < bUserName) {\n        result = -1;\n      } else if (aUserName > bUserName) {\n        result = 1;\n      }\n    }\n\n    return result;\n  };\n\n  setPermissions() {\n    // get the role of the teacher for the run e.g. 'owner', 'write', 'read'\n    let role = this.getTeacherRole(this.getWorkgroupId());\n\n    if (role === 'owner') {\n      // the teacher is the owner of the run and has full access\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = true;\n    } else if (role === 'write') {\n      // the teacher is a shared teacher that can grade the student work\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = true;\n    } else if (role === 'read') {\n      // the teacher is a shared teacher that can only view the student work\n      this.config.canViewStudentNames = false;\n      this.config.canGradeStudentWork = false;\n    } else {\n      // teacher role is null, so assume we're in student mode\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = false;\n    }\n  }\n\n  getPermissions() {\n\n    // a switched user (admin/researcher user impersonating a teacher) should not be able to view/grade\n    return {\n      canViewStudentNames: this.config.canViewStudentNames && !this.isSwitchedUser(),\n      canGradeStudentWork: this.config.canGradeStudentWork && !this.isSwitchedUser()\n    }\n  }\n\n  getUserInfoByWorkgroupId(workgroupId) {\n    let userInfo = null;\n\n    if (workgroupId != null) {\n\n      const myUserInfo = this.getMyUserInfo();\n\n      if (myUserInfo != null) {\n        const tempWorkgroupId = myUserInfo.workgroupId;\n\n        if (workgroupId === tempWorkgroupId) {\n          userInfo = myUserInfo;\n        }\n      }\n\n      if (userInfo == null) {\n        const classmateUserInfos = this.getClassmateUserInfos();\n\n        if (classmateUserInfos != null) {\n          for (let classmateUserInfo of classmateUserInfos) {\n            if (classmateUserInfo != null) {\n              const tempWorkgroupId = classmateUserInfo.workgroupId;\n\n              if (workgroupId == tempWorkgroupId) {\n                userInfo = classmateUserInfo;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return userInfo;\n  };\n\n  /**\n   * Get the period id for a workgroup id\n   * @param workgroupId the workgroup id\n   * @returns the period id the workgroup id is in\n   */\n  getPeriodIdByWorkgroupId(workgroupId) {\n    let periodId = null;\n\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        periodId = userInfo.periodId;\n      }\n    }\n\n    return periodId;\n  };\n\n  /**\n   * Get the student names\n   * @param workgroupId the workgroup id\n   * @return an array containing the student names\n   */\n  getStudentFirstNamesByWorkgroupId(workgroupId) {\n    const studentNames = [];\n\n    // get the user names for the workgroup e.g. \"Spongebob Squarepants (SpongebobS0101):Patrick Star (PatrickS0101)\"\n    const userNames = this.getUserNameByWorkgroupId(workgroupId);\n\n    if (userNames != null) {\n      // split the user names string by ':'\n      const userNamesSplit = userNames.split(':');\n\n      if (userNamesSplit != null) {\n        // loop through each user name\n        for (let userName of userNamesSplit) {\n\n          // get the index of the first empty space\n          const indexOfSpace = userName.indexOf(' ');\n\n          // get the student first name e.g. \"Spongebob\"\n          const studentFirstName = userName.substring(0, indexOfSpace);\n\n          // add the student name to the array\n          studentNames.push(studentFirstName);\n        }\n      }\n    }\n\n    return studentNames;\n  };\n\n  getUserIdsByWorkgroupId(workgroupId) {\n    let userIds = [];\n\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        userIds = userInfo.userIds;\n      }\n    }\n\n    return userIds;\n  };\n\n  getUserNameByWorkgroupId(workgroupId) {\n    let userName = null;\n\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        userName = userInfo.userName;\n      }\n    }\n\n    return userName;\n  };\n\n  getDisplayNamesByWorkgroupId(workgroupId) {\n    let displayNames = null;\n\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        displayNames = userInfo.displayNames;\n      }\n    }\n\n    return displayNames;\n  };\n\n  getUserNamesByWorkgroupId(workgroupId) {\n    let userNamesObjects = [];\n\n    if (workgroupId != null) {\n      let userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        let userNames = userInfo.userName.split(':');\n\n        for (let name of userNames) {\n          let id = \"\";\n          let regex = /(.+) \\((.+)\\)/g;\n          let matches = regex.exec(name);\n          if (matches) {\n            name = matches[1];\n            id = matches[2];\n          }\n          userNamesObjects.push({\n            name: name,\n            id: id\n          });\n        }\n      }\n    }\n\n    return userNamesObjects;\n  };\n\n  getDisplayUserNamesByWorkgroupId(workgroupId) {\n    let usernames = '';\n\n    if (workgroupId != null) {\n      if (this.getPermissions().canViewStudentNames) {\n        let names = this.getUserNamesByWorkgroupId(workgroupId);\n        let l = names.length;\n        for (let i = 0; i < l; i++) {\n          let name = names[i].name;\n          usernames += name;\n\n          if (i < (l-1)) {\n            usernames += ', ';\n          }\n        }\n      } else {\n        // current user is not allowed to view student names, so return string with student ids\n        let userIds = this.getUserIdsByWorkgroupId(workgroupId);\n        for (let i = 0; i < userIds.length; i++) {\n          let id = userIds[i];\n          if (i !== 0) {\n            usernames += ', ';\n          }\n          usernames += this.$translate('studentId', {id: id});\n        }\n      }\n    }\n\n    return usernames;\n  };\n\n  isPreview() {\n    let result = false;\n\n    const mode = this.getMode();\n\n    if (mode != null && mode === 'preview') {\n      result = true;\n    }\n\n    return result;\n  };\n\n  /**\n   * Convert a client timestamp to a server timestamp. This is required\n   * in case the client and server clocks are not synchronized.\n   * @param clientTimestamp the client timestamp\n   */\n  convertToServerTimestamp(clientTimestamp) {\n\n    // get the difference between the client time and server time\n    const timestampDiff = this.getConfigParam('timestampDiff');\n\n    // convert the client timestamp to a server timestamp\n    const serverTimestamp = clientTimestamp - timestampDiff;\n\n    return serverTimestamp;\n  }\n\n  /**\n   * Convert a server timestamp to a client timestamp. This is required\n   * in case the client and server clocks are not synchronized.\n   * @param serverTimestamp the client timestamp\n   */\n  convertToClientTimestamp(serverTimestamp) {\n\n    // get the difference between the client time and server time\n    const timestampDiff = this.getConfigParam('timestampDiff');\n\n    // convert the client timestamp to a server timestamp\n    const clientTimestamp = serverTimestamp + timestampDiff;\n\n    return clientTimestamp;\n  }\n\n  /**\n   * Check if the workgroup is the owner of the run\n   * @param workgroupId the workgroup id\n   * @returns whether the workgroup is the owner of the run\n   */\n  isRunOwner(workgroupId) {\n\n    let result = false;\n\n    if (workgroupId != null) {\n      const teacherUserInfo = this.getTeacherUserInfo();\n\n      if (teacherUserInfo != null) {\n\n        if (workgroupId == teacherUserInfo.workgroupId) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the workgroup is a shared teacher for the run\n   * @param workgroupId the workgroup id\n   * @returns whether the workgroup is a shared teacher of the run\n   */\n  isRunSharedTeacher(workgroupId) {\n\n    let result = false;\n\n    if (workgroupId != null) {\n      const sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n\n      if (sharedTeacherUserInfos != null) {\n\n        for (let sharedTeacherUserInfo of sharedTeacherUserInfos) {\n          if (sharedTeacherUserInfo != null) {\n            if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the teacher role for the run\n   * @param workgroupId the workgroup id\n   * @returns the role of the teacher for the run. the possible values are\n   * 'owner', 'write', 'read'\n   */\n  getTeacherRole(workgroupId) {\n    let role = null;\n\n    if (this.isRunOwner(workgroupId)) {\n      // the teacher is the owner of the run\n      role = 'owner';\n    } else if (this.isRunSharedTeacher(workgroupId)) {\n      // the teacher is a shared teacher so their role may be 'write' or 'read'\n      role = this.getSharedTeacherRole(workgroupId);\n    }\n\n    return role;\n  }\n\n  /**\n   * Get the shared teacher role for the run\n   * @param workgroupId the workgroup id\n   * @returns the shared teacher role for the run. the possible values are\n   * 'write' or 'read'\n   */\n  getSharedTeacherRole(workgroupId) {\n    let role = null;\n\n    if (workgroupId != null) {\n      const sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n\n      if (sharedTeacherUserInfos != null) {\n\n        for (let sharedTeacherUserInfo of sharedTeacherUserInfos) {\n          if (sharedTeacherUserInfo != null) {\n            if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n              role = sharedTeacherUserInfo.role;\n            }\n          }\n        }\n      }\n    }\n\n    return role;\n  }\n\n  /**\n   * Replace student names in the content.\n   * For example, we will replace instances of {{firstStudentFirstName}}\n   * with the actual first name of the first student in the workgroup.\n   * @param content a content object or string\n   * @return an updated content object or string\n   */\n  replaceStudentNames(content) {\n    if (content != null) {\n\n      let contentString = content;\n\n      if (typeof content === 'object') {\n        // get the content as a string\n        contentString = JSON.stringify(content);\n      }\n\n      if (contentString != null) {\n\n        // get the workgroup id\n        const workgroupId = this.getWorkgroupId();\n\n        // get all the first names\n        const firstNames = this.getStudentFirstNamesByWorkgroupId(workgroupId);\n\n        if (firstNames.length >= 1) {\n          /*\n           * there are 1 or more students in the workgroup so we can\n           * replace the first student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{firstStudentFirstName}}', 'gi'), firstNames[0]);\n\n          /*\n           * there are 1 or more students in the workgroup so we can\n           * replace the student first names with the actual names\n           */\n          contentString = contentString.replace(new RegExp('{{studentFirstNames}}', 'gi'), firstNames.join(\", \"));\n        }\n\n        if (firstNames.length >= 2) {\n          /*\n           * there are 2 or more students in the workgroup so we can\n           * replace the second student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{secondStudentFirstName}}', 'gi'), firstNames[1]);\n        }\n\n        if (firstNames.length >= 3) {\n          /*\n           * there are 3 or more students in the workgroup so we can\n           * replace the third student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{thirdStudentFirstName}}', 'gi'), firstNames[2]);\n        }\n      }\n\n      if (typeof content === 'object') {\n        // convert the content string back into an object\n        content = JSON.parse(contentString);\n      } else if (typeof content === 'string') {\n        // the content was a string so we can just use the content string\n        content = contentString;\n      }\n    }\n\n    return content;\n  }\n\n  getAvatarColorForWorkgroupId(workgroupId) {\n    const avatarColors = ['#E91E63', '#9C27B0', '#CDDC39', '#2196F3', '#FDD835', '#43A047', '#795548', '#EF6C00', '#C62828', '#607D8B'];\n    const modulo = workgroupId % 10;\n    return avatarColors[modulo];\n  }\n\n  /**\n   * Get the library projects\n   */\n  getLibraryProjects() {\n\n    // get the URL to get the list of library projects\n    const getLibraryProjectsURL = this.getConfigParam('getLibraryProjectsURL');\n\n    if (getLibraryProjectsURL != null) {\n\n      // request the list of library projects\n      return this.$http.get(getLibraryProjectsURL).then((result) => {\n\n        const data = result.data;\n\n        if (data != null) {\n          // reverse the list so that it is ordered newest to oldest\n          data.reverse();\n        }\n\n        return data;\n      });\n    }\n  }\n\n  /**\n   * Get the project assets folder path\n   * @param includeHost whether to include the host in the URL\n   * @return the project assets folder path\n   * e.g.\n   * with host\n   * http://wise.berkeley.edu/wise/curriculum/3/assets\n   * without host\n   * /wise/curriculum/3/assets\n   */\n  getProjectAssetsDirectoryPath(includeHost) {\n    let projectAssetsDirectoryPath = null;\n\n    // get the project base URL e.g. /wise/curriculum/3/\n    const projectBaseURL = this.getConfigParam('projectBaseURL');\n\n    if (projectBaseURL != null) {\n      if (includeHost) {\n        // get the host e.g. http://wise.berkeley.edu\n        const host = window.location.origin;\n\n        /*\n         * get the full path including the host\n         * e.g. http://wise.berkeley.edu/wise/curriculum/3/assets\n         */\n        projectAssetsDirectoryPath = host + projectBaseURL + 'assets';\n      } else {\n        /*\n         * get the full path not including the host\n         * e.g. /wise/curriculum/3/assets\n         */\n        projectAssetsDirectoryPath = projectBaseURL + 'assets';\n      }\n    }\n\n    return projectAssetsDirectoryPath;\n  }\n\n  /**\n   * Remove the absolute asset paths\n   * e.g.\n   * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n   * will be changed to\n   * <img src='sun.png'/>\n   * @param html the html\n   * @return the modified html without the absolute asset paths\n   */\n  removeAbsoluteAssetPaths(html) {\n    /*\n     * get the assets directory path with the host\n     * e.g.\n     * https://wise.berkeley.edu/wise/curriculum/3/assets/\n     */\n    const includeHost = true;\n    const assetsDirectoryPathIncludingHost = this.getProjectAssetsDirectoryPath(includeHost);\n    const assetsDirectoryPathIncludingHostRegEx = new RegExp(assetsDirectoryPathIncludingHost, 'g');\n\n    /*\n     * get the assets directory path without the host\n     * e.g.\n     * /wise/curriculum/3/assets/\n     */\n    const assetsDirectoryPathNotIncludingHost = this.getProjectAssetsDirectoryPath() + '/';\n    const assetsDirectoryPathNotIncludingHostRegEx = new RegExp(assetsDirectoryPathNotIncludingHost, 'g');\n\n    /*\n     * remove the directory path from the html so that only the file name\n     * remains in asset references\n     * e.g.\n     * <img src='https://wise.berkeley.edu/wise/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = html.replace(assetsDirectoryPathIncludingHostRegEx, '');\n    html = html.replace(assetsDirectoryPathNotIncludingHostRegEx, '');\n\n    return html\n  }\n\n  /**\n   * Get the WISE IDs for a workgroup\n   * @param workgroupId get the WISE IDs for this workgroup\n   * @return an array of WISE IDs\n   */\n  getWISEIds(workgroupId) {\n\n    let wiseIds = [];\n\n    if (workgroupId != null) {\n      // get the user info object for the workgroup id\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n\n      if (userInfo != null) {\n        // get the WISE IDs\n        wiseIds = userInfo.userIds;\n      }\n    }\n\n    return wiseIds;\n  }\n\n  /**\n   * Get all the authorable projects\n   */\n  getAuthorableProjects() {\n\n    // get the projects this teacher owns\n    const projects = this.getConfigParam('projects');\n\n    // get the projects that were shared with the teacher\n    const sharedProjects = this.getConfigParam('sharedProjects');\n\n    let authorableProjects = [];\n\n    if (projects != null) {\n      // add the owned projects\n      authorableProjects = authorableProjects.concat(projects);\n    }\n\n    if (sharedProjects != null) {\n      // add the shared projects\n      authorableProjects = authorableProjects.concat(sharedProjects);\n    }\n\n    // sort the projects by descending id\n    authorableProjects.sort(this.sortByProjectId);\n\n    return authorableProjects;\n  }\n\n  /**\n   * Determines whether the current user is logged in as somebody else\n   * @return true iff the user is a switched user\n   */\n  isSwitchedUser() {\n    let myUserInfo = this.getMyUserInfo();\n\n    if (myUserInfo != null) {\n\n      if (myUserInfo.isSwitchedUser) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sort the objects by descending id.\n   * @param projectA an object with an id field\n   * @param projectB an object with an id field\n   * @return 1 if projectA comes before projectB\n   * -1 if projectA comes after projectB\n   * 0 if they are the same\n   */\n  sortByProjectId(projectA, projectB) {\n    const projectIdA = projectA.id;\n    const projectIdB = projectB.id;\n\n    if (projectIdA < projectIdB) {\n      return 1;\n    } else if (projectIdA > projectIdB) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n}\n\nConfigService.$inject = [\n  '$filter',\n  '$http',\n  '$location'\n];\n\nexport default ConfigService;\n"]}