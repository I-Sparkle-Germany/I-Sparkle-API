{"version":3,"sources":["nodeService.es6"],"names":[],"mappings":"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","file":"nodeService.js","sourcesContent":["class NodeService {\n\n    constructor($http, $injector, $q, ConfigService, ProjectService, StudentDataService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n    }\n\n    getLatestNodeState(nodeVisits) {\n        var result = null;\n\n        if (nodeVisits != null) {\n            for (var nv = nodeVisits.length - 1; nv >= 0; nv--) {\n                var nodeVisit = nodeVisits[nv];\n\n                if (nodeVisit != null) {\n                    var nodeStates = nodeVisit.nodeStates;\n\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n                            result = nodeState;\n                            break;\n                        }\n                    }\n\n                    if (result != null) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.response;\n\n            studentWorkAsHTML = '<p>' + response + '</p>';\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewComponentState() {\n        var componentState = {};\n\n        // set the timestamp\n        componentState.clientSaveTime = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewNodeState() {\n        var nodeState = {};\n\n        // set the timestamp\n        nodeState.clientSaveTime = Date.parse(new Date());\n\n        return nodeState;\n    };\n\n    /**\n     * Get the node type in camel case\n     * @param nodeType the node type e.g. OpenResponse\n     * @return the node type in camel case\n     * e.g.\n     * openResponse\n     */\n    toCamelCase(nodeType) {\n        var nodeTypeCamelCased = null;\n\n        if (nodeType != null && nodeType.length > 0) {\n\n            // get the first character\n            var firstChar = nodeType.charAt(0);\n\n            if(firstChar != null) {\n\n                // make the first character lower case\n                var firstCharLowerCase = firstChar.toLowerCase();\n\n                if (firstCharLowerCase != null) {\n\n                    /*\n                     * replace the first character with the lower case\n                     * character\n                     */\n                    nodeTypeCamelCased = firstCharLowerCase + nodeType.substr(1);\n                }\n            }\n        }\n\n        return nodeTypeCamelCased;\n    };\n\n    /**\n     * Check if the string is in all uppercase\n     * @param str the string to check\n     * @return whether the string is in all uppercase\n     */\n    isStringUpperCase(str) {\n        var result = false;\n\n        if (str != null) {\n            if (str === str.toUpperCase()) {\n                // the string is in all uppercase\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n\n        if (componentType == null) {\n            // error\n        } else if (this.isStringUpperCase(componentType)) {\n            /*\n             * the component type is all uppercase so we will convert it to all\n             * lowercase\n             */\n            componentType = componentType.toLowerCase();\n        } else {\n            // get the component type in camel case\n            componentType = this.toCamelCase(componentType);\n        }\n        var wiseBaseURL = this.ConfigService.getConfigParam('wiseBaseURL');\n        return wiseBaseURL + '/wise5/components/' + componentType + '/index.html';\n    };\n\n    /**\n     * Get the component content\n     * @param componentContent the component content\n     * @param componentId the component id\n     * @return the component content\n     */\n    getComponentContentById(nodeContent, componentId) {\n        var componentContent = null;\n\n        if (nodeContent != null && componentId != null) {\n\n            // get the components\n            var components = nodeContent.components;\n\n            if (components != null) {\n\n                // loop through the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        var tempComponentId = tempComponent.id;\n\n                        if (tempComponentId === componentId) {\n                            // we have found the component with the component id we want\n                            componentContent = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentContent;\n    };\n\n    /**\n     * Check if any of the component states were submitted\n     * @param componentStates an array of component states\n     * @return whether any of the component states were submitted\n     */\n    isWorkSubmitted(componentStates) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    if (componentState.isSubmit) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'isCompleted') {\n            result = this.isCompleted(functionParams);\n        } else if (functionName === 'branchPathTaken') {\n            result = this.branchPathTaken(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents);\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the node or component is completed\n     * @param functionParams the params that will specify which node or component\n     * to check for completion\n     * @returns whether the specified node or component is completed\n     */\n    isCompleted(functionParams) {\n\n        var result = false;\n\n        if (functionParams != null) {\n            var nodeId = functionParams.nodeId;\n            var componentId = functionParams.componentId;\n\n            result = this.StudentDataService.isCompleted(nodeId, componentId);\n        }\n\n        return result;\n    };\n\n    branchPathTaken(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n\n        var result = false;\n\n        var expectedFromNodeId = null;\n        var expectedToNodeId = null;\n\n        if (node != null) {\n            expectedFromNodeId = node.id;\n        }\n\n        if (functionParams != null && functionParams.toNodeId != null) {\n            expectedToNodeId = functionParams.toNodeId;\n        }\n\n        if (nodeStates != null) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = nodeState.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n\n                            var fromNodeId = studentData.fromNodeId;\n                            var toNodeId = studentData.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId &&\n                                expectedToNodeId === toNodeId) {\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Go to the next node\n     */\n    goToNextNode() {\n\n        var nextNodeId = this.getNextNodeId();\n        if (nextNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        }\n    };\n\n    /**\n     * Get the next node in the project sequence\n     */\n    getNextNodeId() {\n\n        var nextNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var currentNodeId = currentNode.id;\n\n            // get the branch path node states\n            var branchPathNodeStates = this.StudentDataService.getBranchPathTakenNodeStates(currentNodeId);\n\n            if (branchPathNodeStates != null && branchPathNodeStates.length > 0) {\n\n                // loop through the branch path node states from newest to oldest\n                for (var b = branchPathNodeStates.length - 1; b >= 0; b--) {\n                    var nodeState = branchPathNodeStates[b];\n\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        // get the to node id for the node state\n                        nextNodeId = studentData.toNodeId;\n                    }\n                }\n            } else {\n                // get the transition logic from the current node\n                var transitions = this.ProjectService.getTransitionLogicByFromNodeId(currentNodeId);\n\n                // choose a transition\n                var transition = this.chooseTransition(transitions);\n\n                if (transition != null) {\n                    // move the student to the toNodeId\n                    nextNodeId = transition.to;\n                }\n            }\n        }\n\n        return nextNodeId;\n    };\n\n    /**\n     * Go to the previous node\n     */\n    goToPrevNode() {\n\n        var prevNodeId = this.getPrevNodeId();\n        if (prevNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n        }\n    };\n\n    /**\n     * Get the previous node in the project sequence\n     */\n    getPrevNodeId() {\n\n        var prevNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var currentNodeId = currentNode.id;\n\n            var transitions = this.ProjectService.getTransitionsByToNodeId(currentNodeId);\n\n            if (transitions != null && transitions.length === 1) {\n                // TODO: remove this if case, as transition.from has been deprecated\n                var transition = transitions[0];\n\n                if (transition != null) {\n                    prevNodeId = transition.from;\n                }\n            } else {\n                var currentNodePos = this.ProjectService.getOrderById(currentNode.id);\n                var previousPos = currentNodePos-1;\n                if(previousPos > 0) {\n                    prevNodeId = this.ProjectService.getIdByOrder(previousPos);\n                }\n            }\n        }\n\n        return prevNodeId;\n    };\n\n    /**\n     * Close the current node (and open the current node's parent group)\n     */\n    closeNode() {\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode) {\n\n            var currentNodeId = currentNode.id;\n\n            // get the parent node of the current node\n            var parentNode = this.ProjectService.getParentGroup(currentNodeId);\n\n            var parentNodeId = parentNode.id;\n\n            // set the current node to the parent node\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\n        }\n    };\n\n    /**\n     * Choose the transition the student will take\n     * @param transitionLogic an object containing transitions and parameters\n     * for how to choose a transition\n     * @returns a transition object\n     */\n    chooseTransition(transitionLogic) {\n        var transitionResult = null;\n        if (transitionLogic != null) {\n\n            // get the transitions\n            var transitions = transitionLogic.transitions;\n\n            if (transitions != null) {\n\n                var availableTransitions = [];\n\n                // loop through all the transitions\n                for (var t = 0; t < transitions.length; t++) {\n\n                    // get a transition\n                    var transition = transitions[t];\n\n                    // get the to node id\n                    var toNodeId = transition.to;\n\n                    // get the criteria for which this transition can be used\n                    var criteria = transition.criteria;\n\n                    // set the default result to true in case there is no criteria\n                    var criteriaResult = true;\n\n                    if (criteria != null) {\n\n                        var firstResult = true;\n                        var tempResult = true;\n\n                        // loop through all of the criteria\n                        for (var c = 0; c < criteria.length; c++) {\n\n                            // get a criteria\n                            var tempCriteria = criteria[c];\n\n                            // check if the criteria is satisfied\n                            tempResult = this.StudentDataService.evaluateCriteria(tempCriteria);\n\n                            if (firstResult) {\n                                // this is the first criteria in this for loop\n                                criteriaResult = tempResult;\n                                firstResult = false;\n                            } else {\n                                // this is not the first criteria in this for loop so we will && the result\n                                criteriaResult = criteriaResult && tempResult;\n                            }\n                        }\n                    }\n\n                    if (toNodeId != null) {\n\n                        // check if the criteria was satisfied and the to node is visitable\n                        if (criteriaResult) {\n\n                            // the student is allowed to use the transition\n                            availableTransitions.push(transition);\n                        }\n                    }\n                }\n\n                // there are available transitions for the student\n                if (availableTransitions.length > 0) {\n\n                    var howToChooseAmongAvailablePaths = transitionLogic.howToChooseAmongAvailablePaths;\n\n                    if (howToChooseAmongAvailablePaths == null || howToChooseAmongAvailablePaths === 'random') {\n                        // choose a random transition\n\n                        var randomIndex = Math.floor(Math.random() * availableTransitions.length);\n                        transitionResult = availableTransitions[randomIndex];\n                    } else if (howToChooseAmongAvailablePaths === 'firstAvailable') {\n                        // choose the first available transition\n\n                        transitionResult = availableTransitions[0];\n                    } else if (howToChooseAmongAvailablePaths === 'lastAvailable') {\n                        // choose the last available transition\n\n                        transitionResult = availableTransitions[availableTransitions.length - 1];\n                    }\n                }\n            }\n        }\n        return transitionResult;\n    };\n\n    hasTransitionLogic() {\n        var result = false;\n\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    evaluateTransitionLogic() {\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n                //var whenToChoosePath = transitionLogic.whenToChoosePath;\n\n                //var nodeStates = this.StudentDataService.getNodeStatesByNodeId(currentNode.id);\n\n                var transitions = transitionLogic.transitions;\n                var canChangePath = transitionLogic.canChangePath;\n\n                var alreadyBranched = false;\n                var latestBranchNodeState = this.getLatestBranchNodeState(currentNode.id);\n\n                if (latestBranchNodeState != null) {\n                    alreadyBranched = true;\n                }\n\n                var transition, fromeNodeId, toNodeId;\n\n                if (alreadyBranched) {\n                    // student has previously branched\n\n                    if (canChangePath) {\n                        // student can change path\n\n                        // choose a transition\n                        transition = this.chooseTransition(transitionLogic);\n\n                        if (transition != null) {\n                            fromNodeId = currentNode.id;\n                            toNodeId = transition.to;\n\n                            this.createBranchNodeState(fromNodeId, toNodeId);\n                        }\n                    } else {\n                        // student can't change path\n\n                    }\n\n                } else {\n                    // student has not branched yet\n\n                    // choose a transition\n                    transition = this.chooseTransition(transitionLogic);\n\n                    if (transition != null) {\n                        fromNodeId = currentNode.id;\n                        toNodeId = transition.to;\n\n                        this.createBranchNodeState(fromNodeId, toNodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getBranchNodeStates() {\n        var branchNodeStates = [];\n\n        var nodeStates = this.StudentDataService.getNodeStatesByNodeId(currentNode.id);\n\n        if (nodeStates != null) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n                            branchNodeStates.push(nodeState);\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchNodeStates;\n    };\n\n    createBranchNodeState(fromNodeId, toNodeId) {\n\n        if (fromNodeId != null && toNodeId != null) {\n\n            // create a new node state\n            var nodeState = this.createNewNodeState();\n            nodeState.runId = this.ConfigService.getRunId();\n            nodeState.periodId = this.ConfigService.getPeriodId();\n            nodeState.workgroupId = this.ConfigService.getWorkgroupId();\n            nodeState.nodeId = fromNodeId;\n            nodeState.isAutoSave = false;\n            nodeState.isSubmit = false;\n\n            var studentData = {};\n            studentData.dataType = 'branchPathTaken';\n            studentData.fromNodeId = fromNodeId;\n            studentData.toNodeId = toNodeId;\n\n            nodeState.studentData = studentData;\n            var nodeStates = [];\n            nodeStates.push(nodeState);\n            this.StudentDataService.saveNodeStates(nodeStates);\n        }\n    };\n\n    /**\n     * Get the latest branch node state for given nodeId\n     */\n    getLatestBranchNodeState(nodeId) {\n\n        var latestBranchNodeState = null;\n\n        var nodeStates = this.StudentDataService.getNodeStatesByNodeId(nodeId);\n\n        if (nodeStates != null) {\n            for (var n = nodeStates.length - 1; n >= 0; n--) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n                            latestBranchNodeState = nodeState;\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestBranchNodeState;\n    };\n\n    evaluateTransitionLogicOn(event) {\n\n        var result = false;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            var whenToChoosePath = transitionLogic.whenToChoosePath;\n\n            if (event === whenToChoosePath) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n}\n\nNodeService.$inject = ['$http', '$injector', '$q', 'ConfigService', 'ProjectService', 'StudentDataService'];\n\nexport default NodeService;\n"]}