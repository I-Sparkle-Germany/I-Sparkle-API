{"version":3,"sources":["nodeService.es6"],"names":["NodeService","$filter","$http","$injector","$mdDialog","$q","ConfigService","ProjectService","StudentDataService","$translate","getMode","TeacherDataService","get","transitionResults","chooseTransitionPromises","componentState","clientSaveTime","Date","parse","nodeState","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","nodeType","length","firstChar","charAt","firstCharLowerCase","toLowerCase","substr","str","toUpperCase","componentType","isStringUpperCase","toCamelCase","wiseBaseURL","getWISEBaseURL","nodeContent","componentId","components","tempComponent","tempComponentId","id","componentStates","isSubmit","functionParams","nodeId","isCompleted","getNextNodeId","then","nextNodeId","mode","endCurrentNodeAndSetCurrentNodeByNodeId","currentId","deferred","defer","promise","currentNodeId","currentNode","getCurrentNode","currentNodeOrder","getNodeOrderById","nextNodeOrder","nextId","getNodeIdByOrder","isApplicationNode","isGroupNode","resolve","transitionLogic","getTransitionLogicByFromNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","canChangePath","b","branchPathTakenEvent","data","toNodeId","transitions","parentGroupId","getParentGroupId","parentHasTransitionLogic","parentTransitionLogic","chooseTransition","transition","transitionToNodeId","to","startId","getGroupStartId","getNextNodeIdWithWork","hasWork","nodeHasWork","prevNodeId","getPrevNodeId","prevNodeOrder","prevId","nodeIdsByToNodeId","getNodeIdsByToNodeId","stackHistory","getStackHistory","s","stackHistoryNodeId","indexOf","getPrevNodeIdWithWork","parentNode","getParentGroup","parentNodeId","getChooseTransitionPromise","resolvePromiseNow","transitionResult","getTransitionResultByNodeId","availableTransitions","criteria","criteriaResult","firstResult","tempResult","tempCriteria","evaluateCriteria","push","isPreview","ChooseBranchPathController","$scope","chooseBranchPath","setTransitionResult","setChooseTransitionPromise","hide","getNodePositionAndTitleByNodeId","close","chooseBranchPathTemplateUrl","getThemePath","dialogOptions","templateUrl","controller","locals","$inject","show","howToChooseAmongAvailablePaths","randomIndex","Math","floor","random","index","alreadyBranched","events","fromNodeId","createBranchPathTakenEvent","category","event","eventData","saveVLEEvent","whenToChoosePath","$event","stepNumberAndTitle","rubricTitle","dialogHeader","dialogActions","dialogContent","dialogString","template","fullscreen","DialogController","openInNewWindow","w","window","open","windowHeader","rubricContent","document","getElementById","innerHTML","windowString","write","targetEvent","clickOutsideToClose","escapeToClose"],"mappings":"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","file":"nodeService.js","sourcesContent":["class NodeService {\n  constructor(\n      $filter,\n      $http,\n      $injector,\n      $mdDialog,\n      $q,\n      ConfigService,\n      ProjectService,\n      StudentDataService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    if (this.$filter) {\n      this.$translate = this.$filter('translate');\n    }\n    if (this.ConfigService != null &&\n        (this.ConfigService.getMode() == \"classroomMonitor\" ||\n        this.ConfigService.getMode() == \"author\")) {\n      // in the classroom monitor, we need access to the TeacherDataService\n      this.TeacherDataService = this.$injector.get('TeacherDataService');\n    }\n    this.transitionResults = {};\n    this.chooseTransitionPromises = {};\n  }\n\n  /**\n   * Create a new empty node state\n   * @return a new empty node state\n   */\n  createNewComponentState() {\n    const componentState = {};\n    componentState.clientSaveTime = Date.parse(new Date());\n    return componentState;\n  };\n\n  /**\n   * Create a new empty node state\n   * @return a new empty node state\n   */\n  createNewNodeState() {\n    const nodeState = {};\n    nodeState.runId = this.ConfigService.getRunId();\n    nodeState.periodId = this.ConfigService.getPeriodId();\n    nodeState.workgroupId = this.ConfigService.getWorkgroupId();\n    nodeState.clientSaveTime = Date.parse(new Date());\n    return nodeState;\n  };\n\n  /**\n   * Get the node type in camel case\n   * @param nodeType the node type e.g. OpenResponse\n   * @return the node type in camel case\n   * e.g.\n   * openResponse\n   */\n  toCamelCase(nodeType) {\n    if (nodeType != null && nodeType.length > 0) {\n      const firstChar = nodeType.charAt(0);\n      if (firstChar != null) {\n        const firstCharLowerCase = firstChar.toLowerCase();\n        if (firstCharLowerCase != null) {\n          return firstCharLowerCase + nodeType.substr(1);\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check if the string is in all uppercase\n   * @param str the string to check\n   * @return whether the string is in all uppercase\n   */\n  isStringUpperCase(str) {\n    return str != null && str === str.toUpperCase();\n  };\n\n  /**\n   * Get the html template for the component\n   * @param componentType the component type\n   * @return the path to the html template for the component\n   */\n  getComponentTemplatePath(componentType) {\n    if (componentType == null) {\n      // error\n    } else if (this.isStringUpperCase(componentType)) {\n      /*\n       * the component type is all uppercase so we will convert it to all\n       * lowercase\n       */\n      componentType = componentType.toLowerCase();\n    } else {\n      componentType = this.toCamelCase(componentType);\n    }\n    const wiseBaseURL = this.ConfigService.getWISEBaseURL();\n    return wiseBaseURL + '/wise5/components/' + componentType + '/index.html';\n  };\n\n  /**\n   * Get the component content\n   * @param componentContent the component content\n   * @param componentId the component id\n   * @return the component content\n   */\n  getComponentContentById(nodeContent, componentId) {\n    if (nodeContent != null && componentId != null) {\n      const components = nodeContent.components;\n      if (components != null) {\n        for (let tempComponent of components) {\n          if (tempComponent != null) {\n            const tempComponentId = tempComponent.id;\n            if (tempComponentId === componentId) {\n              return tempComponent;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check if any of the component states were submitted\n   * @param componentStates an array of component states\n   * @return whether any of the component states were submitted\n   */\n  isWorkSubmitted(componentStates) {\n    if (componentStates != null) {\n      for (let componentState of componentStates) {\n        if (componentState != null) {\n          if (componentState.isSubmit) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Check if the node or component is completed\n   * @param functionParams the params that will specify which node or component\n   * to check for completion\n   * @returns whether the specified node or component is completed\n   */\n  isCompleted(functionParams) {\n    if (functionParams != null) {\n      const nodeId = functionParams.nodeId;\n      const componentId = functionParams.componentId;\n      return this.StudentDataService.isCompleted(nodeId, componentId);\n    }\n    return false;\n  };\n\n  /**\n   * Go to the next node\n   * @return a promise that will return the next node id\n   */\n  goToNextNode() {\n    return this.getNextNodeId().then((nextNodeId) => {\n      if (nextNodeId != null) {\n        const mode = this.ConfigService.getMode();\n        if (mode === 'classroomMonitor' || mode === 'author') {\n          this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        } else {\n          this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        }\n      }\n      return nextNodeId;\n    });\n  };\n\n  /**\n   * Get the next node in the project sequence. We return a promise because\n   * in preview mode we allow the user to specify which branch path they want\n   * to go to. In all other cases we will resolve the promise immediately.\n   * @param currentId (optional)\n   * @returns a promise that returns the next node id\n   */\n  getNextNodeId(currentId) {\n    // create a promise that will return the next node id\n    let deferred = this.$q.defer();\n    let promise = deferred.promise;\n    let nextNodeId = null;\n    let currentNodeId = null;\n    let mode = this.ConfigService.getMode();\n\n    if (currentId) {\n      currentNodeId = currentId;\n    } else {\n      let currentNode = null;\n      if (mode === 'classroomMonitor' || mode === 'author') {\n        currentNode = this.TeacherDataService.getCurrentNode();\n      } else {\n        currentNode = this.StudentDataService.getCurrentNode();\n      }\n      if (currentNode) {\n        currentNodeId = currentNode.id;\n      }\n    }\n\n    if (currentNodeId) {\n      if (mode === 'classroomMonitor' || mode === 'author') {\n        let currentNodeOrder = this.ProjectService.getNodeOrderById(currentNodeId);\n        if (currentNodeOrder) {\n          let nextNodeOrder = currentNodeOrder + 1;\n          let nextId = this.ProjectService.getNodeIdByOrder(nextNodeOrder);\n          if (nextId) {\n            if (this.ProjectService.isApplicationNode(nextId)) {\n              // node is a step, so set it as the next node\n              nextNodeId = nextId;\n            } else if (this.ProjectService.isGroupNode(nextId)){\n              // node is an activity, so get next nodeId\n              nextNodeId = this.getNextNodeId(nextId);\n            }\n          }\n        }\n\n        // resolve the promise with the next node id\n        deferred.resolve(nextNodeId);\n      } else {\n        // get the transition logic from the current node\n        const transitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(currentNodeId);\n\n        // get all the branchPathTaken events for the current node\n        const branchPathTakenEvents = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNodeId);\n\n        if (branchPathTakenEvents != null && branchPathTakenEvents.length > 0 &&\n          (transitionLogic != null && transitionLogic.canChangePath != true)) {\n          // the student has branched on this node before and they are not allowed to change paths\n\n          // loop through all the branchPathTaken events from newest to oldest\n          for (let b = branchPathTakenEvents.length - 1; b >= 0; b--) {\n            const branchPathTakenEvent = branchPathTakenEvents[b];\n            if (branchPathTakenEvent != null) {\n              const data = branchPathTakenEvent.data;\n              if (data != null) {\n                const toNodeId = data.toNodeId;\n                nextNodeId = toNodeId;\n                deferred.resolve(nextNodeId);\n                break;\n              }\n            }\n          }\n        } else {\n          // the student has not branched on this node before\n          if (transitionLogic != null) {\n            const transitions = transitionLogic.transitions;\n            if (transitions == null || transitions.length == 0) {\n              /*\n               * this node does not have any transitions so we will\n               * check if the parent group has transitions\n               */\n\n              const parentGroupId = this.ProjectService.getParentGroupId(currentNodeId);\n              let parentHasTransitionLogic = false;\n              if (parentGroupId != null) {\n                const parentTransitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(parentGroupId);\n                if (parentTransitionLogic != null) {\n                  parentHasTransitionLogic = true;\n\n                  this.chooseTransition(parentGroupId, parentTransitionLogic).then((transition) => {\n                    if (transition != null) {\n                      // get the to node id\n                      const transitionToNodeId = transition.to;\n                      if (this.ProjectService.isGroupNode(transitionToNodeId)) {\n                        // the to node is a group\n\n                        const startId = this.ProjectService.getGroupStartId(transitionToNodeId);\n                        if (startId == null || startId == '') {\n                          // the group does not have a start id so we will just use the group\n                          nextNodeId = transitionToNodeId;\n                        } else {\n                          // the group has a start id so we will use the start id\n                          nextNodeId = startId;\n                        }\n                      } else {\n                        // the to node is a step\n                        nextNodeId = transitionToNodeId;\n                      }\n                    }\n\n                    // resolve the promise with the next node id\n                    deferred.resolve(nextNodeId);\n                  });\n                }\n              }\n\n              if (!parentHasTransitionLogic) {\n                /*\n                 * the parent does not have any transition logic so\n                 * there is no next node from the parent\n                 */\n                deferred.resolve(null);\n              }\n            } else {\n              // choose a transition\n              this.chooseTransition(currentNodeId, transitionLogic).then((transition) => {\n                if (transition != null) {\n                  // move the student to the toNodeId\n                  nextNodeId = transition.to;\n\n                  // resolve the promise with the next node id\n                  deferred.resolve(nextNodeId);\n                }\n              });\n            }\n          }\n        }\n      }\n    } else {\n      deferred.resolve(null);\n    }\n    return promise;\n  };\n\n  /**\n   * Go to the next node that captures work\n   * @return a promise that will return the next node id\n   */\n  goToNextNodeWithWork() {\n    this.getNextNodeIdWithWork().then((nextNodeId) => {\n      if (nextNodeId) {\n        const mode = this.ConfigService.getMode();\n        if (mode === 'classroomMonitor' || mode === 'author') {\n          this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        } else {\n          this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        }\n      }\n      return nextNodeId;\n    });\n  };\n\n  /**\n   * Get the next node id in the project sequence that captures student work\n   * @param currentId (optional)\n   * @returns next node id\n   */\n  getNextNodeIdWithWork(currentId) {\n    return this.getNextNodeId(currentId).then((nextNodeId) => {\n      if (nextNodeId) {\n        const hasWork = this.ProjectService.nodeHasWork(nextNodeId);\n        if (hasWork) {\n          return nextNodeId;\n        } else {\n          return this.getNextNodeIdWithWork(nextNodeId);\n        }\n      } else {\n        return null;\n      }\n    });\n  };\n\n  /**\n   * Go to the previous node\n   */\n  goToPrevNode() {\n    const prevNodeId = this.getPrevNodeId();\n    const mode = this.ConfigService.getMode();\n    if (mode === 'classroomMonitor' || mode === 'author') {\n      this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n    } else {\n      this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n    }\n  };\n\n  /**\n   * Get the previous node in the project sequence\n   * @param currentId (optional)\n   */\n  getPrevNodeId(currentId) {\n    let prevNodeId = null;\n    let currentNodeId = null;\n    let mode = this.ConfigService.getMode();\n\n    if (currentId) {\n      currentNodeId = currentId;\n    } else {\n      let currentNode = null;\n\n      if (mode === 'classroomMonitor' || mode === 'author') {\n        currentNode = this.TeacherDataService.getCurrentNode();\n      } else {\n        currentNode = this.StudentDataService.getCurrentNode();\n      }\n      if (currentNode) {\n        currentNodeId = currentNode.id;\n      }\n    }\n\n    if (currentNodeId) {\n      if (mode === 'classroomMonitor' || mode === 'author') {\n        let currentNodeOrder = this.ProjectService.getNodeOrderById(currentNodeId);\n        if (currentNodeOrder) {\n          let prevNodeOrder = currentNodeOrder - 1;\n          let prevId = this.ProjectService.getNodeIdByOrder(prevNodeOrder);\n          if (prevId) {\n            if (this.ProjectService.isApplicationNode(prevId)) {\n              // node is a step, so set it as the next node\n              prevNodeId = prevId;\n            } else if (this.ProjectService.isGroupNode(prevId)){\n              // node is an activity, so get next nodeId\n              prevNodeId = this.getPrevNodeId(prevId);\n            }\n          }\n        }\n      } else {\n        // get all the nodes that transition to the current node\n        const nodeIdsByToNodeId = this.ProjectService.getNodeIdsByToNodeId(currentNodeId);\n        if (nodeIdsByToNodeId == null) {\n\n        } else if (nodeIdsByToNodeId.length === 1) {\n          // there is only one node that transitions to the current node\n          prevNodeId = nodeIdsByToNodeId[0];\n        } else if (nodeIdsByToNodeId.length > 1) {\n          // there are multiple nodes that transition to the current node\n\n          const stackHistory = this.StudentDataService.getStackHistory();\n\n          // loop through the stack history node ids from newest to oldest\n          for (let s = stackHistory.length - 1; s >= 0; s--) {\n            const stackHistoryNodeId = stackHistory[s];\n            if (nodeIdsByToNodeId.indexOf(stackHistoryNodeId) != -1) {\n              // we have found a node that we previously visited that transitions to the current node\n              prevNodeId = stackHistoryNodeId;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return prevNodeId;\n  };\n\n  /**\n   * Go to the previous node that captures work\n   */\n  goToPrevNodeWithWork() {\n    const prevNodeId = this.getPrevNodeIdWithWork();\n    const mode = this.ConfigService.getMode();\n    if (mode === 'classroomMonitor' || mode === 'author') {\n      this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n    } else {\n      this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n    }\n  };\n\n  /**\n   * Get the previous node id in the project sequence that captures student work\n   * @param currentId (optional)\n   * @returns next node id\n   */\n  getPrevNodeIdWithWork(currentId) {\n    const prevNodeId = this.getPrevNodeId(currentId);\n    if (prevNodeId) {\n      const hasWork = this.ProjectService.nodeHasWork(prevNodeId);\n      if (hasWork) {\n        return prevNodeId;\n      } else {\n        return this.getPrevNodeIdWithWork(prevNodeId);\n      }\n    } else {\n      return null;\n    }\n  };\n\n  /**\n   * Close the current node (and open the current node's parent group)\n   */\n  closeNode() {\n    let mode = this.ConfigService.getMode();\n    let currentNode = null;\n    if (mode === 'classroomMonitor') {\n      currentNode = this.TeacherDataService.getCurrentNode();\n    } else {\n      currentNode = this.StudentDataService.getCurrentNode();\n    }\n\n    if (currentNode) {\n      let currentNodeId = currentNode.id;\n\n      // get the parent node of the current node\n      let parentNode = this.ProjectService.getParentGroup(currentNodeId);\n      let parentNodeId = parentNode.id;\n\n      // set the current node to the parent node\n      if (mode === 'classroomMonitor') {\n        this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\n      } else {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\n      }\n    }\n  };\n\n  /**\n   * Choose the transition the student will take\n   * @param nodeId the current node id\n   * @param transitionLogic an object containing transitions and parameters\n   * for how to choose a transition\n   * @returns a promise that will return a transition\n   */\n  chooseTransition(nodeId, transitionLogic) {\n    const deferred = this.$q.defer();\n\n    // see if there is already a promise for this step\n    let promise = this.getChooseTransitionPromise(nodeId);\n\n    if (promise == null) {\n      // there is no existing promise for this step so we will create one\n      promise = deferred.promise;\n    } else {\n      // there is an existing promise for this step so we will use it\n      return promise;\n    }\n\n    let resolvePromiseNow = true;\n\n    // check if the transition was already previously calculated\n    let transitionResult = this.getTransitionResultByNodeId(nodeId);\n    if (transitionResult == null || (transitionLogic != null && transitionLogic.canChangePath == true)) {\n      /*\n       * we have not previously calculated the transition or the\n       * transition logic allows the student to change branch paths\n       * so we will calculate the transition again\n       */\n\n      const transitions = transitionLogic.transitions;\n      if (transitions != null) {\n        let availableTransitions = [];\n        for (let transition of transitions) {\n          const toNodeId = transition.to;\n          const criteria = transition.criteria;\n\n          // set the default result to true in case there is no criteria\n          let criteriaResult = true;\n          if (criteria != null) {\n            let firstResult = true;\n            let tempResult = true;\n\n            // loop through all of the criteria\n            for (let tempCriteria of criteria) {\n              // check if the criteria is satisfied\n              tempResult = this.StudentDataService.evaluateCriteria(tempCriteria);\n\n              if (firstResult) {\n                // this is the first criteria in this for loop\n                criteriaResult = tempResult;\n                firstResult = false;\n              } else {\n                // this is not the first criteria in this for loop so we will && the result\n                criteriaResult = criteriaResult && tempResult;\n              }\n            }\n          }\n\n          if (toNodeId != null) {\n            // check if the criteria was satisfied and the to node is visitable\n            if (criteriaResult) {\n              // the student is allowed to use the transition\n              availableTransitions.push(transition);\n            }\n          }\n        }\n\n        if (availableTransitions.length == 0) {\n          // there are no available transitions for the student\n          transitionResult = null;\n        } else if (availableTransitions.length == 1) {\n          // there is one available transition for the student\n          transitionResult = availableTransitions[0];\n        } else if (availableTransitions.length > 1) {\n          // there are multiple available transitions for the student\n          if (this.ConfigService.isPreview()) {\n            /*\n             * we are in preview mode so we will let the user choose\n             * the branch path to go to\n             */\n            if (transitionResult != null) {\n              /*\n               * the user has previously chosen the branch path\n               * so we will use the transition they chose and\n               * not ask them again\n               */\n            } else {\n              // ask the user which branch path to go to\n\n              resolvePromiseNow = false;\n              let chooseBranchPathTemplateUrl = this.ProjectService.getThemePath() + '/templates/branchPathChooser.html';\n              const dialogOptions = {\n                templateUrl: chooseBranchPathTemplateUrl,\n                controller: ChooseBranchPathController,\n                locals: {\n                  availableTransitions: availableTransitions,\n                  deferred: deferred,\n                  nodeId: nodeId\n                }\n              };\n\n              /**\n               * Controller that handles the dialog popup that lets the user\n               * which branch path to go to.\n               * @param $scope the scope\n               * @param $mdDialog the dialog popup object\n               * @param availableTransitions the branch paths\n               * @param deferred used to resolve the promise once the user\n               * has chosen a branch path\n               * @param nodeId the current node\n               */\n              function ChooseBranchPathController($scope, $mdDialog, NodeService, ProjectService, availableTransitions, deferred, nodeId) {\n                $scope.availableTransitions = availableTransitions;\n                $scope.NodeService = NodeService;\n                $scope.ProjectService = ProjectService;\n\n                // called when the user clicks on a branch path\n                $scope.chooseBranchPath = (transitionResult) => {\n                  // remember the transition that was chosen\n                  $scope.NodeService.setTransitionResult(nodeId, transitionResult);\n\n                  // resolve the promise\n                  deferred.resolve(transitionResult);\n\n                  /*\n                   * don't remember the promise for this step anymore\n                   * since we have resolved it\n                   */\n                  $scope.NodeService.setChooseTransitionPromise(nodeId, null);\n\n                  // close the dialog\n                  $mdDialog.hide();\n                };\n\n                // obtains the step number and title\n                $scope.getNodePositionAndTitleByNodeId = (nodeId) => {\n                  return $scope.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n                };\n\n                // called when the dialog is closed\n                $scope.close = () => {\n                  $mdDialog.hide();\n                }\n              }\n\n              ChooseBranchPathController.$inject = ['$scope', '$mdDialog', 'NodeService', 'ProjectService', 'availableTransitions', 'deferred', 'nodeId'];\n\n              /*\n               * show the popup dialog that lets the user choose the\n               * branch path\n               */\n              this.$mdDialog.show(dialogOptions);\n            }\n          } else {\n            /*\n             * we are in regular student run mode so we will choose\n             * the branch according to how the step was authored\n             */\n            const howToChooseAmongAvailablePaths = transitionLogic.howToChooseAmongAvailablePaths;\n            if (howToChooseAmongAvailablePaths == null ||\n              howToChooseAmongAvailablePaths === '' ||\n              howToChooseAmongAvailablePaths === 'random') {\n              // choose a random transition\n\n              const randomIndex = Math.floor(Math.random() * availableTransitions.length);\n              transitionResult = availableTransitions[randomIndex];\n            } else if (howToChooseAmongAvailablePaths === 'workgroupId') {\n              // use the workgroup id to choose the transition\n\n              const workgroupId = this.ConfigService.getWorkgroupId();\n              const index = workgroupId % availableTransitions.length;\n              transitionResult = availableTransitions[index];\n            } else if (howToChooseAmongAvailablePaths === 'firstAvailable') {\n              // choose the first available transition\n\n              transitionResult = availableTransitions[0];\n            } else if (howToChooseAmongAvailablePaths === 'lastAvailable') {\n              // choose the last available transition\n              transitionResult = availableTransitions[availableTransitions.length - 1];\n            }\n          }\n        }\n      }\n    }\n\n    if (resolvePromiseNow) {\n      // remember the transition that was chosen for this step\n      this.setTransitionResult(nodeId, transitionResult);\n\n      // resolve the promise immediately\n      deferred.resolve(transitionResult);\n    } else {\n      /*\n       * remember the promise in case someone else calls chooseTransition()\n       * so we can chain off of this promise instead of creating another\n       * promise\n       */\n      this.setChooseTransitionPromise(nodeId, promise);\n    }\n    return promise;\n  };\n\n  currentNodeHasTransitionLogic() {\n    const currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      const transitionLogic = currentNode.transitionLogic;\n      if (transitionLogic != null) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the transition logic for the current node and create branch\n   * path taken events if necessary.\n   */\n  evaluateTransitionLogic() {\n    const currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      const nodeId = currentNode.id;\n      const transitionLogic = currentNode.transitionLogic;\n      if (transitionLogic != null) {\n        // get all the transitions from the current node\n        const transitions = transitionLogic.transitions;\n        const canChangePath = transitionLogic.canChangePath;\n        let alreadyBranched = false;\n\n        // get all the branchPathTaken events for the current node\n        const events = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNode.id);\n\n        if (events.length > 0) {\n          // the student has branched from this node before\n          alreadyBranched = true;\n        }\n\n        let transition, fromNodeId, toNodeId;\n        if (alreadyBranched) {\n          // student has previously branched\n          if (canChangePath) {\n            // student can change path\n\n            this.chooseTransition(nodeId, transitionLogic).then((transition) => {\n              if (transition != null) {\n                fromNodeId = currentNode.id;\n                toNodeId = transition.to;\n                this.createBranchPathTakenEvent(fromNodeId, toNodeId);\n              }\n            });\n          } else {\n            // student can't change path\n          }\n        } else {\n          // student has not branched yet\n\n          this.chooseTransition(nodeId, transitionLogic).then((transition) => {\n            if (transition != null) {\n              fromNodeId = currentNode.id;\n              toNodeId = transition.to;\n              this.createBranchPathTakenEvent(fromNodeId, toNodeId);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  /**\n   * Create a branchPathTaken event\n   * @param fromNodeId the from node id\n   * @param toNodeid the to node id\n   */\n  createBranchPathTakenEvent(fromNodeId, toNodeId) {\n    const nodeId = fromNodeId;\n    const componentId = null;\n    const componentType = null;\n    const category = \"Navigation\";\n    const event = \"branchPathTaken\";\n    const eventData = {};\n    eventData.fromNodeId = fromNodeId;\n    eventData.toNodeId = toNodeId;\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  }\n\n  evaluateTransitionLogicOn(event) {\n    const currentNode = this.StudentDataService.getCurrentNode();\n    if (currentNode != null) {\n      const transitionLogic = currentNode.transitionLogic;\n      const whenToChoosePath = transitionLogic.whenToChoosePath;\n      if (event === whenToChoosePath) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get the transition result for a node\n   * @param nodeId the the node id\n   * @returns the transition object that was chosen for the node\n   */\n  getTransitionResultByNodeId(nodeId) {\n    return this.transitionResults[nodeId];\n  }\n\n  /**\n   * Set the transition result for a node\n   * @param nodeId the node id\n   * @param transitionResult the transition object that was chosen for the node\n   */\n  setTransitionResult(nodeId, transitionResult) {\n    if (nodeId != null) {\n      this.transitionResults[nodeId] = transitionResult;\n    }\n  }\n\n  /**\n   * Get the promise that was created for a specific node when the\n   * chooseTransition() function was called. This promise has not been\n   * resolved yet.\n   * @param nodeId the node id\n   * @returns the promise that was created when chooseTransition() was called\n   * or null if there is no unresolved promise.\n   */\n  getChooseTransitionPromise(nodeId) {\n    return this.chooseTransitionPromises[nodeId];\n  }\n\n  /**\n   * Set the promise that was created for a specific node when the\n   * chooseTransition() function was called. This promise has not been\n   * resolved yet.\n   * @param nodeId the node id\n   * @param promise the promise\n   */\n  setChooseTransitionPromise(nodeId, promise) {\n    if (nodeId != null) {\n      this.chooseTransitionPromises[nodeId] = promise;\n    }\n  }\n\n  /**\n   * Show the node content in a dialog. We will show the step content\n   * plus the node rubric and all component rubrics.\n   */\n  showNodeInfo(nodeId, $event) {\n    let stepNumberAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    let rubricTitle = this.$translate('STEP_INFO');\n\n    /*\n     * create the dialog header, actions, and content elements\n     */\n    let dialogHeader =\n      `<md-toolbar>\n                <div class=\"md-toolbar-tools\">\n                    <h2>${ stepNumberAndTitle }</h2>\n                </div>\n            </md-toolbar>`;\n\n    let dialogActions =\n      `<md-dialog-actions layout=\"row\" layout-align=\"end center\">\n                <md-button class=\"md-primary\" ng-click=\"openInNewWindow()\" aria-label=\"{{ 'openInNewWindow' | translate }}\">{{ 'openInNewWindow' | translate }}</md-button>\n                <md-button class=\"md-primary\" ng-click=\"close()\" aria-label=\"{{ 'close' | translate }}\">{{ 'close' | translate }}</md-button>\n            </md-dialog-actions>`;\n\n    let dialogContent =\n      `<md-dialog-content class=\"gray-lighter-bg\">\n                <div class=\"md-dialog-content\" id=\"nodeInfo_${ nodeId }\">\n                    <node-info node-id=\"${ nodeId }\"></node-info>\n                </div>\n            </md-dialog-content>`;\n\n    let dialogString = `<md-dialog class=\"dialog--wider\" aria-label=\"${ stepNumberAndTitle } - ${ rubricTitle }\">${ dialogHeader }${  dialogContent }${ dialogActions }</md-dialog>`;\n\n    // display the rubric in a popup\n    this.$mdDialog.show({\n      template : dialogString,\n      fullscreen: true,\n      controller: ['$scope', '$mdDialog',\n        function DialogController($scope, $mdDialog) {\n          // display the rubric in a new tab\n          $scope.openInNewWindow = function() {\n            // open a new tab\n            let w = window.open('', '_blank');\n\n            /*\n             * create the header for the new window that contains the project title\n             */\n            let windowHeader =\n              `<md-toolbar class=\"layout-row\">\n                                <div class=\"md-toolbar-tools primary-bg\" style=\"color: #ffffff;\">\n                                    <h2>${ stepNumberAndTitle }</h2>\n                                </div>\n                            </md-toolbar>`;\n\n            let rubricContent = document.getElementById('nodeInfo_' + nodeId).innerHTML;\n\n            // create the window string\n            let windowString =\n              `<link rel='stylesheet' href='../wise5/lib/bootstrap/css/bootstrap.min.css' />\n                            <link rel='stylesheet' href='../wise5/themes/default/style/monitor.css'>\n                            <link rel='stylesheet' href='../wise5/themes/default/style/angular-material.css'>\n                            <link rel='stylesheet' href='../wise5/lib/summernote/dist/summernote.css' />\n                            <link rel=\"stylesheet\" href=\"http://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic%7CMaterial+Icons\" media=\"all\">\n                            <body class=\"layout-column\">\n                                <div class=\"layout-column\">${ windowHeader }<md-content class=\"md-padding\">${ rubricContent }</div></md-content></div>\n                            </body>`;\n\n            // write the rubric content to the new tab\n            w.document.write(windowString);\n\n            // close the popup\n            $mdDialog.hide();\n          };\n\n          // close the popup\n          $scope.close = () => {\n            $mdDialog.hide();\n          }\n        }\n      ],\n      targetEvent: $event,\n      clickOutsideToClose: true,\n      escapeToClose: true\n    });\n  }\n}\n\nNodeService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService'\n];\n\nexport default NodeService;\n"]}