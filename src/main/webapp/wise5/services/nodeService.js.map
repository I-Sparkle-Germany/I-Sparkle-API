{"version":3,"sources":["nodeService.es6"],"names":[],"mappings":"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","file":"nodeService.js","sourcesContent":["class NodeService {\n\n    constructor($http, \n                $injector, \n                $mdDialog,\n                $q, \n                ConfigService, \n                ProjectService, \n                StudentDataService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        \n        this.transitionResults = {};\n        this.chooseTransitionPromises = {};\n    }\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewComponentState() {\n        var componentState = {};\n\n        // set the timestamp\n        componentState.clientSaveTime = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewNodeState() {\n        var nodeState = {};\n        nodeState.runId = this.ConfigService.getRunId();\n        nodeState.periodId = this.ConfigService.getPeriodId();\n        nodeState.workgroupId = this.ConfigService.getWorkgroupId();\n\n        // set the timestamp\n        nodeState.clientSaveTime = Date.parse(new Date());\n\n        return nodeState;\n    };\n\n    /**\n     * Get the node type in camel case\n     * @param nodeType the node type e.g. OpenResponse\n     * @return the node type in camel case\n     * e.g.\n     * openResponse\n     */\n    toCamelCase(nodeType) {\n        var nodeTypeCamelCased = null;\n\n        if (nodeType != null && nodeType.length > 0) {\n\n            // get the first character\n            var firstChar = nodeType.charAt(0);\n\n            if(firstChar != null) {\n\n                // make the first character lower case\n                var firstCharLowerCase = firstChar.toLowerCase();\n\n                if (firstCharLowerCase != null) {\n\n                    /*\n                     * replace the first character with the lower case\n                     * character\n                     */\n                    nodeTypeCamelCased = firstCharLowerCase + nodeType.substr(1);\n                }\n            }\n        }\n\n        return nodeTypeCamelCased;\n    };\n\n    /**\n     * Check if the string is in all uppercase\n     * @param str the string to check\n     * @return whether the string is in all uppercase\n     */\n    isStringUpperCase(str) {\n        var result = false;\n\n        if (str != null) {\n            if (str === str.toUpperCase()) {\n                // the string is in all uppercase\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n\n        if (componentType == null) {\n            // error\n        } else if (this.isStringUpperCase(componentType)) {\n            /*\n             * the component type is all uppercase so we will convert it to all\n             * lowercase\n             */\n            componentType = componentType.toLowerCase();\n        } else {\n            // get the component type in camel case\n            componentType = this.toCamelCase(componentType);\n        }\n        var wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        return wiseBaseURL + '/wise5/components/' + componentType + '/index.html';\n    };\n\n    /**\n     * Get the component content\n     * @param componentContent the component content\n     * @param componentId the component id\n     * @return the component content\n     */\n    getComponentContentById(nodeContent, componentId) {\n        var componentContent = null;\n\n        if (nodeContent != null && componentId != null) {\n\n            // get the components\n            var components = nodeContent.components;\n\n            if (components != null) {\n\n                // loop through the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        var tempComponentId = tempComponent.id;\n\n                        if (tempComponentId === componentId) {\n                            // we have found the component with the component id we want\n                            componentContent = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentContent;\n    };\n\n    /**\n     * Check if any of the component states were submitted\n     * @param componentStates an array of component states\n     * @return whether any of the component states were submitted\n     */\n    isWorkSubmitted(componentStates) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    if (componentState.isSubmit) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the node or component is completed\n     * @param functionParams the params that will specify which node or component\n     * to check for completion\n     * @returns whether the specified node or component is completed\n     */\n    isCompleted(functionParams) {\n\n        var result = false;\n\n        if (functionParams != null) {\n            var nodeId = functionParams.nodeId;\n            var componentId = functionParams.componentId;\n\n            result = this.StudentDataService.isCompleted(nodeId, componentId);\n        }\n\n        return result;\n    };\n\n    /**\n     * Go to the next node\n     */\n    goToNextNode() {\n\n        this.getNextNodeId().then((nextNodeId) => {\n            if (nextNodeId != null) {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n            }\n        });\n    };\n\n    /**\n     * Get the next node in the project sequence. We return a promise because\n     * in preview mode we allow the user to specify which branch path they\n     * want to go to. In all other cases we will resolve the promise immediately.\n     * @returns a promise that returns the next node id\n     */\n    getNextNodeId() {\n        \n        // create a promise that will return the next node id\n        var deferred = this.$q.defer();\n        var promise = deferred.promise;\n        \n        var nextNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var currentNodeId = currentNode.id;\n            \n            // get the transition logic from the current node\n            var transitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(currentNodeId);\n            \n            // get all the branchPathTaken events for the current node\n            var branchPathTakenEvents = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNodeId);\n            \n            if (branchPathTakenEvents != null && branchPathTakenEvents.length > 0 && \n                (transitionLogic != null && transitionLogic.canChangePath != true)) {\n                // the student has branched on this node before and they are not allowed to change paths\n                \n                // loop through all the branchPathTaken events from newest to oldest\n                for (var b = branchPathTakenEvents.length - 1; b >= 0; b--) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n                    \n                    if (branchPathTakenEvent != null) {\n                        \n                        // get the data from the event\n                        var data = branchPathTakenEvent.data;\n                        \n                        if (data != null) {\n                            // get the to node id\n                            var toNodeId = data.toNodeId;\n                            nextNodeId = toNodeId;\n                            deferred.resolve(nextNodeId);\n                            break;\n                        }\n                    }\n                }\n            } else {\n                // the student has not branched on this node before\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n                    \n                    if (transitions == null || transitions.length == 0) {\n                        /*\n                         * this node does not have any transitions so we will\n                         * check if the parent group has transitions\n                         */\n                        \n                        // get the parent group id\n                        var parentGroupId = this.ProjectService.getParentGroupId(currentNodeId);\n                        var parentHasTransitionLogic = false;\n                        \n                        if (parentGroupId != null) {\n                            \n                            // get the transition logic from the parent\n                            var parentTransitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(parentGroupId);\n                            \n                            if (parentTransitionLogic != null) {\n                                \n                                parentHasTransitionLogic = true;\n                                \n                                // choose a transition\n                                this.chooseTransition(parentGroupId, parentTransitionLogic).then((transition) => {\n                                    \n                                    if (transition != null) {\n                                        // get the to node id\n                                        var transitionToNodeId = transition.to;\n                                        \n                                        if (this.ProjectService.isGroupNode(transitionToNodeId)) {\n                                            // the to node is a group\n                                            \n                                            // get the start id of the group\n                                            var startId = this.ProjectService.getGroupStartId(transitionToNodeId);\n                                            \n                                            if (startId == null || startId == '') {\n                                                // the group does not have a start id so we will just use the group\n                                                nextNodeId = transitionToNodeId;\n                                            } else {\n                                                // the group has a start id so we will use the start id\n                                                nextNodeId = startId;\n                                            }\n                                        } else {\n                                            // the to node is a step\n                                            nextNodeId = transitionToNodeId;\n                                        }\n                                    }\n                                    \n                                    // resolve the promise with the next node id\n                                    deferred.resolve(nextNodeId);\n                                });\n                            }\n                        }\n                        \n                        if (!parentHasTransitionLogic) {\n                            /*\n                             * the parent does not have any transition logic so \n                             * there is no next node from the parent\n                             */\n                            deferred.resolve(null);\n                        }\n                    } else {\n                        // choose a transition\n                        this.chooseTransition(currentNodeId, transitionLogic).then((transition) => {\n                            \n                            if (transition != null) {\n                                // move the student to the toNodeId\n                                nextNodeId = transition.to;\n                                \n                                // resolve the promise with the next node id\n                                deferred.resolve(nextNodeId);\n                            }\n                        });\n                    }\n                }\n            }\n        }\n\n        return promise;\n    };\n\n    /**\n     * Go to the previous node\n     */\n    goToPrevNode() {\n\n        var prevNodeId = this.getPrevNodeId();\n        if (prevNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n        }\n    };\n\n    /**\n     * Get the previous node in the project sequence\n     */\n    getPrevNodeId() {\n\n        var prevNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var currentNodeId = currentNode.id;\n            \n            // get all the nodes that transition to the current node\n            var nodeIdsByToNodeId = this.ProjectService.getNodeIdsByToNodeId(currentNodeId);\n            \n            if (nodeIdsByToNodeId == null) {\n                \n            } else if (nodeIdsByToNodeId.length === 1) {\n                // there is only one node that transitions to the current node\n                prevNodeId = nodeIdsByToNodeId[0];\n            } else if (nodeIdsByToNodeId.length > 1) {\n                // there are multiple nodes that transition to the current node\n                \n                // get the stack history\n                var stackHistory = this.StudentDataService.getStackHistory();\n                \n                // loop through the stack history node ids from newest to oldest\n                for (var s = stackHistory.length - 1; s >= 0; s--) {\n                    var stackHistoryNodeId = stackHistory[s];\n                    \n                    if (nodeIdsByToNodeId.indexOf(stackHistoryNodeId) != -1) {\n                        // we have found a node that we previously visited that transitions to the current node\n                        prevNodeId = stackHistoryNodeId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return prevNodeId;\n    };\n\n    /**\n     * Close the current node (and open the current node's parent group)\n     */\n    closeNode() {\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode) {\n\n            var currentNodeId = currentNode.id;\n\n            // get the parent node of the current node\n            var parentNode = this.ProjectService.getParentGroup(currentNodeId);\n\n            var parentNodeId = parentNode.id;\n\n            // set the current node to the parent node\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\n        }\n    };\n\n    /**\n     * Choose the transition the student will take\n     * @param nodeId the current node id\n     * @param transitionLogic an object containing transitions and parameters\n     * for how to choose a transition\n     * @returns a promise that will return a transition\n     */\n    chooseTransition(nodeId, transitionLogic) {\n        \n        var deferred = this.$q.defer();\n        \n        // see if there is already a promise for this step\n        var promise = this.getChooseTransitionPromise(nodeId);\n        \n        if (promise == null) {\n            // there is no existing promise for this step so we will create one\n            promise = deferred.promise;\n        } else {\n            // there is an existing promise for this step so we will use it\n            return promise;\n        }\n        \n        var resolvePromiseNow = true;\n        \n        // check if the transition was already previously calculated\n        var transitionResult = this.getTransitionResultByNodeId(nodeId);\n        \n        if (transitionResult == null || (transitionLogic != null && transitionLogic.canChangePath == true)) {\n            /*\n             * we have not previously calculated the transition or the \n             * transition logic allows the student to change branch paths\n             * so we will calculate the transition again\n             */\n\n            // get the transitions\n            var transitions = transitionLogic.transitions;\n\n            if (transitions != null) {\n\n                let availableTransitions = [];\n\n                // loop through all the transitions\n                for (var t = 0; t < transitions.length; t++) {\n\n                    // get a transition\n                    var transition = transitions[t];\n\n                    // get the to node id\n                    var toNodeId = transition.to;\n\n                    // get the criteria for which this transition can be used\n                    var criteria = transition.criteria;\n\n                    // set the default result to true in case there is no criteria\n                    var criteriaResult = true;\n\n                    if (criteria != null) {\n\n                        var firstResult = true;\n                        var tempResult = true;\n\n                        // loop through all of the criteria\n                        for (var c = 0; c < criteria.length; c++) {\n\n                            // get a criteria\n                            var tempCriteria = criteria[c];\n\n                            // check if the criteria is satisfied\n                            tempResult = this.StudentDataService.evaluateCriteria(tempCriteria);\n\n                            if (firstResult) {\n                                // this is the first criteria in this for loop\n                                criteriaResult = tempResult;\n                                firstResult = false;\n                            } else {\n                                // this is not the first criteria in this for loop so we will && the result\n                                criteriaResult = criteriaResult && tempResult;\n                            }\n                        }\n                    }\n\n                    if (toNodeId != null) {\n\n                        // check if the criteria was satisfied and the to node is visitable\n                        if (criteriaResult) {\n\n                            // the student is allowed to use the transition\n                            availableTransitions.push(transition);\n                        }\n                    }\n                }\n                \n                if (availableTransitions.length == 0) {\n                    // there are no available transitions for the student\n                    transitionResult = null;\n                } else if (availableTransitions.length == 1) {\n                    // there is one available transition for the student\n                    transitionResult = availableTransitions[0];\n                } else if (availableTransitions.length > 1) {\n                    // there are multiple available transitions for the student\n                    \n                    if (this.ConfigService.isPreview()) {\n                        /*\n                         * we are in preview mode so we will let the user choose\n                         * the branch path to go to\n                         */\n                         \n                         if (transitionResult != null) {\n                             /*\n                              * the user has previously chosen the branch path\n                              * so we will use the transition they chose and\n                              * not ask them again\n                              */\n                         } else {\n                             // ask the user which branch path to go to\n                             \n                             resolvePromiseNow = false;\n                             \n                             let chooseBranchPathTemplateUrl = this.ProjectService.getThemePath() + '/themeComponents/branchPathTools/branchPathChooser.html';\n                             \n                             var dialogOptions = {\n                                 templateUrl: chooseBranchPathTemplateUrl,\n                                 controller: ChooseBranchPathController,\n                                 locals: {\n                                     availableTransitions: availableTransitions,\n                                     deferred: deferred,\n                                     nodeId: nodeId\n                                 }\n                             };\n                             \n                             /**\n                              * Controller that handles the dialog popup that lets the user \n                              * which branch path to go to.\n                              * @param $scope the scope\n                              * @param $mdDialog the dialog popup object\n                              * @param availableTransitions the branch paths\n                              * @param deferred used to resolve the promise once the user\n                              * has chosen a branch path\n                              * @param nodeId the current node\n                              */\n                             function ChooseBranchPathController($scope, $mdDialog, availableTransitions, deferred, nodeId) {\n                                 \n                                 $scope.availableTransitions = availableTransitions;\n                                 \n                                 // called when the user clicks on a branch path\n                                 $scope.chooseBranchPath = (transitionResult) => {\n                                     // remember the transition that was chosen\n                                     this.setTransitionResult(nodeId, transitionResult);\n                                     \n                                     // resolve the promise\n                                     deferred.resolve(transitionResult);\n                                     \n                                     /*\n                                      * don't remember the promise for this step anymore\n                                      * since we have resolved it\n                                      */\n                                     this.setChooseTransitionPromise(nodeId, null);\n                                     \n                                     // close the dialog\n                                     $mdDialog.hide();\n                                 }\n                                 \n                                 // obtains the step number and title\n                                 $scope.getNodePositionAndTitleByNodeId = (nodeId) => {\n                                     return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n                                 }\n                                 \n                                 // called when the dialog is closed\n                                 $scope.close = () => {\n                                     $mdDialog.hide();\n                                 }\n                             }\n                             \n                             ChooseBranchPathController.$inject = ['$scope', '$mdDialog', 'availableTransitions', 'deferred', 'nodeId'];\n                             \n                             /*\n                              * show the popup dialog that lets the user choose the\n                              * branch path\n                              */\n                             this.$mdDialog.show(dialogOptions);\n                         }\n                    } else {\n                        /*\n                         * we are in regular student run mode so we will choose\n                         * the branch according to how the step was authored\n                         */\n                        \n                        var howToChooseAmongAvailablePaths = transitionLogic.howToChooseAmongAvailablePaths;\n\n                        if (howToChooseAmongAvailablePaths == null || \n                            howToChooseAmongAvailablePaths === '' || \n                            howToChooseAmongAvailablePaths === 'random') {\n                            // choose a random transition\n\n                            var randomIndex = Math.floor(Math.random() * availableTransitions.length);\n                            transitionResult = availableTransitions[randomIndex];\n                        } else if (howToChooseAmongAvailablePaths === 'workgroupId') {\n                            // use the workgroup id to choose the transition\n\n                            // get the workgroup id\n                            var workgroupId = this.ConfigService.getWorkgroupId();\n                            \n                            // choose the transition index\n                            var index = workgroupId % availableTransitions.length;\n                            \n                            transitionResult = availableTransitions[index];\n                        } else if (howToChooseAmongAvailablePaths === 'firstAvailable') {\n                            // choose the first available transition\n\n                            transitionResult = availableTransitions[0];\n                        } else if (howToChooseAmongAvailablePaths === 'lastAvailable') {\n                            // choose the last available transition\n\n                            transitionResult = availableTransitions[availableTransitions.length - 1];\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (resolvePromiseNow) {\n            // remember the transition that was chosen for this step\n            this.setTransitionResult(nodeId, transitionResult);\n            \n            // resolve the promise immediately\n            deferred.resolve(transitionResult);\n        } else {\n            /*\n             * remember the promise in case someone else calls chooseTransition()\n             * so we can chain off of this promise instead of creating another\n             * promise\n             */\n            this.setChooseTransitionPromise(nodeId, promise);\n        }\n        \n        return promise;\n    };\n\n    hasTransitionLogic() {\n        var result = false;\n\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the transition logic for the current node and create branch\n     * path taken events if necessary.\n     */\n    evaluateTransitionLogic() {\n        \n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var nodeId = currentNode.id;\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n\n                // get all the transitions from the current node\n                var transitions = transitionLogic.transitions;\n                var canChangePath = transitionLogic.canChangePath;\n                var alreadyBranched = false;\n                \n                // get all the branchPathTaken events for the current node\n                var events = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNode.id);\n\n                if (events.length > 0) {\n                    // the student has branched from this node before\n                    alreadyBranched = true;\n                }\n\n                var transition, fromNodeId, toNodeId;\n\n                if (alreadyBranched) {\n                    // student has previously branched\n\n                    if (canChangePath) {\n                        // student can change path\n\n                        // choose a transition\n                        this.chooseTransition(nodeId, transitionLogic).then((transition) => {\n                            \n                            if (transition != null) {\n                                fromNodeId = currentNode.id;\n                                toNodeId = transition.to;\n\n                                // create a branchPathTaken event to signify taking the branch path\n                                this.createBranchPathTakenEvent(fromNodeId, toNodeId);\n                            }\n                        });\n                    } else {\n                        // student can't change path\n\n                    }\n                } else {\n                    // student has not branched yet\n\n                    // choose a transition\n                    this.chooseTransition(nodeId, transitionLogic).then((transition) => {\n                        \n                        if (transition != null) {\n                            fromNodeId = currentNode.id;\n                            toNodeId = transition.to;\n\n                            // create a branchPathTaken event to signify taking the branch path\n                            this.createBranchPathTakenEvent(fromNodeId, toNodeId);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    \n    /**\n     * Create a branchPathTaken event\n     * @param fromNodeId the from node id\n     * @param toNodeid the to node id\n     */\n    createBranchPathTakenEvent(fromNodeId, toNodeId) {\n        var nodeId = fromNodeId;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"branchPathTaken\";\n        var eventData = {};\n        eventData.fromNodeId = fromNodeId;\n        eventData.toNodeId = toNodeId;\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    }\n\n    evaluateTransitionLogicOn(event) {\n        var result = false;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            var whenToChoosePath = transitionLogic.whenToChoosePath;\n\n            if (event === whenToChoosePath) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the transition result for a node\n     * @param nodeId the the node id\n     * @returns the transition object that was chosen for the node\n     */\n    getTransitionResultByNodeId(nodeId) {\n        return this.transitionResults[nodeId];\n    }\n    \n    /**\n     * Set the transition result for a node\n     * @param nodeId the node id\n     * @param transitionResult the transition object that was chosen for the node\n     */\n    setTransitionResult(nodeId, transitionResult) {\n        if (nodeId != null) {\n            this.transitionResults[nodeId] = transitionResult;\n        }\n    }\n    \n    /**\n     * Get the promise that was created for a specific node when the \n     * chooseTransition() function was called. This promise has not been \n     * resolved yet.\n     * @param nodeId the node id\n     * @returns the promise that was created when chooseTransition() was called\n     * or null if there is no unresolved promise.\n     */\n    getChooseTransitionPromise(nodeId) {\n        return this.chooseTransitionPromises[nodeId];\n    }\n    \n    /**\n     * Set the promise that was created for a specific node when the \n     * chooseTransition() function was called. This promise has not been \n     * resolved yet.\n     * @param nodeId the node id\n     * @param promise the promise\n     */\n    setChooseTransitionPromise(nodeId, promise) {\n        if (nodeId != null) {\n            this.chooseTransitionPromises[nodeId] = promise;\n        }\n    }\n}\n\nNodeService.$inject = [\n    '$http',\n    '$injector',\n    '$mdDialog',\n    '$q',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NodeService;\n"]}