{"version":3,"sources":["nodeService.es6"],"names":[],"mappings":"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","file":"nodeService.js","sourcesContent":["class NodeService {\n\n    constructor($http, $injector, $q, ConfigService, ProjectService, StudentDataService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n    }\n\n    getLatestNodeState(nodeVisits) {\n        var result = null;\n\n        if (nodeVisits != null) {\n            for (var nv = nodeVisits.length - 1; nv >= 0; nv--) {\n                var nodeVisit = nodeVisits[nv];\n\n                if (nodeVisit != null) {\n                    var nodeStates = nodeVisit.nodeStates;\n\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n                            result = nodeState;\n                            break;\n                        }\n                    }\n\n                    if (result != null) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getStudentWorkAsHTML(nodeState) {\n        var studentWorkAsHTML = null;\n\n        if (nodeState != null) {\n            var response = nodeState.response;\n\n            studentWorkAsHTML = '<p>' + response + '</p>';\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewComponentState() {\n        var componentState = {};\n\n        // set the timestamp\n        componentState.clientSaveTime = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    /**\n     * Create a new empty node state\n     * @return a new empty node state\n     */\n    createNewNodeState() {\n        var nodeState = {};\n\n        // set the timestamp\n        nodeState.clientSaveTime = Date.parse(new Date());\n\n        return nodeState;\n    };\n\n    /**\n     * Get the node type in camel case\n     * @param nodeType the node type e.g. OpenResponse\n     * @return the node type in camel case\n     * e.g.\n     * openResponse\n     */\n    toCamelCase(nodeType) {\n        var nodeTypeCamelCased = null;\n\n        if (nodeType != null && nodeType.length > 0) {\n\n            // get the first character\n            var firstChar = nodeType.charAt(0);\n\n            if(firstChar != null) {\n\n                // make the first character lower case\n                var firstCharLowerCase = firstChar.toLowerCase();\n\n                if (firstCharLowerCase != null) {\n\n                    /*\n                     * replace the first character with the lower case\n                     * character\n                     */\n                    nodeTypeCamelCased = firstCharLowerCase + nodeType.substr(1);\n                }\n            }\n        }\n\n        return nodeTypeCamelCased;\n    };\n\n    /**\n     * Check if the string is in all uppercase\n     * @param str the string to check\n     * @return whether the string is in all uppercase\n     */\n    isStringUpperCase(str) {\n        var result = false;\n\n        if (str != null) {\n            if (str === str.toUpperCase()) {\n                // the string is in all uppercase\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the html template for the component\n     * @param componentType the component type\n     * @return the path to the html template for the component\n     */\n    getComponentTemplatePath(componentType) {\n\n        if (componentType == null) {\n            // error\n        } else if (this.isStringUpperCase(componentType)) {\n            /*\n             * the component type is all uppercase so we will convert it to all\n             * lowercase\n             */\n            componentType = componentType.toLowerCase();\n        } else {\n            // get the component type in camel case\n            componentType = this.toCamelCase(componentType);\n        }\n\n        return 'wise5/components/' + componentType + '/index.html';\n    };\n\n    /**\n     * Get the component content\n     * @param componentContent the component content\n     * @param componentId the component id\n     * @return the component content\n     */\n    getComponentContentById(nodeContent, componentId) {\n        var componentContent = null;\n\n        if (nodeContent != null && componentId != null) {\n\n            // get the components\n            var components = nodeContent.components;\n\n            if (components != null) {\n\n                // loop through the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n                        var tempComponentId = tempComponent.id;\n\n                        if (tempComponentId === componentId) {\n                            // we have found the component with the component id we want\n                            componentContent = tempComponent;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentContent;\n    };\n\n    /**\n     * Check if any of the component states were submitted\n     * @param componentStates an array of component states\n     * @return whether any of the component states were submitted\n     */\n    isWorkSubmitted(componentStates) {\n        var result = false;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n\n                    if (componentState.isSubmit) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    callFunction(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n        var result = null;\n\n        if (functionName === 'isCompleted') {\n            result = this.isCompleted(functionParams);\n        } else if (functionName === 'branchPathTaken') {\n            result = this.branchPathTaken(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents);\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the node or component is completed\n     * @param functionParams the params that will specify which node or component\n     * to check for completion\n     * @returns whether the specified node or component is completed\n     */\n    isCompleted(functionParams) {\n\n        var result = false;\n\n        if (functionParams != null) {\n            var nodeId = functionParams.nodeId;\n            var componentId = functionParams.componentId;\n\n            result = this.StudentDataService.isCompleted(nodeId, componentId);\n        }\n\n        return result;\n    };\n\n    branchPathTaken(node, component, functionName, functionParams, componentStates, nodeStates, componentEvents, nodeEvents) {\n\n        var result = false;\n\n        var expectedFromNodeId = null;\n        var expectedToNodeId = null;\n\n        if (node != null) {\n            expectedFromNodeId = node.id;\n        }\n\n        if (functionParams != null && functionParams.toNodeId != null) {\n            expectedToNodeId = functionParams.toNodeId;\n        }\n\n        if (nodeStates != null) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = nodeState.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n\n                            var fromNodeId = studentData.fromNodeId;\n                            var toNodeId = studentData.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId &&\n                                expectedToNodeId === toNodeId) {\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Go to the next node\n     */\n    goToNextNode() {\n\n        var nextNodeId = this.getNextNodeId();\n        if (nextNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\n        }\n    };\n\n    /**\n     * Get the next node in the project sequence\n     */\n    getNextNodeId() {\n\n        var nextNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var currentNodeId = currentNode.id;\n\n            // get the branch path node states\n            var branchPathNodeStates = this.StudentDataService.getBranchPathTakenNodeStates(currentNodeId);\n\n            if (branchPathNodeStates != null && branchPathNodeStates.length > 0) {\n\n                // loop through the branch path node states from newest to oldest\n                for (var b = branchPathNodeStates.length - 1; b >= 0; b--) {\n                    var nodeState = branchPathNodeStates[b];\n\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        // get the to node id for the node state\n                        nextNodeId = studentData.toNodeId;\n                    }\n                }\n            } else {\n                // get the transition logic from the current node\n                var transitions = this.ProjectService.getTransitionLogicByFromNodeId(currentNodeId);\n\n                // choose a transition\n                var transition = this.chooseTransition(transitions);\n\n                if (transition != null) {\n                    // move the student to the toNodeId\n                    nextNodeId = transition.to;\n                }\n            }\n        }\n\n        return nextNodeId;\n    };\n\n    /**\n     * Go to the previous node\n     */\n    goToPrevNode() {\n\n        var prevNodeId = this.getPrevNodeId();\n        if (prevNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\n        }\n    };\n\n    /**\n     * Get the previous node in the project sequence\n     */\n    getPrevNodeId() {\n\n        var prevNodeId = null;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var currentNodeId = currentNode.id;\n\n            var transitions = this.ProjectService.getTransitionsByToNodeId(currentNodeId);\n\n            if (transitions != null && transitions.length === 1) {\n                // TODO: remove this if case, as transition.from has been deprecated\n                var transition = transitions[0];\n\n                if (transition != null) {\n                    prevNodeId = transition.from;\n                }\n            } else {\n                var currentNodePos = this.ProjectService.getOrderById(currentNode.id);\n                var previousPos = currentNodePos-1;\n                if(previousPos > 0) {\n                    prevNodeId = this.ProjectService.getIdByOrder(previousPos);\n                }\n            }\n        }\n\n        return prevNodeId;\n    };\n\n    /**\n     * Close the current node (and open the current node's parent group)\n     */\n    closeNode() {\n        var currentNode = this.StudentDataService.getCurrentNode();\n        if (currentNode) {\n\n            var currentNodeId = currentNode.id;\n\n            // get the parent node of the current node\n            var parentNode = this.ProjectService.getParentGroup(currentNodeId);\n\n            var parentNodeId = parentNode.id;\n\n            // set the current node to the parent node\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\n        }\n    };\n\n    /**\n     * Choose the transition the student will take\n     * @param transitionLogic an object containing transitions and parameters\n     * for how to choose a transition\n     * @returns a transition object\n     */\n    chooseTransition(transitionLogic) {\n        var transitionResult = null;\n        if (transitionLogic != null) {\n\n            // get the transitions\n            var transitions = transitionLogic.transitions;\n\n            if (transitions != null) {\n\n                var availableTransitions = [];\n\n                // loop through all the transitions\n                for (var t = 0; t < transitions.length; t++) {\n\n                    // get a transition\n                    var transition = transitions[t];\n\n                    // get the to node id\n                    var toNodeId = transition.to;\n\n                    // get the criteria for which this transition can be used\n                    var criteria = transition.criteria;\n\n                    // set the default result to true in case there is no criteria\n                    var criteriaResult = true;\n\n                    if (criteria != null) {\n\n                        var firstResult = true;\n                        var tempResult = true;\n\n                        // loop through all of the criteria\n                        for (var c = 0; c < criteria.length; c++) {\n\n                            // get a criteria\n                            var tempCriteria = criteria[c];\n\n                            // check if the criteria is satisfied\n                            tempResult = this.StudentDataService.evaluateCriteria(tempCriteria);\n\n                            if (firstResult) {\n                                // this is the first criteria in this for loop\n                                criteriaResult = tempResult;\n                                firstResult = false;\n                            } else {\n                                // this is not the first criteria in this for loop so we will && the result\n                                criteriaResult = criteriaResult && tempResult;\n                            }\n                        }\n                    }\n\n                    if (toNodeId != null) {\n\n                        // check if the criteria was satisfied and the to node is visitable\n                        if (criteriaResult) {\n\n                            // the student is allowed to use the transition\n                            availableTransitions.push(transition);\n                        }\n                    }\n                }\n\n                // there are available transitions for the student\n                if (availableTransitions.length > 0) {\n\n                    var howToChooseAmongAvailablePaths = transitionLogic.howToChooseAmongAvailablePaths;\n\n                    if (howToChooseAmongAvailablePaths == null || howToChooseAmongAvailablePaths === 'random') {\n                        // choose a random transition\n\n                        var randomIndex = Math.floor(Math.random() * availableTransitions.length);\n                        transitionResult = availableTransitions[randomIndex];\n                    } else if (howToChooseAmongAvailablePaths === 'firstAvailable') {\n                        // choose the first available transition\n\n                        transitionResult = availableTransitions[0];\n                    } else if (howToChooseAmongAvailablePaths === 'lastAvailable') {\n                        // choose the last available transition\n\n                        transitionResult = availableTransitions[availableTransitions.length - 1];\n                    }\n                }\n            }\n        }\n        return transitionResult;\n    };\n\n    hasTransitionLogic() {\n        var result = false;\n\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    evaluateTransitionLogic() {\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n\n            var transitionLogic = currentNode.transitionLogic;\n\n            if (transitionLogic != null) {\n                //var whenToChoosePath = transitionLogic.whenToChoosePath;\n\n                //var nodeStates = this.StudentDataService.getNodeStatesByNodeId(currentNode.id);\n\n                var transitions = transitionLogic.transitions;\n                var canChangePath = transitionLogic.canChangePath;\n\n                var alreadyBranched = false;\n                var latestBranchNodeState = this.getLatestBranchNodeState(currentNode.id);\n\n                if (latestBranchNodeState != null) {\n                    alreadyBranched = true;\n                }\n\n                var transition, fromeNodeId, toNodeId;\n\n                if (alreadyBranched) {\n                    // student has previously branched\n\n                    if (canChangePath) {\n                        // student can change path\n\n                        // choose a transition\n                        transition = this.chooseTransition(transitionLogic);\n\n                        if (transition != null) {\n                            fromNodeId = currentNode.id;\n                            toNodeId = transition.to;\n\n                            this.createBranchNodeState(fromNodeId, toNodeId);\n                        }\n                    } else {\n                        // student can't change path\n\n                    }\n\n                } else {\n                    // student has not branched yet\n\n                    // choose a transition\n                    transition = this.chooseTransition(transitionLogic);\n\n                    if (transition != null) {\n                        fromNodeId = currentNode.id;\n                        toNodeId = transition.to;\n\n                        this.createBranchNodeState(fromNodeId, toNodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getBranchNodeStates() {\n        var branchNodeStates = [];\n\n        var nodeStates = this.StudentDataService.getNodeStatesByNodeId(currentNode.id);\n\n        if (nodeStates != null) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n                            branchNodeStates.push(nodeState);\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchNodeStates;\n    };\n\n    createBranchNodeState(fromNodeId, toNodeId) {\n\n        if (fromNodeId != null && toNodeId != null) {\n\n            // create a new node state\n            var nodeState = this.createNewNodeState();\n            nodeState.runId = this.ConfigService.getRunId();\n            nodeState.periodId = this.ConfigService.getPeriodId();\n            nodeState.workgroupId = this.ConfigService.getWorkgroupId();\n            nodeState.nodeId = fromNodeId;\n            nodeState.isAutoSave = false;\n            nodeState.isSubmit = false;\n\n            var studentData = {};\n            studentData.dataType = 'branchPathTaken';\n            studentData.fromNodeId = fromNodeId;\n            studentData.toNodeId = toNodeId;\n\n            nodeState.studentData = studentData;\n            var nodeStates = [];\n            nodeStates.push(nodeState);\n            this.StudentDataService.saveNodeStates(nodeStates);\n        }\n    };\n\n    /**\n     * Get the latest branch node state for given nodeId\n     */\n    getLatestBranchNodeState(nodeId) {\n\n        var latestBranchNodeState = null;\n\n        var nodeStates = this.StudentDataService.getNodeStatesByNodeId(nodeId);\n\n        if (nodeStates != null) {\n            for (var n = nodeStates.length - 1; n >= 0; n--) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n                            latestBranchNodeState = nodeState;\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestBranchNodeState;\n    };\n\n    evaluateTransitionLogicOn(event) {\n\n        var result = false;\n\n        // get the current node\n        var currentNode = this.StudentDataService.getCurrentNode();\n\n        if (currentNode != null) {\n            var transitionLogic = currentNode.transitionLogic;\n\n            var whenToChoosePath = transitionLogic.whenToChoosePath;\n\n            if (event === whenToChoosePath) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n}\n\nNodeService.$inject = ['$http', '$injector', '$q', 'ConfigService', 'ProjectService', 'StudentDataService'];\n\nexport default NodeService;"]}