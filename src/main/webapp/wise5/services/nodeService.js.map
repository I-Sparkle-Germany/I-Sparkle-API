{"version":3,"sources":["nodeService.es6"],"names":["NodeService","$http","$injector","$mdDialog","$q","ConfigService","ProjectService","StudentDataService","getMode","TeacherDataService","get","transitionResults","chooseTransitionPromises","componentState","clientSaveTime","Date","parse","nodeState","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","nodeType","nodeTypeCamelCased","length","firstChar","charAt","firstCharLowerCase","toLowerCase","substr","str","result","toUpperCase","componentType","isStringUpperCase","toCamelCase","wiseBaseURL","getWISEBaseURL","nodeContent","componentId","componentContent","components","c","tempComponent","tempComponentId","id","componentStates","isSubmit","functionParams","nodeId","isCompleted","getNextNodeId","then","nextNodeId","mode","endCurrentNodeAndSetCurrentNodeByNodeId","currentId","deferred","defer","promise","currentNodeId","currentNode","getCurrentNode","currentNodeOrder","getNodeOrderById","nextNodeOrder","nextId","getNodeIdByOrder","isApplicationNode","isGroupNode","resolve","transitionLogic","getTransitionLogicByFromNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","canChangePath","b","branchPathTakenEvent","data","toNodeId","transitions","parentGroupId","getParentGroupId","parentHasTransitionLogic","parentTransitionLogic","chooseTransition","transition","transitionToNodeId","to","startId","getGroupStartId","getNextNodeIdWithWork","hasWork","nodeHasWork","prevNodeId","getPrevNodeId","prevNodeOrder","prevId","nodeIdsByToNodeId","getNodeIdsByToNodeId","stackHistory","getStackHistory","s","stackHistoryNodeId","indexOf","getPrevNodeIdWithWork","parentNode","getParentGroup","parentNodeId","getChooseTransitionPromise","resolvePromiseNow","transitionResult","getTransitionResultByNodeId","availableTransitions","t","criteria","criteriaResult","firstResult","tempResult","tempCriteria","evaluateCriteria","push","isPreview","ChooseBranchPathController","$scope","chooseBranchPath","setTransitionResult","setChooseTransitionPromise","hide","getNodePositionAndTitleByNodeId","close","chooseBranchPathTemplateUrl","getThemePath","dialogOptions","templateUrl","controller","locals","$inject","show","howToChooseAmongAvailablePaths","randomIndex","Math","floor","random","index","alreadyBranched","events","fromNodeId","createBranchPathTakenEvent","category","event","eventData","saveVLEEvent","whenToChoosePath"],"mappings":"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","file":"nodeService.js","sourcesContent":["class NodeService {\r\n\r\n    constructor($http,\r\n                $injector,\r\n                $mdDialog,\r\n                $q,\r\n                ConfigService,\r\n                ProjectService,\r\n                StudentDataService) {\r\n        this.$http = $http;\r\n        this.$injector = $injector;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$q = $q;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentDataService = StudentDataService;\r\n\r\n        if (this.ConfigService != null &&\r\n            (this.ConfigService.getMode() == \"classroomMonitor\" ||\r\n             this.ConfigService.getMode() == \"author\")) {\r\n            // in the classroom monitor, we need access to the TeacherDataService\r\n            this.TeacherDataService = this.$injector.get('TeacherDataService');\r\n        }\r\n\r\n        this.transitionResults = {};\r\n        this.chooseTransitionPromises = {};\r\n    }\r\n\r\n    /**\r\n     * Create a new empty node state\r\n     * @return a new empty node state\r\n     */\r\n    createNewComponentState() {\r\n        var componentState = {};\r\n\r\n        // set the timestamp\r\n        componentState.clientSaveTime = Date.parse(new Date());\r\n\r\n        return componentState;\r\n    };\r\n\r\n    /**\r\n     * Create a new empty node state\r\n     * @return a new empty node state\r\n     */\r\n    createNewNodeState() {\r\n        var nodeState = {};\r\n        nodeState.runId = this.ConfigService.getRunId();\r\n        nodeState.periodId = this.ConfigService.getPeriodId();\r\n        nodeState.workgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n        // set the timestamp\r\n        nodeState.clientSaveTime = Date.parse(new Date());\r\n\r\n        return nodeState;\r\n    };\r\n\r\n    /**\r\n     * Get the node type in camel case\r\n     * @param nodeType the node type e.g. OpenResponse\r\n     * @return the node type in camel case\r\n     * e.g.\r\n     * openResponse\r\n     */\r\n    toCamelCase(nodeType) {\r\n        var nodeTypeCamelCased = null;\r\n\r\n        if (nodeType != null && nodeType.length > 0) {\r\n\r\n            // get the first character\r\n            var firstChar = nodeType.charAt(0);\r\n\r\n            if(firstChar != null) {\r\n\r\n                // make the first character lower case\r\n                var firstCharLowerCase = firstChar.toLowerCase();\r\n\r\n                if (firstCharLowerCase != null) {\r\n\r\n                    /*\r\n                     * replace the first character with the lower case\r\n                     * character\r\n                     */\r\n                    nodeTypeCamelCased = firstCharLowerCase + nodeType.substr(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodeTypeCamelCased;\r\n    };\r\n\r\n    /**\r\n     * Check if the string is in all uppercase\r\n     * @param str the string to check\r\n     * @return whether the string is in all uppercase\r\n     */\r\n    isStringUpperCase(str) {\r\n        var result = false;\r\n\r\n        if (str != null) {\r\n            if (str === str.toUpperCase()) {\r\n                // the string is in all uppercase\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the html template for the component\r\n     * @param componentType the component type\r\n     * @return the path to the html template for the component\r\n     */\r\n    getComponentTemplatePath(componentType) {\r\n\r\n        if (componentType == null) {\r\n            // error\r\n        } else if (this.isStringUpperCase(componentType)) {\r\n            /*\r\n             * the component type is all uppercase so we will convert it to all\r\n             * lowercase\r\n             */\r\n            componentType = componentType.toLowerCase();\r\n        } else {\r\n            // get the component type in camel case\r\n            componentType = this.toCamelCase(componentType);\r\n        }\r\n        var wiseBaseURL = this.ConfigService.getWISEBaseURL();\r\n        return wiseBaseURL + '/wise5/components/' + componentType + '/index.html';\r\n    };\r\n\r\n    /**\r\n     * Get the component content\r\n     * @param componentContent the component content\r\n     * @param componentId the component id\r\n     * @return the component content\r\n     */\r\n    getComponentContentById(nodeContent, componentId) {\r\n        var componentContent = null;\r\n\r\n        if (nodeContent != null && componentId != null) {\r\n\r\n            // get the components\r\n            var components = nodeContent.components;\r\n\r\n            if (components != null) {\r\n\r\n                // loop through the components\r\n                for (var c = 0; c < components.length; c++) {\r\n                    var tempComponent = components[c];\r\n\r\n                    if (tempComponent != null) {\r\n                        var tempComponentId = tempComponent.id;\r\n\r\n                        if (tempComponentId === componentId) {\r\n                            // we have found the component with the component id we want\r\n                            componentContent = tempComponent;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentContent;\r\n    };\r\n\r\n    /**\r\n     * Check if any of the component states were submitted\r\n     * @param componentStates an array of component states\r\n     * @return whether any of the component states were submitted\r\n     */\r\n    isWorkSubmitted(componentStates) {\r\n        var result = false;\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n\r\n                    if (componentState.isSubmit) {\r\n                        result = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the node or component is completed\r\n     * @param functionParams the params that will specify which node or component\r\n     * to check for completion\r\n     * @returns whether the specified node or component is completed\r\n     */\r\n    isCompleted(functionParams) {\r\n\r\n        var result = false;\r\n\r\n        if (functionParams != null) {\r\n            var nodeId = functionParams.nodeId;\r\n            var componentId = functionParams.componentId;\r\n\r\n            result = this.StudentDataService.isCompleted(nodeId, componentId);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Go to the next node\r\n     * @return a promise that will return the next node id\r\n     */\r\n    goToNextNode() {\r\n\r\n        // get the next node id\r\n        return this.getNextNodeId().then((nextNodeId) => {\r\n            if (nextNodeId != null) {\r\n                var mode = this.ConfigService.getMode();\r\n                if (mode === 'classroomMonitor' || mode === 'author') {\r\n                    this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\r\n                } else {\r\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\r\n                }\r\n            }\r\n\r\n            return nextNodeId;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the next node in the project sequence. We return a promise because\r\n     * in preview mode we allow the user to specify which branch path they want\r\n     * to go to. In all other cases we will resolve the promise immediately.\r\n     * @param currentId (optional)\r\n     * @returns a promise that returns the next node id\r\n     */\r\n    getNextNodeId(currentId) {\r\n        // create a promise that will return the next node id\r\n        let deferred = this.$q.defer();\r\n        let promise = deferred.promise;\r\n\r\n        let nextNodeId = null;\r\n        let currentNodeId = null;\r\n        let mode = this.ConfigService.getMode();\r\n\r\n        if (currentId) {\r\n            // a current node id was passed in\r\n            currentNodeId = currentId;\r\n        } else {\r\n            // no current id was passed in, so get current node\r\n            let currentNode = null;\r\n\r\n            if (mode === 'classroomMonitor' || mode === 'author') {\r\n                currentNode = this.TeacherDataService.getCurrentNode();\r\n            } else {\r\n                currentNode = this.StudentDataService.getCurrentNode();\r\n            }\r\n            if (currentNode) {\r\n                currentNodeId = currentNode.id;\r\n            }\r\n        }\r\n\r\n        if (currentNodeId) {\r\n            if (mode === 'classroomMonitor' || mode === 'author') {\r\n                let currentNodeOrder = this.ProjectService.getNodeOrderById(currentNodeId);\r\n\r\n                if (currentNodeOrder) {\r\n                    let nextNodeOrder = currentNodeOrder + 1;\r\n                    let nextId = this.ProjectService.getNodeIdByOrder(nextNodeOrder);\r\n\r\n                    if (nextId) {\r\n                        if (this.ProjectService.isApplicationNode(nextId)) {\r\n                            // node is a step, so set it as the next node\r\n                            nextNodeId = nextId;\r\n                        } else if (this.ProjectService.isGroupNode(nextId)){\r\n                            // node is an activity, so get next nodeId\r\n                            nextNodeId = this.getNextNodeId(nextId);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // resolve the promise with the next node id\r\n                deferred.resolve(nextNodeId);\r\n            } else {\r\n                // get the transition logic from the current node\r\n                var transitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(currentNodeId);\r\n\r\n                // get all the branchPathTaken events for the current node\r\n                var branchPathTakenEvents = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNodeId);\r\n\r\n                if (branchPathTakenEvents != null && branchPathTakenEvents.length > 0 &&\r\n                    (transitionLogic != null && transitionLogic.canChangePath != true)) {\r\n                    // the student has branched on this node before and they are not allowed to change paths\r\n\r\n                    // loop through all the branchPathTaken events from newest to oldest\r\n                    for (var b = branchPathTakenEvents.length - 1; b >= 0; b--) {\r\n                        var branchPathTakenEvent = branchPathTakenEvents[b];\r\n\r\n                        if (branchPathTakenEvent != null) {\r\n\r\n                            // get the data from the event\r\n                            var data = branchPathTakenEvent.data;\r\n\r\n                            if (data != null) {\r\n                                // get the to node id\r\n                                var toNodeId = data.toNodeId;\r\n                                nextNodeId = toNodeId;\r\n                                deferred.resolve(nextNodeId);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    // the student has not branched on this node before\r\n\r\n                    if (transitionLogic != null) {\r\n                        var transitions = transitionLogic.transitions;\r\n\r\n                        if (transitions == null || transitions.length == 0) {\r\n                            /*\r\n                             * this node does not have any transitions so we will\r\n                             * check if the parent group has transitions\r\n                             */\r\n\r\n                            // get the parent group id\r\n                            var parentGroupId = this.ProjectService.getParentGroupId(currentNodeId);\r\n                            var parentHasTransitionLogic = false;\r\n\r\n                            if (parentGroupId != null) {\r\n\r\n                                // get the transition logic from the parent\r\n                                var parentTransitionLogic = this.ProjectService.getTransitionLogicByFromNodeId(parentGroupId);\r\n\r\n                                if (parentTransitionLogic != null) {\r\n\r\n                                    parentHasTransitionLogic = true;\r\n\r\n                                    // choose a transition\r\n                                    this.chooseTransition(parentGroupId, parentTransitionLogic).then((transition) => {\r\n\r\n                                        if (transition != null) {\r\n                                            // get the to node id\r\n                                            var transitionToNodeId = transition.to;\r\n\r\n                                            if (this.ProjectService.isGroupNode(transitionToNodeId)) {\r\n                                                // the to node is a group\r\n\r\n                                                // get the start id of the group\r\n                                                var startId = this.ProjectService.getGroupStartId(transitionToNodeId);\r\n\r\n                                                if (startId == null || startId == '') {\r\n                                                    // the group does not have a start id so we will just use the group\r\n                                                    nextNodeId = transitionToNodeId;\r\n                                                } else {\r\n                                                    // the group has a start id so we will use the start id\r\n                                                    nextNodeId = startId;\r\n                                                }\r\n                                            } else {\r\n                                                // the to node is a step\r\n                                                nextNodeId = transitionToNodeId;\r\n                                            }\r\n                                        }\r\n\r\n                                        // resolve the promise with the next node id\r\n                                        deferred.resolve(nextNodeId);\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            if (!parentHasTransitionLogic) {\r\n                                /*\r\n                                 * the parent does not have any transition logic so\r\n                                 * there is no next node from the parent\r\n                                 */\r\n                                deferred.resolve(null);\r\n                            }\r\n                        } else {\r\n                            // choose a transition\r\n                            this.chooseTransition(currentNodeId, transitionLogic).then((transition) => {\r\n\r\n                                if (transition != null) {\r\n                                    // move the student to the toNodeId\r\n                                    nextNodeId = transition.to;\r\n\r\n                                    // resolve the promise with the next node id\r\n                                    deferred.resolve(nextNodeId);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            deferred.resolve(null);\r\n        }\r\n\r\n        return promise;\r\n    };\r\n\r\n    /**\r\n     * Go to the next node that captures work\r\n     * @return a promise that will return the next node id\r\n     */\r\n    goToNextNodeWithWork() {\r\n        this.getNextNodeIdWithWork().then((nextNodeId) => {\r\n            if (nextNodeId) {\r\n                const mode = this.ConfigService.getMode();\r\n                if (mode === 'classroomMonitor' || mode === 'author') {\r\n                    this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\r\n                } else {\r\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(nextNodeId);\r\n                }\r\n            }\r\n            return nextNodeId;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Get the next node id in the project sequence that captures student work\r\n     * @param currentId (optional)\r\n     * @returns next node id\r\n     */\r\n    getNextNodeIdWithWork(currentId) {\r\n        return this.getNextNodeId(currentId).then((nextNodeId) => {\r\n            if (nextNodeId) {\r\n                const hasWork = this.ProjectService.nodeHasWork(nextNodeId);\r\n                if (hasWork) {\r\n                    return nextNodeId;\r\n                } else {\r\n                    return this.getNextNodeIdWithWork(nextNodeId);\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Go to the previous node\r\n     */\r\n    goToPrevNode() {\r\n\r\n        var prevNodeId = this.getPrevNodeId();\r\n        var mode = this.ConfigService.getMode();\r\n        if (mode === 'classroomMonitor' || mode === 'author') {\r\n            this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\r\n        } else {\r\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the previous node in the project sequence\r\n     * @param currentId (optional)\r\n     */\r\n    getPrevNodeId(currentId) {\r\n        let prevNodeId = null;\r\n        let currentNodeId = null;\r\n        let mode = this.ConfigService.getMode();\r\n\r\n        if (currentId) {\r\n            // a current node id was passed in\r\n            currentNodeId = currentId;\r\n        } else {\r\n            // no current id was passed in, so get current node\r\n            let currentNode = null;\r\n\r\n            if (mode === 'classroomMonitor' || mode === 'author') {\r\n                currentNode = this.TeacherDataService.getCurrentNode();\r\n            } else {\r\n                currentNode = this.StudentDataService.getCurrentNode();\r\n            }\r\n            if (currentNode) {\r\n                currentNodeId = currentNode.id;\r\n            }\r\n        }\r\n\r\n        if (currentNodeId) {\r\n            if (mode === 'classroomMonitor' || mode === 'author') {\r\n                let currentNodeOrder = this.ProjectService.getNodeOrderById(currentNodeId);\r\n\r\n                if (currentNodeOrder) {\r\n                    let prevNodeOrder = currentNodeOrder - 1;\r\n                    let prevId = this.ProjectService.getNodeIdByOrder(prevNodeOrder);\r\n\r\n                    if (prevId) {\r\n                        if (this.ProjectService.isApplicationNode(prevId)) {\r\n                            // node is a step, so set it as the next node\r\n                            prevNodeId = prevId;\r\n                        } else if (this.ProjectService.isGroupNode(prevId)){\r\n                            // node is an activity, so get next nodeId\r\n                            prevNodeId = this.getPrevNodeId(prevId);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // get all the nodes that transition to the current node\r\n                var nodeIdsByToNodeId = this.ProjectService.getNodeIdsByToNodeId(currentNodeId);\r\n\r\n                if (nodeIdsByToNodeId == null) {\r\n\r\n                } else if (nodeIdsByToNodeId.length === 1) {\r\n                    // there is only one node that transitions to the current node\r\n                    prevNodeId = nodeIdsByToNodeId[0];\r\n                } else if (nodeIdsByToNodeId.length > 1) {\r\n                    // there are multiple nodes that transition to the current node\r\n\r\n                    // get the stack history\r\n                    var stackHistory = this.StudentDataService.getStackHistory();\r\n\r\n                    // loop through the stack history node ids from newest to oldest\r\n                    for (var s = stackHistory.length - 1; s >= 0; s--) {\r\n                        var stackHistoryNodeId = stackHistory[s];\r\n\r\n                        if (nodeIdsByToNodeId.indexOf(stackHistoryNodeId) != -1) {\r\n                            // we have found a node that we previously visited that transitions to the current node\r\n                            prevNodeId = stackHistoryNodeId;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return prevNodeId;\r\n    };\r\n\r\n    /**\r\n     * Go to the previous node that captures work\r\n     */\r\n    goToPrevNodeWithWork() {\r\n        const prevNodeId = this.getPrevNodeIdWithWork();\r\n        const mode = this.ConfigService.getMode();\r\n        if (mode === 'classroomMonitor' || mode === 'author') {\r\n            this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\r\n        } else {\r\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(prevNodeId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the previous node id in the project sequence that captures student work\r\n     * @param currentId (optional)\r\n     * @returns next node id\r\n     */\r\n    getPrevNodeIdWithWork(currentId) {\r\n        const prevNodeId = this.getPrevNodeId(currentId);\r\n        if (prevNodeId) {\r\n            const hasWork = this.ProjectService.nodeHasWork(prevNodeId);\r\n            if (hasWork) {\r\n                return prevNodeId;\r\n            } else {\r\n                return this.getPrevNodeIdWithWork(prevNodeId);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Close the current node (and open the current node's parent group)\r\n     */\r\n    closeNode() {\r\n        let mode = this.ConfigService.getMode();\r\n        let currentNode = null;\r\n\r\n        if (mode === 'classroomMonitor') {\r\n            currentNode = this.TeacherDataService.getCurrentNode();\r\n        } else {\r\n            currentNode = this.StudentDataService.getCurrentNode();\r\n        }\r\n\r\n        if (currentNode) {\r\n\r\n            let currentNodeId = currentNode.id;\r\n\r\n            // get the parent node of the current node\r\n            let parentNode = this.ProjectService.getParentGroup(currentNodeId);\r\n\r\n            let parentNodeId = parentNode.id;\r\n\r\n            // set the current node to the parent node\r\n            if (mode === 'classroomMonitor') {\r\n                this.TeacherDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\r\n            } else {\r\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(parentNodeId);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Choose the transition the student will take\r\n     * @param nodeId the current node id\r\n     * @param transitionLogic an object containing transitions and parameters\r\n     * for how to choose a transition\r\n     * @returns a promise that will return a transition\r\n     */\r\n    chooseTransition(nodeId, transitionLogic) {\r\n\r\n        var deferred = this.$q.defer();\r\n\r\n        // see if there is already a promise for this step\r\n        var promise = this.getChooseTransitionPromise(nodeId);\r\n\r\n        if (promise == null) {\r\n            // there is no existing promise for this step so we will create one\r\n            promise = deferred.promise;\r\n        } else {\r\n            // there is an existing promise for this step so we will use it\r\n            return promise;\r\n        }\r\n\r\n        var resolvePromiseNow = true;\r\n\r\n        // check if the transition was already previously calculated\r\n        var transitionResult = this.getTransitionResultByNodeId(nodeId);\r\n\r\n        if (transitionResult == null || (transitionLogic != null && transitionLogic.canChangePath == true)) {\r\n            /*\r\n             * we have not previously calculated the transition or the\r\n             * transition logic allows the student to change branch paths\r\n             * so we will calculate the transition again\r\n             */\r\n\r\n            // get the transitions\r\n            var transitions = transitionLogic.transitions;\r\n\r\n            if (transitions != null) {\r\n\r\n                let availableTransitions = [];\r\n\r\n                // loop through all the transitions\r\n                for (var t = 0; t < transitions.length; t++) {\r\n\r\n                    // get a transition\r\n                    var transition = transitions[t];\r\n\r\n                    // get the to node id\r\n                    var toNodeId = transition.to;\r\n\r\n                    // get the criteria for which this transition can be used\r\n                    var criteria = transition.criteria;\r\n\r\n                    // set the default result to true in case there is no criteria\r\n                    var criteriaResult = true;\r\n\r\n                    if (criteria != null) {\r\n\r\n                        var firstResult = true;\r\n                        var tempResult = true;\r\n\r\n                        // loop through all of the criteria\r\n                        for (var c = 0; c < criteria.length; c++) {\r\n\r\n                            // get a criteria\r\n                            var tempCriteria = criteria[c];\r\n\r\n                            // check if the criteria is satisfied\r\n                            tempResult = this.StudentDataService.evaluateCriteria(tempCriteria);\r\n\r\n                            if (firstResult) {\r\n                                // this is the first criteria in this for loop\r\n                                criteriaResult = tempResult;\r\n                                firstResult = false;\r\n                            } else {\r\n                                // this is not the first criteria in this for loop so we will && the result\r\n                                criteriaResult = criteriaResult && tempResult;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (toNodeId != null) {\r\n\r\n                        // check if the criteria was satisfied and the to node is visitable\r\n                        if (criteriaResult) {\r\n\r\n                            // the student is allowed to use the transition\r\n                            availableTransitions.push(transition);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (availableTransitions.length == 0) {\r\n                    // there are no available transitions for the student\r\n                    transitionResult = null;\r\n                } else if (availableTransitions.length == 1) {\r\n                    // there is one available transition for the student\r\n                    transitionResult = availableTransitions[0];\r\n                } else if (availableTransitions.length > 1) {\r\n                    // there are multiple available transitions for the student\r\n\r\n                    if (this.ConfigService.isPreview()) {\r\n                        /*\r\n                         * we are in preview mode so we will let the user choose\r\n                         * the branch path to go to\r\n                         */\r\n\r\n                        if (transitionResult != null) {\r\n                            /*\r\n                             * the user has previously chosen the branch path\r\n                             * so we will use the transition they chose and\r\n                             * not ask them again\r\n                             */\r\n                        } else {\r\n                            // ask the user which branch path to go to\r\n\r\n                            resolvePromiseNow = false;\r\n\r\n                            let chooseBranchPathTemplateUrl = this.ProjectService.getThemePath() + '/templates/branchPathChooser.html';\r\n\r\n                            var dialogOptions = {\r\n                                templateUrl: chooseBranchPathTemplateUrl,\r\n                                controller: ChooseBranchPathController,\r\n                                locals: {\r\n                                    availableTransitions: availableTransitions,\r\n                                    deferred: deferred,\r\n                                    nodeId: nodeId\r\n                                }\r\n                            };\r\n\r\n                            /**\r\n                             * Controller that handles the dialog popup that lets the user\r\n                             * which branch path to go to.\r\n                             * @param $scope the scope\r\n                             * @param $mdDialog the dialog popup object\r\n                             * @param availableTransitions the branch paths\r\n                             * @param deferred used to resolve the promise once the user\r\n                             * has chosen a branch path\r\n                             * @param nodeId the current node\r\n                             */\r\n                            function ChooseBranchPathController($scope, $mdDialog, NodeService, ProjectService, availableTransitions, deferred, nodeId) {\r\n\r\n                                $scope.availableTransitions = availableTransitions;\r\n                                $scope.NodeService = NodeService;\r\n                                $scope.ProjectService = ProjectService;\r\n\r\n                                // called when the user clicks on a branch path\r\n                                $scope.chooseBranchPath = (transitionResult) => {\r\n                                    // remember the transition that was chosen\r\n                                    $scope.NodeService.setTransitionResult(nodeId, transitionResult);\r\n\r\n                                    // resolve the promise\r\n                                    deferred.resolve(transitionResult);\r\n\r\n                                    /*\r\n                                     * don't remember the promise for this step anymore\r\n                                     * since we have resolved it\r\n                                     */\r\n                                    $scope.NodeService.setChooseTransitionPromise(nodeId, null);\r\n\r\n                                    // close the dialog\r\n                                    $mdDialog.hide();\r\n                                }\r\n\r\n                                // obtains the step number and title\r\n                                $scope.getNodePositionAndTitleByNodeId = (nodeId) => {\r\n                                    return $scope.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n                                }\r\n\r\n                                // called when the dialog is closed\r\n                                $scope.close = () => {\r\n                                    $mdDialog.hide();\r\n                                }\r\n                            }\r\n\r\n                            ChooseBranchPathController.$inject = ['$scope', '$mdDialog', 'NodeService', 'ProjectService', 'availableTransitions', 'deferred', 'nodeId'];\r\n\r\n                            /*\r\n                             * show the popup dialog that lets the user choose the\r\n                             * branch path\r\n                             */\r\n                            this.$mdDialog.show(dialogOptions);\r\n                        }\r\n                    } else {\r\n                        /*\r\n                         * we are in regular student run mode so we will choose\r\n                         * the branch according to how the step was authored\r\n                         */\r\n\r\n                        var howToChooseAmongAvailablePaths = transitionLogic.howToChooseAmongAvailablePaths;\r\n\r\n                        if (howToChooseAmongAvailablePaths == null ||\r\n                            howToChooseAmongAvailablePaths === '' ||\r\n                            howToChooseAmongAvailablePaths === 'random') {\r\n                            // choose a random transition\r\n\r\n                            var randomIndex = Math.floor(Math.random() * availableTransitions.length);\r\n                            transitionResult = availableTransitions[randomIndex];\r\n                        } else if (howToChooseAmongAvailablePaths === 'workgroupId') {\r\n                            // use the workgroup id to choose the transition\r\n\r\n                            // get the workgroup id\r\n                            var workgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n                            // choose the transition index\r\n                            var index = workgroupId % availableTransitions.length;\r\n\r\n                            transitionResult = availableTransitions[index];\r\n                        } else if (howToChooseAmongAvailablePaths === 'firstAvailable') {\r\n                            // choose the first available transition\r\n\r\n                            transitionResult = availableTransitions[0];\r\n                        } else if (howToChooseAmongAvailablePaths === 'lastAvailable') {\r\n                            // choose the last available transition\r\n\r\n                            transitionResult = availableTransitions[availableTransitions.length - 1];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (resolvePromiseNow) {\r\n            // remember the transition that was chosen for this step\r\n            this.setTransitionResult(nodeId, transitionResult);\r\n\r\n            // resolve the promise immediately\r\n            deferred.resolve(transitionResult);\r\n        } else {\r\n            /*\r\n             * remember the promise in case someone else calls chooseTransition()\r\n             * so we can chain off of this promise instead of creating another\r\n             * promise\r\n             */\r\n            this.setChooseTransitionPromise(nodeId, promise);\r\n        }\r\n\r\n        return promise;\r\n    };\r\n\r\n    hasTransitionLogic() {\r\n        var result = false;\r\n\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n\r\n        if (currentNode != null) {\r\n            var transitionLogic = currentNode.transitionLogic;\r\n\r\n            if (transitionLogic != null) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the transition logic for the current node and create branch\r\n     * path taken events if necessary.\r\n     */\r\n    evaluateTransitionLogic() {\r\n\r\n        // get the current node\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n\r\n        if (currentNode != null) {\r\n\r\n            var nodeId = currentNode.id;\r\n            var transitionLogic = currentNode.transitionLogic;\r\n\r\n            if (transitionLogic != null) {\r\n\r\n                // get all the transitions from the current node\r\n                var transitions = transitionLogic.transitions;\r\n                var canChangePath = transitionLogic.canChangePath;\r\n                var alreadyBranched = false;\r\n\r\n                // get all the branchPathTaken events for the current node\r\n                var events = this.StudentDataService.getBranchPathTakenEventsByNodeId(currentNode.id);\r\n\r\n                if (events.length > 0) {\r\n                    // the student has branched from this node before\r\n                    alreadyBranched = true;\r\n                }\r\n\r\n                var transition, fromNodeId, toNodeId;\r\n\r\n                if (alreadyBranched) {\r\n                    // student has previously branched\r\n\r\n                    if (canChangePath) {\r\n                        // student can change path\r\n\r\n                        // choose a transition\r\n                        this.chooseTransition(nodeId, transitionLogic).then((transition) => {\r\n\r\n                            if (transition != null) {\r\n                                fromNodeId = currentNode.id;\r\n                                toNodeId = transition.to;\r\n\r\n                                // create a branchPathTaken event to signify taking the branch path\r\n                                this.createBranchPathTakenEvent(fromNodeId, toNodeId);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // student can't change path\r\n\r\n                    }\r\n                } else {\r\n                    // student has not branched yet\r\n\r\n                    // choose a transition\r\n                    this.chooseTransition(nodeId, transitionLogic).then((transition) => {\r\n\r\n                        if (transition != null) {\r\n                            fromNodeId = currentNode.id;\r\n                            toNodeId = transition.to;\r\n\r\n                            // create a branchPathTaken event to signify taking the branch path\r\n                            this.createBranchPathTakenEvent(fromNodeId, toNodeId);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create a branchPathTaken event\r\n     * @param fromNodeId the from node id\r\n     * @param toNodeid the to node id\r\n     */\r\n    createBranchPathTakenEvent(fromNodeId, toNodeId) {\r\n        var nodeId = fromNodeId;\r\n        var componentId = null;\r\n        var componentType = null;\r\n        var category = \"Navigation\";\r\n        var event = \"branchPathTaken\";\r\n        var eventData = {};\r\n        eventData.fromNodeId = fromNodeId;\r\n        eventData.toNodeId = toNodeId;\r\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\r\n    }\r\n\r\n    evaluateTransitionLogicOn(event) {\r\n        var result = false;\r\n\r\n        // get the current node\r\n        var currentNode = this.StudentDataService.getCurrentNode();\r\n\r\n        if (currentNode != null) {\r\n            var transitionLogic = currentNode.transitionLogic;\r\n\r\n            var whenToChoosePath = transitionLogic.whenToChoosePath;\r\n\r\n            if (event === whenToChoosePath) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the transition result for a node\r\n     * @param nodeId the the node id\r\n     * @returns the transition object that was chosen for the node\r\n     */\r\n    getTransitionResultByNodeId(nodeId) {\r\n        return this.transitionResults[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Set the transition result for a node\r\n     * @param nodeId the node id\r\n     * @param transitionResult the transition object that was chosen for the node\r\n     */\r\n    setTransitionResult(nodeId, transitionResult) {\r\n        if (nodeId != null) {\r\n            this.transitionResults[nodeId] = transitionResult;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the promise that was created for a specific node when the\r\n     * chooseTransition() function was called. This promise has not been\r\n     * resolved yet.\r\n     * @param nodeId the node id\r\n     * @returns the promise that was created when chooseTransition() was called\r\n     * or null if there is no unresolved promise.\r\n     */\r\n    getChooseTransitionPromise(nodeId) {\r\n        return this.chooseTransitionPromises[nodeId];\r\n    }\r\n\r\n    /**\r\n     * Set the promise that was created for a specific node when the\r\n     * chooseTransition() function was called. This promise has not been\r\n     * resolved yet.\r\n     * @param nodeId the node id\r\n     * @param promise the promise\r\n     */\r\n    setChooseTransitionPromise(nodeId, promise) {\r\n        if (nodeId != null) {\r\n            this.chooseTransitionPromises[nodeId] = promise;\r\n        }\r\n    }\r\n}\r\n\r\nNodeService.$inject = [\r\n    '$http',\r\n    '$injector',\r\n    '$mdDialog',\r\n    '$q',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentDataService'\r\n];\r\n\r\nexport default NodeService;\r\n"]}