{"version":3,"sources":["notebookService.es6"],"names":["NotebookService","$http","$q","$rootScope","ConfigService","ProjectService","StudentAssetService","StudentDataService","config","enabled","label","icon","enableAddNew","addIcon","itemTypes","note","requireTextOnEveryNote","enableLink","enableClipping","enableStudentUploads","type","singular","plural","link","color","question","report","notes","reports","publicNotebookItems","angular","merge","project","notebook","teacherNotebook","ev","itemId","$broadcast","file","text","studentWorkIds","isEditTextEnabled","isFileUploadEnabled","noteCopy","copy","id","content","clientSaveTime","Date","parse","clientDeleteTime","saveNotebookItem","nodeId","localNotebookItemId","title","groups","workgroupId","getWorkgroupId","notebookByWorkgroup","getNotebookByWorkgroup","allNotebookItems","allItems","notebookItem","reportId","getLatestNotebookItemByLocalNotebookItemId","reportNotes","reportNote","reportNoteContent","getReportNoteContentByReportId","maxScore","isStudentNoteEnabled","periodId","isPreview","notebooksByWorkgroup","items","deletedItems","groupNotebookItems","deferred","defer","resolve","promise","method","url","getStudentNotebookURL","params","then","response","data","studentAssetId","studentAsset","getAssetById","studentWorkId","studentWork","getStudentWorkByStudentWorkId","fromJson","hasOwnProperty","push","e","ni","length","notebookItemLocalNotebookItemId","notebookItemLocalNotebookItemIdKey","allRevisionsForThisLocalNotebookItemId","lastRevision","serverDeleteTime","notebookItemId","privateNotebookItems","getPrivateNotebookItemById","getPublicNotebookItemById","group","publicNotebookItemsInGroup","publicNotebookItemInGroup","itemsInGroup","itemInGroup","publicNotebookItemsForGroup","publicNotebookItemForGroup","reject","headers","getPeriodId","toJson","getMode","$","param","result","isNotebookItemPrivate","updatePrivateNotebookItem","handleNewNotebookItem","isOpen","currentNode","componentId","componentType","category","eventData","curentNodeId","event","saveVLEEvent","$inject"],"mappings":"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","file":"notebookService.js","sourcesContent":["class NotebookService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService,\n      StudentAssetService, StudentDataService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n\n    // default notebook configuration\n    // TODO: i18n\n    // TODO: decide on desired defaults\n    // TODO: allow wise instance to set default enabled/disabled for each type in wise config?\n    this.config = {\n      enabled: false,\n      label: 'Notebook',\n      icon: 'book',\n      enableAddNew: true,\n      addIcon: 'note_add',\n      itemTypes: {\n        note: {\n          enabled: true,\n          requireTextOnEveryNote: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: 'note',\n          label: {\n            singular: 'note',\n            plural: 'notes',\n            link: 'Manage Notes',\n            icon: 'note',\n            color: '#1565C0'\n          }\n        },\n        question: {\n          enabled: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: 'question',\n          label: {\n            singular: 'question',\n            plural: 'questions',\n            link: 'Manage Questions',\n            icon: 'live_help',\n            color: '#F57C00'\n          }\n        },\n        report: {\n          enabled: false,\n          enableLink: true,\n          type: 'report',\n          label: {\n            singular: 'report',\n            plural: 'reports',\n            link: 'Report',\n            icon: 'assignment',\n            color: '#AD1457'\n          },\n          notes: []\n        }\n      }\n    };\n\n    this.reports = [];\n    this.publicNotebookItems = {};\n  }\n\n  getStudentNotebookConfig() {\n    return angular.merge(this.config, this.ProjectService.project.notebook);\n  }\n\n  getTeacherNotebookConfig() {\n    return angular.merge(this.config, this.ProjectService.project.teacherNotebook);\n  }\n\n  editItem(ev, itemId) {\n    this.$rootScope.$broadcast('editNote', {itemId: itemId, ev: ev});\n  }\n\n  addNote(ev, file, text = null, studentWorkIds = null, isEditTextEnabled = true, isFileUploadEnabled = true) {\n    this.$rootScope.$broadcast('addNote',\n        {ev: ev, file: file, text: text, studentWorkIds: studentWorkIds,\n          isEditTextEnabled: isEditTextEnabled, isFileUploadEnabled: isFileUploadEnabled});\n  }\n\n  deleteNote(note) {\n    const noteCopy = angular.copy(note);\n    noteCopy.id = null; // set to null so we're creating a new notebook item\n    noteCopy.content.clientSaveTime = Date.parse(new Date());\n    const clientDeleteTime = Date.parse(new Date());\n    return this.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId, noteCopy.type,\n        noteCopy.title, noteCopy.content, noteCopy.groups, noteCopy.content.clientSaveTime, clientDeleteTime);\n  }\n\n  reviveNote(note) {\n    const noteCopy = angular.copy(note);\n    noteCopy.id = null; // set to null so we're creating a new notebook item\n    noteCopy.content.clientSaveTime = Date.parse(new Date());\n    const clientDeleteTime = null; // if delete timestamp is null, then we are in effect un-deleting this note item\n    return this.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId, noteCopy.type,\n        noteCopy.title, noteCopy.content, noteCopy.groups, noteCopy.content.clientSaveTime, clientDeleteTime);\n  }\n\n  // looks up notebook item by local notebook item id, including deleted notes\n  getLatestNotebookItemByLocalNotebookItemId(localNotebookItemId, workgroupId = this.ConfigService.getWorkgroupId()) {\n    const notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    if (notebookByWorkgroup != null) {\n      const allNotebookItems = notebookByWorkgroup.allItems;\n      for (let notebookItem of allNotebookItems) {\n        if (notebookItem.localNotebookItemId === localNotebookItemId) {\n          return notebookItem;\n        }\n      }\n    }\n    return null;\n  }\n\n  // returns student's report item if they've done work, or the template if they haven't\n  getLatestNotebookReportItemByReportId(reportId, workgroupId = this.ConfigService.getWorkgroupId()) {\n    return this.getLatestNotebookItemByLocalNotebookItemId(reportId, workgroupId);\n  }\n\n  getTemplateReportItemByReportId(reportId) {\n    const reportNotes = this.config.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId === reportId) {\n        return {\n          id: null,\n          type: 'report',\n          localNotebookItemId: reportId,\n          content: reportNote\n        };\n      }\n    }\n    return null;\n  }\n\n  getMaxScoreByReportId(reportId) {\n    const reportNoteContent = this.getReportNoteContentByReportId(reportId);\n    if (reportNoteContent != null && reportNoteContent.maxScore != null) {\n      return reportNoteContent.maxScore;\n    }\n    return 0;\n  }\n\n  getNotebookConfig() {\n    return this.config;\n  }\n\n  /**\n   * Returns the report content for the specified reportId, or null if not exists.\n   * @param reportId\n   */\n  getReportNoteContentByReportId(reportId) {\n    const reportNotes = this.config.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId === reportId) {\n        return reportNote;\n      }\n    }\n    return null;\n  }\n\n  isNotebookEnabled() {\n    return this.ProjectService.project.notebook != null && this.ProjectService.project.notebook.enabled;\n  }\n\n  isTeacherNotebookEnabled() {\n    return this.ProjectService.project.teacherNotebook != null && this.ProjectService.project.teacherNotebook.enabled;\n  }\n\n  isStudentNoteEnabled() {\n    return this.ProjectService.project.notebook != null &&\n        this.ProjectService.project.notebook.itemTypes.note.enabled;\n  }\n\n  isStudentNoteClippingEnabled() {\n    return this.isStudentNoteEnabled() &&\n      this.ProjectService.project.notebook.itemTypes.note.enableClipping;\n  }\n\n  retrieveNotebookItems(workgroupId = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project, initialize dummy student data\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      this.notebooksByWorkgroup = {};\n      this.notebooksByWorkgroup[workgroupId] = {};\n      this.notebooksByWorkgroup[workgroupId].allItems = [];\n      this.notebooksByWorkgroup[workgroupId].items = [];\n      this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      this.groupNotebookItems();\n      // pretend sending data to server\n      const deferred = this.$q.defer();\n      deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n      return deferred.promise;\n    } else {\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL(),\n        params : {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      }\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        this.notebooksByWorkgroup = {};\n        const allNotebookItems = response.data;\n        for (let notebookItem of allNotebookItems) {\n          try {\n            if (notebookItem.studentAssetId != null) {\n              notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n            } else if (notebookItem.studentWorkId != null) {\n              notebookItem.studentWork =\n                  this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n            } else if (notebookItem.type === 'note' || notebookItem.type === 'report') {\n              notebookItem.content = angular.fromJson(notebookItem.content);\n            }\n            const workgroupId = notebookItem.workgroupId;\n            if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n              this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n            } else {\n              this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n            }\n          } catch (e) {\n          }\n        }\n        this.groupNotebookItems();\n        return this.notebooksByWorkgroup;\n      });\n    }\n  }\n\n  /**\n   * Groups the notebook items together in to a map-like structure inside this.notebook.items.\n   * {\n   *    'abc123': [{localNotebookItemId:'abc123', 'text':'first revision'}, {localNotebookItemId:'abc123', 'text':'second revision'}],\n   *    'def456': [{localNotebookItemId:'def456', 'text':'hello'}, {localNotebookItemId:'def456', 'text':'hello my friend'}]\n   * }\n   */\n  groupNotebookItems() {\n    for (let workgroupId in this.notebooksByWorkgroup) {\n      if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n        const notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n        notebookByWorkgroup.items = {};\n        notebookByWorkgroup.deletedItems = {};  // reset deleted items\n        for (let ni = 0; ni < notebookByWorkgroup.allItems.length; ni++) {\n          const notebookItem = notebookByWorkgroup.allItems[ni];\n          const notebookItemLocalNotebookItemId = notebookItem.localNotebookItemId;\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemId)) {\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId].push(notebookItem);\n          } else {\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId] = [notebookItem];\n          }\n        }\n        // Go through the items and look at the last revision of each item.\n        // If it's deleted, then move the entire item array to deletedItems\n        for (let notebookItemLocalNotebookItemIdKey in notebookByWorkgroup.items) {\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemIdKey)) {\n            const allRevisionsForThisLocalNotebookItemId = notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n            if (allRevisionsForThisLocalNotebookItemId != null) {\n              const lastRevision = allRevisionsForThisLocalNotebookItemId[allRevisionsForThisLocalNotebookItemId.length - 1];\n              if (lastRevision != null && lastRevision.serverDeleteTime != null) {\n                // the last revision for this was deleted,\n                // so move the entire note (with all its revisions) to deletedItems\n                notebookByWorkgroup.deletedItems[notebookItemLocalNotebookItemIdKey] = allRevisionsForThisLocalNotebookItemId;\n                delete notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the notebook item with the specified notebook item id.\n   */\n  getPrivateNotebookItemById(notebookItemId, workgroupId = null) {\n    const notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    if (notebookByWorkgroup != null) {\n      const allNotebookItems = notebookByWorkgroup.allItems;\n      for (let notebookItem of allNotebookItems) {\n        if (notebookItem.id === notebookItemId) {\n          return notebookItem;\n        }\n      }\n    }\n  }\n\n  getPrivateNotebookItems(workgroupId = this.ConfigService.getWorkgroupId()) {\n    const notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    const privateNotebookItems = [];\n    for (let notebookItem of notebookByWorkgroup.allItems) {\n      if (notebookItem.groups == null || notebookItem.groups.length == 0) {\n        privateNotebookItems.push(notebookItem);\n      }\n    }\n    return privateNotebookItems;\n  }\n\n  getNotebookItemById(notebookItemId, workgroupId = null) {\n    let notebookItem = this.getPrivateNotebookItemById(notebookItemId, workgroupId);\n    if (notebookItem == null) {\n      notebookItem = this.getPublicNotebookItemById(notebookItemId);\n    }\n    return notebookItem;\n  }\n\n  getPublicNotebookItem(group, localNotebookItemId, workgroupId) {\n    const publicNotebookItemsInGroup = this.publicNotebookItems[group];\n    for (let publicNotebookItemInGroup of publicNotebookItemsInGroup) {\n      if (publicNotebookItemInGroup.localNotebookItemId === localNotebookItemId &&\n          publicNotebookItemInGroup.workgroupId === workgroupId) {\n        return publicNotebookItemInGroup;\n      }\n    }\n    return null;\n  }\n\n  getPublicNotebookItemById(id) {\n    for (let group in this.publicNotebookItems) {\n      let itemsInGroup = this.publicNotebookItems[group];\n      for (let itemInGroup of itemsInGroup) {\n        if (id === itemInGroup.id) {\n          return itemInGroup;\n        }\n      }\n    }\n    return null;\n  }\n\n  getNotebookByWorkgroup(workgroupId = this.ConfigService.getWorkgroupId()) {\n    let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n    if (notebookByWorkgroup == null) {\n      notebookByWorkgroup = {\n        allItems: [],\n        items: {},\n        deletedItems: {}\n      };\n    }\n    return notebookByWorkgroup;\n  }\n\n  retrievePublicNotebookItems(group = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // pretend we made a request to server\n      const deferred = this.$q.defer();\n      deferred.resolve({});\n      return deferred.promise;\n    } else {\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL() + `/group/${group}`,\n        params : {}\n      };\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        const publicNotebookItemsForGroup = response.data;\n        for (let publicNotebookItemForGroup of publicNotebookItemsForGroup) {\n          publicNotebookItemForGroup.content =\n              angular.fromJson(publicNotebookItemForGroup.content);\n        }\n        this.publicNotebookItems[group] = publicNotebookItemsForGroup;\n        this.$rootScope.$broadcast('publicNotebookItemsRetrieved', {publicNotebookItems: this.publicNotebookItems});\n        return this.publicNotebookItems;\n      });\n    }\n  }\n\n  saveNotebookItem(notebookItemId, nodeId, localNotebookItemId, type, title, content, groups = [],\n      clientSaveTime = null, clientDeleteTime = null) {\n    if (this.ConfigService.isPreview()) {\n      return this.$q((resolve, reject) => {\n        const notebookItem = {\n          content: content,\n          localNotebookItemId: localNotebookItemId,\n          nodeId: nodeId,\n          notebookItemId: notebookItemId,\n          title: title,\n          type: type,\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          groups: groups,\n          clientSaveTime: clientSaveTime,\n          clientDeleteTime: clientDeleteTime\n        };\n        if (clientDeleteTime != null) {\n          // preview user wants to delete this note, so mock the server deletion by setting the server delete time\n          notebookItem.serverDeleteTime = clientDeleteTime;\n        } else {\n          notebookItem.serverDeleteTime = null;\n        }\n        const workgroupId = notebookItem.workgroupId;\n        if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n          this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n        } else {\n          this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n        }\n        this.groupNotebookItems();\n        this.$rootScope.$broadcast('notebookUpdated',\n            {notebook: this.notebooksByWorkgroup[workgroupId], notebookItem: notebookItem});\n        resolve();\n      });\n    } else {\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getStudentNotebookURL(),\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      const params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        periodId: this.ConfigService.getPeriodId(),\n        notebookItemId: notebookItemId,\n        localNotebookItemId: localNotebookItemId,\n        nodeId: nodeId,\n        type: type,\n        title: title,\n        content: angular.toJson(content),\n        groups: angular.toJson(groups),\n        clientSaveTime: Date.parse(new Date()),\n        clientDeleteTime: clientDeleteTime\n      };\n      if (this.ConfigService.getMode() === 'classroomMonitor') {\n        delete(params.periodId);\n      }\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        const notebookItem = result.data;\n        if (notebookItem != null) {\n          if (notebookItem.type === 'note' || notebookItem.type === 'report') {\n            notebookItem.content = angular.fromJson(notebookItem.content);\n          }\n          const workgroupId = notebookItem.workgroupId;\n          if (this.isNotebookItemPrivate(notebookItem)) {\n            this.updatePrivateNotebookItem(notebookItem, workgroupId);\n          }\n          this.$rootScope.$broadcast('notebookUpdated',\n              {notebook: this.notebooksByWorkgroup[workgroupId],\n               notebookItem: notebookItem});\n        }\n        return result.data;\n      });\n    }\n  }\n\n  updatePrivateNotebookItem(notebookItem, workgroupId) {\n    if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n      this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n    } else {\n      this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n    }\n    this.groupNotebookItems();\n  }\n\n  isNotebookItemPublic(notebookItem) {\n    return !this.isNotebookItemPrivate(notebookItem);\n  }\n\n  isNotebookItemPrivate(notebookItem) {\n    return notebookItem.groups == null;\n  }\n\n  copyNotebookItem(notebookItemId) {\n    if (!this.ConfigService.isPreview()) {\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getStudentNotebookURL() + '/parent/' + notebookItemId,\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      const params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        clientSaveTime: Date.parse(new Date())\n      };\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        const notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  addNotebookItemToGroup(notebookItemId, group) {\n    if (!this.ConfigService.isPreview()) {\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      const params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        notebookItemId: notebookItemId,\n        clientSaveTime: Date.parse(new Date())\n      };\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        const notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  removeNotebookItemFromGroup(notebookItemId, group) {\n    if (!this.ConfigService.isPreview()) {\n      const config = {\n        method: 'DELETE',\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        params : {\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          notebookItemId: notebookItemId,\n          clientSaveTime: Date.parse(new Date())\n        }\n      };\n      return this.$http(config).then((result) => {\n        const notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  handleNewNotebookItem(notebookItem) {\n    if (notebookItem.type === 'note' || notebookItem.type === 'report') {\n      notebookItem.content = angular.fromJson(notebookItem.content);\n    }\n    const workgroupId = notebookItem.workgroupId;\n    this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n    this.groupNotebookItems();\n    this.$rootScope.$broadcast('notebookUpdated',\n        {notebook: this.notebooksByWorkgroup[workgroupId], notebookItem: notebookItem});\n    return notebookItem;\n  }\n\n  saveNotebookToggleEvent(isOpen, currentNode) {\n    const nodeId = null, componentId = null, componentType = null, category = 'Notebook';\n    const eventData = {\n      curentNodeId: currentNode == null ? null : currentNode.id\n    };\n    const event = isOpen ? 'notebookOpened' : 'notebookClosed';\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  }\n}\n\nNotebookService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService'\n];\n\nexport default NotebookService;\n"]}