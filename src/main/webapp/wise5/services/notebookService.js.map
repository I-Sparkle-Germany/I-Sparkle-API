{"version":3,"sources":["notebookService.es6"],"names":["NotebookService","$http","$q","$rootScope","ConfigService","ProjectService","StudentAssetService","StudentDataService","config","enabled","label","icon","enableAddNew","addIcon","itemTypes","note","requireTextOnEveryNote","enableLink","enableClipping","enableStudentUploads","type","singular","plural","link","color","question","report","notes","reports","notebookConfig","project","notebook","angular","merge","publicNotebookItems","ev","itemId","$broadcast","file","text","studentWorkIds","isEditTextEnabled","isFileUploadEnabled","noteCopy","copy","getLatestNotebookItemByLocalNotebookItemId","id","content","clientSaveTime","Date","parse","clientDeleteTime","saveNotebookItem","nodeId","localNotebookItemId","title","groups","workgroupId","getNotebookByWorkgroup","items","hasOwnProperty","last","deletedItems","reportId","reportNotes","reportNote","templateReportItem","periodId","isPreview","getWorkgroupId","notebooksByWorkgroup","allItems","groupNotebookItems","deferred","defer","resolve","promise","method","url","getStudentNotebookURL","params","then","response","allNotebookItems","data","notebookItem","studentAssetId","studentAsset","getAssetById","studentWorkId","studentWork","getStudentWorkByStudentWorkId","fromJson","push","e","calculateTotalUsage","notebookByWorkgroup","ni","length","notebookItemLocalNotebookItemId","notebookItemLocalNotebookItemIdKey","allRevisionsForThisLocalNotebookItemId","lastRevision","serverDeleteTime","notebookItemId","getPrivateNotebookItemById","getPublicNotebookItemById","group","publicNotebookItemsInGroup","publicNotebookItemInGroup","itemsInGroup","itemInGroup","publicNotebookItemsForGroup","publicNotebookItemForGroup","reject","toJson","headers","getPeriodId","$","param","result","isNotebookItemPrivate","updatePrivateNotebookItem","handleNewNotebookItem","isOpen","currentNode","componentId","componentType","category","eventData","curentNodeId","event","saveVLEEvent","$inject"],"mappings":"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","file":"notebookService.js","sourcesContent":["class NotebookService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService,\n      StudentAssetService, StudentDataService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n\n    // default notebook configuration\n    // TODO: i18n\n    // TODO: decide on desired defaults\n    // TODO: allow wise instance to set default enabled/disabled for each type in wise config?\n    this.config = {\n      enabled: false,\n      label: \"Notebook\",\n      icon: \"book\",\n      enableAddNew: true,\n      addIcon: \"note_add\",\n      itemTypes: {\n        note: {\n          enabled: true,\n          requireTextOnEveryNote: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"note\",\n          label: {\n            singular: \"note\",\n            plural: \"notes\",\n            link: \"Manage Notes\",\n            icon: \"note\",\n            color: \"#1565C0\"\n          }\n        },\n        question: {\n          enabled: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"question\",\n          label: {\n            singular: \"question\",\n            plural: \"questions\",\n            link: \"Manage Questions\",\n            icon: \"live_help\",\n            color: \"#F57C00\"\n          }\n        },\n        report: {\n          enabled: false,\n          enableLink: true,\n          type: \"report\",\n          label: {\n            singular: \"report\",\n            plural: \"reports\",\n            link: \"Report\",\n            icon: \"assignment\",\n            color: \"#AD1457\"\n          },\n          notes: []\n        }\n      }\n    };\n\n    this.reports = [];\n\n    this.notebookConfig = {};\n    if (this.ProjectService.project) {\n      this.notebookConfig = this.ProjectService.project.notebook;\n      // update local notebook config, preserving any defaults that aren't overriden\n      if (this.notebookConfig !== null && typeof this.notebookConfig === 'object') {\n        this.config = angular.merge(this.config, this.notebookConfig);\n      }\n    }\n    this.publicNotebookItems = {};\n  }\n\n  editItem(ev, itemId) {\n    this.$rootScope.$broadcast('editNote', {itemId: itemId, ev: ev});\n  };\n\n  addNewItem(ev, file, text = null, studentWorkIds = null, isEditTextEnabled = true, isFileUploadEnabled = true) {\n    this.$rootScope.$broadcast('addNewNote',\n        {ev: ev, file: file, text: text, studentWorkIds: studentWorkIds,\n          isEditTextEnabled: isEditTextEnabled, isFileUploadEnabled: isFileUploadEnabled});\n  };\n\n  deleteItem(itemId) {\n    const noteCopy = angular.copy(this.getLatestNotebookItemByLocalNotebookItemId(itemId));\n    noteCopy.id = null; // set to null so we're creating a new notebook item\n    noteCopy.content.clientSaveTime = Date.parse(new Date());\n    let clientDeleteTime = Date.parse(new Date());\n    return this.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId, noteCopy.type,\n        noteCopy.title, noteCopy.content, noteCopy.groups, noteCopy.content.clientSaveTime, clientDeleteTime);\n  }\n\n  reviveItem(itemId) {\n    const noteCopy = angular.copy(this.getLatestNotebookItemByLocalNotebookItemId(itemId));\n    noteCopy.id = null; // set to null so we're creating a new notebook item\n    noteCopy.content.clientSaveTime = Date.parse(new Date());\n    let clientDeleteTime = null; // if delete timestamp is null, then we are in effect un-deleting this note item\n    return this.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId, noteCopy.type,\n        noteCopy.title, noteCopy.content, noteCopy.groups, noteCopy.content.clientSaveTime, clientDeleteTime);\n  }\n\n  // looks up notebook item by local notebook item id, including deleted notes\n  getLatestNotebookItemByLocalNotebookItemId(itemId, workgroupId = null) {\n    if (this.getNotebookByWorkgroup(workgroupId).items.hasOwnProperty(itemId)) {\n      const items = this.getNotebookByWorkgroup(workgroupId).items[itemId];\n      return items.last();\n    } else if (this.getNotebookByWorkgroup(workgroupId).deletedItems.hasOwnProperty(itemId)) {\n      const items = this.getNotebookByWorkgroup(workgroupId).deletedItems[itemId];\n      return items.last();\n    } else {\n      return null;\n    }\n  }\n\n  // returns student's report item if they've done work, or the template if they haven't\n  getLatestNotebookReportItemByReportId(reportId, workgroupId = null) {\n    return this.getLatestNotebookItemByLocalNotebookItemId(reportId, workgroupId);\n  }\n\n  // returns the authored report item\n  getTemplateReportItemByReportId(reportId) {\n    const reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId == reportId) {\n        let templateReportItem = {\n          id: null,\n          type: \"report\",\n          localNotebookItemId: reportId,\n          content: reportNote\n        };\n        return templateReportItem;\n      }\n    }\n    return null;\n  }\n\n  calculateTotalUsage() {\n    // get the total size\n    /*\n    let totalSizeSoFar = 0;\n    for (let i = 0; i < this.getNotebookByWorkgroup().items.length; i++) {\n        const notebookItem = this.getNotebookByWorkgroup().items[i];\n        if (notebookItem.studentAsset != null) {\n            const notebookItemSize = notebookItem.studentAsset.fileSize;\n            totalSizeSoFar += notebookItemSize;\n        }\n    }\n    this.getNotebookByWorkgroup().totalSize = totalSizeSoFar;\n    this.getNotebookByWorkgroup().totalSizeMax = this.ConfigService.getStudentMaxTotalAssetsSize();\n    this.getNotebookByWorkgroup().usagePercentage = this.notebook.totalSize / this.notebook.totalSizeMax * 100;\n    */\n  };\n\n  getNotebookConfig() {\n    return this.config;\n  };\n\n  /**\n   * Returns the report content for the specified reportId, or null if not exists.\n   * @param reportId\n   */\n  getReportNoteContentByReportId(reportId) {\n    const reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId === reportId) {\n        return reportNote;\n      }\n    }\n    return null;\n  }\n\n  isNotebookEnabled() {\n    return this.config.enabled;\n  };\n\n  retrieveNotebookItems(workgroupId = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project, initialize dummy student data\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      this.notebooksByWorkgroup = {};\n      this.notebooksByWorkgroup[workgroupId] = {};\n      this.notebooksByWorkgroup[workgroupId].allItems = [];\n      this.notebooksByWorkgroup[workgroupId].items = [];\n      this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      this.groupNotebookItems();\n      // if we're in preview, don't make any request to the server but pretend we did\n      const deferred = this.$q.defer();\n      deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n      return deferred.promise;\n    } else {\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL(),\n        params : {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      }\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        this.notebooksByWorkgroup = {};\n        const allNotebookItems = response.data;\n        for (let notebookItem of allNotebookItems) {\n          try {\n            if (notebookItem.studentAssetId != null) {\n              // if this notebook item is a StudentAsset item, add the association here\n              notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n            } else if (notebookItem.studentWorkId != null) {\n              // if this notebook item is a StudentWork item, add the association here\n              notebookItem.studentWork = this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n            } else if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n              notebookItem.content = angular.fromJson(notebookItem.content);\n            }\n            const workgroupId = notebookItem.workgroupId;\n            if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n              // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n              this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n            } else {\n              // otherwise, we'll create a new notebook field and add the item to the array\n              this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n            }\n          } catch (e) {\n            // keep going, ignore this error\n          }\n        }\n        this.groupNotebookItems(); // group notebook items based on item.localNotebookItemId\n        this.calculateTotalUsage();\n\n        return this.notebooksByWorkgroup;\n      });\n    }\n  };\n\n  /**\n   * Groups the notebook items together in to a map-like structure inside this.notebook.items.\n   * {\n   *    \"abc123\": [{localNotebookItemId:\"abc123\", \"text\":\"first revision\"}, {localNotebookItemId:\"abc123\", \"text\":\"second revision\"}],\n   *    \"def456\": [{localNotebookItemId:\"def456\", \"text\":\"hello\"}, {localNotebookItemId:\"def456\", \"text\":\"hello my friend\"}]\n   * }\n   */\n  groupNotebookItems() {\n    for (let workgroupId in this.notebooksByWorkgroup) {\n      if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n        const notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n        notebookByWorkgroup.items = {};\n        notebookByWorkgroup.deletedItems = {};  // reset deleted items\n        for (let ni = 0; ni < notebookByWorkgroup.allItems.length; ni++) {\n          const notebookItem = notebookByWorkgroup.allItems[ni];\n          const notebookItemLocalNotebookItemId = notebookItem.localNotebookItemId;\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemId)) {\n            // if this was already added before, we'll append this notebook item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId].push(notebookItem);\n          } else {\n            // otherwise, we'll create a new field and add the item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId] = [notebookItem];\n          }\n        }\n        // now go through the items and look at the last revision of each item. If it's deleted, then move the entire item array to deletedItems\n        for (let notebookItemLocalNotebookItemIdKey in notebookByWorkgroup.items) {\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemIdKey)) {\n            // get the last note revision\n            const allRevisionsForThisLocalNotebookItemId = notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n            if (allRevisionsForThisLocalNotebookItemId != null) {\n              const lastRevision = allRevisionsForThisLocalNotebookItemId[allRevisionsForThisLocalNotebookItemId.length - 1];\n              if (lastRevision != null && lastRevision.serverDeleteTime != null) {\n                // the last revision for this not deleted, so move the entire note (with all its revisions) to deletedItems\n                notebookByWorkgroup.deletedItems[notebookItemLocalNotebookItemIdKey] = allRevisionsForThisLocalNotebookItemId;\n                delete notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];  // then remove it from the items array\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the notebook item with the specified notebook item id.\n   */\n  getPrivateNotebookItemById(notebookItemId, workgroupId = null) {\n    const notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    if (notebookByWorkgroup != null) {\n      const allNotebookItems = notebookByWorkgroup.allItems;\n      for (let notebookItem of allNotebookItems) {\n        if (notebookItem.id === notebookItemId) {\n          return notebookItem;\n        }\n      }\n    }\n  }\n\n  getNotebookItemById(notebookItemId, workgroupId = null) {\n    let notebookItem = this.getPrivateNotebookItemById(notebookItemId, workgroupId);\n    if (notebookItem == null) {\n      notebookItem = this.getPublicNotebookItemById(notebookItemId);\n    }\n    return notebookItem;\n  }\n\n  getPublicNotebookItem(group, localNotebookItemId, workgroupId) {\n    const publicNotebookItemsInGroup = this.publicNotebookItems[group];\n    for (let publicNotebookItemInGroup of publicNotebookItemsInGroup) {\n      if (publicNotebookItemInGroup.localNotebookItemId === localNotebookItemId &&\n          publicNotebookItemInGroup.workgroupId === workgroupId) {\n        return publicNotebookItemInGroup;\n      }\n    }\n    return null;\n  }\n\n  getPublicNotebookItemById(id) {\n    for (let group in this.publicNotebookItems) {\n      let itemsInGroup = this.publicNotebookItems[group];\n      for (let itemInGroup of itemsInGroup) {\n        if (id == itemInGroup.id) {\n          return itemInGroup;\n        }\n      }\n    }\n    return null;\n  }\n\n  getNotebookByWorkgroup(workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n    if (notebookByWorkgroup == null) {\n      notebookByWorkgroup = {\n        allItems: [],\n        items: {},\n        deletedItems: {}\n      }\n    }\n    return notebookByWorkgroup;\n  }\n\n  retrievePublicNotebookItems(group = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // // we are previewing the project, initialize dummy student data\n      // const workgroupId = this.ConfigService.getWorkgroupId();\n      // this.notebooksByWorkgroup = {};\n      // this.notebooksByWorkgroup[workgroupId] = {};\n      // this.notebooksByWorkgroup[workgroupId].allItems = [];\n      // this.notebooksByWorkgroup[workgroupId].items = [];\n      // this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      // this.groupNotebookItems();\n      // // if we're in preview, don't make any request to the server but pretend we did\n      const deferred = this.$q.defer();\n      deferred.resolve({});\n      return deferred.promise;\n    } else {\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL() + `/group/${group}`,\n        params : {\n        }\n      };\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        const publicNotebookItemsForGroup = response.data;\n        for (let publicNotebookItemForGroup of publicNotebookItemsForGroup) {\n          publicNotebookItemForGroup.content =\n              angular.fromJson(publicNotebookItemForGroup.content);\n        }\n        this.publicNotebookItems[group] = publicNotebookItemsForGroup;\n        this.$rootScope.$broadcast(\"publicNotebookItemsRetrieved\", {publicNotebookItems: this.publicNotebookItems});\n        return this.publicNotebookItems;\n      });\n    }\n  }\n\n  saveNotebookItem(notebookItemId, nodeId, localNotebookItemId, type, title, content, groups = [],\n      clientSaveTime = null, clientDeleteTime = null) {\n    if (this.ConfigService.isPreview()) {\n      return this.$q((resolve, reject) => {\n        let notebookItem = {\n          content: content,\n          localNotebookItemId: localNotebookItemId,\n          nodeId: nodeId,\n          notebookItemId: notebookItemId,\n          title: title,\n          type: type,\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          groups: angular.toJson(groups),\n          clientSaveTime: clientSaveTime,\n          clientDeleteTime: clientDeleteTime\n        };\n        if (clientDeleteTime != null) {\n          // preview user wants to delete this note, so mock the server deletion by setting the server delete time\n          notebookItem.serverDeleteTime = clientDeleteTime;\n        } else {\n          notebookItem.serverDeleteTime = null;\n        }\n        // add/update notebook\n        let workgroupId = notebookItem.workgroupId;\n        if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n          // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n          this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n        } else {\n          // otherwise, we'll create a new notebook field and add the item to the array\n          this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n        }\n\n        this.groupNotebookItems();\n        this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId], notebookItem: notebookItem});\n        resolve();\n      });\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL(),\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        periodId: this.ConfigService.getPeriodId(),\n        notebookItemId: notebookItemId,\n        localNotebookItemId: localNotebookItemId,\n        nodeId: nodeId,\n        type: type,\n        title: title,\n        content: angular.toJson(content),\n        groups: angular.toJson(groups),\n        clientSaveTime: Date.parse(new Date()),\n        clientDeleteTime: clientDeleteTime\n      };\n      if (params.clientSaveTime == null) {\n        params.clientSaveTime = Date.parse(new Date());\n      }\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        if (notebookItem != null) {\n          if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n            notebookItem.content = angular.fromJson(notebookItem.content);\n          }\n          let workgroupId = notebookItem.workgroupId;\n          if (this.isNotebookItemPrivate(notebookItem)) {\n            this.updatePrivateNotebookItem(notebookItem, workgroupId);\n          }\n          this.$rootScope.$broadcast('notebookUpdated',\n              {notebook: this.notebooksByWorkgroup[workgroupId],\n               notebookItem: notebookItem});\n        }\n        return result.data;\n      });\n    }\n  };\n\n  updatePrivateNotebookItem(notebookItem, workgroupId) {\n    if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n      // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n      this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n    } else {\n      // otherwise, we'll create a new notebook field and add the item to the array\n      this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n    }\n    this.groupNotebookItems();\n  }\n\n  isNotebookItemPublic(notebookItem) {\n    return !this.isNotebookItemPrivate(notebookItem);\n  }\n\n  isNotebookItemPrivate(notebookItem) {\n    return notebookItem.groups == null;\n  }\n\n  copyNotebookItem(notebookItemId) {\n    if (this.ConfigService.isPreview()) {\n\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL() + '/parent/' + notebookItemId,\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        clientSaveTime: Date.parse(new Date())\n      };\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  addNotebookItemToGroup(notebookItemId, group) {\n    if (this.ConfigService.isPreview()) {\n\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        notebookItemId: notebookItemId,\n        clientSaveTime: Date.parse(new Date())\n      };\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  removeNotebookItemFromGroup(notebookItemId, group) {\n    if (this.ConfigService.isPreview()) {\n\n    } else {\n      let config = {\n        method: \"DELETE\",\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        params : {\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          notebookItemId: notebookItemId,\n          clientSaveTime: Date.parse(new Date())\n        }\n      };\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  handleNewNotebookItem(notebookItem) {\n    if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n      notebookItem.content = angular.fromJson(notebookItem.content);\n    }\n    let workgroupId = notebookItem.workgroupId;\n    this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n    this.groupNotebookItems();\n    this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId], notebookItem: notebookItem});\n    return notebookItem;\n  }\n\n  saveNotebookToggleEvent(isOpen, currentNode) {\n    let nodeId = null, componentId = null, componentType = null, category = \"Notebook\";\n    let eventData = {\n      curentNodeId: currentNode == null ? null : currentNode.id\n    };\n    let event = isOpen ? \"notebookOpened\" : \"notebookClosed\";\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  };\n}\n\nNotebookService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService'\n];\n\nexport default NotebookService;\n"]}