{"version":3,"sources":["notebookService.es6"],"names":["NotebookService","$http","$q","$rootScope","ConfigService","ProjectService","StudentAssetService","StudentDataService","config","enabled","label","icon","enableAddNew","addIcon","itemTypes","note","requireTextOnEveryNote","enableLink","enableClipping","enableStudentUploads","type","singular","plural","link","color","question","report","notes","reports","notebookConfig","project","notebook","angular","merge","ev","itemId","$broadcast","file","itemToDelete","items","getNotebookByWorkgroup","deletedItems","i","length","item","splice","push","workgroupId","hasOwnProperty","last","reportId","getLatestNotebookItemByLocalNotebookItemId","reportNotes","reportNote","templateReportItem","id","localNotebookItemId","content","periodId","isPreview","getWorkgroupId","notebooksByWorkgroup","allItems","groupNotebookItems","deferred","defer","resolve","promise","method","url","getStudentNotebookURL","params","then","response","allNotebookItems","data","notebookItem","studentAssetId","studentAsset","getAssetById","studentWorkId","studentWork","getStudentWorkByStudentWorkId","fromJson","e","calculateTotalUsage","notebookByWorkgroup","ni","notebookItemLocalNotebookItemId","notebookItemLocalNotebookItemIdKey","allRevisionsForThisLocalNotebookItemId","lastRevision","serverDeleteTime","notebookItemId","group","console","log","nodeId","title","groups","clientSaveTime","clientDeleteTime","reject","toJson","headers","getPeriodId","Date","parse","$","param","result","handleNewNotebookItem","isOpen","currentNode","componentId","componentType","category","eventData","curentNodeId","event","saveVLEEvent","$inject"],"mappings":"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","file":"notebookService.js","sourcesContent":["class NotebookService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService,\n      StudentAssetService, StudentDataService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n\n    // default notebook configuration\n    // TODO: i18n\n    // TODO: decide on desired defaults\n    // TODO: allow wise instance to set default enabled/disabled for each type in wise config?\n    this.config = {\n      enabled: false,\n      label: \"Notebook\",\n      icon: \"book\",\n      enableAddNew: true,\n      addIcon: \"note_add\",\n      itemTypes: {\n        note: {\n          enabled: true,\n          requireTextOnEveryNote: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"note\",\n          label: {\n            singular: \"note\",\n            plural: \"notes\",\n            link: \"Manage Notes\",\n            icon: \"note\",\n            color: \"#1565C0\"\n          }\n        },\n        question: {\n          enabled: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"question\",\n          label: {\n            singular: \"question\",\n            plural: \"questions\",\n            link: \"Manage Questions\",\n            icon: \"live_help\",\n            color: \"#F57C00\"\n          }\n        },\n        report: {\n          enabled: false,\n          enableLink: true,\n          type: \"report\",\n          label: {\n            singular: \"report\",\n            plural: \"reports\",\n            link: \"Report\",\n            icon: \"assignment\",\n            color: \"#AD1457\"\n          },\n          notes: []\n        }\n      }\n    };\n\n    this.reports = [];\n\n    this.notebookConfig = {};\n    if (this.ProjectService.project) {\n      this.notebookConfig = this.ProjectService.project.notebook;\n      // update local notebook config, preserving any defaults that aren't overriden\n      if (this.notebookConfig !== null && typeof this.notebookConfig === 'object') {\n        this.config = angular.merge(this.config, this.notebookConfig);\n      }\n    }\n  }\n\n  editItem(ev, itemId) {\n    this.$rootScope.$broadcast('editNote', {itemId: itemId, ev: ev});\n  };\n\n  addNewItem(ev, file) {\n    this.$rootScope.$broadcast('addNewNote', {ev: ev, file: file});\n  };\n\n  deleteItem(itemToDelete) {\n    const items = this.getNotebookByWorkgroup().items;\n    const deletedItems = this.getNotebookByWorkgroup().deletedItems;\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item === itemToDelete) {\n        items.splice(i, 1);\n        deletedItems.push(itemToDelete);\n      }\n    }\n  };\n\n  // looks up notebook item by local notebook item id, including deleted notes\n  getLatestNotebookItemByLocalNotebookItemId(itemId, workgroupId = null) {\n    if (this.getNotebookByWorkgroup(workgroupId).items.hasOwnProperty(itemId)) {\n      const items = this.getNotebookByWorkgroup(workgroupId).items[itemId];\n      return items.last();\n    } else if (this.getNotebookByWorkgroup(workgroupId).deletedItems.hasOwnProperty(itemId)) {\n      const items = this.getNotebookByWorkgroup(workgroupId).deletedItems[itemId];\n      return items.last();\n    } else {\n      return null;\n    }\n  }\n\n  // returns student's report item if they've done work, or the template if they haven't.\n  getLatestNotebookReportItemByReportId(reportId, workgroupId = null) {\n    return this.getLatestNotebookItemByLocalNotebookItemId(reportId, workgroupId);\n  }\n\n  // returns the authored report item\n  getTemplateReportItemByReportId(reportId) {\n    const reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId == reportId) {\n        let templateReportItem = {\n          id: null,\n          type: \"report\",\n          localNotebookItemId: reportId,\n          content: reportNote\n        };\n        return templateReportItem;\n      }\n    }\n    return null;\n  }\n\n  calculateTotalUsage() {\n    // get the total size\n    /*\n    let totalSizeSoFar = 0;\n    for (let i = 0; i < this.getNotebookByWorkgroup().items.length; i++) {\n        const notebookItem = this.getNotebookByWorkgroup().items[i];\n        if (notebookItem.studentAsset != null) {\n            const notebookItemSize = notebookItem.studentAsset.fileSize;\n            totalSizeSoFar += notebookItemSize;\n        }\n    }\n    this.getNotebookByWorkgroup().totalSize = totalSizeSoFar;\n    this.getNotebookByWorkgroup().totalSizeMax = this.ConfigService.getStudentMaxTotalAssetsSize();\n    this.getNotebookByWorkgroup().usagePercentage = this.notebook.totalSize / this.notebook.totalSizeMax * 100;\n    */\n  };\n\n  getNotebookConfig() {\n    return this.config;\n  };\n\n  /**\n   * Returns the report content for the specified reportId, or null if not exists.\n   * @param reportId\n   */\n  getReportNoteContentByReportId(reportId) {\n    const reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let reportNote of reportNotes) {\n      if (reportNote.reportId === reportId) {\n        return reportNote;\n      }\n    }\n    return null;\n  }\n\n  isNotebookEnabled() {\n    return this.config.enabled;\n  };\n\n  retrieveNotebookItems(workgroupId = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project, initialize dummy student data\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      this.notebooksByWorkgroup = {};\n      this.notebooksByWorkgroup[workgroupId] = {};\n      this.notebooksByWorkgroup[workgroupId].allItems = [];\n      this.notebooksByWorkgroup[workgroupId].items = [];\n      this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      this.groupNotebookItems();\n      // if we're in preview, don't make any request to the server but pretend we did\n      const deferred = this.$q.defer();\n      deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n      return deferred.promise;\n    } else {\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL(),\n        params : {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      }\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        this.notebooksByWorkgroup = {};\n        const allNotebookItems = response.data;\n        for (let notebookItem of allNotebookItems) {\n          try {\n            if (notebookItem.studentAssetId != null) {\n              // if this notebook item is a StudentAsset item, add the association here\n              notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n            } else if (notebookItem.studentWorkId != null) {\n              // if this notebook item is a StudentWork item, add the association here\n              notebookItem.studentWork = this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n            } else if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n              notebookItem.content = angular.fromJson(notebookItem.content);\n            }\n            const workgroupId = notebookItem.workgroupId;\n            if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n              // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n              this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n            } else {\n              // otherwise, we'll create a new notebook field and add the item to the array\n              this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n            }\n          } catch (e) {\n            // keep going, ignore this error\n          }\n        }\n        this.groupNotebookItems(); // group notebook items based on item.localNotebookItemId\n        this.calculateTotalUsage();\n\n        return this.notebooksByWorkgroup;\n      });\n    }\n  };\n\n  /**\n   * Groups the notebook items together in to a map-like structure inside this.notebook.items.\n   * {\n   *    \"abc123\": [{localNotebookItemId:\"abc123\", \"text\":\"first revision\"}, {localNotebookItemId:\"abc123\", \"text\":\"second revision\"}],\n   *    \"def456\": [{localNotebookItemId:\"def456\", \"text\":\"hello\"}, {localNotebookItemId:\"def456\", \"text\":\"hello my friend\"}]\n   * }\n   */\n  groupNotebookItems() {\n    for (let workgroupId in this.notebooksByWorkgroup) {\n      if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n        const notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n        notebookByWorkgroup.items = {};\n        notebookByWorkgroup.deletedItems = {};  // reset deleted items\n        for (let ni = 0; ni < notebookByWorkgroup.allItems.length; ni++) {\n          const notebookItem = notebookByWorkgroup.allItems[ni];\n          const notebookItemLocalNotebookItemId = notebookItem.localNotebookItemId;\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemId)) {\n            // if this was already added before, we'll append this notebook item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId].push(notebookItem);\n          } else {\n            // otherwise, we'll create a new field and add the item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId] = [notebookItem];\n          }\n        }\n        // now go through the items and look at the last revision of each item. If it's deleted, then move the entire item array to deletedItems\n        for (let notebookItemLocalNotebookItemIdKey in notebookByWorkgroup.items) {\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemIdKey)) {\n            // get the last note revision\n            const allRevisionsForThisLocalNotebookItemId = notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n            if (allRevisionsForThisLocalNotebookItemId != null) {\n              const lastRevision = allRevisionsForThisLocalNotebookItemId[allRevisionsForThisLocalNotebookItemId.length - 1];\n              if (lastRevision != null && lastRevision.serverDeleteTime != null) {\n                // the last revision for this not deleted, so move the entire note (with all its revisions) to deletedItems\n                notebookByWorkgroup.deletedItems[notebookItemLocalNotebookItemIdKey] = allRevisionsForThisLocalNotebookItemId;\n                delete notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];  // then remove it from the items array\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the notebook item with the specified notebook item id.\n   */\n  getNotebookItemByNotebookItemId(notebookItemId, workgroupId = null) {\n    const notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    if (notebookByWorkgroup != null) {\n      const allNotebookItems = notebookByWorkgroup.allItems;\n      for (let notebookItem of allNotebookItems) {\n        if (notebookItem.id === notebookItemId) {\n          return notebookItem;\n        }\n      }\n    }\n  }\n\n  getNotebookByWorkgroup(workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n    if (notebookByWorkgroup == null) {\n      notebookByWorkgroup = {\n        allItems: [],\n        items: {},\n        deletedItems: {}\n      }\n    }\n    return notebookByWorkgroup;\n  }\n\n  retrievePublicNotebookItems(group = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // // we are previewing the project, initialize dummy student data\n      // const workgroupId = this.ConfigService.getWorkgroupId();\n      // this.notebooksByWorkgroup = {};\n      // this.notebooksByWorkgroup[workgroupId] = {};\n      // this.notebooksByWorkgroup[workgroupId].allItems = [];\n      // this.notebooksByWorkgroup[workgroupId].items = [];\n      // this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      // this.groupNotebookItems();\n      // // if we're in preview, don't make any request to the server but pretend we did\n      // const deferred = this.$q.defer();\n      // deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n      // return deferred.promise;\n    } else {\n\n      const config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL() + `/group/${group}`,\n        params : {\n\n        }\n      };\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        console.log(response);\n        // this.notebooksByWorkgroup = {};\n        // const allNotebookItems = response.data;\n        // for (let notebookItem of allNotebookItems) {\n        //   try {\n        //     if (notebookItem.studentAssetId != null) {\n        //       // if this notebook item is a StudentAsset item, add the association here\n        //       notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n        //     } else if (notebookItem.studentWorkId != null) {\n        //       // if this notebook item is a StudentWork item, add the association here\n        //       notebookItem.studentWork = this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n        //     } else if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n        //       notebookItem.content = angular.fromJson(notebookItem.content);\n        //     }\n        //     const workgroupId = notebookItem.workgroupId;\n        //     if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n        //       // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n        //       this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n        //     } else {\n        //       // otherwise, we'll create a new notebook field and add the item to the array\n        //       this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n        //     }\n        //   } catch (e) {\n        //     // keep going, ignore this error\n        //   }\n        // }\n        // this.groupNotebookItems(); // group notebook items based on item.localNotebookItemId\n        // this.calculateTotalUsage();\n        //\n        // return this.notebooksByWorkgroup;\n      });\n    }\n  }\n\n  saveNotebookItem(notebookItemId, nodeId, localNotebookItemId, type, title, content, groups = [],\n      clientSaveTime = null, clientDeleteTime = null) {\n    if (this.ConfigService.isPreview()) {\n      return this.$q((resolve, reject) => {\n        let notebookItem = {\n          content: content,\n          localNotebookItemId: localNotebookItemId,\n          nodeId: nodeId,\n          notebookItemId: notebookItemId,\n          title: title,\n          type: type,\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          groups: angular.toJson(groups),\n          clientSaveTime: clientSaveTime,\n          clientDeleteTime: clientDeleteTime\n        };\n        if (clientDeleteTime != null) {\n          // preview user wants to delete this note, so mock the server deletion by setting the server delete time\n          notebookItem.serverDeleteTime = clientDeleteTime;\n        } else {\n          notebookItem.serverDeleteTime = null;\n        }\n        // add/update notebook\n        let workgroupId = notebookItem.workgroupId;\n        if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n          // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n          this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n        } else {\n          // otherwise, we'll create a new notebook field and add the item to the array\n          this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n        }\n\n        this.groupNotebookItems();\n        this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n        resolve();\n      });\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL(),\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        periodId: this.ConfigService.getPeriodId(),\n        notebookItemId: notebookItemId,\n        localNotebookItemId: localNotebookItemId,\n        nodeId: nodeId,\n        type: type,\n        title: title,\n        content: angular.toJson(content),\n        groups: angular.toJson(groups),\n        clientSaveTime: Date.parse(new Date()),\n        clientDeleteTime: clientDeleteTime\n      };\n      if (params.clientSaveTime == null) {\n        params.clientSaveTime = Date.parse(new Date());\n      }\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        if (notebookItem != null) {\n          if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n            notebookItem.content = angular.fromJson(notebookItem.content);\n          }\n          // add/update notebook\n          let workgroupId = notebookItem.workgroupId;\n          if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n            // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n            this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n          } else {\n            // otherwise, we'll create a new notebook field and add the item to the array\n            this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n          }\n\n          this.groupNotebookItems();\n          this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n        }\n        return result.data;\n      });\n    }\n  };\n\n  addNotebookItemToGroup(notebookItemId, group) {\n    if (this.ConfigService.isPreview()) {\n\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        notebookItemId: notebookItemId,\n        clientSaveTime: Date.parse(new Date())\n      };\n      if (params.clientSaveTime == null) {\n        params.clientSaveTime = Date.parse(new Date());\n      }\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  removeNotebookItemFromGroup(notebookItemId, group) {\n    if (this.ConfigService.isPreview()) {\n\n    } else {\n      let config = {\n        method: \"DELETE\",\n        url: this.ConfigService.getStudentNotebookURL() + '/group/' + group,\n        params : {\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          notebookItemId: notebookItemId,\n          clientSaveTime: Date.parse(new Date())\n        }\n      };\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        return this.handleNewNotebookItem(notebookItem);\n      });\n    }\n  }\n\n  handleNewNotebookItem(notebookItem) {\n    if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n      notebookItem.content = angular.fromJson(notebookItem.content);\n    }\n    let workgroupId = notebookItem.workgroupId;\n    this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n    this.groupNotebookItems();\n    this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n    return notebookItem;\n  }\n\n  saveNotebookToggleEvent(isOpen, currentNode) {\n    let nodeId = null, componentId = null, componentType = null, category = \"Notebook\";\n    let eventData = {\n      curentNodeId: currentNode == null ? null : currentNode.id\n    };\n    let event = isOpen ? \"notebookOpened\" : \"notebookClosed\";\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  };\n}\n\nNotebookService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService'\n];\n\nexport default NotebookService;\n"]}