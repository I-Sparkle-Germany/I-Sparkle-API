{"version":3,"sources":["notebookService.es6"],"names":["NotebookService","$http","$q","$rootScope","ConfigService","ProjectService","StudentAssetService","StudentDataService","config","enabled","label","icon","enableAddNew","addIcon","itemTypes","note","requireTextOnEveryNote","enableLink","enableClipping","enableStudentUploads","type","singular","plural","link","color","question","report","notes","reports","notebookConfig","project","notebook","angular","merge","ev","itemId","$broadcast","file","itemToDelete","items","getNotebookByWorkgroup","deletedItems","i","length","item","splice","push","workgroupId","hasOwnProperty","last","reportId","getLatestNotebookItemByLocalNotebookItemId","templateReportItem","reportNotes","reportNote","id","localNotebookItemId","content","result","periodId","isPreview","getWorkgroupId","notebooksByWorkgroup","allItems","groupNotebookItems","deferred","defer","resolve","promise","method","url","getStudentNotebookURL","params","then","response","allNotebookItems","data","n","notebookItem","studentAssetId","studentAsset","getAssetById","studentWorkId","studentWork","getStudentWorkByStudentWorkId","fromJson","e","calculateTotalUsage","notebookByWorkgroup","ni","notebookItemLocalNotebookItemId","notebookItemLocalNotebookItemIdKey","allRevisionsForThisLocalNotebookItemId","lastRevision","serverDeleteTime","notebookItemId","a","nodeId","title","clientSaveTime","clientDeleteTime","reject","headers","getPeriodId","toJson","Date","parse","$","param","isOpen","currentNode","componentId","componentType","category","eventData","curentNodeId","event","saveVLEEvent","$inject"],"mappings":";;;;;;;;;;;;IAAMA,e;AACJ,2BAAYC,KAAZ,EACYC,EADZ,EAEYC,UAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,mBALZ,EAMYC,kBANZ,EAMgC;AAAA;;AAE9B,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA;AACA;AACA;AACA;AACA,SAAKC,MAAL,GAAc;AACZC,eAAS,KADG;AAEZC,aAAO,UAFK;AAGZC,YAAM,MAHM;AAIZC,oBAAc,IAJF;AAKZC,eAAS,UALG;AAMZC,iBAAW;AACTC,cAAM;AACJN,mBAAS,IADL;AAEJO,kCAAwB,KAFpB;AAGJC,sBAAY,IAHR;AAIJC,0BAAgB,IAJZ;AAKJC,gCAAsB,IALlB;AAMJC,gBAAM,MANF;AAOJV,iBAAO;AACLW,sBAAU,MADL;AAELC,oBAAQ,OAFH;AAGLC,kBAAM,cAHD;AAILZ,kBAAM,MAJD;AAKLa,mBAAO;AALF;AAPH,SADG;AAgBTC,kBAAU;AACRhB,mBAAS,KADD;AAERQ,sBAAY,IAFJ;AAGRC,0BAAgB,IAHR;AAIRC,gCAAsB,IAJd;AAKRC,gBAAM,UALE;AAMRV,iBAAO;AACLW,sBAAU,UADL;AAELC,oBAAQ,WAFH;AAGLC,kBAAM,kBAHD;AAILZ,kBAAM,WAJD;AAKLa,mBAAO;AALF;AANC,SAhBD;AA8BTE,gBAAQ;AACNjB,mBAAS,KADH;AAENQ,sBAAY,IAFN;AAGNG,gBAAM,QAHA;AAINV,iBAAO;AACLW,sBAAU,QADL;AAELC,oBAAQ,SAFH;AAGLC,kBAAM,QAHD;AAILZ,kBAAM,YAJD;AAKLa,mBAAO;AALF,WAJD;AAWNG,iBAAO;AAXD;AA9BC;AANC,KAAd;;AAoDA,SAAKC,OAAL,GAAe,EAAf;;AAEA,SAAKC,cAAL,GAAsB,EAAtB;AACA,QAAI,KAAKxB,cAAL,CAAoByB,OAAxB,EAAiC;AAC/B;AACA,WAAKD,cAAL,GAAsB,KAAKxB,cAAL,CAAoByB,OAApB,CAA4BC,QAAlD;AACA;AACA,UAAI,KAAKF,cAAL,KAAwB,IAAxB,IAAgC,QAAO,KAAKA,cAAZ,MAA+B,QAAnE,EAA6E;AAC3E,aAAKrB,MAAL,GAAcwB,QAAQC,KAAR,CAAc,KAAKzB,MAAnB,EAA2B,KAAKqB,cAAhC,CAAd;AACD;AACF;AACF;;;;6BAEQK,E,EAAIC,M,EAAQ;AACnB;AACA,WAAKhC,UAAL,CAAgBiC,UAAhB,CAA2B,UAA3B,EAAuC,EAACD,QAAQA,MAAT,EAAiBD,IAAIA,EAArB,EAAvC;AACD;;;+BAEUA,E,EAAIG,I,EAAM;AACnB;AACA,WAAKlC,UAAL,CAAgBiC,UAAhB,CAA2B,YAA3B,EAAyC,EAACF,IAAIA,EAAL,EAASG,MAAMA,IAAf,EAAzC;AACD;;;+BAEUC,Y,EAAc;AACvB,UAAIC,QAAQ,KAAKC,sBAAL,GAA8BD,KAA1C;AACA,UAAIE,eAAe,KAAKD,sBAAL,GAA8BC,YAAjD;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACrC,YAAIE,OAAOL,MAAMG,CAAN,CAAX;AACA,YAAIE,SAASN,YAAb,EAA2B;AACzBC,gBAAMM,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACAD,uBAAaK,IAAb,CAAkBR,YAAlB;AACD;AACF;AACF;;;;;AAED;+DAC2CH,M,EAA4B;AAAA,UAApBY,WAAoB,uEAAN,IAAM;;AACrE,UAAI,KAAKP,sBAAL,CAA4BO,WAA5B,EAAyCR,KAAzC,CAA+CS,cAA/C,CAA8Db,MAA9D,CAAJ,EAA2E;AACzE,YAAII,QAAQ,KAAKC,sBAAL,CAA4BO,WAA5B,EAAyCR,KAAzC,CAA+CJ,MAA/C,CAAZ;AACA,eAAOI,MAAMU,IAAN,EAAP;AACD,OAHD,MAGO,IAAI,KAAKT,sBAAL,CAA4BO,WAA5B,EAAyCN,YAAzC,CAAsDO,cAAtD,CAAqEb,MAArE,CAAJ,EAAkF;AACvF,YAAII,SAAQ,KAAKC,sBAAL,CAA4BO,WAA5B,EAAyCN,YAAzC,CAAsDN,MAAtD,CAAZ;AACA,eAAOI,OAAMU,IAAN,EAAP;AACD,OAHM,MAGA;AACL,eAAO,IAAP;AACD;AACF;;AAED;;;;0DACsCC,Q,EAA8B;AAAA,UAApBH,WAAoB,uEAAN,IAAM;;AAClE,aAAO,KAAKI,0CAAL,CAAgDD,QAAhD,EAA0DH,WAA1D,CAAP;AACD;;AAED;;;;oDACgCG,Q,EAAU;AACxC,UAAIE,qBAAqB,IAAzB;AACA,UAAIC,cAAc,KAAKxB,cAAL,CAAoBf,SAApB,CAA8BY,MAA9B,CAAqCC,KAAvD;AACA,WAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIW,YAAYV,MAAhC,EAAwCD,GAAxC,EAA6C;AAC3C,YAAIY,aAAaD,YAAYX,CAAZ,CAAjB;AACA,YAAIY,WAAWJ,QAAX,IAAuBA,QAA3B,EAAqC;AACnCE,+BAAqB;AACnBG,gBAAI,IADe;AAEnBnC,kBAAM,QAFa;AAGnBoC,iCAAqBN,QAHF;AAInBO,qBAASH;AAJU,WAArB;AAMA;AACD;AACF;AACD,aAAOF,kBAAP;AACD;;;0CAEqB;AACpB;AACA;;;;;;;;;;;;;AAaD;;;wCAEmB;AAClB,aAAO,KAAK5C,MAAZ;AACD;;;;;AAED;;;;mDAI+B0C,Q,EAAU;AACvC,UAAIQ,SAAS,IAAb;AACA,UAAIL,cAAc,KAAKxB,cAAL,CAAoBf,SAApB,CAA8BY,MAA9B,CAAqCC,KAAvD;AACA,WAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIW,YAAYV,MAAhC,EAAwCD,GAAxC,EAA6C;AAC3C,YAAIY,aAAaD,YAAYX,CAAZ,CAAjB;AACA,YAAIY,WAAWJ,QAAX,KAAwBA,QAA5B,EAAsC;AACpCQ,mBAASJ,UAAT;AACA;AACD;AACF;AACD,aAAOI,MAAP;AACD;;;wCAEmB;AAClB,aAAO,KAAKlD,MAAL,CAAYC,OAAnB;AACD;;;4CAE0D;AAAA;;AAAA,UAArCsC,WAAqC,uEAAvB,IAAuB;AAAA,UAAjBY,QAAiB,uEAAN,IAAM;;AACzD,UAAI,KAAKvD,aAAL,CAAmBwD,SAAnB,EAAJ,EAAoC;AAClC;AACA,YAAIb,eAAc,KAAK3C,aAAL,CAAmByD,cAAnB,EAAlB;AACA,aAAKC,oBAAL,GAA4B,EAA5B;AACA,aAAKA,oBAAL,CAA0Bf,YAA1B,IAAyC,EAAzC;AACA,aAAKe,oBAAL,CAA0Bf,YAA1B,EAAuCgB,QAAvC,GAAkD,EAAlD;AACA,aAAKD,oBAAL,CAA0Bf,YAA1B,EAAuCR,KAAvC,GAA+C,EAA/C;AACA,aAAKuB,oBAAL,CAA0Bf,YAA1B,EAAuCN,YAAvC,GAAsD,EAAtD;AACA,aAAKuB,kBAAL;AACA;AACA,YAAIC,WAAW,KAAK/D,EAAL,CAAQgE,KAAR,EAAf;AACAD,iBAASE,OAAT,CAAiB,KAAKL,oBAAL,CAA0Bf,YAA1B,CAAjB;AACA,eAAOkB,SAASG,OAAhB;AACD,OAbD,MAaO;AACL,YAAI5D,SAAS;AACX6D,kBAAS,KADE;AAEXC,eAAM,KAAKlE,aAAL,CAAmBmE,qBAAnB,EAFK;AAGXC,kBAAS;AAHE,SAAb;AAKA,YAAIzB,eAAe,IAAnB,EAAyB;AACvBvC,iBAAOgE,MAAP,CAAczB,WAAd,GAA4BA,WAA5B;AACD;AACD,YAAIY,YAAY,IAAhB,EAAsB;AACpBnD,iBAAOgE,MAAP,CAAcb,QAAd,GAAyBA,QAAzB;AACD;AACD,eAAO,KAAK1D,KAAL,CAAWO,MAAX,EAAmBiE,IAAnB,CAAwB,UAACC,QAAD,EAAc;AAC3C;AACA,gBAAKZ,oBAAL,GAA4B,EAA5B;AACA,cAAIa,mBAAmBD,SAASE,IAAhC;AACA,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,iBAAiBhC,MAArC,EAA6CkC,GAA7C,EAAkD;AAChD,gBAAIC,eAAeH,iBAAiBE,CAAjB,CAAnB;AACA,gBAAI;AACF,kBAAIC,aAAaC,cAAb,IAA+B,IAAnC,EAAyC;AACvC;AACAD,6BAAaE,YAAb,GAA4B,MAAK1E,mBAAL,CAAyB2E,YAAzB,CAAsCH,aAAaC,cAAnD,CAA5B;AACD,eAHD,MAGO,IAAID,aAAaI,aAAb,IAA8B,IAAlC,EAAwC;AAC7C;AACAJ,6BAAaK,WAAb,GAA2B,MAAK5E,kBAAL,CAAwB6E,6BAAxB,CAAsDN,aAAaI,aAAnE,CAA3B;AACD,eAHM,MAGA,IAAIJ,aAAa1D,IAAb,KAAsB,MAAtB,IAAgC0D,aAAa1D,IAAb,KAAsB,QAA1D,EAAoE;AACzE0D,6BAAarB,OAAb,GAAuBzB,QAAQqD,QAAR,CAAiBP,aAAarB,OAA9B,CAAvB;AACD;AACD,kBAAIV,gBAAc+B,aAAa/B,WAA/B;AACA,kBAAI,MAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,aAAzC,CAAJ,EAA2D;AACzD;AACA,sBAAKe,oBAAL,CAA0Bf,aAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACD,eAHD,MAGO;AACL;AACA,sBAAKhB,oBAAL,CAA0Bf,aAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACD;AACF,aAlBD,CAkBE,OAAOQ,CAAP,EAAU;AACV;AACD;AACF;AACD,gBAAKtB,kBAAL,GA5B2C,CA4BhB;AAC3B,gBAAKuB,mBAAL;;AAEA,iBAAO,MAAKzB,oBAAZ;AACD,SAhCM,CAAP;AAiCD;AACF;;;;;AAED;;;;;;;yCAOqB;AACnB,WAAK,IAAIf,WAAT,IAAwB,KAAKe,oBAA7B,EAAmD;AACjD,YAAI,KAAKA,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACzD,cAAIyC,sBAAsB,KAAK1B,oBAAL,CAA0Bf,WAA1B,CAA1B;AACAyC,8BAAoBjD,KAApB,GAA4B,EAA5B;AACAiD,8BAAoB/C,YAApB,GAAmC,EAAnC,CAHyD,CAGjB;AACxC,eAAK,IAAIgD,KAAK,CAAd,EAAiBA,KAAKD,oBAAoBzB,QAApB,CAA6BpB,MAAnD,EAA2D8C,IAA3D,EAAiE;AAC/D,gBAAIX,eAAeU,oBAAoBzB,QAApB,CAA6B0B,EAA7B,CAAnB;AACA,gBAAIC,kCAAkCZ,aAAatB,mBAAnD;AACA,gBAAIgC,oBAAoBjD,KAApB,CAA0BS,cAA1B,CAAyC0C,+BAAzC,CAAJ,EAA+E;AAC7E;AACAF,kCAAoBjD,KAApB,CAA0BmD,+BAA1B,EAA2D5C,IAA3D,CAAgEgC,YAAhE;AACD,aAHD,MAGO;AACL;AACAU,kCAAoBjD,KAApB,CAA0BmD,+BAA1B,IAA6D,CAACZ,YAAD,CAA7D;AACD;AACF;AACD;AACA,eAAK,IAAIa,kCAAT,IAA+CH,oBAAoBjD,KAAnE,EAA0E;AACxE,gBAAIiD,oBAAoBjD,KAApB,CAA0BS,cAA1B,CAAyC2C,kCAAzC,CAAJ,EAAkF;AAChF;AACA,kBAAIC,yCAAyCJ,oBAAoBjD,KAApB,CAA0BoD,kCAA1B,CAA7C;AACA,kBAAIC,0CAA0C,IAA9C,EAAoD;AAClD,oBAAIC,eAAeD,uCAAuCA,uCAAuCjD,MAAvC,GAAgD,CAAvF,CAAnB;AACA,oBAAIkD,gBAAgB,IAAhB,IAAwBA,aAAaC,gBAAb,IAAiC,IAA7D,EAAmE;AACjE;AACAN,sCAAoB/C,YAApB,CAAiCkD,kCAAjC,IAAuEC,sCAAvE;AACA,yBAAOJ,oBAAoBjD,KAApB,CAA0BoD,kCAA1B,CAAP,CAHiE,CAGM;AACxE;AACF;AACF;AACF;AACF;AACF;AACF;;AAED;;;;;;oDAGgCI,c,EAAoC;AAAA,UAApBhD,WAAoB,uEAAN,IAAM;;AAClE,UAAIyC,sBAAsB,KAAKhD,sBAAL,CAA4BO,WAA5B,CAA1B;AACA,UAAIyC,uBAAuB,IAA3B,EAAiC;AAC/B,YAAIb,mBAAmBa,oBAAoBzB,QAA3C;AACA,aAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAIrB,iBAAiBhC,MAArC,EAA6CqD,GAA7C,EAAkD;AAChD,cAAIlB,eAAeH,iBAAiBqB,CAAjB,CAAnB;AACA,cAAIlB,aAAavB,EAAb,KAAoBwC,cAAxB,EAAwC;AACtC,mBAAOjB,YAAP;AACD;AACF;AACF;AACF;;;6CAE0C;AAAA,UAApB/B,WAAoB,uEAAN,IAAM;;AACzC,UAAIA,eAAe,IAAnB,EAAyB;AACvBA,sBAAc,KAAK3C,aAAL,CAAmByD,cAAnB,EAAd;AACD;AACD,UAAI2B,sBAAsB,KAAK1B,oBAAL,CAA0Bf,WAA1B,CAA1B;AACA,UAAIyC,uBAAuB,IAA3B,EAAiC;AAC/BA,8BAAsB;AACpBzB,oBAAU,EADU;AAEpBxB,iBAAO,EAFa;AAGpBE,wBAAc;AAHM,SAAtB;AAKD;AACD,aAAO+C,mBAAP;AACD;;;qCAEgBO,c,EAAgBE,M,EAAQzC,mB,EAAqBpC,I,EAAM8E,K,EAAOzC,O,EAAyD;AAAA;;AAAA,UAAhD0C,cAAgD,uEAA/B,IAA+B;AAAA,UAAzBC,gBAAyB,uEAAN,IAAM;;AAClI,UAAI,KAAKhG,aAAL,CAAmBwD,SAAnB,EAAJ,EAAoC;AAClC,eAAO,KAAK1D,EAAL,CAAQ,UAACiE,OAAD,EAAUkC,MAAV,EAAqB;AAClC,cAAIvB,eAAe;AACjBrB,qBAASA,OADQ;AAEjBD,iCAAqBA,mBAFJ;AAGjByC,oBAAQA,MAHS;AAIjBF,4BAAgBA,cAJC;AAKjBG,mBAAOA,KALU;AAMjB9E,kBAAMA,IANW;AAOjB2B,yBAAa,OAAK3C,aAAL,CAAmByD,cAAnB,EAPI;AAQjBsC,4BAAgBA,cARC;AASjBC,8BAAkBA;AATD,WAAnB;AAWA,cAAIA,oBAAoB,IAAxB,EAA8B;AAC5B;AACAtB,yBAAagB,gBAAb,GAAgCM,gBAAhC;AACD,WAHD,MAGO;AACLtB,yBAAagB,gBAAb,GAAgC,IAAhC;AACD;AACD;AACA,cAAI/C,cAAc+B,aAAa/B,WAA/B;AACA,cAAI,OAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACzD;AACA,mBAAKe,oBAAL,CAA0Bf,WAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACD,WAHD,MAGO;AACL;AACA,mBAAKhB,oBAAL,CAA0Bf,WAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACD;;AAED,iBAAKd,kBAAL;AACA,iBAAKA,kBAAL;AACA,iBAAK7D,UAAL,CAAgBiC,UAAhB,CAA2B,iBAA3B,EAA8C,EAACL,UAAU,OAAK+B,oBAAL,CAA0Bf,WAA1B,CAAX,EAA9C;AACAoB;AACD,SAhCM,CAAP;AAiCD,OAlCD,MAkCO;AACL,YAAI3D,SAAS;AACX6D,kBAAQ,MADG;AAEXC,eAAK,KAAKlE,aAAL,CAAmBmE,qBAAnB,EAFM;AAGX+B,mBAAS,EAAC,gBAAgB,mCAAjB;AAHE,SAAb;AAKA,YAAI9B,SAAS;AACXzB,uBAAa,KAAK3C,aAAL,CAAmByD,cAAnB,EADF;AAEXF,oBAAU,KAAKvD,aAAL,CAAmBmG,WAAnB,EAFC;AAGXR,0BAAgBA,cAHL;AAIXvC,+BAAqBA,mBAJV;AAKXyC,kBAAQA,MALG;AAMX7E,gBAAMA,IANK;AAOX8E,iBAAOA,KAPI;AAQXzC,mBAASzB,QAAQwE,MAAR,CAAe/C,OAAf,CARE;AASX0C,0BAAgBM,KAAKC,KAAL,CAAW,IAAID,IAAJ,EAAX,CATL;AAUXL,4BAAkBA;AAVP,SAAb;AAYA,YAAI5B,OAAO2B,cAAP,IAAyB,IAA7B,EAAmC;AACjC3B,iBAAO2B,cAAP,GAAwBM,KAAKC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAAxB;AACD;AACDjG,eAAOoE,IAAP,GAAc+B,EAAEC,KAAF,CAAQpC,MAAR,CAAd;;AAEA,eAAO,KAAKvE,KAAL,CAAWO,MAAX,EAAmBiE,IAAnB,CAAwB,UAACf,MAAD,EAAY;AACzC,cAAIoB,eAAepB,OAAOkB,IAA1B;AACA,cAAIE,gBAAgB,IAApB,EAA0B;AACxB,gBAAIA,aAAa1D,IAAb,KAAsB,MAAtB,IAAgC0D,aAAa1D,IAAb,KAAsB,QAA1D,EAAoE;AAClE0D,2BAAarB,OAAb,GAAuBzB,QAAQqD,QAAR,CAAiBP,aAAarB,OAA9B,CAAvB;AACD;AACD;AACA,gBAAIV,cAAc+B,aAAa/B,WAA/B;AACA,gBAAI,OAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACzD;AACA,qBAAKe,oBAAL,CAA0Bf,WAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACD,aAHD,MAGO;AACL;AACA,qBAAKhB,oBAAL,CAA0Bf,WAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACD;;AAED,mBAAKd,kBAAL;;AAEA,mBAAK7D,UAAL,CAAgBiC,UAAhB,CAA2B,iBAA3B,EAA8C,EAACL,UAAU,OAAK+B,oBAAL,CAA0Bf,WAA1B,CAAX,EAA9C;AACD;AACD,iBAAOW,OAAOkB,IAAd;AACD,SArBM,CAAP;AAsBD;AACF;;;4CAEuBiC,M,EAAQC,W,EAAa;AAC3C,UAAIb,SAAS,IAAb;AAAA,UAAmBc,cAAc,IAAjC;AAAA,UAAuCC,gBAAgB,IAAvD;AAAA,UAA6DC,WAAW,UAAxE;AACA,UAAIC,YAAY;AACdC,sBAAcL,eAAe,IAAf,GAAsB,IAAtB,GAA6BA,YAAYvD;AADzC,OAAhB;AAGA,UAAI6D,QAAQP,SAAS,gBAAT,GAA4B,gBAAxC;;AAEA;AACA,WAAKtG,kBAAL,CAAwB8G,YAAxB,CAAqCpB,MAArC,EAA6Cc,WAA7C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFG,KAAnF,EAA0FF,SAA1F;AACD;;;;;;AAGHlH,gBAAgBsH,OAAhB,GAA0B,CACxB,OADwB,EAExB,IAFwB,EAGxB,YAHwB,EAIxB,eAJwB,EAKxB,gBALwB,EAMxB,qBANwB,EAOxB,oBAPwB,CAA1B;;kBAUetH,e","file":"notebookService.js","sourcesContent":["class NotebookService {\n  constructor($http,\n              $q,\n              $rootScope,\n              ConfigService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService) {\n\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n\n    // default notebook configuration\n    // TODO: i18n\n    // TODO: decide on desired defaults\n    // TODO: allow wise instance to set default enabled/disabled for each type in wise config?\n    this.config = {\n      enabled: false,\n      label: \"Notebook\",\n      icon: \"book\",\n      enableAddNew: true,\n      addIcon: \"note_add\",\n      itemTypes: {\n        note: {\n          enabled: true,\n          requireTextOnEveryNote: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"note\",\n          label: {\n            singular: \"note\",\n            plural: \"notes\",\n            link: \"Manage Notes\",\n            icon: \"note\",\n            color: \"#1565C0\"\n          }\n        },\n        question: {\n          enabled: false,\n          enableLink: true,\n          enableClipping: true,\n          enableStudentUploads: true,\n          type: \"question\",\n          label: {\n            singular: \"question\",\n            plural: \"questions\",\n            link: \"Manage Questions\",\n            icon: \"live_help\",\n            color: \"#F57C00\"\n          }\n        },\n        report: {\n          enabled: false,\n          enableLink: true,\n          type: \"report\",\n          label: {\n            singular: \"report\",\n            plural: \"reports\",\n            link: \"Report\",\n            icon: \"assignment\",\n            color: \"#AD1457\"\n          },\n          notes: []\n        }\n      }\n    };\n\n    this.reports = [];\n\n    this.notebookConfig = {};\n    if (this.ProjectService.project) {\n      // get notebook config from project\n      this.notebookConfig = this.ProjectService.project.notebook;\n      // update local notebook config, preserving any defaults that aren't overriden\n      if (this.notebookConfig !== null && typeof this.notebookConfig === 'object') {\n        this.config = angular.merge(this.config, this.notebookConfig);\n      }\n    }\n  }\n\n  editItem(ev, itemId) {\n    // broadcast edit notebook item event\n    this.$rootScope.$broadcast('editNote', {itemId: itemId, ev: ev});\n  };\n\n  addNewItem(ev, file) {\n    // broadcast create new notebook item event\n    this.$rootScope.$broadcast('addNewNote', {ev: ev, file: file});\n  };\n\n  deleteItem(itemToDelete) {\n    let items = this.getNotebookByWorkgroup().items;\n    let deletedItems = this.getNotebookByWorkgroup().deletedItems;\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n      if (item === itemToDelete) {\n        items.splice(i, 1);\n        deletedItems.push(itemToDelete);\n      }\n    }\n  };\n\n  // looks up notebook item by local notebook item id, including deleted notes\n  getLatestNotebookItemByLocalNotebookItemId(itemId, workgroupId = null) {\n    if (this.getNotebookByWorkgroup(workgroupId).items.hasOwnProperty(itemId)) {\n      let items = this.getNotebookByWorkgroup(workgroupId).items[itemId];\n      return items.last();\n    } else if (this.getNotebookByWorkgroup(workgroupId).deletedItems.hasOwnProperty(itemId)) {\n      let items = this.getNotebookByWorkgroup(workgroupId).deletedItems[itemId];\n      return items.last();\n    } else {\n      return null;\n    }\n  }\n\n  // returns student's report item if they've done work, or the template if they haven't.\n  getLatestNotebookReportItemByReportId(reportId, workgroupId = null) {\n    return this.getLatestNotebookItemByLocalNotebookItemId(reportId, workgroupId);\n  }\n\n  // returns the authored report item\n  getTemplateReportItemByReportId(reportId) {\n    let templateReportItem = null;\n    let reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let i = 0; i < reportNotes.length; i++) {\n      let reportNote = reportNotes[i];\n      if (reportNote.reportId == reportId) {\n        templateReportItem = {\n          id: null,\n          type: \"report\",\n          localNotebookItemId: reportId,\n          content: reportNote\n        };\n        break;\n      }\n    }\n    return templateReportItem;\n  }\n\n  calculateTotalUsage() {\n    // get the total size\n    /*\n    let totalSizeSoFar = 0;\n    for (let i = 0; i < this.getNotebookByWorkgroup().items.length; i++) {\n        let notebookItem = this.getNotebookByWorkgroup().items[i];\n        if (notebookItem.studentAsset != null) {\n            let notebookItemSize = notebookItem.studentAsset.fileSize;\n            totalSizeSoFar += notebookItemSize;\n        }\n    }\n    this.getNotebookByWorkgroup().totalSize = totalSizeSoFar;\n    this.getNotebookByWorkgroup().totalSizeMax = this.ConfigService.getStudentMaxTotalAssetsSize();\n    this.getNotebookByWorkgroup().usagePercentage = this.notebook.totalSize / this.notebook.totalSizeMax * 100;\n    */\n  };\n\n  getNotebookConfig() {\n    return this.config;\n  };\n\n  /**\n   * Returns the report content for the specified reportId, or null if not exists.\n   * @param reportId\n   */\n  getReportNoteContentByReportId(reportId) {\n    let result = null;\n    let reportNotes = this.notebookConfig.itemTypes.report.notes;\n    for (let i = 0; i < reportNotes.length; i++) {\n      let reportNote = reportNotes[i];\n      if (reportNote.reportId === reportId) {\n        result = reportNote;\n        break;\n      }\n    }\n    return result;\n  }\n\n  isNotebookEnabled() {\n    return this.config.enabled;\n  };\n\n  retrieveNotebookItems(workgroupId = null, periodId = null) {\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project, initialize dummy student data\n      let workgroupId = this.ConfigService.getWorkgroupId();\n      this.notebooksByWorkgroup = {};\n      this.notebooksByWorkgroup[workgroupId] = {};\n      this.notebooksByWorkgroup[workgroupId].allItems = [];\n      this.notebooksByWorkgroup[workgroupId].items = [];\n      this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n      this.groupNotebookItems();\n      // if we're in preview, don't make any request to the server but pretend we did\n      let deferred = this.$q.defer();\n      deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n      return deferred.promise;\n    } else {\n      let config = {\n        method : 'GET',\n        url : this.ConfigService.getStudentNotebookURL(),\n        params : {}\n      };\n      if (workgroupId != null) {\n        config.params.workgroupId = workgroupId;\n      }\n      if (periodId != null) {\n        config.params.periodId = periodId;\n      }\n      return this.$http(config).then((response) => {\n        // loop through the assets and make them into JSON object with more details\n        this.notebooksByWorkgroup = {};\n        let allNotebookItems = response.data;\n        for (let n = 0; n < allNotebookItems.length; n++) {\n          let notebookItem = allNotebookItems[n];\n          try {\n            if (notebookItem.studentAssetId != null) {\n              // if this notebook item is a StudentAsset item, add the association here\n              notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n            } else if (notebookItem.studentWorkId != null) {\n              // if this notebook item is a StudentWork item, add the association here\n              notebookItem.studentWork = this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n            } else if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n              notebookItem.content = angular.fromJson(notebookItem.content);\n            }\n            let workgroupId = notebookItem.workgroupId;\n            if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n              // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n              this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n            } else {\n              // otherwise, we'll create a new notebook field and add the item to the array\n              this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n            }\n          } catch (e) {\n            // keep going, ignore this error\n          }\n        }\n        this.groupNotebookItems(); // group notebook items based on item.localNotebookItemId\n        this.calculateTotalUsage();\n\n        return this.notebooksByWorkgroup;\n      });\n    }\n  };\n\n  /**\n   * Groups the notebook items together in to a map-like structure inside this.notebook.items.\n   * {\n     *    \"abc123\": [{localNotebookItemId:\"abc123\", \"text\":\"first revision\"}, {localNotebookItemId:\"abc123\", \"text\":\"second revision\"}],\n     *    \"def456\": [{localNotebookItemId:\"def456\", \"text\":\"hello\"}, {localNotebookItemId:\"def456\", \"text\":\"hello my friend\"}]\n     * }\n   */\n  groupNotebookItems() {\n    for (let workgroupId in this.notebooksByWorkgroup) {\n      if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n        let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n        notebookByWorkgroup.items = {};\n        notebookByWorkgroup.deletedItems = {};  // reset deleted items\n        for (let ni = 0; ni < notebookByWorkgroup.allItems.length; ni++) {\n          let notebookItem = notebookByWorkgroup.allItems[ni];\n          let notebookItemLocalNotebookItemId = notebookItem.localNotebookItemId;\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemId)) {\n            // if this was already added before, we'll append this notebook item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId].push(notebookItem);\n          } else {\n            // otherwise, we'll create a new field and add the item to the array\n            notebookByWorkgroup.items[notebookItemLocalNotebookItemId] = [notebookItem];\n          }\n        }\n        // now go through the items and look at the last revision of each item. If it's deleted, then move the entire item array to deletedItems\n        for (let notebookItemLocalNotebookItemIdKey in notebookByWorkgroup.items) {\n          if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemIdKey)) {\n            // get the last note revision\n            let allRevisionsForThisLocalNotebookItemId = notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n            if (allRevisionsForThisLocalNotebookItemId != null) {\n              let lastRevision = allRevisionsForThisLocalNotebookItemId[allRevisionsForThisLocalNotebookItemId.length - 1];\n              if (lastRevision != null && lastRevision.serverDeleteTime != null) {\n                // the last revision for this not deleted, so move the entire note (with all its revisions) to deletedItems\n                notebookByWorkgroup.deletedItems[notebookItemLocalNotebookItemIdKey] = allRevisionsForThisLocalNotebookItemId;\n                delete notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];  // then remove it from the items array\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the notebook item with the specified notebook item id.\n   */\n  getNotebookItemByNotebookItemId(notebookItemId, workgroupId = null) {\n    let notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n    if (notebookByWorkgroup != null) {\n      let allNotebookItems = notebookByWorkgroup.allItems;\n      for (let a = 0; a < allNotebookItems.length; a++) {\n        let notebookItem = allNotebookItems[a];\n        if (notebookItem.id === notebookItemId) {\n          return notebookItem;\n        }\n      }\n    }\n  }\n\n  getNotebookByWorkgroup(workgroupId = null) {\n    if (workgroupId == null) {\n      workgroupId = this.ConfigService.getWorkgroupId();\n    }\n    let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n    if (notebookByWorkgroup == null) {\n      notebookByWorkgroup = {\n        allItems: [],\n        items: {},\n        deletedItems: {}\n      }\n    }\n    return notebookByWorkgroup;\n  }\n\n  saveNotebookItem(notebookItemId, nodeId, localNotebookItemId, type, title, content, clientSaveTime = null, clientDeleteTime = null) {\n    if (this.ConfigService.isPreview()) {\n      return this.$q((resolve, reject) => {\n        let notebookItem = {\n          content: content,\n          localNotebookItemId: localNotebookItemId,\n          nodeId: nodeId,\n          notebookItemId: notebookItemId,\n          title: title,\n          type: type,\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          clientSaveTime: clientSaveTime,\n          clientDeleteTime: clientDeleteTime\n        };\n        if (clientDeleteTime != null) {\n          // preview user wants to delete this note, so mock the server deletion by setting the server delete time\n          notebookItem.serverDeleteTime = clientDeleteTime;\n        } else {\n          notebookItem.serverDeleteTime = null;\n        }\n        // add/update notebook\n        let workgroupId = notebookItem.workgroupId;\n        if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n          // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n          this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n        } else {\n          // otherwise, we'll create a new notebook field and add the item to the array\n          this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n        }\n\n        this.groupNotebookItems();\n        this.groupNotebookItems();\n        this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n        resolve();\n      });\n    } else {\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getStudentNotebookURL(),\n        headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n      };\n      let params = {\n        workgroupId: this.ConfigService.getWorkgroupId(),\n        periodId: this.ConfigService.getPeriodId(),\n        notebookItemId: notebookItemId,\n        localNotebookItemId: localNotebookItemId,\n        nodeId: nodeId,\n        type: type,\n        title: title,\n        content: angular.toJson(content),\n        clientSaveTime: Date.parse(new Date()),\n        clientDeleteTime: clientDeleteTime\n      };\n      if (params.clientSaveTime == null) {\n        params.clientSaveTime = Date.parse(new Date());\n      }\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notebookItem = result.data;\n        if (notebookItem != null) {\n          if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n            notebookItem.content = angular.fromJson(notebookItem.content);\n          }\n          // add/update notebook\n          let workgroupId = notebookItem.workgroupId;\n          if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n            // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n            this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n          } else {\n            // otherwise, we'll create a new notebook field and add the item to the array\n            this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n          }\n\n          this.groupNotebookItems();\n\n          this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n        }\n        return result.data;\n      });\n    }\n  };\n\n  saveNotebookToggleEvent(isOpen, currentNode) {\n    let nodeId = null, componentId = null, componentType = null, category = \"Notebook\";\n    let eventData = {\n      curentNodeId: currentNode == null ? null : currentNode.id\n    };\n    let event = isOpen ? \"notebookOpened\" : \"notebookClosed\";\n\n    // save notebook open/close event\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  };\n}\n\nNotebookService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService'\n];\n\nexport default NotebookService;\n"]}