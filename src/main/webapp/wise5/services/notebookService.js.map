{"version":3,"sources":["notebookService.es6"],"names":["NotebookService","$http","$q","$rootScope","ConfigService","ProjectService","StudentAssetService","StudentDataService","config","enabled","label","icon","enableAddNew","addIcon","itemTypes","note","requireTextOnEveryNote","enableLink","enableClipping","enableStudentUploads","type","singular","plural","link","color","question","report","notes","reports","notebookConfig","project","notebook","angular","merge","ev","itemId","$broadcast","file","itemToDelete","items","getNotebookByWorkgroup","deletedItems","i","length","item","splice","push","workgroupId","hasOwnProperty","last","reportId","getLatestNotebookItemByLocalNotebookItemId","templateReportItem","reportNotes","reportNote","id","localNotebookItemId","content","result","periodId","isPreview","getWorkgroupId","notebooksByWorkgroup","allItems","groupNotebookItems","deferred","defer","resolve","promise","method","url","getStudentNotebookURL","params","then","response","allNotebookItems","data","n","notebookItem","studentAssetId","studentAsset","getAssetById","studentWorkId","studentWork","getStudentWorkByStudentWorkId","fromJson","e","calculateTotalUsage","notebookByWorkgroup","ni","notebookItemLocalNotebookItemId","notebookItemLocalNotebookItemIdKey","allRevisionsForThisLocalNotebookItemId","lastRevision","serverDeleteTime","notebookItemId","a","nodeId","title","clientSaveTime","clientDeleteTime","reject","headers","getPeriodId","toJson","Date","parse","$","param","isOpen","currentNode","componentId","componentType","category","eventData","curentNodeId","event","saveVLEEvent","$inject"],"mappings":";;;;;;;;;;;;IAAMA,e;AACF,6BAAYC,KAAZ,EACYC,EADZ,EAEYC,UAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,mBALZ,EAMYC,kBANZ,EAMgC;AAAA;;AAE5B,aAAKN,KAAL,GAAaA,KAAb;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,mBAAL,GAA2BA,mBAA3B;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA;AACA;AACA;AACA;AACA,aAAKC,MAAL,GAAc;AACVC,qBAAS,KADC;AAEVC,mBAAO,UAFG;AAGVC,kBAAM,MAHI;AAIVC,0BAAc,IAJJ;AAKVC,qBAAS,UALC;AAMVC,uBAAW;AACPC,sBAAM;AACFN,6BAAS,IADP;AAEFO,4CAAwB,KAFtB;AAGFC,gCAAY,IAHV;AAIFC,oCAAgB,IAJd;AAKFC,0CAAsB,IALpB;AAMFC,0BAAM,MANJ;AAOFV,2BAAO;AACHW,kCAAU,MADP;AAEHC,gCAAQ,OAFL;AAGHC,8BAAM,cAHH;AAIHZ,8BAAM,MAJH;AAKHa,+BAAO;AALJ;AAPL,iBADC;AAgBPC,0BAAU;AACNhB,6BAAS,KADH;AAENQ,gCAAY,IAFN;AAGNC,oCAAgB,IAHV;AAINC,0CAAsB,IAJhB;AAKNC,0BAAM,UALA;AAMNV,2BAAO;AACHW,kCAAU,UADP;AAEHC,gCAAQ,WAFL;AAGHC,8BAAM,kBAHH;AAIHZ,8BAAM,WAJH;AAKHa,+BAAO;AALJ;AAND,iBAhBH;AA8BPE,wBAAQ;AACJjB,6BAAS,KADL;AAEJQ,gCAAY,IAFR;AAGJG,0BAAM,QAHF;AAIJV,2BAAO;AACHW,kCAAU,QADP;AAEHC,gCAAQ,SAFL;AAGHC,8BAAM,QAHH;AAIHZ,8BAAM,YAJH;AAKHa,+BAAO;AALJ,qBAJH;AAWJG,2BAAO;AAXH;AA9BD;AAND,SAAd;;AAoDA,aAAKC,OAAL,GAAe,EAAf;;AAEA,aAAKC,cAAL,GAAsB,EAAtB;AACA,YAAI,KAAKxB,cAAL,CAAoByB,OAAxB,EAAiC;AAC7B;AACA,iBAAKD,cAAL,GAAsB,KAAKxB,cAAL,CAAoByB,OAApB,CAA4BC,QAAlD;AACA;AACA,gBAAI,KAAKF,cAAL,KAAwB,IAAxB,IAAgC,QAAO,KAAKA,cAAZ,MAA+B,QAAnE,EAA6E;AACzE,qBAAKrB,MAAL,GAAcwB,QAAQC,KAAR,CAAc,KAAKzB,MAAnB,EAA2B,KAAKqB,cAAhC,CAAd;AACH;AACJ;AACJ;;;;iCAEQK,E,EAAIC,M,EAAQ;AACjB;AACA,iBAAKhC,UAAL,CAAgBiC,UAAhB,CAA2B,UAA3B,EAAuC,EAACD,QAAQA,MAAT,EAAiBD,IAAIA,EAArB,EAAvC;AACH;;;mCAEUA,E,EAAIG,I,EAAM;AACjB;AACA,iBAAKlC,UAAL,CAAgBiC,UAAhB,CAA2B,YAA3B,EAAyC,EAACF,IAAIA,EAAL,EAASG,MAAMA,IAAf,EAAzC;AACH;;;mCAEUC,Y,EAAc;AACrB,gBAAIC,QAAQ,KAAKC,sBAAL,GAA8BD,KAA1C;AACA,gBAAIE,eAAe,KAAKD,sBAAL,GAA8BC,YAAjD;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EAAuC;AACnC,oBAAIE,OAAOL,MAAMG,CAAN,CAAX;AACA,oBAAIE,SAASN,YAAb,EAA2B;AACvBC,0BAAMM,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACAD,iCAAaK,IAAb,CAAkBR,YAAlB;AACH;AACJ;AACJ;;;;;AAED;mEAC2CH,M,EAA4B;AAAA,gBAApBY,WAAoB,uEAAN,IAAM;;AACnE,gBAAI,KAAKP,sBAAL,CAA4BO,WAA5B,EAAyCR,KAAzC,CAA+CS,cAA/C,CAA8Db,MAA9D,CAAJ,EAA2E;AACvE,oBAAII,QAAQ,KAAKC,sBAAL,CAA4BO,WAA5B,EAAyCR,KAAzC,CAA+CJ,MAA/C,CAAZ;AACA,uBAAOI,MAAMU,IAAN,EAAP;AACH,aAHD,MAGO,IAAI,KAAKT,sBAAL,CAA4BO,WAA5B,EAAyCN,YAAzC,CAAsDO,cAAtD,CAAqEb,MAArE,CAAJ,EAAkF;AACrF,oBAAII,SAAQ,KAAKC,sBAAL,CAA4BO,WAA5B,EAAyCN,YAAzC,CAAsDN,MAAtD,CAAZ;AACA,uBAAOI,OAAMU,IAAN,EAAP;AACH,aAHM,MAGA;AACH,uBAAO,IAAP;AACH;AACJ;;AAED;;;;8DACsCC,Q,EAA8B;AAAA,gBAApBH,WAAoB,uEAAN,IAAM;;AAChE,mBAAO,KAAKI,0CAAL,CAAgDD,QAAhD,EAA0DH,WAA1D,CAAP;AACH;;AAED;;;;wDACgCG,Q,EAAU;AACtC,gBAAIE,qBAAqB,IAAzB;AACA,gBAAIC,cAAc,KAAKxB,cAAL,CAAoBf,SAApB,CAA8BY,MAA9B,CAAqCC,KAAvD;AACA,iBAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIW,YAAYV,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,oBAAIY,aAAaD,YAAYX,CAAZ,CAAjB;AACA,oBAAIY,WAAWJ,QAAX,IAAuBA,QAA3B,EAAqC;AACjCE,yCAAqB;AACjBG,4BAAI,IADa;AAEjBnC,8BAAM,QAFW;AAGjBoC,6CAAqBN,QAHJ;AAIjBO,iCAASH;AAJQ,qBAArB;AAMA;AACH;AACJ;AACD,mBAAOF,kBAAP;AACH;;;8CAEqB;AAClB;AACA;;;;;;;;;;;;;AAaH;;;4CAEmB;AAChB,mBAAO,KAAK5C,MAAZ;AACH;;;;;AAED;;;;uDAI+B0C,Q,EAAU;AACrC,gBAAIQ,SAAS,IAAb;AACA,gBAAIL,cAAc,KAAKxB,cAAL,CAAoBf,SAApB,CAA8BY,MAA9B,CAAqCC,KAAvD;AACA,iBAAK,IAAIe,IAAI,CAAb,EAAgBA,IAAIW,YAAYV,MAAhC,EAAwCD,GAAxC,EAA6C;AACzC,oBAAIY,aAAaD,YAAYX,CAAZ,CAAjB;AACA,oBAAIY,WAAWJ,QAAX,KAAwBA,QAA5B,EAAsC;AAClCQ,6BAASJ,UAAT;AACA;AACH;AACJ;AACD,mBAAOI,MAAP;AACH;;;4CAEmB;AAChB,mBAAO,KAAKlD,MAAL,CAAYC,OAAnB;AACH;;;gDAE0D;AAAA;;AAAA,gBAArCsC,WAAqC,uEAAvB,IAAuB;AAAA,gBAAjBY,QAAiB,uEAAN,IAAM;;AACvD,gBAAI,KAAKvD,aAAL,CAAmBwD,SAAnB,EAAJ,EAAoC;AAChC;AACA,oBAAIb,eAAc,KAAK3C,aAAL,CAAmByD,cAAnB,EAAlB;AACA,qBAAKC,oBAAL,GAA4B,EAA5B;AACA,qBAAKA,oBAAL,CAA0Bf,YAA1B,IAAyC,EAAzC;AACA,qBAAKe,oBAAL,CAA0Bf,YAA1B,EAAuCgB,QAAvC,GAAkD,EAAlD;AACA,qBAAKD,oBAAL,CAA0Bf,YAA1B,EAAuCR,KAAvC,GAA+C,EAA/C;AACA,qBAAKuB,oBAAL,CAA0Bf,YAA1B,EAAuCN,YAAvC,GAAsD,EAAtD;AACA,qBAAKuB,kBAAL;AACA;AACA,oBAAIC,WAAW,KAAK/D,EAAL,CAAQgE,KAAR,EAAf;AACAD,yBAASE,OAAT,CAAiB,KAAKL,oBAAL,CAA0Bf,YAA1B,CAAjB;AACA,uBAAOkB,SAASG,OAAhB;AACH,aAbD,MAaO;AACH,oBAAI5D,SAAS;AACT6D,4BAAS,KADA;AAETC,yBAAM,KAAKlE,aAAL,CAAmBmE,qBAAnB,EAFG;AAGTC,4BAAS;AAHA,iBAAb;AAKA,oBAAIzB,eAAe,IAAnB,EAAyB;AACrBvC,2BAAOgE,MAAP,CAAczB,WAAd,GAA4BA,WAA5B;AACH;AACD,oBAAIY,YAAY,IAAhB,EAAsB;AAClBnD,2BAAOgE,MAAP,CAAcb,QAAd,GAAyBA,QAAzB;AACH;AACD,uBAAO,KAAK1D,KAAL,CAAWO,MAAX,EAAmBiE,IAAnB,CAAwB,UAACC,QAAD,EAAc;AACzC;AACA,0BAAKZ,oBAAL,GAA4B,EAA5B;AACA,wBAAIa,mBAAmBD,SAASE,IAAhC;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,iBAAiBhC,MAArC,EAA6CkC,GAA7C,EAAkD;AAC9C,4BAAIC,eAAeH,iBAAiBE,CAAjB,CAAnB;AACA,4BAAI;AACA,gCAAIC,aAAaC,cAAb,IAA+B,IAAnC,EAAyC;AACrC;AACAD,6CAAaE,YAAb,GAA4B,MAAK1E,mBAAL,CAAyB2E,YAAzB,CAAsCH,aAAaC,cAAnD,CAA5B;AACH,6BAHD,MAGO,IAAID,aAAaI,aAAb,IAA8B,IAAlC,EAAwC;AAC3C;AACAJ,6CAAaK,WAAb,GAA2B,MAAK5E,kBAAL,CAAwB6E,6BAAxB,CAAsDN,aAAaI,aAAnE,CAA3B;AACH,6BAHM,MAGA,IAAIJ,aAAa1D,IAAb,KAAsB,MAAtB,IAAgC0D,aAAa1D,IAAb,KAAsB,QAA1D,EAAoE;AACvE0D,6CAAarB,OAAb,GAAuBzB,QAAQqD,QAAR,CAAiBP,aAAarB,OAA9B,CAAvB;AACH;AACD,gCAAIV,gBAAc+B,aAAa/B,WAA/B;AACA,gCAAI,MAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,aAAzC,CAAJ,EAA2D;AACvD;AACA,sCAAKe,oBAAL,CAA0Bf,aAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACH,6BAHD,MAGO;AACH;AACA,sCAAKhB,oBAAL,CAA0Bf,aAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACH;AACJ,yBAlBD,CAkBE,OAAOQ,CAAP,EAAU;AACR;AACH;AACJ;AACD,0BAAKtB,kBAAL,GA5ByC,CA4Bd;AAC3B,0BAAKuB,mBAAL;;AAEA,2BAAO,MAAKzB,oBAAZ;AACH,iBAhCM,CAAP;AAiCH;AACJ;;;;;AAED;;;;;;;6CAOqB;AACjB,iBAAK,IAAIf,WAAT,IAAwB,KAAKe,oBAA7B,EAAmD;AAC/C,oBAAI,KAAKA,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACvD,wBAAIyC,sBAAsB,KAAK1B,oBAAL,CAA0Bf,WAA1B,CAA1B;AACAyC,wCAAoBjD,KAApB,GAA4B,EAA5B;AACAiD,wCAAoB/C,YAApB,GAAmC,EAAnC,CAHuD,CAGf;AACxC,yBAAK,IAAIgD,KAAK,CAAd,EAAiBA,KAAKD,oBAAoBzB,QAApB,CAA6BpB,MAAnD,EAA2D8C,IAA3D,EAAiE;AAC7D,4BAAIX,eAAeU,oBAAoBzB,QAApB,CAA6B0B,EAA7B,CAAnB;AACA,4BAAIC,kCAAkCZ,aAAatB,mBAAnD;AACA,4BAAIgC,oBAAoBjD,KAApB,CAA0BS,cAA1B,CAAyC0C,+BAAzC,CAAJ,EAA+E;AAC3E;AACAF,gDAAoBjD,KAApB,CAA0BmD,+BAA1B,EAA2D5C,IAA3D,CAAgEgC,YAAhE;AACH,yBAHD,MAGO;AACH;AACAU,gDAAoBjD,KAApB,CAA0BmD,+BAA1B,IAA6D,CAACZ,YAAD,CAA7D;AACH;AACJ;AACD;AACA,yBAAK,IAAIa,kCAAT,IAA+CH,oBAAoBjD,KAAnE,EAA0E;AACtE,4BAAIiD,oBAAoBjD,KAApB,CAA0BS,cAA1B,CAAyC2C,kCAAzC,CAAJ,EAAkF;AAC9E;AACA,gCAAIC,yCAAyCJ,oBAAoBjD,KAApB,CAA0BoD,kCAA1B,CAA7C;AACA,gCAAIC,0CAA0C,IAA9C,EAAoD;AAChD,oCAAIC,eAAeD,uCAAuCA,uCAAuCjD,MAAvC,GAAgD,CAAvF,CAAnB;AACA,oCAAIkD,gBAAgB,IAAhB,IAAwBA,aAAaC,gBAAb,IAAiC,IAA7D,EAAmE;AAC/D;AACAN,wDAAoB/C,YAApB,CAAiCkD,kCAAjC,IAAuEC,sCAAvE;AACA,2CAAOJ,oBAAoBjD,KAApB,CAA0BoD,kCAA1B,CAAP,CAH+D,CAGQ;AAC1E;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED;;;;;;wDAGgCI,c,EAAoC;AAAA,gBAApBhD,WAAoB,uEAAN,IAAM;;AAChE,gBAAIyC,sBAAsB,KAAKhD,sBAAL,CAA4BO,WAA5B,CAA1B;AACA,gBAAIyC,uBAAuB,IAA3B,EAAiC;AAC7B,oBAAIb,mBAAmBa,oBAAoBzB,QAA3C;AACA,qBAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAIrB,iBAAiBhC,MAArC,EAA6CqD,GAA7C,EAAkD;AAC9C,wBAAIlB,eAAeH,iBAAiBqB,CAAjB,CAAnB;AACA,wBAAIlB,aAAavB,EAAb,KAAoBwC,cAAxB,EAAwC;AACpC,+BAAOjB,YAAP;AACH;AACJ;AACJ;AACJ;;;iDAE0C;AAAA,gBAApB/B,WAAoB,uEAAN,IAAM;;AACvC,gBAAIA,eAAe,IAAnB,EAAyB;AACrBA,8BAAc,KAAK3C,aAAL,CAAmByD,cAAnB,EAAd;AACH;AACD,gBAAI2B,sBAAsB,KAAK1B,oBAAL,CAA0Bf,WAA1B,CAA1B;AACA,gBAAIyC,uBAAuB,IAA3B,EAAiC;AAC7BA,sCAAsB;AAClBzB,8BAAU,EADQ;AAElBxB,2BAAO,EAFW;AAGlBE,kCAAc;AAHI,iBAAtB;AAKH;AACD,mBAAO+C,mBAAP;AACH;;;yCAEgBO,c,EAAgBE,M,EAAQzC,mB,EAAqBpC,I,EAAM8E,K,EAAOzC,O,EAAyD;AAAA;;AAAA,gBAAhD0C,cAAgD,uEAA/B,IAA+B;AAAA,gBAAzBC,gBAAyB,uEAAN,IAAM;;AAChI,gBAAI,KAAKhG,aAAL,CAAmBwD,SAAnB,EAAJ,EAAoC;AAChC,uBAAO,KAAK1D,EAAL,CAAQ,UAACiE,OAAD,EAAUkC,MAAV,EAAqB;AAChC,wBAAIvB,eAAe;AACfrB,iCAASA,OADM;AAEfD,6CAAqBA,mBAFN;AAGfyC,gCAAQA,MAHO;AAIfF,wCAAgBA,cAJD;AAKfG,+BAAOA,KALQ;AAMf9E,8BAAMA,IANS;AAOf2B,qCAAa,OAAK3C,aAAL,CAAmByD,cAAnB,EAPE;AAQfsC,wCAAgBA,cARD;AASfC,0CAAkBA;AATH,qBAAnB;AAWA,wBAAIA,oBAAoB,IAAxB,EAA8B;AAC1B;AACAtB,qCAAagB,gBAAb,GAAgCM,gBAAhC;AACH,qBAHD,MAGO;AACHtB,qCAAagB,gBAAb,GAAgC,IAAhC;AACH;AACD;AACA,wBAAI/C,cAAc+B,aAAa/B,WAA/B;AACA,wBAAI,OAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACvD;AACA,+BAAKe,oBAAL,CAA0Bf,WAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACH,qBAHD,MAGO;AACH;AACA,+BAAKhB,oBAAL,CAA0Bf,WAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACH;;AAED,2BAAKd,kBAAL;AACA,2BAAKA,kBAAL;AACA,2BAAK7D,UAAL,CAAgBiC,UAAhB,CAA2B,iBAA3B,EAA8C,EAACL,UAAU,OAAK+B,oBAAL,CAA0Bf,WAA1B,CAAX,EAA9C;AACAoB;AACH,iBAhCM,CAAP;AAiCH,aAlCD,MAkCO;AACH,oBAAI3D,SAAS;AACT6D,4BAAQ,MADC;AAETC,yBAAK,KAAKlE,aAAL,CAAmBmE,qBAAnB,EAFI;AAGT+B,6BAAS,EAAC,gBAAgB,mCAAjB;AAHA,iBAAb;AAKA,oBAAI9B,SAAS;AACTzB,iCAAa,KAAK3C,aAAL,CAAmByD,cAAnB,EADJ;AAETF,8BAAU,KAAKvD,aAAL,CAAmBmG,WAAnB,EAFD;AAGTR,oCAAgBA,cAHP;AAITvC,yCAAqBA,mBAJZ;AAKTyC,4BAAQA,MALC;AAMT7E,0BAAMA,IANG;AAOT8E,2BAAOA,KAPE;AAQTzC,6BAASzB,QAAQwE,MAAR,CAAe/C,OAAf,CARA;AAST0C,oCAAgBM,KAAKC,KAAL,CAAW,IAAID,IAAJ,EAAX,CATP;AAUTL,sCAAkBA;AAVT,iBAAb;AAYA,oBAAI5B,OAAO2B,cAAP,IAAyB,IAA7B,EAAmC;AAC/B3B,2BAAO2B,cAAP,GAAwBM,KAAKC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAAxB;AACH;AACDjG,uBAAOoE,IAAP,GAAc+B,EAAEC,KAAF,CAAQpC,MAAR,CAAd;;AAEA,uBAAO,KAAKvE,KAAL,CAAWO,MAAX,EAAmBiE,IAAnB,CAAwB,UAACf,MAAD,EAAY;AACvC,wBAAIoB,eAAepB,OAAOkB,IAA1B;AACA,wBAAIE,gBAAgB,IAApB,EAA0B;AACtB,4BAAIA,aAAa1D,IAAb,KAAsB,MAAtB,IAAgC0D,aAAa1D,IAAb,KAAsB,QAA1D,EAAoE;AAChE0D,yCAAarB,OAAb,GAAuBzB,QAAQqD,QAAR,CAAiBP,aAAarB,OAA9B,CAAvB;AACH;AACD;AACA,4BAAIV,cAAc+B,aAAa/B,WAA/B;AACA,4BAAI,OAAKe,oBAAL,CAA0Bd,cAA1B,CAAyCD,WAAzC,CAAJ,EAA2D;AACvD;AACA,mCAAKe,oBAAL,CAA0Bf,WAA1B,EAAuCgB,QAAvC,CAAgDjB,IAAhD,CAAqDgC,YAArD;AACH,yBAHD,MAGO;AACH;AACA,mCAAKhB,oBAAL,CAA0Bf,WAA1B,IAAyC,EAAEgB,UAAU,CAACe,YAAD,CAAZ,EAAzC;AACH;;AAED,+BAAKd,kBAAL;;AAEA,+BAAK7D,UAAL,CAAgBiC,UAAhB,CAA2B,iBAA3B,EAA8C,EAACL,UAAU,OAAK+B,oBAAL,CAA0Bf,WAA1B,CAAX,EAA9C;AACH;AACD,2BAAOW,OAAOkB,IAAd;AACH,iBArBM,CAAP;AAsBH;AACJ;;;gDAEuBiC,M,EAAQC,W,EAAa;AACzC,gBAAIb,SAAS,IAAb;AAAA,gBAAmBc,cAAc,IAAjC;AAAA,gBAAuCC,gBAAgB,IAAvD;AAAA,gBAA6DC,WAAW,UAAxE;AACA,gBAAIC,YAAY;AACZC,8BAAcL,eAAe,IAAf,GAAsB,IAAtB,GAA6BA,YAAYvD;AAD3C,aAAhB;AAGA,gBAAI6D,QAAQP,SAAS,gBAAT,GAA4B,gBAAxC;;AAEA;AACA,iBAAKtG,kBAAL,CAAwB8G,YAAxB,CAAqCpB,MAArC,EAA6Cc,WAA7C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFG,KAAnF,EAA0FF,SAA1F;AACH;;;;;;AAGLlH,gBAAgBsH,OAAhB,GAA0B,CACtB,OADsB,EAEtB,IAFsB,EAGtB,YAHsB,EAItB,eAJsB,EAKtB,gBALsB,EAMtB,qBANsB,EAOtB,oBAPsB,CAA1B;;kBAUetH,e","file":"notebookService.js","sourcesContent":["class NotebookService {\n    constructor($http,\n                $q,\n                $rootScope,\n                ConfigService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        // default notebook configuration\n        // TODO: i18n\n        // TODO: decide on desired defaults\n        // TODO: allow wise instance to set default enabled/disabled for each type in wise config?\n        this.config = {\n            enabled: false,\n            label: \"Notebook\",\n            icon: \"book\",\n            enableAddNew: true,\n            addIcon: \"note_add\",\n            itemTypes: {\n                note: {\n                    enabled: true,\n                    requireTextOnEveryNote: false,\n                    enableLink: true,\n                    enableClipping: true,\n                    enableStudentUploads: true,\n                    type: \"note\",\n                    label: {\n                        singular: \"note\",\n                        plural: \"notes\",\n                        link: \"Manage Notes\",\n                        icon: \"note\",\n                        color: \"#1565C0\"\n                    }\n                },\n                question: {\n                    enabled: false,\n                    enableLink: true,\n                    enableClipping: true,\n                    enableStudentUploads: true,\n                    type: \"question\",\n                    label: {\n                        singular: \"question\",\n                        plural: \"questions\",\n                        link: \"Manage Questions\",\n                        icon: \"live_help\",\n                        color: \"#F57C00\"\n                    }\n                },\n                report: {\n                    enabled: false,\n                    enableLink: true,\n                    type: \"report\",\n                    label: {\n                        singular: \"report\",\n                        plural: \"reports\",\n                        link: \"Report\",\n                        icon: \"assignment\",\n                        color: \"#AD1457\"\n                    },\n                    notes: []\n                }\n            }\n        };\n\n        this.reports = [];\n\n        this.notebookConfig = {};\n        if (this.ProjectService.project) {\n            // get notebook config from project\n            this.notebookConfig = this.ProjectService.project.notebook;\n            // update local notebook config, preserving any defaults that aren't overriden\n            if (this.notebookConfig !== null && typeof this.notebookConfig === 'object') {\n                this.config = angular.merge(this.config, this.notebookConfig);\n            }\n        }\n    }\n\n    editItem(ev, itemId) {\n        // broadcast edit notebook item event\n        this.$rootScope.$broadcast('editNote', {itemId: itemId, ev: ev});\n    };\n\n    addNewItem(ev, file) {\n        // broadcast create new notebook item event\n        this.$rootScope.$broadcast('addNewNote', {ev: ev, file: file});\n    };\n\n    deleteItem(itemToDelete) {\n        let items = this.getNotebookByWorkgroup().items;\n        let deletedItems = this.getNotebookByWorkgroup().deletedItems;\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i];\n            if (item === itemToDelete) {\n                items.splice(i, 1);\n                deletedItems.push(itemToDelete);\n            }\n        }\n    };\n\n    // looks up notebook item by local notebook item id, including deleted notes\n    getLatestNotebookItemByLocalNotebookItemId(itemId, workgroupId = null) {\n        if (this.getNotebookByWorkgroup(workgroupId).items.hasOwnProperty(itemId)) {\n            let items = this.getNotebookByWorkgroup(workgroupId).items[itemId];\n            return items.last();\n        } else if (this.getNotebookByWorkgroup(workgroupId).deletedItems.hasOwnProperty(itemId)) {\n            let items = this.getNotebookByWorkgroup(workgroupId).deletedItems[itemId];\n            return items.last();\n        } else {\n            return null;\n        }\n    }\n\n    // returns student's report item if they've done work, or the template if they haven't.\n    getLatestNotebookReportItemByReportId(reportId, workgroupId = null) {\n        return this.getLatestNotebookItemByLocalNotebookItemId(reportId, workgroupId);\n    }\n\n    // returns the authored report item\n    getTemplateReportItemByReportId(reportId) {\n        let templateReportItem = null;\n        let reportNotes = this.notebookConfig.itemTypes.report.notes;\n        for (let i = 0; i < reportNotes.length; i++) {\n            let reportNote = reportNotes[i];\n            if (reportNote.reportId == reportId) {\n                templateReportItem = {\n                    id: null,\n                    type: \"report\",\n                    localNotebookItemId: reportId,\n                    content: reportNote\n                };\n                break;\n            }\n        }\n        return templateReportItem;\n    }\n\n    calculateTotalUsage() {\n        // get the total size\n        /*\n        let totalSizeSoFar = 0;\n        for (let i = 0; i < this.getNotebookByWorkgroup().items.length; i++) {\n            let notebookItem = this.getNotebookByWorkgroup().items[i];\n            if (notebookItem.studentAsset != null) {\n                let notebookItemSize = notebookItem.studentAsset.fileSize;\n                totalSizeSoFar += notebookItemSize;\n            }\n        }\n        this.getNotebookByWorkgroup().totalSize = totalSizeSoFar;\n        this.getNotebookByWorkgroup().totalSizeMax = this.ConfigService.getStudentMaxTotalAssetsSize();\n        this.getNotebookByWorkgroup().usagePercentage = this.notebook.totalSize / this.notebook.totalSizeMax * 100;\n        */\n    };\n\n    getNotebookConfig() {\n        return this.config;\n    };\n\n    /**\n     * Returns the report content for the specified reportId, or null if not exists.\n     * @param reportId\n     */\n    getReportNoteContentByReportId(reportId) {\n        let result = null;\n        let reportNotes = this.notebookConfig.itemTypes.report.notes;\n        for (let i = 0; i < reportNotes.length; i++) {\n            let reportNote = reportNotes[i];\n            if (reportNote.reportId === reportId) {\n                result = reportNote;\n                break;\n            }\n        }\n        return result;\n    }\n\n    isNotebookEnabled() {\n        return this.config.enabled;\n    };\n\n    retrieveNotebookItems(workgroupId = null, periodId = null) {\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project, initialize dummy student data\n            let workgroupId = this.ConfigService.getWorkgroupId();\n            this.notebooksByWorkgroup = {};\n            this.notebooksByWorkgroup[workgroupId] = {};\n            this.notebooksByWorkgroup[workgroupId].allItems = [];\n            this.notebooksByWorkgroup[workgroupId].items = [];\n            this.notebooksByWorkgroup[workgroupId].deletedItems = [];\n            this.groupNotebookItems();\n            // if we're in preview, don't make any request to the server but pretend we did\n            let deferred = this.$q.defer();\n            deferred.resolve(this.notebooksByWorkgroup[workgroupId]);\n            return deferred.promise;\n        } else {\n            let config = {\n                method : 'GET',\n                url : this.ConfigService.getStudentNotebookURL(),\n                params : {}\n            };\n            if (workgroupId != null) {\n                config.params.workgroupId = workgroupId;\n            }\n            if (periodId != null) {\n                config.params.periodId = periodId;\n            }\n            return this.$http(config).then((response) => {\n                // loop through the assets and make them into JSON object with more details\n                this.notebooksByWorkgroup = {};\n                let allNotebookItems = response.data;\n                for (let n = 0; n < allNotebookItems.length; n++) {\n                    let notebookItem = allNotebookItems[n];\n                    try {\n                        if (notebookItem.studentAssetId != null) {\n                            // if this notebook item is a StudentAsset item, add the association here\n                            notebookItem.studentAsset = this.StudentAssetService.getAssetById(notebookItem.studentAssetId);\n                        } else if (notebookItem.studentWorkId != null) {\n                            // if this notebook item is a StudentWork item, add the association here\n                            notebookItem.studentWork = this.StudentDataService.getStudentWorkByStudentWorkId(notebookItem.studentWorkId);\n                        } else if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n                            notebookItem.content = angular.fromJson(notebookItem.content);\n                        }\n                        let workgroupId = notebookItem.workgroupId;\n                        if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n                            // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n                            this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n                        } else {\n                            // otherwise, we'll create a new notebook field and add the item to the array\n                            this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n                        }\n                    } catch (e) {\n                        // keep going, ignore this error\n                    }\n                }\n                this.groupNotebookItems(); // group notebook items based on item.localNotebookItemId\n                this.calculateTotalUsage();\n\n                return this.notebooksByWorkgroup;\n            });\n        }\n    };\n\n    /**\n     * Groups the notebook items together in to a map-like structure inside this.notebook.items.\n     * {\n     *    \"abc123\": [{localNotebookItemId:\"abc123\", \"text\":\"first revision\"}, {localNotebookItemId:\"abc123\", \"text\":\"second revision\"}],\n     *    \"def456\": [{localNotebookItemId:\"def456\", \"text\":\"hello\"}, {localNotebookItemId:\"def456\", \"text\":\"hello my friend\"}]\n     * }\n     */\n    groupNotebookItems() {\n        for (let workgroupId in this.notebooksByWorkgroup) {\n            if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n                let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n                notebookByWorkgroup.items = {};\n                notebookByWorkgroup.deletedItems = {};  // reset deleted items\n                for (let ni = 0; ni < notebookByWorkgroup.allItems.length; ni++) {\n                    let notebookItem = notebookByWorkgroup.allItems[ni];\n                    let notebookItemLocalNotebookItemId = notebookItem.localNotebookItemId;\n                    if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemId)) {\n                        // if this was already added before, we'll append this notebook item to the array\n                        notebookByWorkgroup.items[notebookItemLocalNotebookItemId].push(notebookItem);\n                    } else {\n                        // otherwise, we'll create a new field and add the item to the array\n                        notebookByWorkgroup.items[notebookItemLocalNotebookItemId] = [notebookItem];\n                    }\n                }\n                // now go through the items and look at the last revision of each item. If it's deleted, then move the entire item array to deletedItems\n                for (let notebookItemLocalNotebookItemIdKey in notebookByWorkgroup.items) {\n                    if (notebookByWorkgroup.items.hasOwnProperty(notebookItemLocalNotebookItemIdKey)) {\n                        // get the last note revision\n                        let allRevisionsForThisLocalNotebookItemId = notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];\n                        if (allRevisionsForThisLocalNotebookItemId != null) {\n                            let lastRevision = allRevisionsForThisLocalNotebookItemId[allRevisionsForThisLocalNotebookItemId.length - 1];\n                            if (lastRevision != null && lastRevision.serverDeleteTime != null) {\n                                // the last revision for this not deleted, so move the entire note (with all its revisions) to deletedItems\n                                notebookByWorkgroup.deletedItems[notebookItemLocalNotebookItemIdKey] = allRevisionsForThisLocalNotebookItemId;\n                                delete notebookByWorkgroup.items[notebookItemLocalNotebookItemIdKey];  // then remove it from the items array\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns the notebook item with the specified notebook item id.\n     */\n    getNotebookItemByNotebookItemId(notebookItemId, workgroupId = null) {\n        let notebookByWorkgroup = this.getNotebookByWorkgroup(workgroupId);\n        if (notebookByWorkgroup != null) {\n            let allNotebookItems = notebookByWorkgroup.allItems;\n            for (let a = 0; a < allNotebookItems.length; a++) {\n                let notebookItem = allNotebookItems[a];\n                if (notebookItem.id === notebookItemId) {\n                    return notebookItem;\n                }\n            }\n        }\n    }\n\n    getNotebookByWorkgroup(workgroupId = null) {\n        if (workgroupId == null) {\n            workgroupId = this.ConfigService.getWorkgroupId();\n        }\n        let notebookByWorkgroup = this.notebooksByWorkgroup[workgroupId];\n        if (notebookByWorkgroup == null) {\n            notebookByWorkgroup = {\n                allItems: [],\n                items: {},\n                deletedItems: {}\n            }\n        }\n        return notebookByWorkgroup;\n    }\n\n    saveNotebookItem(notebookItemId, nodeId, localNotebookItemId, type, title, content, clientSaveTime = null, clientDeleteTime = null) {\n        if (this.ConfigService.isPreview()) {\n            return this.$q((resolve, reject) => {\n                let notebookItem = {\n                    content: content,\n                    localNotebookItemId: localNotebookItemId,\n                    nodeId: nodeId,\n                    notebookItemId: notebookItemId,\n                    title: title,\n                    type: type,\n                    workgroupId: this.ConfigService.getWorkgroupId(),\n                    clientSaveTime: clientSaveTime,\n                    clientDeleteTime: clientDeleteTime\n                };\n                if (clientDeleteTime != null) {\n                    // preview user wants to delete this note, so mock the server deletion by setting the server delete time\n                    notebookItem.serverDeleteTime = clientDeleteTime;\n                } else {\n                    notebookItem.serverDeleteTime = null;\n                }\n                // add/update notebook\n                let workgroupId = notebookItem.workgroupId;\n                if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n                    // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n                    this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n                } else {\n                    // otherwise, we'll create a new notebook field and add the item to the array\n                    this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n                }\n\n                this.groupNotebookItems();\n                this.groupNotebookItems();\n                this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n                resolve();\n            });\n        } else {\n            let config = {\n                method: \"POST\",\n                url: this.ConfigService.getStudentNotebookURL(),\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n            };\n            let params = {\n                workgroupId: this.ConfigService.getWorkgroupId(),\n                periodId: this.ConfigService.getPeriodId(),\n                notebookItemId: notebookItemId,\n                localNotebookItemId: localNotebookItemId,\n                nodeId: nodeId,\n                type: type,\n                title: title,\n                content: angular.toJson(content),\n                clientSaveTime: Date.parse(new Date()),\n                clientDeleteTime: clientDeleteTime\n            };\n            if (params.clientSaveTime == null) {\n                params.clientSaveTime = Date.parse(new Date());\n            }\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let notebookItem = result.data;\n                if (notebookItem != null) {\n                    if (notebookItem.type === \"note\" || notebookItem.type === \"report\") {\n                        notebookItem.content = angular.fromJson(notebookItem.content);\n                    }\n                    // add/update notebook\n                    let workgroupId = notebookItem.workgroupId;\n                    if (this.notebooksByWorkgroup.hasOwnProperty(workgroupId)) {\n                        // we already have create a notebook for this workgroup before, so we'll append this notebook item to the array\n                        this.notebooksByWorkgroup[workgroupId].allItems.push(notebookItem);\n                    } else {\n                        // otherwise, we'll create a new notebook field and add the item to the array\n                        this.notebooksByWorkgroup[workgroupId] = { allItems: [notebookItem] };\n                    }\n\n                    this.groupNotebookItems();\n\n                    this.$rootScope.$broadcast('notebookUpdated', {notebook: this.notebooksByWorkgroup[workgroupId]});\n                }\n                return result.data;\n            });\n        }\n    };\n\n    saveNotebookToggleEvent(isOpen, currentNode) {\n        let nodeId = null, componentId = null, componentType = null, category = \"Notebook\";\n        let eventData = {\n            curentNodeId: currentNode == null ? null : currentNode.id\n        };\n        let event = isOpen ? \"notebookOpened\" : \"notebookClosed\";\n\n        // save notebook open/close event\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n}\n\nNotebookService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nexport default NotebookService;\n"]}