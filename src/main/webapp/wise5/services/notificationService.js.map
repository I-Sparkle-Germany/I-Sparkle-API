{"version":3,"sources":["notificationService.es6"],"names":[],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\n\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                if (this.ConfigService.getWorkgroupId() === notification.toWorkgroupId) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                    // check if this notification is new or is an update\n                    var isNotificationNew = true;\n                    for (var n = 0; n < this.notifications.length; n++) {\n                        var currentNotification = this.notifications[n];\n                        if (currentNotification.id == notification.id) {\n                            // existing notification (with same id) found, so it's an update\n                            this.notifications[n] = notification;\n                            isNotificationNew = false;\n                        }\n                    }\n                    if (isNotificationNew) {\n                        // this is a new notification\n                        this.notifications.push(notification);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @param groupId id that groups multiple notifications together\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data=null, groupId=null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            groupId: groupId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n\n        var notificationURL = this.ConfigService.getNotificationURL();\n\n        if (notificationURL == null) {\n            // the notification url is null most likely because we are in preview mode\n            return Promise.resolve(this.notifications);\n        } else {\n            // the notification url is not null so we will retrieve the notifications\n            let config = {};\n            config.method = 'GET';\n            config.url = this.ConfigService.getNotificationURL();\n            config.params = {};\n            if (toWorkgroupId != null) {\n                config.params.toWorkgroupId = toWorkgroupId;\n            } else {\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n\n            return this.$http(config).then((response) => {\n                this.notifications = response.data;\n                // populate nodePosition and nodePositionAndTitle, where applicable\n                if (this.notifications != null) {\n                    this.notifications.map((notification) => {\n                        if (notification.nodeId != null) {\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                            if (notification.data != null) {\n                                // parse the data string into a JSON object\n                                notification.data = angular.fromJson(notification.data);\n                            }\n                        }\n                    });\n                } else {\n                    this.notifications = [];\n                }\n\n                return this.notifications;\n            });\n        }\n    }\n\n    /**\n     * Dismisses the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.dismissNotificationToServer(notification);\n    }\n\n    /**\n     * Handle creating notification for score\n     * @param notificationForScore\n     */\n    sendNotificationForScore(notificationForScore) {\n        let notificationType = notificationForScore.notificationType;\n        if (notificationForScore.isNotifyTeacher && notificationForScore.isNotifyStudent) {\n            // notify both teacher and student at the same time\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n            let toWorkgroupId = this.ConfigService.getWorkgroupId();\n            let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n            // replace variables like {{score}} and {{dismissCode}} with actual values\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n            let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n            let notificationData = {};\n            if (notificationForScore.isAmbient) {\n                notificationData.isAmbient = true;\n            }\n            if (notificationForScore.dismissCode != null) {\n                notificationData.dismissCode = notificationForScore.dismissCode;\n            }\n            // send notification to student\n            let notificationToStudent = this.createNewNotification(\n                notificationType, notificationForScore.nodeId, notificationForScore.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n            this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n                // show local notification\n                this.$rootScope.$broadcast('newNotification', savedNotification);\n            });\n\n            // also send notification to teacher\n            let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n            toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n            let notificationToTeacher = this.createNewNotification(\n                notificationType, notificationForScore.nodeId, notificationForScore.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n            this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n                // send notification in real-time so teacher sees this right away\n                let messageType = \"CRaterResultNotification\";\n                this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n            });\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL();\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        if (notification.id != null) {\n            params.notificationId = notification.id;\n        }\n        params.periodId = this.ConfigService.getPeriodId();\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.nodeId = notification.nodeId;\n        params.componentId = notification.componentId;\n        params.componentType = notification.componentType;\n        params.type = notification.type;\n        params.message = notification.message;\n        if (notification.data != null) {\n            params.data = angular.toJson(notification.data);\n        }\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeGenerated = notification.timeGenerated;\n        if (notification.timeDismissed != null) {\n            params.timeDismissed = notification.timeDismissed;\n        }\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    dismissNotificationToServer(notification) {\n\n        if (notification.id == null) {\n            // cannot dismiss a notification that hasn't been saved to db yet\n            return;\n        }\n\n        let timeNow = Date.parse(new Date());\n        notification.timeDismissed = timeNow;\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL() + \"/dismiss\";\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        params.notificationId = notification.id;\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.type = notification.type;\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeDismissed = notification.timeDismissed;\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default NotificationService;\n"]}