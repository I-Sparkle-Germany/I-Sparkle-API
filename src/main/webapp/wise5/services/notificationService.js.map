{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","componentId","fromWorkgroupId","toWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","getMode","getWorkgroupId","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUserNameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","savedNotification","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","messageType","sendStudentToTeacherMessage","isPreview","savedNotificationResponse","deferred","defer","promise","headers","notificationId","toJson","$","param","result","timeNow","workgroupId","filter","args","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","i","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\n\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                //let workgroupId = this.ConfigService.getWorkgroupId();\n                //if (workgroupId === notification.toWorkgroupId) {\n                notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                // check if this notification is new or is an update\n                var isNotificationNew = true;\n                for (var n = 0; n < this.notifications.length; n++) {\n                    var currentNotification = this.notifications[n];\n                    if (currentNotification.id == notification.id) {\n                        // existing notification (with same id) found, so it's an update\n                        this.notifications[n] = notification;\n                        isNotificationNew = false;\n                        this.$rootScope.$broadcast('notificationChanged', notification);\n                        break;\n                    }\n                }\n                if (isNotificationNew) {\n                    // this is a new notification\n                    this.notifications.push(notification);\n                    this.$rootScope.$broadcast('notificationAdded', notification);\n                    }\n                //}\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @param groupId id that groups multiple notifications together\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data=null, groupId=null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            groupId: groupId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n\n        var notificationURL = this.ConfigService.getNotificationURL();\n\n        if (notificationURL == null) {\n            // the notification url is null most likely because we are in preview mode\n            return Promise.resolve(this.notifications);\n        } else {\n            // the notification url is not null so we will retrieve the notifications\n            let config = {};\n            config.method = 'GET';\n            config.url = this.ConfigService.getNotificationURL();\n            config.params = {};\n            if (toWorkgroupId != null) {\n                config.params.toWorkgroupId = toWorkgroupId;\n            } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n\n            return this.$http(config).then((response) => {\n                this.notifications = response.data;\n                // populate nodePosition and nodePositionAndTitle, where applicable\n                if (this.notifications != null) {\n                    this.notifications.map((notification) => {\n                        if (notification.nodeId != null) {\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                            if (notification.data != null) {\n                                // parse the data string into a JSON object\n                                notification.data = angular.fromJson(notification.data);\n                            }\n                        }\n                    });\n                } else {\n                    this.notifications = [];\n                }\n\n                return this.notifications;\n            });\n        }\n    }\n\n    /**\n     * Dismisses the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.dismissNotificationToServer(notification);\n    }\n\n    /**\n     * Handle creating notification for score\n     * @param notificationForScore\n     */\n    sendNotificationForScore(notificationForScore) {\n        let notificationType = notificationForScore.notificationType;\n        if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\n            // notify both teacher and student at the same time\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n            let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n            let notificationData = {};\n            if (notificationForScore.isAmbient) {\n                notificationData.isAmbient = true;\n            }\n            if (notificationForScore.dismissCode != null) {\n                notificationData.dismissCode = notificationForScore.dismissCode;\n            }\n            if (notificationForScore.isNotifyStudent) {\n                // send notification to student\n                let toWorkgroupId = this.ConfigService.getWorkgroupId();\n                let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n                // replace variables like {{score}} and {{dismissCode}} with actual values\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n                let notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n                this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n                    // show local notification\n                    this.$rootScope.$broadcast('newNotification', savedNotification);\n                });\n            }\n\n            if (notificationForScore.isNotifyTeacher) {\n                // send notification to teacher\n                let toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n                let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n                // replace variables like {{score}} and {{dismissCode}} with actual values\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n                let notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n                this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n                    // send notification in real-time so teacher sees this right away\n                    let messageType = \"CRaterResultNotification\";\n                    this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n                });\n            }\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        if (this.ConfigService.isPreview()) {\n\n            var savedNotificationResponse = notification;\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            let deferred = this.$q.defer();\n            deferred.resolve(notification);\n            return deferred.promise;\n\n        } else {\n\n            let config = {};\n            config.method = 'POST';\n            config.url = this.ConfigService.getNotificationURL();\n            config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n            let params = {};\n            if (notification.id != null) {\n                params.notificationId = notification.id;\n            }\n            params.periodId = this.ConfigService.getPeriodId();\n            params.fromWorkgroupId = notification.fromWorkgroupId;\n            params.toWorkgroupId = notification.toWorkgroupId;\n            params.nodeId = notification.nodeId;\n            params.componentId = notification.componentId;\n            params.componentType = notification.componentType;\n            params.type = notification.type;\n            params.message = notification.message;\n            if (notification.data != null) {\n                params.data = angular.toJson(notification.data);\n            }\n            if (notification.groupId != null) {\n                params.groupId = notification.groupId;\n            }\n            params.timeGenerated = notification.timeGenerated;\n            if (notification.timeDismissed != null) {\n                params.timeDismissed = notification.timeDismissed;\n            }\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let notification = result.data;\n                if (notification.data != null) {\n                    // parse the data string into a JSON object\n                    notification.data = angular.fromJson(notification.data);\n                }\n                return notification;\n            })\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    dismissNotificationToServer(notification) {\n\n        if (notification.id == null) {\n            // cannot dismiss a notification that hasn't been saved to db yet\n            return;\n        }\n\n        let timeNow = Date.parse(new Date());\n        notification.timeDismissed = timeNow;\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL() + \"/dismiss\";\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        params.notificationId = notification.id;\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.type = notification.type;\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeDismissed = notification.timeDismissed;\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n\n    /**\n     * Returns all notifications for a given nodeId and workgroupId\n     * @param nodeId the nodeId to look for (optional)\n     * @param workgroupId the workgroupId to look for (optional)\n     * TODO: update this to allow for more parameters (like periodId, maybe componentID?)\n     */\n    getNotifications(nodeId, workgroupId) {\n        if (nodeId || workgroupId) {\n            return this.notifications.filter(\n                notification => {\n                    if (nodeId && workgroupId) {\n                        return (notification.nodeId === nodeId && notification.toWorkgroupId === workgroupId);\n                    } else if (nodeId) {\n                        return (notification.nodeId === nodeId);\n                    } else if (workgroupId) {\n                        return (notification.toWorkgroupId === workgroupId);\n                    }\n                }\n            );\n        } else {\n            return this.notifications;\n        }\n\n    }\n\n    /**\n     * Returns all CRaterResult notifications for given workgroup and node\n     * TODO: expand to encompass other notification types that should be shown in classroom monitor\n     * @param args object of optional parameters to filter on (nodeId, workgroupId, periodId)\n     * @returns array of cRater notificaitons\n     */\n    getAlertNotifications(args) {\n        // get all CRaterResult notifications for the giver parameters\n        // TODO: expand to encompass other notification types that should be shown to teacher\n        let notifications = [];\n        let alertNotifications = [];\n        let nodeId = args.nodeId;\n        let workgroupId = args.workgroupId;\n        let periodId = args.periodId;\n\n        if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\n            let groupNode = this.ProjectService.getNodeById(nodeId);\n            let children = groupNode.ids;\n            let n = children.length;\n\n            for (let i = 0; i < n; i++) {\n                let childId = children[i];\n                let childAlerts = this.getAlertNotifications({nodeId: childId, workgroupId: workgroupId, periodId: periodId});\n                alertNotifications = alertNotifications.concat(childAlerts);\n            }\n        } else {\n            notifications = this.getNotifications(nodeId, workgroupId);\n            alertNotifications = notifications.filter(\n                notification => {\n                    if (periodId && periodId !== -1) {\n                        return (notification.type === 'CRaterResult' && notification.periodId === periodId);\n                    } else {\n                        return (notification.type === 'CRaterResult');\n                    }\n                }\n            );\n        }\n\n        return alertNotifications;\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default NotificationService;\n"]}