{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","workgroupId","getWorkgroupId","mode","getMode","toWorkgroupId","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","componentId","fromWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUserNameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","savedNotification","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","messageType","sendStudentToTeacherMessage","isPreview","deferred","defer","promise","headers","notificationId","toJson","$","param","result","args","p","hasOwnProperty","filter","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","i","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\r\n    constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\r\n\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.StudentWebSocketService = StudentWebSocketService;\r\n        this.UtilService = UtilService;\r\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\r\n\r\n        /**\r\n         * We received a new notification.\r\n         */\r\n        this.$rootScope.$on('newNotification', (event, notification) => {\r\n            if (notification != null) {\r\n                let workgroupId = this.ConfigService.getWorkgroupId();\r\n                let mode = this.ConfigService.getMode();\r\n                if (mode === 'classroomMonitor' || workgroupId === notification.toWorkgroupId) {\r\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\r\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\r\n                    // check if this notification is new or is an update\r\n                    let isNotificationNew = true;\r\n                    for (let n = 0; n < this.notifications.length; n++) {\r\n                        let currentNotification = this.notifications[n];\r\n                        if (currentNotification.id == notification.id) {\r\n                            // existing notification (with same id) found, so it's an update\r\n                            this.notifications[n] = notification;\r\n                            isNotificationNew = false;\r\n                            this.$rootScope.$broadcast('notificationChanged', notification);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (isNotificationNew) {\r\n                        // this is a new notification\r\n                        this.notifications.push(notification);\r\n                        this.$rootScope.$broadcast('notificationAdded', notification);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new notification object\r\n     * @param notificationType type of notification [component, node, annotation, etc]\r\n     * @param nodeId id of node\r\n     * @param componentId id of component\r\n     * @param fromWorkgroupId id of workgroup that created this notification\r\n     * @param toWorkgroupId id of workgroup this notification is for\r\n     * @param message notification message\r\n     * @param data other extra information about this notification\r\n     * @param groupId id that groups multiple notifications together\r\n     * @returns newly created notification object\r\n     */\r\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data = null, groupId = null) {\r\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\r\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\r\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\r\n        let componentType = null;\r\n        if (component != null) {\r\n            componentType = component.type;\r\n        }\r\n        return {\r\n            id: null,\r\n            type: notificationType,\r\n            nodeId: nodeId,\r\n            groupId: groupId,\r\n            componentId: componentId,\r\n            componentType: componentType,\r\n            nodePosition: nodePosition,\r\n            nodePositionAndTitle: nodePositionAndTitle,\r\n            fromWorkgroupId: fromWorkgroupId,\r\n            toWorkgroupId: toWorkgroupId,\r\n            message: message,\r\n            data: data,\r\n            timeGenerated: Date.parse(new Date()),\r\n            timeDismissed: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retrieves notifications from the server\r\n     */\r\n    retrieveNotifications(toWorkgroupId = null) {\r\n\r\n        let notificationURL = this.ConfigService.getNotificationURL();\r\n\r\n        if (notificationURL == null) {\r\n            // the notification url is null most likely because we are in preview mode\r\n            return Promise.resolve(this.notifications);\r\n        } else {\r\n            // the notification url is not null so we will retrieve the notifications\r\n            let config = {\r\n                method: \"GET\",\r\n                url: this.ConfigService.getNotificationURL(),\r\n                params: {}\r\n            };\r\n            if (toWorkgroupId != null) {\r\n                config.params.toWorkgroupId = toWorkgroupId;\r\n            } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\r\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n                config.params.periodId = this.ConfigService.getPeriodId();\r\n            }\r\n\r\n            return this.$http(config).then((response) => {\r\n                this.notifications = response.data;\r\n                // populate nodePosition and nodePositionAndTitle, where applicable\r\n                if (this.notifications != null) {\r\n                    this.notifications.map((notification) => {\r\n                        if (notification.nodeId != null) {\r\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\r\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\r\n                        }\r\n                        if (notification.data != null) {\r\n                            // parse the data string into a JSON object\r\n                            notification.data = angular.fromJson(notification.data);\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.notifications = [];\r\n                }\r\n\r\n                return this.notifications;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dismisses the specified notification\r\n     * @param notification\r\n     */\r\n    dismissNotification(notification) {\r\n        this.dismissNotificationToServer(notification);\r\n    }\r\n\r\n    /**\r\n     * Handle creating notification for score\r\n     * @param notificationForScore\r\n     */\r\n    sendNotificationForScore(notificationForScore) {\r\n        let notificationType = notificationForScore.notificationType;\r\n        if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\r\n            // notify both teacher and student at the same time\r\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\r\n            let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\r\n            let notificationData = {};\r\n            if (notificationForScore.isAmbient) {\r\n                notificationData.isAmbient = true;\r\n            }\r\n            if (notificationForScore.dismissCode != null) {\r\n                notificationData.dismissCode = notificationForScore.dismissCode;\r\n            }\r\n            if (notificationForScore.isNotifyStudent) {\r\n                // send notification to student\r\n                let toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n                let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\r\n                // replace variables like {{score}} and {{dismissCode}} with actual values\r\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\r\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\r\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\r\n\r\n                let notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\r\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\r\n                this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\r\n                    // show local notification\r\n                    this.$rootScope.$broadcast('newNotification', savedNotification);\r\n                });\r\n            }\r\n\r\n            if (notificationForScore.isNotifyTeacher) {\r\n                // send notification to teacher\r\n                let toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\r\n                let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\r\n                // replace variables like {{score}} and {{dismissCode}} with actual values\r\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\r\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\r\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\r\n\r\n                let notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\r\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\r\n                this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\r\n                    // send notification in real-time so teacher sees this right away\r\n                    let messageType = \"CRaterResultNotification\";\r\n                    this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the notification for the logged-in user\r\n     * @param notification\r\n     */\r\n    saveNotificationToServer(notification) {\r\n\r\n        if (this.ConfigService.isPreview()) {\r\n\r\n            // if we're in preview, don't make any request to the server but pretend we did\r\n            let deferred = this.$q.defer();\r\n            deferred.resolve(notification);\r\n            return deferred.promise;\r\n\r\n        } else {\r\n\r\n            let config = {\r\n                method: \"POST\",\r\n                url: this.ConfigService.getNotificationURL(),\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            };\r\n\r\n            let params = {};\r\n            if (notification.id != null) {\r\n                params.notificationId = notification.id;\r\n            }\r\n            params.periodId = this.ConfigService.getPeriodId();\r\n            params.fromWorkgroupId = notification.fromWorkgroupId;\r\n            params.toWorkgroupId = notification.toWorkgroupId;\r\n            params.nodeId = notification.nodeId;\r\n            params.componentId = notification.componentId;\r\n            params.componentType = notification.componentType;\r\n            params.type = notification.type;\r\n            params.message = notification.message;\r\n            if (notification.data != null) {\r\n                params.data = angular.toJson(notification.data);\r\n            }\r\n            if (notification.groupId != null) {\r\n                params.groupId = notification.groupId;\r\n            }\r\n            params.timeGenerated = notification.timeGenerated;\r\n            if (notification.timeDismissed != null) {\r\n                params.timeDismissed = notification.timeDismissed;\r\n            }\r\n            config.data = $.param(params);\r\n\r\n            return this.$http(config).then((result) => {\r\n                let notification = result.data;\r\n                if (notification.data != null) {\r\n                    // parse the data string into a JSON object\r\n                    notification.data = angular.fromJson(notification.data);\r\n                }\r\n                return notification;\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the notification for the logged-in user\r\n     * @param notification\r\n     */\r\n    dismissNotificationToServer(notification) {\r\n\r\n        notification.timeDismissed = Date.parse(new Date());  // set dismissed time to now.\r\n\r\n        if (this.ConfigService.isPreview()) {\r\n\r\n            // if we're in preview, don't make any request to the server but pretend we did\r\n            let deferred = this.$q.defer();\r\n            deferred.resolve(notification);\r\n            return deferred.promise;\r\n\r\n        } else {\r\n            if (notification.id == null) {\r\n                // cannot dismiss a notification that hasn't been saved to db yet\r\n                return;\r\n            }\r\n\r\n            let config = {\r\n                method: \"POST\",\r\n                url: this.ConfigService.getNotificationURL() + \"/dismiss\",\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            };\r\n\r\n            let params = {};\r\n            params.notificationId = notification.id;\r\n            params.fromWorkgroupId = notification.fromWorkgroupId;\r\n            params.toWorkgroupId = notification.toWorkgroupId;\r\n            params.type = notification.type;\r\n            if (notification.groupId != null) {\r\n                params.groupId = notification.groupId;\r\n            }\r\n            params.timeDismissed = notification.timeDismissed;\r\n            config.data = $.param(params);\r\n\r\n            return this.$http(config).then((result) => {\r\n                let notification = result.data;\r\n                if (notification.data != null) {\r\n                    // parse the data string into a JSON object\r\n                    notification.data = angular.fromJson(notification.data);\r\n                }\r\n                this.$rootScope.$broadcast('notificationChanged', notification);\r\n                return notification;\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all notifications for the given parameters\r\n     * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId, type)\r\n     * @returns array of notificaitons\r\n     */\r\n    getNotifications(args) {\r\n        let notifications = this.notifications;\r\n\r\n        if (args) {\r\n            // loop through all the given parameters and find notifications that match\r\n            for (let p in args) {\r\n                if (args.hasOwnProperty(p) && args[p] !== null) {\r\n                    notifications = notifications.filter(\r\n                        notification => {\r\n                            return (notification[p] === args[p]);\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return notifications;\r\n    }\r\n\r\n    /**\r\n     * Returns all CRaterResult notifications for given parameters\r\n     * TODO: expand to encompass other notification types that should be shown in classroom monitor\r\n     * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId)\r\n     * @returns array of cRater notificaitons\r\n     */\r\n    getAlertNotifications(args) {\r\n        // get all CRaterResult notifications for the given parameters\r\n        // TODO: expand to encompass other notification types that should be shown to teacher\r\n        let alertNotifications = [];\r\n        let nodeId = args.nodeId;\r\n        let params = args;\r\n        params.type = 'CRaterResult';\r\n\r\n        if (args.periodId) {\r\n            params.periodId = args.periodId === -1 ? null : args.periodId;\r\n        }\r\n\r\n        if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\r\n            let groupNode = this.ProjectService.getNodeById(nodeId);\r\n            let children = groupNode.ids;\r\n            let n = children.length;\r\n\r\n            for (let i = 0; i < n; i++) {\r\n                let childId = children[i];\r\n                params.nodeId = childId;\r\n                let childAlerts = this.getAlertNotifications(args);\r\n                alertNotifications = alertNotifications.concat(childAlerts);\r\n            }\r\n        } else {\r\n            alertNotifications = this.getNotifications(params);\r\n        }\r\n\r\n        return alertNotifications;\r\n    }\r\n}\r\n\r\nNotificationService.$inject = [\r\n    '$http',\r\n    '$q',\r\n    '$rootScope',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'StudentWebSocketService',\r\n    'UtilService'\r\n];\r\n\r\nexport default NotificationService;\r\n"]}