{"version":3,"sources":["notificationService.es6"],"names":[],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $rootScope, ConfigService, ProjectService) {\n\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                if (this.ConfigService.getWorkgroupId() === notification.toWorkgroupId) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                    // check if this notification is new or is an update\n                    var isNotificationNew = true;\n                    for (var n = 0; n < this.notifications.length; n++) {\n                        var currentNotification = this.notifications[n];\n                        if (currentNotification.id == notification.id) {\n                            // existing notification (with same id) found, so it's an update\n                            this.notifications[n] = notification;\n                            isNotificationNew = false;\n                        }\n                    }\n                    if (isNotificationNew) {\n                        // this is a new notification\n                        this.notifications.push(notification);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @param groupId id that groups multiple notifications together\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data=null, groupId=null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            groupId: groupId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n        \n        var notificationURL = this.ConfigService.getNotificationURL();\n        \n        if (notificationURL == null) {\n            // the notification url is null most likely because we are in preview mode\n            return Promise.resolve(this.notifications);\n        } else {\n            // the notification url is not null so we will retrieve the notifications\n            let config = {};\n            config.method = 'GET';\n            config.url = this.ConfigService.getNotificationURL();\n            config.params = {};\n            if (toWorkgroupId != null) {\n                config.params.toWorkgroupId = toWorkgroupId;\n            } else {\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n            \n            return this.$http(config).then((response) => {\n                this.notifications = response.data;\n                // populate nodePosition and nodePositionAndTitle, where applicable\n                if (this.notifications != null) {\n                    this.notifications.map((notification) => {\n                        if (notification.nodeId != null) {\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                            if (notification.data != null) {\n                                // parse the data string into a JSON object\n                                notification.data = angular.fromJson(notification.data);\n                            }\n                        }\n                    });\n                } else {\n                    this.notifications = [];\n                }\n\n                return this.notifications;\n            });\n        }\n    }\n\n    /**\n     * Dismisses the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.dismissNotificationToServer(notification);\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL();\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        if (notification.id != null) {\n            params.notificationId = notification.id;\n        }\n        params.periodId = this.ConfigService.getPeriodId();\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.nodeId = notification.nodeId;\n        params.componentId = notification.componentId;\n        params.componentType = notification.componentType;\n        params.type = notification.type;\n        params.message = notification.message;\n        if (notification.data != null) {\n            params.data = angular.toJson(notification.data);\n        }\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeGenerated = notification.timeGenerated;\n        if (notification.timeDismissed != null) {\n            params.timeDismissed = notification.timeDismissed;\n        }\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    dismissNotificationToServer(notification) {\n\n        if (notification.id == null) {\n            // cannot dismiss a notification that hasn't been saved to db yet\n            return;\n        }\n\n        let timeNow = Date.parse(new Date());\n        notification.timeDismissed = timeNow;\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL() + \"/dismiss\";\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        params.notificationId = notification.id;\n        params.periodId = this.ConfigService.getPeriodId();\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.type = notification.type;\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeDismissed = notification.timeDismissed;\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default NotificationService;\n"]}