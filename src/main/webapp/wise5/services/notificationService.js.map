{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","workgroupId","getWorkgroupId","mode","getMode","toWorkgroupId","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","componentId","fromWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUserNameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","savedNotification","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","messageType","sendStudentToTeacherMessage","isPreview","deferred","defer","promise","headers","notificationId","toJson","$","param","result","args","p","hasOwnProperty","filter","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\n\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.UtilService = UtilService;\n    this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n    /**\n     * We received a new notification.\n     */\n    this.$rootScope.$on('newNotification', (event, notification) => {\n      if (notification != null) {\n        let workgroupId = this.ConfigService.getWorkgroupId();\n        let mode = this.ConfigService.getMode();\n        if (mode === 'classroomMonitor' || workgroupId === notification.toWorkgroupId) {\n          notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n          notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n          // check if this notification is new or is an update\n          let isNotificationNew = true;\n          for (let n = 0; n < this.notifications.length; n++) {\n            let currentNotification = this.notifications[n];\n            if (currentNotification.id == notification.id) {\n              // existing notification (with same id) found, so it's an update\n              this.notifications[n] = notification;\n              isNotificationNew = false;\n              this.$rootScope.$broadcast('notificationChanged', notification);\n              break;\n            }\n          }\n          if (isNotificationNew) {\n            // this is a new notification\n            this.notifications.push(notification);\n            this.$rootScope.$broadcast('notificationAdded', notification);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Creates a new notification object\n   * @param notificationType type of notification [component, node, annotation, etc]\n   * @param nodeId id of node\n   * @param componentId id of component\n   * @param fromWorkgroupId id of workgroup that created this notification\n   * @param toWorkgroupId id of workgroup this notification is for\n   * @param message notification message\n   * @param data other extra information about this notification\n   * @param groupId id that groups multiple notifications together\n   * @returns newly created notification object\n   */\n  createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data = null, groupId = null) {\n    let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n    let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    let componentType = null;\n    if (component != null) {\n      componentType = component.type;\n    }\n    return {\n      id: null,\n      type: notificationType,\n      nodeId: nodeId,\n      groupId: groupId,\n      componentId: componentId,\n      componentType: componentType,\n      nodePosition: nodePosition,\n      nodePositionAndTitle: nodePositionAndTitle,\n      fromWorkgroupId: fromWorkgroupId,\n      toWorkgroupId: toWorkgroupId,\n      message: message,\n      data: data,\n      timeGenerated: Date.parse(new Date()),\n      timeDismissed: null\n    };\n  }\n\n  /**\n   * Retrieves notifications from the server\n   */\n  retrieveNotifications(toWorkgroupId = null) {\n\n    let notificationURL = this.ConfigService.getNotificationURL();\n\n    if (notificationURL == null) {\n      // the notification url is null most likely because we are in preview mode\n      return Promise.resolve(this.notifications);\n    } else {\n      // the notification url is not null so we will retrieve the notifications\n      let config = {\n        method: \"GET\",\n        url: this.ConfigService.getNotificationURL(),\n        params: {}\n      };\n      if (toWorkgroupId != null) {\n        config.params.toWorkgroupId = toWorkgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n\n      return this.$http(config).then((response) => {\n        this.notifications = response.data;\n        // populate nodePosition and nodePositionAndTitle, where applicable\n        if (this.notifications != null) {\n          this.notifications.map((notification) => {\n            if (notification.nodeId != null) {\n              notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n              notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n            }\n            if (notification.data != null) {\n              // parse the data string into a JSON object\n              notification.data = angular.fromJson(notification.data);\n            }\n          });\n        } else {\n          this.notifications = [];\n        }\n\n        return this.notifications;\n      });\n    }\n  }\n\n  /**\n   * Dismisses the specified notification\n   * @param notification\n   */\n  dismissNotification(notification) {\n    this.dismissNotificationToServer(notification);\n  }\n\n  /**\n   * Handle creating notification for score\n   * @param notificationForScore\n   */\n  sendNotificationForScore(notificationForScore) {\n    let notificationType = notificationForScore.notificationType;\n    if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\n      // notify both teacher and student at the same time\n      let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n      let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n      let notificationData = {};\n      if (notificationForScore.isAmbient) {\n        notificationData.isAmbient = true;\n      }\n      if (notificationForScore.dismissCode != null) {\n        notificationData.dismissCode = notificationForScore.dismissCode;\n      }\n      if (notificationForScore.isNotifyStudent) {\n        // send notification to student\n        let toWorkgroupId = this.ConfigService.getWorkgroupId();\n        let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n        // replace variables like {{score}} and {{dismissCode}} with actual values\n        notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\n        notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n        let notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n          fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n          // show local notification\n          this.$rootScope.$broadcast('newNotification', savedNotification);\n        });\n      }\n\n      if (notificationForScore.isNotifyTeacher) {\n        // send notification to teacher\n        let toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n        let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n        // replace variables like {{score}} and {{dismissCode}} with actual values\n        notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\n        notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n        let notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n          fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n          // send notification in real-time so teacher sees this right away\n          let messageType = \"CRaterResultNotification\";\n          this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n        });\n      }\n    }\n  }\n\n  /**\n   * Saves the notification for the logged-in user\n   * @param notification\n   */\n  saveNotificationToServer(notification) {\n\n    if (this.ConfigService.isPreview()) {\n\n      // if we're in preview, don't make any request to the server but pretend we did\n      let deferred = this.$q.defer();\n      deferred.resolve(notification);\n      return deferred.promise;\n\n    } else {\n\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getNotificationURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      let params = {};\n      if (notification.id != null) {\n        params.notificationId = notification.id;\n      }\n      params.periodId = this.ConfigService.getPeriodId();\n      params.fromWorkgroupId = notification.fromWorkgroupId;\n      params.toWorkgroupId = notification.toWorkgroupId;\n      params.nodeId = notification.nodeId;\n      params.componentId = notification.componentId;\n      params.componentType = notification.componentType;\n      params.type = notification.type;\n      params.message = notification.message;\n      if (notification.data != null) {\n        params.data = angular.toJson(notification.data);\n      }\n      if (notification.groupId != null) {\n        params.groupId = notification.groupId;\n      }\n      params.timeGenerated = notification.timeGenerated;\n      if (notification.timeDismissed != null) {\n        params.timeDismissed = notification.timeDismissed;\n      }\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notification = result.data;\n        if (notification.data != null) {\n          // parse the data string into a JSON object\n          notification.data = angular.fromJson(notification.data);\n        }\n        return notification;\n      })\n    }\n  }\n\n  /**\n   * Saves the notification for the logged-in user\n   * @param notification\n   */\n  dismissNotificationToServer(notification) {\n\n    notification.timeDismissed = Date.parse(new Date());  // set dismissed time to now.\n\n    if (this.ConfigService.isPreview()) {\n\n      // if we're in preview, don't make any request to the server but pretend we did\n      let deferred = this.$q.defer();\n      deferred.resolve(notification);\n      return deferred.promise;\n\n    } else {\n      if (notification.id == null) {\n        // cannot dismiss a notification that hasn't been saved to db yet\n        return;\n      }\n\n      let config = {\n        method: \"POST\",\n        url: this.ConfigService.getNotificationURL() + \"/dismiss\",\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      let params = {};\n      params.notificationId = notification.id;\n      params.fromWorkgroupId = notification.fromWorkgroupId;\n      params.toWorkgroupId = notification.toWorkgroupId;\n      params.type = notification.type;\n      if (notification.groupId != null) {\n        params.groupId = notification.groupId;\n      }\n      params.timeDismissed = notification.timeDismissed;\n      config.data = $.param(params);\n\n      return this.$http(config).then((result) => {\n        let notification = result.data;\n        if (notification.data != null) {\n          // parse the data string into a JSON object\n          notification.data = angular.fromJson(notification.data);\n        }\n        this.$rootScope.$broadcast('notificationChanged', notification);\n        return notification;\n      })\n    }\n  }\n\n  /**\n   * Returns all notifications for the given parameters\n   * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId, type)\n   * @returns array of notificaitons\n   */\n  getNotifications(args) {\n    let notifications = this.notifications;\n\n    if (args) {\n      // loop through all the given parameters and find notifications that match\n      for (let p in args) {\n        if (args.hasOwnProperty(p) && args[p] !== null) {\n          notifications = notifications.filter(\n            notification => {\n              return (notification[p] === args[p]);\n            }\n          );\n        }\n      }\n    }\n\n    return notifications;\n  }\n\n  /**\n   * Returns all CRaterResult notifications for given parameters\n   * TODO: expand to encompass other notification types that should be shown in classroom monitor\n   * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId)\n   * @returns array of cRater notificaitons\n   */\n  getAlertNotifications(args) {\n    // get all CRaterResult notifications for the given parameters\n    // TODO: expand to encompass other notification types that should be shown to teacher\n    let alertNotifications = [];\n    let nodeId = args.nodeId;\n    let params = args;\n    params.type = 'CRaterResult';\n\n    if (args.periodId) {\n      params.periodId = args.periodId === -1 ? null : args.periodId;\n    }\n\n    if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\n      let groupNode = this.ProjectService.getNodeById(nodeId);\n      let children = groupNode.ids;\n      for (let childId of children) {\n        params.nodeId = childId;\n        let childAlerts = this.getAlertNotifications(args);\n        alertNotifications = alertNotifications.concat(childAlerts);\n      }\n    } else {\n      alertNotifications = this.getNotifications(params);\n    }\n\n    return alertNotifications;\n  }\n}\n\nNotificationService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentWebSocketService',\n  'UtilService'\n];\n\nexport default NotificationService;\n"]}