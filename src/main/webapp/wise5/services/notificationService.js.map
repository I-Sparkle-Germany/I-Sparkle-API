{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","workgroupId","getWorkgroupId","mode","getMode","toWorkgroupId","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","componentId","fromWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUsernameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","isPreview","deferred","defer","promise","headers","notificationId","toJson","$","param","result","args","p","hasOwnProperty","filter","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService,\n      StudentWebSocketService, UtilService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.UtilService = UtilService;\n    this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n    this.$rootScope.$on('newNotification', (event, notification) => {\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const mode = this.ConfigService.getMode();\n      if (mode === 'classroomMonitor' || workgroupId === notification.toWorkgroupId) {\n        notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n        notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n        // check if this notification is new or is an update\n        let isNotificationNew = true;\n        for (let n = 0; n < this.notifications.length; n++) {\n          const currentNotification = this.notifications[n];\n          if (currentNotification.id === notification.id) {\n            // existing notification (with same id) found, so it's an update\n            this.notifications[n] = notification;\n            isNotificationNew = false;\n            this.$rootScope.$broadcast('notificationChanged', notification);\n            break;\n          }\n        }\n        if (isNotificationNew) {\n          this.notifications.push(notification);\n          this.$rootScope.$broadcast('notificationAdded', notification);\n        }\n      }\n    });\n  }\n\n  /**\n   * Creates a new notification object\n   * @param notificationType type of notification [component, node, annotation, etc]\n   * @param nodeId id of node\n   * @param componentId id of component\n   * @param fromWorkgroupId id of workgroup that created this notification\n   * @param toWorkgroupId id of workgroup this notification is for\n   * @param message notification message\n   * @param data other extra information about this notification\n   * @param groupId id that groups multiple notifications together\n   * @returns newly created notification object\n   */\n  createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data = null, groupId = null) {\n    const nodePosition = this.ProjectService.getNodePositionById(nodeId);\n    const nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    let componentType = null;\n    if (component != null) {\n      componentType = component.type;\n    }\n    return {\n      id: null,\n      type: notificationType,\n      nodeId: nodeId,\n      groupId: groupId,\n      componentId: componentId,\n      componentType: componentType,\n      nodePosition: nodePosition,\n      nodePositionAndTitle: nodePositionAndTitle,\n      fromWorkgroupId: fromWorkgroupId,\n      toWorkgroupId: toWorkgroupId,\n      message: message,\n      data: data,\n      timeGenerated: Date.parse(new Date()),\n      timeDismissed: null\n    };\n  }\n\n  retrieveNotifications(toWorkgroupId = null) {\n    const notificationURL = this.ConfigService.getNotificationURL();\n    if (notificationURL == null) {\n      // the notification url is null most likely because we are in preview mode\n      return Promise.resolve(this.notifications);\n    } else {\n      // the notification url is not null so we will retrieve the notifications\n      const config = {\n        method: 'GET',\n        url: this.ConfigService.getNotificationURL(),\n        params: {}\n      };\n      if (toWorkgroupId != null) {\n        config.params.toWorkgroupId = toWorkgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n\n      return this.$http(config).then((response) => {\n        this.notifications = response.data;\n        // populate nodePosition and nodePositionAndTitle, where applicable\n        if (this.notifications != null) {\n          this.notifications.map((notification) => {\n            if (notification.nodeId != null) {\n              notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n              notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n            }\n            if (notification.data != null) {\n              notification.data = angular.fromJson(notification.data);\n            }\n          });\n        } else {\n          this.notifications = [];\n        }\n        return this.notifications;\n      });\n    }\n  }\n\n  dismissNotification(notification) {\n    this.dismissNotificationToServer(notification);\n  }\n\n  sendNotificationForScore(notificationForScore) {\n    const notificationType = notificationForScore.notificationType;\n    if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\n      // notify both teacher and student at the same time\n      const fromWorkgroupId = this.ConfigService.getWorkgroupId();\n      const notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n      const notificationData = {};\n      if (notificationForScore.isAmbient) {\n        notificationData.isAmbient = true;\n      }\n      if (notificationForScore.dismissCode != null) {\n        notificationData.dismissCode = notificationForScore.dismissCode;\n      }\n      if (notificationForScore.isNotifyStudent) {\n        // send notification to student\n        const toWorkgroupId = this.ConfigService.getWorkgroupId();\n        let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n        // replace variables like {{score}} and {{dismissCode}} with actual values\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{username}}', this.ConfigService.getUsernameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{score}}', notificationForScore.score);\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{dismissCode}}', notificationForScore.dismissCode);\n\n        const notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n          fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToStudent);\n        // this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n        //   this.$rootScope.$broadcast('newNotification', savedNotification);\n        // });\n      }\n\n      if (notificationForScore.isNotifyTeacher) {\n        // send notification to teacher\n        const toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n        let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n        // replace variables like {{score}} and {{dismissCode}} with actual values\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{username}}', this.ConfigService.getUsernameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{score}}', notificationForScore.score);\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{dismissCode}}', notificationForScore.dismissCode);\n\n        const notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n          fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToTeacher);\n        // this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n        //   // send notification in real-time so teacher sees this right away\n        //   const messageType = 'CRaterResultNotification';\n        //   this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n        // });\n      }\n    }\n  }\n\n  saveNotificationToServer(notification) {\n    if (this.ConfigService.isPreview()) {\n      // if we're in preview, don't make any request to the server but pretend we did\n      const deferred = this.$q.defer();\n      deferred.resolve(notification);\n      return deferred.promise;\n    } else {\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getNotificationURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      const params = {\n        periodId: this.ConfigService.getPeriodId(),\n        fromWorkgroupId: notification.fromWorkgroupId,\n        toWorkgroupId: notification.toWorkgroupId,\n        nodeId: notification.nodeId,\n        componentId: notification.componentId,\n        componentType: notification.componentType,\n        type: notification.type,\n        message: notification.message\n      };\n      if (notification.id != null) {\n        params.notificationId = notification.id;\n      }\n      if (notification.data != null) {\n        params.data = angular.toJson(notification.data);\n      }\n      if (notification.groupId != null) {\n        params.groupId = notification.groupId;\n      }\n      params.timeGenerated = notification.timeGenerated;\n      if (notification.timeDismissed != null) {\n        params.timeDismissed = notification.timeDismissed;\n      }\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        const notification = result.data;\n        if (notification.data != null) {\n          notification.data = angular.fromJson(notification.data);\n        }\n        return notification;\n      });\n    }\n  }\n\n  dismissNotificationToServer(notification) {\n    notification.timeDismissed = Date.parse(new Date());\n\n    if (this.ConfigService.isPreview()) {\n      // if we're in preview, don't make any request to the server but pretend we did\n      const deferred = this.$q.defer();\n      deferred.resolve(notification);\n      return deferred.promise;\n    } else {\n      if (notification.id == null) {\n        // cannot dismiss a notification that hasn't been saved to db yet\n        return;\n      }\n\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getNotificationURL() + '/dismiss',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      };\n\n      const params = {\n        notificationId: notification.id,\n        fromWorkgroupId: notification.fromWorkgroupId,\n        toWorkgroupId: notification.toWorkgroupId,\n        type: notification.type,\n        timeDismissed: notification.timeDismissed\n      };\n      if (notification.groupId != null) {\n        params.groupId = notification.groupId;\n      }\n      config.data = $.param(params);\n      return this.$http(config).then((result) => {\n        const notification = result.data;\n        if (notification.data != null) {\n          notification.data = angular.fromJson(notification.data);\n        }\n        this.$rootScope.$broadcast('notificationChanged', notification);\n        return notification;\n      });\n    }\n  }\n\n  /**\n   * Returns all notifications for the given parameters\n   * @param args object of optional parameters to filter on\n   * (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId, type)\n   * @returns array of notificaitons\n   */\n  getNotifications(args) {\n    let notifications = this.notifications;\n    if (args) {\n      for (let p in args) {\n        if (args.hasOwnProperty(p) && args[p] !== null) {\n          notifications = notifications.filter(\n            notification => {\n              return (notification[p] === args[p]);\n            }\n          );\n        }\n      }\n    }\n    return notifications;\n  }\n\n  /**\n   * Returns all CRaterResult notifications for given parameters\n   * TODO: expand to encompass other notification types that should be shown in classroom monitor\n   * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId)\n   * @returns array of cRater notificaitons\n   */\n  getAlertNotifications(args) {\n    // get all CRaterResult notifications for the given parameters\n    // TODO: expand to encompass other notification types that should be shown to teacher\n    let alertNotifications = [];\n    const nodeId = args.nodeId;\n    const params = args;\n    params.type = 'CRaterResult';\n\n    if (args.periodId) {\n      params.periodId = args.periodId === -1 ? null : args.periodId;\n    }\n\n    if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\n      const groupNode = this.ProjectService.getNodeById(nodeId);\n      const children = groupNode.ids;\n      for (let childId of children) {\n        params.nodeId = childId;\n        const childAlerts = this.getAlertNotifications(args);\n        alertNotifications = alertNotifications.concat(childAlerts);\n      }\n    } else {\n      alertNotifications = this.getNotifications(params);\n    }\n    return alertNotifications;\n  }\n}\n\nNotificationService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentWebSocketService',\n  'UtilService'\n];\n\nexport default NotificationService;\n"]}