{"version":3,"sources":["notificationService.es6"],"names":[],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $rootScope, ConfigService, ProjectService) {\n\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                if (this.ConfigService.getWorkgroupId() === notification.toWorkgroupId) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                    this.notifications.push(notification);\n                }\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data=null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n        let config = {};\n        config.method = 'GET';\n        config.url = this.ConfigService.getNotificationURL();\n        config.params = {};\n        if (toWorkgroupId != null) {\n            config.params.toWorkgroupId = toWorkgroupId;\n        } else {\n            config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            config.params.periodId = this.ConfigService.getPeriodId();\n        }\n        return this.$http(config).then((response) => {\n            this.notifications = response.data;\n            // populate nodePosition and nodePositionAndTitle, where applicable\n            this.notifications.map((notification) => {\n                if (notification.nodeId != null) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                }\n            });\n\n            return this.notifications;\n        });\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL();\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        if (notification.id != null) {\n            params.notificationId = notification.id;\n        }\n        params.periodId = this.ConfigService.getPeriodId();\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.nodeId = notification.nodeId;\n        params.componentId = notification.componentId;\n        params.componentType = notification.componentType;\n        params.type = notification.type;\n        params.message = notification.message;\n        if (notification.data != null) {\n            params.data = angular.toJson(notification.data);\n        }\n        params.timeGenerated = notification.timeGenerated;\n        if (notification.timeDismissed != null) {\n            params.timeDismissed = notification.timeDismissed;\n        }\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            return notification;\n        })\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default NotificationService;\n"]}