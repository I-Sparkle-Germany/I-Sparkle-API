{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","workgroupId","getWorkgroupId","mode","getMode","toWorkgroupId","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","componentId","fromWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUserNameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","savedNotification","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","messageType","sendStudentToTeacherMessage","isPreview","deferred","defer","promise","headers","notificationId","toJson","$","param","result","filter","args","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","i","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $q, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\n\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                let workgroupId = this.ConfigService.getWorkgroupId();\n                let mode = this.ConfigService.getMode();\n                if (mode === 'classroomMonitor' || workgroupId === notification.toWorkgroupId) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                    // check if this notification is new or is an update\n                    let isNotificationNew = true;\n                    for (let n = 0; n < this.notifications.length; n++) {\n                        let currentNotification = this.notifications[n];\n                        if (currentNotification.id == notification.id) {\n                            // existing notification (with same id) found, so it's an update\n                            this.notifications[n] = notification;\n                            isNotificationNew = false;\n                            this.$rootScope.$broadcast('notificationChanged', notification);\n                            break;\n                        }\n                    }\n                    if (isNotificationNew) {\n                        // this is a new notification\n                        this.notifications.push(notification);\n                        this.$rootScope.$broadcast('notificationAdded', notification);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @param groupId id that groups multiple notifications together\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data = null, groupId = null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            groupId: groupId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n\n        let notificationURL = this.ConfigService.getNotificationURL();\n\n        if (notificationURL == null) {\n            // the notification url is null most likely because we are in preview mode\n            return Promise.resolve(this.notifications);\n        } else {\n            // the notification url is not null so we will retrieve the notifications\n            let config = {\n                method: \"GET\",\n                url: this.ConfigService.getNotificationURL(),\n                params: {}\n            };\n            if (toWorkgroupId != null) {\n                config.params.toWorkgroupId = toWorkgroupId;\n            } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n\n            return this.$http(config).then((response) => {\n                this.notifications = response.data;\n                // populate nodePosition and nodePositionAndTitle, where applicable\n                if (this.notifications != null) {\n                    this.notifications.map((notification) => {\n                        if (notification.nodeId != null) {\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                        }\n                        if (notification.data != null) {\n                            // parse the data string into a JSON object\n                            notification.data = angular.fromJson(notification.data);\n                        }\n                    });\n                } else {\n                    this.notifications = [];\n                }\n\n                return this.notifications;\n            });\n        }\n    }\n\n    /**\n     * Dismisses the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.dismissNotificationToServer(notification);\n    }\n\n    /**\n     * Handle creating notification for score\n     * @param notificationForScore\n     */\n    sendNotificationForScore(notificationForScore) {\n        let notificationType = notificationForScore.notificationType;\n        if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\n            // notify both teacher and student at the same time\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n            let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n            let notificationData = {};\n            if (notificationForScore.isAmbient) {\n                notificationData.isAmbient = true;\n            }\n            if (notificationForScore.dismissCode != null) {\n                notificationData.dismissCode = notificationForScore.dismissCode;\n            }\n            if (notificationForScore.isNotifyStudent) {\n                // send notification to student\n                let toWorkgroupId = this.ConfigService.getWorkgroupId();\n                let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n                // replace variables like {{score}} and {{dismissCode}} with actual values\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\n                notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n                let notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n                this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n                    // show local notification\n                    this.$rootScope.$broadcast('newNotification', savedNotification);\n                });\n            }\n\n            if (notificationForScore.isNotifyTeacher) {\n                // send notification to teacher\n                let toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n                let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n                // replace variables like {{score}} and {{dismissCode}} with actual values\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\n                notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n\n                let notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n                    fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n                this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n                    // send notification in real-time so teacher sees this right away\n                    let messageType = \"CRaterResultNotification\";\n                    this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n                });\n            }\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        if (this.ConfigService.isPreview()) {\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            let deferred = this.$q.defer();\n            deferred.resolve(notification);\n            return deferred.promise;\n\n        } else {\n\n            let config = {\n                method: \"POST\",\n                url: this.ConfigService.getNotificationURL(),\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            };\n\n            let params = {};\n            if (notification.id != null) {\n                params.notificationId = notification.id;\n            }\n            params.periodId = this.ConfigService.getPeriodId();\n            params.fromWorkgroupId = notification.fromWorkgroupId;\n            params.toWorkgroupId = notification.toWorkgroupId;\n            params.nodeId = notification.nodeId;\n            params.componentId = notification.componentId;\n            params.componentType = notification.componentType;\n            params.type = notification.type;\n            params.message = notification.message;\n            if (notification.data != null) {\n                params.data = angular.toJson(notification.data);\n            }\n            if (notification.groupId != null) {\n                params.groupId = notification.groupId;\n            }\n            params.timeGenerated = notification.timeGenerated;\n            if (notification.timeDismissed != null) {\n                params.timeDismissed = notification.timeDismissed;\n            }\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let notification = result.data;\n                if (notification.data != null) {\n                    // parse the data string into a JSON object\n                    notification.data = angular.fromJson(notification.data);\n                }\n                return notification;\n            })\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    dismissNotificationToServer(notification) {\n\n        notification.timeDismissed = Date.parse(new Date());  // set dismissed time to now.\n\n        if (this.ConfigService.isPreview()) {\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            let deferred = this.$q.defer();\n            deferred.resolve(notification);\n            return deferred.promise;\n\n        } else {\n            if (notification.id == null) {\n                // cannot dismiss a notification that hasn't been saved to db yet\n                return;\n            }\n\n            let config = {\n                method: \"POST\",\n                url: this.ConfigService.getNotificationURL() + \"/dismiss\",\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            };\n\n            let params = {};\n            params.notificationId = notification.id;\n            params.fromWorkgroupId = notification.fromWorkgroupId;\n            params.toWorkgroupId = notification.toWorkgroupId;\n            params.type = notification.type;\n            if (notification.groupId != null) {\n                params.groupId = notification.groupId;\n            }\n            params.timeDismissed = notification.timeDismissed;\n            config.data = $.param(params);\n\n            return this.$http(config).then((result) => {\n                let notification = result.data;\n                if (notification.data != null) {\n                    // parse the data string into a JSON object\n                    notification.data = angular.fromJson(notification.data);\n                }\n                this.$rootScope.$broadcast('notificationChanged', notification);\n                return notification;\n            })\n        }\n    }\n\n    /**\n     * Returns all notifications for a given nodeId and workgroupId\n     * @param nodeId the nodeId to look for (optional)\n     * @param workgroupId the workgroupId to look for (optional)\n     * TODO: update this to allow for more parameters (like periodId, maybe componentID?)\n     */\n    getNotifications(nodeId, workgroupId) {\n        if (nodeId || workgroupId) {\n            return this.notifications.filter(\n                notification => {\n                    if (nodeId && workgroupId) {\n                        return (notification.nodeId === nodeId && notification.toWorkgroupId === workgroupId);\n                    } else if (nodeId) {\n                        return (notification.nodeId === nodeId);\n                    } else if (workgroupId) {\n                        return (notification.toWorkgroupId === workgroupId);\n                    }\n                }\n            );\n        } else {\n            return this.notifications;\n        }\n    }\n\n    /**\n     * Returns all CRaterResult notifications for given workgroup and node\n     * TODO: expand to encompass other notification types that should be shown in classroom monitor\n     * @param args object of optional parameters to filter on (nodeId, workgroupId, periodId)\n     * @returns array of cRater notificaitons\n     */\n    getAlertNotifications(args) {\n        // get all CRaterResult notifications for the giver parameters\n        // TODO: expand to encompass other notification types that should be shown to teacher\n        let notifications = [];\n        let alertNotifications = [];\n        let nodeId = args.nodeId;\n        let workgroupId = args.workgroupId;\n        let periodId = args.periodId;\n\n        if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\n            let groupNode = this.ProjectService.getNodeById(nodeId);\n            let children = groupNode.ids;\n            let n = children.length;\n\n            for (let i = 0; i < n; i++) {\n                let childId = children[i];\n                let childAlerts = this.getAlertNotifications({nodeId: childId, workgroupId: workgroupId, periodId: periodId});\n                alertNotifications = alertNotifications.concat(childAlerts);\n            }\n        } else {\n            notifications = this.getNotifications(nodeId, workgroupId);\n            alertNotifications = notifications.filter(\n                notification => {\n                    if (periodId && periodId !== -1) {\n                        return (notification.type === 'CRaterResult' && notification.periodId === periodId);\n                    } else {\n                        return (notification.type === 'CRaterResult');\n                    }\n                }\n            );\n        }\n\n        return alertNotifications;\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default NotificationService;\n"]}