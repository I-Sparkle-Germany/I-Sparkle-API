{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$q","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","setNotificationNodePositionAndTitle","isNotificationNew","n","length","currentNotification","id","$broadcast","push","notificationType","nodeId","componentId","fromWorkgroupId","toWorkgroupId","message","data","groupId","nodePosition","getNodePositionById","nodePositionAndTitle","getNodePositionAndTitleByNodeId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","isPreview","Promise","resolve","config","method","url","getNotificationURL","params","getMode","getWorkgroupId","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","dismissCode","notificationMessageToStudent","replace","getUsernameByWorkgroupId","score","notificationToStudent","createNewNotification","saveNotificationToServer","getTeacherWorkgroupId","notificationMessageToTeacher","notificationToTeacher","pretendServerRequest","notificationId","toJson","headers","$","param","result","deferred","defer","promise","args","p","hasOwnProperty","filter","alertNotifications","isGroupNode","groupNode","getNodeById","children","ids","childId","childAlerts","getAlertNotifications","concat","getNotifications","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n  constructor($http, $q, $rootScope, ConfigService, ProjectService,\n      StudentWebSocketService, UtilService) {\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentWebSocketService = StudentWebSocketService;\n    this.UtilService = UtilService;\n    this.notifications = [];\n\n    this.$rootScope.$on('newNotificationReceived', (event, notification) => {\n      this.setNotificationNodePositionAndTitle(notification);\n      let isNotificationNew = true;\n      for (let n = 0; n < this.notifications.length; n++) {\n        const currentNotification = this.notifications[n];\n        if (currentNotification.id === notification.id) {\n          this.notifications[n] = notification;\n          isNotificationNew = false;\n          this.$rootScope.$broadcast('notificationChanged', notification);\n          break;\n        }\n      }\n      if (isNotificationNew) {\n        this.notifications.push(notification);\n        this.$rootScope.$broadcast('notificationChanged', notification);\n      }\n    });\n  }\n\n  /**\n   * Creates a new notification object\n   * @param notificationType type of notification [component, node, annotation, etc]\n   * @param nodeId id of node\n   * @param componentId id of component\n   * @param fromWorkgroupId id of workgroup that created this notification\n   * @param toWorkgroupId id of workgroup this notification is for\n   * @param message notification message\n   * @param data other extra information about this notification\n   * @param groupId id that groups multiple notifications together\n   * @returns newly created notification object\n   */\n  createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data = null, groupId = null) {\n    const nodePosition = this.ProjectService.getNodePositionById(nodeId);\n    const nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    let componentType = null;\n    if (component != null) {\n      componentType = component.type;\n    }\n    return {\n      id: null,\n      type: notificationType,\n      nodeId: nodeId,\n      groupId: groupId,\n      componentId: componentId,\n      componentType: componentType,\n      nodePosition: nodePosition,\n      nodePositionAndTitle: nodePositionAndTitle,\n      fromWorkgroupId: fromWorkgroupId,\n      toWorkgroupId: toWorkgroupId,\n      message: message,\n      data: data,\n      timeGenerated: Date.parse(new Date()),\n      timeDismissed: null\n    };\n  }\n\n\n  retrieveNotifications(toWorkgroupId = null) {\n    if (this.ConfigService.isPreview()) {\n      return Promise.resolve(this.notifications);\n    } else {\n      const config = {\n        method: 'GET',\n        url: this.ConfigService.getNotificationURL(),\n        params: {}\n      };\n      if (toWorkgroupId != null) {\n        config.params.toWorkgroupId = toWorkgroupId;\n      } else if (this.ConfigService.getMode() !== 'classroomMonitor') {\n        config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n        config.params.periodId = this.ConfigService.getPeriodId();\n      }\n      return this.$http(config).then((response) => {\n        this.notifications = response.data;\n        this.notifications.map((notification) => {\n          this.setNotificationNodePositionAndTitle(notification);\n          if (notification.data != null) {\n            notification.data = angular.fromJson(notification.data);\n          }\n        });\n        return this.notifications;\n      });\n    }\n  }\n\n  setNotificationNodePositionAndTitle(notification) {\n    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n  }\n\n  dismissNotification(notification) {\n    this.dismissNotificationToServer(notification);\n  }\n\n  sendNotificationForScore(notificationForScore) {\n    const notificationType = notificationForScore.notificationType;\n    if (notificationForScore.isNotifyTeacher || notificationForScore.isNotifyStudent) {\n      const fromWorkgroupId = this.ConfigService.getWorkgroupId();\n      const notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n      const notificationData = {};\n      if (notificationForScore.isAmbient) {\n        notificationData.isAmbient = true;\n      }\n      if (notificationForScore.dismissCode != null) {\n        notificationData.dismissCode = notificationForScore.dismissCode;\n      }\n      if (notificationForScore.isNotifyStudent) {\n        const toWorkgroupId = this.ConfigService.getWorkgroupId();\n        let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{username}}', this.ConfigService.getUsernameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{score}}', notificationForScore.score);\n        notificationMessageToStudent = notificationMessageToStudent.replace('{{dismissCode}}', notificationForScore.dismissCode);\n\n        const notificationToStudent = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n            fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToStudent);\n      }\n\n      if (notificationForScore.isNotifyTeacher) {\n        const toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n        let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{username}}', this.ConfigService.getUsernameByWorkgroupId(fromWorkgroupId));\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{score}}', notificationForScore.score);\n        notificationMessageToTeacher = notificationMessageToTeacher.replace('{{dismissCode}}', notificationForScore.dismissCode);\n\n        const notificationToTeacher = this.createNewNotification(notificationType, notificationForScore.nodeId, notificationForScore.componentId,\n            fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n        this.saveNotificationToServer(notificationToTeacher);\n      }\n    }\n  }\n\n  saveNotificationToServer(notification) {\n    if (this.ConfigService.isPreview()) {\n      return this.pretendServerRequest(notification);\n    } else {\n      const params = {\n        periodId: this.ConfigService.getPeriodId(),\n        fromWorkgroupId: notification.fromWorkgroupId,\n        toWorkgroupId: notification.toWorkgroupId,\n        nodeId: notification.nodeId,\n        componentId: notification.componentId,\n        componentType: notification.componentType,\n        type: notification.type,\n        message: notification.message\n      };\n      if (notification.id != null) {\n        params.notificationId = notification.id;\n      }\n      if (notification.data != null) {\n        params.data = angular.toJson(notification.data);\n      }\n      if (notification.groupId != null) {\n        params.groupId = notification.groupId;\n      }\n      params.timeGenerated = notification.timeGenerated;\n      if (notification.timeDismissed != null) {\n        params.timeDismissed = notification.timeDismissed;\n      }\n      const config = {\n        method: 'POST',\n        url: this.ConfigService.getNotificationURL(),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        data: $.param(params)\n      };\n      return this.$http(config).then((result) => {\n        const notification = result.data;\n        if (notification.data != null) {\n          notification.data = angular.fromJson(notification.data);\n        }\n        return notification;\n      });\n    }\n  }\n\n  dismissNotificationToServer(notification) {\n    notification.timeDismissed = Date.parse(new Date());\n\n    if (this.ConfigService.isPreview()) {\n      return this.pretendServerRequest(notification);\n    }\n\n    if (notification.id == null) {\n      return; // cannot dismiss a notification that hasn't been saved to db yet\n    }\n\n    const params = {\n      notificationId: notification.id,\n      fromWorkgroupId: notification.fromWorkgroupId,\n      toWorkgroupId: notification.toWorkgroupId,\n      type: notification.type,\n      timeDismissed: notification.timeDismissed\n    };\n    if (notification.groupId != null) {\n      params.groupId = notification.groupId;\n    }\n    const config = {\n      method: 'POST',\n      url: this.ConfigService.getNotificationURL() + '/dismiss',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      data: $.param(params)\n    };\n    return this.$http(config).then((result) => {\n      const notification = result.data;\n      if (notification.data != null) {\n        notification.data = angular.fromJson(notification.data);\n      }\n      this.$rootScope.$broadcast('notificationChanged', notification);\n      return notification;\n    });\n  }\n\n  pretendServerRequest(notification) {\n    const deferred = this.$q.defer();\n    deferred.resolve(notification);\n    return deferred.promise;\n  }\n\n  /**\n   * Returns all notifications for the given parameters\n   * @param args object of optional parameters to filter on\n   * (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId, type)\n   * @returns array of notificaitons\n   */\n  getNotifications(args) {\n    let notifications = this.notifications;\n    if (args) {\n      for (let p in args) {\n        if (args.hasOwnProperty(p) && args[p] !== null) {\n          notifications = notifications.filter(\n            notification => {\n              return (notification[p] === args[p]);\n            }\n          );\n        }\n      }\n    }\n    return notifications;\n  }\n\n  /**\n   * Returns all CRaterResult notifications for given parameters\n   * TODO: expand to encompass other notification types that should be shown in classroom monitor\n   * @param args object of optional parameters to filter on (e.g. nodeId, componentId, toWorkgroupId, fromWorkgroupId, periodId)\n   * @returns array of cRater notificaitons\n   */\n  getAlertNotifications(args) {\n    // get all CRaterResult notifications for the given parameters\n    // TODO: expand to encompass other notification types that should be shown to teacher\n    let alertNotifications = [];\n    const nodeId = args.nodeId;\n    const params = args;\n    params.type = 'CRaterResult';\n\n    if (args.periodId) {\n      params.periodId = args.periodId === -1 ? null : args.periodId;\n    }\n\n    if (nodeId && this.ProjectService.isGroupNode(nodeId)) {\n      const groupNode = this.ProjectService.getNodeById(nodeId);\n      const children = groupNode.ids;\n      for (let childId of children) {\n        params.nodeId = childId;\n        const childAlerts = this.getAlertNotifications(args);\n        alertNotifications = alertNotifications.concat(childAlerts);\n      }\n    } else {\n      alertNotifications = this.getNotifications(params);\n    }\n    return alertNotifications;\n  }\n}\n\nNotificationService.$inject = [\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'StudentWebSocketService',\n  'UtilService'\n];\n\nexport default NotificationService;\n"]}