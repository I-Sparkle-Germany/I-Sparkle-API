{"version":3,"sources":["notificationService.es6"],"names":["NotificationService","$http","$rootScope","ConfigService","ProjectService","StudentWebSocketService","UtilService","notifications","$on","event","notification","getWorkgroupId","toWorkgroupId","nodePosition","getNodePositionById","nodeId","nodePositionAndTitle","getNodePositionAndTitleByNodeId","isNotificationNew","n","length","currentNotification","id","push","notificationType","componentId","fromWorkgroupId","message","data","groupId","component","getComponentByNodeIdAndComponentId","componentType","type","timeGenerated","Date","parse","timeDismissed","notificationURL","getNotificationURL","Promise","resolve","config","method","url","params","periodId","getPeriodId","then","response","map","angular","fromJson","dismissNotificationToServer","notificationForScore","isNotifyTeacher","isNotifyStudent","notificationMessageToStudent","replace","getUserNameByWorkgroupId","score","dismissCode","notificationGroupId","getRunId","generateKey","notificationData","isAmbient","notificationToStudent","createNewNotification","saveNotificationToServer","savedNotification","$broadcast","notificationMessageToTeacher","getTeacherWorkgroupId","notificationToTeacher","messageType","sendStudentToTeacherMessage","headers","notificationId","toJson","$","param","result","timeNow","$inject"],"mappings":"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","file":"notificationService.js","sourcesContent":["class NotificationService {\n    constructor($http, $rootScope, ConfigService, ProjectService, StudentWebSocketService, UtilService) {\n\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n        this.notifications = [];  // an array of notifications that students haven't seen yet.\n\n        /**\n         * We received a new notification.\n         */\n        this.$rootScope.$on('newNotification', (event, notification) => {\n            if (notification != null) {\n                if (this.ConfigService.getWorkgroupId() === notification.toWorkgroupId) {\n                    notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                    notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n                    // check if this notification is new or is an update\n                    var isNotificationNew = true;\n                    for (var n = 0; n < this.notifications.length; n++) {\n                        var currentNotification = this.notifications[n];\n                        if (currentNotification.id == notification.id) {\n                            // existing notification (with same id) found, so it's an update\n                            this.notifications[n] = notification;\n                            isNotificationNew = false;\n                        }\n                    }\n                    if (isNotificationNew) {\n                        // this is a new notification\n                        this.notifications.push(notification);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Creates a new notification object\n     * @param notificationType type of notification [component, node, annotation, etc]\n     * @param nodeId id of node\n     * @param componentId id of component\n     * @param fromWorkgroupId id of workgroup that created this notification\n     * @param toWorkgroupId id of workgroup this notification is for\n     * @param message notification message\n     * @param data other extra information about this notification\n     * @param groupId id that groups multiple notifications together\n     * @returns newly created notification object\n     */\n    createNewNotification(notificationType, nodeId, componentId, fromWorkgroupId, toWorkgroupId, message, data=null, groupId=null) {\n        let nodePosition = this.ProjectService.getNodePositionById(nodeId);\n        let nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n        let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        let componentType = null;\n        if (component != null) {\n            componentType = component.type;\n        }\n        return {\n            id: null,\n            type: notificationType,\n            nodeId: nodeId,\n            groupId: groupId,\n            componentId: componentId,\n            componentType: componentType,\n            nodePosition: nodePosition,\n            nodePositionAndTitle: nodePositionAndTitle,\n            fromWorkgroupId: fromWorkgroupId,\n            toWorkgroupId: toWorkgroupId,\n            message: message,\n            data: data,\n            timeGenerated: Date.parse(new Date()),\n            timeDismissed: null\n        };\n    }\n\n    /**\n     * Retrieves notifications from the server\n     */\n    retrieveNotifications(toWorkgroupId = null) {\n\n        var notificationURL = this.ConfigService.getNotificationURL();\n\n        if (notificationURL == null) {\n            // the notification url is null most likely because we are in preview mode\n            return Promise.resolve(this.notifications);\n        } else {\n            // the notification url is not null so we will retrieve the notifications\n            let config = {};\n            config.method = 'GET';\n            config.url = this.ConfigService.getNotificationURL();\n            config.params = {};\n            if (toWorkgroupId != null) {\n                config.params.toWorkgroupId = toWorkgroupId;\n            } else {\n                config.params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n                config.params.periodId = this.ConfigService.getPeriodId();\n            }\n\n            return this.$http(config).then((response) => {\n                this.notifications = response.data;\n                // populate nodePosition and nodePositionAndTitle, where applicable\n                if (this.notifications != null) {\n                    this.notifications.map((notification) => {\n                        if (notification.nodeId != null) {\n                            notification.nodePosition = this.ProjectService.getNodePositionById(notification.nodeId);\n                            notification.nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                            if (notification.data != null) {\n                                // parse the data string into a JSON object\n                                notification.data = angular.fromJson(notification.data);\n                            }\n                        }\n                    });\n                } else {\n                    this.notifications = [];\n                }\n\n                return this.notifications;\n            });\n        }\n    }\n\n    /**\n     * Dismisses the specified notification\n     * @param notification\n     */\n    dismissNotification(notification) {\n        this.dismissNotificationToServer(notification);\n    }\n\n    /**\n     * Handle creating notification for score\n     * @param notificationForScore\n     */\n    sendNotificationForScore(notificationForScore) {\n        let notificationType = notificationForScore.notificationType;\n        if (notificationForScore.isNotifyTeacher && notificationForScore.isNotifyStudent) {\n            // notify both teacher and student at the same time\n            let fromWorkgroupId = this.ConfigService.getWorkgroupId();\n            let toWorkgroupId = this.ConfigService.getWorkgroupId();\n            let notificationMessageToStudent = notificationForScore.notificationMessageToStudent;\n            // replace variables like {{score}} and {{dismissCode}} with actual values\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{score}}\", notificationForScore.score);\n            notificationMessageToStudent = notificationMessageToStudent.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n            let notificationGroupId = this.ConfigService.getRunId() + \"_\" + this.UtilService.generateKey(10);  // links student and teacher notifications together\n            let notificationData = {};\n            if (notificationForScore.isAmbient) {\n                notificationData.isAmbient = true;\n            }\n            if (notificationForScore.dismissCode != null) {\n                notificationData.dismissCode = notificationForScore.dismissCode;\n            }\n            // send notification to student\n            let notificationToStudent = this.createNewNotification(\n                notificationType, notificationForScore.nodeId, notificationForScore.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToStudent, notificationData, notificationGroupId);\n            this.saveNotificationToServer(notificationToStudent).then((savedNotification) => {\n                // show local notification\n                this.$rootScope.$broadcast('newNotification', savedNotification);\n            });\n\n            // also send notification to teacher\n            let notificationMessageToTeacher = notificationForScore.notificationMessageToTeacher;\n            toWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{username}}\", this.ConfigService.getUserNameByWorkgroupId(fromWorkgroupId));\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{score}}\", notificationForScore.score);\n            notificationMessageToTeacher = notificationMessageToTeacher.replace(\"{{dismissCode}}\", notificationForScore.dismissCode);\n            let notificationToTeacher = this.createNewNotification(\n                notificationType, notificationForScore.nodeId, notificationForScore.componentId, fromWorkgroupId, toWorkgroupId, notificationMessageToTeacher, notificationData, notificationGroupId);\n            this.saveNotificationToServer(notificationToTeacher).then((savedNotification) => {\n                // send notification in real-time so teacher sees this right away\n                let messageType = \"CRaterResultNotification\";\n                this.StudentWebSocketService.sendStudentToTeacherMessage(messageType, savedNotification);\n            });\n        }\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    saveNotificationToServer(notification) {\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL();\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        if (notification.id != null) {\n            params.notificationId = notification.id;\n        }\n        params.periodId = this.ConfigService.getPeriodId();\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.nodeId = notification.nodeId;\n        params.componentId = notification.componentId;\n        params.componentType = notification.componentType;\n        params.type = notification.type;\n        params.message = notification.message;\n        if (notification.data != null) {\n            params.data = angular.toJson(notification.data);\n        }\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeGenerated = notification.timeGenerated;\n        if (notification.timeDismissed != null) {\n            params.timeDismissed = notification.timeDismissed;\n        }\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n\n    /**\n     * Saves the notification for the logged-in user\n     * @param notification\n     */\n    dismissNotificationToServer(notification) {\n\n        if (notification.id == null) {\n            // cannot dismiss a notification that hasn't been saved to db yet\n            return;\n        }\n\n        let timeNow = Date.parse(new Date());\n        notification.timeDismissed = timeNow;\n\n        let config = {};\n        config.method = 'POST';\n        config.url = this.ConfigService.getNotificationURL() + \"/dismiss\";\n        config.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        let params = {};\n        params.notificationId = notification.id;\n        params.fromWorkgroupId = notification.fromWorkgroupId;\n        params.toWorkgroupId = notification.toWorkgroupId;\n        params.type = notification.type;\n        if (notification.groupId != null) {\n            params.groupId = notification.groupId;\n        }\n        params.timeDismissed = notification.timeDismissed;\n        config.data = $.param(params);\n\n        return this.$http(config).then((result) => {\n            let notification = result.data;\n            if (notification.data != null) {\n                // parse the data string into a JSON object\n                notification.data = angular.fromJson(notification.data);\n            }\n            return notification;\n        })\n    }\n}\n\nNotificationService.$inject = [\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default NotificationService;\n"]}