{"version":3,"sources":["planningService.es6"],"names":["PlanningService","ProjectService","project","planningNodes","nodeId","node","getNodeById","planning","planningNodeTemplateId","availablePlanningNodesSoFar","availablePlanningNodes","availablePlanningNode","availablePlanningNodeActual","max","push","nextAvailablePlanningNodeId","planningNodeInstance","copyNode","id","nodeIdToInsertInside","planningNodeInstanceNodeId","setIdToNode","setIdToElement","addNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","recalculatePositionsInGroup","calculateNodeOrderOfProject","nodeIdToInsertAfter","insertNodeAfterInTransitions","insertNodeAfterInGroups","parentGroup","getParentGroup","nodeIdToMove","moveNodesInside","moveNodesAfter","$inject"],"mappings":"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","file":"planningService.js","sourcesContent":["'use strict';\n\nclass PlanningService {\n  constructor(ProjectService) {\n    this.ProjectService = ProjectService;\n  };\n\n  getPlanningNodes() {\n    return this.ProjectService.project.planningNodes;\n  };\n\n  /**\n   * Check if a node is a planning node\n   * @param nodeId the node id\n   * @returns whether the node is a planning node\n   */\n  isPlanning(nodeId) {\n    const node = this.ProjectService.getNodeById(nodeId);\n    return node != null && node.planning;\n  }\n\n  /**\n   * Check if a node is a planning node instance\n   * @param nodeId the node id\n   * @returns whether the node is a planning node instance\n   */\n  isPlanningInstance(nodeId) {\n    const node = this.ProjectService.getNodeById(nodeId);\n    return node != null && node.planningNodeTemplateId;\n  }\n\n  /**\n   * Get the available planning nodes for a given group\n   * @param nodeId the node id of the group\n   * @returns an array of planning node templates\n   */\n  getAvailablePlanningNodes(nodeId) {\n    const availablePlanningNodesSoFar = [];\n    const node = this.ProjectService.getNodeById(nodeId);\n    if (node != null && node.availablePlanningNodes != null) {\n      const availablePlanningNodes = node.availablePlanningNodes;\n      for (let availablePlanningNode of availablePlanningNodes) {\n        const availablePlanningNodeActual =\n          this.ProjectService.getNodeById(availablePlanningNode.nodeId);\n        if (availablePlanningNodeActual != null) {\n          if (availablePlanningNode.max != null) {\n            availablePlanningNodeActual.max = availablePlanningNode.max;\n          }\n          availablePlanningNodesSoFar.push(availablePlanningNodeActual);\n        }\n      }\n    }\n    return availablePlanningNodesSoFar;\n  }\n\n  /**\n   * Create a planning node instance and add it to the project\n   * @param nodeId the node id of the planning node template\n   * @param nextAvailablePlanningNodeId the node id of the planning node instance\n   */\n  createPlanningNodeInstance(nodeId, nextAvailablePlanningNodeId) {\n    const planningNodeInstance = this.ProjectService.copyNode(nodeId);\n    planningNodeInstance.planningNodeTemplateId = nodeId;\n    planningNodeInstance.id = nextAvailablePlanningNodeId;\n    return planningNodeInstance;\n  }\n\n  /**\n   * Add a planning node instance inside a group node\n   * @param nodeIdToInsertInside the group id to insert into\n   * @param planningNodeInstance the planning node instance to add\n   */\n  addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance) {\n    const planningNodeInstanceNodeId = planningNodeInstance.id;\n    this.ProjectService.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n    this.ProjectService.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n    this.ProjectService.addNode(planningNodeInstance);\n    this.ProjectService.insertNodeInsideInTransitions(planningNodeInstanceNodeId, nodeIdToInsertInside);\n    this.ProjectService.insertNodeInsideInGroups(planningNodeInstanceNodeId, nodeIdToInsertInside);\n    this.ProjectService.recalculatePositionsInGroup(nodeIdToInsertInside);\n    this.ProjectService.calculateNodeOrderOfProject();\n  }\n\n  /**\n   * Add a planning node instance after a node\n   * @param nodeIdToInsertAfter the node to insert after\n   * @param planningNodeInstance the planning node instance to add\n   */\n  addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance) {\n    const planningNodeInstanceNodeId = planningNodeInstance.id;\n    this.ProjectService.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n    this.ProjectService.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n    this.ProjectService.addNode(planningNodeInstance);\n    this.ProjectService.insertNodeAfterInTransitions(planningNodeInstance, nodeIdToInsertAfter);\n    this.ProjectService.insertNodeAfterInGroups(planningNodeInstanceNodeId, nodeIdToInsertAfter);\n    const parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n    this.ProjectService.recalculatePositionsInGroup(parentGroup.id);\n    this.ProjectService.calculateNodeOrderOfProject();\n  }\n\n  /**\n   * Move a planning node instance inside a group\n   * @param nodeIdToMove the node to move\n   * @param nodeIdToInsertInside the group to move the node into\n   */\n  movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToInsertInside) {\n    this.ProjectService.moveNodesInside([nodeIdToMove], nodeIdToInsertInside);\n    this.ProjectService.recalculatePositionsInGroup(nodeIdToInsertInside);\n    this.ProjectService.calculateNodeOrderOfProject();\n  }\n\n  /**\n   * Move a planning node instance after a node\n   * @param nodeIdToMove the node to move\n   * @param nodeIdToInsertAfter the other node to move the node after\n   */\n  movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToInsertAfter) {\n    this.ProjectService.moveNodesAfter([nodeIdToMove], nodeIdToInsertAfter);\n    const parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n    this.ProjectService.recalculatePositionsInGroup(parentGroup.id);\n    this.ProjectService.calculateNodeOrderOfProject();\n  }\n}\n\nPlanningService.$inject = [\n  'ProjectService'\n];\n\nexport default PlanningService;\n"]}