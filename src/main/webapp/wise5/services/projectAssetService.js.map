{"version":3,"sources":["projectAssetService.es6"],"names":["ProjectAssetService","$q","$http","$rootScope","ConfigService","ProjectService","Upload","UtilService","projectAssets","projectAssetTotalSizeMax","getConfigParam","projectAssetUsagePercentage","assetItem","params","assetFileName","fileName","httpParams","method","url","headers","data","$","param","then","result","projectAssetsJSON","window","location","projectAssetURL","get","calculateAssetUsage","files","promises","map","file","upload","fields","progress","evt","progressPercentage","parseInt","loaded","total","success","status","config","uploadedFilename","name","alert","all","assets","projectJSONString","angular","toJson","project","allTextFiles","a","length","asset","endsWith","push","usedTextFiles","getTextFiles","textFiles","allUsedTextContent","usedTextFileNames","foundNewUsedTextFile","h","textFile","lastIndexOfSlash","lastIndexOf","substring","indexOf","used","textFileNames","projectAssetsDirectoryPath","getProjectAssetsDirectoryPath","t","textFileName","promise","$inject"],"mappings":"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","file":"projectAssetService.js","sourcesContent":["class ProjectAssetService {\n    constructor($q, $http, $rootScope, ConfigService, ProjectService, Upload, UtilService) {\n        this.$q = $q;\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.Upload = Upload;\n        this.UtilService = UtilService;\n        this.projectAssets = {};\n        this.projectAssetTotalSizeMax = this.ConfigService.getConfigParam('projectAssetTotalSizeMax');\n        this.projectAssetUsagePercentage = 0;\n    }\n\n    deleteAssetItem(assetItem) {\n\n        let params = {\n            assetFileName: assetItem.fileName\n        };\n\n        let httpParams = {\n            method: 'POST',\n            url: this.ConfigService.getConfigParam('projectAssetURL'),\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            data: $.param(params)\n        };\n\n        return this.$http(httpParams).then((result) => {\n            let projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            return projectAssetsJSON;\n        });\n    }\n\n    downloadAssetItem(assetItem) {\n      let assetFileName = assetItem.fileName;\n\n      // ask the browser to download this asset by setting the location\n      window.location = this.ConfigService.getConfigParam('projectAssetURL') + \"/download?assetFileName=\" + assetFileName;\n    }\n\n    getFullAssetItemURL(assetItem) {\n        return this.ConfigService.getConfigParam('projectBaseURL') + \"assets/\" + assetItem.fileName;\n    }\n\n    retrieveProjectAssets() {\n        var projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n        return this.$http.get(projectAssetURL).then((result) => {\n            var projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            this.calculateAssetUsage();\n            return projectAssetsJSON;\n        });\n    }\n\n    uploadAssets(files) {\n        var projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n        var promises = files.map((file) => {\n            return this.Upload.upload({\n                url: projectAssetURL,\n                fields: {\n                },\n                file: file\n            }).progress((evt) => {\n                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                //console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n            }).success((result, status, headers, config) => {\n                // Only set the projectAssets if the result is an object.\n                // Sometimes it's an error message string.\n                if (typeof result === 'object') {\n                    // upload was successful.\n                    this.projectAssets = result;\n                    let uploadedFilename = config.file.name;\n                    return uploadedFilename;\n                } else if (typeof result === 'string') {\n                    // This is an error and should be displayed to the user.\n                    alert(result);\n                }\n\n                return result;\n            });\n        });\n        return this.$q.all(promises);\n    }\n\n    /**\n     * Calculate which assets are used or not used\n     */\n    calculateAssetUsage() {\n\n        /*\n         * a list of all the project assets. each element in the list is an\n         * object that contains the file name and file size\n         */\n        var assets = this.projectAssets;\n\n        // get the project content as a string\n        var projectJSONString = angular.toJson(this.ProjectService.project);\n\n        // an array to hold the text files that the project uses\n        var allTextFiles = [];\n\n        if (assets != null && assets.files != null) {\n\n            /*\n             * loop through all the asset files to find the text files that\n             * are actually used in the project\n             */\n            for (var a = 0; a < assets.files.length; a++) {\n                var asset = assets.files[a];\n\n                if (asset != null) {\n                    var fileName = asset.fileName;\n\n                    // check if the file is a text file\n                    if (this.UtilService.endsWith(fileName, \".html\") ||\n                        this.UtilService.endsWith(fileName, \".htm\") ||\n                        this.UtilService.endsWith(fileName, \".js\")) {\n\n                        // the file is a text file\n                        allTextFiles.push(fileName);\n                    }\n                }\n            }\n        }\n\n        var usedTextFiles = [];\n\n        /*\n         * Retrieve all the text files that are used in the project. If there\n         * are no text files that are used in the project, the then() will\n         * still be called.\n         */\n        this.getTextFiles(allTextFiles).then((textFiles) => {\n\n            /*\n             * this variable will hold all the text content that is used in\n             * the project so we can look for asset references to determine\n             * which assets are used\n             */\n            var allUsedTextContent = projectJSONString;\n\n            /*\n             * used to keep track of all the text file names that are used in\n             * the project\n             */\n            var usedTextFileNames = [];\n\n            /*\n             * boolean flag that will help us determine if we need to loop\n             * all the text files again\n             */\n            var foundNewUsedTextFile = true;\n\n            /*\n             * Gather all the content for all the text files that are used.\n             * We will keep looping until we no longer find anymore new text\n             * files that are used.\n             * Say for example whale.html is used in a component in the project.\n             * whaly.html references whale.js\n             * In this case the first iteration of the while loop will find\n             * whale.html is used. Then in the second iteration of the while\n             * loop, it will find that whale.js is used.\n             */\n            while(foundNewUsedTextFile) {\n\n                /*\n                 * reset this to false so that we can tell if a new text file\n                 * is found to be used in this current iteration of the while\n                 * loop\n                 */\n                foundNewUsedTextFile = false;\n\n                // loop through all the text files\n                for (var h = 0; h < textFiles.length; h++) {\n\n                    // get a texzt file object\n                    var textFile = textFiles[h];\n\n                    if (textFile != null) {\n\n                        /*\n                         * get the url to the text file\n                         * e.g. /wise/curriculum/26/assets/whale.html\n                         */\n                        var url = textFile.config.url;\n\n                        // get the file name\n                        var fileName = '';\n\n                        // get the last index of '/'\n                        var lastIndexOfSlash = url.lastIndexOf('/');\n\n                        if (lastIndexOfSlash == -1) {\n                            // the url does not contain a '/'\n                            fileName = url;\n                        } else {\n                            /*\n                             * the url does contain a '/' so we will get everything\n                             * after it\n                             */\n                            fileName = url.substring(lastIndexOfSlash + 1);\n                        }\n\n                        /*\n                         * check if we have already found that this text file\n                         * is used\n                         */\n                        if (usedTextFileNames.indexOf(fileName) == -1) {\n                            /*\n                             * this is a file name that isn't yet in the array\n                             * of file names that are used\n                             */\n\n                            if (allUsedTextContent.indexOf(fileName) != -1) {\n                                // the file name is referenced in the content\n\n                                // add the file name to our array of used text file names\n                                usedTextFileNames.push(fileName);\n\n                                // get the file content\n                                var data = textFile.data;\n\n                                /*\n                                 * add the content of the file to our variable that\n                                 * contains all the used text content\n                                 */\n                                allUsedTextContent += data;\n\n                                /*\n                                 * set the boolean flag so that we will iterate\n                                 * the while loop again\n                                 */\n                                foundNewUsedTextFile = true;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (assets != null && assets.files != null) {\n\n                // loop through all the assets\n                for (var a = 0; a < assets.files.length; a++) {\n                    var asset = assets.files[a];\n\n                    if (asset != null) {\n                        var fileName = asset.fileName;\n\n                        if (allUsedTextContent.indexOf(fileName) != -1) {\n                            // the file is used in the project\n                            asset.used = true;\n                        } else {\n                            // the file is not used in the project\n                            asset.used = false;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Retrieve text files using a promise all\n     * @param textFileNames a list of text file names\n     * @return a promise that will retrieve all the text files\n     */\n    getTextFiles(textFileNames) {\n\n        var promises = [];\n\n        // get the project assets path e.g. /wise/curriculum/3/assets\n        var projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n\n        // loop through all the text file names\n        for (var t = 0; t < textFileNames.length; t++) {\n\n            // get an text file name\n            var textFileName = textFileNames[t];\n\n            // create a promise that will return the contents of the text file\n            var promise = this.$http.get(projectAssetsDirectoryPath + '/' + textFileName);\n\n            // add the promise to our list of promises\n            promises.push(promise);\n        }\n\n        return this.$q.all(promises);\n    }\n}\n\nProjectAssetService.$inject = [\n    '$q',\n    '$http',\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'Upload',\n    'UtilService'\n];\n\nexport default ProjectAssetService;\n"]}