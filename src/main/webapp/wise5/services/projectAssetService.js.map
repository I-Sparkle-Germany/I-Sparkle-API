{"version":3,"sources":["projectAssetService.es6"],"names":[],"mappings":";;;;;;;;;;;;IAAM;AACF,aADE,mBACF,CAAY,EAAZ,EAAgB,KAAhB,EAAuB,UAAvB,EAAmC,aAAnC,EAAkD,MAAlD,EAA0D;8BADxD,qBACwD;;AACtD,aAAK,EAAL,GAAU,EAAV,CADsD;AAEtD,aAAK,KAAL,GAAa,KAAb,CAFsD;AAGtD,aAAK,UAAL,GAAkB,UAAlB,CAHsD;AAItD,aAAK,aAAL,GAAqB,aAArB,CAJsD;AAKtD,aAAK,MAAL,GAAc,MAAd,CALsD;AAMtD,aAAK,aAAL,GAAqB,EAArB,CANsD;AAOtD,aAAK,eAAL,GAAuB,KAAK,aAAL,CAAmB,cAAnB,CAAkC,iBAAlC,CAAvB,CAPsD;AAQtD,aAAK,wBAAL,GAAgC,KAAK,aAAL,CAAmB,cAAnB,CAAkC,0BAAlC,CAAhC,CARsD;AAStD,aAAK,2BAAL,GAAmC,CAAnC,CATsD;KAA1D;;iBADE;;wCAac,WAAW;;;AAEvB,gBAAI,aAAa,EAAb,CAFmB;AAGvB,uBAAW,MAAX,GAAoB,MAApB,CAHuB;AAIvB,uBAAW,GAAX,GAAiB,KAAK,eAAL,CAJM;AAKvB,uBAAW,OAAX,GAAqB,EAAC,gBAAgB,mCAAhB,EAAtB,CALuB;;AAOvB,gBAAI,SAAS,EAAT,CAPmB;AAQvB,mBAAO,aAAP,GAAuB,UAAU,QAAV,CARA;AASvB,uBAAW,IAAX,GAAkB,EAAE,KAAF,CAAQ,MAAR,CAAlB,CATuB;;AAWvB,mBAAO,KAAK,KAAL,CAAW,UAAX,EAAuB,IAAvB,CAA4B,UAAC,MAAD,EAAY;AAC3C,oBAAI,oBAAoB,OAAO,IAAP,CADmB;AAE3C,sBAAK,aAAL,GAAqB,iBAArB,CAF2C;AAG3C,uBAAO,iBAAP,CAH2C;aAAZ,CAAnC,CAXuB;;;;gDAkBH;;;AAEpB,mBAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,eAAL,CAAf,CAAqC,IAArC,CAA0C,UAAC,MAAD,EAAY;AACzD,oBAAI,oBAAoB,OAAO,IAAP,CADiC;AAEzD,uBAAK,aAAL,GAAqB,iBAArB,CAFyD;AAGzD,uBAAO,iBAAP,CAHyD;aAAZ,CAAjD,CAFoB;;;;qCASX,OAAO;;;AAChB,gBAAI,WAAW,MAAM,GAAN,CAAU,UAAC,IAAD,EAAU;AAC/B,uBAAO,OAAK,MAAL,CAAY,MAAZ,CAAmB;AACtB,yBAAK,OAAK,eAAL;AACL,4BAAQ,EAAR;AAEA,0BAAM,IAAN;iBAJG,EAKJ,QALI,CAKK,UAAC,GAAD,EAAS;AACjB,wBAAI,qBAAqB,SAAS,QAAQ,IAAI,MAAJ,GAAa,IAAI,KAAJ,CAAnD;;AADa,iBAAT,CALL,CAQJ,OARI,CAQI,UAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,MAA1B,EAAqC;;;AAG5C,wBAAI,QAAO,uDAAP,KAAkB,QAAlB,EAA4B;;AAE5B,+BAAK,aAAL,GAAqB,MAArB,CAF4B;AAG5B,4BAAI,mBAAmB,OAAO,IAAP,CAAY,IAAZ,CAHK;AAI5B,+BAAO,gBAAP,CAJ4B;qBAAhC,MAKO,IAAI,OAAO,MAAP,KAAkB,QAAlB,EAA4B;;AAEnC,8BAAM,MAAN,EAFmC;qBAAhC;;AAKP,2BAAO,MAAP,CAb4C;iBAArC,CARX,CAD+B;aAAV,CAArB,CADY;AA0BhB,mBAAO,KAAK,EAAL,CAAQ,GAAR,CAAY,QAAZ,CAAP,CA1BgB;;;;WAxClB;;;AAsEN,oBAAoB,OAApB,GAA8B,CAAC,IAAD,EAAO,OAAP,EAAgB,YAAhB,EAA8B,eAA9B,EAA+C,QAA/C,CAA9B;;kBAEe","file":"projectAssetService.js","sourcesContent":["class ProjectAssetService {\n    constructor($q, $http, $rootScope, ConfigService, Upload) {\n        this.$q = $q;\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.Upload = Upload;\n        this.projectAssets = {};\n        this.projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n        this.projectAssetTotalSizeMax = this.ConfigService.getConfigParam('projectAssetTotalSizeMax');\n        this.projectAssetUsagePercentage = 0;\n    }\n\n    deleteAssetItem(assetItem) {\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.projectAssetURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.assetFileName = assetItem.fileName;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            return projectAssetsJSON;\n        });\n    }\n\n    retrieveProjectAssets() {\n\n        return this.$http.get(this.projectAssetURL).then((result) => {\n            var projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            return projectAssetsJSON;\n        });\n    }\n\n    uploadAssets(files) {\n        var promises = files.map((file) => {\n            return this.Upload.upload({\n                url: this.projectAssetURL,\n                fields: {\n                },\n                file: file\n            }).progress((evt) => {\n                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                //console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n            }).success((result, status, headers, config) => {\n                // Only set the projectAssets if the result is an object.\n                // Sometimes it's an error message string.\n                if (typeof result === 'object') {\n                    // upload was successful.\n                    this.projectAssets = result;\n                    let uploadedFilename = config.file.name;\n                    return uploadedFilename;\n                } else if (typeof result === 'string') {\n                    // This is an error and should be displayed to the user.\n                    alert(result);\n                }\n\n                return result;\n            });\n        });\n        return this.$q.all(promises);\n    }\n}\n\nProjectAssetService.$inject = ['$q', '$http', '$rootScope', 'ConfigService', 'Upload'];\n\nexport default ProjectAssetService;"]}