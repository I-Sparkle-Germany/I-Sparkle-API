{"version":3,"sources":["projectAssetService.es6"],"names":[],"mappings":";;;;;;;;;;;;IAAM,mB;AACF,iCAAY,EAAZ,EAAgB,KAAhB,EAAuB,UAAvB,EAAmC,aAAnC,EAAkD,MAAlD,EAA0D;AAAA;;AACtD,aAAK,EAAL,GAAU,EAAV;AACA,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,aAAL,GAAqB,EAArB;AACA,aAAK,eAAL,GAAuB,KAAK,aAAL,CAAmB,cAAnB,CAAkC,iBAAlC,CAAvB;AACA,aAAK,wBAAL,GAAgC,KAAK,aAAL,CAAmB,cAAnB,CAAkC,0BAAlC,CAAhC;AACA,aAAK,2BAAL,GAAmC,CAAnC;AACH;;;;wCAEe,S,EAAW;AAAA;;AAEvB,gBAAI,aAAa,EAAjB;AACA,uBAAW,MAAX,GAAoB,MAApB;AACA,uBAAW,GAAX,GAAiB,KAAK,eAAtB;AACA,uBAAW,OAAX,GAAqB,EAAC,gBAAgB,mCAAjB,EAArB;;AAEA,gBAAI,SAAS,EAAb;AACA,mBAAO,aAAP,GAAuB,UAAU,QAAjC;AACA,uBAAW,IAAX,GAAkB,EAAE,KAAF,CAAQ,MAAR,CAAlB;;AAEA,mBAAO,KAAK,KAAL,CAAW,UAAX,EAAuB,IAAvB,CAA4B,UAAC,MAAD,EAAY;AAC3C,oBAAI,oBAAoB,OAAO,IAA/B;AACA,sBAAK,aAAL,GAAqB,iBAArB;AACA,uBAAO,iBAAP;AACH,aAJM,CAAP;AAKH;;;4CAEmB,S,EAAW;AAC3B,mBAAO,KAAK,aAAL,CAAmB,cAAnB,CAAkC,gBAAlC,IAAsD,SAAtD,GAAkE,UAAU,QAAnF;AACH;;;gDAEuB;AAAA;;AAEpB,mBAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,eAApB,EAAqC,IAArC,CAA0C,UAAC,MAAD,EAAY;AACzD,oBAAI,oBAAoB,OAAO,IAA/B;AACA,uBAAK,aAAL,GAAqB,iBAArB;AACA,uBAAO,iBAAP;AACH,aAJM,CAAP;AAKH;;;qCAEY,K,EAAO;AAAA;;AAChB,gBAAI,WAAW,MAAM,GAAN,CAAU,UAAC,IAAD,EAAU;AAC/B,uBAAO,OAAK,MAAL,CAAY,MAAZ,CAAmB;AACtB,yBAAK,OAAK,eADY;AAEtB,4BAAQ,EAFc;AAItB,0BAAM;AAJgB,iBAAnB,EAKJ,QALI,CAKK,UAAC,GAAD,EAAS;AACjB,wBAAI,qBAAqB,SAAS,QAAQ,IAAI,MAAZ,GAAqB,IAAI,KAAlC,CAAzB;AACA;AACH,iBARM,EAQJ,OARI,CAQI,UAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,MAA1B,EAAqC;AAC5C;AACA;AACA,wBAAI,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAtB,EAAgC;AAC5B;AACA,+BAAK,aAAL,GAAqB,MAArB;AACA,4BAAI,mBAAmB,OAAO,IAAP,CAAY,IAAnC;AACA,+BAAO,gBAAP;AACH,qBALD,MAKO,IAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AACnC;AACA,8BAAM,MAAN;AACH;;AAED,2BAAO,MAAP;AACH,iBAtBM,CAAP;AAuBH,aAxBc,CAAf;AAyBA,mBAAO,KAAK,EAAL,CAAQ,GAAR,CAAY,QAAZ,CAAP;AACH;;;;;;AAGL,oBAAoB,OAApB,GAA8B,CAAC,IAAD,EAAO,OAAP,EAAgB,YAAhB,EAA8B,eAA9B,EAA+C,QAA/C,CAA9B;;kBAEe,mB","file":"projectAssetService.js","sourcesContent":["class ProjectAssetService {\n    constructor($q, $http, $rootScope, ConfigService, Upload) {\n        this.$q = $q;\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.Upload = Upload;\n        this.projectAssets = {};\n        this.projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n        this.projectAssetTotalSizeMax = this.ConfigService.getConfigParam('projectAssetTotalSizeMax');\n        this.projectAssetUsagePercentage = 0;\n    }\n\n    deleteAssetItem(assetItem) {\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.projectAssetURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.assetFileName = assetItem.fileName;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            return projectAssetsJSON;\n        });\n    }\n\n    getFullAssetItemURL(assetItem) {\n        return this.ConfigService.getConfigParam('projectBaseURL') + \"assets/\" + assetItem.fileName;\n    }\n\n    retrieveProjectAssets() {\n\n        return this.$http.get(this.projectAssetURL).then((result) => {\n            var projectAssetsJSON = result.data;\n            this.projectAssets = projectAssetsJSON;\n            return projectAssetsJSON;\n        });\n    }\n\n    uploadAssets(files) {\n        var promises = files.map((file) => {\n            return this.Upload.upload({\n                url: this.projectAssetURL,\n                fields: {\n                },\n                file: file\n            }).progress((evt) => {\n                var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                //console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n            }).success((result, status, headers, config) => {\n                // Only set the projectAssets if the result is an object.\n                // Sometimes it's an error message string.\n                if (typeof result === 'object') {\n                    // upload was successful.\n                    this.projectAssets = result;\n                    let uploadedFilename = config.file.name;\n                    return uploadedFilename;\n                } else if (typeof result === 'string') {\n                    // This is an error and should be displayed to the user.\n                    alert(result);\n                }\n\n                return result;\n            });\n        });\n        return this.$q.all(promises);\n    }\n}\n\nProjectAssetService.$inject = ['$q', '$http', '$rootScope', 'ConfigService', 'Upload'];\n\nexport default ProjectAssetService;"]}