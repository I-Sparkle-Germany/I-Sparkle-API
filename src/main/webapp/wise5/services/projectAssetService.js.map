{"version":3,"sources":["projectAssetService.es6"],"names":["ProjectAssetService","$q","$http","$rootScope","ConfigService","ProjectService","Upload","UtilService","projectAssets","projectAssetTotalSizeMax","getConfigParam","projectAssetUsagePercentage","assetItem","params","assetFileName","fileName","httpParams","method","url","headers","data","$","param","then","result","projectAssetsJSON","window","location","projectAssetURL","get","calculateAssetUsage","files","promises","map","file","upload","fields","progress","evt","progressPercentage","parseInt","loaded","total","success","status","config","uploadedFilename","name","alert","all","assets","projectJSONString","angular","toJson","project","allTextFiles","a","length","asset","endsWith","push","usedTextFiles","getTextFiles","textFiles","allUsedTextContent","usedTextFileNames","foundNewUsedTextFile","h","textFile","lastIndexOfSlash","lastIndexOf","substring","indexOf","totalUnusedFilesSize","used","fileSize","textFileNames","projectAssetsDirectoryPath","getProjectAssetsDirectoryPath","t","textFileName","promise","$inject"],"mappings":"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","file":"projectAssetService.js","sourcesContent":["class ProjectAssetService {\n  constructor($q, $http, $rootScope, ConfigService, ProjectService, Upload, UtilService) {\n    this.$q = $q;\n    this.$http = $http;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.Upload = Upload;\n    this.UtilService = UtilService;\n    this.projectAssets = {};\n    this.projectAssetTotalSizeMax = this.ConfigService.getConfigParam('projectAssetTotalSizeMax');\n    this.projectAssetUsagePercentage = 0;\n  }\n\n  deleteAssetItem(assetItem) {\n\n    let params = {\n      assetFileName: assetItem.fileName\n    };\n\n    let httpParams = {\n      method: 'POST',\n      url: this.ConfigService.getConfigParam('projectAssetURL'),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param(params)\n    };\n\n    return this.$http(httpParams).then((result) => {\n      let projectAssetsJSON = result.data;\n      this.projectAssets = projectAssetsJSON;\n      return projectAssetsJSON;\n    });\n  }\n\n  downloadAssetItem(assetItem) {\n    let assetFileName = assetItem.fileName;\n\n    // ask the browser to download this asset by setting the location\n    window.location = this.ConfigService.getConfigParam('projectAssetURL') + \"/download?assetFileName=\" + assetFileName;\n  }\n\n  getFullAssetItemURL(assetItem) {\n    return this.ConfigService.getConfigParam('projectBaseURL') + \"assets/\" + assetItem.fileName;\n  }\n\n  retrieveProjectAssets() {\n    var projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n    return this.$http.get(projectAssetURL).then((result) => {\n      var projectAssetsJSON = result.data;\n      this.projectAssets = projectAssetsJSON;\n      this.calculateAssetUsage();\n      return projectAssetsJSON;\n    });\n  }\n\n  uploadAssets(files) {\n    var projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n    var promises = files.map((file) => {\n      return this.Upload.upload({\n        url: projectAssetURL,\n        fields: {\n        },\n        file: file\n      }).progress((evt) => {\n        var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n        //console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n      }).success((result, status, headers, config) => {\n        // Only set the projectAssets if the result is an object.\n        // Sometimes it's an error message string.\n        if (typeof result === 'object') {\n          // upload was successful.\n          this.projectAssets = result;\n          let uploadedFilename = config.file.name;\n          return uploadedFilename;\n        } else if (typeof result === 'string') {\n          // This is an error and should be displayed to the user.\n          alert(result);\n        }\n\n        return result;\n      });\n    });\n    return this.$q.all(promises);\n  }\n\n  /**\n   * Calculate which assets are used or not used\n   * @return a promise that returns the total amount of space the unused\n   * files use\n   */\n  calculateAssetUsage() {\n\n    /*\n     * a list of all the project assets. each element in the list is an\n     * object that contains the file name and file size\n     */\n    var assets = this.projectAssets;\n\n    // get the project content as a string\n    var projectJSONString = angular.toJson(this.ProjectService.project);\n\n    // an array to hold the text files that the project uses\n    var allTextFiles = [];\n\n    if (assets != null && assets.files != null) {\n\n      /*\n       * loop through all the asset files to find the text files that\n       * are actually used in the project\n       */\n      for (var a = 0; a < assets.files.length; a++) {\n        var asset = assets.files[a];\n\n        if (asset != null) {\n          var fileName = asset.fileName;\n\n          // check if the file is a text file\n          if (this.UtilService.endsWith(fileName, \".html\") ||\n            this.UtilService.endsWith(fileName, \".htm\") ||\n            this.UtilService.endsWith(fileName, \".js\")) {\n\n            // the file is a text file\n            allTextFiles.push(fileName);\n          }\n        }\n      }\n    }\n\n    var usedTextFiles = [];\n\n    /*\n     * Retrieve all the text files that are used in the project. If there\n     * are no text files that are used in the project, the then() will\n     * still be called.\n     */\n    return this.getTextFiles(allTextFiles).then((textFiles) => {\n\n      /*\n       * this variable will hold all the text content that is used in\n       * the project so we can look for asset references to determine\n       * which assets are used\n       */\n      var allUsedTextContent = projectJSONString;\n\n      /*\n       * used to keep track of all the text file names that are used in\n       * the project\n       */\n      var usedTextFileNames = [];\n\n      /*\n       * boolean flag that will help us determine if we need to loop\n       * all the text files again\n       */\n      var foundNewUsedTextFile = true;\n\n      /*\n       * Gather all the content for all the text files that are used.\n       * We will keep looping until we no longer find anymore new text\n       * files that are used.\n       * Say for example whale.html is used in a component in the project.\n       * whaly.html references whale.js\n       * In this case the first iteration of the while loop will find\n       * whale.html is used. Then in the second iteration of the while\n       * loop, it will find that whale.js is used.\n       */\n      while(foundNewUsedTextFile) {\n\n        /*\n         * reset this to false so that we can tell if a new text file\n         * is found to be used in this current iteration of the while\n         * loop\n         */\n        foundNewUsedTextFile = false;\n\n        // loop through all the text files\n        for (var h = 0; h < textFiles.length; h++) {\n\n          // get a texzt file object\n          var textFile = textFiles[h];\n\n          if (textFile != null) {\n\n            /*\n             * get the url to the text file\n             * e.g. /wise/curriculum/26/assets/whale.html\n             */\n            var url = textFile.config.url;\n\n            // get the file name\n            var fileName = '';\n\n            // get the last index of '/'\n            var lastIndexOfSlash = url.lastIndexOf('/');\n\n            if (lastIndexOfSlash == -1) {\n              // the url does not contain a '/'\n              fileName = url;\n            } else {\n              /*\n               * the url does contain a '/' so we will get everything\n               * after it\n               */\n              fileName = url.substring(lastIndexOfSlash + 1);\n            }\n\n            /*\n             * check if we have already found that this text file\n             * is used\n             */\n            if (usedTextFileNames.indexOf(fileName) == -1) {\n              /*\n               * this is a file name that isn't yet in the array\n               * of file names that are used\n               */\n\n              if (allUsedTextContent.indexOf(fileName) != -1) {\n                // the file name is referenced in the content\n\n                // add the file name to our array of used text file names\n                usedTextFileNames.push(fileName);\n\n                // get the file content\n                var data = textFile.data;\n\n                /*\n                 * add the content of the file to our variable that\n                 * contains all the used text content\n                 */\n                allUsedTextContent += data;\n\n                /*\n                 * set the boolean flag so that we will iterate\n                 * the while loop again\n                 */\n                foundNewUsedTextFile = true;\n              }\n            }\n          }\n        }\n      }\n\n      // field to calculate how much disk space the unused files are using\n      var totalUnusedFilesSize = 0;\n\n      if (assets != null && assets.files != null) {\n\n        // loop through all the assets\n        for (var a = 0; a < assets.files.length; a++) {\n          var asset = assets.files[a];\n\n          if (asset != null) {\n            var fileName = asset.fileName;\n\n            if (allUsedTextContent.indexOf(fileName) != -1) {\n              // the file is used in the project\n              asset.used = true;\n            } else {\n              // the file is not used in the project\n              asset.used = false;\n\n              // add the file size to the total\n              totalUnusedFilesSize += asset.fileSize;\n            }\n          }\n        }\n      }\n\n      return totalUnusedFilesSize;\n    });\n  }\n\n  /**\n   * Retrieve text files using a promise all\n   * @param textFileNames a list of text file names\n   * @return a promise that will retrieve all the text files\n   */\n  getTextFiles(textFileNames) {\n\n    var promises = [];\n\n    // get the project assets path e.g. /wise/curriculum/3/assets\n    var projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n\n    // loop through all the text file names\n    for (var t = 0; t < textFileNames.length; t++) {\n\n      // get an text file name\n      var textFileName = textFileNames[t];\n\n      // create a promise that will return the contents of the text file\n      var promise = this.$http.get(projectAssetsDirectoryPath + '/' + textFileName);\n\n      // add the promise to our list of promises\n      promises.push(promise);\n    }\n\n    return this.$q.all(promises);\n  }\n}\n\nProjectAssetService.$inject = [\n  '$q',\n  '$http',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'Upload',\n  'UtilService'\n];\n\nexport default ProjectAssetService;\n"]}