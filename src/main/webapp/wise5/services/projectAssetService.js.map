{"version":3,"sources":["projectAssetService.es6"],"names":["ProjectAssetService","$q","$http","$rootScope","ConfigService","ProjectService","Upload","UtilService","projectAssets","projectAssetTotalSizeMax","getConfigParam","projectAssetUsagePercentage","assetItem","params","assetFileName","fileName","httpParams","method","url","headers","data","$","param","then","result","projectAssetsJSON","window","location","projectAssetURL","get","calculateAssetUsage","files","promises","map","file","upload","fields","progress","evt","progressPercentage","parseInt","loaded","total","success","status","config","uploadedFilename","name","alert","all","assets","projectJSONString","angular","toJson","project","allTextFiles","asset","endsWith","push","usedTextFiles","getTextFiles","textFiles","allUsedTextContent","usedTextFileNames","foundNewUsedTextFile","textFile","lastIndexOfSlash","lastIndexOf","substring","indexOf","totalUnusedFilesSize","used","fileSize","textFileNames","projectAssetsDirectoryPath","getProjectAssetsDirectoryPath","textFileName","promise","$inject"],"mappings":"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","file":"projectAssetService.js","sourcesContent":["class ProjectAssetService {\n  constructor(\n      $q,\n      $http,\n      $rootScope,\n      ConfigService,\n      ProjectService,\n      Upload,\n      UtilService) {\n    this.$q = $q;\n    this.$http = $http;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.Upload = Upload;\n    this.UtilService = UtilService;\n    this.projectAssets = {};\n    this.projectAssetTotalSizeMax =\n        this.ConfigService.getConfigParam('projectAssetTotalSizeMax');\n    this.projectAssetUsagePercentage = 0;\n  }\n\n  deleteAssetItem(assetItem) {\n    let params = {\n      assetFileName: assetItem.fileName\n    };\n\n    let httpParams = {\n      method: 'POST',\n      url: this.ConfigService.getConfigParam('projectAssetURL'),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param(params)\n    };\n\n    return this.$http(httpParams).then((result) => {\n      let projectAssetsJSON = result.data;\n      this.projectAssets = projectAssetsJSON;\n      return projectAssetsJSON;\n    });\n  }\n\n  downloadAssetItem(assetItem) {\n    let assetFileName = assetItem.fileName;\n\n    // ask the browser to download this asset by setting the location\n    window.location = this.ConfigService.getConfigParam('projectAssetURL') +\n        \"/download?assetFileName=\" + assetFileName;\n  }\n\n  getFullAssetItemURL(assetItem) {\n    return this.ConfigService.getConfigParam('projectBaseURL') + \"assets/\" + assetItem.fileName;\n  }\n\n  retrieveProjectAssets() {\n    const projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n    return this.$http.get(projectAssetURL).then((result) => {\n      const projectAssetsJSON = result.data;\n      this.projectAssets = projectAssetsJSON;\n      this.calculateAssetUsage();\n      return projectAssetsJSON;\n    });\n  }\n\n  uploadAssets(files) {\n    const projectAssetURL = this.ConfigService.getConfigParam('projectAssetURL');\n\n    const promises = files.map((file) => {\n      return this.Upload.upload({\n        url: projectAssetURL,\n        fields: {\n        },\n        file: file\n      }).progress((evt) => {\n        const progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n        //console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);\n      }).success((result, status, headers, config) => {\n        // Only set the projectAssets if the result is an object.\n        // Sometimes it's an error message string.\n        if (typeof result === 'object') {\n          // upload was successful.\n          this.projectAssets = result;\n          let uploadedFilename = config.file.name;\n          return uploadedFilename;\n        } else if (typeof result === 'string') {\n          // This is an error and should be displayed to the user.\n          alert(result);\n        }\n\n        return result;\n      });\n    });\n    return this.$q.all(promises);\n  }\n\n  /**\n   * Calculate which assets are used or not used\n   * @return a promise that returns the total amount of space the unused\n   * files use\n   */\n  calculateAssetUsage() {\n    /*\n     * a list of all the project assets. each element in the list is an\n     * object that contains the file name and file size\n     */\n    const assets = this.projectAssets;\n\n    // get the project content as a string\n    const projectJSONString = angular.toJson(this.ProjectService.project);\n\n    // an array to hold the text files that the project uses\n    const allTextFiles = [];\n\n    if (assets != null && assets.files != null) {\n      /*\n       * loop through all the asset files to find the text files that\n       * are actually used in the project\n       */\n      for (let asset of assets.files) {\n        if (asset != null) {\n          const fileName = asset.fileName;\n\n          // check if the file is a text file\n          if (this.UtilService.endsWith(fileName, \".html\") ||\n            this.UtilService.endsWith(fileName, \".htm\") ||\n            this.UtilService.endsWith(fileName, \".js\")) {\n\n            // the file is a text file\n            allTextFiles.push(fileName);\n          }\n        }\n      }\n    }\n\n    const usedTextFiles = [];\n\n    /*\n     * Retrieve all the text files that are used in the project. If there\n     * are no text files that are used in the project, the then() will\n     * still be called.\n     */\n    return this.getTextFiles(allTextFiles).then((textFiles) => {\n\n      /*\n       * this variable will hold all the text content that is used in\n       * the project so we can look for asset references to determine\n       * which assets are used\n       */\n      let allUsedTextContent = projectJSONString;\n\n      /*\n       * used to keep track of all the text file names that are used in\n       * the project\n       */\n      const usedTextFileNames = [];\n\n      /*\n       * boolean flag that will help us determine if we need to loop\n       * all the text files again\n       */\n      let foundNewUsedTextFile = true;\n\n      /*\n       * Gather all the content for all the text files that are used.\n       * We will keep looping until we no longer find anymore new text\n       * files that are used.\n       * Say for example whale.html is used in a component in the project.\n       * whaly.html references whale.js\n       * In this case the first iteration of the while loop will find\n       * whale.html is used. Then in the second iteration of the while\n       * loop, it will find that whale.js is used.\n       */\n      while(foundNewUsedTextFile) {\n\n        /*\n         * reset this to false so that we can tell if a new text file\n         * is found to be used in this current iteration of the while\n         * loop\n         */\n        foundNewUsedTextFile = false;\n\n        for (let textFile of textFiles) {\n          if (textFile != null) {\n            /*\n             * get the url to the text file\n             * e.g. /wise/curriculum/26/assets/whale.html\n             */\n            const url = textFile.config.url;\n\n            // get the file name\n            let fileName = '';\n\n            // get the last index of '/'\n            const lastIndexOfSlash = url.lastIndexOf('/');\n\n            if (lastIndexOfSlash == -1) {\n              // the url does not contain a '/'\n              fileName = url;\n            } else {\n              /*\n               * the url does contain a '/' so we will get everything\n               * after it\n               */\n              fileName = url.substring(lastIndexOfSlash + 1);\n            }\n\n            /*\n             * check if we have already found that this text file\n             * is used\n             */\n            if (usedTextFileNames.indexOf(fileName) == -1) {\n              /*\n               * this is a file name that isn't yet in the array\n               * of file names that are used\n               */\n\n              if (allUsedTextContent.indexOf(fileName) != -1) {\n                // the file name is referenced in the content\n\n                // add the file name to our array of used text file names\n                usedTextFileNames.push(fileName);\n\n                // get the file content\n                const data = textFile.data;\n\n                /*\n                 * add the content of the file to our variable that\n                 * contains all the used text content\n                 */\n                allUsedTextContent += data;\n\n                /*\n                 * set the boolean flag so that we will iterate\n                 * the while loop again\n                 */\n                foundNewUsedTextFile = true;\n              }\n            }\n          }\n        }\n      }\n\n      // field to calculate how much disk space the unused files are using\n      let totalUnusedFilesSize = 0;\n\n      if (assets != null && assets.files != null) {\n        for (let asset of assets.files) {\n          if (asset != null) {\n            const fileName = asset.fileName;\n            if (allUsedTextContent.indexOf(fileName) != -1) {\n              // the file is used in the project\n              asset.used = true;\n            } else {\n              // the file is not used in the project\n              asset.used = false;\n\n              // add the file size to the total\n              totalUnusedFilesSize += asset.fileSize;\n            }\n          }\n        }\n      }\n\n      return totalUnusedFilesSize;\n    });\n  }\n\n  /**\n   * Retrieve text files using a promise all\n   * @param textFileNames a list of text file names\n   * @return a promise that will retrieve all the text files\n   */\n  getTextFiles(textFileNames) {\n\n    const promises = [];\n\n    // get the project assets path e.g. /wise/curriculum/3/assets\n    const projectAssetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n    for (let textFileName of textFileNames) {\n      // create a promise that will return the contents of the text file\n      const promise = this.$http.get(projectAssetsDirectoryPath + '/' + textFileName);\n\n      // add the promise to our list of promises\n      promises.push(promise);\n    }\n\n    return this.$q.all(promises);\n  }\n}\n\nProjectAssetService.$inject = [\n  '$q',\n  '$http',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'Upload',\n  'UtilService'\n];\n\nexport default ProjectAssetService;\n"]}