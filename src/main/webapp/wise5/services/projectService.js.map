{"version":3,"sources":["projectService.es6"],"names":["ProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","project","transitions","applicationNodes","inactiveStepNodes","inactiveGroupNodes","groupNodes","idToNode","idToElement","metadata","activeConstraints","rootNode","idToPosition","idToOrder","nodeCount","componentServices","nodeIdToNumber","nodeIdToIsInBranchPath","nodeIdToBranchPathLetter","achievements","isNodeAffectedByConstraintResult","flattenedProjectAsNodeIds","$translate","additionalProcessingFunctionsMap","filters","parseProject","clearBranchesCache","style","name","getProjectMetadata","title","projectTitle","nodes","nodeId","node","getNodeById","ids","id","getNodes","existingNodes","replaced","n","length","existingNode","existingNodeId","splice","push","$broadcast","groupId","group","groupChildNodeIds","indexOf","groupNode","type","applicationNode","nodeType","content","constraints","setIdToNode","setIdToElement","addNode","addGroupNode","addApplicationNode","addNodeToGroupNode","isPreview","getConfigParam","constraint","planningNodes","planningNode","clearProjectFields","loadNodes","loadPlanningNodes","inactiveNodes","loadInactiveNodes","constraintId","active","getRootNode","calculateNodeOrderOfProject","branches","getBranches","branchNodeIds","pos","setIdToPosition","isNodeIdInABranch","getPositionById","b","getBranchNodePositionById","calculateNodeNumbers","calculateNodeOrder","isGroupNode","childIds","childId","child","startGroupId","stepNumber","importProjectIdToOrder","getNodeOrderOfProjectHelper","result","item","c","childStepNumber","i","path","getPathToNode","undefined","order","getIdByOrder","integerToAlpha","int","alphabet","branch","branchPaths","p","branchPath","nodeIndex","startPoint","branchStartPoint","startPointPos","branchPathPos","num","position","Object","entries","value","element","contentString","JSON","stringify","replaceAssetPaths","parse","contentBaseURL","replace","RegExp","matchedString","delimiter","matchedStringWithoutQuotes","substr","charAt","injectClickToSnipImageIntoContentString","imgMatcher","matchGroup1","newString","tempNode","getNodePositionById","nodeIcon","defaultName","color","fontSet","fontName","imgSrc","imgAlt","icons","default","icon","$","extend","getGroupNodes","isNodeDirectChildOfGroup","getInactiveGroupNodes","inactiveGroupNode","parentGroup","getParentGroup","val","depth","parent","getNodeDepth","groupIds","descendents","getDescendentsOfGroup","childDescendents","concat","projectStartId","getStartNodeId","groups","getGroups","groupStartId","startId","startNodeId","allConstraints","isNodeAffectedByConstraint","getConstraintsOnNode","orderedNodeIds","getFlattenedProjectAsNodeIds","sort","constraintsComparatorGenerator","constraintA","constraintB","constraintAIndex","targetId","constraintBIndex","cachedResult","getCachedIsNodeAffectedByConstraintResult","action","isNodeIdAfter","targetNode","isNodeDescendentOfGroup","cacheIsNodeAffectedByConstraintResult","nodeIdBefore","nodeIdAfter","isApplicationNode","pathsToEnd","getAllPaths","pathToEnd","index","parentGroupId","parentGroupIndex","getTransitionsByFromNodeId","transition","toNodeId","to","fromNodeId","transitionLogic","getTransitionLogicByFromNodeId","nodesByToNodeId","nodeHasTransitionToNodeId","getInactiveNodes","inactiveNode","nodeIds","getNodesByToNodeId","groupsThatPointToNodeId","hasTransitionTo","projectURL","Date","getTime","get","then","projectJSON","data","setProject","projectId","configURL","window","configJSON","previewProjectURL","commitMessage","cleanupBeforeSave","getProjectId","saveProjectURL","projectJSONString","angular","toJson","httpParams","method","url","headers","params","param","commitHistory","activeNodes","getActiveNodes","activeNode","cleanupNode","checked","hasWork","hasAlert","hasNewAlert","isVisible","completionStatus","score","hasScore","maxScore","hasMaxScore","scorePct","show","components","component","cleanupComponent","wiseBaseURL","getWISEBaseURL","theme","themeSettings","recalculate","pathsSoFar","allPaths","consolidatePaths","pathSoFar","includeGroups","addedCurrentNodeId","getParentGroupId","parentGroupTransitions","parentGroupTransition","allPathsFromToNode","tempPath","unshift","firstNodeId","firstParentGroupId","lastNodeId","pop","paths","consolidatedPath","arePathsEmpty","currentPath","getNonEmptyPathIndex","getFirstNodeIdInPathAtIndex","areFirstNodeIdsInPathsTheSame","removeNodeIdFromPaths","pathsThatContainNodeId","getPathsThatContainNodeId","removeNodeIdFromPath","consumedPath","consumePathsUntilNodeId","consumedNodeIds","x","tempNodeId","pathsToConsume","pathThatContainsNodeId","tempNodeIdIndex","nodeIdIndex","tempConsumedNodeIds","pathIndex","branchesCache","getMode","getBranchesCache","findBranches","setBranchesCache","previousNodeId","branchMetaObject","createBranchMetaObject","nextCommonNodeId","findNextCommonNodeId","branchEndPoint","extractPathsUpToNodeId","removeDuplicatePaths","trimPathsUpToNodeId","allPathsContainNodeId","extractedPaths","extractedPath","slice","uniquePaths","isPathInUniquePaths","uniquePath","pathsEqual","path1","path2","path1NodeId","path2NodeId","branchPathsIn","componentId","getComponentsByNodeId","tempComponent","tempComponentId","nodeContent","nodeIdToInsert","nodeIdToInsertAfter","insertNodeAfterInGroup","inactiveGroup","previousNode","updateChildrenTransitionsForMovingGroup","previousNodeTransitionLogic","transitionsJSONString","transitionsCopy","fromJson","parentTransitions","parentTransition","newTransition","getGroupStartId","newNodeId","transitionObject","removeBranchPathTakenNodeConstraints","branchPathTakenConstraints","getBranchPathTakenConstraintsByNodeId","branchPathTakenConstraint","newConstraint","getNextAvailableConstraintIdForNodeId","removalCriteria","makeCopyOfJSONObject","nodeIdToInsertInside","nodeToInsert","previousNodes","previousGroups","getGroupNodesByToNodeId","previousGroup","lastNodesInGroup","getLastNodesInGroup","addToTransition","updateToTransition","nodesThatTransitionToGroup","nodeThatTransitionsToGroup","startNode","nextGroup","criteria","oldToNodeId","newToNodeId","lastNodes","getGroupIds","largestGroupIdNumber","groupIdNumber","isNaN","parseInt","nextAvailableGroupId","inactiveGroupId","nodeIdsToSkip","getNodeIds","largestNodeIdNumber","nodeIdNumber","inactiveNodeIds","getInactiveNodeIds","inactiveNodeId","nodeIdToSkip","nextAvailableNodeId","movedNodes","movingNodeIsActive","isActive","stationaryNodeIsActive","removeNodeIdFromTransitions","removeNodeIdFromGroups","insertNodeInsideInTransitions","insertNodeInsideInGroups","insertNodeAfterInTransitions","insertNodeAfterInGroups","moveFromActiveToInactiveInsertInside","moveToInactive","moveToActive","moveFromInactiveToInactiveInsertInside","moveInactiveNode","nodeCopy","getNextAvailableNodeId","newComponentIds","newComponentId","getUnusedComponentId","removingProjectStartNodeId","removeNodeIdFromNodes","hasSetNewStartId","isNodeInGroup","setStartNodeId","nextNodeId","nextGroupNode","nextGroupStartId","recalculatePositionsInGroup","nodeToRemove","nodeToRemoveTransitionLogic","nodeToRemoveTransitions","parentIdOfNodeToRemove","parentGroupStartId","nodeToRemoveTransition","parentIdOfFromNode","t","tc","tempTransition","tempToNodeId","parentIdOfToNode","isFirstNodeInBranchPath","nodeIdsInBranch","getNodeIdsInBranch","nodeIdInBranch","nodeInBranch","transitionCopy","currentFromNodeId","currentToNodeId","newFromNodeId","updateBranchPathTakenConstraint","isBranchPoint","getBranchesByBranchStartPointNodeId","branchPathNodeId","branchPathNode","insertIndex","groupIdWeAreMoving","groupThatTransitionsToGroupWeAreMoving","updateChildrenTransitionsIntoGroupWeAreMoving","removeTransitionsOutOfGroup","removeNodeIdFromGroup","inactiveGroups","componentType","insertAfterComponentId","service","createComponent","componentHasWork","showSaveButton","doesAnyComponentShowSubmitButton","addComponentToNode","showSubmitButton","added","componentIds","componentsToMove","a","firstPath","nodeMaxScore","getMaxScoreForNode","componentMaxScore","getComponentByNodeIdAndComponentId","firstLeafNodeId","done","tempApplicationNode","tempApplicationNodeId","getChildNodeIdsById","message","nodeTitle","getNodePositionAndTitleByNodeId","removalConditional","criteriaMessages","tempRemovalCriteria","criteriaMessage","getCriteriaMessage","actionMessage","getActionMessage","singleRemovalCriteria","scoresString","scores","join","choiceIds","choices","getChoiceTextByNodeIdAndComponentId","choiceText","requiredSubmitCount","fromNodeTitle","toNodeTitle","requiredNumberOfWords","getChoicesByNodeIdAndComponentId","choicesText","choice","text","fromGroupId","oldToGroupId","newToGroupId","fromGroup","oldToGroup","newToGroup","newToGroupStartId","oldToGroupIds","oldToGroupStartId","transitionsBefore","previousGroupNodes","transitionsAfter","extracted","previousGroupNode","updateTransitionsForExtractingGroup","transitionAfter","inserted","updateTransitionsForInsertingGroup","getStartGroupId","startGroup","firstGroupId","removeChildFromParent","removeNodeFromInactiveStepNodes","removeNodeFromInactiveGroupNodes","startIdUpdated","inactiveStepNode","isGroupActive","activeNodeId","activeComponents","activeComponent","activeComponentId","removeNodeFromInactiveNodes","childNode","toNodeIdParentGroupId","transitionsFromChild","tfc","transitionFromChild","firstNodeToRemoveTransition","firstNodeToRemoveTransitionToNodeId","getNodeContentByNodeId","componentService","getComponentService","componentServiceName","componentIdsToSkip","idLength","generateKey","isComponentIdUsed","alreadyUsed","nextAvailableConstraintId","usedConstraintIds","foundNextAvailableConstraintId","counter","potentialConstraintId","hasBranchPathTakenConstraint","orderNodeIds","nodeIdsComparatorGenerator","nodeIdA","nodeIdB","nodeIdAIndex","nodeIdBIndex","removalCriterion","rubric","transitionTo","allBranches","currentActivityNumber","currentStepNumber","calculateNodeNumbersHelper","branchLetterCode","isBranchMergePoint","isBranchStartPoint","branchesByBranchStartPointNodeId","branchesObject","maxCurrentStepNumber","bp","branchCurrentStepNumber","bpn","branchEndPointNodeId","number","branchLetter","String","fromCharCode","script","flattenedNodeIds","indexOfNodeId","indexOfNextNodeId","isEnabled","items","getAchievements","achievementId","achievementItems","achievement","nodeRubric","componentRubric","numberOfRubrics","getNumberOfRubricsByNodeId","spaces","space","isSpaceExists","saveProject","getSpaces","s","$inject"],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n  constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.UtilService = UtilService;\n    this.project = null;\n    this.transitions = [];\n    this.applicationNodes = [];\n    this.inactiveStepNodes = [];\n    this.inactiveGroupNodes = [];\n    this.groupNodes = [];\n    this.idToNode = {};\n    this.idToElement = {};\n    this.metadata = {};\n    this.activeConstraints = [];\n    this.rootNode = null;\n    this.idToPosition = {};\n    this.idToOrder = {};\n    this.nodeCount = 0;\n    this.componentServices = {};\n    this.nodeIdToNumber = {};\n    this.nodeIdToIsInBranchPath = {};\n    this.nodeIdToBranchPathLetter = {};\n    this.achievements = [];\n    this.isNodeAffectedByConstraintResult = {};\n    this.flattenedProjectAsNodeIds = null;\n\n    this.$translate = this.$filter('translate');\n\n    // map from nodeId_componentId to array of additionalProcessingFunctions\n    this.additionalProcessingFunctionsMap = {};\n\n    // filtering options for navigation displays\n    this.filters = [\n      {'name': 'all', 'label': 'All'}\n      //{'name': 'todo', 'label': 'Todo'},\n      //{'name': 'completed', 'label': 'Completed'}\n    ];\n  };\n\n  setProject(project) {\n    this.project = project;\n    this.parseProject();\n  };\n\n  /**\n   * Initialize the data structures used to hold project information\n   */\n  clearProjectFields() {\n    this.transitions = [];\n    this.applicationNodes = [];\n    this.inactiveStepNodes = [];\n    this.inactiveGroupNodes = [];\n    this.groupNodes = [];\n    this.idToNode = {};\n    this.idToElement = {};\n    this.metadata = {};\n    this.activeConstraints = [];\n    this.rootNode = null;\n    this.idToPosition = {};\n    this.idToOrder = {};\n    this.nodeCount = 0;\n    this.nodeIdToIsInBranchPath = {};\n    this.achievements = [];\n    this.clearBranchesCache();\n  };\n\n  getStyle() {\n    let style = '';\n    const project = this.project;\n    if (project != null) {\n      style = project.style;\n    }\n    return style;\n  };\n\n  getFilters() {\n    return this.filters;\n  };\n\n  /**\n   * Returns the name/title of the current project\n   */\n  getProjectTitle() {\n    const name = this.getProjectMetadata().title;\n    return name ? name : 'A WISE Project (No name)';\n  };\n\n  /**\n   * Set the project title\n   */\n  setProjectTitle(projectTitle) {\n    const metadata = this.getProjectMetadata();\n    if (metadata != null) {\n      metadata.title = projectTitle;\n    }\n  }\n\n  getProjectMetadata() {\n    return this.metadata ? this.metadata : {};\n  };\n\n  getNodes() {\n    const project = this.project;\n    if (project != null) {\n      return project.nodes;\n    }\n    return null;\n  };\n\n  getChildNodeIdsById(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node.ids) {\n      return node.ids;\n    }\n    return [];\n  };\n\n  getGroupNodes() {\n    return this.groupNodes;\n  };\n\n  isNode(id) {\n    const nodes = this.getNodes();\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null) {\n          const nodeId = node.id;\n          if (nodeId === id) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  addNode(node) {\n    const existingNodes = this.project.nodes;\n    let replaced = false;\n    if (node != null && existingNodes != null) {\n      for (let n = 0; n < existingNodes.length; n++) {\n        const existingNode = existingNodes[n];\n        const existingNodeId = existingNode.id;\n        if (existingNodeId === node.id) {\n          existingNodes.splice(n, 1, node);\n          replaced = true;\n        }\n      }\n    }\n    if (!replaced) {\n      existingNodes.push(node);\n    }\n  };\n\n  addApplicationNode(node) {\n    const applicationNodes = this.applicationNodes;\n    if (node != null && applicationNodes != null) {\n      applicationNodes.push(node);\n    }\n  };\n\n  addGroupNode(node) {\n    const groupNodes = this.groupNodes;\n    if (node != null && groupNodes != null) {\n      groupNodes.push(node);\n    }\n    this.$rootScope.$broadcast('groupsChanged');\n  };\n\n  addNodeToGroupNode(groupId, nodeId) {\n    if (groupId != null && nodeId != null) {\n      const group = this.getNodeById(groupId);\n      if (group != null) {\n        const groupChildNodeIds = group.ids;\n        if (groupChildNodeIds != null) {\n          if (groupChildNodeIds.indexOf(nodeId) === -1) {\n            groupChildNodeIds.push(nodeId);\n          }\n        }\n      }\n    }\n  };\n\n  isGroupNode(id) {\n    const groupNode = this.getNodeById(id);\n    if (groupNode != null) {\n      const type = groupNode.type;\n      if (type === 'group') {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  isApplicationNode(id) {\n    const applicationNode = this.getNodeById(id);\n    if (applicationNode != null) {\n      const type = applicationNode.type;\n      if (type !== 'group') {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  getGroups() {\n    return this.groupNodes;\n  };\n\n  /**\n   * Get the inactive group nodes.\n   * @return An array of inactive group nodes.\n   */\n  getInactiveGroupNodes() {\n    return this.inactiveGroupNodes;\n  }\n\n  /**\n   * Get the inactive step nodes. This will include the inactive steps that\n   * are in an inactive group.\n   * @return An array of inactive step nodes.\n   */\n  getInactiveStepNodes() {\n    return this.inactiveStepNodes;\n  }\n\n  loadNodes(nodes) {\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null) {\n          const nodeId = node.id;\n          const nodeType = node.type;\n          const content = node.content;\n          const constraints = node.constraints;\n\n          if (content != null) {\n            //node.content = this.injectAssetPaths(content);\n          }\n\n          this.setIdToNode(nodeId, node);\n          this.setIdToElement(nodeId, node);\n          this.addNode(node);\n\n          if (nodeType === 'group') {\n            this.addGroupNode(node);\n          } else {\n            this.addApplicationNode(node);\n          }\n\n          const groupId = node.groupId;\n          if (groupId != null) {\n            this.addNodeToGroupNode(groupId, nodeId);\n          }\n\n          if (constraints != null) {\n            if (this.ConfigService.isPreview() == true && this.ConfigService.getConfigParam('constraints') === false) {\n              /*\n               * if we are in preview mode and constraints are set\n               * to false, we will not add the constraints\n               */\n            } else {\n              // all other cases we will add the constraints\n              for (let constraint of constraints) {\n                this.activeConstraints.push(constraint);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Load the planning template nodes\n   * @param planning template nodes\n   */\n  loadPlanningNodes(planningNodes) {\n    if (planningNodes != null) {\n      for (let planningNode of planningNodes) {\n        if (planningNode != null) {\n          const nodeId = planningNode.id;\n          this.setIdToNode(nodeId, planningNode);\n          this.setIdToElement(nodeId, planningNode);\n\n          // TODO: may need to add more function calls here to add the planning\n        }\n      }\n    }\n  }\n\n  /**\n   * Parse the project to detect the nodes, branches, node numbers, etc.\n   */\n  parseProject() {\n    const project = this.project;\n    if (project != null) {\n      this.clearProjectFields();\n\n      if (project.metadata) {\n        this.metadata = project.metadata;\n      }\n\n      const nodes = project.nodes;\n      this.loadNodes(nodes);\n\n      const planningNodes = project.planningNodes;\n      this.loadPlanningNodes(planningNodes);\n\n      const inactiveNodes = project.inactiveNodes;\n      this.loadInactiveNodes(inactiveNodes);\n\n      const constraints = project.constraints;\n\n      if (constraints != null) {\n        for (let constraint of constraints) {\n          if (constraint != null) {\n            const constraintId = constraint.id;\n            constraint.active = true;\n            this.setIdToElement(constraintId, constraint);\n          }\n        }\n      }\n\n      this.rootNode = this.getRootNode(nodes[0].id);\n      this.calculateNodeOrderOfProject();\n\n      let n = nodes.length;\n      const branches = this.getBranches();\n      const branchNodeIds = [];\n\n      // set node positions\n      let id, pos;\n\n      while (n--) {\n        id = nodes[n].id;\n        if (id === this.rootNode.id) {\n          this.setIdToPosition(id, '0');\n        } else if (this.isNodeIdInABranch(branches, id)) {\n          // node is in a branch, so process later\n          branchNodeIds.push(id);\n        } else {\n          pos = this.getPositionById(id);\n          this.setIdToPosition(id, pos);\n        }\n      }\n\n      // set branch node positions\n      let b = branchNodeIds.length;\n      while (b--) {\n        id = branchNodeIds[b];\n        pos = this.getBranchNodePositionById(id);\n        this.setIdToPosition(id, pos);\n      }\n\n      /*\n       * calculate the node numbers\n       * e.g. if the step is called\n       * 1.5 View the Potential Energy\n       * then the node number is 1.5\n       */\n      this.calculateNodeNumbers();\n\n      if (this.project.achievements != null) {\n        this.achievements = this.project.achievements;\n      }\n    }\n\n    this.$rootScope.$broadcast('projectChanged');\n  };\n\n  calculateNodeOrderOfProject() {\n    this.calculateNodeOrder(this.rootNode);\n  }\n\n  /**\n   * Recursively calculates the node order.\n   * @param node\n   */\n  calculateNodeOrder(node) {\n    this.idToOrder[node.id] = {'order': this.nodeCount};\n    this.nodeCount++;\n    if (this.isGroupNode(node.id)) {\n      const childIds = node.ids;\n      for (let childId of childIds) {\n        const child = this.getNodeById(childId);\n        this.calculateNodeOrder(child);\n      }\n    }\n  };\n\n  /**\n   * Get the node order mappings of the project\n   * @param project the project JSOn\n   * @return an object containing the idToOrder mapping and also the array\n   * of nodes\n   */\n  getNodeOrderOfProject(project) {\n    const idToOrder = {};\n    idToOrder.nodeCount = 0;\n    const startGroupId = project.startGroupId;\n    const rootNode = this.getNodeById(startGroupId, project);\n    const stepNumber = '';\n    const nodes = [];\n    const importProjectIdToOrder = this.getNodeOrderOfProjectHelper(project, rootNode, idToOrder, stepNumber, nodes);\n    delete importProjectIdToOrder.nodeCount;\n    const result = {};\n    result.idToOrder = importProjectIdToOrder;\n    result.nodes = nodes;\n    return result;\n  }\n\n  /**\n   * Recursively traverse the project to calculate the node order and step numbers\n   * @param project the project JSON\n   * @param node the current node we are on\n   * @param idToOrder the mapping of node id to item\n   * @param stepNumber the current step number\n   * @param nodes the array of nodes\n   */\n  getNodeOrderOfProjectHelper(project, node, idToOrder, stepNumber, nodes) {\n    /*\n     * Create the item that we will add to the idToOrder mapping.\n     * The 'order' field determines how the project nodes are displayed\n     * when we flatten the project for displaying.\n     */\n    const item = {\n      'order': idToOrder.nodeCount,\n      'node': node,\n      'stepNumber': stepNumber\n    };\n\n    idToOrder[node.id] = item;\n    idToOrder.nodeCount++;\n    nodes.push(item);\n\n    if (node.type == 'group') {\n      const childIds = node.ids;\n      for (let c = 0; c < childIds.length; c++) {\n        const childId = childIds[c];\n        const child = this.getNodeById(childId, project);\n        let childStepNumber = stepNumber;\n\n        if (childStepNumber != '') {\n          // add the . separator for the step number e.g. 1.\n          childStepNumber += '.';\n        }\n\n        childStepNumber += (c + 1);\n        this.getNodeOrderOfProjectHelper(project, child, idToOrder, childStepNumber, nodes);\n      }\n    }\n    return idToOrder;\n  }\n\n  /**\n   * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n   * @param id a node id\n   * @return string position of the given node id in the project\n   */\n  getPositionById(id) {\n    for (let i = 0; i < this.rootNode.ids.length; i++) {\n      const node = this.getNodeById(this.rootNode.ids[i]);\n      const path = this.getPathToNode(node, i + 1, id);\n      if (path != undefined && path != null) {\n        return path;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns the order of the given node id in the project. Returns null if no node with id exists.\n   * @param id String node id\n   * @return Number order of the given node id in the project\n   */\n  getOrderById(id) {\n    if (this.idToOrder[id]) {\n      return this.idToOrder[id].order;\n    }\n    return null;\n  };\n\n  /**\n   * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n   * @param order Number\n   * @return Number node id of the given order in the project\n   */\n  getIdByOrder(order) {\n    let nodeId = null;\n    for (let id in this.idToOrder) {\n      if (this.idToOrder[id].order === order) {\n        if (this.isGroupNode(id) && order > 1) {\n          nodeId = this.getIdByOrder(order-1);\n        } else {\n          nodeId = id;\n        }\n        break;\n      }\n    }\n    return nodeId;\n  };\n\n  /**\n   * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n   * @param id a node id\n   * @return string position of the given node id in the project\n   */\n  getBranchNodePositionById(id) {\n    const branches = this.getBranches();\n    let b = branches.length;\n\n    // TODO: should we localize this? should we support more than 26?\n    const integerToAlpha = function(int) {\n      const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n      if (int > -1 && int < 26) {\n        return alphabet[int];\n      } else {\n        return int;\n      }\n    };\n\n    while (b--) {\n      const branch = branches[b];\n      const branchPaths = branch.branchPaths;\n      for (let p = 0; p < branchPaths.length; p++) {\n        const branchPath = branchPaths[p];\n        const nodeIndex = branchPath.indexOf(id);\n        if (nodeIndex > -1) {\n          const startPoint = branch.branchStartPoint;\n          const startPointPos = this.idToPosition[startPoint];\n          const branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n          return branchPathPos + (nodeIndex+1);\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n   * @param node a node to start searching down\n   * @param path the position of the given node\n   * @param id the node id to search for\n   * @return string path of the given node id in the project\n   */\n  getPathToNode(node, path, id) {\n    if (node.id === id) {\n      return path + '';\n    } else if (node.type === 'group') {\n      let num = 0;\n      const branches = this.getBranches();\n      for (let nodeId of node.ids) {\n        if (this.isNodeIdInABranch(branches, nodeId)) {\n          this.getBranchNodePositionById(nodeId);\n        } else {\n          ++num;\n          const pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n          if (pos) {\n            return pos;\n          }\n        }\n      }\n    }\n  };\n\n  setIdToPosition(id, pos) {\n    if (id != null) {\n      this.idToPosition[id] = pos;\n    }\n  };\n\n  getNodePositionById(id) {\n    let position = null;\n    if (id != null) {\n      position = this.nodeIdToNumber[id];\n    }\n    return position;\n  };\n\n  getNodeIdByOrder(order) {\n    let id = null;\n    if (order != null) {\n      for (let [nodeId, value] of Object.entries(this.idToOrder)) {\n        if (value.order === order) {\n          id = nodeId;\n          break;\n        }\n      }\n    }\n    return id;\n  }\n\n  getNodeOrderById(id) {\n    let order = null;\n    if (id != null) {\n      order = this.idToOrder[id] ? this.idToOrder[id].order : null;\n    }\n    return order;\n  };\n\n  setIdToNode(id, element) {\n    if (id != null) {\n      this.idToNode[id] = element;\n    }\n  };\n\n  setIdToElement(id, element) {\n    if (id != null) {\n      this.idToElement[id] = element;\n    }\n  };\n\n  /**\n   * Replace relative asset paths with absolute paths\n   * e.g.\n   * assets/myimage.jpg\n   * will be replaced with\n   * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n   * @param content a string or JSON object\n   * @return the same type of object that was passed in as the content\n   * but with relative asset paths replaced with absolute paths\n   */\n  injectAssetPaths(content) {\n    if (content != null) {\n      if (typeof content === 'object') {\n        let contentString = JSON.stringify(content);\n        if (contentString != null) {\n          // replace the relative asset paths with the absolute paths\n          contentString = this.replaceAssetPaths(contentString);\n          content = JSON.parse(contentString);\n        }\n      } else if (typeof content === 'string') {\n        // replace the relative asset paths with the absolute paths\n        content = this.replaceAssetPaths(content);\n      }\n    }\n    return content;\n  };\n\n  /**\n   * Replace the relative asset paths with absolute paths\n   * @param contentString the content string\n   * @return the content string with relative asset paths replaced\n   * with absolute asset paths\n   */\n  replaceAssetPaths(contentString) {\n    if (contentString != null) {\n      // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n      const contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n      // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n      // the string we're looking for can't start with '/ and \"/.\n      // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n      contentString = contentString.replace(\n        new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/]?[^\\/]?[a-zA-Z0-9@%&;\\\\._\\\\/\\\\s\\\\-]*[\\.](png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html.*?|js).*?(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n        (matchedString) => {\n          // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n          let delimiter = '';\n          let matchedStringWithoutQuotes = '';\n\n          if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n            // the string has escaped quotes for example \\\"hello.png\\\"\n\n            // get everything between the escaped quotes\n            matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n            // get the delimiter which will be \\' or \\\"\n            delimiter = matchedString.substr(0,2);\n          } else {\n            // the string does not have escaped quotes for example \"hello.png\"\n\n            // get everything between the quotes\n            matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n            // get the delimiter which will be ' or \"\n            delimiter = matchedString.substr(0,1);\n          }\n\n          if (matchedStringWithoutQuotes != null && matchedStringWithoutQuotes.length > 0 && matchedStringWithoutQuotes.charAt(0) == \"/\") {\n            /*\n             * the matched string starts with a \"/\" which means it's\n             * an absolute path and does not require path prepending\n             * so we will just return the original unmodified string\n             */\n            return delimiter + matchedStringWithoutQuotes + delimiter;\n          } else {\n            //const matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n            // make a new string with the contentBaseURL + assets/ prepended to the path\n            return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n          }\n        }\n      );\n    }\n    return contentString;\n  };\n\n  /**\n   * Inject the ng-click attribute that will call the snipImage function\n   * @param content the content\n   * @returns the modified content\n   */\n  injectClickToSnipImage(content) {\n    if (content != null) {\n      if (typeof content === 'object') {\n        let contentString = JSON.stringify(content);\n        if (contentString != null) {\n          // replace the relative asset paths with the absolute paths\n          contentString = this.injectClickToSnipImageIntoContentString(contentString);\n\n          content = JSON.parse(contentString);\n        }\n      } else if (typeof content === 'string') {\n        // replace the relative asset paths with the absolute paths\n        content = this.injectClickToSnipImageIntoContentString(content);\n      }\n    }\n    return content;\n  }\n\n  /**\n   * Inject the ng-click attribute that will call the snipImage function\n   * @param contentString the content in string format\n   * @returns the modified content string\n   */\n  injectClickToSnipImageIntoContentString(contentString) {\n    if (contentString != null) {\n      // regex to match image elements\n      const imgMatcher = new RegExp('<img.*?src=\\\\\\\\?[\\'\"](.*?)\\\\\\\\?[\\'\"].*?>', 'gi');\n\n      // replace all instances that match\n      contentString = contentString.replace(imgMatcher,\n        (matchedString, matchGroup1) => {\n          /*\n           * insert the ng-click attribute\n           * Before: <img src=\"abc.png\"/>\n           * After: <img ng-click=\"vleController.snipImage($event)\" src=\"abc.png\" />\n           */\n          const newString = matchedString.replace('img', 'img ng-click=\\\\\\\"$emit(\\'snipImage\\', $event)\\\\\\\"');\n          return newString;\n        }\n      );\n    }\n    return contentString;\n  }\n\n  /**\n   * Returns the node specified by the nodeId\n   * @param nodeId get the node with this node id\n   * @param (optional) the project to retrieve the node from. this is used in\n   * the case when we want the node from another project such as when we are\n   * importing a step from another project\n   * Return null if nodeId param is null or the specified node does not exist in the project.\n   */\n  getNodeById(nodeId, project) {\n    if (project == null) {\n      // the project argument is null so we will get it from the current project\n      if (nodeId != null && this.idToNode[nodeId]) {\n        return this.idToNode[nodeId];\n      }\n    } else {\n      /*\n       * the project argument is not null so we will get the node from\n       * project that was passed in\n       */\n      for (let tempNode of project.nodes) {\n        if (tempNode != null && tempNode.id == nodeId) {\n          return tempNode;\n        }\n      }\n\n      for (let tempNode of project.inactiveNodes) {\n        if (tempNode != null && tempNode.id == nodeId) {\n          return tempNode;\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns the title of the node with the nodeId\n   * Return null if nodeId param is null or the specified node does not exist in the project.\n   */\n  getNodeTitleByNodeId(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      return node.title;\n    }\n    return null;\n  };\n\n  /**\n   * Get the node position and title\n   * @param nodeId the node id\n   * @returns the node position and title, e.g. \"1.1 Introduction\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      const position = this.getNodePositionById(nodeId);\n      if (position != null) {\n        return position + ': ' + node.title;\n      } else {\n        return node.title;\n      }\n    }\n    return null;\n  };\n\n  getNodeIconByNodeId(nodeId) {\n    const node = this.getNodeById(nodeId);\n    let nodeIcon = null;\n    if (node != null) {\n      const nodeType = node.type;\n\n      // set defaults (TODO: get from configService?)\n      const defaultName = (nodeType === 'group') ? 'explore' : 'school';\n      nodeIcon = {\n        color: 'rgba(0,0,0,0.54)',\n        type: 'font',\n        fontSet: 'material-icons',\n        fontName: defaultName,\n        imgSrc: '',\n        imgAlt: 'node icon'\n      };\n\n      // TODO: check for different statuses\n      const icons = node.icons;\n      if (!!icons && !!icons.default) {\n        const icon = icons.default;\n        nodeIcon = $.extend(true, nodeIcon, icon);\n      }\n\n      // check for empty image source\n      if (!nodeIcon.imgSrc) {\n        // revert to font icon\n        nodeIcon.type = 'font';\n      }\n    }\n    return nodeIcon;\n  };\n\n  getParentGroup(nodeId) {\n    if (nodeId != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        // Check if the node is a child of an active group.\n        const groupNodes = this.getGroupNodes();\n        for (let groupNode of groupNodes) {\n          if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n            return groupNode;\n          }\n        }\n\n        // Check if the node is a child of an inactive group.\n        const inactiveGroupNodes = this.getInactiveGroupNodes();\n        for (let inactiveGroupNode of inactiveGroupNodes) {\n          if (this.isNodeDirectChildOfGroup(node, inactiveGroupNode)) {\n            return inactiveGroupNode;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Get the parent group id\n   * @param nodeId the parent group id\n   * @returns the parent group id\n   */\n  getParentGroupId(nodeId) {\n    if (nodeId != null) {\n      const parentGroup = this.getParentGroup(nodeId);\n      if (parentGroup != null) {\n        return parentGroup.id;\n      }\n    }\n    return null;\n  }\n\n  getNodeDepth(nodeId, val) {\n    if (nodeId != null) {\n      let depth = (typeof val === \"number\") ? val : 0;\n      const parent = this.getParentGroup(nodeId);\n      if (parent) {\n        depth = this.getNodeDepth(parent.id, depth + 1);\n      }\n      return depth;\n    }\n    return null;\n  };\n\n  getRootNode(nodeId) {\n    const parentGroup = this.getParentGroup(nodeId);\n    if (parentGroup == null) {\n      return this.getNodeById(nodeId);\n    } else {\n      return this.getRootNode(parentGroup.id);\n    }\n    return null;\n  };\n\n  isNodeDirectChildOfGroup(node, group) {\n    if (node != null && group != null) {\n      const nodeId = node.id;\n      const groupIds = group.ids;\n\n      if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  isNodeDescendentOfGroup(node, group) {\n    if (node != null && group != null) {\n      const descendents = this.getDescendentsOfGroup(group);\n      const nodeId = node.id;\n\n      if (descendents.indexOf(nodeId) != -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  getDescendentsOfGroup(group) {\n    let descendents = [];\n    if (group != null) {\n      const childIds = group.ids;\n      if (childIds != null) {\n        descendents = childIds;\n        for (let childId of childIds) {\n          const node = this.getNodeById(childId);\n          if (node != null) {\n            const childDescendents = this.getDescendentsOfGroup(node);\n            descendents = descendents.concat(childDescendents);\n          }\n        }\n      }\n    }\n    return descendents;\n  };\n\n  isStartNode(node) {\n    let result = false;\n    if (node != null) {\n      const nodeId = node.id;\n      const projectStartId = this.getStartNodeId();\n      if (nodeId === projectStartId) {\n        result = true;\n      }\n\n      const groups = this.getGroups();\n      for (let group of groups) {\n        if (group != null) {\n          const groupStartId = group.startId;\n          if (nodeId === groupStartId) {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Returns the Project's start node id, or null if it's not defined in the project\n   */\n  getStartNodeId() {\n    const project = this.project;\n    if (project != null) {\n      return project.startNodeId;\n    }\n    return null;\n  };\n\n  /**\n   * Set the start node id\n   * @param nodeId the new start node id\n   */\n  setStartNodeId(nodeId) {\n    if (nodeId != null) {\n      const project = this.project;\n      if (project != null) {\n        project.startNodeId = nodeId;\n      }\n    }\n  }\n\n  /**\n   * Get the start group id\n   * @return the start group id\n   */\n  getStartGroupId() {\n    const project = this.project;\n    if (project != null) {\n      return project.startGroupId;\n    }\n    return null;\n  }\n\n  /**\n   * Check if the given node id is the start node id\n   * @return whether the node id is the start node id\n   */\n  isStartNodeId(nodeId) {\n    const project = this.project;\n    if (project != null) {\n      const startNodeId = project.startNodeId;\n      if (nodeId === startNodeId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getConstraintsForNode(node) {\n    const constraints = [];\n    const allConstraints = this.activeConstraints;\n    for (let constraint of allConstraints) {\n      if (this.isNodeAffectedByConstraint(node, constraint)) {\n        constraints.push(constraint);\n      }\n    }\n    return constraints;\n  };\n\n  /**\n   * Get the constraints authored on the node.\n   * @param nodeId The node id of the node.\n   * @return An array of constraint JSON objects.\n   */\n  getConstraintsOnNode(nodeId) {\n    let node = this.getNodeById(nodeId);\n    return node.constraints;\n  }\n\n  /**\n   * Check if a node has constraints.\n   * @param nodeId The node id of the node.\n   * @return Whether the node has constraints authored on it.\n   */\n  nodeHasConstraint(nodeId) {\n    let constraints = this.getConstraintsOnNode(nodeId);\n    if (constraints.length > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Order the constraints so that they show up in the same order as in the\n   * project.\n   * @param constraints An array of constraint objects.\n   * @return An array of ordered constraints.\n   */\n  orderConstraints(constraints) {\n    let orderedNodeIds = this.getFlattenedProjectAsNodeIds();\n    return constraints.sort(this.constraintsComparatorGenerator(orderedNodeIds));\n  }\n\n  /**\n   * Create the constraints comparator function that is used for sorting an\n   * array of constraint objects.\n   * @param orderedNodeIds An array of node ids in the order in which they\n   * show up in the project.\n   * @return A comparator that orders constraint objects in the order in which\n   * the target ids show up in the project.\n   */\n  constraintsComparatorGenerator(orderedNodeIds) {\n    return function(constraintA, constraintB) {\n      let constraintAIndex = orderedNodeIds.indexOf(constraintA.targetId);\n      let constraintBIndex = orderedNodeIds.indexOf(constraintB.targetId);\n      if (constraintAIndex < constraintBIndex) {\n        return -1;\n      } else if (constraintAIndex > constraintBIndex) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a node is affected by the constraint\n   * @param node check if the node is affected\n   * @param constraint the constraint that might affect the node\n   * @returns whether the node is affected by the constraint\n   */\n  isNodeAffectedByConstraint(node, constraint) {\n    const cachedResult =\n        this.getCachedIsNodeAffectedByConstraintResult(node.id, constraint.id);\n    if (cachedResult != null) {\n      return cachedResult;\n    } else {\n      let result = false;\n      const nodeId = node.id;\n      const targetId = constraint.targetId;\n      const action = constraint.action;\n\n      if (action === 'makeAllNodesAfterThisNotVisible' &&\n          this.isNodeIdAfter(targetId, node.id)) {\n        result = true;\n      } else if (action === 'makeAllNodesAfterThisNotVisitable' &&\n          this.isNodeIdAfter(targetId, node.id)) {\n        result = true;\n      } else {\n        const targetNode = this.getNodeById(targetId);\n        if (targetNode != null) {\n          const nodeType = targetNode.type;\n          if (nodeType === 'node' && nodeId === targetId) {\n            result = true;\n          } else if (nodeType === 'group' &&\n              (nodeId === targetId || this.isNodeDescendentOfGroup(node, targetNode))) {\n            result = true;\n          }\n        }\n      }\n\n      this.cacheIsNodeAffectedByConstraintResult(node.id, constraint.id, result);\n      return result;\n    }\n  };\n\n  /**\n   * Check if a node id comes after another node id in the project\n   * @param nodeIdBefore the node id before\n   * @param nodeIdAfter the node id after\n   */\n  isNodeIdAfter(nodeIdBefore, nodeIdAfter) {\n    let result = false;\n    if (nodeIdBefore != null && nodeIdAfter != null) {\n      if (this.isApplicationNode(nodeIdBefore)) {\n        // the node id before is a step\n\n        // get all the paths from the beforeNodeId to the end of the project\n        const pathsToEnd = this.getAllPaths([], nodeIdBefore, true);\n\n        if (pathsToEnd != null) {\n          for (let pathToEnd of pathsToEnd) {\n            if (pathToEnd != null) {\n              /*\n               * remove the first node id and its parent id because\n               * we will check the remaining node ids in the array\n               * for the nodeIdAfter\n               */\n\n              // get the index of the node id before\n              const index = pathToEnd.indexOf(nodeIdBefore);\n\n              if (index != -1) {\n                // remove the node id before\n                pathToEnd.splice(index, 1);\n              }\n\n              // get the parent group of the node id before\n              const parentGroup = this.getParentGroup(nodeIdBefore);\n\n              if (parentGroup != null) {\n                // remove the parent group of the node id before\n                const parentGroupId = parentGroup.id;\n                const parentGroupIndex = pathToEnd.indexOf(parentGroupId);\n                if (parentGroupIndex != -1) {\n                  pathToEnd.splice(parentGroupIndex, 1);\n                }\n              }\n\n              if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                // we have found the nodeIdAfter in the path to the end of the project\n                result = true;\n              }\n            }\n          }\n        }\n      } else {\n        // the node id before is an activity\n\n        const group = this.getNodeById(nodeIdBefore);\n        if (group != null) {\n          const transitions = this.getTransitionsByFromNodeId(nodeIdBefore);\n          if (transitions != null) {\n            for (let transition of transitions) {\n              if (transition != null) {\n                const toNodeId = transition.to;\n\n                // get the paths between to toNodeId and the end of the project\n                const pathsToEnd = this.getAllPaths([], toNodeId, true);\n\n                for (let pathToEnd of pathsToEnd) {\n                  if (pathToEnd != null) {\n                    if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                      // we have found the nodeIdAfter in the path to the end of the project\n                      result = true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the transition logic for a node\n   * @param fromNodeId the from node id\n   * @returns the transition logic object\n   */\n  getTransitionLogicByFromNodeId(fromNodeId) {\n    if (fromNodeId != null) {\n      // get the node\n      const node = this.getNodeById(fromNodeId);\n\n      if (node != null) {\n        // get the transition logic\n        return node.transitionLogic;\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Get the transitions for a node\n   * @param fromNodeId the node to get transitions from\n   * @returns an array of transitions\n   */\n  getTransitionsByFromNodeId(fromNodeId) {\n    if (fromNodeId != null) {\n      // get the transition logic\n      const transitionLogic = this.getTransitionLogicByFromNodeId(fromNodeId);\n\n      if (transitionLogic != null) {\n        // get the transitions\n        return transitionLogic.transitions;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get nodes that have a transition to the given node id\n   * @param toNodeId the node id\n   * @returns an array of node objects that transition to the\n   * given node id\n   */\n  getNodesByToNodeId(toNodeId) {\n    const nodesByToNodeId = [];\n    if (toNodeId != null) {\n      const nodes = this.project.nodes;\n      for (let node of nodes) {\n        if (this.nodeHasTransitionToNodeId(node, toNodeId)) {\n          nodesByToNodeId.push(node);\n        }\n      }\n      const inactiveNodes = this.getInactiveNodes();\n      for (let inactiveNode of inactiveNodes) {\n        if (this.nodeHasTransitionToNodeId(inactiveNode, toNodeId)) {\n          nodesByToNodeId.push(inactiveNode);\n        }\n      }\n    }\n    return nodesByToNodeId;\n  };\n\n  /**\n   * Check if a node has a transition to the given nodeId.\n   * @param node The node to check.\n   * @param toNodeId We are looking for a transition to this node id.\n   * @returns Whether the node has a transition to the given nodeId.\n   */\n  nodeHasTransitionToNodeId(node, toNodeId) {\n    const transitionLogic = node.transitionLogic;\n    if (transitionLogic != null) {\n      const transitions = transitionLogic.transitions;\n      if (transitions != null) {\n        for (let transition of transitions) {\n          if (transition != null) {\n            if (toNodeId === transition.to) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get node ids of all the nodes that have a to transition to the given node id\n   * @param toNodeId\n   * @returns all the node ids that have a transition to the given node id\n   */\n  getNodeIdsByToNodeId(toNodeId) {\n    const nodeIds = [];\n    const nodes = this.getNodesByToNodeId(toNodeId);\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null) {\n          nodeIds.push(node.id);\n        }\n      }\n    }\n    return nodeIds;\n  }\n\n  /**\n   * Get the group nodes that point to a given node id\n   * @param toNodeId\n   */\n  getGroupNodesByToNodeId(toNodeId) {\n    const groupsThatPointToNodeId = [];\n    if (toNodeId != null) {\n      const groups = this.getGroups();\n      for (let group of groups) {\n        if (group != null) {\n          if (this.hasTransitionTo(group, toNodeId)) {\n            groupsThatPointToNodeId.push(group);\n          }\n        }\n      }\n    }\n    return groupsThatPointToNodeId;\n  }\n\n  /**\n   * Check if a node has a transition to a node id\n   * @param node check if this node has a transition to the node id\n   * @param toNodeId we will look for a transition to this node id\n   * @returns whether the node has a transition to the node id\n   */\n  hasTransitionTo(node, toNodeId) {\n    if (node != null && toNodeId != null) {\n      const transitionLogic = node.transitionLogic;\n      if (transitionLogic != null) {\n        const transitions = transitionLogic.transitions;\n        if (transitions != null) {\n          for (let transition of transitions) {\n            if (toNodeId === transition.to) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Retrieves the project JSON from Config.projectURL and returns it.\n   * If Config.projectURL is undefined, returns null.\n   */\n  retrieveProject() {\n    let projectURL = this.ConfigService.getConfigParam('projectURL');\n    if (projectURL == null) {\n      return null;\n    } else {\n      /*\n       * add a unique GET parameter value so that it always retrieves the\n       * latest version of the project file from the server and never\n       * retrieves the project from cache.\n       */\n      projectURL += '?noCache=' + (new Date()).getTime();\n    }\n\n    return this.$http.get(projectURL).then((result) => {\n      const projectJSON = result.data;\n      this.setProject(projectJSON);\n      return projectJSON;\n    });\n  };\n\n  /**\n   * Retrieve the project JSON\n   * @param projectId retrieve the project JSON with this id\n   * @return a promise to return the project JSON\n   */\n  retrieveProjectById(projectId) {\n    if (projectId != null) {\n      // get the config URL for the project\n      const configURL = window.configURL + '/' + projectId;\n\n      // get the config for the project\n      return this.$http.get(configURL).then((result) => {\n        const configJSON = result.data;\n\n        if (configJSON != null) {\n          // get the project URL and preview project URL\n          const projectURL = configJSON.projectURL;\n          const previewProjectURL = configJSON.previewProjectURL;\n\n          if (projectURL != null) {\n            // get the project JSON\n            return this.$http.get(projectURL).then((result) => {\n              const projectJSON = result.data;\n\n              /*\n               * set the preview project URL into the project JSON\n               * so that we easily obtain the preview project URL\n               * later\n               */\n              projectJSON.previewProjectURL = previewProjectURL;\n\n              return projectJSON;\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Saves the project to Config.saveProjectURL and returns commit history promise.\n   * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n   */\n  saveProject(commitMessage = \"\") {\n    this.$rootScope.$broadcast('savingProject');\n    // perform any cleanup before saving the project\n    this.cleanupBeforeSave();\n\n    const projectId = this.ConfigService.getProjectId();\n    const saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n    if (projectId == null || saveProjectURL == null) {\n      return null;\n    }\n\n    // Get the project from this service\n    const projectJSONString = angular.toJson(this.project, 4);\n\n    const httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = saveProjectURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    const params = {};\n    params.projectId = projectId;\n    params.commitMessage = commitMessage;\n    params.projectJSONString = projectJSONString;\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      const commitHistory = result.data;\n      this.$rootScope.$broadcast('projectSaved');\n      return commitHistory;\n    });\n  };\n\n  /**\n   * Perform any necessary cleanup before we save the project.\n   * For example we need to remove the checked field in the inactive node\n   * objects.\n   */\n  cleanupBeforeSave() {\n    let activeNodes = this.getActiveNodes();\n    for (let activeNode of activeNodes) {\n      this.cleanupNode(activeNode);\n    }\n\n    let inactiveNodes = this.getInactiveNodes();\n    for (let inactiveNode of inactiveNodes) {\n      this.cleanupNode(inactiveNode);\n    }\n  }\n\n  /**\n   * Remove any fields that are used temporarily for display purposes.\n   * @param node The node object.\n   */\n  cleanupNode(node) {\n    /*\n     * Remove fields that are added when the project is loaded in the authoring\n     * tool and grading tool.\n     */\n    delete node.checked;\n    delete node.hasWork;\n    delete node.hasAlert;\n    delete node.hasNewAlert;\n    delete node.isVisible;\n    delete node.completionStatus;\n    delete node.score;\n    delete node.hasScore;\n    delete node.maxScore;\n    delete node.hasMaxScore;\n    delete node.scorePct;\n    delete node.order;\n    delete node.show;\n\n    let components = node.components;\n    // activity nodes do not have components but step nodes do have components\n    if (components != null) {\n      for (let component of components) {\n        this.cleanupComponent(component);\n      }\n    }\n  }\n\n  /**\n   * Remove any fields that are used temporarily for display purposes.\n   * @param component The component object.\n   */\n  cleanupComponent(component) {\n    /*\n     * Remove fields that are added when the project is loaded in the authoring\n     * tool and grading tool.\n     */\n    delete component.checked;\n    delete component.hasWork;\n  }\n\n  /**\n   * Returns the theme path for the current project\n   */\n  getThemePath() {\n    let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n    let project = this.project;\n    if (project && project.theme) {\n      // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n      return wiseBaseURL + '/wise5/themes/' + project.theme;\n    } else {\n      // TODO: get default theme name from ConfigService\n      return wiseBaseURL + '/wise5/themes/default';\n    }\n  };\n\n  /**\n   * Returns the theme settings for the current project\n   */\n  getThemeSettings() {\n    let themeSettings = {};\n    let project = this.project;\n    if (project && project.themeSettings) {\n      if (project.theme) {\n        // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n        themeSettings = project.themeSettings[project.theme];\n      } else {\n        // TODO: get default theme name from ConfigService\n        themeSettings = project.themeSettings[\"default\"];\n      }\n    }\n    return themeSettings ? themeSettings : {};\n  };\n\n  /**\n   * Flatten the project to obtain a list of node ids\n   * @param recalculate Whether to force recalculating the flattened node ids.\n   * @return An array of the flattened node ids in the project.\n   */\n  getFlattenedProjectAsNodeIds(recalculate) {\n    if (!recalculate && this.flattenedProjectAsNodeIds != null) {\n      // use the previously calculated flattened node ids\n      return this.flattenedProjectAsNodeIds;\n    }\n\n    // get the start node id\n    const startNodeId = this.getStartNodeId();\n\n    /*\n     * an array to keep track of the node ids in the path that\n     * we are currently on as we traverse the nodes in the project\n     * depth first\n     */\n    const pathsSoFar = [];\n\n    // get all the possible paths through the project\n    const allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n    // consolidate all the paths to create a single list of node ids\n    const nodeIds = this.consolidatePaths(allPaths);\n\n    /*\n     * Remember the flattened node ids so that we don't have to calculate\n     * it again.\n     */\n    this.flattenedProjectAsNodeIds = nodeIds;\n\n    return nodeIds;\n  };\n\n  /**\n   * Get all the possible paths through the project. This function\n   * recursively calls itself to traverse the project depth first.\n   * @param pathSoFar the node ids in the path so far. the node ids\n   * in this array are referenced to make sure we don't loop back\n   * on the path.\n   * @param nodeId the node id we want to get the paths from\n   * @param includeGroups whether to include the group node ids in the paths\n   * @return an array of paths. each path is an array of node ids.\n   */\n  getAllPaths(pathSoFar, nodeId, includeGroups) {\n    const allPaths = [];\n    if (nodeId != null) {\n      if (this.isApplicationNode(nodeId)) {\n        const path = [];\n        const transitions = this.getTransitionsByFromNodeId(nodeId);\n        if (transitions != null) {\n          if (includeGroups) {\n            const parentGroup = this.getParentGroup(nodeId);\n            if (parentGroup != null) {\n              const parentGroupId = parentGroup.id;\n              if (parentGroupId != null && pathSoFar.indexOf(parentGroupId) == -1) {\n                pathSoFar.push(parentGroup.id);\n              }\n            }\n          }\n\n          /*\n           * add the node id to the path so far so we can later check\n           * which nodes are already in the path to prevent looping\n           * back in the path\n           */\n          pathSoFar.push(nodeId);\n\n          if (transitions.length === 0) {\n            /*\n             * there are no transitions from the node id so we will\n             * look for a transition in the parent group\n             */\n\n            let addedCurrentNodeId = false;\n            const parentGroupId = this.getParentGroupId(nodeId);\n            const parentGroupTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n            if (parentGroupTransitions != null) {\n              for (let parentGroupTransition of parentGroupTransitions) {\n                if (parentGroupTransition != null) {\n                  const toNodeId = parentGroupTransition.to;\n                  if (pathSoFar.indexOf(toNodeId) == -1) {\n                    /*\n                     * recursively get the paths by getting all\n                     * the paths for the to node\n                     */\n                    const allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                    for (let tempPath of allPathsFromToNode) {\n                      tempPath.unshift(nodeId);\n                      allPaths.push(tempPath);\n                      addedCurrentNodeId = true;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (!addedCurrentNodeId) {\n              /*\n               * if the parent group doesn't have any transitions we will\n               * need to add the current node id to the path\n               */\n              path.push(nodeId);\n              allPaths.push(path);\n            }\n          } else {\n            // there are transitions from this node id\n\n            for (let transition of transitions) {\n              if (transition != null) {\n                const toNodeId = transition.to;\n                if (toNodeId != null && pathSoFar.indexOf(toNodeId) == -1) {\n                  // we have not found the to node in the path yet so we can traverse it\n\n                  /*\n                   * recursively get the paths by getting all\n                   * the paths from the to node\n                   */\n                  const allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                  if (allPathsFromToNode != null) {\n                    for (let tempPath of allPathsFromToNode) {\n                      if (includeGroups) {\n                        // we need to add the group id to the path\n\n                        if (tempPath.length > 0) {\n                          const firstNodeId = tempPath[0];\n                          const firstParentGroupId = this.getParentGroupId(firstNodeId);\n                          const parentGroupId = this.getParentGroupId(nodeId);\n                          if (parentGroupId != firstParentGroupId) {\n                            /*\n                             * the parent ids are different which means this is a boundary\n                             * between two groups. for example if the project looked like\n                             * group1>node1>node2>group2>node3>node4\n                             * and the current node was node2 then the first node in the\n                             * path would be node3 which means we would need to place\n                             * group2 on the path before node3\n                             */\n                            tempPath.unshift(firstParentGroupId);\n                          }\n                        }\n                      }\n\n                      tempPath.unshift(nodeId);\n                      allPaths.push(tempPath);\n                    }\n                  }\n                } else {\n                  /*\n                   * the node is already in the path so far which means\n                   * the transition is looping back to a previous node.\n                   * we do not want to take this transition because\n                   * it will lead to an infinite loop. we will just\n                   * add the current node id to the path and not take\n                   * the transition which essentially ends the path.\n                   */\n                  path.push(nodeId);\n                  allPaths.push(path);\n                }\n              }\n            }\n          }\n\n          if (pathSoFar.length > 0) {\n            const lastNodeId = pathSoFar[pathSoFar.length - 1];\n            if (this.isGroupNode(lastNodeId)) {\n              /*\n               * the last node id is a group id so we will remove it\n               * since we are moving back up the path as we traverse\n               * the nodes depth first\n               */\n              pathSoFar.pop();\n            }\n          }\n\n          /*\n           * remove the latest node id (this will be a step node id)\n           * since we are moving back up the path as we traverse the\n           * nodes depth first\n           */\n          pathSoFar.pop();\n\n          if (includeGroups) {\n            if (pathSoFar.length == 1) {\n              /*\n               * we are including groups and we have traversed\n               * back up to the start node id for the project.\n               * the only node id left in pathSoFar is now the\n               * parent group of the start node id. we will\n               * now add this parent group of the start node id\n               * to all of the paths\n               */\n\n              for (let path of allPaths) {\n                if (path != null) {\n                  /*\n                   * prepend the parent group of the start node id\n                   * to the path\n                   */\n                  path.unshift(pathSoFar[0]);\n                }\n              }\n\n              /*\n               * remove the parent group of the start node id from\n               * pathSoFar which leaves us with an empty pathSoFar\n               * which means we are completely done with\n               * calculating all the paths\n               */\n              pathSoFar.pop();\n            }\n          }\n        }\n      } else if (this.isGroupNode(nodeId)) {\n\n        /*\n         * add the node id to the path so far so we can later check\n         * which nodes are already in the path to prevent looping\n         * back in the path\n         */\n        pathSoFar.push(nodeId);\n\n        const groupNode = this.getNodeById(nodeId);\n        if (groupNode != null) {\n          const startId = groupNode.startId;\n          if (startId == null || startId == \"\") {\n            // there is no start id so we will take the transition from the group\n            // TODO? there is no start id so we will loop through all the child nodes\n\n            const transitions = this.getTransitionsByFromNodeId(groupNode.id);\n            if (transitions != null && transitions.length > 0) {\n              for (let transition of transitions) {\n                if (transition != null) {\n                  const toNodeId = transition.to;\n\n                  const allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                  if (allPathsFromToNode != null) {\n                    for (let tempPath of allPathsFromToNode) {\n                      tempPath.unshift(nodeId);\n                      allPaths.push(tempPath);\n                    }\n                  }\n                }\n              }\n            } else {\n              /*\n               * this activity does not have any transitions so\n               * we have reached the end of this path\n               */\n\n              const tempPath = [];\n              tempPath.unshift(nodeId);\n              allPaths.push(tempPath);\n            }\n          } else {\n            // there is a start id so we will traverse it\n\n            const allPathsFromToNode = this.getAllPaths(pathSoFar, startId, includeGroups);\n\n            if (allPathsFromToNode != null) {\n              for (let tempPath of allPathsFromToNode) {\n                tempPath.unshift(nodeId);\n                allPaths.push(tempPath);\n              }\n            }\n          }\n        }\n\n        /*\n         * remove the latest node id since we are moving back\n         * up the path as we traverse the nodes depth first\n         */\n        pathSoFar.pop();\n      }\n    }\n    return allPaths;\n  };\n\n  /**\n   * Consolidate all the paths into a linear list of node ids\n   * @param paths an array of paths. each path is an array of node ids.\n   * @return an array of node ids that have been properly ordered\n   */\n  consolidatePaths(paths) {\n    let consolidatedPath = [];\n\n    if (paths != null) {\n      /*\n       * continue until all the paths are empty. as we consolidate\n       * node ids, we will remove them from the paths. once all the\n       * paths are empty we will be done consolidating the paths.\n       */\n      while(!this.arePathsEmpty(paths)) {\n        // start with the first path\n        const currentPath = this.getNonEmptyPathIndex(paths);\n\n        // get the first node id in the current path\n        const nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n        if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n          // the first node ids in all the paths are the same\n\n          // remove the node id from all the paths\n          this.removeNodeIdFromPaths(nodeId, paths);\n\n          // add the node id to our consolidated path\n          consolidatedPath.push(nodeId);\n        } else {\n          // not all the top node ids are the same which means we have branched\n\n          // get all the paths that contain the node id\n          const pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n          if (pathsThatContainNodeId != null) {\n            if (pathsThatContainNodeId.length === 1) {\n              // only the current path we are on has the node id\n\n              // remove the node id from the path\n              this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n              // add the node id to our consolidated path\n              consolidatedPath.push(nodeId);\n            } else {\n              // there are multiple paths that have this node id\n\n              // consume all the node ids up to the given node id\n              const consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n              // remove the node id from the paths\n              this.removeNodeIdFromPaths(nodeId, paths);\n\n              // add the node id to the end of the consumed path\n              consumedPath.push(nodeId);\n\n              // add the consumed path to our consolidated path\n              consolidatedPath = consolidatedPath.concat(consumedPath);\n            }\n          }\n        }\n      }\n    }\n    return consolidatedPath;\n  };\n\n  /**\n   * Consume the node ids in the paths until we get to the given node id\n   * @param paths the paths to consume\n   * @param nodeId the node id to stop consuming at\n   * @return an array of node ids that we have consumed\n   */\n  consumePathsUntilNodeId(paths, nodeId) {\n    let consumedNodeIds = [];\n\n    if (paths != null && nodeId != null) {\n      for (let p = 0; p < paths.length; p++) {\n        const path = paths[p];\n\n        // check if the path contains the node id to stop consuming at\n        if (path != null && path.indexOf(nodeId) != -1) {\n          /*\n           * the path does contain the node id to stop consuming at\n           * so we will consume the node ids in this path until\n           * we get to the given node id to stop consuming at\n           */\n\n          for (let x = 0; x < path.length; x++) {\n            const tempNodeId = path[x];\n\n            if (nodeId === tempNodeId) {\n              /*\n               * the node id is the same as the one we need to\n               * stop consuming at so we will stop looking\n               * at this path\n               */\n              break;\n            } else {\n              /*\n               * the node id is not the one that we need to stop consuming at\n               * so we will consume it\n               */\n\n              // get all the paths that contain the node id\n              const pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n              if (pathsThatContainNodeId.length === 1) {\n                // there is only one path with this node id\n\n                // remove the node id from the path\n                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                // move the counter back one since we have just removed a node id\n                x--;\n\n                // add the node id to the consumed node ids array\n                consumedNodeIds.push(tempNodeId);\n              } else {\n                // there are multiple paths with this node id\n\n                // tempNodeId must come before nodeId\n\n                const pathsToConsume = [];\n\n                for (let pathThatContainsNodeId of pathsThatContainNodeId) {\n                  // get the index of the node id we want to remove\n                  const tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                  // get the index of the node id we want to stop consuming at\n                  const nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                  /*\n                   * check if the node id we want to remove comes before\n                   * the node id we want to stop consuming at. we need to\n                   * do this to prevent an infinite loop. an example of\n                   * when this can happen is if there are two paths\n                   *\n                   * path1 = 1, 2, 3, 4, 5\n                   * path2 = 1, 2, 4, 3, 5\n                   *\n                   * as we consume path1 we will need to consume 3. in order to\n                   * consume 3, we must consume consume up to 3 in path2.\n                   * in order to consume up to 3 in path2 we must consume 4.\n                   * in order to consume 4, we must consume everything before\n                   * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                   * this means we need to consume 3 which brings us back up\n                   * to the top of this paragraph creating an infinite loop.\n                   *\n                   * this check below will prevent infinite loops by only\n                   * adding paths that have the tempNodeId come before the\n                   * nodeId to stop consuming at.\n                   */\n                  if (tempNodeIdIndex < nodeIdIndex) {\n                    pathsToConsume.push(pathThatContainsNodeId);\n                  }\n                }\n\n                /*\n                 * take the paths that contain the given node id and consume\n                 * the paths until the given node id\n                 */\n                const tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                // remove the node id from the paths that contain it\n                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                // add the temp consumed node ids to our consumed node ids array\n                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                // move the counter back one since we have just removed a node id\n                x--;\n\n                // add the node id to the consumed node ids array\n                consumedNodeIds.push(tempNodeId);\n              }\n            }\n          }\n        }\n      }\n    }\n    return consumedNodeIds;\n  };\n\n  /**\n   * Get the path at the given index and get the first node id in\n   * the path\n   * @param paths an array of paths. each path is an array of node ids\n   * @param index the index of the path we want\n   * @return the first node in the given path\n   */\n  getFirstNodeIdInPathAtIndex(paths, index) {\n    let nodeId = null;\n    if (paths != null && index != null) {\n      const path = paths[index];\n      if (path != null && path.length > 0) {\n        nodeId = path[0];\n      }\n    }\n    return nodeId;\n  };\n\n  /**\n   * Remove the node ifrom the paths\n   * @param nodeId the node id to remove\n   * @param paths an array of paths. each path is an array of node ids\n   */\n  removeNodeIdFromPaths(nodeId, paths) {\n    if (nodeId != null && paths != null) {\n      for (let path of paths) {\n        for (let x = 0; x < path.length; x++) {\n          const tempNodeId = path[x];\n\n          /*\n           * check if the node id matches the one we are looking\n           * for\n           */\n          if (nodeId === tempNodeId) {\n            /*\n             * we have found the node id we are looking for so\n             * we will remove it from the path\n             */\n            path.splice(x, 1);\n\n            /*\n             * move the counter back since we just removed a\n             * node id. we will continue searching this path\n             * for the node id in case the path contains it\n             * multiple times.\n             */\n            x--;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Remove the node id from the path\n   * @param nodeId the node id to remove\n   * @param paths an array of paths. each path is an array of node ids\n   * @param pathIndex the path to remove from\n   */\n  removeNodeIdFromPath(nodeId, paths, pathIndex) {\n    if (nodeId != null && paths != null && pathIndex != null) {\n      const path = paths[pathIndex];\n      if (path != null) {\n        for (let x = 0; x < path.length; x++) {\n          const tempNodeId = path[x];\n\n          /*\n           * check if the node id matches the one we are looking\n           * for\n           */\n          if (nodeId === tempNodeId) {\n            /*\n             * we have found the node id we are looking for so\n             * we will remove it from the path\n             */\n            path.splice(x, 1);\n\n            /*\n             * move the counter back since we just removed a\n             * node id. we will continue searching this path\n             * for the node id in case the path contains it\n             * multiple times.\n             */\n            x--;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Check if the first node ids in the paths are the same\n   * @param paths an array of paths. each path is an array of node ids\n   * @return whether all the paths have the same first node id\n   */\n  areFirstNodeIdsInPathsTheSame(paths) {\n    let result = true;\n    let nodeId = null;\n    if (paths != null) {\n      for (let path of paths) {\n        const tempNodeId = path[0];\n        if (nodeId == null) {\n          /*\n           * this is the first path we have looked at so we will\n           * remember the node id\n           */\n          nodeId = tempNodeId;\n        } else if (nodeId != tempNodeId) {\n          /*\n           * the node id does not match the first node id from a\n           * previous path so the paths do not all have the same\n           * first node id\n           */\n          result = false;\n          break;\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Check if all the paths are empty\n   * @param paths an array of paths. each path is an array of node ids\n   * @return whether all the paths are empty\n   */\n  arePathsEmpty(paths) {\n    if (paths != null) {\n      for (let path of paths) {\n        if (path != null) {\n          if (path.length !== 0) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Get the paths that contain the node id\n   * @param nodeId the node id we are looking for\n   * @param paths an array of paths. each path is an array of node ids\n   * @return an array of paths that contain the given node id\n   */\n  getPathsThatContainNodeId(nodeId, paths) {\n    const pathsThatContainNodeId = [];\n    if (nodeId != null && paths != null) {\n      for (let path of paths) {\n        // check if the path contains the node id\n        if (path.indexOf(nodeId) != -1) {\n          /*\n           * add the path to the array of paths that contain\n           * the node id\n           */\n          pathsThatContainNodeId.push(path);\n        }\n      }\n    }\n    return pathsThatContainNodeId;\n  };\n\n  /**\n   * Get a non empty path index. It will loop through the paths and\n   * return the index of the first non empty path.\n   * @param paths an array of paths. each path is an array of node ids\n   * @return the index of the path that is not empty\n   */\n  getNonEmptyPathIndex(paths) {\n    if (paths != null) {\n      for (let p = 0; p < paths.length; p++) {\n        const path = paths[p];\n        if (path.length !== 0) {\n          return p;\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Remember the branches.\n   * @param branches An array of arrays of node ids.\n   */\n  setBranchesCache(branches) {\n    this.branchesCache = branches;\n  }\n\n  /**\n   * Get the branches that were previously calculated.\n   * @returns An array of arrays of node ids.\n   */\n  getBranchesCache() {\n    return this.branchesCache;\n  }\n\n  /**\n   * Remove the branches cache.\n   */\n  clearBranchesCache() {\n    this.branchesCache = null;\n  }\n\n  /**\n   * Get the branches in the project\n   */\n  getBranches() {\n    /*\n     * Do not use the branches cache in the authoring tool because the branches\n     * may change when the author changes the project. In all other modes the\n     * branches can't change so we can use the cache.\n     */\n    if (this.ConfigService.getMode() != 'author') {\n      let branchesCache = this.getBranchesCache();\n      if (branchesCache != null) {\n        return branchesCache;\n      }\n    }\n\n    const startNodeId = this.getStartNodeId();\n\n    /*\n     * an array to keep track of the node ids in the path that\n     * we are currently on as we traverse the nodes in the project\n     * depth first\n     */\n    const pathsSoFar = [];\n\n    const allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n    const branches = this.findBranches(allPaths);\n    if (this.ConfigService.getMode() != 'author') {\n      this.setBranchesCache(branches);\n    }\n    return branches;\n  };\n\n  /**\n   * Find the branches in the project\n   * @param paths all the possible paths through the project\n   * @return an array of branch objects. each branch object contains\n   * the branch start point, the branch paths, and the branch\n   * end point\n   */\n  findBranches(paths) {\n    let branches = [];\n    let previousNodeId = null;\n\n    /*\n     * continue until all the paths are empty. we will remove\n     * node ids from the paths as we traverse the paths to find\n     * the branches\n     */\n    while (!this.arePathsEmpty(paths)) {\n      const nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n      if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n        // the first node ids in all the paths are the same\n\n        this.removeNodeIdFromPaths(nodeId, paths);\n        previousNodeId = nodeId;\n      } else {\n        // not all the top node ids are the same which means we have branched\n\n        const branchMetaObject = this.createBranchMetaObject(previousNodeId);\n        branchMetaObject.branchStartPoint = previousNodeId;\n\n        const nextCommonNodeId = this.findNextCommonNodeId(paths);\n        branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n        let branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n        branchPaths = this.removeDuplicatePaths(branchPaths);\n        branchMetaObject.branchPaths = branchPaths;\n        branches.push(branchMetaObject);\n\n        // trim the paths so that they start at the branch end point\n        this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n        // remember this node id for the next iteration of the loop\n        previousNodeId = nextCommonNodeId;\n      }\n    }\n    return branches;\n  };\n\n  /**\n   * Create a branch meta object that will contain the branch start\n   * point, branch paths, and branch end point\n   * @return an object that contains a branch start point, branch paths,\n   * and a branch end point\n   */\n  createBranchMetaObject() {\n    const branchMetaObject = {};\n    branchMetaObject.branchStartPoint = null;\n    branchMetaObject.branchPaths = [];\n    branchMetaObject.branchEndPoint = null;\n    return branchMetaObject;\n  };\n\n  /**\n   * Find the next common node id in all the paths\n   * @param paths the paths to find the common node id in\n   * @return a node id that is in all the paths or null\n   * if there is no node id that is in all the paths\n   */\n  findNextCommonNodeId(paths) {\n    let nextCommonNodeId = null;\n    if (paths != null) {\n      if (paths.length > 0) {\n        const path = paths[0];\n\n        for (let tempNodeId of path) {\n          if (this.allPathsContainNodeId(paths, tempNodeId)) {\n            /*\n             * the node id is in all the paths so we have found\n             * what we were looking for\n             */\n            nextCommonNodeId = tempNodeId;\n            break;\n          }\n        }\n      }\n    }\n    return nextCommonNodeId;\n  };\n\n  /**\n   * Check if all the paths contain the node id\n   * @param paths an array of paths. each path contains an array of node ids\n   * @param nodeId the node id that we will check is in all the paths\n   * @return whether the node id is in all the paths\n   */\n  allPathsContainNodeId(paths, nodeId) {\n    let result = false;\n    if (paths != null) {\n      for (let path of paths) {\n        const index = path.indexOf(nodeId);\n        if (index == -1) {\n          result = false;\n          break;\n        } else {\n          result = true;\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Trim the paths up to the given node id so that the paths will contain\n   * the given node id and all the node ids after it. This function will\n   * modify the paths.\n   * @param paths the paths to trim\n   * @param nodeId the node id to trim up to\n   */\n  trimPathsUpToNodeId(paths, nodeId) {\n    if (paths != null) {\n      for (let path of paths) {\n        if (path != null) {\n          let index = path.indexOf(nodeId);\n\n          if (index == -1) {\n            /*\n             * the node id is not in the path so we will\n             * trim the path to the end which will make\n             * the path empty\n             */\n            index = path.length;\n          }\n\n          /*\n           * trim the path up to the node id index. this will\n           * modify the path array.\n           */\n          path.splice(0, index);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Extract the paths up to a given node id. This will be used to\n   * obtain branch paths.\n   * @param paths the paths to extract from\n   * @param nodeId the node id to extract up to\n   * @return paths that go up to but do not include the node id\n   */\n  extractPathsUpToNodeId(paths, nodeId) {\n    const extractedPaths = [];\n    if (paths != null) {\n      for (let path of paths) {\n        if (path != null) {\n          let index = path.indexOf(nodeId);\n\n          if (index == -1) {\n            /*\n             * the node id is not in the path so we will\n             * extract up to the end of the path\n             */\n            index = path.length;\n          }\n\n          /*\n           * get the path up to the node id index. this does\n           * not modify the path array.\n           */\n          const extractedPath = path.slice(0, index);\n\n          extractedPaths.push(extractedPath);\n        }\n      }\n    }\n    return extractedPaths;\n  };\n\n  /**\n   * Removes duplicate paths\n   * @param paths an array of paths. each path contains an array of node ids\n   * @return an array of unique paths\n   */\n  removeDuplicatePaths(paths) {\n    const uniquePaths = [];\n    if (paths != null) {\n      for (let path of paths) {\n        let isPathInUniquePaths = false;\n        for (let uniquePath of uniquePaths) {\n          if (this.pathsEqual(path, uniquePath)) {\n            isPathInUniquePaths = true;\n          }\n        }\n\n        if (!isPathInUniquePaths) {\n          // the path is not equal to any paths in the unique\n          // paths array so we will add it to the unique paths array\n          uniquePaths.push(path);\n        }\n      }\n    }\n    return uniquePaths;\n  };\n\n  /**\n   * Check if two paths are equal\n   * @param path1 an array of node ids\n   * @param path2 an array of node ids\n   * @return whether the two paths contain the same node ids\n   * in the same order\n   */\n  pathsEqual(path1, path2) {\n    let result = false;\n    if (path1 != null && path2 != null) {\n      if (path1.length === path2.length) {\n        result = true;\n\n        for (let x = 0; x < path1.length; x++) {\n          const path1NodeId = path1[x];\n          const path2NodeId = path2[x];\n          if (path1NodeId !== path2NodeId) {\n            result = false;\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Check if a node id is in any branch\n   * @param branches an array of branch objects\n   * @param nodeId the node id to check\n   * @return whether the node id is in any branch\n   */\n  isNodeIdInABranch(branches, nodeId) {\n    if (branches != null && nodeId != null) {\n      for (let branch of branches) {\n        if (branch != null) {\n          const branchPaths = branch.branchPaths;\n          if (branchPaths != null) {\n            for (let branchPath of branchPaths) {\n              if (branchPath != null) {\n                const index = branchPath.indexOf(nodeId);\n                if (index != -1) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get the branch paths that a node id is in\n   * @param branches an array of branch objects\n   * @param nodeId the node id to check\n   * @return an array of the branch paths that the node id is in\n   */\n  getBranchPathsByNodeId(branches, nodeId) {\n    const branchPathsIn = [];\n    if (branches != null && nodeId != null) {\n      for (let branch of branches) {\n        if (branch != null) {\n          const branchPaths = branch.branchPaths;\n          if (branchPaths != null) {\n            for (let branchPath of branchPaths) {\n              if (branchPath != null) {\n                const index = branchPath.indexOf(nodeId);\n                if (index != -1) {\n                  /*\n                   * the node is in this branch path so we will\n                   * add the branch path to our array\n                   */\n                  branchPathsIn.push(branchPath);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return branchPathsIn;\n  }\n\n  /**\n   * Get the component by node id and component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n   */\n  getComponentByNodeIdAndComponentId(nodeId, componentId) {\n    if (nodeId != null && componentId != null) {\n      const components = this.getComponentsByNodeId(nodeId);\n      for (let tempComponent of components) {\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (componentId === tempComponentId) {\n            return tempComponent;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns the position of the component in the node by node id and\n   * component id, 0-indexed.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns the component's position or -1 if nodeId or componentId are null\n   * or doesn't exist in the project.\n   */\n  getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n    if (nodeId != null && componentId != null) {\n      const components = this.getComponentsByNodeId(nodeId);\n      for (let c = 0; c < components.length; c++) {\n        const tempComponent = components[c];\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (componentId === tempComponentId) {\n            return c;\n          }\n        }\n      }\n    }\n    return -1;\n  };\n\n  /**\n   * Get the components in a node\n   * @param nodeId the node id\n   * @returns an array of components or empty array if nodeId is null or\n   * doesn't exist in the project.\n   * if the node exists but doesn't have any components, returns an empty array.\n   */\n  getComponentsByNodeId(nodeId) {\n    if (nodeId != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        if (node.components != null) {\n          return node.components;\n        }\n      }\n    }\n    return [];\n  };\n\n\n  // TODO: how is this different from straight-up calling getNodeById?\n  getNodeContentByNodeId(nodeId) {\n    let nodeContent = null;\n    if (nodeId != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        nodeContent = node;\n      }\n    }\n    return nodeContent;\n  };\n\n  /**\n   * Insert the node after the given node id in the group's\n   * array of children ids\n   * @param nodeIdToInsert the node id we want to insert\n   * @param nodeIdToInsertAfter the node id we want to insert after\n   */\n  insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n    const groupNodes = this.getGroupNodes();\n    if (groupNodes != null) {\n      for (let group of groupNodes) {\n        if (group != null) {\n          this.insertNodeAfterInGroup(group, nodeIdToInsert, nodeIdToInsertAfter);\n        }\n      }\n    }\n    const inactiveGroupNodes = this.getInactiveGroupNodes();\n    if (inactiveGroupNodes != null) {\n      for (let inactiveGroup of inactiveGroupNodes) {\n        if (inactiveGroup != null) {\n          this.insertNodeAfterInGroup(inactiveGroup, nodeIdToInsert, nodeIdToInsertAfter);\n        }\n      }\n    }\n  }\n\n  /**\n   * Insert a node id in a group after another specific node id.\n   * @param group A group object.\n   * @param nodeIdToInsert The node id to insert.\n   * @param nodeIdToInsertAfter The node id to insert after.\n   * @returns {boolean} Whether we inserted the node id.\n   */\n  insertNodeAfterInGroup(group, nodeIdToInsert, nodeIdToInsertAfter) {\n    const ids = group.ids;\n    if (ids != null) {\n      for (let i = 0; i < ids.length; i++) {\n        const id = ids[i];\n        if (nodeIdToInsertAfter === id) {\n          ids.splice(i + 1, 0, nodeIdToInsert);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Update the transitions to handle inserting a node after another node\n   * @param node the node to insert\n   * @param nodeId the node id to insert after\n   */\n  insertNodeAfterInTransitions(node, nodeId) {\n    const previousNode = this.getNodeById(nodeId);\n\n    if (previousNode != null) {\n      if (previousNode.transitionLogic == null) {\n        previousNode.transitionLogic = {};\n        previousNode.transitionLogic.transitions = [];\n      }\n\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n\n      if (this.isGroupNode(node.id)) {\n        /*\n         * the node we are inserting is a group so we will update\n         * the transitions of its children so that they transition\n         * to the correct node\n         */\n        this.updateChildrenTransitionsForMovingGroup(node, nodeId);\n      }\n\n      const previousNodeTransitionLogic = previousNode.transitionLogic;\n\n      if (previousNodeTransitionLogic != null) {\n        const transitions = previousNodeTransitionLogic.transitions;\n\n        if (transitions != null) {\n          const transitionsJSONString = angular.toJson(transitions);\n          const transitionsCopy = angular.fromJson(transitionsJSONString);\n\n          // set the transitions from the before node into the inserted node\n          node.transitionLogic.transitions = transitionsCopy;\n        }\n      }\n\n      if (node.transitionLogic.transitions.length == 0) {\n        /*\n         * The node does not have any transitions so we will look for\n         * a transition on the parent group. If the parent has a\n         * transition we will use it for the node.\n         */\n\n        const parentGroupId = this.getParentGroupId(nodeId);\n\n        if (parentGroupId != null &&\n            parentGroupId != '' &&\n            parentGroupId != 'group0') {\n          const parentTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n          if (parentTransitions != null) {\n            for (let parentTransition of parentTransitions) {\n              const newTransition = {};\n              if (parentTransition != null) {\n                const toNodeId = parentTransition.to;\n                if (this.isGroupNode(toNodeId)) {\n                  const startId = this.getGroupStartId(toNodeId);\n                  if (startId == null || startId == '') {\n                    // there is no start id so we will just use the group id\n                    newTransition.to = toNodeId;\n                  } else {\n                    // there is a start id so we will use it as the to node\n                    newTransition.to = startId;\n                  }\n                } else {\n                  newTransition.to = toNodeId;\n                }\n              }\n              node.transitionLogic.transitions.push(newTransition);\n            }\n          }\n        }\n      }\n\n      const newNodeId = node.id;\n\n      // TODO handle branching case\n\n      previousNode.transitionLogic.transitions = [];\n\n      const transitionObject = {};\n      transitionObject.to = newNodeId;\n      previousNode.transitionLogic.transitions.push(transitionObject);\n      this.removeBranchPathTakenNodeConstraints(node.id);\n      const branchPathTakenConstraints = this.getBranchPathTakenConstraintsByNodeId(nodeId);\n\n      /*\n       * if the previous node was in a branch path, we will also put the\n       * inserted node into the branch path\n       */\n      if (branchPathTakenConstraints != null &&\n          branchPathTakenConstraints.length > 0) {\n        if (node.constraints == null) {\n          node.constraints = [];\n        }\n\n        for (let branchPathTakenConstraint of branchPathTakenConstraints) {\n          if (branchPathTakenConstraint != null) {\n            // create a new constraint with the same branch path taken parameters\n            const newConstraint = {};\n            newConstraint.id = this.getNextAvailableConstraintIdForNodeId(node.id);\n            newConstraint.action = branchPathTakenConstraint.action;\n            newConstraint.targetId = node.id;\n            newConstraint.removalCriteria = this.UtilService.makeCopyOfJSONObject(branchPathTakenConstraint.removalCriteria);\n            node.constraints.push(newConstraint);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Insert a node into a group\n   * @param nodeIdToInsert the node id to insert\n   * @param nodeIdToInsertInside the node id of the group we will insert into\n   */\n  insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n    const group = this.getNodeById(nodeIdToInsertInside);\n    if (group != null) {\n      const ids = group.ids;\n      if (ids != null) {\n        ids.splice(0, 0, nodeIdToInsert);\n        group.startId = nodeIdToInsert;\n      }\n    }\n  }\n\n  /**\n   * Update the transitions to handle inserting a node into a group\n   * @param nodeIdToInsert node id that we will insert\n   * @param nodeIdToInsertInside the node id of the group we are inserting into\n   */\n  insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n    const nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n    if (nodeToInsert != null &&\n        nodeToInsert.transitionLogic != null &&\n        nodeToInsert.transitionLogic.transitions != null) {\n      nodeToInsert.transitionLogic.transitions = [];\n\n      /*\n       * remove the branch path taken constraints from the node we are\n       * inserting\n       */\n      this.removeBranchPathTakenNodeConstraints(nodeIdToInsert);\n    }\n\n    const group = this.getNodeById(nodeIdToInsertInside);\n    if (this.isGroupNode(nodeIdToInsert)) {\n      /*\n       * the node we are inserting is a group so we will update\n       * the transitions of its children so that they transition\n       * to the correct node\n       */\n      this.updateChildrenTransitionsForMovingGroup(nodeToInsert, null);\n    }\n\n    /*\n     * since we are inserting a node into a group, the node will become\n     * the first node in the group. this means we need to update any nodes\n     * that point to the old start id and make them point to the node\n     * we are inserting.\n     */\n    if (nodeToInsert != null && group != null) {\n      const startId = group.startId;\n      const previousNodes = this.getNodesByToNodeId(startId);\n\n      if (previousNodes == null || previousNodes.length == 0) {\n        const previousGroups = this.getGroupNodesByToNodeId(nodeIdToInsertInside);\n        for (let previousGroup of previousGroups) {\n          if (previousGroup != null) {\n            // get the nodes that do not have a transition in the previous group\n            const lastNodesInGroup = this.getLastNodesInGroup(previousGroup.id);\n\n            for (let node of lastNodesInGroup) {\n              // add a transition from the node to the node we are inserting\n              this.addToTransition(node, nodeIdToInsert);\n            }\n          }\n        }\n      } else {\n        for (let previousNode of previousNodes) {\n          if (previousNode != null && previousNode.id != 'group0') {\n            // change the transition to point to the node we are inserting\n            this.updateToTransition(previousNode, startId, nodeIdToInsert);\n          }\n        }\n      }\n\n      /*\n       * update all the transitions that point to the group and change\n       * them to point to the new start id\n       */\n      const nodesThatTransitionToGroup = this.getNodesByToNodeId(nodeIdToInsertInside);\n\n      if (nodesThatTransitionToGroup != null) {\n        for (let nodeThatTransitionsToGroup of nodesThatTransitionToGroup) {\n          if (!this.isGroupNode(nodeThatTransitionsToGroup.id)) {\n            this.updateToTransition(nodeThatTransitionsToGroup, nodeIdToInsertInside, nodeIdToInsert);\n          }\n        }\n      }\n\n      /*\n       * create a transition from the node we are inserting to the node that\n       * was previously the start node\n       */\n      if (startId != null && startId != '') {\n        const startNode = this.getNodeById(startId);\n\n        if (startNode != null) {\n          // the group has a start node which will become the transition to node\n\n          if (nodeToInsert.transitionLogic == null) {\n            nodeToInsert.transitionLogic = {};\n          }\n\n          if (nodeToInsert.transitionLogic.transitions == null) {\n            nodeToInsert.transitionLogic.transitions = [];\n          }\n\n          /*\n           * make the inserted node transition to the previous start node\n           */\n          const transitionObject = {};\n          transitionObject.to = startId;\n          nodeToInsert.transitionLogic.transitions.push(transitionObject);\n        }\n      }\n\n      // check if the node we inserted has any transitions now\n      const transitions = this.getTransitionsByFromNodeId(nodeIdToInsert);\n\n      if (transitions == null || transitions.length == 0) {\n        /*\n         * the node doesn't have any transitions so we will see if\n         * the parent group transitions to anything and use that\n         * transition\n         */\n\n        const parentTransitions = this.getTransitionsByFromNodeId(nodeIdToInsertInside);\n\n        if (parentTransitions != null) {\n          for (let parentTransition of parentTransitions) {\n            if (parentTransition != null) {\n              const toNodeId = parentTransition.to;\n              if (this.isGroupNode(toNodeId)) {\n                const nextGroup = this.getNodeById(toNodeId);\n\n                if (nextGroup != null) {\n                  const startId = nextGroup.startId;\n\n                  if (startId == null || startId == '') {\n                    // there is no start id so we will just transition to the group\n                    this.addToTransition(nodeToInsert, toNodeId);\n                  } else {\n                    // there is a start id so we will transition to that\n                    this.addToTransition(nodeToInsert, startId);\n                  }\n                }\n              } else {\n                // the to node is not a group\n\n                /*\n                 * we will add a transition from the node we are inserting to\n                 * to that node\n                 */\n                this.addToTransition(nodeToInsert, toNodeId);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a transition to a node\n   * @param node the node we are adding a transition to\n   * @param toNodeId the node id we going to transition to\n   * @param criteria (optional) a criteria object specifying\n   * what needs to be satisfied in order to use this transition\n   */\n  addToTransition(node, toNodeId, criteria) {\n    if (node != null) {\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n      const transition = {};\n      transition.to = toNodeId;\n      if (criteria != null) {\n        transition.criteria = criteria;\n      }\n      node.transitionLogic.transitions.push(transition);\n    }\n  }\n\n  /**\n   * Update the to value of aa transition\n   * @param node the node to update\n   * @param oldToNodeId the previous to node id\n   * @param newToNodeId the new to node id\n   */\n  updateToTransition(node, oldToNodeId, newToNodeId) {\n    if (node != null) {\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n\n      const transitions = node.transitionLogic.transitions;\n      for (let transition of transitions) {\n        if (transition != null) {\n          const toNodeId = transition.to;\n          if (oldToNodeId === toNodeId) {\n            transition.to = newToNodeId;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the nodes in a group that do not have transitions\n   * @param groupId the group id\n   * @returns the nodes in the group that do not have transitions\n   */\n  getLastNodesInGroup(groupId) {\n    const lastNodes = [];\n    if (groupId != null) {\n      const group = this.getNodeById(groupId);\n      if (group != null) {\n        const childIds = group.ids;\n        if (childIds != null) {\n          for (let childId of childIds) {\n            if (childId != null) {\n              const child = this.getNodeById(childId);\n              if (child != null) {\n                const transitionLogic = child.transitionLogic;\n                if (transitionLogic != null) {\n                  const transitions = transitionLogic.transitions;\n                  if (transitions == null || transitions.length == 0) {\n                    lastNodes.push(child);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return lastNodes;\n  }\n\n  /**\n   * Get the next available group id\n   * @returns the next available group id\n   */\n  getNextAvailableGroupId() {\n    const groupIds = this.getGroupIds();\n    let largestGroupIdNumber = null;\n    for (let groupId of groupIds) {\n      // get the number from the group id e.g. the number of 'group2' would be 2\n      let groupIdNumber = groupId.replace('group', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(groupIdNumber)) {\n        groupIdNumber = parseInt(groupIdNumber);\n\n        // update the largest group id number if necessary\n        if (largestGroupIdNumber == null) {\n          largestGroupIdNumber = groupIdNumber;\n        } else if (groupIdNumber > largestGroupIdNumber) {\n          largestGroupIdNumber = groupIdNumber;\n        }\n      }\n    }\n\n    const nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n    return nextAvailableGroupId;\n  }\n\n  /**\n   * Get all the group ids\n   * @returns an array with all the group ids\n   */\n  getGroupIds() {\n    const groupIds = [];\n\n    const groupNodes = this.groupNodes;\n    for (let group of groupNodes) {\n      if (group != null) {\n        const groupId = group.id;\n        if (groupId != null) {\n          groupIds.push(groupId);\n        }\n      }\n    }\n\n    const inactiveGroupNodes = this.getInactiveGroupNodes();\n    for (let inactiveGroup of inactiveGroupNodes) {\n      if (inactiveGroup != null) {\n        const inactiveGroupId = inactiveGroup.id;\n        if (inactiveGroupId != null) {\n          groupIds.push(inactiveGroupId);\n        }\n      }\n    }\n    return groupIds;\n  }\n\n  /**\n   * Get the next available node id\n   * @param nodeIdsToSkip (optional) An array of additional node ids to not\n   * use. This parameter is used in cases where we are creating multiple new\n   * nodes at once.\n   * Example\n   * We ask for two new node ids by calling getNextAvailableNodeId() twice.\n   * The first time it returns \"node10\".\n   * If we ask the second time without actually creating and adding node10,\n   * it will return \"node10\" again. If we provide \"node10\" in the\n   * nodeIdsToSkip, then getNextAvailableNodeId() will properly return to us\n   * \"node11\".\n   * @returns the next available node id\n   */\n  getNextAvailableNodeId(nodeIdsToSkip) {\n    const nodeIds = this.getNodeIds();\n    let largestNodeIdNumber = null;\n\n    for (let nodeId of nodeIds) {\n      // get the number from the node id e.g. the number of 'node2' would be 2\n      let nodeIdNumber = nodeId.replace('node', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(nodeIdNumber)) {\n        nodeIdNumber = parseInt(nodeIdNumber);\n\n        // update the largest node id number if necessary\n        if (largestNodeIdNumber == null) {\n          largestNodeIdNumber = nodeIdNumber;\n        } else if (nodeIdNumber > largestNodeIdNumber) {\n          largestNodeIdNumber = nodeIdNumber;\n        }\n      }\n    }\n\n    const inactiveNodeIds = this.getInactiveNodeIds();\n    for (let inactiveNodeId of inactiveNodeIds) {\n      // get the number from the node id e.g. the number of 'node2' would be 2\n      let nodeIdNumber = inactiveNodeId.replace('node', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(nodeIdNumber)) {\n        nodeIdNumber = parseInt(nodeIdNumber);\n\n        // update the largest node id number if necessary\n        if (largestNodeIdNumber == null) {\n          largestNodeIdNumber = nodeIdNumber;\n        } else if (nodeIdNumber > largestNodeIdNumber) {\n          largestNodeIdNumber = nodeIdNumber;\n        }\n      }\n    }\n\n    if (nodeIdsToSkip != null) {\n      // there are node ids to skip\n\n      for (let nodeIdToSkip of nodeIdsToSkip) {\n        // get the number from the node id e.g. the number of 'node2' would be 2\n        let nodeIdNumber = nodeIdToSkip.replace('node', '');\n\n        // make sure the number is an actual number\n        if (!isNaN(nodeIdNumber)) {\n          nodeIdNumber = parseInt(nodeIdNumber);\n\n          // update the largest node id number if necessary\n          if (largestNodeIdNumber == null) {\n            largestNodeIdNumber = nodeIdNumber;\n          } else if (nodeIdNumber > largestNodeIdNumber) {\n            largestNodeIdNumber = nodeIdNumber;\n          }\n        }\n      }\n    }\n\n    const nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n    return nextAvailableNodeId;\n  }\n\n  /**\n   * Get all the node ids from steps (not groups)\n   * @returns an array with all the node ids\n   */\n  getNodeIds() {\n    const nodeIds = [];\n    for (let node of this.applicationNodes) {\n      if (node != null) {\n        const nodeId = node.id;\n        if (nodeId != null) {\n          nodeIds.push(nodeId);\n        }\n      }\n    }\n    return nodeIds;\n  }\n\n  /**\n   * Get all the node ids from inactive steps\n   * @returns an array with all the inactive node ids\n   */\n  getInactiveNodeIds() {\n    const nodeIds = [];\n    const inactiveNodes = this.project.inactiveNodes;\n    if (inactiveNodes != null) {\n      for (let inactiveNode of inactiveNodes) {\n        if (inactiveNode != null) {\n          const nodeId = inactiveNode.id;\n          if (nodeId != null) {\n            nodeIds.push(nodeId);\n          }\n        }\n      }\n    }\n    return nodeIds;\n  }\n\n  /**\n   * Move nodes inside a group node\n   * @param nodeIds the node ids to move\n   * @param nodeId the node id of the group we are moving the nodes inside\n   */\n  moveNodesInside(nodeIds, nodeId) {\n    const movedNodes = [];\n\n    for (let n = 0; n < nodeIds.length; n++) {\n      const tempNodeId = nodeIds[n];\n      const tempNode = this.getNodeById(tempNodeId);\n      movedNodes.push(tempNode);\n\n      const movingNodeIsActive = this.isActive(tempNodeId);\n      const stationaryNodeIsActive = this.isActive(nodeId);\n\n      if (movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from active to active\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n          this.insertNodeInsideInGroups(tempNodeId, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.insertNodeAfterInTransitions(tempNode, nodeId);\n          this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        }\n      } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from active to inactive\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.moveFromActiveToInactiveInsertInside(tempNode, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.moveToInactive(tempNode, nodeId);\n        }\n      } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from inactive to active\n\n        this.moveToActive(tempNode);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n          this.insertNodeInsideInGroups(tempNodeId, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.insertNodeAfterInTransitions(tempNode, nodeId);\n          this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        }\n      } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from inactive to inactive\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.moveFromInactiveToInactiveInsertInside(tempNode, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.moveInactiveNode(tempNode, nodeId);\n        }\n      }\n\n      /*\n       * remember the node id so we can put the next node (if any)\n       * after this one\n       */\n      nodeId = tempNode.id;\n    }\n    return movedNodes;\n  }\n\n  /**\n   * Move nodes after a certain node id\n   * @param nodeIds the node ids to move\n   * @param nodeId the node id we will put the moved nodes after\n   */\n  moveNodesAfter(nodeIds, nodeId) {\n    const movedNodes = [];\n\n    for (let tempNodeId of nodeIds) {\n      const node = this.getNodeById(tempNodeId);\n      movedNodes.push(node);\n\n      const movingNodeIsActive = this.isActive(tempNodeId);\n      const stationaryNodeIsActive = this.isActive(nodeId);\n\n      if (movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from active to active\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n        this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        this.insertNodeAfterInTransitions(node, nodeId);\n      } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from active to inactive\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n        this.moveToInactive(node, nodeId);\n      } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from inactive to active\n\n        this.moveToActive(node);\n        this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        this.insertNodeAfterInTransitions(node, nodeId);\n      } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from inactive to inactive\n\n        this.removeNodeIdFromTransitions(tempNodeId);\n        this.removeNodeIdFromGroups(tempNodeId);\n        this.moveInactiveNode(node, nodeId);\n      }\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = node.id;\n    }\n    return movedNodes;\n  }\n\n  /**\n   * Copy the node with the specified nodeId\n   * @param nodeId the node id to copy\n   * @return copied node\n   */\n  copyNode(nodeId) {\n    const node = this.getNodeById(nodeId);\n    const nodeCopy = this.UtilService.makeCopyOfJSONObject(node);\n    nodeCopy.id = this.getNextAvailableNodeId();\n    nodeCopy.transitionLogic = {};  // clear transition logic\n    nodeCopy.constraints = [];  // clear constraints\n\n    const newComponentIds = [];\n    for (let component of nodeCopy.components) {\n      const newComponentId = this.getUnusedComponentId(newComponentIds);\n      newComponentIds.push(newComponentId);\n      component.id = newComponentId;\n    }\n    return nodeCopy;\n  }\n\n  /**\n   * Delete a node\n   * @param nodeId the node id\n   */\n  deleteNode(nodeId) {\n    /*\n     * flag for whether we are deleting the project start node id.\n     * if we are deleting the project start node id, we will need\n     * to change it to the next logical node id that will be used\n     * as the project start.\n     */\n    let removingProjectStartNodeId = false;\n\n    if (this.isGroupNode(nodeId)) {\n      // the node is a group node so we will also remove all of its children\n      const group = this.getNodeById(nodeId);\n\n      // TODO check if the child is in another group, if so do not remove\n\n      if (group != null) {\n        const ids = group.ids;\n        for (let i = 0; i < ids.length; i++) {\n          const id = ids[i];\n          this.removeNodeIdFromTransitions(id);\n          this.removeNodeIdFromGroups(id);\n          this.removeNodeIdFromNodes(id);\n\n          if (this.project.startNodeId == id) {\n            removingProjectStartNodeId = true;\n          }\n\n          /*\n           * move the counter back because we have removed a child\n           * from the parent group's array of child ids so all of\n           * the child ids were shifted back one and the next child\n           * we want will be at i--\n           */\n          i--;\n        }\n      }\n    }\n\n    const parentGroup = this.getParentGroup(nodeId);\n\n    // check if we need to update the start id of the parent group\n    if (parentGroup != null) {\n\n      /*\n       * the node is the start node of the parent group so we need\n       * to update the start id of the parent group to point to\n       * the next node\n       */\n      if (nodeId === parentGroup.startId) {\n        let hasSetNewStartId = false;\n\n        const node = this.getNodeById(nodeId);\n        if (node != null) {\n          const transitionLogic = node.transitionLogic;\n          if (transitionLogic != null) {\n            const transitions = transitionLogic.transitions;\n            if (transitions != null && transitions.length > 0) {\n              const transition = transitions[0];\n              if (transition != null) {\n                const toNodeId = transition.to;\n                if (toNodeId != null) {\n                  if (this.isNodeInGroup(toNodeId, parentGroup.id)) {\n                    parentGroup.startId = toNodeId;\n                    hasSetNewStartId = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!hasSetNewStartId) {\n          parentGroup.startId = '';\n        }\n      }\n    }\n\n    if (nodeId === this.getStartNodeId()) {\n      removingProjectStartNodeId = true;\n    }\n\n    if (removingProjectStartNodeId) {\n      /*\n       * we are removing the project start node id so we need to update\n       * the startNodeId to something else\n       */\n\n      if (this.isGroupNode(nodeId)) {\n        /*\n         * we are removing a group so we need to set the startNodeId to\n         * the first node of the next group or if the next group doesn't\n         * have any nodes, we will just use the next group\n         */\n\n        // get the transitions of the group we are removing\n        const transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions == null || transitions.length == 0) {\n          /*\n           * the group doesn't have any transitions so we will set\n           * the startNodeId to 'group0'\n           */\n          this.setStartNodeId('group0');\n        } else {\n          // the group has transitions\n\n          let nextNodeId = null;\n\n          if (transitions[0] != null && transitions[0].to != null) {\n            nextNodeId = transitions[0].to;\n          }\n\n          if (nextNodeId != null) {\n            if (this.isGroupNode(nextNodeId)) {\n              const nextGroupNode = this.getNodeById(nextNodeId);\n\n              if (nextGroupNode != null) {\n                const nextGroupStartId = nextGroupNode.startId;\n\n                if (nextGroupStartId == null) {\n                  /*\n                   * the next group does not have a start id so we\n                   * will just use the next group id as the project\n                   * start node id\n                   */\n                  this.setStartNodeId(nextNodeId);\n                } else {\n                  /*\n                   * the next group has a start id so we will use\n                   * it as the project start node id\n                   */\n                  this.setStartNodeId(nextGroupStartId);\n                }\n              }\n            } else {\n              /*\n               * the transition is to a step so we will use it as the\n               * project start node id\n               */\n              this.setStartNodeId(nextNodeId);\n            }\n          }\n        }\n      } else {\n        /*\n         * we are removing a step node so we will set the startNodeId to\n         * the next node in the transitions, or if there are no\n         * transitions, we will use the parent group\n         */\n\n        // get the transitions from the step we are removing\n        const transitions = this.getTransitionsByFromNodeId(nodeId);\n        const parentGroupId = this.getParentGroupId(nodeId);\n        if (transitions == null || transitions.length == 0) {\n          this.setStartNodeId(parentGroupId);\n        } else {\n          if (transitions[0] != null && transitions[0].to != null) {\n            let toNodeId = transitions[0].to;\n            if (this.isNodeInGroup(toNodeId, parentGroupId)) {\n              this.setStartNodeId(toNodeId);\n            } else {\n              this.setStartNodeId(this.getParentGroupId(nodeId));\n            }\n          }\n        }\n      }\n    }\n\n    this.removeNodeIdFromTransitions(nodeId);\n    this.removeNodeIdFromGroups(nodeId);\n    this.removeNodeIdFromNodes(nodeId);\n\n    if (parentGroup != null) {\n      this.recalculatePositionsInGroup(parentGroup.id);\n    }\n  }\n\n  /**\n   * Update the transitions to handle removing a node\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromTransitions(nodeId) {\n    const nodeToRemove = this.getNodeById(nodeId);\n    const nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n    const nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n    let nodeToRemoveTransitions = [];\n\n    if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n      nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n    }\n\n    const parentIdOfNodeToRemove = this.getParentGroupId(nodeId);\n    const parentGroup = this.getNodeById(parentIdOfNodeToRemove);\n\n    // update the start id if we are removing the start node of a group\n    if (parentGroup != null) {\n      const parentGroupStartId = parentGroup.startId;\n      if (parentGroupStartId != null) {\n        if (parentGroupStartId === nodeId) {\n          // the node we are removing is the start node\n\n          if (nodeToRemoveTransitions != null && nodeToRemoveTransitions.length > 0) {\n            for (let nodeToRemoveTransition of nodeToRemoveTransitions) {\n              if (nodeToRemoveTransition != null) {\n                const toNodeId = nodeToRemoveTransition.to;\n                if (toNodeId != null) {\n                  /*\n                   * we need to check that the to node id is in the\n                   * same group. some transitions point to a node id\n                   * in the next group which we would not want to use\n                   * for the start id.\n                   */\n                  if (this.getParentGroupId(toNodeId) == parentIdOfNodeToRemove) {\n                    // set the new start id\n                    parentGroup.startId = toNodeId;\n                  }\n                }\n              }\n            }\n          } else {\n            // there are no transitions so we will have an empty start id\n            parentGroup.startId = '';\n          }\n        }\n      }\n    }\n\n    for (let n = 0; n < nodesByToNodeId.length; n++) {\n      const node = nodesByToNodeId[n];\n\n      if (node != null) {\n        const parentIdOfFromNode = this.getParentGroupId(node.id);\n        const transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n          const transitions = transitionLogic.transitions;\n          for (let t = 0; t < transitions.length; t++) {\n            const transition = transitions[t];\n            if (nodeId === transition.to) {\n              // we have found the transition to the node we are removing\n\n              // copy the transitions from the node we are removing\n              let transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n              transitionsCopy = angular.fromJson(transitionsCopy);\n\n              /*\n               * if the parent from group is different than the parent removing group\n               * remove transitions that are to a node in a different group than\n               * the parent removing group\n               */\n\n              if (parentIdOfFromNode != parentIdOfNodeToRemove) {\n                for (let tc = 0; tc < transitionsCopy.length; tc++) {\n                  const tempTransition = transitionsCopy[tc];\n                  if (tempTransition != null) {\n                    const tempToNodeId = tempTransition.to;\n                    if (tempToNodeId != null) {\n                      const parentIdOfToNode = this.getParentGroupId(tempToNodeId);\n                      if (parentIdOfNodeToRemove != parentIdOfToNode) {\n                        // remove the transition\n                        transitionsCopy.splice(tc, 1);\n                        tc--;\n                      }\n                    }\n                  }\n                }\n              }\n\n              if (this.isFirstNodeInBranchPath(nodeId)) {\n                /*\n                 * Get the node ids that have a branchPathTaken\n                 * constraint from the before node and to the node\n                 * we are removing. If there are any, we need to\n                 * update the branchPathTaken constraint with the\n                 * next nodeId that comes after the node we are\n                 * removing.\n                 */\n                const nodeIdsInBranch = this.getNodeIdsInBranch(node.id, nodeId);\n\n                if (nodeIdsInBranch != null) {\n                  for (let nodeIdInBranch of nodeIdsInBranch) {\n                    const nodeInBranch = this.getNodeById(nodeIdInBranch);\n                    for (let transitionCopy of transitionsCopy) {\n                      if (transitionCopy != null) {\n                        const currentFromNodeId = node.id;\n                        const currentToNodeId = nodeId;\n                        const newFromNodeId = node.id;\n                        const newToNodeId = transitionCopy.to;\n\n                        /*\n                         * change the branch path taken constraint by changing\n                         * the toNodeId\n                         */\n                        this.updateBranchPathTakenConstraint(nodeInBranch, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                      }\n                    }\n                  }\n                }\n              } else if (this.isBranchPoint(nodeId)) {\n                /*\n                 * get all the branches that have the node we\n                 * are removing as the start point\n                 */\n                const branches = this.getBranchesByBranchStartPointNodeId(nodeId);\n\n                for (let branch of branches) {\n                  if (branch != null) {\n                    /*\n                     * get the branch paths. these paths do not\n                     * contain the start point or merge point.\n                     */\n                    const branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n                      for (let branchPath of branchPaths) {\n                        if (branchPath != null) {\n                          const currentFromNodeId = nodeId;\n                          const currentToNodeId = branchPath[0];\n                          const newFromNodeId = node.id;\n                          const newToNodeId = branchPath[0];\n                          for (let branchPathNodeId of branchPath) {\n                            const branchPathNode = this.getNodeById(branchPathNodeId);\n                            this.updateBranchPathTakenConstraint(branchPathNode, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              // remove the transition to the node we are removing\n              transitions.splice(t, 1);\n\n              if (transitionsCopy != null) {\n                let insertIndex = t;\n\n                /*\n                 * loop through all the transitions from the node we are removing\n                 * and insert them into the transitions of the from node\n                 * e.g.\n                 * the node that comes before the node we are removing has these transitions\n                 * \"transitions\": [\n                 *     {\n                 *         \"to\": \"node4\"\n                 *     },\n                 *     {\n                 *         \"to\": \"node6\"\n                 *     }\n                 * ]\n                 *\n                 * we are removing node4. node4 has a transition to node5.\n                 *\n                 * the node that comes before the node we are removing now has these transitions\n                 * \"transitions\": [\n                 *     {\n                 *         \"to\": \"node5\"\n                 *     },\n                 *     {\n                 *         \"to\": \"node6\"\n                 *     }\n                 * ]\n                 */\n                for (let transitionCopy of transitionsCopy) {\n                  // insert a transition from the node we are removing\n                  transitions.splice(insertIndex, 0, transitionCopy);\n                  insertIndex++;\n                }\n              }\n\n              // check if the node we are moving is a group\n              if (this.isGroupNode(nodeId)) {\n                /*\n                 * we are moving a group so we need to update transitions that\n                 * go into the group\n                 */\n                const groupIdWeAreMoving = nodeId;\n                const groupThatTransitionsToGroupWeAreMoving = node;\n                this.updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving);\n              }\n            }\n          }\n\n          if (this.isBranchPoint(nodeId)) {\n            /*\n             * the node we are deleting is a branch point so we to\n             * copy the transition logic to the node that comes\n             * before it\n             */\n            node.transitionLogic = this.UtilService.makeCopyOfJSONObject(nodeToRemoveTransitionLogic);\n\n            /*\n             * set the transitions for the node that comes before\n             * the one we are removing\n             */\n            node.transitionLogic.transitions = transitions;\n          }\n        }\n      }\n    }\n\n    if (nodeToRemoveTransitionLogic != null) {\n      nodeToRemoveTransitionLogic.transitions = [];\n    }\n\n    if (this.isGroupNode(nodeId)) {\n      /*\n       * this is a group node so we will remove all child transitions that\n       * go out of this group\n       */\n      this.removeTransitionsOutOfGroup(nodeId);\n    }\n  };\n\n  /**\n   * Remove the node id from a group\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromGroups(nodeId) {\n    const groups = this.getGroupNodes();\n    for (let group of groups) {\n      this.removeNodeIdFromGroup(group, nodeId);\n    }\n    const inactiveGroups = this.getInactiveGroupNodes();\n    for (let inactiveGroup of inactiveGroups) {\n      this.removeNodeIdFromGroup(inactiveGroup, nodeId);\n    }\n  }\n\n  /**\n   * Remove a node id from a group.\n   * @param group The group to remove from.\n   * @param nodeId The node id to remove.\n   */\n  removeNodeIdFromGroup(group, nodeId) {\n    const startId = group.startId;\n    const ids = group.ids;\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      if (nodeId === id) {\n        ids.splice(i, 1);\n\n        if (nodeId === startId) {\n          /*\n           * the node id is also the start id so we will get the\n           * next node id and set it as the new start id\n           */\n\n          let hasSetNewStartId = false;\n\n          const node = this.getNodeById(id);\n\n          if (node != null) {\n            const transitionLogic = node.transitionLogic;\n            if (transitionLogic != null) {\n              const transitions = transitionLogic.transitions;\n              if (transitions != null && transitions.length > 0) {\n                // get the first transition\n                // TODO handle the case when the node we are removing is a branch point\n                const transition = transitions[0];\n\n                if (transition != null) {\n                  const to = transition.to;\n\n                  if (to != null) {\n                    group.startId = to;\n                    hasSetNewStartId = true;\n                  }\n                }\n              }\n            }\n          }\n\n          if (!hasSetNewStartId) {\n            /*\n             * the node we are removing did not have a transition\n             * so there will be no start id\n             */\n            group.startId = '';\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the array of nodes\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromNodes(nodeId) {\n    const nodes = this.project.nodes;\n    for (let n = 0; n < nodes.length; n++) {\n      const node = nodes[n];\n      if (node != null) {\n        if (nodeId === node.id) {\n          nodes.splice(n, 1);\n        }\n      }\n    }\n\n    const inactiveNodes = this.project.inactiveNodes;\n    if (inactiveNodes != null) {\n      for (let i = 0; i < inactiveNodes.length; i++) {\n        const inactiveNode = inactiveNodes[i];\n        if (inactiveNode != null) {\n          if (nodeId === inactiveNode.id) {\n            inactiveNodes.splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive nodes array\n   * @param nodeId the node to remove from the inactive nodes array\n   */\n  removeNodeIdFromInactiveNodes(nodeId) {\n    const inactiveNodes = this.project.inactiveNodes;\n\n    if (inactiveNodes != null) {\n      for (let i = 0; i < inactiveNodes.length; i++) {\n        const inactiveNode = inactiveNodes[i];\n        if (inactiveNode != null) {\n          const inactiveNodeId = inactiveNode.id;\n          if (nodeId === inactiveNodeId) {\n            /*\n             * we have found the node we are looking for so we will\n             * remove it\n             */\n            inactiveNodes.splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Create a new component\n   * @param nodeId the node id to create the component in\n   * @param componentType the component type\n   * @param insertAfterComponentId Insert the new compnent after the given\n   * component id. If this argument is null, we will place the new component\n   * in the first position.\n   */\n  createComponent(nodeId, componentType, insertAfterComponentId) {\n    let component = null;\n    if (nodeId != null && componentType != null) {\n      // get the node we will create the component in\n      const node = this.getNodeById(nodeId);\n\n      // get the service for the component type\n      const service = this.$injector.get(componentType + 'Service');\n\n      if (node != null && service != null) {\n        // create the new component\n        component = service.createComponent();\n\n        if (service.componentHasWork()) {\n          /*\n           * the component has student work so we will need to\n           * determine if we need to show the save button on the\n           * component or the step\n           */\n\n          if (node.showSaveButton == true) {\n            /*\n             * the step is showing a save button so we will not show\n             * the save button on this new component\n             */\n          } else {\n            // the step is not showing a save button\n\n            if (this.doesAnyComponentShowSubmitButton(node.id)) {\n              /*\n               * at least one of the other components in the step are\n               * showing a submit button so we will also show the save\n               * button on this new component\n               */\n\n              // turn on the component save button\n              component.showSaveButton = true;\n            } else {\n              /*\n               * none of the other components are showing a submit button\n               * so we will show the save button on the step\n               */\n\n              // turn on the step save button\n              node.showSaveButton = true;\n            }\n          }\n        }\n\n        // add the component to the node\n        this.addComponentToNode(node, component, insertAfterComponentId);\n      }\n    }\n    return component;\n  }\n\n  /**\n   * Does any component in the step generate work\n   * @param nodeId the node id\n   * @return whether any components in the step generates work\n   */\n  doesAnyComponentHaveWork(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      const components = node.components;\n      if (components != null) {\n        for (let component of components) {\n          if (component != null) {\n            const componentType = component.type;\n            const service = this.$injector.get(componentType + 'Service');\n            if (service != null) {\n              if (service.componentHasWork()) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if any of the components in the node are showing their save button\n   * @param nodeId the node id to check\n   * @return whether any of the components in the node show their save button\n   */\n  doesAnyComponentShowSaveButton(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      const components = node.components;\n      if (components != null) {\n        for (let component of components) {\n          if (component != null) {\n            if (component.showSaveButton == true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if any of the components in the node are showing their submit button\n   * @param nodeId the node id to check\n   * @return whether any of the components in the node show their submit button\n   */\n  doesAnyComponentShowSubmitButton(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      const components = node.components;\n      if (components != null) {\n        for (let component of components) {\n          if (component != null) {\n            if (component.showSubmitButton == true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Add the component to the node\n   * @param node the node\n   * @param component the component\n   * @param insertAfterComponentId Insert the component after this given\n   * component id. If this argument is null, we will place the new component\n   * in the first position.\n   */\n  addComponentToNode(node, component, insertAfterComponentId) {\n    if (node != null && component != null) {\n      if (insertAfterComponentId == null) {\n        /*\n         * insertAfterComponentId is null so we will place the new\n         * component in the first position\n         */\n        node.components.splice(0, 0, component);\n      } else {\n        // place the new component after the insertAfterComponentId\n\n        // boolean flag for whether we have added the component yet\n        let added = false;\n\n        const components = node.components;\n        for (let c = 0; c < components.length; c++) {\n          const tempComponent = components[c];\n          if (tempComponent != null && tempComponent.id != null &&\n              tempComponent.id == insertAfterComponentId) {\n            /*\n             * we have found the component we want to add the new\n             * one after\n             */\n\n            // add the component\n            components.splice(c + 1, 0, component);\n            added = true;\n            break;\n          }\n        }\n\n        if (!added) {\n          /*\n           * the component has not been added yet so we will just add\n           * it at the end\n           */\n          node.components.push(component);\n        }\n      }\n    }\n  }\n\n  /**\n   * Move the component(s) within the node\n   * @param nodeId we are moving component(s) in this node\n   * @param componentIds the component(s) we are moving\n   * @param insertAfterComponentId Insert the component(s) after this given\n   * component id. If this argument is null, we will place the new\n   * component(s) in the first position.\n   */\n  moveComponent(nodeId, componentIds, insertAfterComponentId) {\n    // get the node for which we are moving components\n    const node = this.getNodeById(nodeId);\n\n    const components = node.components;\n    const componentsToMove = [];\n\n    // remove the component(s)\n    for (let a = components.length - 1; a >= 0; a--) {\n      const tempComponent = components[a];\n      if (tempComponent != null) {\n        if (componentIds.indexOf(tempComponent.id) != -1) {\n          // we have found a component we want to move\n\n          // add the component to our array of components we are moving\n          componentsToMove.splice(0, 0, tempComponent);\n\n          // remove the component from the components array in the node\n          components.splice(a, 1);\n        }\n      }\n    }\n\n    // insert the component(s)\n    if (insertAfterComponentId == null) {\n      // insert the components at the beginning of the components list\n\n      for (let c = 0; c < componentsToMove.length; c++) {\n        // insert a component\n        components.splice(c, 0, componentsToMove[c]);\n      }\n    } else {\n      // insert the component(s) after the given insertAfterComponentId\n\n      for (let b = 0; b < components.length; b++) {\n        const tempComponent = components[b];\n        if (tempComponent != null && tempComponent.id == insertAfterComponentId) {\n          // we have found the component we want to add after\n\n          for (let c = 0; c < componentsToMove.length; c++) {\n            // insert a component\n            components.splice(b + 1 + c, 0, componentsToMove[c]);\n          }\n          break;\n        }\n      }\n    }\n    return componentsToMove;\n  }\n\n  /**\n   * Delete the component\n   * @param nodeId the node id\n   * @param componentId the component id\n   */\n  deleteComponent(nodeId, componentId) {\n    if (nodeId != null && componentId != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        const components = node.components;\n        if (components != null) {\n          for (let c = 0; c < components.length; c++) {\n            const component = components[c];\n            if (component.id === componentId) {\n              // we have found the component we want to delete\n\n              // remove the component\n              components.splice(c, 1);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * TODO: Deprecated, should be removed; replaced by getMaxScoreForWorkgroupId in StudentStatusService\n   * Get the max score for the project. If the project contains branches, we\n   * will only calculate the max score for a single path from the first node\n   * to the last node in the project.\n   * @returns the max score for the project or null if none of the components in the project\n   * has max scores.\n   */\n  getMaxScore() {\n    let maxScore = null;\n    const startNodeId = this.getStartNodeId();\n\n    // get all the paths in the project\n    const allPaths = this.getAllPaths([], startNodeId);\n\n    if (allPaths != null && allPaths.length > 0) {\n      const firstPath = allPaths[0];\n      for (let nodeId of firstPath) {\n        const nodeMaxScore = this.getMaxScoreForNode(nodeId);\n        if (nodeMaxScore != null) {\n          if (maxScore == null) {\n            maxScore = nodeMaxScore;\n          } else {\n            maxScore += nodeMaxScore;\n          }\n        }\n      }\n    }\n    return maxScore;\n  }\n\n  /**\n   * Get the max score for the node\n   * @param nodeId the node id which can be a step or an activity\n   * @returns the max score for the node which can be null or a number\n   * if null, author/teacher has not set a max score for the node\n   */\n  getMaxScoreForNode(nodeId) {\n    let maxScore = null;\n    if (!this.isGroupNode(nodeId)) {\n      const node = this.getNodeById(nodeId);\n      for (let component of node.components) {\n        const componentMaxScore = component.maxScore;\n        if (typeof componentMaxScore == 'number') {\n          if (maxScore == null) {\n            maxScore = componentMaxScore;\n          } else {\n            maxScore += componentMaxScore;\n          }\n        }\n      }\n    }\n    return maxScore;\n  }\n\n  /**\n   * Get the max score for a component\n   * @param nodeId get the max score from a component in this node\n   * @param componentId get the max score from this component\n   */\n  getMaxScoreForComponent(nodeId, componentId) {\n    const component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      return component.maxScore;\n    }\n    return null;\n  }\n\n  /**\n   * Set the max score for a component\n   * @param nodeId set the max score from a component in this node\n   * @param componentId set the max score from this component\n   * @param maxScore set it to this maxScore\n   */\n  setMaxScoreForComponent(nodeId, componentId, maxScore) {\n    if (nodeId != null && componentId != null && maxScore != null && typeof maxScore === 'number') {\n      let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n      if (component != null) {\n        component.maxScore = maxScore;\n      }\n    }\n  }\n\n  /**\n   * Determine if a node id is a direct child of a group\n   * @param nodeId the node id\n   * @param groupId the group id\n   */\n  isNodeInGroup(nodeId, groupId) {\n    const group = this.getNodeById(groupId);\n    const childIds = group.ids;\n    if (childIds != null) {\n      if (childIds.indexOf(nodeId) != -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the first leaf node by traversing all the start ids\n   * until a leaf node id is found\n   */\n  getFirstLeafNodeId() {\n    let firstLeafNodeId = null;\n    const startGroupId = this.project.startGroupId;\n    let node = this.getNodeById(startGroupId);\n    let done = false;\n\n    // loop until we have found a leaf node id or something went wrong\n    while (!done) {\n      if (node == null) {\n        done = true;\n      } else if (this.isGroupNode(node.id)) {\n        // set the first leaf node id to the group id for now\n        firstLeafNodeId = node.id;\n\n        node = this.getNodeById(node.startId);\n      } else if (this.isApplicationNode(node.id)) {\n        // the current node is a leaf\n        firstLeafNodeId = node.id;\n        done = true;\n      } else {\n        done = true;\n      }\n    }\n    return firstLeafNodeId;\n  }\n\n  /**\n   * Replace a node. This is used when we want to revert a node back to a\n   * previous version in the authoring tool.\n   * @param nodeId the node id\n   * @param node the node object\n   */\n  replaceNode(nodeId, node) {\n    if (nodeId != null && node != null) {\n      this.setIdToNode(nodeId, node);\n      this.setIdToElement(nodeId, node);\n      const nodes = this.getNodes();\n      if (nodes != null) {\n        for (let n = 0; n < nodes.length; n++) {\n          const tempNode = nodes[n];\n          if (tempNode != null) {\n            const tempNodeId = tempNode.id;\n            if (nodeId === tempNodeId) {\n              nodes.splice(n, 1, node);\n              break;\n            }\n          }\n        }\n      }\n\n      const applicationNodes = this.applicationNodes;\n      if (applicationNodes != null) {\n        for (let a = 0; a < applicationNodes.length; a++) {\n          const tempApplicationNode = applicationNodes[a];\n          if (tempApplicationNode != null) {\n            const tempApplicationNodeId = tempApplicationNode.id;\n            if (nodeId === tempApplicationNodeId) {\n              applicationNodes.splice(a, 1, node);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Recalculate the positions of the children in the group.\n   * The positions are the numbers usually seen before the title\n   * e.g. if the step is seen as 1.3: Gather Evidence, then 1.3\n   * is the position\n   * @param groupId recalculate all the children of this group\n   */\n  recalculatePositionsInGroup(groupId) {\n    if (groupId != null) {\n      let childIds = this.getChildNodeIdsById(groupId);\n      for (let childId of childIds) {\n        let pos = this.getPositionById(childId);\n        this.setIdToPosition(childId, pos);\n      }\n    }\n  }\n\n  /**\n   * Get the message that describes how to disable the constraint\n   * @param nodeId the node the student is trying to go to\n   * @param constraint the constraint that is preventing the student\n   * from going to the node\n   * @returns the message to display to the student that describes how\n   * to disable the constraint\n   */\n  getConstraintMessage(nodeId, constraint) {\n    let message = '';\n\n    if (nodeId != null && constraint != null) {\n      // get the node title the student is trying to go to\n      const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n\n      const removalConditional = constraint.removalConditional;\n      const removalCriteria = constraint.removalCriteria;\n\n      if (removalCriteria != null) {\n        let criteriaMessages = '';\n        for (let tempRemovalCriteria of removalCriteria) {\n          if (tempRemovalCriteria != null) {\n            // get the message that describes the criteria that needs to be satisfied\n            const criteriaMessage = this.getCriteriaMessage(tempRemovalCriteria);\n\n            if (criteriaMessage != null && criteriaMessage != '') {\n              // separate criteria messages with a line break\n              if (criteriaMessages != '') {\n                criteriaMessages += '<br/>';\n              }\n              criteriaMessages += criteriaMessage;\n            }\n          }\n        }\n        message += criteriaMessages;\n      }\n    }\n    return message;\n  }\n\n  /**\n   * Get the human readable description of the constraint.\n   * @param constraint The constraint object.\n   * @returns A human readable text string that describes the constraint.\n   * example\n   * 'All steps after this one will not be visitable until the student completes \"3.7 Revise Your Bowls Explanation\"'\n   */\n  getConstraintDescription(constraint) {\n    let message = '';\n    let action = constraint.action;\n    let actionMessage = this.getActionMessage(action);\n    for (let singleRemovalCriteria of constraint.removalCriteria) {\n      if (message != '') {\n        // this constraint has multiple removal criteria\n        if (constraint.removalConditional == 'any') {\n          message += ' or ';\n        } else if (constraint.removalConditional == 'all') {\n          message += ' and ';\n        }\n      }\n      message += this.getCriteriaMessage(singleRemovalCriteria);\n    }\n    message = actionMessage + message;\n    return message;\n  }\n\n  /**\n   * Get the constraint action as human readable text.\n   * @param action A constraint action.\n   * @return A human readable text string that describes the action\n   * example\n   * 'All steps after this one will not be visitable until '\n   */\n  getActionMessage(action) {\n    if (action == 'makeAllNodesAfterThisNotVisitable') {\n      return this.$translate('allStepsAfterThisOneWillNotBeVisitableUntil');\n    } else if (action == 'makeAllNodesAfterThisNotVisible') {\n      return this.$translate('allStepsAfterThisOneWillNotBeVisibleUntil');\n    } else if (action == 'makeAllOtherNodesNotVisitable') {\n      return this.$translate('allOtherStepsWillNotBeVisitableUntil');\n    } else if (action == 'makeAllOtherNodesNotVisible') {\n      return this.$translate('allOtherStepsWillNotBeVisibleUntil');\n    } else if (action == 'makeThisNodeNotVisitable') {\n      return this.$translate('thisStepWillNotBeVisitableUntil');\n    } else if (action == 'makeThisNodeNotVisible') {\n      return this.$translate('thisStepWillNotBeVisibleUntil');\n    }\n  }\n\n  /**\n   * Get the message that describes how to satisfy the criteria\n   * TODO: check if the criteria is satisfied\n   * @param criteria the criteria object that needs to be satisfied\n   * @returns the message to display to the student that describes how to\n   * satisfy the criteria\n   */\n  getCriteriaMessage(criteria) {\n    let message = '';\n\n    if (criteria != null) {\n      const name = criteria.name;\n      const params = criteria.params;\n\n      if (name === 'isCompleted') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isVisited') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('visitNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isCorrect') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('correctlyAnswerNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'score') {\n        const nodeId = params.nodeId;\n        let nodeTitle = '';\n        let scoresString = '';\n\n        if (nodeId != null) {\n          nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n        }\n\n        const scores = params.scores;\n        if (scores != null) {\n          // get the required score\n          scoresString = scores.join(', ');\n        }\n\n        // generate the message\n        message += this.$translate('obtainAScoreOfXOnNodeTitle', { score: scoresString, nodeTitle: nodeTitle });\n      } else if (name === 'choiceChosen') {\n        const nodeId = params.nodeId;\n        const componentId = params.componentId;\n        const choiceIds = params.choiceIds;\n        let nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n        let choices = this.getChoiceTextByNodeIdAndComponentId(nodeId, componentId, choiceIds);\n        let choiceText = choices.join(', ');\n        message += this.$translate('chooseChoiceOnNodeTitle', { choiceText: choiceText, nodeTitle: nodeTitle });\n      } else if (name === 'usedXSubmits') {\n        const nodeId = params.nodeId;\n        let nodeTitle = '';\n\n        // get the number of times the student must submit\n        const requiredSubmitCount = params.requiredSubmitCount;\n\n        if (nodeId != null) {\n          // get the step number and title\n          nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n        }\n\n        // generate the message\n        if (requiredSubmitCount == 1) {\n          message += this.$translate('submitXTimeOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n        } else {\n          message += this.$translate('submitXTimesOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n        }\n      } else if (name === 'branchPathTaken') {\n        const fromNodeId = params.fromNodeId;\n        const fromNodeTitle = this.getNodePositionAndTitleByNodeId(fromNodeId);\n        const toNodeId = params.toNodeId;\n        const toNodeTitle = this.getNodePositionAndTitleByNodeId(toNodeId);\n        message += this.$translate('branchPathTakenFromTo', { fromNodeTitle: fromNodeTitle, toNodeTitle: toNodeTitle });\n      } else if (name === 'isPlanningActivityCompleted') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'wroteXNumberOfWords') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const requiredNumberOfWords = params.requiredNumberOfWords;\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('writeXNumberOfWordsOnNodeTitle',\n              { requiredNumberOfWords: requiredNumberOfWords, nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isVisible') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('nodeTitleIsVisible', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isVisitable') {\n        const nodeId = params.nodeId;\n        if (nodeId != null) {\n          const nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('nodeTitleIsVisitable', { nodeTitle: nodeTitle });\n        }\n      }\n    }\n    return message;\n  }\n\n  /**\n   * Get the choices of a Multiple Choice component.\n   * @param nodeId The node id.\n   * @param componentId The component id.\n   * @return The choices from the component.\n   */\n  getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n    let choices = [];\n    let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null && component.choices != null) {\n      choices = component.choices;\n    }\n    return choices;\n  }\n\n  /**\n   * Get the choice text for the given choice ids of a multiple choice component.\n   * @param nodeId The node id of the component.\n   * @param componentId The component id of the component.\n   * @param choiceIds An array of choice ids.\n   * @return An array of choice text strings.\n   */\n  getChoiceTextByNodeIdAndComponentId(nodeId, componentId, choiceIds) {\n    let choices = this.getChoicesByNodeIdAndComponentId(nodeId, componentId);\n    let choicesText = [];\n    for (let choice of choices) {\n      if (choiceIds.indexOf(choice.id) != -1) {\n        choicesText.push(choice.text);\n      }\n    }\n    return choicesText;\n  }\n\n  /**\n   * Get the start id of a group\n   * @param nodeId get the start id of this group\n   * @returns the start id of the group\n   */\n  getGroupStartId(nodeId) {\n    if (nodeId != null) {\n      const node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        return node.startId;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the start id of the node's parent group\n   * @param nodeId we will get the parent of this node and then look\n   * for the start id of the parent\n   * @returns the start id of the parent\n   */\n  getParentGroupStartId(nodeId) {\n    if (nodeId != null) {\n      const parentGroup = this.getParentGroup(nodeId);\n      if (parentGroup != null) {\n        return parentGroup.startId;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Update the transitions so that the fromGroup points to the newToGroup\n   *\n   * Before\n   * fromGroup -> oldToGroup -> newToGroup\n   *\n   * After\n   * fromGroup -> newToGroup\n   * oldToGroup becomes dangling and has no transitions to or from it\n   */\n  updateTransitionsForExtractingGroup(fromGroupId, oldToGroupId, newToGroupId) {\n    /*\n     * make the transitions\n     * fromGroup -> newToGroup\n     */\n    if (fromGroupId != null && oldToGroupId != null) {\n      const fromGroup = this.getNodeById(fromGroupId);\n      const oldToGroup = this.getNodeById(oldToGroupId);\n      let newToGroup = null;\n      let newToGroupStartId = null;\n\n      if (newToGroupId != null) {\n        newToGroup = this.getNodeById(newToGroupId);\n      }\n\n      if (newToGroup != null) {\n        newToGroupStartId = newToGroup.startId;\n      }\n\n      if (fromGroup != null && oldToGroup != null) {\n        const childIds = fromGroup.ids;\n\n        // update the children of the from group to point to the new to group\n        if (childIds != null) {\n          for (let childId of childIds) {\n            const child = this.getNodeById(childId);\n            const transitions = this.getTransitionsByFromNodeId(childId);\n\n            if (transitions != null) {\n              for (let t = 0; t < transitions.length; t++) {\n                const transition = transitions[t];\n                if (transition != null) {\n                  const toNodeId = transition.to;\n                  if (toNodeId === oldToGroupId) {\n                    // the transition is to the group\n                    if (newToGroupId == null && newToGroupStartId == null) {\n                      // there is no new to group so we will remove the transition\n                      transitions.splice(t, 1);\n                      t--;\n                    } else {\n                      // make the transition point to the new to group\n                      transition.to = newToGroupId;\n                    }\n                  } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                    // the transition is to a node in the group\n                    if (newToGroupId == null && newToGroupStartId == null) {\n                      // there is no new to group so we will remove the transition\n                      transitions.splice(t, 1);\n                      t--;\n                    } else if (newToGroupStartId == null || newToGroupStartId == '') {\n                      // make the transition point to the new to group\n                      transition.to = newToGroupId;\n                    } else {\n                      // make the transition point to the new group start id\n                      transition.to = newToGroupStartId;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * remove the transitions from the oldToGroup\n     */\n    if (oldToGroupId != null && newToGroupId != null) {\n      const oldToGroup = this.getNodeById(oldToGroupId);\n      if (oldToGroup != null) {\n        const childIds = oldToGroup.ids;\n\n        // remove the transitions from the old to group that point to the new to group\n        if (childIds != null) {\n          for (let childId of childIds) {\n            const child = this.getNodeById(childId);\n            const transitions = this.getTransitionsByFromNodeId(childId);\n            if (transitions != null) {\n              for (let t = 0; t < transitions.length; t++) {\n                const transition = transitions[t];\n                if (transition != null) {\n                  const toNodeId = transition.to;\n                  if (toNodeId === newToGroupId) {\n                    // the transition is to the group so we will remove it\n                    transitions.splice(t, 1);\n                    t--;\n                  } else if (this.isNodeInGroup(toNodeId, newToGroupId)) {\n                    // the transition is to a node in the group so we will remove it\n                    transitions.splice(t, 1);\n                    t--;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the transitions so that the fromGroup points to the newToGroup\n   *\n   * Before\n   * fromGroup -> oldToGroup\n   * newToGroup is dangling and has no transitions to or from it\n   *\n   * After\n   * fromGroup -> newToGroup -> oldToGroup\n   */\n  updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId) {\n    let fromGroup = null;\n    let newToGroup = null;\n    if (fromGroupId != null) {\n      fromGroup = this.getNodeById(fromGroupId);\n    }\n\n    if (newToGroupId != null) {\n      newToGroup = this.getNodeById(newToGroupId);\n    }\n\n    /*\n     * make the transitions that point to the old group now point\n     * to the new group\n     * fromGroup -> newToGroup\n     */\n    if (fromGroup != null && newToGroup != null) {\n      const childIds = fromGroup.ids;\n      const newToGroupStartId = newToGroup.startId;\n      if (childIds != null) {\n        for (let childId of childIds) {\n          const child = this.getNodeById(childId);\n\n          // get the transitions from the child\n          const transitions = this.getTransitionsByFromNodeId(childId);\n\n          if (transitions == null || transitions.length == 0) {\n            /*\n             * the child does not have any transitions so we will make it\n             * point to the new group\n             */\n            if (newToGroupStartId == null || newToGroupStartId == '') {\n              this.addToTransition(child, newToGroupId);\n            } else {\n              this.addToTransition(child, newToGroupStartId)\n            }\n          } else if (transitions != null) {\n            for (let transition of transitions) {\n              if (transition != null) {\n                const toNodeId = transition.to;\n                if (oldToGroupIds != null) {\n                  for (let oldToGroupId of oldToGroupIds) {\n                    if (toNodeId === oldToGroupId) {\n                      /*\n                       * the transition is to the group so we will update the transition\n                       * to the new group\n                       */\n                      transition.to = newToGroupId;\n                    } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                      /*\n                       * the transition is to a node in the old group so we will update\n                       * the transition to point to the new group\n                       */\n                      if (newToGroupStartId == null || newToGroupStartId == '') {\n                        transition.to = newToGroupId;\n                      } else {\n                        transition.to = newToGroupStartId;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * make the steps that do not have a transition now point to the old\n     * group\n     * newToGroup -> oldToGroup\n     */\n    if (newToGroup != null) {\n      const childIds = newToGroup.ids;\n      if (childIds != null) {\n        for (let childId of childIds) {\n          const child = this.getNodeById(childId);\n          const transitions = this.getTransitionsByFromNodeId(childId);\n\n          if (transitions == null || transitions.length == 0) {\n            if (oldToGroupIds != null) {\n              for (let oldToGroupId of oldToGroupIds) {\n                const oldToGroup = this.getNodeById(oldToGroupId);\n                if (oldToGroup != null) {\n                  const oldToGroupStartId = oldToGroup.startId;\n                  const transition = {};\n                  let toNodeId = '';\n                  if (oldToGroupStartId == null) {\n                    // there is no start node id so we will just point to the group\n                    toNodeId = oldToGroup;\n                  } else {\n                    // there is a start node id so we will point to it\n                    toNodeId = oldToGroupStartId;\n                  }\n\n                  // create the transition from the child to the old group\n                  this.addToTransition(child, toNodeId);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the child transitions because we are moving a group. We will\n   * update the transitions into and out of the group in the location\n   * we are extracting the group from and also in the location we are\n   * inserting the group into.\n   * @param node the group we are moving\n   * @param nodeId we will put the group after this node id\n   */\n  updateChildrenTransitionsForMovingGroup(node, nodeId) {\n    let transitionsBefore = null;\n\n    // get the group nodes that point to the group we are moving\n    const previousGroupNodes = this.getGroupNodesByToNodeId(node.id);\n\n    // get all the transitions from the group we are moving\n    const transitionsAfter = this.getTransitionsByFromNodeId(node.id);\n\n    let extracted = false;\n\n    /*\n     * extract the group we are moving by updating the transitions of the\n     * from group and the new to group. also remove the transitions from the\n     * group we are moving.\n     */\n\n    for (let previousGroupNode of previousGroupNodes) {\n      if (transitionsAfter == null || transitionsAfter.length == 0) {\n        // the group we are moving does not have any transitions\n\n        /*\n         * remove the transitions to the group we are moving and make\n         * new transitions from the from group to the new to group\n         */\n        this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, null);\n        extracted = true;\n      } else {\n        // the group we are moving has transitions\n\n        // make the previous group point to the new to group\n        for (let transitionAfter of transitionsAfter) {\n          if (transitionAfter != null) {\n            const toNodeId = transitionAfter.to;\n\n            /*\n             * remove the transitions to the group we are moving and make\n             * new transitions from the from group to the new to group\n             */\n            this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, toNodeId);\n            extracted = true;\n          }\n        }\n      }\n    }\n\n    if (!extracted) {\n      /*\n       * we have not removed the transitions yet because the group\n       * we are moving does not have any groups before it\n       */\n\n      if (transitionsAfter != null) {\n        // remove the transitions from the group we are moving\n        for (let transitionAfter of transitionsAfter) {\n          if (transitionAfter != null) {\n            const toNodeId = transitionAfter.to;\n\n            // remove the transitions to the group we are moving\n            this.updateTransitionsForExtractingGroup(null, node.id, toNodeId);\n            extracted = true;\n          }\n        }\n      }\n    }\n\n    let inserted = false;\n\n    /*\n     * create the transitions from the from group to the group we are moving\n     * and the transitions from the group we are moving to the old to group\n     */\n    if (nodeId != null) {\n      // get the transitions from the previous group to the next group\n      const transitionsAfter = this.getTransitionsByFromNodeId(nodeId);\n\n      for (let transitionAfter of transitionsAfter) {\n        if (transitionAfter != null) {\n          const toNodeId = transitionAfter.to;\n\n          /*\n           * create the transitions that traverse from the from group\n           * to the group we are moving. also create the transitions\n           * that traverse from the group we are moving to the old\n           * to group.\n           */\n          this.updateTransitionsForInsertingGroup(nodeId, [toNodeId], node.id);\n          inserted = true;\n        }\n      }\n    }\n\n    if (!inserted) {\n      /*\n       * we have not inserted the transitions yet because there were no\n       * previous group transitions\n       */\n\n      if (nodeId == null) {\n        /*\n         * the previous node id is null which means there was no previous\n         * group. this means the group we are inserting will become the\n         * first group. this happens when the group we are moving\n         * is moved inside the root (group0).\n         */\n\n        const startGroupId = this.getStartGroupId();\n\n        if (startGroupId != null) {\n          // get the start group for the whole project (group0)\n          const startGroup = this.getNodeById(startGroupId);\n\n          if (startGroup != null) {\n            // get the first activity\n            const firstGroupId = startGroup.startId;\n\n            /*\n             * create the transitions that traverse from the group\n             * we are moving to the previous first activity.\n             */\n            this.updateTransitionsForInsertingGroup(nodeId, [firstGroupId], node.id);\n          }\n        }\n      } else {\n        /*\n         * we have not inserted the group yet because the from group doesn't\n         * have a group after it\n         */\n\n        /*\n         * create the transitions that traverse from the from group\n         * to the group we are moving.\n         */\n        this.updateTransitionsForInsertingGroup(nodeId, null, node.id);\n      }\n    }\n  }\n\n  /**\n   * Get the active nodes.\n   * @return An array of the active node objects.\n   */\n  getActiveNodes() {\n    return this.project.nodes;\n  }\n\n  /**\n   * Get the inactive nodes\n   * @returns the inactive nodes\n   */\n  getInactiveNodes() {\n    let inactiveNodes = [];\n    if (this.project != null) {\n      if (this.project.inactiveNodes == null) {\n        this.project.inactiveNodes = [];\n      }\n      inactiveNodes = this.project.inactiveNodes;\n    }\n    return inactiveNodes;\n  }\n\n  /**\n   * Remove the node from the inactive nodes array\n   * @param nodeId the node to remove\n   * @returns the node that was removed\n   */\n  removeNodeFromInactiveNodes(nodeId) {\n    let node = null;\n    if (nodeId != null) {\n      let parentGroup = this.getParentGroup(nodeId);\n      if (parentGroup != null) {\n        // The node has a parent so we will remove it from the parent.\n        this.removeChildFromParent(nodeId);\n      }\n\n      let inactiveNodes = this.project.inactiveNodes;\n      if (inactiveNodes != null) {\n        for (let i = 0; i < inactiveNodes.length; i++) {\n          let inactiveNode = inactiveNodes[i];\n          if (inactiveNode != null) {\n            if (nodeId === inactiveNode.id) {\n              node = inactiveNode;\n\n              // remove the node from the array\n              inactiveNodes.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n      this.removeNodeFromInactiveStepNodes(nodeId);\n      this.removeNodeFromInactiveGroupNodes(nodeId);\n    }\n    return node;\n  }\n\n  /**\n   * Remove the child node from the parent group.\n   * @param nodeId The child node to remove from the parent.\n   */\n  removeChildFromParent(nodeId) {\n    let parentGroup = this.getParentGroup(nodeId);\n    if (parentGroup != null) {\n      // Remove the child from the parent\n      for (let i = 0; i < parentGroup.ids.length; i++) {\n        let childId = parentGroup.ids[i];\n        if (nodeId == childId) {\n          parentGroup.ids.splice(i, 1);\n          break;\n        }\n      }\n      if (nodeId == parentGroup.startId) {\n        /*\n         * The child we removed was the start id of the group so we\n         * will update the start id.\n         */\n        let startIdUpdated = false;\n        let transitions = this.getTransitionsByFromNodeId(nodeId);\n        if (transitions != null &&\n          transitions.length > 0 &&\n          transitions[0] != null &&\n          transitions[0].to != null) {\n          parentGroup.startId = transitions[0].to;\n          startIdUpdated = true;\n        }\n        if (!startIdUpdated && parentGroup.ids.length > 0) {\n          parentGroup.startId = parentGroup.ids[0];\n          startIdUpdated = true;\n        }\n        if (!startIdUpdated) {\n          parentGroup.startId = '';\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive step nodes array.\n   * @param nodeId The node id of the node we want to remove from the\n   * inactive step nodes array.\n   */\n  removeNodeFromInactiveStepNodes(nodeId) {\n    for (let i = 0; i < this.inactiveStepNodes.length; i++) {\n      let inactiveStepNode = this.inactiveStepNodes[i];\n      if (nodeId == inactiveStepNode.id) {\n        this.inactiveStepNodes.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive group nodes array.\n   * @param nodeId The node id of the group we want to remove from the\n   * inactive group nodes array.\n   */\n  removeNodeFromInactiveGroupNodes(nodeId) {\n    for (let i = 0; i < this.inactiveGroupNodes.length; i++) {\n      let inactiveGroupNode = this.inactiveGroupNodes[i];\n      if (nodeId == inactiveGroupNode.id) {\n        this.inactiveGroupNodes.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Load the inactive nodes\n   * @param nodes the inactive nodes\n   */\n  loadInactiveNodes(nodes) {\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null) {\n          const nodeId = node.id;\n\n          this.setIdToNode(nodeId, node);\n          this.setIdToElement(nodeId, node);\n          if (node.type == 'group') {\n            this.inactiveGroupNodes.push(node);\n          } else {\n            this.inactiveStepNodes.push(node);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the node is active\n   * @param nodeId the node to check\n   * @param componentId (optional) the component to check\n   * @returns whether the node or component is active\n   */\n  isActive(nodeId, componentId) {\n    if (nodeId != null) {\n      if (nodeId === 'inactiveNodes') {\n        // this occurs when the author puts a step into the inactive nodes\n        return false;\n      } else if (nodeId === 'inactiveGroups') {\n        // this occurs when the author puts a group into the inactive groups\n        return false;\n      } else if (this.isGroupNode(nodeId)) {\n        return this.isGroupActive(nodeId);\n      } else {\n        // the node is a step node\n\n        const activeNodes = this.project.nodes;\n        if (activeNodes != null) {\n          for (let activeNode of activeNodes) {\n            if (activeNode != null) {\n              const activeNodeId = activeNode.id;\n              if (nodeId == activeNodeId) {\n                // we have found the node id we are looking for\n\n                if (componentId != null) {\n                  // we need to find the node id and component id\n\n                  const activeComponents = activeNode.components;\n\n                  if (activeComponents != null) {\n                    for (let activeComponent of activeComponents) {\n                      if (activeComponent != null) {\n                        const activeComponentId = activeComponent.id;\n                        if (componentId == activeComponentId) {\n                          /*\n                           * we have found the component id we are\n                           * looking for so we are done\n                           */\n                          return true;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  //we only need to find the node id so we are done\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a group is active.\n   * @param nodeId the node id of the group\n   */\n  isGroupActive(nodeId) {\n    for (let activeNode of this.project.nodes) {\n      if (nodeId == activeNode.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Move the node to the active nodes array\n   */\n  moveToActive(node) {\n    if (node != null) {\n      if (!this.isActive(node.id)) {\n        // the node is inactive so we will move it to the active array\n\n        // remove the node from inactive nodes array\n        this.removeNodeFromInactiveNodes(node.id);\n\n        this.addNode(node);\n\n        if (this.isGroupNode(node.id)) {\n          /*\n           * This is a group node so we will also move all of its\n           * children to active.\n           */\n          let childIds = node.ids;\n          for (let childId of childIds) {\n            let childNode = this.removeNodeFromInactiveNodes(childId);\n            this.addNode(childNode);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a group's child nodes to the inactive nodes.\n   * @param node The group node.\n   */\n  addGroupChildNodesToInactive(node) {\n    if (node != null) {\n      let childIds = node.ids;\n      for (let childId of childIds) {\n        let childNode = this.getNodeById(childId);\n        this.project.inactiveNodes.push(childNode);\n        this.inactiveStepNodes.push(childNode);\n      }\n    }\n  }\n\n  /**\n   * Move an inactive node within the inactive nodes array\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  moveInactiveNode(node, nodeIdToInsertAfter) {\n    if (node != null) {\n      const inactiveNodes = this.project.inactiveNodes;\n      if (inactiveNodes != null) {\n        // remove the node from inactive nodes\n\n        for (let i = 0; i < inactiveNodes.length; i++) {\n          const inactiveNode = inactiveNodes[i];\n          if (inactiveNode != null) {\n            if (node.id === inactiveNode.id) {\n              // we have found the node we want to remove\n              inactiveNodes.splice(i, 1);\n            }\n          }\n        }\n\n        // add the node back into the inactive nodes\n\n        if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveNodes') {\n          // put the node at the beginning of the inactive nodes\n          inactiveNodes.splice(0, 0, node);\n        } else {\n          // put the node after one of the inactive nodes\n\n          let added = false;\n          for (let i = 0; i < inactiveNodes.length; i++) {\n            const inactiveNode = inactiveNodes[i];\n            if (inactiveNode != null) {\n              if (nodeIdToInsertAfter === inactiveNode.id) {\n                // we have found the position to place the node\n                let parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n                if (parentGroup != null) {\n                  this.insertNodeAfterInGroups(node.id, nodeIdToInsertAfter);\n                  this.insertNodeAfterInTransitions(node, nodeIdToInsertAfter);\n                }\n                inactiveNodes.splice(i + 1, 0, node);\n                added = true;\n              }\n            }\n          }\n\n          if (!added) {\n            /*\n             * we haven't added the node yet so we will just add it\n             * to the end of the array\n             */\n            inactiveNodes.push(node);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove transitions that go out of the group\n   * @param nodeId the group id\n   */\n  removeTransitionsOutOfGroup(nodeId) {\n    if (nodeId != null) {\n      const group = this.getNodeById(nodeId);\n      if (group != null) {\n        const childIds = group.ids;\n        if (childIds != null) {\n          for (let childId of childIds) {\n            if (childId != null) {\n              const transitions = this.getTransitionsByFromNodeId(childId);\n              if (transitions != null) {\n                for (let t = 0; t < transitions.length; t++) {\n                  const transition = transitions[t];\n                  if (transition != null) {\n                    const toNodeId = transition.to;\n                    if (toNodeId != null) {\n                      const toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n                      if (nodeId != toNodeIdParentGroupId) {\n                        /*\n                         * the parent group is different which means it is a\n                         * transition that goes out of the group\n                         */\n\n                        // remove the transition\n                        transitions.splice(t, 1);\n                        t--;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   * Update the step transitions that point into the group we are moving\n   * For example\n   * group1 has children node1 and node2 (node2 transitions to node3)\n   * group2 has children node3 and node4 (node4 transitions to node5)\n   * group3 has children node5 and node6\n   * if we move group2 after group3 we will need to change the\n   * transition from node2 to node3 and make node2 transition to node5\n   * the result will be\n   * group1 has children node1 and node2 (node2 transitions to node5)\n   * group3 has children node5 and node6\n   * group2 has children node3 and node4 (node4 transitions to node5)\n   * note: the (node4 transition to node5) will be removed later\n   * when is called removeTransitionsOutOfGroup\n   * note: when group2 is added in a later function call, we will add\n   * the node6 to node3 transition\n   * @param groupThatTransitionsToGroupWeAreMoving the group object\n   * that transitions to the group we are moving. we may need to update\n   * the transitions of this group's children.\n   * @param groupIdWeAreMoving the group id of the group we are moving\n   */\n  updateChildrenTransitionsIntoGroupWeAreMoving(\n      groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving) {\n    if (groupThatTransitionsToGroupWeAreMoving != null &&\n        groupIdWeAreMoving != null) {\n      const group = this.getNodeById(groupIdWeAreMoving);\n      if (group != null) {\n        // get all the nodes that have a transition to the node we are removing\n        const nodesByToNodeId = this.getNodesByToNodeId(groupIdWeAreMoving);\n\n        // get the transitions of the node we are removing\n        const nodeToRemoveTransitionLogic = group.transitionLogic;\n        let nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n          nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        if (nodeToRemoveTransitions.length == 0) {\n          /*\n           * The group we are moving is the last group in the project\n           * and does not have any transitions. We will loop through\n           * all the nodes that transition into this group and remove\n           * those transitions.\n           */\n\n          // get child ids of the group that comes before the group we are moving\n          const childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n          if (childIds != null) {\n            for (let childId of childIds) {\n              const transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n              if (transitionsFromChild != null) {\n                for (let tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                  const transitionFromChild = transitionsFromChild[tfc];\n                  if (transitionFromChild != null) {\n                    const toNodeId = transitionFromChild.to;\n\n                    // get the parent group id of the toNodeId\n                    const toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                    if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                      // the transition is to a child in the group we are moving\n\n                      // remove the transition\n                      transitionsFromChild.splice(tfc, 1);\n\n                      /*\n                       * move the counter back one because we have just removed an\n                       * element from the array\n                       */\n                      tfc--;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else if (nodeToRemoveTransitions.length > 0) {\n          // get the first group that comes after the group we are removing\n          const firstNodeToRemoveTransition = nodeToRemoveTransitions[0];\n          const firstNodeToRemoveTransitionToNodeId = firstNodeToRemoveTransition.to;\n\n          if (this.isGroupNode(firstNodeToRemoveTransitionToNodeId)) {\n            // get the group that comes after the group we are moving\n            const groupNode = this.getNodeById(firstNodeToRemoveTransitionToNodeId);\n\n            // get child ids of the group that comes before the group we are moving\n            const childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n            if (childIds != null) {\n              for (let childId of childIds) {\n                const transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n                if (transitionsFromChild != null) {\n                  for (let transitionFromChild of transitionsFromChild) {\n                    if (transitionFromChild != null) {\n                      const toNodeId = transitionFromChild.to;\n\n                      // get the parent group id of the toNodeId\n                      const toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                      if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                        // the transition is to a child in the group we are moving\n\n                        if (groupNode.startId == null) {\n                          // change the transition to point to the after group\n                          transitionFromChild.to = firstNodeToRemoveTransitionToNodeId;\n                        } else {\n                          // change the transition to point to the start id of the after group\n                          transitionFromChild.to = groupNode.startId;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a node generates work by looking at all of its components\n   * @param nodeId the node id\n   * @return whether the node generates work\n   */\n  nodeHasWork(nodeId) {\n    if (nodeId != null) {\n      const nodeContent = this.getNodeContentByNodeId(nodeId);\n      if (nodeContent != null) {\n        const components = nodeContent.components;\n        if (components != null) {\n          for (let component of components) {\n            if (component != null) {\n              const componentHasWork = this.componentHasWork(component);\n              if (componentHasWork) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a component generates work\n   * @param component check if this component generates work\n   * @return whether the component generates work\n   */\n  componentHasWork(component) {\n    if (component != null) {\n      const componentType = component.type;\n      const componentService = this.getComponentService(componentType);\n      if (componentService != null) {\n        return componentService.componentHasWork(component);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get a component service\n   * @param componentType the component type\n   * @return the component service\n   */\n  getComponentService(componentType) {\n    let componentService = null;\n    if (componentType != null) {\n      const componentServiceName = componentType + 'Service';\n\n      /*\n       * check if we have previously retrieved the component service.\n       * if have previously retrieved the component service it will\n       * be in the componentServices map\n       */\n      componentService = this.componentServices[componentServiceName];\n\n      if (componentService == null) {\n        /*\n         * we have not previously retrieved the component service so\n         * we will get it now\n         */\n        componentService = this.$injector.get(componentServiceName);\n\n        /*\n         * save the component service to the map so we can easily\n         * retrieve it later\n         */\n        this.componentServices[componentServiceName] = componentService;\n      }\n    }\n    return componentService;\n  }\n\n  /**\n   * Get an unused component id\n   * @param componentIdsToSkip (optional) An array of additional component ids\n   * to skip. This is used when we are creating multiple new components. There\n   * is avery small chance that we create duplicate component ids that aren't\n   * already in the project. We avoid this problem by using this parameter.\n   * Example\n   * We want to create two new components. We first generate a new component\n   * id for the first new component for example \"1234567890\". Then we generate\n   * a new component id for the second new component and pass in\n   * [\"1234567890\"] as componentIdsToSkip because the new \"1234567890\"\n   * component hasn't actually been added to the project yet.\n   * @return a component id that isn't already being used in the project\n   */\n  getUnusedComponentId(componentIdsToSkip) {\n    // we want to make an id with 10 characters\n    const idLength = 10;\n\n    let newComponentId = this.UtilService.generateKey(idLength);\n\n    // check if the component id is already used in the project\n    if (this.isComponentIdUsed(newComponentId)) {\n      /*\n       * the component id is already used in the project so we need to\n       * try generating another one\n       */\n      let alreadyUsed = true;\n\n      /*\n       * keep trying to generate a new component id until we have found\n       * one that isn't already being used\n       */\n      while(!alreadyUsed) {\n        // generate a new id\n        newComponentId = this.UtilService.generateKey(idLength);\n\n        // check if the id is already being used in the project\n        alreadyUsed = this.isComponentIdUsed(newComponentId);\n\n        if (componentIdsToSkip != null && componentIdsToSkip.indexOf(newComponentId) != -1) {\n          /*\n           * the new component is in the componentIdsToSkip so it has\n           * already been used\n           */\n          alreadyUsed = true;\n        }\n      }\n    }\n    return newComponentId;\n  }\n\n  /**\n   * Check if the component id is already being used in the project\n   * @param componentId check if this component id is already being used in\n   * the project\n   * @return whether the component id is already being used in the project\n   */\n  isComponentIdUsed(componentId) {\n    for (let node of this.project.nodes) {\n      if (node != null) {\n        const components = node.components;\n        if (components != null) {\n          for (let component of components) {\n            if (component != null) {\n              if (componentId === component.id) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    for (let node of this.project.inactiveNodes) {\n      if (node != null) {\n        const components = node.components;\n        if (components != null) {\n          for (let component of components) {\n            if (component != null) {\n              if (componentId === component.id) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the next available constraint id for a node\n   * @param nodeId get the next available constraint id for this node\n   * e.g. node8Constraint2\n   * @return the next available constraint id for the node\n   */\n  getNextAvailableConstraintIdForNodeId(nodeId) {\n    let nextAvailableConstraintId = null;\n    if (nodeId != null) {\n      // an array to hold the constraint ids that are already being used\n      const usedConstraintIds = [];\n      const node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        const constraints = node.constraints;\n        if (constraints != null) {\n          for (let constraint of constraints) {\n            if (constraint != null) {\n              const constraintId = constraint.id;\n\n              // add the constraint id to the array of used constraint ids\n              usedConstraintIds.push(constraintId);\n            }\n          }\n        }\n      }\n\n      let foundNextAvailableConstraintId = false;\n      let counter = 1;\n\n      while (!foundNextAvailableConstraintId) {\n        const potentialConstraintId = nodeId + 'Constraint' + counter;\n        // check if the constraint id has been used\n        if (usedConstraintIds.indexOf(potentialConstraintId) == -1) {\n          nextAvailableConstraintId = potentialConstraintId;\n          foundNextAvailableConstraintId = true;\n        } else {\n          counter++;\n        }\n      }\n    }\n    return nextAvailableConstraintId;\n  }\n\n  /**\n   * Get the node ids in the branch by looking for nodes that have branch\n   * path taken constraints with the given fromNodeId and toNodeId\n   * @param fromNodeId the from node id\n   * @param toNodeId the to node id\n   * @return an array of nodes that are in the branch path\n   */\n  getNodeIdsInBranch(fromNodeId, toNodeId) {\n    const nodeIdsInBranch = [];\n    const nodes = this.getNodes();\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null) {\n          if (this.hasBranchPathTakenConstraint(node, fromNodeId, toNodeId)) {\n            /*\n             * this node has the the branch path taken constraint we are\n             * looking for\n             */\n            nodeIdsInBranch.push(node.id);\n          }\n        }\n      }\n    }\n    this.orderNodeIds(nodeIdsInBranch);\n    return nodeIdsInBranch;\n  }\n\n  /**\n   * Order the node ids so that they show up in the same order as in the\n   * project.\n   * @param constraints An array of node ids.\n   * @return An array of ordered node ids.\n   */\n  orderNodeIds(nodeIds) {\n    let orderedNodeIds = this.getFlattenedProjectAsNodeIds();\n    return nodeIds.sort(this.nodeIdsComparatorGenerator(orderedNodeIds));\n  }\n\n  /**\n   * Create the node ids comparator function that is used for sorting an\n   * array of node ids.\n   * @param orderedNodeIds An array of node ids in the order in which they\n   * show up in the project.\n   * @return A comparator that orders node ids in the order in which they show\n   * up in the project.\n   */\n  nodeIdsComparatorGenerator(orderedNodeIds) {\n    return function(nodeIdA, nodeIdB) {\n      let nodeIdAIndex = orderedNodeIds.indexOf(nodeIdA);\n      let nodeIdBIndex = orderedNodeIds.indexOf(nodeIdB);\n      if (nodeIdAIndex < nodeIdBIndex) {\n        return -1;\n      } else if (nodeIdAIndex > nodeIdBIndex) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a node has a branch path taken constraint\n   * @param node the node to check\n   * @param fromNodeId the from node id of the branch path taken\n   * @param toNodeId the to node id of the branch path taken\n   * @return whether the node has a branch path taken constraint with the\n   * given from node id and to node id\n   */\n  hasBranchPathTakenConstraint(node, fromNodeId, toNodeId) {\n    if (node != null) {\n      const constraints = node.constraints;\n      if (constraints != null) {\n        for (let constraint of constraints) {\n          if (constraint != null) {\n            const removalCriteria = constraint.removalCriteria;\n            if (removalCriteria != null) {\n              for (let removalCriterion of removalCriteria) {\n                if (removalCriterion != null) {\n                  const name = removalCriterion.name;\n                  if (name == 'branchPathTaken') {\n                    const params = removalCriterion.params;\n                    if (params != null) {\n                      if (fromNodeId == params.fromNodeId && toNodeId == params.toNodeId) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Remove the branch path taken constraints from a node\n   * @param nodeId remove the constraints from this node\n   */\n  removeBranchPathTakenNodeConstraints(nodeId) {\n    const node = this.getNodeById(nodeId);\n    if (node != null) {\n      const constraints = node.constraints;\n      if (constraints != null) {\n        for (let c = 0; c < constraints.length; c++) {\n          const constraint = constraints[c];\n          if (constraint != null) {\n            const removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n              for (let removalCriterion of removalCriteria) {\n                if (removalCriterion != null) {\n                  if (removalCriterion.name == 'branchPathTaken') {\n                    const params = removalCriterion.params;\n                    constraints.splice(c, 1);\n                    // move the counter back one because we just removed a constraint\n                    c--;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the branch path taken constraints from a node\n   * @param nodeId get the branch path taken constraints from this node\n   * @return an array of branch path taken constraints from the node\n   */\n  getBranchPathTakenConstraintsByNodeId(nodeId) {\n    const branchPathTakenConstraints = [];\n    if (nodeId != null) {\n      const node = this.getNodeById(nodeId);\n      if (node != null) {\n        const constraints = node.constraints;\n        if (constraints != null) {\n          for (let constraint of constraints) {\n            if (constraint != null) {\n              const removalCriteria = constraint.removalCriteria;\n              if (removalCriteria != null) {\n                for (let removalCriterion of removalCriteria) {\n                  if (removalCriterion != null) {\n                    if (removalCriterion.name == 'branchPathTaken') {\n                      /*\n                       * we have found a branch path taken constraint so\n                       * we will add the constraint to the array\n                       */\n                      branchPathTakenConstraints.push(constraint);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return branchPathTakenConstraints;\n  }\n\n  /**\n   * Update the branch path taken constraint\n   * @param node update the branch path taken constraints in this node\n   * @param currentFromNodeId the current from node id\n   * @param currentToNodeId the current to node id\n   * @param newFromNodeId the new from node id\n   * @param newToNodeId the new to node id\n   */\n  updateBranchPathTakenConstraint(node, currentFromNodeId, currentToNodeId,\n      newFromNodeId, newToNodeId) {\n    if (node != null) {\n      const constraints = node.constraints;\n      if (constraints != null) {\n        for (let constraint of constraints) {\n          if (constraint != null) {\n            const removalCriteria = constraint.removalCriteria;\n            if (removalCriteria != null) {\n              for (let removalCriterion of removalCriteria) {\n                if (removalCriterion != null) {\n                  if (removalCriterion.name === 'branchPathTaken') {\n                    const params = removalCriterion.params;\n                    if (params != null) {\n                      if (params.fromNodeId === currentFromNodeId &&\n                        params.toNodeId === currentToNodeId) {\n                        /*\n                         * we have found a branchPathTaken removal criterion\n                         * with the fromNodeId and toNodeId that we are\n                         * looking for so we will now update the values\n                         */\n                        params.fromNodeId = newFromNodeId;\n                        params.toNodeId = newToNodeId;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the project level rubric\n   * @return the project level rubric\n   */\n  getProjectRubric() {\n    return this.project.rubric;\n  }\n\n  /**\n   * Check if a node is a branch point\n   * @param nodeId the node id\n   * @return whether the node is a branch point\n   */\n  isBranchPoint(nodeId) {\n    const transitions = this.getTransitionsByFromNodeId(nodeId);\n    if (transitions != null) {\n      if (transitions.length > 1) {\n        /*\n         * the node contains more than one transition which means it is\n         * a branch point\n         */\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  /**\n   * Check if a node is the first node in a branch path\n   * @param nodeId the node id\n   * @return whether the node is the first node in a branch path\n   */\n  isFirstNodeInBranchPath(nodeId) {\n    const nodes = this.getNodes();\n    if (nodes != null) {\n      for (let node of nodes) {\n        if (node != null &&\n            node.transitionLogic != null &&\n            node.transitionLogic.transitions != null) {\n          const transitions = node.transitionLogic.transitions;\n\n          if (transitions.length > 1) {\n            /*\n             * there is more than one transition from this node\n             * which means it is a branch point\n             */\n            for (let transition of transitions) {\n              if (transition != null) {\n                const transitionTo = transition.to;\n                if (transitionTo === nodeId) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the node is in any branch path\n   * @param nodeId the node id of the node\n   * @return whether the node is in any branch path\n   */\n  isNodeInAnyBranchPath(nodeId) {\n    let result = false;\n    if (this.nodeIdToIsInBranchPath[nodeId] == null) {\n      /*\n       * we have not calculated whether the node id is in a branch path\n       * before so we will now\n       */\n\n      const branches = this.getBranches();\n      result = this.isNodeIdInABranch(branches, nodeId);\n\n      // remember the result for this node id\n      this.nodeIdToIsInBranchPath[nodeId] = result;\n    } else {\n      /*\n       * we have calculated whether the node id is in a branch path\n       * before\n       */\n      result = this.nodeIdToIsInBranchPath[nodeId];\n    }\n    return result;\n  }\n\n  /**\n   * Check if a node is a branch start point\n   * @param nodeId look for a branch with this start node id\n   * @return whether the node is a branch start point\n   */\n  isBranchStartPoint(nodeId) {\n    /*\n     * Get all the branches. Each branch is represented as an object that\n     * contains the branchStartPoint, branchEndPoint, and branchPaths.\n     */\n    const branches = this.getBranches();\n\n    if (branches != null) {\n      for (let branch of branches) {\n        if (branch != null) {\n          if (branch.branchStartPoint == nodeId) {\n            /*\n             * we have found a branch with the given nodeId as the\n             * start point\n             */\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a node is a branch end point\n   * @param nodeId look for a branch with this end node id\n   * @return whether the node is a branch end point\n   */\n  isBranchMergePoint(nodeId) {\n    /*\n     * Get all the branches. Each branch is represented as an object that\n     * contains the branchStartPoint, branchEndPoint, and branchPaths.\n     */\n    const branches = this.getBranches();\n\n    if (branches != null) {\n      for (let branch of branches) {\n        if (branch != null) {\n          if (branch.branchEndPoint == nodeId) {\n            /*\n             * we have found a branch with the given nodeId as the\n             * end point\n             */\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get all the branches whose branch start point is the given node id\n   * @param nodeId the branch start point\n   * @return an array of branches that have the given branch start point\n   */\n  getBranchesByBranchStartPointNodeId(nodeId) {\n    const branches = [];\n    const allBranches = this.getBranches();\n\n    if (allBranches != null) {\n      for (let branch of allBranches) {\n        if (branch != null) {\n          if (nodeId == branch.branchStartPoint) {\n            /*\n             * the branch start point matches the node id we are\n             * looking for\n             */\n            branches.push(branch);\n          }\n        }\n      }\n    }\n    return branches;\n  }\n\n  /**\n   * Calculate the node numbers and set them into the nodeIdToNumber map\n   */\n  calculateNodeNumbers() {\n    this.nodeIdToNumber = {};\n    this.nodeIdToBranchPathLetter = {};\n    const startNodeId = this.getStartNodeId();\n\n    const currentActivityNumber = 0;\n    const currentStepNumber = 0;\n\n    // recursively calculate the node numbers by traversing the project tree\n    this.calculateNodeNumbersHelper(\n        startNodeId, currentActivityNumber, currentStepNumber);\n  }\n\n  /**\n   * Recursively calcualte the node numbers by traversing the project tree\n   * using transitions\n   * @param nodeId the current node id we are on\n   * @param currentActivityNumber the current activity number\n   * @param currentStepNumber the current step number\n   * @param branchLetterCode (optional) the character code for the branch\n   * letter e.g. 1=A, 2=B, etc.\n   */\n  calculateNodeNumbersHelper(nodeId, currentActivityNumber, currentStepNumber, branchLetterCode) {\n    if (nodeId != null) {\n      if (this.isApplicationNode(nodeId)) {\n        const node = this.getNodeById(nodeId);\n        if (node != null) {\n          const parentGroup = this.getParentGroup(nodeId);\n          if (parentGroup != null) {\n            if (this.nodeIdToNumber[parentGroup.id] == null) {\n              /*\n               * the parent group has not been assigned a number so\n               * we will assign a number now\n               */\n\n              currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n              /*\n               * set the current step number to 1 now that we have\n               * entered a new group\n               */\n              currentStepNumber = 1;\n\n              this.nodeIdToNumber[parentGroup.id] = \"\" + currentActivityNumber;\n            } else {\n              /*\n               * the parent group has previously been assigned a number so we\n               * will use it\n               */\n              currentActivityNumber = this.nodeIdToNumber[parentGroup.id];\n            }\n          }\n\n          if (this.isBranchMergePoint(nodeId)) {\n            /*\n             * the node is a merge point so we will not use a letter\n             * anymore now that we are no longer in a branch path\n             */\n            branchLetterCode = null;\n          }\n\n          if (this.isBranchStartPoint(nodeId)) {\n            const branchesByBranchStartPointNodeId =\n                this.getBranchesByBranchStartPointNodeId(nodeId);\n            const branchesObject = branchesByBranchStartPointNodeId[0];\n\n            /*\n             * been used in the branch paths so that we know what\n             * step number to give the merge end point\n             * this is used to obtain the max step number that has\n             */\n            let maxCurrentStepNumber = 0;\n\n            // set the step number for the branch start point\n            this.nodeIdToNumber[nodeId] = currentActivityNumber + '.' + currentStepNumber;\n\n            currentStepNumber++;\n            const branchPaths = branchesObject.branchPaths;\n\n            for (let bp = 0; bp < branchPaths.length; bp++) {\n              const branchPath = branchPaths[bp];\n              let branchCurrentStepNumber = currentStepNumber;\n\n              // get the letter code e.g. 1=A, 2=B, etc.\n              const branchLetterCode = bp;\n\n              for (let bpn = 0; bpn < branchPath.length; bpn++) {\n                if (bpn == 0) {\n                  /*\n                   * Recursively call calculateNodeNumbersHelper on the\n                   * first step in this branch path. This will recursively\n                   * calculate the numbers for all the nodes in this\n                   * branch path.\n                   */\n                  const branchPathNodeId = branchPath[bpn];\n                  this.calculateNodeNumbersHelper(branchPathNodeId, currentActivityNumber, branchCurrentStepNumber, branchLetterCode);\n                }\n\n                branchCurrentStepNumber++;\n\n                /*\n                 * update the max current step number if we have found\n                 * a larger number\n                 */\n                if (branchCurrentStepNumber > maxCurrentStepNumber) {\n                  maxCurrentStepNumber = branchCurrentStepNumber;\n                }\n              }\n            }\n\n            // get the step number we should use for the end point\n            currentStepNumber = maxCurrentStepNumber;\n\n            const branchEndPointNodeId = branchesObject.branchEndPoint;\n\n            /*\n             * calculate the node number for the branch end point and\n             * continue calculating node numbers for the nodes that\n             * come after it\n             */\n            this.calculateNodeNumbersHelper(branchEndPointNodeId, currentActivityNumber, currentStepNumber);\n          } else {\n            // the node is not a branch start point\n\n            /*\n             * check if we have already set the number for this node so\n             * that we don't need to unnecessarily re-calculate the\n             * node number\n             */\n            if (this.nodeIdToNumber[nodeId] == null) {\n              // we have not calculated the node number yet\n\n              let number = null;\n\n              if (branchLetterCode == null) {\n                // we do not need to add a branch letter\n\n                // get the node number e.g. 1.5\n                number = currentActivityNumber + '.' + currentStepNumber;\n              } else {\n                // we need to add a branch letter\n\n                // get the branch letter\n                const branchLetter = String.fromCharCode(65 + branchLetterCode);\n\n                // get the node number e.g. 1.5 A\n                number = currentActivityNumber + '.' + currentStepNumber + ' ' + branchLetter;\n\n                // remember the branch path letter for this node\n                this.nodeIdToBranchPathLetter[nodeId] = branchLetter;\n              }\n\n              // set the number for the node\n              this.nodeIdToNumber[nodeId] = number;\n            } else {\n              /*\n               * We have calculated the node number before so we\n               * will return. This will prevent infinite looping\n               * within the project.\n               */\n              return;\n            }\n\n            // increment the step number for the next node to use\n            currentStepNumber++;\n\n            let transitions = [];\n\n            if (node.transitionLogic != null && node.transitionLogic.transitions) {\n              transitions = node.transitionLogic.transitions;\n            }\n\n            if (transitions.length > 0) {\n              /*\n               * loop through all the transitions, there should only\n               * be one but we will loop through them just to be complete.\n               * if there was more than one transition, it would mean\n               * this node is a branch start point in which case we\n               * would have gone inside the other block of code where\n               * this.isBranchStartPoint() is true.\n               */\n              for (let transition of transitions) {\n                if (transition != null) {\n                  if (this.isBranchMergePoint(transition.to)) {\n\n                  } else {\n                    this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                  }\n                }\n              }\n            } else {\n              // if there are no transitions, check if the parent group has a transition\n\n              if (parentGroup != null &&\n                  parentGroup.transitionLogic != null &&\n                  parentGroup.transitionLogic.transitions != null &&\n                  parentGroup.transitionLogic.transitions.length > 0) {\n                for (let transition of parentGroup.transitionLogic.transitions) {\n                  if (transition != null) {\n                    this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        // the node is a group node\n\n        const node = this.getNodeById(nodeId);\n        if (node != null) {\n          // check if the group has previously been assigned a number\n          if (this.nodeIdToNumber[nodeId] == null) {\n            /*\n             * the group has not been assigned a number so\n             * we will assign a number now\n             */\n            if (nodeId == 'group0') {\n              // group 0 will always be given the activity number of 0\n              this.nodeIdToNumber[nodeId] = \"\" + 0;\n            } else {\n              // set the activity number\n              currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n              /*\n               * set the current step number to 1 now that we have\n               * entered a new group\n               */\n              currentStepNumber = 1;\n\n              // set the activity number\n              this.nodeIdToNumber[nodeId] = \"\" + currentActivityNumber;\n            }\n          } else {\n            /*\n             * We have calculated the node number before so we\n             * will return. This will prevent infinite looping\n             * within the project.\n             */\n            return;\n          }\n\n          if (node.startId != null && node.startId != '') {\n            /*\n             * calculate the node number for the first step in this\n             * activity and any steps after it\n             */\n            this.calculateNodeNumbersHelper(node.startId, currentActivityNumber, currentStepNumber, branchLetterCode);\n          } else {\n            /*\n             * this activity doesn't have a start step so we will\n             * look for a transition\n             */\n\n            if (node != null &&\n                node.transitionLogic != null &&\n                node.transitionLogic.transitions != null &&\n                node.transitionLogic.transitions.length > 0) {\n              for (let transition of node.transitionLogic.transitions) {\n                if (transition != null) {\n                  /*\n                   * calculate the node number for the next group\n                   * and all its children steps\n                   */\n                  this.calculateNodeNumbersHelper(\n                      transition.to, currentActivityNumber, currentStepNumber,\n                      branchLetterCode);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get script for this project\n   */\n  getProjectScript() {\n    return this.project.script;\n  }\n\n  /**\n   * Get the next node\n   * @param nodeId get the node id that comes after this one\n   * @return the node id that comes after\n   */\n  getNextNodeId(nodeId) {\n    const flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n    if (flattenedNodeIds != null) {\n      const indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n      if (indexOfNodeId != -1) {\n        const indexOfNextNodeId = indexOfNodeId + 1;\n        return flattenedNodeIds[indexOfNextNodeId];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get all the achievements object in the project. The achievements object\n   * contains the isEnabled field and an array of items.\n   * @return the achievement object\n   */\n  getAchievements() {\n    if (this.project != null) {\n      if (this.project.achievements == null) {\n        this.project.achievements = {\n          isEnabled: true,\n          items: []\n        };\n      }\n      return this.project.achievements;\n    }\n    return null;\n  }\n\n  /**\n   * Get the achievement items in the project\n   * @return the achievement items\n   */\n  getAchievementItems() {\n    const achievements = this.getAchievements();\n    if (achievements != null) {\n      if (achievements.items == null) {\n        achievements.items = [];\n      }\n      return achievements.items;\n    }\n    return null;\n  }\n\n  /**\n   * Get an achievement by the 10 character alphanumeric achievement id\n   * @param achievementId the 10 character alphanumeric achievement id\n   * @return the achievement with the given achievement id\n   */\n  getAchievementByAchievementId(achievementId) {\n    if (achievementId != null) {\n      const achievements = this.getAchievements();\n      if (achievements != null) {\n        const achievementItems = achievements.items;\n        if (achievementItems != null) {\n          for (let achievement of achievementItems) {\n            if (achievement != null && achievement.id == achievementId) {\n              return achievement;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the total number of rubrics (step + components) for the given nodeId\n   * @param nodeId the node id\n   * @return Number of rubrics for the node\n   */\n  getNumberOfRubricsByNodeId(nodeId) {\n    let n = 0;\n    let nodeContent = this.getNodeContentByNodeId(nodeId);\n    if (nodeContent) {\n      let nodeRubric = nodeContent.rubric;\n      if (nodeRubric != null && nodeRubric != '') {\n        n++;\n      }\n\n      let components = nodeContent.components;\n      if (components && components.length) {\n        for (let component of components) {\n          if (component) {\n            const componentRubric = component.rubric;\n            if (componentRubric != null && componentRubric != '') {\n              n++;\n            }\n          }\n        }\n      }\n    }\n    return n;\n  }\n\n  /**\n   * Remember the result for whether the node is affected by the constraint\n   * @param nodeId the node id\n   * @param constraintId the constraint id\n   * @param whether the node is affected by the constraint\n   */\n  cacheIsNodeAffectedByConstraintResult(nodeId, constraintId, result) {\n    this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId] = result;\n  }\n\n  /**\n   * Check if we have calculated the result for whether the node is affected\n   * by the constraint\n   * @param nodeId the node id\n   * @param constraintId the constraint id\n   * @return Return the result if we have calculated the result before. If we\n   * have not calculated the result before, we will return null.\n   */\n  getCachedIsNodeAffectedByConstraintResult(nodeId, constraintId) {\n    return this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId];\n  }\n\n  /**\n   * Get the id to node mappings.\n   * @return An object the keys as node ids and the values as nodes.\n   */\n  getIdToNode() {\n    return this.idToNode;\n  }\n\n  /**\n   * Check if a node has rubrics.\n   * @param nodeId The node id of the node.\n   * @return Whether the node has rubrics authored on it.\n   */\n  nodeHasRubric(nodeId) {\n    let numberOfRubrics = this.getNumberOfRubricsByNodeId(nodeId);\n    if (numberOfRubrics > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  getSpaces() {\n    if (this.project.spaces != null) {\n      return this.project.spaces;\n    } else {\n      return [];\n    }\n  }\n\n  addSpace(space) {\n    if (this.project.spaces == null) {\n      this.project.spaces = [];\n    }\n    if (!this.isSpaceExists(space.id)) {\n      this.project.spaces.push(space);\n      this.saveProject();\n    }\n  }\n\n  isSpaceExists(id) {\n    const spaces = this.getSpaces();\n    for (let space of spaces) {\n      if (space.id === id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  removeSpace(id) {\n    let spaces = this.getSpaces();\n    for (let s = 0; s < spaces.length; s++) {\n      if (spaces[s].id == id) {\n        spaces.splice(s, 1);\n        this.saveProject();\n        return;\n      }\n    }\n  }\n}\n\nProjectService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'UtilService'\n];\n\nexport default ProjectService;\n"]}