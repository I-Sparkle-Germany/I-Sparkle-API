{"version":3,"sources":["projectService.es6"],"names":["ProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","project","transitions","applicationNodes","inactiveStepNodes","inactiveGroupNodes","groupNodes","idToNode","idToElement","metadata","activeConstraints","rootNode","idToPosition","idToOrder","nodeCount","componentServices","nodeIdToNumber","nodeIdToIsInBranchPath","nodeIdToBranchPathLetter","achievements","isNodeAffectedByConstraintResult","flattenedProjectAsNodeIds","$translate","additionalProcessingFunctionsMap","filters","parseProject","style","name","getProjectMetadata","title","projectTitle","nodes","planningNodes","nodeId","childIds","node","getNodeById","ids","id","result","getNodes","transition","existingTransitions","getTransitions","replaced","t","length","existingTransition","splice","push","existingNodes","n","existingNode","existingNodeId","$broadcast","groupId","group","groupChildNodeIds","indexOf","groupNode","type","applicationNode","nodeType","content","constraints","setIdToNode","setIdToElement","addNode","addGroupNode","addApplicationNode","addNodeToGroupNode","isPreview","getConfigParam","constraint","planningNode","clearProjectFields","loadNodes","loadPlanningNodes","inactiveNodes","loadInactiveNodes","constraintId","active","getRootNode","setNodeOrder","branches","getBranches","branchNodeIds","pos","setIdToPosition","isNodeIdInABranch","getPositionById","b","getBranchNodePositionById","calculateNodeNumbers","isGroupNode","childId","child","getMode","planningIds","availablePlanningNodes","planningId","startGroupId","stepNumber","importProjectIdToOrder","getNodeOrderOfProjectHelper","item","c","childStepNumber","i","path","getPathToNode","undefined","order","getIdByOrder","integerToAlpha","int","alphabet","branch","branchPaths","p","branchPath","nodeIndex","startPoint","branchStartPoint","startPointPos","branchPathPos","num","position","Object","entries","value","element","contentString","JSON","stringify","replaceAssetPaths","parse","contentBaseURL","replace","RegExp","matchedString","delimiter","matchedStringWithoutQuotes","substr","charAt","injectClickToSnipImageIntoContentString","imgMatcher","matchGroup1","newString","tempNode","getNodePositionById","nodeIcon","defaultName","color","fontSet","fontName","imgSrc","imgAlt","icons","default","icon","$","extend","getGroupNodes","isNodeDirectChildOfGroup","getInactiveGroupNodes","inactiveGroupNode","parentGroupId","parentGroup","getParentGroup","val","depth","parent","getNodeDepth","groupIds","descendents","getDescendentsOfGroup","childDescendents","concat","projectStartId","getStartNodeId","groups","getGroups","groupStartId","startId","startNodeId","allConstraints","isNodeAffectedByConstraint","orderedNodeIds","getFlattenedProjectAsNodeIds","sort","constraintsComparatorGenerator","constraintA","constraintB","constraintAIndex","targetId","constraintBIndex","rememberedResult","getIsNodeAffectedByConstraintResult","action","isNodeIdAfter","targetNode","isNodeDescendentOfGroup","setIsNodeAffectedByConstraintResult","nodeIdBefore","nodeIdAfter","isApplicationNode","pathsToEnd","getAllPaths","pathToEnd","index","parentGroupIndex","getTransitionsByFromNodeId","toNodeId","to","navigationMode","componentId","component","getComponentByNodeIdAndComponentId","componentType","componentService","get","getPossibleTransitionCriteria","fromNodeId","transitionLogic","getTransitionLogicByFromNodeId","nodesByToNodeId","nodeIds","getNodesByToNodeId","groupsThatPointToNodeId","hasTransitionTo","transitionsResults","projectURL","Date","getTime","then","projectJSON","data","setProject","projectId","configURL","window","configJSON","previewProjectURL","commitMessage","cleanupBeforeSave","getProjectId","saveProjectURL","projectJSONString","angular","toJson","httpParams","method","url","headers","params","param","commitHistory","notifyProjectBeginURL","otherAuthors","resolve","reject","notifyProjectEndURL","activeNodes","getActiveNodes","activeNode","checked","getInactiveNodes","inactiveNode","copyProjectURL","registerNewProjectURL","e","Error","commitProjectURL","wiseBaseURL","getWISEBaseURL","theme","themeSettings","recalculate","pathsSoFar","allPaths","consolidatePaths","pathSoFar","includeGroups","addedCurrentNodeId","getParentGroupId","parentGroupTransitions","parentGroupTransition","allPathsFromToNode","tempPath","unshift","transitionResult","firstNodeId","firstParentGroupId","lastNodeId","pop","paths","consolidatedPath","arePathsEmpty","currentPath","getNonEmptyPathIndex","getFirstNodeIdInPathAtIndex","areFirstNodeIdsInPathsTheSame","removeNodeIdFromPaths","pathsThatContainNodeId","getPathsThatContainNodeId","removeNodeIdFromPath","consumedPath","consumePathsUntilNodeId","consumedNodeIds","x","tempNodeId","pathsToConsume","pathThatContainsNodeId","tempNodeIdIndex","nodeIdIndex","tempConsumedNodeIds","pathIndex","findBranches","previousNodeId","branchMetaObject","createBranchMetaObject","nextCommonNodeId","findNextCommonNodeId","branchEndPoint","extractPathsUpToNodeId","removeDuplicatePaths","trimPathsUpToNodeId","subPaths","allPathsContainNodeId","extractedPaths","extractedPath","slice","uniquePaths","isPathInUniquePaths","uniquePath","pathsEqual","path1","path2","path1NodeId","path2NodeId","branchPathsIn","components","getComponentsByNodeId","tempComponent","tempComponentId","componentPosition","nodeContent","newGroupId","getNextAvailableGroupId","newGroup","newNodeId","getNextAvailableNodeId","newNode","showSaveButton","showSubmitButton","addInactiveNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","isInactive","insertNodeAfterInGroups","insertNodeAfterInTransitions","oldToGroupIds","transitionsFromGroup","transitionFromGroup","fromGroupId","newToGroupId","updateTransitionsForInsertingGroup","nodeIdToInsert","nodeIdToInsertAfter","previousNode","updateChildrenTransitionsForMovingGroup","previousNodeTransitionLogic","transitionsJSONString","transitionsCopy","fromJson","parentTransitions","parentTransition","newTransition","getGroupStartId","transitionObject","removeBranchPathTakenNodeConstraints","branchPathTakenConstraints","getBranchPathTakenConstraintsByNodeId","branchPathTakenConstraint","newConstraint","getNextAvailableConstraintIdForNodeId","removalCriteria","makeCopyOfJSONObject","nodeIdToInsertInside","nodeToInsert","previousNodes","previousGroups","getGroupNodesByToNodeId","previousGroup","lastNodesInGroup","getLastNodesInGroup","addToTransition","updateToTransition","nodesThatTransitionToGroup","nodeThatTransitionsToGroup","startNode","nextGroup","criteria","oldToNodeId","newToNodeId","lastNodes","getGroupIds","largestGroupIdNumber","groupIdNumber","isNaN","parseInt","nextAvailableGroupId","inactiveGroup","inactiveGroupId","nodeIdsToSkip","getNodeIds","largestNodeIdNumber","nodeIdNumber","inactiveNodeIds","getInactiveNodeIds","inactiveNodeId","nodeIdToSkip","nextAvailableNodeId","movedNodes","movingNodeIsActive","isActive","stationaryNodeIsActive","removeNodeIdFromTransitions","removeNodeIdFromGroups","moveToInactive","moveToActive","moveInactiveNode","newNodes","nodeIdToCopy","copyNode","createNodeInside","createNodeAfter","nodeCopy","newComponentIds","newComponentId","getUnusedComponentId","removingProjectStartNodeId","removeNodeIdFromNodes","hasSetNewStartId","isNodeInGroup","setStartNodeId","nextNodeId","nextGroupNode","nextGroupStartId","transitionToNodeId","recalculatePositionsInGroup","nodeToRemove","nodeToRemoveTransitionLogic","nodeToRemoveTransitions","parentIdOfNodeToRemove","parentGroupStartId","nodeToRemoveTransition","parentIdOfFromNode","tc","tempTransition","tempToNodeId","parentIdOfToNode","isFirstNodeInBranchPath","nodeIdsInBranch","getNodeIdsInBranch","nodeIdInBranch","nodeInBranch","transitionCopy","currentFromNodeId","currentToNodeId","newFromNodeId","updateBranchPathTakenConstraint","isBranchPoint","getBranchesByBranchStartPointNodeId","branchPathNodeId","branchPathNode","insertIndex","groupIdWeAreMoving","groupThatTransitionsToGroupWeAreMoving","updateChildrenTransitionsIntoGroupWeAreMoving","removeTransitionsOutOfGroup","insertAfterComponentId","service","createComponent","componentHasWork","doesAnyComponentShowSubmitButton","addComponentToNode","componentUsesSaveButton","added","componentIds","componentsToMove","a","maxScore","firstPath","nodeMaxScore","getMaxScoreForNode","componentMaxScore","firstLeafNodeId","done","tempApplicationNode","tempApplicationNodeId","planning","planningNodeTemplateId","availablePlanningNodeIds","availablePlanningNodesSoFar","availablePlanningNode","availablePlanningNodeActual","max","nextAvailablePlanningNodeId","planningNodeInstance","planningNodeInstanceNodeId","nodeIdToMove","moveNodesInside","moveNodesAfter","getChildNodeIdsById","message","nodeTitle","getNodePositionAndTitleByNodeId","removalConditional","criteriaMessages","tempRemovalCriteria","criteriaMessage","getCriteriaMessage","scoresString","scores","join","score","requiredSubmitCount","oldToGroupId","fromGroup","oldToGroup","newToGroup","newToGroupStartId","oldToGroupStartId","transitionsBefore","previousGroupNodes","transitionsAfter","extracted","previousGroupNode","updateTransitionsForExtractingGroup","transitionAfter","inserted","getStartGroupId","startGroup","firstGroupId","connectedComponentId","connectedComponents","connectedComponent","componentContent","connectedComponentParams","removeChildNodesFromActiveNodes","removeNodeFromActiveNodes","removeChildFromParent","removeNodeFromInactiveStepNodes","removeNodeFromInactiveGroupNodes","startIdUpdated","inactiveStepNode","isGroupActive","activeNodeId","activeComponents","activeComponent","activeComponentId","removeNodeFromInactiveNodes","childNode","addGroupChildNodesToInactive","removeTransitionsThatPointToNodeIdFromOutsideGroup","nodesThatPointToTargetNode","nodeThatPointsToTargetNode","nodeThatPointsToTargetNodeParentGroupId","removeTransition","toNodeIdParentGroupId","transitionsFromChild","tfc","transitionFromChild","firstNodeToRemoveTransition","firstNodeToRemoveTransitionToNodeId","nodeIdAndComponentIds","getNodeContentByNodeId","nodeIdAndComponentId","showPreviousWorkNodeId","showPreviousWorkComponentId","annotation","displayAnnotation","previousScore","currentScore","annotationGroup","globalAnnotationSettings","globalAnnotationGroups","globalAnnotationGroup","enableCriteria","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","notificationResult","notificationSettings","notifications","notification","getComponentService","componentServiceName","componentIdsToSkip","idLength","generateKey","isComponentIdUsed","alreadyUsed","isUsed","selectedNodes","fromProjectId","toProjectId","nodeIdToInsertInsideOrAfter","importStepsURL","steps","newNodeIds","selectedNode","isNodeIdUsed","tempComponents","nextAvailableConstraintId","usedConstraintIds","foundNextAvailableConstraintId","counter","potentialConstraintId","field","orderedItems","foundNodeId","$key","hasBranchPathTakenConstraint","orderNodeIds","nodeIdsComparatorGenerator","nodeIdA","nodeIdB","nodeIdAIndex","nodeIdBIndex","removalCriterion","targetNodeId","makeThisNodeNotVisibleConstraint","notVisibleRemovalCriterion","makeThisNodeNotVisitableConstraint","notVisitableRemovalCriterion","rubric","html","transitionTo","allBranches","currentActivityNumber","currentStepNumber","calculateNodeNumbersHelper","branchLetterCode","isBranchMergePoint","isBranchStartPoint","branchesByBranchStartPointNodeId","branchesObject","maxCurrentStepNumber","bp","branchCurrentStepNumber","bpn","branchEndPointNodeId","number","branchLetter","String","fromCharCode","script","scriptFilename","assetDirectoryPath","getProjectAssetsDirectoryPath","scriptPath","additionalProcessingFunction","key","getAdditionalProcessingFunctions","flattenedNodeIds","indexOfNodeId","indexOfPreviousNodeId","indexOfNextNodeId","isEnabled","items","achievementItems","getAchievements","achievementId","achievement","nodePosition","branchLetterRegex","exec","nodeRubric","componentRubric","newComponents","newComponent","copyComponent","insertPosition","getComponentPositionByNodeIdAndComponentId","importProjectId","currentComponents","$inject"],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n\n  constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.UtilService = UtilService;\n    this.project = null;\n    this.transitions = [];\n    this.applicationNodes = [];\n    this.inactiveStepNodes = [];\n    this.inactiveGroupNodes = [];\n    this.groupNodes = [];\n    this.idToNode = {};\n    this.idToElement = {};\n    this.metadata = {};\n    this.activeConstraints = [];\n    this.rootNode = null;\n    this.idToPosition = {};\n    this.idToOrder = {};\n    this.nodeCount = 0;\n    this.componentServices = {};\n    this.nodeIdToNumber = {};\n    this.nodeIdToIsInBranchPath = {};\n    this.nodeIdToBranchPathLetter = {};\n    this.achievements = [];\n    this.isNodeAffectedByConstraintResult = {};\n    this.flattenedProjectAsNodeIds = null;\n\n    this.$translate = this.$filter('translate');\n\n    // map from nodeId_componentId to array of additionalProcessingFunctions\n    this.additionalProcessingFunctionsMap = {};\n\n    // filtering options for navigation displays\n    this.filters = [\n      {'name': 'all', 'label': 'All'}\n      //{'name': 'todo', 'label': 'Todo'},\n      //{'name': 'completed', 'label': 'Completed'}\n    ];\n  };\n\n  setProject(project) {\n    this.project = project;\n    this.parseProject();\n  };\n\n  /**\n   * Initialize the data structures used to hold project information\n   */\n  clearProjectFields() {\n    this.transitions = [];\n    this.applicationNodes = [];\n    this.inactiveStepNodes = [];\n    this.inactiveGroupNodes = [];\n    this.groupNodes = [];\n    this.idToNode = {};\n    this.idToElement = {};\n    this.metadata = {};\n    this.activeConstraints = [];\n    this.rootNode = null;\n    this.idToPosition = {};\n    this.idToOrder = {};\n    this.nodeCount = 0;\n    this.nodeIdToIsInBranchPath = {};\n    this.achievements = [];\n  };\n\n  getStyle() {\n    var style = '';\n    var project = this.project;\n    if (project != null) {\n      style = project.style;\n    }\n    return style;\n  };\n\n  getFilters() {\n    return this.filters;\n  };\n\n  /**\n   * Returns the name/title of the current project\n   */\n  getProjectTitle() {\n    var name = this.getProjectMetadata().title;\n    return name ? name : 'A WISE Project (No name)';\n  };\n\n  /**\n   * Set the project title\n   */\n  setProjectTitle(projectTitle) {\n    var metadata = this.getProjectMetadata();\n\n    if (metadata != null) {\n      metadata.title = projectTitle;\n    }\n  }\n\n  getProjectMetadata() {\n    return this.metadata ? this.metadata : {};\n  };\n\n  getNodes() {\n    var nodes = null;\n    var project = this.project;\n\n    if (project != null) {\n      nodes = project.nodes;\n    }\n\n    return nodes;\n  };\n\n  getPlanningNodes() {\n    var planningNodes = null;\n    var project = this.project;\n\n    if (project != null) {\n      planningNodes = project.planningNodes;\n    }\n\n    return planningNodes;\n  };\n\n  getChildNodeIdsById(nodeId) {\n    var childIds = [];\n    var node = this.getNodeById(nodeId);\n\n    if (node.ids) {\n      childIds = node.ids;\n    }\n\n    return childIds;\n  };\n\n  getGroupNodes() {\n    return this.groupNodes;\n  };\n\n  isNode(id) {\n    var result = false;\n    var nodes = this.getNodes();\n\n    if (nodes != null) {\n      for (var node of nodes) {\n        if (node != null) {\n          var nodeId = node.id;\n\n          if (nodeId === id) {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  // adds or update transition if exists\n  addTransition(transition) {\n\n    var existingTransitions = this.getTransitions();\n    var replaced = false;\n    for (var t = 0; t < existingTransitions.length; t++) {\n      var existingTransition = existingTransitions[t];\n      if (existingTransition.id === transition.id) {\n        existingTransitions.splice(t, 1, transition);\n        replaced = true;\n      }\n    }\n    if (!replaced) {\n      existingTransitions.push(transition);\n    }\n  };\n\n  addNode(node) {\n    var existingNodes = this.project.nodes;\n\n    var replaced = false;\n    if (node != null && existingNodes != null) {\n      for (var n = 0; n < existingNodes.length; n++) {\n        var existingNode = existingNodes[n];\n        var existingNodeId = existingNode.id;\n        if (existingNodeId === node.id) {\n          existingNodes.splice(n, 1, node);\n          replaced = true;\n        }\n      }\n    }\n    if (!replaced) {\n      existingNodes.push(node);\n    }\n  };\n\n  addApplicationNode(node) {\n\n    var applicationNodes = this.applicationNodes;\n\n    if (node != null && applicationNodes != null) {\n      applicationNodes.push(node);\n    }\n  };\n\n  addGroupNode(node) {\n\n    var groupNodes = this.groupNodes;\n\n    if (node != null && groupNodes != null) {\n      groupNodes.push(node);\n    }\n\n    this.$rootScope.$broadcast('groupsChanged');\n  };\n\n  addNodeToGroupNode(groupId, nodeId) {\n    if (groupId != null && nodeId != null) {\n      var group = this.getNodeById(groupId);\n      if (group != null) {\n        var groupChildNodeIds = group.ids;\n        if (groupChildNodeIds != null) {\n          if (groupChildNodeIds.indexOf(nodeId) === -1) {\n            groupChildNodeIds.push(nodeId);\n          }\n        }\n      }\n    }\n  };\n\n  isGroupNode(id) {\n    var result = false;\n\n    var groupNode = this.getNodeById(id);\n\n    if (groupNode != null) {\n      var type = groupNode.type;\n\n      if (type === 'group') {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  isApplicationNode(id) {\n    var result = false;\n\n    var applicationNode = this.getNodeById(id);\n\n    if (applicationNode != null) {\n      var type = applicationNode.type;\n\n      if (type !== 'group') {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  getGroups() {\n    return this.groupNodes;\n  };\n\n  /**\n   * Get the inactive group nodes.\n   * @return An array of inactive group nodes.\n   */\n  getInactiveGroupNodes() {\n    return this.inactiveGroupNodes;\n  }\n\n  /**\n   * Get the inactive step nodes. This will include the inactive steps that\n   * are in an inactive group.\n   * @return An array of inactive step nodes.\n   */\n  getInactiveStepNodes() {\n    return this.inactiveStepNodes;\n  }\n\n  loadNodes(nodes) {\n    if (nodes != null) {\n      for (var node of nodes) {\n        if (node != null) {\n          var nodeId = node.id;\n          var nodeType = node.type;\n          var content = node.content;\n          var constraints = node.constraints;\n\n          if (content != null) {\n            //node.content = this.injectAssetPaths(content);\n          }\n\n          this.setIdToNode(nodeId, node);\n          this.setIdToElement(nodeId, node);\n\n          this.addNode(node);\n\n          if (nodeType === 'group') {\n            this.addGroupNode(node);\n          } else {\n            this.addApplicationNode(node);\n          }\n\n          var groupId = node.groupId;\n\n          if (groupId != null) {\n            this.addNodeToGroupNode(groupId, nodeId);\n          }\n\n          if (constraints != null) {\n\n            if (this.ConfigService.isPreview() == true && this.ConfigService.getConfigParam('constraints') === false) {\n              /*\n               * if we are in preview mode and constraints are set\n               * to false, we will not add the constraints\n               */\n            } else {\n              // all other cases we will add the constraints\n              for (var constraint of constraints) {\n                this.activeConstraints.push(constraint);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Load the planning template nodes\n   * @param planning template nodes\n   */\n  loadPlanningNodes(planningNodes) {\n    if (planningNodes != null) {\n\n      // loop through all the planning template nodes\n      for (var planningNode of planningNodes) {\n        if (planningNode != null) {\n          var nodeId = planningNode.id;\n\n          this.setIdToNode(nodeId, planningNode);\n          this.setIdToElement(nodeId, planningNode);\n\n          // TODO: may need to add more function calls here to add the planning\n        }\n      }\n    }\n  }\n\n  /**\n   * Parse the project to detect the nodes, branches, node numbers, etc.\n   */\n  parseProject() {\n    var project = this.project;\n    if (project != null) {\n\n      // clear and initialize our project data structures\n      this.clearProjectFields();\n\n      if (project.metadata) {\n        this.metadata = project.metadata;\n      }\n\n      var nodes = project.nodes;\n      this.loadNodes(nodes);\n\n      // load the planning node templates\n      var planningNodes = project.planningNodes;\n      this.loadPlanningNodes(planningNodes);\n\n      // load the inactive nodes\n      var inactiveNodes = project.inactiveNodes;\n      this.loadInactiveNodes(inactiveNodes);\n\n      var constraints = project.constraints;\n\n      if (constraints != null) {\n        for (var constraint of constraints) {\n          if (constraint != null) {\n            var constraintId = constraint.id;\n            constraint.active = true;\n\n            this.setIdToElement(constraintId, constraint);\n          }\n        }\n      }\n\n      // set root node\n      this.rootNode = this.getRootNode(nodes[0].id);\n\n      // set project order\n      this.setNodeOrder(this.rootNode, this.nodeCount);\n      //this.nodeCount = 0;\n\n      var n = nodes.length;\n      var branches = this.getBranches();\n      var branchNodeIds = [];\n\n      // set node positions\n      var id, pos;\n\n      while (n--) {\n        id = nodes[n].id;\n        if (id === this.rootNode.id) {\n          this.setIdToPosition(id, '0');\n        } else if (this.isNodeIdInABranch(branches, id)) {\n          // node is in a branch, so process later\n          branchNodeIds.push(id);\n        } else {\n          pos = this.getPositionById(id);\n          this.setIdToPosition(id, pos);\n        }\n      }\n\n      // set branch node positions\n      var b = branchNodeIds.length;\n      while (b--) {\n        id = branchNodeIds[b];\n        pos = this.getBranchNodePositionById(id);\n        this.setIdToPosition(id, pos);\n      }\n\n      /*\n       * calculate the node numbers\n       * e.g. if the step is called\n       * 1.5 View the Potential Energy\n       * then the node number is 1.5\n       */\n      this.calculateNodeNumbers();\n\n      if (this.project.achievements != null) {\n        // get the project achievements\n        this.achievements = this.project.achievements;\n      }\n    }\n\n    this.$rootScope.$broadcast('projectChanged');\n  };\n\n  setNodeOrder(node) {\n    this.idToOrder[node.id] = {'order': this.nodeCount};\n    this.nodeCount++;\n    if (this.isGroupNode(node.id)) {\n      let childIds = node.ids;\n      for (let childId of childIds) {\n        let child = this.getNodeById(childId);\n        this.setNodeOrder(child);\n      }\n\n      if (this.ConfigService.getMode() === 'classroomMonitor') {\n        // we're viewing the classroom monitor, so include planning nodes in the project structure\n        let planningIds = node.availablePlanningNodes;\n        if (planningIds) {\n          for (let planningId of planningIds) {\n            let child = this.getNodeById(planningId.nodeId);\n            this.setNodeOrder(child);\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the node order mappings of the project\n   * @param project the project JSOn\n   * @return an object containing the idToOrder mapping and also the array\n   * of nodes\n   */\n  getNodeOrderOfProject(project) {\n\n    var idToOrder = {};\n\n    // initialize the node count used for counting the nodes\n    idToOrder.nodeCount = 0;\n\n    // get the start group id\n    var startGroupId = project.startGroupId;\n\n    // get the root node\n    var rootNode = this.getNodeById(startGroupId, project);\n\n    // initialize the step number\n    var stepNumber = '';\n\n    // initialize the nodes\n    var nodes = [];\n\n    // recursively traverse the project to calculate the node counts and step numbers\n    var importProjectIdToOrder = this.getNodeOrderOfProjectHelper(project, rootNode, idToOrder, stepNumber, nodes);\n\n    // remove the node count from the mapping since we don't need it anymore\n    delete importProjectIdToOrder.nodeCount;\n\n    // create the object we will return\n    var result = {};\n    result.idToOrder = importProjectIdToOrder;\n    result.nodes = nodes;\n\n    return result;\n  }\n\n  /**\n   * Recursively traverse the project to calculate the node order and step numbers\n   * @param project the project JSON\n   * @param node the current node we are on\n   * @param idToOrder the mapping of node id to item\n   * @param stepNumber the current step number\n   * @param nodes the array of nodes\n   */\n  getNodeOrderOfProjectHelper(project, node, idToOrder, stepNumber, nodes) {\n\n    /*\n     * Create the item that we will add to the idToOrder mapping.\n     * The 'order' field determines how the project nodes are displayed\n     * when we flatten the project for displaying.\n     */\n    var item = {\n      'order': idToOrder.nodeCount,\n      'node': node,\n      'stepNumber': stepNumber\n    };\n\n    // set the mapping of node id to item\n    idToOrder[node.id] = item;\n\n    // increment the node count\n    idToOrder.nodeCount++;\n\n    // add the item to the nodes array\n    nodes.push(item);\n\n    if (node.type == 'group') {\n      // the node is group so we also need to loop through its children\n\n      // get the child node ids\n      var childIds = node.ids;\n\n      // loop through all the children\n      for (var c = 0; c < childIds.length; c++) {\n        var childId = childIds[c];\n\n        // get a child node\n        var child = this.getNodeById(childId, project);\n\n        // get the current step number e.g. 1\n        var childStepNumber = stepNumber;\n\n        if (childStepNumber != '') {\n          // add the . separator for the step number e.g. 1.\n          childStepNumber += '.';\n        }\n\n        // update the step number e.g. 1.1\n        childStepNumber += (c + 1);\n\n        // recursively traverse the child\n        this.getNodeOrderOfProjectHelper(project, child, idToOrder, childStepNumber, nodes);\n      }\n    }\n\n    return idToOrder;\n  }\n\n  /**\n   * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n   * @param id a node id\n   * @return string position of the given node id in the project\n   */\n  getPositionById(id) {\n    for (var i = 0; i < this.rootNode.ids.length; i++) {\n      var node = this.getNodeById(this.rootNode.ids[i]);\n      var path = this.getPathToNode(node, i+1, id);\n      if (path != undefined && path != null) {\n        return path;\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Returns the order of the given node id in the project. Returns null if no node with id exists.\n   * @param id String node id\n   * @return Number order of the given node id in the project\n   */\n  getOrderById(id) {\n    if (this.idToOrder[id]) {\n      return this.idToOrder[id].order;\n    }\n\n    return null;\n  };\n  /**\n   * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n   * @param order Number\n   * @return Number node id of the given order in the project\n   */\n  getIdByOrder(order) {\n    var nodeId = null;\n\n    for (var id in this.idToOrder) {\n      if (this.idToOrder[id].order === order) {\n        if (this.isGroupNode(id) && order > 1) {\n          nodeId = this.getIdByOrder(order-1);\n        } else {\n          nodeId = id;\n        }\n        break;\n      }\n    }\n\n    return nodeId;\n  };\n\n  /**\n   * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n   * @param id a node id\n   * @return string position of the given node id in the project\n   */\n  getBranchNodePositionById(id) {\n    var branches = this.getBranches();\n    var b = branches.length;\n\n    // TODO: should we localize this? should we support more than 26?\n    var integerToAlpha = function(int) {\n      var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n      if (int > -1 && int < 26) {\n        return alphabet[int];\n      } else {\n        return int;\n      }\n    };\n\n    while (b--) {\n      var branch = branches[b];\n      var branchPaths = branch.branchPaths;\n      for (var p = 0; p < branchPaths.length; p++) {\n        var branchPath = branchPaths[p];\n        var nodeIndex = branchPath.indexOf(id);\n        if (nodeIndex > -1) {\n          var startPoint = branch.branchStartPoint;\n          var startPointPos = this.idToPosition[startPoint];\n          var branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n          return branchPathPos + (nodeIndex+1);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n   * @param node a node to start searching down\n   * @param path the position of the given node\n   * @param id the node id to search for\n   * @return string path of the given node id in the project\n   */\n  getPathToNode(node, path, id) {\n    if (node.id === id) {\n      return path + '';\n    } else if (node.type === 'group') {\n      var num = 0;\n      var branches = this.getBranches();\n      for (var nodeId of node.ids) {\n        if (this.isNodeIdInABranch(branches, nodeId)) {\n          this.getBranchNodePositionById(nodeId);\n        } else {\n          ++num;\n          var pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n          if (pos) {\n            return pos;\n          }\n        }\n      }\n    }\n  };\n\n  setIdToPosition(id, pos) {\n    if (id != null) {\n      this.idToPosition[id] = pos;\n    }\n  };\n\n  getNodePositionById(id) {\n    let position = null;\n\n    if (id != null) {\n      //position = this.idToPosition[id] ? this.idToPosition[id] : null;\n      position = this.nodeIdToNumber[id];\n    }\n\n    return position;\n  };\n\n  getNodeIdByOrder(order) {\n    let id = null;\n\n    if (order != null) {\n      for (let [nodeId, value] of Object.entries(this.idToOrder)) {\n        if (value.order === order) {\n          id = nodeId;\n          break;\n        }\n      }\n    }\n\n    return id;\n  }\n\n  getNodeOrderById(id) {\n    let order = null;\n\n    if (id != null) {\n      order = this.idToOrder[id] ? this.idToOrder[id].order : null;\n    }\n\n    return order;\n  };\n\n  setIdToNode(id, element) {\n    if (id != null) {\n      this.idToNode[id] = element;\n    }\n  };\n\n  setIdToElement(id, element) {\n    if (id != null) {\n      this.idToElement[id] = element;\n    }\n  };\n\n  /**\n   * Replace relative asset paths with absolute paths\n   * e.g.\n   * assets/myimage.jpg\n   * will be replaced with\n   * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n   * @param content a string or JSON object\n   * @return the same type of object that was passed in as the content\n   * but with relative asset paths replaced with absolute paths\n   */\n  injectAssetPaths(content) {\n\n    if (content != null) {\n\n      if (typeof content === 'object') {\n\n        var contentString = JSON.stringify(content);\n\n        if (contentString != null) {\n\n          // replace the relative asset paths with the absolute paths\n          contentString = this.replaceAssetPaths(contentString);\n\n          content = JSON.parse(contentString);\n        }\n      } else if (typeof content === 'string') {\n\n        // replace the relative asset paths with the absolute paths\n        content = this.replaceAssetPaths(content);\n      }\n    }\n\n    return content;\n  };\n\n  /**\n   * Replace the relative asset paths with absolute paths\n   * @param contentString the content string\n   * @return the content string with relative asset paths replaced\n   * with absolute asset paths\n   */\n  replaceAssetPaths(contentString) {\n\n    if (contentString != null) {\n\n      // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n      var contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n      // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n      // the string we're looking for can't start with '/ and \"/.\n      // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n      contentString = contentString.replace(\n        new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/]?[^\\/]?[a-zA-Z0-9@\\\\._\\\\/\\\\s\\\\-]*[\\.](png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html.*?|js).*?(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n        (matchedString) => {\n          // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n          var delimiter = '';\n          var matchedStringWithoutQuotes = '';\n\n          if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n            // the string has escaped quotes for example \\\"hello.png\\\"\n\n            // get everything between the escaped quotes\n            matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n            // get the delimiter which will be \\' or \\\"\n            delimiter = matchedString.substr(0,2);\n          } else {\n            // the string does not have escaped quotes for example \"hello.png\"\n\n            // get everything between the quotes\n            matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n            // get the delimiter which will be ' or \"\n            delimiter = matchedString.substr(0,1);\n          }\n\n          if (matchedStringWithoutQuotes != null && matchedStringWithoutQuotes.length > 0 && matchedStringWithoutQuotes.charAt(0) == \"/\") {\n            /*\n             * the matched string starts with a \"/\" which means it's\n             * an absolute path and does not require path prepending\n             * so we will just return the original unmodified string\n             */\n            return delimiter + matchedStringWithoutQuotes + delimiter;\n          } else {\n            //var matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n            // make a new string with the contentBaseURL + assets/ prepended to the path\n            return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n          }\n        }\n      );\n    }\n\n    return contentString;\n  };\n\n  /**\n   * Inject the ng-click attribute that will call the snipImage function\n   * @param content the content\n   * @returns the modified content\n   */\n  injectClickToSnipImage(content) {\n    if (content != null) {\n\n      if (typeof content === 'object') {\n\n        var contentString = JSON.stringify(content);\n\n        if (contentString != null) {\n\n          // replace the relative asset paths with the absolute paths\n          contentString = this.injectClickToSnipImageIntoContentString(contentString);\n\n          content = JSON.parse(contentString);\n        }\n      } else if (typeof content === 'string') {\n\n        // replace the relative asset paths with the absolute paths\n        content = this.injectClickToSnipImageIntoContentString(content);\n      }\n    }\n\n    return content;\n  }\n\n  /**\n   * Inject the ng-click attribute that will call the snipImage function\n   * @param contentString the content in string format\n   * @returns the modified content string\n   */\n  injectClickToSnipImageIntoContentString(contentString) {\n\n    if (contentString != null) {\n\n      // regex to match image elements\n      var imgMatcher = new RegExp('<img.*?src=\\\\\\\\?[\\'\"](.*?)\\\\\\\\?[\\'\"].*?>', 'gi');\n\n      // replace all instances that match\n      contentString = contentString.replace(imgMatcher,\n        (matchedString, matchGroup1) => {\n\n          /*\n           * insert the ng-click attribute\n           * Before: <img src=\"abc.png\"/>\n           * After: <img ng-click=\"vleController.snipImage($event)\" src=\"abc.png\" />\n           */\n          var newString = matchedString.replace('img', 'img ng-click=\\\\\\\"$emit(\\'snipImage\\', $event)\\\\\\\"');\n\n          return newString;\n        }\n      );\n    }\n\n    return contentString;\n  }\n\n  /**\n   * Returns the node specified by the nodeId\n   * @param nodeId get the node with this node id\n   * @param (optional) the project to retrieve the node from. this is used in\n   * the case when we want the node from another project such as when we are\n   * importing a step from another project\n   * Return null if nodeId param is null or the specified node does not exist in the project.\n   */\n  getNodeById(nodeId, project) {\n    var element = null;\n\n    if (project == null) {\n      // the project argument is null so we will get it from the current project\n      if (nodeId != null && this.idToNode[nodeId]) {\n        element = this.idToNode[nodeId];\n      }\n    } else {\n      /*\n       * the project argument is not null so we will get the node from\n       * project that was passed in\n       */\n\n      // loop through all the active nodes in the project\n      for (var tempNode of project.nodes) {\n        if (tempNode != null && tempNode.id == nodeId) {\n          // we have found the node we are looking for\n          return tempNode;\n        }\n      }\n\n      // loop through all the inactive nodes in the project\n      for (var tempNode of project.inactiveNodes) {\n        if (tempNode != null && tempNode.id == nodeId) {\n          // we have found the node we are looking for\n          return tempNode;\n        }\n      }\n    }\n\n    return element;\n  };\n\n  /**\n   * Returns the title of the node with the nodeId\n   * Return null if nodeId param is null or the specified node does not exist in the project.\n   */\n  getNodeTitleByNodeId(nodeId) {\n    var title = null;\n\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n      title = node.title;\n    }\n\n    return title;\n  };\n\n  /**\n   * Get the node position and title\n   * @param nodeId the node id\n   * @returns the node position and title, e.g. \"1.1 Introduction\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    var title = null;\n\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      var position = this.getNodePositionById(nodeId);\n\n      if (position != null) {\n        title = position + ': ' + node.title;\n      } else {\n        title = node.title;\n      }\n    }\n\n    return title;\n  };\n\n  getNodeIconByNodeId(nodeId) {\n    var node = this.getNodeById(nodeId);\n    var nodeIcon = null;\n\n    if (node != null) {\n      var nodeType = node.type;\n\n      // set defaults (TODO: get from configService?)\n      var defaultName = (nodeType === 'group') ? 'explore' : 'school';\n      nodeIcon = {\n        color: 'rgba(0,0,0,0.54)',\n        type: 'font',\n        fontSet: 'material-icons',\n        fontName: defaultName,\n        imgSrc: '',\n        imgAlt: 'node icon'\n      };\n\n      // TODO: check for different statuses\n      var icons = node.icons;\n      if (!!icons && !!icons.default) {\n        var icon = icons.default;\n        nodeIcon = $.extend(true, nodeIcon, icon);\n      }\n\n      // check for empty image source\n      if (!nodeIcon.imgSrc) {\n        // revert to font icon\n        nodeIcon.type = 'font';\n      }\n    }\n\n    return nodeIcon;\n  };\n\n  getParentGroup(nodeId) {\n    var result = null;\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        // Check if the node is a child of an active group.\n        var groupNodes = this.getGroupNodes();\n        for (var groupNode of groupNodes) {\n          if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n            return groupNode;\n          }\n        }\n\n        // Check if the node is a child of an inactive group.\n        var inactiveGroupNodes = this.getInactiveGroupNodes();\n        for (var inactiveGroupNode of inactiveGroupNodes) {\n          if (this.isNodeDirectChildOfGroup(node, inactiveGroupNode)) {\n            return inactiveGroupNode;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Get the parent group id\n   * @param nodeId the parent group id\n   * @returns the parent group id\n   */\n  getParentGroupId(nodeId) {\n\n    var parentGroupId = null;\n\n    if (nodeId != null) {\n      var parentGroup = this.getParentGroup(nodeId);\n\n      if (parentGroup != null) {\n        parentGroupId = parentGroup.id;\n      }\n    }\n\n    return parentGroupId;\n  }\n\n  getNodeDepth(nodeId, val) {\n    var result = null;\n\n    if (nodeId != null) {\n      var depth = (typeof val === \"number\") ? val : 0;\n      var parent = this.getParentGroup(nodeId);\n      if (parent) {\n        depth = this.getNodeDepth(parent.id, depth + 1);\n      }\n      result = depth;\n    }\n\n    return result;\n  };\n\n  getRootNode(nodeId) {\n    var result = null;\n\n    var parentGroup = this.getParentGroup(nodeId);\n\n    if (parentGroup == null) {\n      result = this.getNodeById(nodeId);\n    } else {\n      result = this.getRootNode(parentGroup.id);\n    }\n\n    return result;\n  };\n\n  isNodeDirectChildOfGroup(node, group) {\n    var result = false;\n\n    if (node != null && group != null) {\n      var nodeId = node.id;\n      var groupIds = group.ids;\n\n      if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  isNodeDescendentOfGroup(node, group) {\n    var result = false;\n\n    if (node != null && group != null) {\n      var descendents = this.getDescendentsOfGroup(group);\n      var nodeId = node.id;\n\n      if (descendents.indexOf(nodeId) != -1) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  getDescendentsOfGroup(group) {\n    var descendents = [];\n\n    if (group != null) {\n      var childIds = group.ids;\n\n      if (childIds != null) {\n        descendents = childIds;\n\n        for (var childId of childIds) {\n          var node = this.getNodeById(childId);\n\n          if (node != null) {\n            var childDescendents = this.getDescendentsOfGroup(node);\n\n            descendents = descendents.concat(childDescendents);\n          }\n        }\n      }\n    }\n\n    return descendents;\n  };\n\n  isStartNode(node) {\n    var result = false;\n\n    if (node != null) {\n      var nodeId = node.id;\n\n      var projectStartId = this.getStartNodeId();\n\n      if (nodeId === projectStartId) {\n        result = true;\n      }\n\n      var groups = this.getGroups();\n\n      for (var group of groups) {\n\n        if (group != null) {\n          var groupStartId = group.startId;\n\n          if (nodeId === groupStartId) {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Returns the Project's start node id, or null if it's not defined in the project\n   */\n  getStartNodeId() {\n    var startNodeId = null;\n    var project = this.project;\n    if (project != null) {\n      startNodeId = project.startNodeId;\n    }\n    return startNodeId;\n  };\n\n  /**\n   * Set the start node id\n   * @param nodeId the new start node id\n   */\n  setStartNodeId(nodeId) {\n\n    if (nodeId != null) {\n      var project = this.project;\n      if (project != null) {\n        project.startNodeId = nodeId;\n      }\n    }\n  }\n\n  /**\n   * Get the start group id\n   * @return the start group id\n   */\n  getStartGroupId() {\n    var startGroupId = null;\n\n    var project = this.project;\n    if (project != null) {\n      startGroupId = project.startGroupId;\n    }\n\n    return startGroupId;\n  }\n\n  /**\n   * Check if the given node id is the start node id\n   * @return whether the node id is the start node id\n   */\n  isStartNodeId(nodeId) {\n\n    var result = false;\n\n    var project = this.project;\n\n    if (project != null) {\n      var startNodeId = project.startNodeId;\n\n      if (nodeId === startNodeId) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  getConstraintsForNode(node) {\n    var constraints = [];\n\n    var allConstraints = this.activeConstraints;\n\n    for (var constraint of allConstraints) {\n      if (this.isNodeAffectedByConstraint(node, constraint)) {\n        constraints.push(constraint);\n      }\n    }\n\n    return constraints;\n  };\n\n  /**\n   * Order the constraints so that they show up in the same order as in the\n   * project.\n   * @param constraints An array of constraint objects.\n   * @return An array of ordered constraints.\n   */\n  orderConstraints(constraints) {\n    let orderedNodeIds = this.getFlattenedProjectAsNodeIds();\n    return constraints.sort(this.constraintsComparatorGenerator(orderedNodeIds));\n  }\n\n  /**\n   * Create the constraints comparator function that is used for sorting an\n   * array of constraint objects.\n   * @param orderedNodeIds An array of node ids in the order in which they\n   * show up in the project.\n   * @return A comparator that orders constraint objects in the order in which\n   * the target ids show up in the project.\n   */\n  constraintsComparatorGenerator(orderedNodeIds) {\n    return function(constraintA, constraintB) {\n      let constraintAIndex = orderedNodeIds.indexOf(constraintA.targetId);\n      let constraintBIndex = orderedNodeIds.indexOf(constraintB.targetId);\n      if (constraintAIndex < constraintBIndex) {\n        return -1;\n      } else if (constraintAIndex > constraintBIndex) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a node is affected by the constraint\n   * @param node check if the node is affected\n   * @param constraint the constraint that might affect the node\n   * @returns whether the node is affected by the constraint\n   */\n  isNodeAffectedByConstraint(node, constraint) {\n    var result = false;\n\n    if (node != null && constraint != null) {\n\n      // check if we have previously calculated the result before\n      var rememberedResult = this.getIsNodeAffectedByConstraintResult(node.id, constraint.id, result);\n\n      if (rememberedResult != null) {\n        // we have calculated the result before\n\n        // use the remembered result\n        result = rememberedResult;\n      } else {\n        // we have not calculated the result before\n\n        var nodeId = node.id;\n        var targetId = constraint.targetId;\n        var action = constraint.action;\n\n        if (action === 'makeAllNodesAfterThisNotVisible') {\n          if (this.isNodeIdAfter(targetId, node.id)) {\n            result = true;\n          }\n        } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n          if (this.isNodeIdAfter(targetId, node.id)) {\n            result = true;\n          }\n        } else {\n          var targetNode = this.getNodeById(targetId);\n\n          if (targetNode != null) {\n            var nodeType = targetNode.type;\n\n            if (nodeType === 'node') {\n              // the target is an application\n\n              if (nodeId === targetId) {\n                result = true;\n              }\n            } else if (nodeType === 'group') {\n              // the target is a group\n\n              if (nodeId === targetId) {\n                result = true;\n              }\n\n              if (this.isNodeDescendentOfGroup(node, targetNode)) {\n                result = true;\n              }\n            }\n          }\n        }\n\n        // remember the result so we can look it up in the future\n        this.setIsNodeAffectedByConstraintResult(node.id, constraint.id, result);\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if a node id comes after another node id in the project\n   * @param nodeIdBefore the node id before\n   * @param nodeIdAfter the node id after\n   */\n  isNodeIdAfter(nodeIdBefore, nodeIdAfter) {\n    var result = false;\n\n    if (nodeIdBefore != null && nodeIdAfter != null) {\n\n      if (this.isApplicationNode(nodeIdBefore)) {\n        // the node id before is a step\n\n        // get all the paths from the beforeNodeId to the end of the project\n        var pathsToEnd = this.getAllPaths([], nodeIdBefore, true);\n\n        if (pathsToEnd != null) {\n\n          // loop through all the paths\n          for (var pathToEnd of pathsToEnd) {\n\n            if (pathToEnd != null) {\n\n              /*\n               * remove the first node id and its parent id because\n               * we will check the remaining node ids in the array\n               * for the nodeIdAfter\n               */\n\n              // get the index of the node id before\n              var index = pathToEnd.indexOf(nodeIdBefore);\n\n              if (index != -1) {\n                // remove the node id before\n                pathToEnd.splice(index, 1);\n              }\n\n              // get the parent group of the node id before\n              var parentGroup = this.getParentGroup(nodeIdBefore);\n\n              if (parentGroup != null) {\n                // remove the parent group of the node id before\n                var parentGroupId = parentGroup.id;\n                var parentGroupIndex = pathToEnd.indexOf(parentGroupId);\n                if (parentGroupIndex != -1) {\n                  pathToEnd.splice(parentGroupIndex, 1);\n                }\n              }\n\n              if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                // we have found the nodeIdAfter in the path to the end of the project\n                result = true;\n              }\n            }\n          }\n        }\n      } else {\n        // the node id before is an activity\n\n        // get the group\n        var group = this.getNodeById(nodeIdBefore);\n\n        if (group != null) {\n\n          // get the transitions from the group\n          var transitions = this.getTransitionsByFromNodeId(nodeIdBefore);\n\n          if (transitions != null) {\n\n            // loop through all the transitions\n            for (var transition of transitions) {\n              if (transition != null) {\n                var toNodeId = transition.to;\n\n                // get the paths between to toNodeId and the end of the project\n                var pathsToEnd = this.getAllPaths([], toNodeId, true);\n\n                // loop through all the paths\n                for (var pathToEnd of pathsToEnd) {\n                  if (pathToEnd != null) {\n                    if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                      // we have found the nodeIdAfter in the path to the end of the project\n                      result = true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getNavigationMode() {\n    var navigationMode = null;\n    var project = this.project;\n    if (project != null) {\n      navigationMode = project.navigationMode;\n    }\n    return navigationMode;\n  };\n\n  getTransitions() {\n    var transitions = null;\n    var project = this.project;\n    if (project != null) {\n      transitions = project.transitions;\n    }\n    return transitions;\n  };\n\n  /**\n   * Returns all possible transition criteria for the specified node and component.\n   */\n  getPossibleTransitionCriteria(nodeId, componentId) {\n    let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      let componentType = component.type;\n      let componentService = this.$injector.get(componentType + 'Service');\n      if (componentService.getPossibleTransitionCriteria) {\n        return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n      } else {\n        return [];\n      }\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Get the transition logic for a node\n   * @param fromNodeId the from node id\n   * @returns the transition logic object\n   */\n  getTransitionLogicByFromNodeId(fromNodeId) {\n    var transitionLogic = null;\n\n    if (fromNodeId != null) {\n\n      // get the node\n      var node = this.getNodeById(fromNodeId);\n\n      if (node != null) {\n        // get the transition logic\n        transitionLogic = node.transitionLogic;\n      }\n    }\n\n    return transitionLogic;\n  };\n\n  /**\n   * Get the transitions for a node\n   * @param fromNodeId the node to get transitions from\n   * @returns an array of transitions\n   */\n  getTransitionsByFromNodeId(fromNodeId) {\n\n    var transitions = null;\n\n    if (fromNodeId != null) {\n      // get the transition logic\n      var transitionLogic = this.getTransitionLogicByFromNodeId(fromNodeId);\n\n      if (transitionLogic != null) {\n        // get the transitions\n        transitions = transitionLogic.transitions;\n      }\n    }\n\n    return transitions;\n  }\n\n  /**\n   * Get nodes that have a transition to the given node id\n   * @param toNodeId the node id\n   * @returns an array of node objects that transition to the\n   * given node id\n   */\n  getNodesByToNodeId(toNodeId) {\n    var nodesByToNodeId = [];\n\n    if (toNodeId != null) {\n\n      // get all the nodes\n      var nodes = this.project.nodes;\n\n      // loop through all the nodes\n      for (var node of nodes) {\n        var transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n          var transitions = transitionLogic.transitions;\n\n          if (transitions != null) {\n\n            // loop through all the transitions for the node\n            for (var transition of transitions) {\n              if (transition != null) {\n                if (toNodeId === transition.to) {\n                  // this node has a transition to the node id\n                  nodesByToNodeId.push(node);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return nodesByToNodeId;\n  };\n\n  /**\n   * Get node ids of all the nodes that have a to transition to the given node id\n   * @param toNodeId\n   * @returns all the node ids that have a transition to the given node id\n   */\n  getNodeIdsByToNodeId(toNodeId) {\n    var nodeIds = [];\n\n    // get all the nodes that transition to the toNodeId\n    var nodes = this.getNodesByToNodeId(toNodeId);\n\n    if (nodes != null) {\n\n      // loop through all the nodes to get the node ids\n      for (var node of nodes) {\n        if (node != null) {\n          nodeIds.push(node.id);\n        }\n      }\n    }\n\n    return nodeIds;\n  }\n\n  /**\n   * Get the group nodes that point to a given node id\n   * @param toNodeId\n   */\n  getGroupNodesByToNodeId(toNodeId) {\n    var groupsThatPointToNodeId = [];\n\n    if (toNodeId != null) {\n      var groups = this.getGroups();\n\n      for (var group of groups) {\n        if (group != null) {\n          if (this.hasTransitionTo(group, toNodeId)) {\n            groupsThatPointToNodeId.push(group);\n          }\n        }\n      }\n    }\n\n    return groupsThatPointToNodeId;\n  }\n\n  /**\n   * Check if a node has a transition to a node id\n   * @param node check if this node has a transition to the node id\n   * @param toNodeId we will look for a transition to this node id\n   * @returns whether the node has a transition to the node id\n   */\n  hasTransitionTo(node, toNodeId) {\n    var result = false;\n\n    if (node != null && toNodeId != null) {\n      var transitionLogic = node.transitionLogic;\n\n      if (transitionLogic != null) {\n        var transitions = transitionLogic.transitions;\n\n        if (transitions != null) {\n          for (var transition of transitions) {\n            if (toNodeId === transition.to) {\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the transitions that traverse from the fromNodeId and to the toNodeId\n   * @param fromNodeId the from node id\n   * @param toNodeId the to node id\n   * @returns an array of transitions that traverse from the fromNodeId and\n   * to the toNodeId\n   */\n  getTransitionsByFromAndToNodeId(fromNodeId, toNodeId) {\n    var transitionsResults = [];\n\n    if (fromNodeId != null && toNodeId != null) {\n      var node = this.getNodeById(fromNodeId);\n\n      if (node != null) {\n        var transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n          var transitions = transitionLogic.transitions;\n\n          if (transitions != null) {\n\n            for (var transition of transitions) {\n              if (transition != null) {\n                var to = transition.to;\n\n                if (toNodeId === to) {\n                  transitionsResults.push(transition);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return transitionsResults;\n  };\n\n  /**\n   * Retrieves the project JSON from Config.projectURL and returns it.\n   * If Config.projectURL is undefined, returns null.\n   */\n  retrieveProject() {\n    var projectURL = this.ConfigService.getConfigParam('projectURL');\n\n    if (projectURL == null) {\n      return null;\n    } else {\n      /*\n       * add a unique GET parameter value so that it always retrieves the\n       * latest version of the project file from the server and never\n       * retrieves the project from cache.\n       */\n      projectURL += '?noCache=' + (new Date()).getTime();\n    }\n\n    return this.$http.get(projectURL).then((result) => {\n      var projectJSON = result.data;\n      this.setProject(projectJSON);\n      return projectJSON;\n    });\n  };\n\n  /**\n   * Retrieve the project JSON\n   * @param projectId retrieve the project JSON with this id\n   * @return a promise to return the project JSON\n   */\n  retrieveProjectById(projectId) {\n\n    if (projectId != null) {\n\n      // get the config URL for the project\n      var configURL = window.configURL + '/' + projectId;\n\n      // get the config for the project\n      return this.$http.get(configURL).then((result) => {\n        var configJSON = result.data;\n\n        if (configJSON != null) {\n\n          // get the project URL and preview project URL\n          var projectURL = configJSON.projectURL;\n          var previewProjectURL = configJSON.previewProjectURL;\n\n          if (projectURL != null) {\n\n            // get the project JSON\n            return this.$http.get(projectURL).then((result) => {\n              var projectJSON = result.data;\n\n              /*\n               * set the preview project URL into the project JSON\n               * so that we easily obtain the preview project URL\n               * later\n               */\n              projectJSON.previewProjectURL = previewProjectURL;\n\n              return projectJSON;\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Saves the project to Config.saveProjectURL and returns commit history promise.\n   * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n   */\n  saveProject(commitMessage = \"\") {\n    this.$rootScope.$broadcast('savingProject');\n    // perform any cleanup before saving the project\n    this.cleanupBeforeSave();\n\n    var projectId = this.ConfigService.getProjectId();\n    var saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n    if (projectId == null || saveProjectURL == null) {\n      return null;\n    }\n\n    // Get the project from this service\n    var projectJSONString = angular.toJson(this.project, 4);\n\n    var httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = saveProjectURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    var params = {};\n    params.projectId = projectId;\n    params.commitMessage = commitMessage;\n    params.projectJSONString = projectJSONString;\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      var commitHistory = result.data;\n      this.$rootScope.$broadcast('projectSaved');\n      return commitHistory;\n    });\n  };\n\n  /**\n   * Notifies others that the specified project is being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectBegin(projectId = null) {\n    if (projectId == null) {\n      if (this.project != null) {\n        projectId = this.project.id;\n      } else {\n        return;\n      }\n    }\n    let notifyProjectBeginURL = this.ConfigService.getConfigParam('notifyProjectBeginURL') + projectId;\n    let httpParams = {\n      method: \"POST\",\n      url: notifyProjectBeginURL\n    };\n\n    return this.$http(httpParams).then((result) => {\n      let otherAuthors = result.data;\n      return otherAuthors;\n    });\n  }\n\n  /**\n   * Notifies others that the specified project is being authored\n   * @param projectId id of the project\n   */\n  notifyAuthorProjectEnd(projectId = null) {\n    return this.$q((resolve, reject) => {\n      if (projectId == null) {\n        if (this.project != null) {\n          projectId = this.ConfigService.getProjectId();\n        } else {\n          resolve();\n        }\n      }\n      let notifyProjectEndURL = this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId;\n      let httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = notifyProjectEndURL;\n\n      this.$http(httpParams).then(() => {\n        resolve();\n      })\n    });\n  }\n\n  /**\n   * Perform any necessary cleanup before we save the project.\n   * For example we need to remove the checked field in the inactive node\n   * objects.\n   */\n  cleanupBeforeSave() {\n    let activeNodes = this.getActiveNodes();\n    for (let activeNode of activeNodes) {\n      if (activeNode != null) {\n        delete activeNode.checked;\n      }\n    }\n\n    let inactiveNodes = this.getInactiveNodes();\n    for (let inactiveNode of inactiveNodes) {\n      if (inactiveNode != null) {\n        delete inactiveNode.checked;\n      }\n    }\n  }\n\n  /**\n   * Copies the project with the specified id and returns a new project id if the project is\n   * successfully copied\n   */\n  copyProject(projectId) {\n    var copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n\n    if (copyProjectURL == null) {\n      return null;\n    }\n\n    var httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = copyProjectURL + \"/\" + projectId;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    var params = {};\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      var projectId = result.data;\n      return projectId;\n    });\n  };\n\n  /**\n   * Registers a new project having the projectJSON content with the server.\n   * Returns a new project Id if the project is successfully registered.\n   * Returns null if Config.registerNewProjectURL is undefined.\n   * Throws an error if projectJSONString is invalid JSON string\n   */\n  registerNewProject(projectJSONString, commitMessage) {\n    var registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n\n    if (registerNewProjectURL == null) {\n      return null;\n    }\n\n    try {\n      // Try parsing the JSON string and throw an error if there's an issue parsing it.\n      JSON.parse(projectJSONString);\n    } catch (e) {\n      throw new Error(\"Invalid projectJSONString.\");\n    }\n\n    if (!commitMessage) {\n      commitMessage = \"\";\n    }\n\n    var httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = registerNewProjectURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    var params = {};\n    params.commitMessage = commitMessage;\n    params.projectJSONString = projectJSONString;\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      var projectId = result.data;\n      return projectId;\n    });\n  };\n\n  /**\n   * Retrieves and returns the project's commit history.\n   */\n  getCommitHistory() {\n    var commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n\n    return this.$http({\n      url: commitProjectURL,\n      method: 'GET'\n    }).then((result) => {\n      return result.data;\n    });\n  };\n\n  /**\n   * Returns the theme path for the current project\n   */\n  getThemePath() {\n    let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n    let project = this.project;\n    if (project && project.theme) {\n      // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n      return wiseBaseURL + '/wise5/themes/' + project.theme;\n    } else {\n      // TODO: get default theme name from ConfigService\n      return wiseBaseURL + '/wise5/themes/default';\n    }\n  };\n\n  /**\n   * Returns the theme settings for the current project\n   */\n  getThemeSettings() {\n    let themeSettings = {};\n    let project = this.project;\n\n    if (project && project.themeSettings) {\n      if (project.theme) {\n        // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n        themeSettings = project.themeSettings[project.theme];\n      } else {\n        // TODO: get default theme name from ConfigService\n        themeSettings = project.themeSettings[\"default\"];\n      }\n    }\n\n    return themeSettings ? themeSettings : {};\n  };\n\n  /**\n   * Flatten the project to obtain a list of node ids\n   * @param recalculate Whether to force recalculating the flattened node ids.\n   * @return An array of the flattened node ids in the project.\n   */\n  getFlattenedProjectAsNodeIds(recalculate) {\n    if (!recalculate && this.flattenedProjectAsNodeIds != null) {\n      // use the previously calculated flattened node ids\n      return this.flattenedProjectAsNodeIds;\n    }\n\n    var nodeIds = [];\n\n    // get the start node id\n    var startNodeId = this.getStartNodeId();\n\n    /*\n     * an array to keep track of the node ids in the path that\n     * we are currently on as we traverse the nodes in the project\n     * depth first\n     */\n    var pathsSoFar = [];\n\n    // get all the possible paths through the project\n    var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n    // consolidate all the paths to create a single list of node ids\n    nodeIds = this.consolidatePaths(allPaths);\n\n    /*\n     * Remember the flattened node ids so that we don't have to calculate\n     * it again.\n     */\n    this.flattenedProjectAsNodeIds = nodeIds;\n\n    return nodeIds;\n  };\n\n  /**\n   * Get all the possible paths through the project. This function\n   * recursively calls itself to traverse the project depth first.\n   * @param pathSoFar the node ids in the path so far. the node ids\n   * in this array are referenced to make sure we don't loop back\n   * on the path.\n   * @param nodeId the node id we want to get the paths from\n   * @param includeGroups whether to include the group node ids in the paths\n   * @return an array of paths. each path is an array of node ids.\n   */\n  getAllPaths(pathSoFar, nodeId, includeGroups) {\n    var allPaths = [];\n\n    if (nodeId != null) {\n      if (this.isApplicationNode(nodeId)) {\n        // the node is an application node\n\n        var path = [];\n\n        // get all the transitions from this node\n        var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions != null) {\n\n          if (includeGroups) {\n            // get the parent group\n            var parentGroup = this.getParentGroup(nodeId);\n            if (parentGroup != null) {\n\n              // get the parent group id\n              var parentGroupId = parentGroup.id;\n\n              if (parentGroupId != null && pathSoFar.indexOf(parentGroupId) == -1) {\n                // add the parent group id\n                pathSoFar.push(parentGroup.id);\n              }\n            }\n          }\n\n          /*\n           * add the node id to the path so far so we can later check\n           * which nodes are already in the path to prevent looping\n           * back in the path\n           */\n          pathSoFar.push(nodeId);\n\n          if (transitions.length === 0) {\n            /*\n             * there are no transitions from the node id so we will\n             * look for a transition in the parent group\n             */\n\n            var addedCurrentNodeId = false;\n\n            var parentGroupId = this.getParentGroupId(nodeId);\n            var parentGroupTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n            if (parentGroupTransitions != null) {\n              for (var parentGroupTransition of parentGroupTransitions) {\n                if (parentGroupTransition != null) {\n\n                  var toNodeId = parentGroupTransition.to;\n\n                  if (pathSoFar.indexOf(toNodeId) == -1) {\n                    /*\n                     * recursively get the paths by getting all\n                     * the paths for the to node\n                     */\n                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                    for (var tempPath of allPathsFromToNode) {\n\n                      // prepend the current node id to the path\n                      tempPath.unshift(nodeId);\n\n                      // add the path to our collection of paths\n                      allPaths.push(tempPath);\n\n                      addedCurrentNodeId = true;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (!addedCurrentNodeId) {\n              /*\n               * if the parent group doesn't have any transitions we will\n               * need to add the current node id to the path\n               */\n\n              // add the node id to the path\n              path.push(nodeId);\n\n              // add the path to the all paths array\n              allPaths.push(path);\n            }\n          } else {\n            // there are transitions from this node id\n\n            // loop through all the transitions from this node id\n            for (var transition of transitions) {\n              var transitionResult = [];\n\n              if (transition != null) {\n                // get the to node id\n                var toNodeId = transition.to;\n\n                if (toNodeId != null && pathSoFar.indexOf(toNodeId) == -1) {\n                  // we have not found the to node in the path yet so we can traverse it\n\n                  /*\n                   * recursively get the paths by getting all\n                   * the paths from the to node\n                   */\n                  var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                  if (allPathsFromToNode != null) {\n                    // loop through all the paths from the to node\n                    for (var tempPath of allPathsFromToNode) {\n\n                      if (includeGroups) {\n                        // we need to add the group id to the path\n\n                        if (tempPath.length > 0) {\n\n                          // get the first node id in the path\n                          var firstNodeId = tempPath[0];\n\n                          // get the parent id of the first node\n                          var firstParentGroupId = this.getParentGroupId(firstNodeId);\n\n                          // get the parent id of the current node\n                          var parentGroupId = this.getParentGroupId(nodeId);\n\n                          if (parentGroupId != firstParentGroupId) {\n                            /*\n                             * the parent ids are different which means this is a boundary\n                             * between two groups. for example if the project looked like\n                             * group1>node1>node2>group2>node3>node4\n                             * and the current node was node2 then the first node in the\n                             * path would be node3 which means we would need to place\n                             * group2 on the path before node3\n                             */\n                            tempPath.unshift(firstParentGroupId);\n                          }\n                        }\n                      }\n\n                      // prepend the current node id to the path\n                      tempPath.unshift(nodeId);\n\n                      // add the path to our collection of paths\n                      allPaths.push(tempPath);\n                    }\n                  }\n                } else {\n                  /*\n                   * the node is already in the path so far which means\n                   * the transition is looping back to a previous node.\n                   * we do not want to take this transition because\n                   * it will lead to an infinite loop. we will just\n                   * add the current node id to the path and not take\n                   * the transition which essentially ends the path.\n                   */\n                  // add the node id to the path\n                  path.push(nodeId);\n\n                  // add the path to the all paths array\n                  allPaths.push(path);\n                }\n              }\n            }\n          }\n\n          if (pathSoFar.length > 0) {\n            // get the last node id\n            var lastNodeId = pathSoFar[pathSoFar.length - 1];\n\n            // check if the last node id is a group id\n            if (this.isGroupNode(lastNodeId)) {\n              /*\n               * the last node id is a group id so we will remove it\n               * since we are moving back up the path as we traverse\n               * the nodes depth first\n               */\n              pathSoFar.pop();\n            }\n          }\n\n          /*\n           * remove the latest node id (this will be a step node id)\n           * since we are moving back up the path as we traverse the\n           * nodes depth first\n           */\n          pathSoFar.pop();\n\n          if (includeGroups) {\n            if (pathSoFar.length == 1) {\n\n              /*\n               * we are including groups and we have traversed\n               * back up to the start node id for the project.\n               * the only node id left in pathSoFar is now the\n               * parent group of the start node id. we will\n               * now add this parent group of the start node id\n               * to all of the paths\n               */\n\n              // loop through all the paths\n              for (var path of allPaths) {\n\n                if (path != null) {\n                  /*\n                   * prepend the parent group of the start node id\n                   * to the path\n                   */\n                  path.unshift(pathSoFar[0]);\n                }\n              }\n\n              /*\n               * remove the parent group of the start node id from\n               * pathSoFar which leaves us with an empty pathSoFar\n               * which means we are completely done with\n               * calculating all the paths\n               */\n              pathSoFar.pop();\n            }\n          }\n        }\n      } else if (this.isGroupNode(nodeId)) {\n        // the node is a group node\n\n        /*\n         * add the node id to the path so far so we can later check\n         * which nodes are already in the path to prevent looping\n         * back in the path\n         */\n        pathSoFar.push(nodeId);\n\n        // get the group node\n        var groupNode = this.getNodeById(nodeId);\n\n        if (groupNode != null) {\n          var startId = groupNode.startId;\n\n          if (startId == null || startId == \"\") {\n            // there is no start id so we will take the transition from the group\n            // TODO? there is no start id so we will loop through all the child nodes\n\n            // get the transitions from the group\n            var transitions = this.getTransitionsByFromNodeId(groupNode.id);\n\n            if (transitions != null && transitions.length > 0) {\n\n              // loop through all the transitions from the group\n              for (var transition of transitions) {\n                if (transition != null) {\n                  var toNodeId = transition.to;\n\n                  // get the paths from the to node to the end of the project\n                  var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                  if (allPathsFromToNode != null) {\n                    // loop through all the paths from the to node\n                    for (var tempPath of allPathsFromToNode) {\n                      // prepend the current node id to the path\n                      tempPath.unshift(nodeId);\n\n                      // add the path to our collection of paths\n                      allPaths.push(tempPath);\n                    }\n                  }\n                }\n              }\n            } else {\n              /*\n               * this activity does not have any transitions so\n               * we have reached the end of this path\n               */\n\n              var tempPath = [];\n\n              // prepend the current node id to the path\n              tempPath.unshift(nodeId);\n\n              // add the path to our collection of paths\n              allPaths.push(tempPath);\n            }\n          } else {\n            // there is a start id so we will traverse it\n\n            // get the paths from the start id to the end of the project\n            var allPathsFromToNode = this.getAllPaths(pathSoFar, startId, includeGroups);\n\n            if (allPathsFromToNode != null) {\n              // loop through all the paths from the to node\n              for (var tempPath of allPathsFromToNode) {\n\n                // prepend the current node id to the path\n                tempPath.unshift(nodeId);\n\n                // add the path to our collection of paths\n                allPaths.push(tempPath);\n              }\n            }\n          }\n        }\n\n        /*\n         * remove the latest node id since we are moving back\n         * up the path as we traverse the nodes depth first\n         */\n        pathSoFar.pop();\n      }\n    }\n\n    return allPaths;\n  };\n\n  /**\n   * Consolidate all the paths into a linear list of node ids\n   * @param paths an array of paths. each path is an array of node ids.\n   * @return an array of node ids that have been properly ordered\n   */\n  consolidatePaths(paths) {\n    var consolidatedPath = [];\n\n    if (paths != null) {\n\n      /*\n       * continue until all the paths are empty. as we consolidate\n       * node ids, we will remove them from the paths. once all the\n       * paths are empty we will be done consolidating the paths.\n       */\n      while(!this.arePathsEmpty(paths)) {\n\n        // start with the first path\n        var currentPath = this.getNonEmptyPathIndex(paths);\n\n        // get the first node id in the current path\n        var nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n\n        if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n          // the first node ids in all the paths are the same\n\n          // remove the node id from all the paths\n          this.removeNodeIdFromPaths(nodeId, paths);\n\n          // add the node id to our consolidated path\n          consolidatedPath.push(nodeId);\n        } else {\n          // not all the top node ids are the same which means we have branched\n\n          // get all the paths that contain the node id\n          var pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n          if (pathsThatContainNodeId != null) {\n            if (pathsThatContainNodeId.length === 1) {\n              // only the current path we are on has the node id\n\n              // remove the node id from the path\n              this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n              // add the node id to our consolidated path\n              consolidatedPath.push(nodeId);\n            } else {\n              // there are multiple paths that have this node id\n\n              // consume all the node ids up to the given node id\n              var consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n              // remove the node id from the paths\n              this.removeNodeIdFromPaths(nodeId, paths);\n\n              // add the node id to the end of the consumed path\n              consumedPath.push(nodeId);\n\n              // add the consumed path to our consolidated path\n              consolidatedPath = consolidatedPath.concat(consumedPath);\n            }\n          }\n        }\n\n      }\n    }\n\n    return consolidatedPath;\n  };\n\n  /**\n   * Consume the node ids in the paths until we get to the given node id\n   * @param paths the paths to consume\n   * @param nodeId the node id to stop consuming at\n   * @return an array of node ids that we have consumed\n   */\n  consumePathsUntilNodeId(paths, nodeId) {\n    var consumedNodeIds = [];\n\n    if (paths != null && nodeId != null) {\n\n      // loop through all the paths\n      for (var p = 0; p < paths.length; p++) {\n\n        // get a path\n        var path = paths[p];\n\n        // check if the path contains the node id to stop consuming at\n        if (path != null && path.indexOf(nodeId) != -1) {\n          /*\n           * the path does contain the node id to stop consuming at\n           * so we will consume the node ids in this path until\n           * we get to the given node id to stop consuming at\n           */\n\n          // loop through the node ids in the path\n          for (var x = 0; x < path.length; x++) {\n\n            // get a node id\n            var tempNodeId = path[x];\n\n            if (nodeId === tempNodeId) {\n              /*\n               * the node id is the same as the one we need to\n               * stop consuming at so we will stop looking\n               * at this path\n               */\n              break;\n            } else {\n              /*\n               * the node id is not the one that we need to stop consuming at\n               * so we will consume it\n               */\n\n              // get all the paths that contain the node id\n              var pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n              if (pathsThatContainNodeId.length === 1) {\n                // there is only one path with this node id\n\n                // remove the node id from the path\n                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                // move the counter back one since we have just removed a node id\n                x--;\n\n                // add the node id to the consumed node ids array\n                consumedNodeIds.push(tempNodeId);\n              } else {\n                // there are multiple paths with this node id\n\n                // tempNodeId must come before nodeId\n\n                var pathsToConsume = [];\n\n                // loop through all the paths that contain the node id\n                for (var pathThatContainsNodeId of pathsThatContainNodeId) {\n\n                  // get the index of the node id we want to remove\n                  var tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                  // get the index of the node id we want to stop consuming at\n                  var nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                  /*\n                   * check if the node id we want to remove comes before\n                   * the node id we want to stop consuming at. we need to\n                   * do this to prevent an infinite loop. an example of\n                   * when this can happen is if there are two paths\n                   *\n                   * path1 = 1, 2, 3, 4, 5\n                   * path2 = 1, 2, 4, 3, 5\n                   *\n                   * as we consume path1 we will need to consume 3. in order to\n                   * consume 3, we must consume consume up to 3 in path2.\n                   * in order to consume up to 3 in path2 we must consume 4.\n                   * in order to consume 4, we must consume everything before\n                   * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                   * this means we need to consume 3 which brings us back up\n                   * to the top of this paragraph creating an infinite loop.\n                   *\n                   * this check below will prevent infinite loops by only\n                   * adding paths that have the tempNodeId come before the\n                   * nodeId to stop consuming at.\n                   */\n                  if (tempNodeIdIndex < nodeIdIndex) {\n                    pathsToConsume.push(pathThatContainsNodeId);\n                  }\n                }\n\n                /*\n                 * take the paths that contain the given node id and consume\n                 * the paths until the given node id\n                 */\n                var tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                // remove the node id from the paths that contain it\n                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                // add the temp consumed node ids to our consumed node ids array\n                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                // move the counter back one since we have just removed a node id\n                x--;\n\n                // add the node id to the consumed node ids array\n                consumedNodeIds.push(tempNodeId);\n              }\n            }\n          }\n        }\n      }\n\n    }\n\n    return consumedNodeIds;\n  };\n\n  /**\n   * Get the path at the given index and get the first node id in\n   * the path\n   * @param paths an array of paths. each path is an array of node ids\n   * @param index the index of the path we want\n   * @return the first node in the given path\n   */\n  getFirstNodeIdInPathAtIndex(paths, index) {\n    var nodeId = null;\n\n    if (paths != null && index != null) {\n      // get the path at the given index\n      var path = paths[index];\n\n      if (path != null && path.length > 0) {\n        // get the first node id in the path\n        nodeId = path[0];\n      }\n    }\n\n    return nodeId;\n  };\n\n  /**\n   * Remove the node ifrom the paths\n   * @param nodeId the node id to remove\n   * @param paths an array of paths. each path is an array of node ids\n   */\n  removeNodeIdFromPaths(nodeId, paths) {\n\n    if (nodeId != null && paths != null) {\n      // loop through all the paths\n      for (var path of paths) {\n\n        // loop through all the node ids in the path\n        for (var x = 0; x < path.length; x++) {\n          // get a node id\n          var tempNodeId = path[x];\n\n          /*\n           * check if the node id matches the one we are looking\n           * for\n           */\n          if (nodeId === tempNodeId) {\n            /*\n             * we have found the node id we are looking for so\n             * we will remove it from the path\n             */\n            path.splice(x, 1);\n\n            /*\n             * move the counter back since we just removed a\n             * node id. we will continue searching this path\n             * for the node id in case the path contains it\n             * multiple times.\n             */\n            x--;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Remove the node id from the path\n   * @param nodeId the node id to remove\n   * @param paths an array of paths. each path is an array of node ids\n   * @param pathIndex the path to remove from\n   */\n  removeNodeIdFromPath(nodeId, paths, pathIndex) {\n\n    if (nodeId != null && paths != null && pathIndex != null) {\n\n      // get the path at the given index\n      var path = paths[pathIndex];\n\n      if (path != null) {\n\n        // loop through all the node ids in the path\n        for (var x = 0; x < path.length; x++) {\n          // get a ndoe id\n          var tempNodeId = path[x];\n\n          /*\n           * check if the node id matches the one we are looking\n           * for\n           */\n          if (nodeId === tempNodeId) {\n            /*\n             * we have found the node id we are looking for so\n             * we will remove it from the path\n             */\n            path.splice(x, 1);\n\n            /*\n             * move the counter back since we just removed a\n             * node id. we will continue searching this path\n             * for the node id in case the path contains it\n             * multiple times.\n             */\n            x--;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Check if the first node ids in the paths are the same\n   * @param paths an array of paths. each path is an array of node ids\n   * @return whether all the paths have the same first node id\n   */\n  areFirstNodeIdsInPathsTheSame(paths) {\n    var result = true;\n\n    var nodeId = null;\n\n    if (paths != null) {\n\n      // loop through all the paths\n      for (var path of paths) {\n\n        // get the first node id in the path\n        var tempNodeId = path[0];\n\n        if (nodeId == null) {\n          /*\n           * this is the first path we have looked at so we will\n           * remember the node id\n           */\n          nodeId = tempNodeId;\n        } else if (nodeId != tempNodeId) {\n          /*\n           * the node id does not match the first node id from a\n           * previous path so the paths do not all have the same\n           * first node id\n           */\n          result = false;\n          break;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if all the paths are empty\n   * @param paths an array of paths. each path is an array of node ids\n   * @return whether all the paths are empty\n   */\n  arePathsEmpty(paths) {\n    var result = true;\n\n    if (paths != null) {\n\n      // loop through all the paths\n      for (var path of paths) {\n\n        if (path != null) {\n\n          // get the length of the path\n          if (path.length !== 0) {\n            // the path is not empty\n            result = false;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the paths that contain the node id\n   * @param nodeId the node id we are looking for\n   * @param paths an array of paths. each path is an array of node ids\n   * @return an array of paths that contain the given node id\n   */\n  getPathsThatContainNodeId(nodeId, paths) {\n    var pathsThatContainNodeId = [];\n\n    if (nodeId != null && paths != null) {\n      // loop through all the paths\n      for (var path of paths) {\n\n        // check if the path contains the node id\n        if (path.indexOf(nodeId) != -1) {\n          /*\n           * add the path to the array of paths that contain\n           * the node id\n           */\n          pathsThatContainNodeId.push(path);\n        }\n      }\n    }\n\n    return pathsThatContainNodeId;\n  };\n\n  /**\n   * Get a non empty path index. It will loop through the paths and\n   * return the index of the first non empty path.\n   * @param paths an array of paths. each path is an array of node ids\n   * @return the index of the path that is not empty\n   */\n  getNonEmptyPathIndex(paths) {\n    var index = null;\n\n    if (paths != null) {\n      // loop through all the paths\n      for (var p = 0; p < paths.length; p++) {\n        // get a path\n        var path = paths[p];\n\n        // check the length of the path\n        if (path.length !== 0) {\n          // the path is not empty so we will return this index\n          index = p;\n          break;\n        }\n      }\n    }\n\n    return index;\n  };\n\n  /**\n   * Get the branches in the project\n   */\n  getBranches() {\n\n    // get the start node id\n    var startNodeId = this.getStartNodeId();\n\n    /*\n     * an array to keep track of the node ids in the path that\n     * we are currently on as we traverse the nodes in the project\n     * depth first\n     */\n    var pathsSoFar = [];\n\n    // get all the paths in the project\n    var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n    // find the branches in the project from the paths\n    var branches = this.findBranches(allPaths);\n\n    return branches;\n  };\n\n  /**\n   * Find the branches in the project\n   * @param paths all the possible paths through the project\n   * @return an array of branch objects. each branch object contains\n   * the branch start point, the branch paths, and the branch\n   * end point\n   */\n  findBranches(paths) {\n    var branches = [];\n\n    var previousNodeId = null;\n\n    /*\n     * continue until all the paths are empty. we will remove\n     * node ids from the paths as we traverse the paths to find\n     * the branches\n     */\n    while (!this.arePathsEmpty(paths)) {\n\n      // get the first node id in the first path\n      var nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n      if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n        // the first node ids in all the paths are the same\n\n        // remove the node id from all the paths\n        this.removeNodeIdFromPaths(nodeId, paths);\n\n        // remember this node id for the next iteration of the loop\n        previousNodeId = nodeId;\n      } else {\n        // not all the top node ids are the same which means we have branched\n\n        // create a branch object\n        var branchMetaObject = this.createBranchMetaObject(previousNodeId);\n        branchMetaObject.branchStartPoint = previousNodeId;\n\n        // find the branch end point\n        var nextCommonNodeId = this.findNextCommonNodeId(paths);\n        branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n        // get the branch paths\n        var branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n        branchPaths = this.removeDuplicatePaths(branchPaths);\n        branchMetaObject.branchPaths = branchPaths;\n\n        // add the branch object to our array\n        branches.push(branchMetaObject);\n\n        // trim the paths so that they start at the branch end point\n        this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n        // remember this node id for the next iteration of the loop\n        previousNodeId = nextCommonNodeId;\n      }\n    }\n\n    return branches;\n  };\n\n  /**\n   * Create a branch meta object that will contain the branch start\n   * point, branch paths, and branch end point\n   * @return an object that contains a branch start point, branch paths,\n   * and a branch end point\n   */\n  createBranchMetaObject() {\n    var branchMetaObject = {};\n\n    branchMetaObject.branchStartPoint = null;\n    branchMetaObject.branchPaths = [];\n    branchMetaObject.branchEndPoint = null;\n\n    return branchMetaObject;\n  };\n\n  /**\n   * Find the next common node id in all the paths\n   * @param paths the paths to find the common node id in\n   * @return a node id that is in all the paths or null\n   * if there is no node id that is in all the paths\n   */\n  findNextCommonNodeId(paths) {\n    var nextCommonNodeId = null;\n    var subPaths = [];\n\n    if (paths != null) {\n      if (paths.length > 0) {\n        // get the first path\n        var path = paths[0];\n\n        // loop through all the node ids in the first path\n        for (var tempNodeId of path) {\n\n          // check if the node id is in all the paths\n          if (this.allPathsContainNodeId(paths, tempNodeId)) {\n            /*\n             * the node id is in all the paths so we have found\n             * what we were looking for\n             */\n            nextCommonNodeId = tempNodeId;\n            break;\n          }\n        }\n      }\n    }\n\n    return nextCommonNodeId;\n  };\n\n  /**\n   * Check if all the paths contain the node id\n   * @param paths an array of paths. each path contains an array of node ids\n   * @param nodeId the node id that we will check is in all the paths\n   * @return whether the node id is in all the paths\n   */\n  allPathsContainNodeId(paths, nodeId) {\n    var result = false;\n\n    if (paths != null) {\n\n      // loop through all the paths\n      for (var path of paths) {\n\n        // get the index of the node id in the path\n        var index = path.indexOf(nodeId);\n\n        if (index == -1) {\n          // the node id is not in the path\n          result = false;\n          break;\n        } else {\n          // the node id is in the path\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Trim the paths up to the given node id so that the paths will contain\n   * the given node id and all the node ids after it. This function will\n   * modify the paths.\n   * @param paths the paths to trim\n   * @param nodeId the node id to trim up to\n   */\n  trimPathsUpToNodeId(paths, nodeId) {\n    if (paths != null) {\n      // loop through all the paths\n      for (var path of paths) {\n\n        if (path != null) {\n          // get the index of the node id in the path\n          var index = path.indexOf(nodeId);\n\n          if (index == -1) {\n            /*\n             * the node id is not in the path so we will\n             * trim the path to the end which will make\n             * the path empty\n             */\n            index = path.length;\n          }\n\n          /*\n           * trim the path up to the node id index. this will\n           * modify the path array.\n           */\n          path.splice(0, index);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Extract the paths up to a given node id. This will be used to\n   * obtain branch paths.\n   * @param paths the paths to extract from\n   * @param nodeId the node id to extract up to\n   * @return paths that go up to but do not include the node id\n   */\n  extractPathsUpToNodeId(paths, nodeId) {\n    var extractedPaths = [];\n\n    if (paths != null) {\n      // loop through the paths\n      for (var path of paths) {\n\n        if (path != null) {\n\n          // get the index of the node id in the path\n          var index = path.indexOf(nodeId);\n\n          if (index == -1) {\n            /*\n             * the node id is not in the path so we will\n             * extract up to the end of the path\n             */\n            index = path.length;\n          }\n\n          /*\n           * get the path up to the node id index. this does\n           * not modify the path array.\n           */\n          var extractedPath = path.slice(0, index);\n\n          // add the\n          extractedPaths.push(extractedPath);\n        }\n      }\n    }\n\n    return extractedPaths;\n  };\n\n  /**\n   * Removes duplicate paths\n   * @param paths an array of paths. each path contains an array of node ids\n   * @return an array of unique paths\n   */\n  removeDuplicatePaths(paths) {\n    var uniquePaths = [];\n\n    if (paths != null) {\n      // loop through all the paths\n      for (var path of paths) {\n\n        var isPathInUniquePaths = false;\n\n        // loop through all the unique paths so far\n        for (var uniquePath of uniquePaths) {\n          // check if the paths are equal\n          if (this.pathsEqual(path, uniquePath)) {\n            // the paths are equal\n            isPathInUniquePaths = true;\n          }\n        }\n\n        if (!isPathInUniquePaths) {\n          // the path is not equal to any paths in the unique\n          // paths array so we will add it to the unique paths array\n          uniquePaths.push(path);\n        }\n      }\n    }\n\n    return uniquePaths;\n  };\n\n  /**\n   * Check if two paths are equal\n   * @param path1 an array of node ids\n   * @param path2 an array of node ids\n   * @return whether the two paths contain the same node ids\n   * in the same order\n   */\n  pathsEqual(path1, path2) {\n    var result = false;\n\n    if (path1 != null && path2 != null) {\n\n      // check if the paths are the same length\n      if (path1.length === path2.length) {\n        result = true;\n\n        // loop through each element of the first path\n        for (var x = 0; x < path1.length; x++) {\n          // get the node id from the first path\n          var path1NodeId = path1[x];\n\n          // get the node id from the second path\n          var path2NodeId = path2[x];\n\n          // check if the node ids are the same\n          if (path1NodeId !== path2NodeId) {\n            // the node ids are not the same to the paths are not equal\n            result = false;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if a node id is in any branch\n   * @param branches an array of branch objects\n   * @param nodeId the node id to check\n   * @return whether the node id is in any branch\n   */\n  isNodeIdInABranch(branches, nodeId) {\n\n    if (branches != null && nodeId != null) {\n\n      // loop through all the branch objects\n      for (var branch of branches) {\n\n        if (branch != null) {\n\n          // get the branch paths for this branch object\n          var branchPaths = branch.branchPaths;\n\n          if (branchPaths != null) {\n\n            // loop through all the branch paths\n            for (var branchPath of branchPaths) {\n\n              if (branchPath != null) {\n\n                // check if the node id is in the branch path\n                var index = branchPath.indexOf(nodeId);\n\n                if (index != -1) {\n                  // the node id is in this branch path\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Get the branch paths that a node id is in\n   * @param branches an array of branch objects\n   * @param nodeId the node id to check\n   * @return an array of the branch paths that the node id is in\n   */\n  getBranchPathsByNodeId(branches, nodeId) {\n    var branchPathsIn = [];\n\n    if (branches != null && nodeId != null) {\n\n      // loop through all the branches\n      for (var branch of branches) {\n\n        if (branch != null) {\n\n          // get the branch paths\n          var branchPaths = branch.branchPaths;\n\n          if (branchPaths != null) {\n\n            // loop through all the branch paths\n            for (var branchPath of branchPaths) {\n\n              if (branchPath != null) {\n\n                // get the index of the node id in the branch path\n                var index = branchPath.indexOf(nodeId);\n\n                if (index != -1) {\n                  /*\n                   * the node is in this branch path so we will\n                   * add the branch path to our array\n                   */\n                  branchPathsIn.push(branchPath);\n\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return branchPathsIn;\n  }\n\n  /**\n   * Get the component by node id and component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n   */\n  getComponentByNodeIdAndComponentId(nodeId, componentId) {\n    var component = null;\n\n    if (nodeId != null && componentId != null) {\n\n      var components = this.getComponentsByNodeId(nodeId);\n\n      // loop through all the components\n      for (var tempComponent of components) {\n        if (tempComponent != null) {\n          var tempComponentId = tempComponent.id;\n\n          if (componentId === tempComponentId) {\n            // we have found the component we want\n            component = tempComponent;\n            break;\n          }\n        }\n      }\n\n    }\n\n    return component;\n  };\n\n  /**\n   * Returns the position of the component in the node by node id and component id, 0-indexed.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns the component's position or -1 if nodeId or componentId are null or doesn't exist in the project.\n   */\n  getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n    var componentPosition = -1;\n\n    if (nodeId != null && componentId != null) {\n\n      var components = this.getComponentsByNodeId(nodeId);\n\n      // loop through all the components\n      for (var c = 0; c < components.length; c++) {\n        var tempComponent = components[c];\n\n        if (tempComponent != null) {\n          var tempComponentId = tempComponent.id;\n\n          if (componentId === tempComponentId) {\n            // we have found the component we want\n            componentPosition = c;\n            break;\n          }\n        }\n      }\n    }\n\n    return componentPosition;\n  };\n\n  /**\n   * Get the components in a node\n   * @param nodeId the node id\n   * @returns an array of components or empty array if nodeId is null or doesn't exist in the project.\n   * if the node exists but doesn't have any components, returns an empty array.\n   */\n  getComponentsByNodeId(nodeId) {\n    var components = [];\n\n    if (nodeId != null) {\n\n      // get the node\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n\n        // get the components\n        if (node.components != null) {\n          components = node.components;\n        }\n      }\n    }\n\n    return components;\n  };\n\n  getNodeContentByNodeId(nodeId) {\n    var nodeContent = null;\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        nodeContent = node;\n      }\n    }\n\n    return nodeContent;\n  };\n\n  /**\n   * Replace a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param component the new component\n   */\n  replaceComponent(nodeId, componentId, component) {\n\n    if (nodeId != null && componentId != null && component != null) {\n\n      // get all the components for the node\n      var components = this.getComponentsByNodeId(nodeId);\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var c = 0; c < components.length; c++) {\n          var tempComponent = components[c];\n\n          if (tempComponent != null) {\n\n            if (tempComponent.id === componentId) {\n              // the component id matches the one we want so we will replace it\n              components[c] = component;\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Create a new group\n   * @param title the title of the group\n   * @returns the group object\n   */\n  createGroup(title) {\n\n    // get the next available group id\n    var newGroupId = this.getNextAvailableGroupId();\n\n    // create the group object\n    var newGroup = {};\n    newGroup.id = newGroupId;\n    newGroup.type = 'group';\n    newGroup.title = title;\n    newGroup.startId = '';\n    newGroup.ids = [];\n\n    return newGroup;\n  };\n\n  /**\n   * Create a new node\n   * @param title the title of the node\n   * @returns the node object\n   */\n  createNode(title) {\n\n    // get the next available node id\n    var newNodeId = this.getNextAvailableNodeId();\n\n    // create the node object\n    var newNode = {};\n    newNode.id = newNodeId;\n    newNode.title = title;\n    newNode.type = 'node';\n    newNode.constraints = [];\n    newNode.transitionLogic = {};\n    newNode.transitionLogic.transitions = [];\n\n    newNode.showSaveButton = false;\n    newNode.showSubmitButton = false;\n    newNode.components = [];\n\n    return newNode;\n  };\n\n  /**\n   * Create a node inside the group\n   * @param node the new node\n   * @param nodeId the node id of the group to create the node in\n   */\n  createNodeInside(node, nodeId) {\n\n    if (nodeId == 'inactiveNodes') {\n      // add the node to the inactive nodes\n\n      // add the node to the inactive nodes\n      this.addInactiveNode(node);\n\n      // add the node to our mapping of node id to node\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else if (nodeId == 'inactiveGroups') {\n      // add the node to the inactive groups\n      this.addInactiveNode(node);\n\n      // add the node to our mapping of node id to node\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      // add the node to the active nodes\n\n      // add the node to the project\n      this.addNode(node);\n\n      // add the node to our mapping of node id to node\n      this.setIdToNode(node.id, node);\n\n      // create the transitions for the node\n      this.insertNodeInsideInTransitions(node.id, nodeId);\n\n      // add the node to the group\n      this.insertNodeInsideInGroups(node.id, nodeId);\n    }\n  }\n\n  /**\n   * Create a node after the given node id\n   * @param node the new node\n   * @param nodeId the node to add after\n   */\n  createNodeAfter(node, nodeId) {\n\n    if (this.isInactive(nodeId)) {\n      // we are adding the node after a node that is inactive\n\n      // add the node to the inactive nodes\n      this.addInactiveNode(node, nodeId);\n\n      this.setIdToNode(node.id, node);\n      this.setIdToElement(node.id, node);\n    } else {\n      // we are adding the node after a node that is active\n\n      // add the node to the project\n      this.addNode(node);\n\n      // add the node to our mapping of node id to node\n      this.setIdToNode(node.id, node);\n\n      // insert the new node id into the array of children ids\n      this.insertNodeAfterInGroups(node.id, nodeId);\n\n      // create the transition to the node\n      this.insertNodeAfterInTransitions(node, nodeId);\n    }\n\n    if (this.isGroupNode(node.id)) {\n      /*\n       * we are creating a group node so we will update/create the\n       * transitions that traverse from the previous group to this group\n       */\n\n      var oldToGroupIds = [];\n\n      // get the transitions that come out of the previous group\n      var transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n\n      if (transitionsFromGroup != null) {\n\n        /*\n         * loop through all the transitions that come out of the previous group\n         * and get the node ids that the group transitions to\n         */\n        for (var transitionFromGroup of transitionsFromGroup) {\n          if (transitionFromGroup != null) {\n            var toNodeId = transitionFromGroup.to;\n\n            if (toNodeId != null) {\n              oldToGroupIds.push(toNodeId);\n            }\n          }\n        }\n      }\n\n      var fromGroupId = nodeId;\n      var oldToGroupIds = oldToGroupIds;\n      var newToGroupId = node.id;\n\n      /*\n       * make the transitions point to the new group and make the new\n       * group transition to the old group\n       */\n      this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n    }\n  }\n\n  /**\n   * Insert the node after the given node id in the group's\n   * array of children ids\n   * @param nodeIdToInsert the node id we want to insert\n   * @param nodeIdToInsertAfter the node id we want to insert after\n   */\n  insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n    var groupNodes = this.getGroupNodes();\n\n    if (groupNodes != null) {\n\n      // loop through the groups\n      for (var group of groupNodes) {\n\n        if (group != null) {\n          var ids = group.ids;\n\n          if (ids != null) {\n\n            // loop through the children ids\n            for (var i = 0; i < ids.length; i++) {\n              var id = ids[i];\n\n              if (nodeIdToInsertAfter === id) {\n                // we have found the node id we want to insert after\n\n                // insert the new node id\n                ids.splice(i + 1, 0, nodeIdToInsert);\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the transitions to handle inserting a node after another node\n   * @param node the node to insert\n   * @param nodeId the node id to insert after\n   */\n  insertNodeAfterInTransitions(node, nodeId) {\n\n    // get the node that will end up before\n    var previousNode = this.getNodeById(nodeId);\n\n    if (previousNode != null) {\n\n      if (previousNode.transitionLogic == null) {\n        previousNode.transitionLogic = {};\n        previousNode.transitionLogic.transitions = [];\n      }\n\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n\n      if (this.isGroupNode(node.id)) {\n        /*\n         * the node we are inserting is a group so we will update\n         * the transitions of its children so that they transition\n         * to the correct node\n         */\n        this.updateChildrenTransitionsForMovingGroup(node, nodeId);\n      }\n\n      var previousNodeTransitionLogic = previousNode.transitionLogic;\n\n      if (previousNodeTransitionLogic != null) {\n\n        // get the transitions from the before node\n        var transitions = previousNodeTransitionLogic.transitions;\n\n        if (transitions != null) {\n\n          // make a copy of the transitions\n          var transitionsJSONString = angular.toJson(transitions);\n          var transitionsCopy = angular.fromJson(transitionsJSONString);\n\n          // set the transitions from the before node into the inserted node\n          node.transitionLogic.transitions = transitionsCopy;\n        }\n      }\n\n      if (node.transitionLogic.transitions.length == 0) {\n        /*\n         * The node does not have any transitions so we will look for\n         * a transition on the parent group. If the parent has a\n         * transition we will use it for the node.\n         */\n\n        // get the parent group\n        var parentGroupId = this.getParentGroupId(nodeId);\n\n        if (parentGroupId != null &&\n          parentGroupId != '' &&\n          parentGroupId != 'group0') {\n\n          // get the parent transitions\n          var parentTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n          if (parentTransitions != null) {\n\n            // loop through all the parent transitions\n            for (var parentTransition of parentTransitions) {\n              var newTransition = {};\n\n              if (parentTransition != null) {\n                var toNodeId = parentTransition.to;\n\n                if (this.isGroupNode(toNodeId)) {\n                  // the transition is to a group\n\n                  // get the start id of the group\n                  var startId = this.getGroupStartId(toNodeId);\n\n                  if (startId == null || startId == '') {\n                    // there is no start id so we will just use the group id\n                    newTransition.to = toNodeId;\n                  } else {\n                    // there is a start id so we will use it as the to node\n                    newTransition.to = startId;\n                  }\n                } else {\n                  // the tranisition is to a step\n                  newTransition.to = toNodeId;\n                }\n              }\n\n              // add the new transition to the node\n              node.transitionLogic.transitions.push(newTransition);\n            }\n          }\n        }\n      }\n\n      var newNodeId = node.id;\n\n      // TODO handle branching case\n\n      // remove the transitions from the before node\n      previousNode.transitionLogic.transitions = [];\n\n      var transitionObject = {};\n      transitionObject.to = newNodeId;\n\n      // make the before node point to the new node\n      previousNode.transitionLogic.transitions.push(transitionObject);\n\n      // remove the branch path taken constraints from the node we are moving\n      this.removeBranchPathTakenNodeConstraints(node.id);\n\n      // get the branch path taken constraints from the previous node\n      var branchPathTakenConstraints = this.getBranchPathTakenConstraintsByNodeId(nodeId);\n\n      /*\n       * if the previous node was in a branch path, we will also put the\n       * inserted node into the branch path\n       */\n      if (branchPathTakenConstraints != null && branchPathTakenConstraints.length > 0) {\n\n        if (node.constraints == null) {\n          node.constraints = [];\n        }\n\n        // loop through all the branch path taken constraints\n        for (var branchPathTakenConstraint of branchPathTakenConstraints) {\n          if (branchPathTakenConstraint != null) {\n\n            // create a new constraint with the same branch path taken parameters\n            var newConstraint = {};\n            newConstraint.id = this.getNextAvailableConstraintIdForNodeId(node.id);\n            newConstraint.action = branchPathTakenConstraint.action;\n            newConstraint.targetId = node.id;\n            newConstraint.removalCriteria = this.UtilService.makeCopyOfJSONObject(branchPathTakenConstraint.removalCriteria);\n\n            // add the constraint to the node\n            node.constraints.push(newConstraint);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Insert a node into a group\n   * @param nodeIdToInsert the node id to insert\n   * @param nodeIdToInsertInside the node id of the group we will insert into\n   */\n  insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n\n    // get the group we will insert into\n    var group = this.getNodeById(nodeIdToInsertInside);\n\n    if (group != null) {\n      var ids = group.ids;\n\n      if (ids != null) {\n\n        // insert the node node id into the beginning of the child ids\n        ids.splice(0, 0, nodeIdToInsert);\n\n        // set the inserted node id as the start id\n        group.startId = nodeIdToInsert;\n      }\n    }\n  }\n\n  /**\n   * Update the transitions to handle inserting a node into a group\n   * @param nodeIdToInsert node id that we will insert\n   * @param nodeIdToInsertInside the node id of the group we are inserting into\n   */\n  insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n\n    // get the node we are inserting\n    var nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n    if (nodeToInsert != null &&\n      nodeToInsert.transitionLogic != null &&\n      nodeToInsert.transitionLogic.transitions != null) {\n\n      // clear out any existing transitions\n      nodeToInsert.transitionLogic.transitions = [];\n\n      /*\n       * remove the branch path taken constraints from the node we are\n       * inserting\n       */\n      this.removeBranchPathTakenNodeConstraints(nodeIdToInsert);\n    }\n\n    // get the group we are inserting into\n    var group = this.getNodeById(nodeIdToInsertInside);\n\n    if (this.isGroupNode(nodeIdToInsert)) {\n      /*\n       * the node we are inserting is a group so we will update\n       * the transitions of its children so that they transition\n       * to the correct node\n       */\n      this.updateChildrenTransitionsForMovingGroup(nodeToInsert, null);\n    }\n\n    /*\n     * since we are inserting a node into a group, the node will become\n     * the first node in the group. this means we need to update any nodes\n     * that point to the old start id and make them point to the node\n     * we are inserting.\n     */\n    if (nodeToInsert != null && group != null) {\n\n      // get the start node\n      var startId = group.startId;\n\n      // get transitions that point to the start node\n      var previousNodes = this.getNodesByToNodeId(startId);\n\n      if (previousNodes == null || previousNodes.length == 0) {\n        // there are no transitions to the start node\n\n        // find all the groups that point to this group\n        var previousGroups = this.getGroupNodesByToNodeId(nodeIdToInsertInside);\n\n        // loop through all the groups that point to this group\n        for (var previousGroup of previousGroups) {\n          if (previousGroup != null) {\n            // get the nodes that do not have a transition in the previous group\n            var lastNodesInGroup = this.getLastNodesInGroup(previousGroup.id);\n\n            for (var node of lastNodesInGroup) {\n              // add a transition from the node to the node we are inserting\n              this.addToTransition(node, nodeIdToInsert);\n            }\n          }\n        }\n      } else {\n        // there are transitions to the start node\n\n        for (var previousNode of previousNodes) {\n          if (previousNode != null && previousNode.id != 'group0') {\n            // change the transition to point to the node we are inserting\n            this.updateToTransition(previousNode, startId, nodeIdToInsert);\n          }\n        }\n      }\n\n      /*\n       * update all the transitions that point to the group and change\n       * them to point to the new start id\n       */\n      var nodesThatTransitionToGroup = this.getNodesByToNodeId(nodeIdToInsertInside);\n\n      if (nodesThatTransitionToGroup != null) {\n        for (var nodeThatTransitionsToGroup of nodesThatTransitionToGroup) {\n          if (!this.isGroupNode(nodeThatTransitionsToGroup.id)) {\n            this.updateToTransition(nodeThatTransitionsToGroup, nodeIdToInsertInside, nodeIdToInsert);\n          }\n        }\n      }\n\n      /*\n       * create a transition from the node we are inserting to the node that\n       * was previously the start node\n       */\n      if (startId != null && startId != '') {\n        // there is a start id\n\n        var startNode = this.getNodeById(startId);\n\n        if (startNode != null) {\n          // the group has a start node which will become the transition to node\n\n          if (nodeToInsert.transitionLogic == null) {\n            nodeToInsert.transitionLogic = {};\n          }\n\n          if (nodeToInsert.transitionLogic.transitions == null) {\n            nodeToInsert.transitionLogic.transitions = [];\n          }\n\n          /*\n           * make the inserted node transition to the previous start node\n           */\n          var transitionObject = {};\n          transitionObject.to = startId;\n          nodeToInsert.transitionLogic.transitions.push(transitionObject);\n        }\n      }\n\n      //check if the node we inserted has any transitions now\n      var transitions = this.getTransitionsByFromNodeId(nodeIdToInsert);\n\n      if (transitions == null || transitions.length == 0) {\n        /*\n         * the node doesn't have any transitions so we will see if\n         * the parent group transitions to anything and use that\n         * transition\n         */\n\n        // get the transitions from the parent\n        var parentTransitions = this.getTransitionsByFromNodeId(nodeIdToInsertInside);\n\n        if (parentTransitions != null) {\n\n          // loop through all the parent transitions\n          for (var parentTransition of parentTransitions) {\n            if (parentTransition != null) {\n              var toNodeId = parentTransition.to;\n\n              if (this.isGroupNode(toNodeId)) {\n                // the to node is a group\n\n                // get the to group\n                var nextGroup = this.getNodeById(toNodeId);\n\n                if (nextGroup != null) {\n\n                  // get the start id of the to group\n                  var startId = nextGroup.startId;\n\n                  if (startId == null || startId == '') {\n                    // there is no start id so we will just transition to the group\n                    this.addToTransition(nodeToInsert, toNodeId);\n                  } else {\n                    // there is a start id so we will transition to that\n                    this.addToTransition(nodeToInsert, startId);\n                  }\n                }\n              } else {\n                // the to node is not a group\n\n                /*\n                 * we will add a transition from the node we are inserting to\n                 * to that node\n                 */\n                this.addToTransition(nodeToInsert, toNodeId);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a transition to a node\n   * @param node the node we are adding a transition to\n   * @param toNodeId the node id we going to transition to\n   * @param criteria (optional) a criteria object specifying\n   * what needs to be satisfied in order to use this transition\n   */\n  addToTransition(node, toNodeId, criteria) {\n    if (node != null) {\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n\n      var transition = {};\n\n      // set the to node id\n      transition.to = toNodeId;\n\n      if (criteria != null) {\n        // set the criteria\n        transition.criteria = criteria;\n      }\n\n      // add the transition to the node's transitions\n      node.transitionLogic.transitions.push(transition);\n    }\n  }\n\n  /**\n   * Update the to value of aa transition\n   * @param node the node to update\n   * @param oldToNodeId the previous to node id\n   * @param newToNodeId the new to node id\n   */\n  updateToTransition(node, oldToNodeId, newToNodeId) {\n    if (node != null) {\n      if (node.transitionLogic == null) {\n        node.transitionLogic = {};\n      }\n\n      if (node.transitionLogic.transitions == null) {\n        node.transitionLogic.transitions = [];\n      }\n\n      var transitions = node.transitionLogic.transitions;\n\n      // loop through all the transitions\n      for (var transition of transitions) {\n        if (transition != null) {\n          var toNodeId = transition.to;\n\n          if (oldToNodeId === toNodeId) {\n            // we have found the transition we want to update\n\n            // update the to node id\n            transition.to = newToNodeId;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the nodes in a group that do not have transitions\n   * @param groupId the group id\n   * @returns the nodes in the group that do not have transitions\n   */\n  getLastNodesInGroup(groupId) {\n    var lastNodes = [];\n\n    if (groupId != null) {\n      var group = this.getNodeById(groupId);\n\n      if (group != null) {\n        var childIds = group.ids;\n\n        if (childIds != null) {\n\n          // loop through all the child ids\n          for (var childId of childIds) {\n            if (childId != null) {\n              var child = this.getNodeById(childId);\n\n              if (child != null) {\n                var transitionLogic = child.transitionLogic;\n\n                if (transitionLogic != null) {\n\n                  // get the transitions\n                  var transitions = transitionLogic.transitions;\n\n                  if (transitions == null || transitions.length == 0) {\n                    // this child does not have any transitions\n                    lastNodes.push(child);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return lastNodes;\n  }\n\n  /**\n   * Get the next available group id\n   * @returns the next available group id\n   */\n  getNextAvailableGroupId() {\n\n    // get all the group ids\n    var groupIds = this.getGroupIds();\n\n    var largestGroupIdNumber = null;\n\n    // loop through all the existing group ids\n    for (var groupId of groupIds) {\n\n      // get the number from the group id e.g. the number of 'group2' would be 2\n      var groupIdNumber = groupId.replace('group', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(groupIdNumber)) {\n\n        groupIdNumber = parseInt(groupIdNumber);\n\n        // update the largest group id number if necessary\n        if (largestGroupIdNumber == null) {\n          largestGroupIdNumber = groupIdNumber;\n        } else if (groupIdNumber > largestGroupIdNumber) {\n          largestGroupIdNumber = groupIdNumber;\n        }\n      }\n    }\n\n    // create the next available group id\n    var nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n\n    return nextAvailableGroupId;\n  }\n\n  /**\n   * Get all the group ids\n   * @returns an array with all the group ids\n   */\n  getGroupIds() {\n    var groupIds = [];\n\n    // Get the active group node ids.\n    var groupNodes = this.groupNodes;\n    for (var group of groupNodes) {\n      if (group != null) {\n        var groupId = group.id;\n        if (groupId != null) {\n          groupIds.push(groupId);\n        }\n      }\n    }\n\n    // Get the inactive group node ids.\n    var inactiveGroupNodes = this.getInactiveGroupNodes();\n    for (var inactiveGroup of inactiveGroupNodes) {\n      if (inactiveGroup != null) {\n        var inactiveGroupId = inactiveGroup.id;\n        if (inactiveGroupId != null) {\n          groupIds.push(inactiveGroupId);\n        }\n      }\n    }\n\n    return groupIds;\n  }\n\n  /**\n   * Get the next available node id\n   * @param nodeIdsToSkip (optional) An array of additional node ids to not\n   * use. This parameter is used in cases where we are creating multiple new\n   * nodes at once.\n   * Example\n   * We ask for two new node ids by calling getNextAvailableNodeId() twice.\n   * The first time it returns \"node10\".\n   * If we ask the second time without actually creating and adding node10,\n   * it will return \"node10\" again. If we provide \"node10\" in the\n   * nodeIdsToSkip, then getNextAvailableNodeId() will properly return to us\n   * \"node11\".\n   * @returns the next available node id\n   */\n  getNextAvailableNodeId(nodeIdsToSkip) {\n\n    // get all the node ids\n    var nodeIds = this.getNodeIds();\n\n    var largestNodeIdNumber = null;\n\n    // loop through all the existing node ids\n    for (var nodeId of nodeIds) {\n      // get the number from the node id e.g. the number of 'node2' would be 2\n      var nodeIdNumber = nodeId.replace('node', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(nodeIdNumber)) {\n        nodeIdNumber = parseInt(nodeIdNumber);\n\n        // update the largest node id number if necessary\n        if (largestNodeIdNumber == null) {\n          largestNodeIdNumber = nodeIdNumber;\n        } else if (nodeIdNumber > largestNodeIdNumber) {\n          largestNodeIdNumber = nodeIdNumber;\n        }\n      }\n    }\n\n    // get all the inactive node ids\n    var inactiveNodeIds = this.getInactiveNodeIds();\n\n    for (var inactiveNodeId of inactiveNodeIds) {\n      // get the number from the node id e.g. the number of 'node2' would be 2\n      var nodeIdNumber = inactiveNodeId.replace('node', '');\n\n      // make sure the number is an actual number\n      if (!isNaN(nodeIdNumber)) {\n        nodeIdNumber = parseInt(nodeIdNumber);\n\n        // update the largest node id number if necessary\n        if (largestNodeIdNumber == null) {\n          largestNodeIdNumber = nodeIdNumber;\n        } else if (nodeIdNumber > largestNodeIdNumber) {\n          largestNodeIdNumber = nodeIdNumber;\n        }\n      }\n    }\n\n    if (nodeIdsToSkip != null) {\n      // there are node ids to skip\n\n      // loop through all the node ids to skip\n      for (var nodeIdToSkip of nodeIdsToSkip) {\n        // get the number from the node id e.g. the number of 'node2' would be 2\n        var nodeIdNumber = nodeIdToSkip.replace('node', '');\n\n        // make sure the number is an actual number\n        if (!isNaN(nodeIdNumber)) {\n          nodeIdNumber = parseInt(nodeIdNumber);\n\n          // update the largest node id number if necessary\n          if (largestNodeIdNumber == null) {\n            largestNodeIdNumber = nodeIdNumber;\n          } else if (nodeIdNumber > largestNodeIdNumber) {\n            largestNodeIdNumber = nodeIdNumber;\n          }\n        }\n      }\n    }\n\n    // create the next available node id\n    var nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n\n    return nextAvailableNodeId;\n  }\n\n  /**\n   * Get all the node ids from steps (not groups)\n   * @returns an array with all the node ids\n   */\n  getNodeIds() {\n\n    var nodeIds = [];\n\n    var nodes = this.applicationNodes;\n\n    // loop through all the nodes\n    for (var node of nodes) {\n\n      if (node != null) {\n        var nodeId = node.id;\n\n        if (nodeId != null) {\n          nodeIds.push(nodeId);\n        }\n      }\n    }\n\n    return nodeIds;\n  }\n\n  /**\n   * Get all the node ids from inactive steps\n   * @returns an array with all the inactive node ids\n   */\n  getInactiveNodeIds() {\n\n    var nodeIds = [];\n\n    var inactiveNodes = this.project.inactiveNodes;\n\n    if (inactiveNodes != null) {\n\n      // loop through all the inactive nodes\n      for (var inactiveNode of inactiveNodes) {\n\n        if (inactiveNode != null) {\n          var nodeId = inactiveNode.id;\n\n          if (nodeId != null) {\n            nodeIds.push(nodeId);\n          }\n        }\n      }\n    }\n\n    return nodeIds;\n  }\n\n  /**\n   * Move nodes inside a group node\n   * @param nodeIds the node ids to move\n   * @param nodeId the node id of the group we are moving the nodes inside\n   */\n  moveNodesInside(nodeIds, nodeId) {\n\n    var movedNodes = [];\n\n    // loop through all the nodes we are moving\n    for (var n = 0; n < nodeIds.length; n++) {\n\n      // get the node we are moving\n      var tempNodeId = nodeIds[n];\n      var tempNode = this.getNodeById(tempNodeId);\n      movedNodes.push(tempNode);\n\n      var movingNodeIsActive = this.isActive(tempNodeId);\n      var stationaryNodeIsActive = this.isActive(nodeId);\n\n      if (movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from active to active\n\n        // remove the transitions\n        this.removeNodeIdFromTransitions(tempNodeId);\n\n        // remove the node from the group\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n          this.insertNodeInsideInGroups(tempNodeId, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.insertNodeAfterInTransitions(tempNode, nodeId);\n          this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        }\n      } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from active to inactive\n\n        // remove the transitions\n        this.removeNodeIdFromTransitions(tempNodeId);\n\n        // remove the node from the group\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        // move the node to the inactive array\n        this.moveToInactive(tempNode, nodeId);\n      } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from inactive to active\n\n        this.moveToActive(tempNode);\n\n        if (n == 0) {\n          /*\n           * this is the first node we are moving so we will insert it\n           * into the beginning of the group\n           */\n          this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n          this.insertNodeInsideInGroups(tempNodeId, nodeId);\n        } else {\n          /*\n           * this is not the first node we are moving so we will insert\n           * it after the node we previously inserted\n           */\n          this.insertNodeAfterInTransitions(tempNode, nodeId);\n          this.insertNodeAfterInGroups(tempNodeId, nodeId);\n        }\n      } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from inactive to inactive\n\n        // move the node within the inactive nodes\n        this.moveInactiveNode(tempNode, nodeId);\n      }\n\n      /*\n       * remember the node id so we can put the next node (if any)\n       * after this one\n       */\n      nodeId = tempNode.id;\n    }\n\n    return movedNodes;\n  }\n\n  /**\n   * Move nodes after a certain node id\n   * @param nodeIds the node ids to move\n   * @param nodeId the node id we will put the moved nodes after\n   */\n  moveNodesAfter(nodeIds, nodeId) {\n\n    var movedNodes = [];\n\n    // loop through all the nodes we are moving\n    for (var tempNodeId of nodeIds) {\n\n      // get the node we are moving\n      var node = this.getNodeById(tempNodeId);\n      movedNodes.push(node);\n\n      var movingNodeIsActive = this.isActive(tempNodeId);\n      var stationaryNodeIsActive = this.isActive(nodeId);\n\n      if (movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from active to active\n\n        // remove the transitions\n        this.removeNodeIdFromTransitions(tempNodeId);\n\n        // remove the node from the groups\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        // insert the node into the parent group\n        this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n        // create the transition\n        this.insertNodeAfterInTransitions(node, nodeId);\n      } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from active to inactive\n\n        // remove the transitions\n        this.removeNodeIdFromTransitions(tempNodeId);\n\n        // remove the node from the groups\n        this.removeNodeIdFromGroups(tempNodeId);\n\n        // move the node to the inactive array\n        this.moveToInactive(node, nodeId);\n      } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n        // we are moving from inactive to active\n\n        // move the node to the active nodes array\n        this.moveToActive(node);\n\n        // insert the node into the parent group\n        this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n        // create the transition\n        this.insertNodeAfterInTransitions(node, nodeId);\n      } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n        // we are moving from inactive to inactive\n\n        // move the node within the inactive nodes\n        this.moveInactiveNode(node, nodeId);\n      }\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = node.id;\n    }\n\n    return movedNodes;\n  }\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesInside(nodeIds, nodeId) {\n\n    var newNodes = [];\n\n    // loop through all the nodes we are copying\n    for (var n = 0; n < nodeIds.length; n++) {\n\n      // get the node we are copying\n      var nodeIdToCopy = nodeIds[n];\n\n      // create a copy of the node\n      var newNode = this.copyNode(nodeIdToCopy);\n      var newNodeId = newNode.id;\n\n      if (n == 0) {\n        // this is the first node we are copying so we will insert it\n        // into the beginning of the group\n        this.createNodeInside(newNode, nodeId);\n      } else {\n        // this is not the first node we are copying so we will insert\n        // it after the node we previously inserted\n        this.createNodeAfter(newNode, nodeId);\n      }\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n\n    return newNodes;\n  }\n\n  /**\n   * Copy nodes and put them after a certain node id\n   * @param nodeIds the node ids to copy\n   * @param nodeId the node id we will put the copied nodes after\n   */\n  copyNodesAfter(nodeIds, nodeId) {\n\n    var newNodes = [];\n\n    // loop through all the nodes we are copying\n    for (var nodeIdToCopy of nodeIds) {\n\n      // create a copy of the node\n      var newNode = this.copyNode(nodeIdToCopy);\n      var newNodeId = newNode.id;\n\n      this.createNodeAfter(newNode, nodeId);\n\n      // remember the node id so we can put the next node (if any) after this one\n      nodeId = newNodeId;\n      this.parseProject();  // refresh project and update references because a new node have been added.\n\n      newNodes.push(newNode);\n    }\n\n    return newNodes;\n  }\n\n  /**\n   * Copy the node with the specified nodeId\n   * @param nodeId the node id to copy\n   * @return copied node\n   */\n  copyNode(nodeId) {\n    var node = this.getNodeById(nodeId);\n\n    // make a copy of the node\n    var nodeCopy = this.UtilService.makeCopyOfJSONObject(node);\n    nodeCopy.id = this.getNextAvailableNodeId();\n    nodeCopy.transitionLogic = {};  // clear transition logic\n    nodeCopy.constraints = [];  // clear constraints\n\n    // used to hold the new component ids\n    var newComponentIds = [];\n\n    // loop through all the components and give them a new component id\n    for (var component of nodeCopy.components) {\n\n      // give the component a new id\n      var newComponentId = this.getUnusedComponentId(newComponentIds);\n\n      // remember the new component id\n      newComponentIds.push(newComponentId);\n\n      // set the new component id into the component\n      component.id = newComponentId;\n    }\n    return nodeCopy;\n  }\n\n  /**\n   * Delete a node\n   * @param nodeId the node id\n   */\n  deleteNode(nodeId) {\n\n    /*\n     * flag for whether we are deleting the project start node id.\n     * if we are deleting the project start node id, we will need\n     * to change it to the next logical node id that will be used\n     * as the project start.\n     */\n    var removingProjectStartNodeId = false;\n\n    if (this.isGroupNode(nodeId)) {\n      // the node is a group node so we will also remove all of its children\n      var group = this.getNodeById(nodeId);\n\n      // TODO check if the child is in another group, if so do not remove\n\n      if (group != null) {\n        var ids = group.ids;\n\n        // loop through all the children\n        for (var i = 0; i < ids.length; i++) {\n          var id = ids[i];\n\n          // remove the child\n          this.removeNodeIdFromTransitions(id);\n          this.removeNodeIdFromGroups(id);\n          this.removeNodeIdFromNodes(id);\n\n          if (this.project.startNodeId == id) {\n            removingProjectStartNodeId = true;\n          }\n\n          /*\n           * move the counter back because we have removed a child\n           * from the parent group's array of child ids so all of\n           * the child ids were shifted back one and the next child\n           * we want will be at i--\n           */\n          i--;\n        }\n      }\n    }\n\n    var parentGroup = this.getParentGroup(nodeId);\n\n    // check if we need to update the start id of the parent group\n    if (parentGroup != null) {\n\n      /*\n       * the node is the start node of the parent group so we need\n       * to update the start id of the parent group to point to\n       * the next node\n       */\n      if (nodeId === parentGroup.startId) {\n\n        var hasSetNewStartId = false;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n          var transitionLogic = node.transitionLogic;\n\n          if (transitionLogic != null) {\n            var transitions = transitionLogic.transitions;\n\n            if (transitions != null && transitions.length > 0) {\n              var transition = transitions[0];\n\n              if (transition != null) {\n                var toNodeId = transition.to;\n\n                if (toNodeId != null) {\n\n                  // check that the to node is in the same group\n                  if (this.isNodeInGroup(toNodeId, parentGroup.id)) {\n\n                    // update the parent group start id\n                    parentGroup.startId = toNodeId;\n                    hasSetNewStartId = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (!hasSetNewStartId) {\n          parentGroup.startId = '';\n        }\n      }\n    }\n\n    if (nodeId === this.getStartNodeId()) {\n      // the node we are removing is the project start node id\n      removingProjectStartNodeId = true;\n    }\n\n    if (removingProjectStartNodeId) {\n      /*\n       * we are removing the project start node id so we need to update\n       * the startNodeId to something else\n       */\n\n      if (this.isGroupNode(nodeId)) {\n        /*\n         * we are removing a group so we need to set the startNodeId to\n         * the first node of the next group or if the next group doesn't\n         * have any nodes, we will just use the next group\n         */\n\n        // get the transitions of the group we are removing\n        var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions == null || transitions.length == 0) {\n          /*\n           * the group doesn't have any transitions so we will set\n           * the startNodeId to 'group0'\n           */\n          this.setStartNodeId('group0');\n        } else {\n          // the group has transitions\n\n          var nextNodeId = null;\n\n          if (transitions[0] != null && transitions[0].to != null) {\n            // get the first transition\n            nextNodeId = transitions[0].to;\n          }\n\n          if (nextNodeId != null) {\n            if (this.isGroupNode(nextNodeId)) {\n              // the transition is to a group\n\n              // get the next group\n              var nextGroupNode = this.getNodeById(nextNodeId);\n\n              if (nextGroupNode != null) {\n\n                // get the start id of the next group\n                var nextGroupStartId = nextGroupNode.startId;\n\n                if (nextGroupStartId == null) {\n                  /*\n                   * the next group does not have a start id so we\n                   * will just use the next group id as the project\n                   * start node id\n                   */\n                  this.setStartNodeId(nextNodeId);\n                } else {\n                  /*\n                   * the next group has a start id so we will use\n                   * it as the project start node id\n                   */\n                  this.setStartNodeId(nextGroupStartId);\n                }\n              }\n            } else {\n              /*\n               * the transition is to a step so we will use it as the\n               * project start node id\n               */\n              this.setStartNodeId(nextNodeId);\n            }\n          }\n        }\n      } else {\n        /*\n         * we are removing a step node so we will set the startNodeId to\n         * the next node in the transitions, or if there are no\n         * transitions, we will use the parent group\n         */\n\n        // get the transitions from the step we are removing\n        var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions == null || transitions.length == 0) {\n          /*\n           * the step doesn't have any transitions so we will use the\n           * its parent group as the start node id\n           */\n          var parentGroupId = this.getParentGroupId(nodeId);\n          this.setStartNodeId(parentGroupId);\n        } else {\n          // the step has transitions\n\n          if (transitions[0] != null && transitions[0].to != null) {\n            /*\n             * get the first transition and set it as the project\n             * start node id\n             */\n            var transitionToNodeId = transitions[0].to;\n            this.setStartNodeId(transitionToNodeId);\n          }\n        }\n      }\n    }\n\n    // remove the node\n    this.removeNodeIdFromTransitions(nodeId);\n    this.removeNodeIdFromGroups(nodeId);\n    this.removeNodeIdFromNodes(nodeId);\n\n    if (parentGroup != null) {\n      this.recalculatePositionsInGroup(parentGroup.id);\n    }\n  }\n\n  /**\n   * Update the transitions to handle removing a node\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromTransitions(nodeId) {\n\n    // get the node we are removing\n    var nodeToRemove = this.getNodeById(nodeId);\n\n    // get all the nodes that have a transition to the node we are removing\n    var nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n    // get the transitions of the node we are removing\n    var nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n    var nodeToRemoveTransitions = [];\n\n    if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n      nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n    }\n\n    var parentIdOfNodeToRemove = this.getParentGroupId(nodeId);\n\n    var parentGroup = this.getNodeById(parentIdOfNodeToRemove);\n\n    // update the start id if we are removing the start node of a group\n    if (parentGroup != null) {\n      var parentGroupStartId = parentGroup.startId;\n\n      if (parentGroupStartId != null) {\n        if (parentGroupStartId === nodeId) {\n          // the node we are removing is the start node\n\n          if (nodeToRemoveTransitions != null && nodeToRemoveTransitions.length > 0) {\n\n            // loop through all the transitions from the node to choose a new start id\n            for (var nodeToRemoveTransition of nodeToRemoveTransitions) {\n              if (nodeToRemoveTransition != null) {\n                var toNodeId = nodeToRemoveTransition.to;\n\n                if (toNodeId != null) {\n                  /*\n                   * we need to check that the to node id is in the\n                   * same group. some transitions point to a node id\n                   * in the next group which we would not want to use\n                   * for the start id.\n                   */\n                  if (this.getParentGroupId(toNodeId) == parentIdOfNodeToRemove) {\n\n                    // set the new start id\n                    parentGroup.startId = toNodeId;\n                  }\n                }\n              }\n            }\n          } else {\n            // there are no transitions so we will have an empty start id\n            parentGroup.startId = '';\n          }\n        }\n      }\n    }\n\n    // loop through all the nodes that transition to the node we are removing\n    for (var n = 0; n < nodesByToNodeId.length; n++) {\n\n      // get a node that has a transition to the node we are removing\n      var node = nodesByToNodeId[n];\n\n      if (node != null) {\n        var parentIdOfFromNode = this.getParentGroupId(node.id);\n\n        var transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n          var transitions = transitionLogic.transitions;\n\n          // loop through all the transitions of this node\n          for (var t = 0; t < transitions.length; t++) {\n            var transition = transitions[t];\n\n            if (nodeId === transition.to) {\n              // we have found the transition to the node we are removing\n\n              // copy the transitions from the node we are removing\n              var transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n              transitionsCopy = angular.fromJson(transitionsCopy);\n\n              /*\n               * if the parent from group is different than the parent removing group\n               * remove transitions that are to a node in a different group than\n               * the parent removing group\n               */\n\n              if (parentIdOfFromNode != parentIdOfNodeToRemove) {\n\n                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                  var tempTransition = transitionsCopy[tc];\n\n                  if (tempTransition != null) {\n                    var tempToNodeId = tempTransition.to;\n\n                    if (tempToNodeId != null) {\n                      var parentIdOfToNode = this.getParentGroupId(tempToNodeId);\n\n                      if (parentIdOfNodeToRemove != parentIdOfToNode) {\n                        // remove the transition\n\n                        transitionsCopy.splice(tc, 1);\n                        tc--;\n                      }\n                    }\n                  }\n                }\n              }\n\n              if (this.isFirstNodeInBranchPath(nodeId)) {\n                /*\n                 * Get the node ids that have a branchPathTaken\n                 * constraint from the before node and to the node\n                 * we are removing. If there are any, we need to\n                 * update the branchPathTaken constraint with the\n                 * next nodeId that comes after the node we are\n                 * removing.\n                 */\n                var nodeIdsInBranch = this.getNodeIdsInBranch(node.id, nodeId);\n\n                if (nodeIdsInBranch != null) {\n\n                  // loop through all the node ids in the branch\n                  for (var nodeIdInBranch of nodeIdsInBranch) {\n                    var nodeInBranch = this.getNodeById(nodeIdInBranch);\n\n                    // loop through all the transitions in the node we are removing\n                    for (var transitionCopy of transitionsCopy) {\n                      if (transitionCopy != null) {\n                        var currentFromNodeId = node.id;\n                        var currentToNodeId = nodeId;\n                        var newFromNodeId = node.id;\n                        var newToNodeId = transitionCopy.to;\n\n                        /*\n                         * change the branch path taken constraint by changing\n                         * the toNodeId\n                         */\n                        this.updateBranchPathTakenConstraint(nodeInBranch, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                      }\n                    }\n                  }\n                }\n              } else if (this.isBranchPoint(nodeId)) {\n                // the node we are removing is a branch point\n\n                /*\n                 * get all the branches that have the node we\n                 * are removing as the start point\n                 */\n                var branches = this.getBranchesByBranchStartPointNodeId(nodeId);\n\n                // loop through all branches\n                for (var branch of branches) {\n\n                  if (branch != null) {\n\n                    /*\n                     * get the branch paths. these paths do not\n                     * contain the start point or merge point.\n                     */\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                      // loop through all the branch paths\n                      for (var branchPath of branchPaths) {\n\n                        if (branchPath != null) {\n\n                          // get the start point\n                          var currentFromNodeId = nodeId;\n\n                          // get the first node in this branch\n                          var currentToNodeId = branchPath[0];\n\n                          // this will be the new start point\n                          var newFromNodeId = node.id;\n\n                          // get the first node in this branch\n                          var newToNodeId = branchPath[0];\n\n                          // loop through all the nodes in the branch path\n                          for (var branchPathNodeId of branchPath) {\n\n                            // get the node\n                            var branchPathNode = this.getNodeById(branchPathNodeId);\n\n                            // update the constraints related to the branching\n                            this.updateBranchPathTakenConstraint(branchPathNode, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              // remove the transition to the node we are removing\n              transitions.splice(t, 1);\n\n              if (transitionsCopy != null) {\n                var insertIndex = t;\n\n                /*\n                 * loop through all the transitions from the node we are removing\n                 * and insert them into the transitions of the from node\n                 * e.g.\n                 * the node that comes before the node we are removing has these transitions\n                 * \"transitions\": [\n                 *     {\n                 *         \"to\": \"node4\"\n                 *     },\n                 *     {\n                 *         \"to\": \"node6\"\n                 *     }\n                 * ]\n                 *\n                 * we are removing node4. node4 has a transition to node5.\n                 *\n                 * the node that comes before the node we are removing now has these transitions\n                 * \"transitions\": [\n                 *     {\n                 *         \"to\": \"node5\"\n                 *     },\n                 *     {\n                 *         \"to\": \"node6\"\n                 *     }\n                 * ]\n                 */\n                for (var transitionCopy of transitionsCopy) {\n                  // insert a transition from the node we are removing\n                  transitions.splice(insertIndex, 0, transitionCopy);\n                  insertIndex++;\n                }\n              }\n\n              // check if the node we are moving is a group\n              if (this.isGroupNode(nodeId)) {\n                /*\n                 * we are moving a group so we need to update transitions that\n                 * go into the group\n                 */\n                var groupIdWeAreMoving = nodeId;\n                var groupThatTransitionsToGroupWeAreMoving = node;\n                this.updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving);\n              }\n            }\n          }\n\n          if (this.isBranchPoint(nodeId)) {\n            /*\n             * the node we are deleting is a branch point so we to\n             * copy the transition logic to the node that comes\n             * before it\n             */\n            node.transitionLogic = this.UtilService.makeCopyOfJSONObject(nodeToRemoveTransitionLogic);\n\n            /*\n             * set the transitions for the node that comes before\n             * the one we are removing\n             */\n            node.transitionLogic.transitions = transitions;\n          }\n        }\n      }\n    }\n\n    if (nodeToRemoveTransitionLogic != null) {\n      // clear the transitions of the node we are removing\n      nodeToRemoveTransitionLogic.transitions = [];\n    }\n\n    if (this.isGroupNode(nodeId)) {\n      /*\n       * this is a group node so we will remove all child transitions that\n       * go out of this group\n       */\n\n      //this.removeTransitionsIntoGroup(nodeId);\n      this.removeTransitionsOutOfGroup(nodeId);\n    }\n  };\n\n  /**\n   * Remove the node id from a group\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromGroups(nodeId) {\n\n    var groups = this.groupNodes;\n\n    if (groups != null) {\n\n      // loop through all the groups\n      for (var group of groups) {\n\n        if (group != null) {\n\n          // get the start id of the group\n          var startId = group.startId;\n\n          // get the child ids of the group\n          var ids = group.ids;\n\n          // loop through all the child ids\n          for (var i = 0; i < ids.length; i++) {\n            var id = ids[i];\n\n            if (nodeId === id) {\n              // we have found the node id we want to remove\n              ids.splice(i, 1);\n\n              if (nodeId === startId) {\n                /*\n                 * the node id is also the start id so we will get the\n                 * next node id and set it as the new start id\n                 */\n\n                var hasSetNewStartId = false;\n\n                // get the node we are removing\n                var node = this.getNodeById(id);\n\n                if (node != null) {\n                  var transitionLogic = node.transitionLogic;\n\n                  if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null && transitions.length > 0) {\n\n                      // get the first transition\n                      // TODO handle the case when the node we are removing is a branch point\n                      var transition = transitions[0];\n\n                      if (transition != null) {\n                        // get the node that this node transitions to\n                        var to = transition.to;\n\n                        if (to != null) {\n                          // set the to node as the start id\n                          group.startId = to;\n                          hasSetNewStartId = true;\n                        }\n                      }\n                    }\n                  }\n                }\n\n                if (!hasSetNewStartId) {\n                  /*\n                   * the node we are removing did not have a transition\n                   * so there will be no start id\n                   */\n                  group.startId = '';\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the array of nodes\n   * @param nodeId the node id to remove\n   */\n  removeNodeIdFromNodes(nodeId) {\n\n    // get all the nodes in the project\n    var nodes = this.project.nodes;\n\n    // loop through all the nodes\n    for (var n = 0; n < nodes.length; n++) {\n      var node = nodes[n];\n\n      if (node != null) {\n        if (nodeId === node.id) {\n          // we have found the node we want to remove\n          nodes.splice(n, 1);\n        }\n      }\n    }\n\n    // get all the inactive nodes\n    var inactiveNodes = this.project.inactiveNodes;\n\n    if (inactiveNodes != null) {\n\n      // loop through all the inactive nodes\n      for (var i = 0; i < inactiveNodes.length; i++) {\n        var inactiveNode = inactiveNodes[i];\n\n        if (inactiveNode != null) {\n          if (nodeId === inactiveNode.id) {\n            // we have found the inactive node we want to remove\n            inactiveNodes.splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive nodes array\n   * @param nodeId the node to remove from the inactive nodes array\n   */\n  removeNodeIdFromInactiveNodes(nodeId) {\n\n    // get the inactive nodes array\n    var inactiveNodes = this.project.inactiveNodes;\n\n    if (inactiveNodes != null) {\n\n      // loop through the inactive nodes\n      for (var i = 0; i < inactiveNodes.length; i++) {\n        var inactiveNode = inactiveNodes[i];\n\n        if (inactiveNode != null) {\n          var inactiveNodeId = inactiveNode.id;\n\n          if (nodeId === inactiveNodeId) {\n            /*\n             * we have found the node we are looking for so we will\n             * remove it\n             */\n            inactiveNodes.splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Create a new component\n   * @param nodeId the node id to create the component in\n   * @param componentType the component type\n   * @param insertAfterComponentId Insert the new compnent after the given\n   * component id. If this argument is null, we will place the new component\n   * in the first position.\n   */\n  createComponent(nodeId, componentType, insertAfterComponentId) {\n\n    var component = null;\n\n    if (nodeId != null && componentType != null) {\n      // get the node we will create the component in\n      var node = this.getNodeById(nodeId);\n\n      // get the service for the component type\n      var service = this.$injector.get(componentType + 'Service');\n\n      if (node != null && service != null) {\n\n        // create the new component\n        component = service.createComponent();\n\n        if (service.componentHasWork()) {\n          /*\n           * the component has student work so we will need to\n           * determine if we need to show the save button on the\n           * component or the step\n           */\n\n          if (node.showSaveButton == true) {\n            /*\n             * the step is showing a save button so we will not show\n             * the save button on this new component\n             */\n          } else {\n            // the step is not showing a save button\n\n            if (this.doesAnyComponentShowSubmitButton(node.id)) {\n              /*\n               * at least one of the other components in the step are\n               * showing a submit button so we will also show the save\n               * button on this new component\n               */\n\n              // turn on the component save button\n              component.showSaveButton = true;\n            } else {\n              /*\n               * none of the other components are showing a submit button\n               * so we will show the save button on the step\n               */\n\n              // turn on the step save button\n              node.showSaveButton = true;\n            }\n          }\n        }\n\n        // add the component to the node\n        this.addComponentToNode(node, component, insertAfterComponentId);\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Does any component in the step generate work\n   * @param nodeId the node id\n   * @return whether any components in the step generates work\n   */\n  doesAnyComponentHaveWork(nodeId) {\n\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the components in the node\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n            var componentType = component.type;\n\n            // get the service for the component type\n            var service = this.$injector.get(componentType + 'Service');\n\n            if (service != null) {\n              if (service.componentHasWork()) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if any of the components in the node are showing their save button\n   * @param nodeId the node id to check\n   * @return whether any of the components in the node show their save button\n   */\n  doesAnyComponentShowSaveButton(nodeId) {\n\n    var result = false;\n\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the components in the node\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n            if (component.showSaveButton == true) {\n              // the component is showing their save button\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if any of the components in the node are showing their submit button\n   * @param nodeId the node id to check\n   * @return whether any of the components in the node show their submit button\n   */\n  doesAnyComponentShowSubmitButton(nodeId) {\n\n    var result = false;\n\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the components in the node\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n            if (component.showSubmitButton == true) {\n              // the component is showing their save button\n              result = true;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Turn on the save button in all the components in the step\n   * @param nodeId the node id\n   */\n  turnOnSaveButtonInComponents(nodeId) {\n\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the components in the node\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n\n            // get the component type\n            var componentType = component.type;\n\n            if (componentType != null) {\n\n              // get the service for the component type\n              var service = this.$injector.get(componentType + 'Service');\n\n              if (service != null) {\n\n                // check if this component uses a save button\n                if (service.componentUsesSaveButton()) {\n\n                  // turn on the save button in the component\n                  component.showSaveButton = true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Turn off the submit button in all the components in the step\n   * @param nodeId the node id\n   */\n  turnOffSaveButtonInComponents(nodeId) {\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the components in the node\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n\n            // get the component type\n            var componentType = component.type;\n\n            if (componentType != null) {\n\n              // get the service for the component type\n              var service = this.$injector.get(componentType + 'Service');\n\n              if (service != null) {\n\n                // check if this component uses a save button\n                if (service.componentUsesSaveButton()) {\n\n                  // turn on the save button in the component\n                  component.showSaveButton = false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Add the component to the node\n   * @param node the node\n   * @param component the component\n   * @param insertAfterComponentId Insert the component after this given\n   * component id. If this argument is null, we will place the new component\n   * in the first position.\n   */\n  addComponentToNode(node, component, insertAfterComponentId) {\n\n    if (node != null && component != null) {\n\n      if (insertAfterComponentId == null) {\n        /*\n         * insertAfterComponentId is null so we will place the new\n         * component in the first position\n         */\n        node.components.splice(0, 0, component);\n      } else {\n        // place the new component after the insertAfterComponentId\n\n        // boolean flag for whether we have added the component yet\n        var added = false;\n\n        // get the components in the step\n        var components = node.components;\n\n        // loop through all the components\n        for (var c = 0; c < components.length; c++) {\n          var tempComponent = components[c];\n\n          if (tempComponent != null && tempComponent.id != null && tempComponent.id == insertAfterComponentId) {\n            /*\n             * we have found the component we want to add the new\n             * one after\n             */\n\n            // add the component\n            components.splice(c + 1, 0, component);\n            added = true;\n            break;\n          }\n        }\n\n        if (!added) {\n          /*\n           * the component has not been added yet so we will just add\n           * it at the end\n           */\n          node.components.push(component);\n        }\n      }\n    }\n  }\n\n  /**\n   * Move the component(s) within the node\n   * @param nodeId we are moving component(s) in this node\n   * @param componentIds the component(s) we are moving\n   * @param insertAfterComponentId Insert the component(s) after this given\n   * component id. If this argument is null, we will place the new\n   * component(s) in the first position.\n   */\n  moveComponent(nodeId, componentIds, insertAfterComponentId) {\n\n    // get the node for which we are moving components\n    var node = this.getNodeById(nodeId);\n\n    // get the components in the node\n    var components = node.components;\n\n    var componentsToMove = [];\n\n    // remove the component(s)\n    for (var a = components.length - 1; a >= 0; a--) {\n      var tempComponent = components[a];\n\n      if (tempComponent != null) {\n\n        if (componentIds.indexOf(tempComponent.id) != -1) {\n          // we have found a component we want to move\n\n          // add the component to our array of components we are moving\n          componentsToMove.splice(0, 0, tempComponent);\n\n          // remove the component from the components array in the node\n          components.splice(a, 1);\n        }\n      }\n    }\n\n    // insert the component(s)\n    if (insertAfterComponentId == null) {\n      // insert the components at the beginning of the components list\n\n      // loop through all the components we are moving\n      for (var c = 0; c < componentsToMove.length; c++) {\n\n        // insert a component\n        components.splice(c, 0, componentsToMove[c]);\n      }\n    } else {\n      // insert the component(s) after the given insertAfterComponentId\n\n      // loop through all the components\n      for (var b = 0; b < components.length; b++) {\n        var tempComponent = components[b];\n\n        if (tempComponent != null && tempComponent.id == insertAfterComponentId) {\n          // we have found the component we want to add after\n\n          // loop through all the components we are moving\n          for (var c = 0; c < componentsToMove.length; c++) {\n            // insert a component\n            components.splice(b + 1 + c, 0, componentsToMove[c]);\n          }\n\n          break;\n        }\n      }\n    }\n\n    return componentsToMove;\n  }\n\n  /**\n   * Delete the component\n   * @param nodeId the node id\n   * @param componentId the component id\n   */\n  deleteComponent(nodeId, componentId) {\n    if (nodeId != null && componentId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        var components = node.components;\n\n        if (components != null) {\n\n          // loop through all the components\n          for (var c = 0; c < components.length; c++) {\n            var component = components[c];\n\n            if (component.id === componentId) {\n              // we have found the component we want to delete\n\n              // remove the component\n              components.splice(c, 1);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * TODO: Deprecated, should be removed; replaced by getMaxScoreForWorkgroupId in StudentStatusService\n   * Get the max score for the project. If the project contains branches, we\n   * will only calculate the max score for a single path from the first node\n   * to the last node in the project.\n   * @returns the max score for the project or null if none of the components in the project\n   * has max scores.\n   */\n  getMaxScore() {\n\n    var maxScore = null;\n\n    // get the start node id of the project\n    var startNodeId = this.getStartNodeId()\n\n    // get all the paths in the project\n    var allPaths = this.getAllPaths([], startNodeId);\n\n    if (allPaths != null && allPaths.length > 0) {\n\n      // get the first path\n      var firstPath = allPaths[0];\n\n      // loop through all the node ids in the path\n      for (var nodeId of firstPath) {\n\n        // get the max score for the node\n        var nodeMaxScore = this.getMaxScoreForNode(nodeId);\n\n        if (nodeMaxScore != null) {\n          if (maxScore == null) {\n            maxScore = nodeMaxScore;\n          } else {\n            maxScore += nodeMaxScore;\n          }\n        }\n      }\n    }\n\n    return maxScore;\n  }\n\n  /**\n   * Get the max score for the node\n   * @param nodeId the node id\n   * @returns the max score for the node\n   */\n  getMaxScoreForNode(nodeId) {\n    var maxScore = null;\n\n    // get the node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n      var components = node.components;\n\n      if (components != null) {\n\n        // loop through all the components\n        for (var component of components) {\n\n          if (component != null) {\n\n            // get the max score for the component\n            var componentMaxScore = component.maxScore;\n\n            // check if the component has a max score\n            if (componentMaxScore != null) {\n\n              // make sure the max score is a valid number\n              if (!isNaN(componentMaxScore)) {\n\n                if (maxScore == null) {\n                  maxScore = componentMaxScore;\n                } else {\n                  // accumulate the max score\n                  maxScore += componentMaxScore;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return maxScore;\n  }\n\n  /**\n   * Get the max score for a component\n   * @param nodeId get the max score from a component in this node\n   * @param componentId get the max score from this component\n   */\n  getMaxScoreForComponent(nodeId, componentId) {\n    var maxScore = null;\n\n    var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    if (component != null) {\n      maxScore = component.maxScore;\n    }\n\n    return maxScore;\n  }\n\n  /**\n   * Set the max score for a component\n   * @param nodeId set the max score from a component in this node\n   * @param componentId set the max score from this component\n   * @param maxScore set it to this maxScore\n   */\n  setMaxScoreForComponent(nodeId, componentId, maxScore) {\n    if (nodeId != null && componentId != null && maxScore != null && typeof maxScore === 'number') {\n      let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        component.maxScore = maxScore;\n      }\n    }\n  }\n\n  /**\n   * Determine if a node id is a direct child of a group\n   * @param nodeId the node id\n   * @param groupId the group id\n   */\n  isNodeInGroup(nodeId, groupId) {\n\n    var result = false;\n\n    var group = this.getNodeById(groupId);\n\n    var childIds = group.ids;\n\n    if (childIds != null) {\n      if (childIds.indexOf(nodeId) != -1) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the first leaf node by traversing all the start ids\n   * until a leaf node id is found\n   */\n  getFirstLeafNodeId() {\n\n    var firstLeafNodeId = null;\n\n    // get the start group id\n    var startGroupId = this.project.startGroupId;\n\n    // get the start group node\n    var node = this.getNodeById(startGroupId);\n\n    var done = false;\n\n    // loop until we have found a leaf node id or something went wrong\n    while (!done) {\n\n      if (node == null) {\n        done = true;\n      } else if (this.isGroupNode(node.id)) {\n        // set the first leaf node id to the group id for now\n        firstLeafNodeId = node.id;\n\n        // the current node is a group\n        node = this.getNodeById(node.startId);\n      } else if (this.isApplicationNode(node.id)) {\n        // the current node is a leaf\n        firstLeafNodeId = node.id;\n        done = true;\n      } else {\n        done = true;\n      }\n    }\n\n    return firstLeafNodeId;\n  }\n\n  /**\n   * Replace a node. This is used when we want to revert a node back to a\n   * previous version in the authoring tool.\n   * @param nodeId the node id\n   * @param node the node object\n   */\n  replaceNode(nodeId, node) {\n\n    if (nodeId != null && node != null) {\n\n      // set the id to node mapping\n      this.setIdToNode(nodeId, node);\n\n      // set the id to element mapping\n      this.setIdToElement(nodeId, node);\n\n      // update the nodes array\n      var nodes = this.getNodes();\n\n      if (nodes != null) {\n\n        for (var n = 0; n < nodes.length; n++) {\n          var tempNode = nodes[n];\n\n          if (tempNode != null) {\n            var tempNodeId = tempNode.id;\n\n            if (nodeId === tempNodeId) {\n              // we have found the node we want to replace\n              nodes.splice(n, 1, node);\n              break;\n            }\n          }\n        }\n      }\n\n      // update the application nodes array\n      var applicationNodes = this.applicationNodes;\n\n      if (applicationNodes != null) {\n        for (var a = 0; a < applicationNodes.length; a++) {\n          var tempApplicationNode = applicationNodes[a];\n\n          if (tempApplicationNode != null) {\n            var tempApplicationNodeId = tempApplicationNode.id;\n\n            if (nodeId === tempApplicationNodeId) {\n              // we have found the node we want to replace\n              applicationNodes.splice(a, 1, node);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a node is a planning node\n   * @param nodeId the node id\n   * @returns whether the node is a planning node\n   */\n  isPlanning(nodeId) {\n    var result = false;\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        if (node.planning) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if a node is a planning node instance\n   * @param nodeId the node id\n   * @returns whether the node is a planning node instance\n   */\n  isPlanningInstance(nodeId) {\n    var result = false;\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node.planningNodeTemplateId) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the available planning node ids for a node\n   * @param nodeId the node we want available planning nodes for\n   * @returns an array of available planning node ids\n   */\n  getAvailablePlanningNodeIds(nodeId) {\n    var availablePlanningNodeIds = [];\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null && node.availablePlanningNodeIds != null) {\n        availablePlanningNodeIds = node.availablePlanningNodeIds;\n      }\n    }\n\n    return availablePlanningNodeIds;\n  }\n\n  /**\n   * Get the available planning nodes for a given group\n   * @param nodeId the node id of the group\n   * @returns an array of planning node templates\n   */\n  getAvailablePlanningNodes(nodeId) {\n    var availablePlanningNodesSoFar = [];\n\n    if (nodeId != null) {\n      var node = this.getNodeById(nodeId);\n\n      if (node != null && node.availablePlanningNodes != null) {\n        let availablePlanningNodes = node.availablePlanningNodes;\n\n        // loop through all the nodes and retrieve the actual node\n        for (var availablePlanningNode of availablePlanningNodes) {\n\n          if (availablePlanningNode != null) {\n\n            // get the node\n            var availablePlanningNodeActual = this.getNodeById(availablePlanningNode.nodeId);\n\n            if (availablePlanningNodeActual != null) {\n              if (availablePlanningNode.max != null) {\n                availablePlanningNodeActual.max = availablePlanningNode.max;\n              }\n              availablePlanningNodesSoFar.push(availablePlanningNodeActual);\n            }\n          }\n        }\n      }\n    }\n\n    return availablePlanningNodesSoFar;\n  }\n\n  /**\n   * Create a planning node instance and add it to the project\n   * @param groupId the group id to add the planning node instance to\n   * @param nodeId the node id of the planning node template\n   */\n  createPlanningNodeInstance(groupId, nodeId, nextAvailablePlanningNodeId) {\n\n    var planningNodeInstance = null;\n\n    if (nodeId != null && nextAvailablePlanningNodeId != null) {\n      // get the planning node template\n      var node = this.getNodeById(nodeId);\n\n      // create a planning node instance by copying the planning node template\n      planningNodeInstance = this.copyNode(nodeId);\n\n      // set the template id to point back to the planning template node\n      planningNodeInstance.planningNodeTemplateId = nodeId;\n\n      // set the planning node instance node id\n      planningNodeInstance.id = nextAvailablePlanningNodeId;\n    }\n\n    return planningNodeInstance;\n  }\n\n  /**\n   * Add a planning node instance inside a group node\n   * @param nodeIdToInsertInside the group id to insert into\n   * @param planningNodeInstance the planning node instance to add\n   */\n  addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance) {\n    // get the node id\n    var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n    // add an entry in our mapping data structures of node id to object\n    this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n    this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n    // add the node to the nodes array in the project\n    this.addNode(planningNodeInstance);\n\n    // update the transitions\n    this.insertNodeInsideInTransitions(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n    // update the child ids of the group\n    this.insertNodeInsideInGroups(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n    // recalculate all the position values in the group\n    this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n    /*\n     * set the order of the planning node instance so that it shows up\n     * in the select step drop down in the correct order\n     */\n    this.setNodeOrder(this.rootNode, 0);\n  }\n\n  /**\n   * Add a planning node instance after a node\n   * @param nodeIdToInsertAfter the node to insert after\n   * @param planningNodeInstance the planning node instance to add\n   */\n  addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance) {\n    // get the node id\n    var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n    // add an entry in our mapping data structures of node id to object\n    this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n    this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n    // add the node to the nodes array in the project\n    this.addNode(planningNodeInstance);\n\n    // update the transitions\n    this.insertNodeAfterInTransitions(planningNodeInstance, nodeIdToInsertAfter);\n\n    // update the child ids of the group\n    this.insertNodeAfterInGroups(planningNodeInstanceNodeId, nodeIdToInsertAfter);\n\n    var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n    if (parentGroup != null) {\n      var parentGroupId = parentGroup.id;\n\n      // recalculate all the position values in the group\n      this.recalculatePositionsInGroup(parentGroupId);\n    }\n\n    /*\n     * set the order of the planning node instance so that it shows up\n     * in the select step drop down in the correct order\n     */\n    this.setNodeOrder(this.rootNode, 0);\n  }\n\n  /**\n   * Move a planning node instance inside a group\n   * @param nodeIdToMove the node to move\n   * @param nodeIdToInsertInside the group to move the node into\n   */\n  movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToInsertInside) {\n\n    // move the node inside the group node\n    this.moveNodesInside([nodeIdToMove], nodeIdToInsertInside);\n\n    // recalculate all the position values in the group\n    this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n    /*\n     * set the order of the planning node instance so that it shows up\n     * in the select step drop down in the correct order\n     */\n    this.setNodeOrder(this.rootNode, 0);\n  }\n\n  /**\n   * Move a planning node instance after a node\n   * @param nodeIdToMove the node to move\n   * @param nodeIdToInsertAfter the other node to move the node after\n   */\n  movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToInsertAfter) {\n\n    // move the node after the other node\n    this.moveNodesAfter([nodeIdToMove], nodeIdToInsertAfter);\n\n    var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n    if (parentGroup != null) {\n      var parentGroupId = parentGroup.id;\n\n      // recalculate all the position values in the group\n      this.recalculatePositionsInGroup(parentGroupId);\n    }\n\n    /*\n     * set the order of the planning node instance so that it shows up\n     * in the select step drop down in the correct order\n     */\n    this.setNodeOrder(this.rootNode, 0);\n  }\n\n  /**\n   * Recalculate the positions of the children in the group.\n   * The positions are the numbers usually seen before the title\n   * e.g. if the step is seen as 1.3: Gather Evidence, then 1.3\n   * is the position\n   * @param groupId recalculate all the children of this group\n   */\n  recalculatePositionsInGroup(groupId) {\n\n    if (groupId != null) {\n      let childIds = this.getChildNodeIdsById(groupId);\n\n      // loop through all the children\n      for (let childId of childIds) {\n\n        // calculate the position of the child id\n        let pos = this.getPositionById(childId);\n\n        // set the mapping of node id to position\n        this.setIdToPosition(childId, pos);\n      }\n    }\n  }\n\n  /**\n   * Get the message that describes how to disable the constraint\n   * @param nodeId the node the student is trying to go to\n   * @param constraint the constraint that is preventing the student\n   * from going to the node\n   * @returns the message to display to the student that describes how\n   * to disable the constraint\n   */\n  getConstraintMessage(nodeId, constraint) {\n\n    var message = '';\n\n    if (nodeId != null && constraint != null) {\n\n      // get the node title the student is trying to go to\n      var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n\n      var removalConditional = constraint.removalConditional;\n      var removalCriteria = constraint.removalCriteria;\n\n      if (removalCriteria != null) {\n        var criteriaMessages = '';\n\n        // loop through all the criteria\n        for (var tempRemovalCriteria of removalCriteria) {\n          if (tempRemovalCriteria != null) {\n\n            // get the message that describes the criteria that needs to be satisfied\n            var criteriaMessage = this.getCriteriaMessage(tempRemovalCriteria);\n\n            if (criteriaMessage != null && criteriaMessage != '') {\n              // separate criteria messages with a line break\n              if (criteriaMessages != '') {\n                criteriaMessages += '<br/>';\n              }\n              criteriaMessages += criteriaMessage;\n            }\n          }\n        }\n\n        message += criteriaMessages;\n      }\n    }\n\n    return message;\n  }\n\n  /**\n   * Get the message that describes how to satisfy the criteria\n   * TODO: check if the criteria is satisfied\n   * @param criteria the criteria object that needs to be satisfied\n   * @returns the message to display to the student that describes how to\n   * satisfy the criteria\n   */\n  getCriteriaMessage(criteria) {\n    var message = '';\n\n    if (criteria != null) {\n      var name = criteria.name;\n      var params = criteria.params;\n\n      if (name === 'isCompleted') {\n        var nodeId = params.nodeId;\n        if (nodeId != null) {\n          var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isVisited') {\n        var nodeId = params.nodeId;\n        if (nodeId != null) {\n          var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('visitNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'isCorrect') {\n        var nodeId = params.nodeId;\n        if (nodeId != null) {\n          var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('correctlyAnswerNodeTitle', { nodeTitle: nodeTitle });\n        }\n      } else if (name === 'score') {\n        var nodeId = params.nodeId;\n        var nodeTitle = '';\n        var scoresString = '';\n\n        if (nodeId != null) {\n          // get the step number and title\n          nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n        }\n\n        var scores = params.scores;\n\n        if (scores != null) {\n          // get the required score\n          scoresString = scores.join(', ');\n        }\n\n        // generate the message\n        message += this.$translate('obtainAScoreOfXOnNodeTitle', { score: scoresString, nodeTitle: nodeTitle });\n      } else if (name === 'choiceChosen') {\n\n      } else if (name === 'usedXSubmits') {\n        var nodeId = params.nodeId;\n        var nodeTitle = '';\n\n        // get the number of times the student must submit\n        var requiredSubmitCount = params.requiredSubmitCount;\n\n        if (nodeId != null) {\n          // get the step number and title\n          nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n        }\n\n        // generate the message\n        if (requiredSubmitCount == 1) {\n          message += this.$translate('submitXTimeOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n        } else {\n          message += this.$translate('submitXTimesOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n        }\n      } else if (name === 'branchPathTaken') {\n\n      } else if (name === 'isPlanningActivityCompleted') {\n        var nodeId = params.nodeId;\n        if (nodeId != null) {\n          var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n          message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n        }\n      }\n    }\n\n    return message;\n  }\n\n  /**\n   * Get the start id of a group\n   * @param nodeId get the start id of this group\n   * @returns the start id of the group\n   */\n  getGroupStartId(nodeId) {\n\n    var startId = null;\n\n    if (nodeId != null) {\n\n      // get the group\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        // get the start id\n        startId = node.startId;\n      }\n    }\n\n\n    return startId;\n  }\n\n  /**\n   * Get the start id of the node's parent group\n   * @param nodeId we will get the parent of this node and then look\n   * for the start id of the parent\n   * @returns the start id of the parent\n   */\n  getParentGroupStartId(nodeId) {\n    var parentGroupStartId = null;\n\n    if (nodeId != null) {\n      var parentGroup = this.getParentGroup(nodeId);\n\n      if (parentGroup != null) {\n        parentGroupStartId = parentGroup.startId;\n      }\n    }\n\n    return parentGroupStartId;\n  }\n\n  /**\n   * Update the transitions so that the fromGroup points to the newToGroup\n   *\n   * Before\n   * fromGroup -> oldToGroup -> newToGroup\n   *\n   * After\n   * fromGroup -> newToGroup\n   * oldToGroup becomes dangling and has no transitions to or from it\n   */\n  updateTransitionsForExtractingGroup(fromGroupId, oldToGroupId, newToGroupId) {\n\n    /*\n     * make the transitions\n     * fromGroup -> newToGroup\n     */\n    if (fromGroupId != null && oldToGroupId != null) {\n      var fromGroup = this.getNodeById(fromGroupId);\n      var oldToGroup = this.getNodeById(oldToGroupId);\n      var newToGroup = null;\n      var newToGroupStartId = null;\n\n      if (newToGroupId != null) {\n        newToGroup = this.getNodeById(newToGroupId);\n      }\n\n      if (newToGroup != null) {\n        newToGroupStartId = newToGroup.startId;\n      }\n\n      if (fromGroup != null && oldToGroup != null) {\n        var childIds = fromGroup.ids;\n\n        // update the children of the from group to point to the new to group\n        if (childIds != null) {\n          for (var childId of childIds) {\n            var child = this.getNodeById(childId);\n            var transitions = this.getTransitionsByFromNodeId(childId);\n\n            if (transitions != null) {\n\n              // loop through all the transitions from the from group\n              for (var t = 0; t < transitions.length; t++) {\n                var transition = transitions[t];\n\n                if (transition != null) {\n                  var toNodeId = transition.to;\n\n                  if (toNodeId === oldToGroupId) {\n                    // the transition is to the group\n                    if (newToGroupId == null && newToGroupStartId == null) {\n                      // there is no new to group so we will remove the transition\n                      transitions.splice(t, 1);\n                      t--;\n                    } else {\n                      // make the transition point to the new to group\n                      transition.to = newToGroupId;\n                    }\n                  } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                    // the transition is to a node in the group\n                    if (newToGroupId == null && newToGroupStartId == null) {\n                      // there is no new to group so we will remove the transition\n                      transitions.splice(t, 1);\n                      t--;\n                    } else if (newToGroupStartId == null || newToGroupStartId == '') {\n                      // make the transition point to the new to group\n                      transition.to = newToGroupId;\n                    } else {\n                      // make the transition point to the new group start id\n                      transition.to = newToGroupStartId;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * remove the transitions from the oldToGroup\n     */\n    if (oldToGroupId != null && newToGroupId != null) {\n\n      var oldToGroup = this.getNodeById(oldToGroupId);\n\n      if (oldToGroup != null) {\n        var childIds = oldToGroup.ids;\n\n        // remove the transitions from the old to group that point to the new to group\n        if (childIds != null) {\n          for (var childId of childIds) {\n            var child = this.getNodeById(childId);\n            var transitions = this.getTransitionsByFromNodeId(childId);\n\n            if (transitions != null) {\n\n              // loop through all the transitions from the old to group\n              for (var t = 0; t < transitions.length; t++) {\n                var transition = transitions[t];\n\n                if (transition != null) {\n                  var toNodeId = transition.to;\n\n                  if (toNodeId === newToGroupId) {\n                    // the transition is to the group so we will remove it\n                    transitions.splice(t, 1);\n                    t--;\n                  } else if (this.isNodeInGroup(toNodeId, newToGroupId)) {\n                    // the transition is to a node in the group so we will remove it\n                    transitions.splice(t, 1);\n                    t--;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the transitions so that the fromGroup points to the newToGroup\n   *\n   * Before\n   * fromGroup -> oldToGroup\n   * newToGroup is dangling and has no transitions to or from it\n   *\n   * After\n   * fromGroup -> newToGroup -> oldToGroup\n   */\n  updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId) {\n\n    var fromGroup = null;\n    var newToGroup = null;\n\n    if (fromGroupId != null) {\n      fromGroup = this.getNodeById(fromGroupId);\n    }\n\n    if (newToGroupId != null) {\n      newToGroup = this.getNodeById(newToGroupId);\n    }\n\n    /*\n     * make the transitions that point to the old group now point\n     * to the new group\n     * fromGroup -> newToGroup\n     */\n    if (fromGroup != null && newToGroup != null) {\n      var childIds = fromGroup.ids;\n      var newToGroupStartId = newToGroup.startId;\n\n      if (childIds != null) {\n\n        // loop through all the nodes in the from group\n        for (var childId of childIds) {\n          var child = this.getNodeById(childId);\n\n          // get the transitions from the child\n          var transitions = this.getTransitionsByFromNodeId(childId);\n\n          if (transitions == null || transitions.length == 0) {\n            /*\n             * the child does not have any transitions so we will make it\n             * point to the new group\n             */\n            if (newToGroupStartId == null || newToGroupStartId == '') {\n              this.addToTransition(child, newToGroupId);\n            } else {\n              this.addToTransition(child, newToGroupStartId)\n            }\n          } else if (transitions != null) {\n\n            // loop through all the transitions from the child\n            for (var transition of transitions) {\n              if (transition != null) {\n                var toNodeId = transition.to;\n\n                if (oldToGroupIds != null) {\n\n                  /*\n                   * loop through all the old to group ids to find transitions\n                   * to the old to group\n                   */\n                  for (var oldToGroupId of oldToGroupIds) {\n                    if (toNodeId === oldToGroupId) {\n                      /*\n                       * the transition is to the group so we will update the transition\n                       * to the new group\n                       */\n                      transition.to = newToGroupId;\n                    } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                      /*\n                       * the transition is to a node in the old group so we will update\n                       * the transition to point to the new group\n                       */\n                      if (newToGroupStartId == null || newToGroupStartId == '') {\n                        transition.to = newToGroupId;\n                      } else {\n                        transition.to = newToGroupStartId;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * make the steps that do not have a transition now point to the old\n     * group\n     * newToGroup -> oldToGroup\n     */\n    if (newToGroup != null) {\n      var childIds = newToGroup.ids;\n\n      if (childIds != null) {\n\n        // loop through all the children in the new group\n        for (var childId of childIds) {\n          var child = this.getNodeById(childId);\n\n          // get the transitions for the child\n          var transitions = this.getTransitionsByFromNodeId(childId);\n\n          if (transitions == null || transitions.length == 0) {\n\n            if (oldToGroupIds != null) {\n\n              // loop through all the old groups\n              for (var oldToGroupId of oldToGroupIds) {\n                var oldToGroup = this.getNodeById(oldToGroupId);\n\n                if (oldToGroup != null) {\n\n                  var oldToGroupStartId = oldToGroup.startId;\n\n                  var transition = {};\n\n                  var toNodeId = '';\n\n                  if (oldToGroupStartId == null) {\n                    // there is no start node id so we will just point to the group\n                    toNodeId = oldToGroup;\n                  } else {\n                    // there is a start node id so we will point to it\n                    toNodeId = oldToGroupStartId;\n                  }\n\n                  // create the transition from the child to the old group\n                  this.addToTransition(child, toNodeId);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the child transitions because we are moving a group. We will\n   * update the transitions into and out of the group in the location\n   * we are extracting the group from and also in the location we are\n   * inserting the group into.\n   * @param node the group we are moving\n   * @param nodeId we will put the group after this node id\n   */\n  updateChildrenTransitionsForMovingGroup(node, nodeId) {\n    var transitionsBefore = null;\n\n    // get the group nodes that point to the group we are moving\n    var previousGroupNodes = this.getGroupNodesByToNodeId(node.id);\n\n    // get all the transitions from the group we are moving\n    var transitionsAfter = this.getTransitionsByFromNodeId(node.id);\n\n    var extracted = false;\n\n    /*\n     * extract the group we are moving by updating the transitions of the\n     * from group and the new to group. also remove the transitions from the\n     * group we are moving.\n     */\n\n    // loop through all the groups that point to the group we are moving\n    for (var previousGroupNode of previousGroupNodes) {\n      if (transitionsAfter == null || transitionsAfter.length == 0) {\n        // the group we are moving does not have any transitions\n\n        /*\n         * remove the transitions to the group we are moving and make\n         * new transitions from the from group to the new to group\n         */\n        this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, null);\n        extracted = true;\n      } else {\n        // the group we are moving has transitions\n\n        // make the previous group point to the new to group\n        for (var transitionAfter of transitionsAfter) {\n          if (transitionAfter != null) {\n            var toNodeId = transitionAfter.to;\n\n            /*\n             * remove the transitions to the group we are moving and make\n             * new transitions from the from group to the new to group\n             */\n            this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, toNodeId);\n            extracted = true;\n          }\n        }\n      }\n    }\n\n    if (!extracted) {\n      /*\n       * we have not removed the transitions yet because the group\n       * we are moving does not have any groups before it\n       */\n\n      if (transitionsAfter != null) {\n        // remove the transitions from the group we are moving\n        for (var transitionAfter of transitionsAfter) {\n          if (transitionAfter != null) {\n            var toNodeId = transitionAfter.to;\n\n            // remove the transitions to the group we are moving\n            this.updateTransitionsForExtractingGroup(null, node.id, toNodeId);\n            extracted = true;\n          }\n        }\n      }\n    }\n\n    var inserted = false;\n\n    /*\n     * create the transitions from the from group to the group we are moving\n     * and the transitions from the group we are moving to the old to group\n     */\n    if (nodeId != null) {\n      // get the transitions from the previous group to the next group\n      var transitionsAfter = this.getTransitionsByFromNodeId(nodeId);\n\n      for (var transitionAfter of transitionsAfter) {\n        if (transitionAfter != null) {\n          var toNodeId = transitionAfter.to;\n\n          /*\n           * create the transitions that traverse from the from group\n           * to the group we are moving. also create the transitions\n           * that traverse from the group we are moving to the old\n           * to group.\n           */\n          this.updateTransitionsForInsertingGroup(nodeId, [toNodeId], node.id);\n          inserted = true;\n        }\n      }\n    }\n\n    if (!inserted) {\n      /*\n       * we have not inserted the transitions yet because there were no\n       * previous group transitions\n       */\n\n      if (nodeId == null) {\n        /*\n         * the previous node id is null which means there was no previous\n         * group. this means the group we are inserting will become the\n         * first group. this happens when the group we are moving\n         * is moved inside the root (group0).\n         */\n\n        var startGroupId = this.getStartGroupId();\n\n        if (startGroupId != null) {\n\n          // get the start group for the whole project (group0)\n          var startGroup = this.getNodeById(startGroupId);\n\n          if (startGroup != null) {\n\n            // get the first activity\n            var firstGroupId = startGroup.startId;\n\n            /*\n             * create the transitions that traverse from the group\n             * we are moving to the previous first activity.\n             */\n            this.updateTransitionsForInsertingGroup(nodeId, [firstGroupId], node.id);\n          }\n        }\n\n      } else {\n        /*\n         * we have not inserted the group yet because the from group doesn't\n         * have a group after it\n         */\n\n        /*\n         * create the transitions that traverse from the from group\n         * to the group we are moving.\n         */\n        this.updateTransitionsForInsertingGroup(nodeId, null, node.id);\n      }\n    }\n  }\n\n  /**\n   * Check if a component is a connected component\n   * @param nodeId the node id of the component\n   * @param componentId the component that is listening for connected changes\n   * @param connectedComponentId the component that is broadcasting connected changes\n   * @returns whether the componentId is connected to the connectedComponentId\n   */\n  isConnectedComponent(nodeId, componentId, connectedComponentId) {\n\n    var result = false;\n\n    // get the component\n    var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    if (component != null) {\n\n      var connectedComponents = component.connectedComponents;\n\n      if (connectedComponents != null) {\n\n        // loop through all the connected components\n        for (var connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n\n            /*\n             * check if the connected component id matches the one\n             * we are looking for. connectedComponent.id is the old\n             * field we used to store the component id in so we will\n             * look for that field for the sake of backwards\n             * compatibility. connectedComponent.componentId is the\n             * new field we store the component id in.\n             */\n            if (connectedComponentId === connectedComponent.id ||\n              connectedComponentId === connectedComponent.componentId) {\n              // we have found the connected component id we are looking for\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get a connected component params\n   * @param componentId the connected component id\n   * @returns the params for the connected component\n   */\n  getConnectedComponentParams(componentContent, componentId) {\n\n    var connectedComponentParams = null;\n\n    if (componentContent != null && componentId != null) {\n\n      // get the connected components\n      var connectedComponents = componentContent.connectedComponents;\n\n      if (connectedComponents != null) {\n\n        // loop through all the connected components\n        for (var connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n\n            /*\n             * check if the connected component id matches the one\n             * we are looking for. connectedComponent.id is the old\n             * field we used to store the component id in so we will\n             * look for that field for the sake of backwards\n             * compatibility. connectedComponent.componentId is the\n             * new field we store the component id in.\n             */\n            if (componentId === connectedComponent.id ||\n              componentId === connectedComponent.componentId) {\n              // we have found the connected component we are looking for\n              connectedComponentParams = connectedComponent;\n            }\n          }\n        }\n      }\n    }\n\n    return connectedComponentParams;\n  }\n\n  /**\n   * Get the active nodes.\n   * @return An array of the active node objects.\n   */\n  getActiveNodes() {\n    return this.project.nodes;\n  }\n\n  /**\n   * Get the inactive nodes\n   * @returns the inactive nodes\n   */\n  getInactiveNodes() {\n    var inactiveNodes = [];\n\n    if (this.project != null) {\n\n      if (this.project.inactiveNodes == null) {\n        this.project.inactiveNodes = [];\n      }\n\n      inactiveNodes = this.project.inactiveNodes;\n    }\n\n    return inactiveNodes;\n  }\n\n  /**\n   * Remove the node from the active nodes\n   * @param nodeId the node to remove\n   * @returns the node that we have removed\n   */\n  removeNodeFromActiveNodes(nodeId) {\n    var node = null;\n\n    if (nodeId != null) {\n      var activeNodes = this.project.nodes;\n      if (activeNodes != null) {\n        for (var a = 0; a < activeNodes.length; a++) {\n          var activeNode = activeNodes[a];\n          if (activeNode != null) {\n            if (nodeId === activeNode.id) {\n              // we have found the node we want to remove\n              node = activeNode;\n\n              // remove the node from the array\n              activeNodes.splice(a, 1);\n\n              if (activeNode.type == 'group') {\n                this.removeChildNodesFromActiveNodes(activeNode);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return node;\n  }\n\n  /**\n   * Move the child nodes of a group from the active nodes and put them into\n   * the inactive nodes.\n   * @param node The group node.\n   */\n  removeChildNodesFromActiveNodes(node) {\n    if (node != null) {\n      let childIds = node.ids;\n      for (let childId of childIds) {\n        this.removeNodeFromActiveNodes(childId);\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive nodes array\n   * @param nodeId the node to remove\n   * @returns the node that was removed\n   */\n  removeNodeFromInactiveNodes(nodeId) {\n    var node = null;\n\n    if (nodeId != null) {\n\n      let parentGroup = this.getParentGroup(nodeId);\n      if (parentGroup != null) {\n        // The node has a parent so we will remove it from the parent.\n        this.removeChildFromParent(nodeId);\n      }\n\n      // get all the inactive nodes\n      let inactiveNodes = this.project.inactiveNodes;\n\n      if (inactiveNodes != null) {\n\n        // loop through all the inactive nodes\n        for (let i = 0; i < inactiveNodes.length; i++) {\n          let inactiveNode = inactiveNodes[i];\n\n          if (inactiveNode != null) {\n            if (nodeId === inactiveNode.id) {\n              // we have found the node we want to remove\n              node = inactiveNode;\n\n              // remove the node from the array\n              inactiveNodes.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n\n      this.removeNodeFromInactiveStepNodes(nodeId);\n      this.removeNodeFromInactiveGroupNodes(nodeId);\n    }\n\n    return node;\n  }\n\n  /**\n   * Remove the child node from the parent group.\n   * @param nodeId The child node to remove from the parent.\n   */\n  removeChildFromParent(nodeId) {\n    let parentGroup = this.getParentGroup(nodeId);\n    if (parentGroup != null) {\n      // Remove the child from the parent\n      for (let i = 0; i < parentGroup.ids.length; i++) {\n        let childId = parentGroup.ids[i];\n        if (nodeId == childId) {\n          parentGroup.ids.splice(i, 1);\n          break;\n        }\n      }\n      if (nodeId == parentGroup.startId) {\n        /*\n         * The child we removed was the start id of the group so we\n         * will update the start id.\n         */\n        let startIdUpdated = false;\n        let transitions = this.getTransitionsByFromNodeId(nodeId);\n        if (transitions != null &&\n          transitions.length > 0 &&\n          transitions[0] != null &&\n          transitions[0].to != null) {\n          parentGroup.startId = transitions[0].to;\n          startIdUpdated = true;\n        }\n        if (!startIdUpdated && parentGroup.ids.length > 0) {\n          parentGroup.startId = parentGroup.ids[0];\n          startIdUpdated = true;\n        }\n        if (!startIdUpdated) {\n          parentGroup.startId = '';\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive step nodes array.\n   * @param nodeId The node id of the node we want to remove from the\n   * inactive step nodes array.\n   */\n  removeNodeFromInactiveStepNodes(nodeId) {\n    for (let i = 0; i < this.inactiveStepNodes.length; i++) {\n      let inactiveStepNode = this.inactiveStepNodes[i];\n      if (nodeId == inactiveStepNode.id) {\n        this.inactiveStepNodes.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Remove the node from the inactive group nodes array.\n   * @param nodeId The node id of the group we want to remove from the\n   * inactive group nodes array.\n   */\n  removeNodeFromInactiveGroupNodes(nodeId) {\n    for (let i = 0; i < this.inactiveGroupNodes.length; i++) {\n      let inactiveGroupNode = this.inactiveGroupNodes[i];\n      if (nodeId == inactiveGroupNode.id) {\n        this.inactiveGroupNodes.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Load the inactive nodes\n   * @param nodes the inactive nodes\n   */\n  loadInactiveNodes(nodes) {\n\n    if (nodes != null) {\n      for (var node of nodes) {\n        if (node != null) {\n          var nodeId = node.id;\n\n          // set the node into the mapping data structures\n          this.setIdToNode(nodeId, node);\n          this.setIdToElement(nodeId, node);\n          if (node.type == 'group') {\n            this.inactiveGroupNodes.push(node);\n          } else {\n            this.inactiveStepNodes.push(node);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the node is active\n   * @param nodeId the node to check\n   * @param componentId (optional) the component to check\n   * @returns whether the node or component is active\n   */\n  isActive(nodeId, componentId) {\n\n    if (nodeId != null) {\n\n      if (nodeId === 'inactiveNodes') {\n        // this occurs when the author puts a step into the inactive nodes\n        return false;\n      } else if (nodeId === 'inactiveGroups') {\n        // this occurs when the author puts a group into the inactive groups\n        return false;\n      } else if (this.isGroupNode(nodeId)) {\n        return this.isGroupActive(nodeId);\n      } else {\n        // the node is a step node\n\n        // get all the active nodes\n        var activeNodes = this.project.nodes;\n\n        if (activeNodes != null) {\n\n          // loop through all the active nodes\n          for (var activeNode of activeNodes) {\n\n            if (activeNode != null) {\n\n              // get the active node id\n              var activeNodeId = activeNode.id;\n\n              if (nodeId == activeNodeId) {\n                // we have found the node id we are looking for\n\n                if (componentId != null) {\n                  // we need to find the node id and component id\n\n                  // get the components in the node\n                  var activeComponents = activeNode.components;\n\n                  if (activeComponents != null) {\n\n                    // loop through all the components\n                    for (var activeComponent of activeComponents) {\n\n                      if (activeComponent != null) {\n                        var activeComponentId = activeComponent.id;\n\n                        if (componentId == activeComponentId) {\n                          /*\n                           * we have found the component id we are\n                           * looking for so we are done\n                           */\n                          return true;\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  //we only need to find the node id so we are done\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if a group is active.\n   * @param nodeId the node id of the group\n   */\n  isGroupActive(nodeId) {\n    for (let activeNode of this.project.nodes) {\n      if (nodeId == activeNode.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Move the node to the active nodes array\n   */\n  moveToActive(node) {\n    if (node != null) {\n\n      // make sure the node is inactive\n      if (!this.isActive(node.id)) {\n        // the node is inactive so we will move it to the active array\n\n        // remove the node from inactive nodes array\n        this.removeNodeFromInactiveNodes(node.id);\n\n        // add the node to the active array\n        this.addNode(node);\n\n        if (this.isGroupNode(node.id)) {\n          /*\n           * This is a group node so we will also move all of its\n           * children to active.\n           */\n          let childIds = node.ids;\n          for (let childId of childIds) {\n            let childNode = this.removeNodeFromInactiveNodes(childId);\n            this.addNode(childNode);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Move the node to the inactive nodes array\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  moveToInactive(node, nodeIdToInsertAfter) {\n    if (node != null) {\n\n      // make sure the node is active\n      if (this.isActive(node.id)) {\n        // the node is active so we will move it to the inactive array\n\n        // remove the node from the active array\n        this.removeNodeFromActiveNodes(node.id);\n\n        // add the node to the inactive array\n        this.addInactiveNode(node, nodeIdToInsertAfter);\n      }\n    }\n  }\n\n  /**\n   * Add the node to the inactive nodes array\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  addInactiveNode(node, nodeIdToInsertAfter) {\n    if (node != null) {\n      var inactiveNodes = this.project.inactiveNodes;\n\n      if (inactiveNodes != null) {\n\n        // clear the transitions from this node\n        if (node.transitionLogic != null) {\n          node.transitionLogic.transitions = [];\n        }\n\n        if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveNodes' || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveGroups') {\n          // put the node at the beginning of the inactive steps\n          inactiveNodes.splice(0, 0, node);\n        } else {\n          // put the node after one of the inactive nodes\n\n          var added = false;\n\n          // loop through all the inactive nodes\n          for (var i = 0; i < inactiveNodes.length; i++) {\n            var inactiveNode = inactiveNodes[i];\n\n            if (inactiveNode != null) {\n              if (nodeIdToInsertAfter === inactiveNode.id) {\n                // we have found the position to place the node\n                inactiveNodes.splice(i + 1, 0, node);\n                added = true;\n              }\n            }\n          }\n\n          if (!added) {\n            /*\n             * we haven't added the node yet so we will just add it\n             * to the end of the array\n             */\n            inactiveNodes.push(node);\n          }\n        }\n\n        if (node.type == 'group') {\n          this.inactiveGroupNodes.push(node.id);\n          this.addGroupChildNodesToInactive(node);\n        } else {\n          this.inactiveStepNodes.push(node.id);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a group's child nodes to the inactive nodes.\n   * @param node The group node.\n   */\n  addGroupChildNodesToInactive(node) {\n    if (node != null) {\n      let childIds = node.ids;\n      for (let childId of childIds) {\n        let childNode = this.getNodeById(childId);\n        this.project.inactiveNodes.push(childNode);\n        this.inactiveStepNodes.push(childNode);\n      }\n    }\n  }\n\n  /**\n   * Move an inactive node within the inactive nodes array\n   * @param node the node to move\n   * @param nodeIdToInsertAfter place the node after this\n   */\n  moveInactiveNode(node, nodeIdToInsertAfter) {\n\n    if (node != null) {\n      var inactiveNodes = this.project.inactiveNodes;\n\n      if (inactiveNodes != null) {\n\n        // remove the node from inactive nodes\n\n        // loop through all the inactive nodes\n        for (var i = 0; i < inactiveNodes.length; i++) {\n          var inactiveNode = inactiveNodes[i];\n\n          if (inactiveNode != null) {\n            if (node.id === inactiveNode.id) {\n              // we have found the node we want to remove\n              inactiveNodes.splice(i, 1);\n            }\n          }\n        }\n\n        // add the node back into the inactive nodes\n\n        if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveNodes') {\n          // put the node at the beginning of the inactive nodes\n          inactiveNodes.splice(0, 0, node);\n        } else {\n          // put the node after one of the inactive nodes\n\n          var added = false;\n\n          // loop through all the inactive nodes\n          for (var i = 0; i < inactiveNodes.length; i++) {\n            var inactiveNode = inactiveNodes[i];\n\n            if (inactiveNode != null) {\n              if (nodeIdToInsertAfter === inactiveNode.id) {\n                // we have found the position to place the node\n                inactiveNodes.splice(i + 1, 0, node);\n                added = true;\n              }\n            }\n          }\n\n          if (!added) {\n            /*\n             * we haven't added the node yet so we will just add it\n             * to the end of the array\n             */\n            inactiveNodes.push(node);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove transitions that go into the group\n   * @param nodeId the group id\n   */\n  removeTransitionsIntoGroup(nodeId) {\n\n    if (nodeId != null) {\n\n      var group = this.getNodeById(nodeId);\n\n      if (group != null) {\n        var childIds = group.ids;\n\n        if (childIds != null) {\n\n          // loop through all the children\n          for (var childId of childIds) {\n            if (childId != null) {\n              this.removeTransitionsThatPointToNodeIdFromOutsideGroup(childId);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove the transitions that point to the node that does not have\n   * the same parent\n   * @param nodeId remove transitions to this node\n   */\n  removeTransitionsThatPointToNodeIdFromOutsideGroup(nodeId) {\n\n    if (nodeId != null) {\n\n      // get the parent of the node\n      var parentGroupId = this.getParentGroupId(nodeId);\n\n      // get all the nodes that point to the node\n      var nodesThatPointToTargetNode = this.getNodesByToNodeId(nodeId);\n\n      if (nodesThatPointToTargetNode != null) {\n\n        // loop through all the nodes that point to the node\n        for (var nodeThatPointsToTargetNode of nodesThatPointToTargetNode) {\n\n          if (nodeThatPointsToTargetNode != null) {\n\n            // get the parent of the node that points to the node target node\n            var nodeThatPointsToTargetNodeParentGroupId = this.getParentGroupId(nodeThatPointsToTargetNode.id);\n\n            if (parentGroupId != nodeThatPointsToTargetNodeParentGroupId) {\n              /*\n               * the parent groups are different so we will remove\n               * the transition\n               */\n              this.removeTransition(nodeThatPointsToTargetNode, nodeId);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a transition\n   * @param node remove a transition in this node\n   * @param toNodeId remove the transition that goes to this node id\n   */\n  removeTransition(node, toNodeId) {\n\n    if (node != null && toNodeId != null) {\n\n      var transitionLogic = node.transitionLogic;\n\n      if (transitionLogic != null) {\n        var transitions = transitionLogic.transitions;\n\n        if (transitions != null) {\n\n          // loop through all the transitions\n          for (var t = 0; t < transitions.length; t++) {\n            var transition = transitions[t];\n\n            if (transition != null) {\n              if (toNodeId === transition.to) {\n                // we have found a transition that goes to the toNodeId\n\n                // remove the transition\n                transitions.splice(t, 1);\n                t--;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove transitions that go out of the group\n   * @param nodeId the group id\n   */\n  removeTransitionsOutOfGroup(nodeId) {\n    if (nodeId != null) {\n      var group = this.getNodeById(nodeId);\n\n      if (group != null) {\n        var childIds = group.ids;\n\n        if (childIds != null) {\n\n          // loop through all the child ids\n          for (var childId of childIds) {\n\n            if (childId != null) {\n\n              // get the transitions of the child\n              var transitions = this.getTransitionsByFromNodeId(childId);\n\n              if (transitions != null) {\n\n                // loop through all the transitions\n                for (var t = 0; t < transitions.length; t++) {\n                  var transition = transitions[t];\n\n                  if (transition != null) {\n\n                    // get the to node id of the transition\n                    var toNodeId = transition.to;\n\n                    if (toNodeId != null) {\n\n                      // get the parent group id of the toNodeId\n                      var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                      if (nodeId != toNodeIdParentGroupId) {\n                        /*\n                         * the parent group is different which means it is a\n                         * transition that goes out of the group\n                         */\n\n                        // remove the transition\n                        transitions.splice(t, 1);\n                        t--;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /*\n   * Update the step transitions that point into the group we are moving\n   * For example\n   * group1 has children node1 and node2 (node2 transitions to node3)\n   * group2 has children node3 and node4 (node4 transitions to node5)\n   * group3 has children node5 and node6\n   * if we move group2 after group3 we will need to change the\n   * transition from node2 to node3 and make node2 transition to node5\n   * the result will be\n   * group1 has children node1 and node2 (node2 transitions to node5)\n   * group3 has children node5 and node6\n   * group2 has children node3 and node4 (node4 transitions to node5)\n   * note: the (node4 transition to node5) will be removed later\n   * when is called removeTransitionsOutOfGroup\n   * note: when group2 is added in a later function call, we will add\n   * the node6 to node3 transition\n   * @param groupThatTransitionsToGroupWeAreMoving the group object\n   * that transitions to the group we are moving. we may need to update\n   * the transitions of this group's children.\n   * @param groupIdWeAreMoving the group id of the group we are moving\n   */\n  updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving) {\n\n    if (groupThatTransitionsToGroupWeAreMoving != null && groupIdWeAreMoving != null) {\n      var group = this.getNodeById(groupIdWeAreMoving);\n\n      if (group != null) {\n        // get all the nodes that have a transition to the node we are removing\n        var nodesByToNodeId = this.getNodesByToNodeId(groupIdWeAreMoving);\n\n        // get the transitions of the node we are removing\n        var nodeToRemoveTransitionLogic = group.transitionLogic;\n        var nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n          nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        if (nodeToRemoveTransitions.length == 0) {\n          /*\n           * The group we are moving is the last group in the project\n           * and does not have any transitions. We will loop through\n           * all the nodes that transition into this group and remove\n           * those transitions.\n           */\n\n          // get child ids of the group that comes before the group we are moving\n          var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n          if (childIds != null) {\n\n            // loop through all the children\n            for (var childId of childIds) {\n\n              var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n              if (transitionsFromChild != null) {\n\n                // loop through all the transitions from the child\n                for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                  var transitionFromChild = transitionsFromChild[tfc];\n\n                  if (transitionFromChild != null) {\n                    var toNodeId = transitionFromChild.to;\n\n                    // get the parent group id of the toNodeId\n                    var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                    if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                      // the transition is to a child in the group we are moving\n\n                      // remove the transition\n                      transitionsFromChild.splice(tfc, 1);\n\n                      /*\n                       * move the counter back one because we have just removed an\n                       * element from the array\n                       */\n                      tfc--;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else if (nodeToRemoveTransitions.length > 0) {\n\n          // get the first group that comes after the group we are removing\n          var firstNodeToRemoveTransition = nodeToRemoveTransitions[0];\n          var firstNodeToRemoveTransitionToNodeId = firstNodeToRemoveTransition.to;\n\n          if (this.isGroupNode(firstNodeToRemoveTransitionToNodeId)) {\n\n            // get the group that comes after the group we are moving\n            var groupNode = this.getNodeById(firstNodeToRemoveTransitionToNodeId);\n\n            // get child ids of the group that comes before the group we are moving\n            var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n            if (childIds != null) {\n\n              // loop through all the children\n              for (var childId of childIds) {\n                var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                if (transitionsFromChild != null) {\n\n                  // loop through all the transitions from the child\n                  for (var transitionFromChild of transitionsFromChild) {\n                    if (transitionFromChild != null) {\n                      var toNodeId = transitionFromChild.to;\n\n                      // get the parent group id of the toNodeId\n                      var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                      if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                        // the transition is to a child in the group we are moving\n\n                        if (groupNode.startId == null) {\n                          // change the transition to point to the after group\n                          transitionFromChild.to = firstNodeToRemoveTransitionToNodeId;\n                        } else {\n                          // change the transition to point to the start id of the after group\n                          transitionFromChild.to = groupNode.startId;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the node ids and component ids in a node\n   * @param nodeId get the node ids and component ids in this node\n   * @returns an array of objects. the objects contain a node id\n   * and component id.\n   */\n  getNodeIdsAndComponentIds(nodeId) {\n\n    var nodeIdAndComponentIds = [];\n\n    if (nodeId != null) {\n\n      var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n      if (nodeContent != null) {\n\n        var components = nodeContent.components;\n\n        if (components != null) {\n\n          // loop through all the components in the node\n          for (var component of components) {\n            if (component != null) {\n\n              var componentId = component.id;\n\n              // create an object to hold the node id and component id\n              var nodeIdAndComponentId = {};\n              nodeIdAndComponentId.nodeId = nodeId;\n              nodeIdAndComponentId.componentId = componentId;\n\n              // add the object to the array\n              nodeIdAndComponentIds.push(nodeIdAndComponentId);\n            }\n          }\n        }\n      }\n    }\n\n    return nodeIdAndComponentIds;\n  }\n\n  /**\n   * Get the show previous work node ids and component ids in a node\n   * @param nodeId get the show previous work node ids and component ids in\n   * this node\n   * @returns an array of objects. the objects contain a node id\n   * and component id.\n   */\n  getShowPreviousWorkNodeIdsAndComponentIds(nodeId) {\n\n    var nodeIdAndComponentIds = [];\n\n    if (nodeId != null) {\n      var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n      if (nodeContent != null) {\n\n        var components = nodeContent.components;\n\n        if (components != null) {\n\n          // loop through all the components\n          for (var component of components) {\n            if (component != null) {\n              var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n              var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n              if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n\n                // create an object to hold the node id and component id\n                var nodeIdAndComponentId = {};\n                nodeIdAndComponentId.nodeId = showPreviousWorkNodeId;\n                nodeIdAndComponentId.componentId = showPreviousWorkComponentId;\n\n                // add the object to the array\n                nodeIdAndComponentIds.push(nodeIdAndComponentId);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return nodeIdAndComponentIds;\n  }\n\n  /**\n   * Check if we need to display the annotation to the student\n   * @param annotation the annotation\n   * @returns whether we need to display the annotation to the student\n   */\n  displayAnnotation(annotation) {\n\n    var result = true;\n\n    if (annotation != null) {\n      var nodeId = annotation.nodeId;\n      var componentId = annotation.componentId;\n\n      // get the component content\n      var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        var componentType = component.type;\n\n        // get the component service\n        var componentService = this.$injector.get(componentType + 'Service');\n\n        if (componentService != null && componentService.displayAnnotation != null) {\n          // check if we need to display the annotation to the student\n          result = componentService.displayAnnotation(component, annotation);\n          /*if (annotation.data != null && annotation.data.isGlobal && annotation.data.isPopup) {\n                        result = false;  // don't display annotation inline; it will be displayed in a popup\n                    }*/\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the global annotation properties for the specified component and score, if exists.\n   * @param component the component content\n   * @param previousScore the previousScore we want the annotation properties for, can be null, which means we just want to look at\n   * the currentScore\n   * @param currentScore the currentScore we want the annotation properties for\n   * @returns the annotation properties for the given score\n   */\n  getGlobalAnnotationGroupByScore(component, previousScore, currentScore) {\n\n    let annotationGroup = null;\n\n    if (component.globalAnnotationSettings != null && component.globalAnnotationSettings.globalAnnotationGroups != null) {\n      let globalAnnotationGroups = component.globalAnnotationSettings.globalAnnotationGroups;\n\n      for (let globalAnnotationGroup of globalAnnotationGroups) {\n        if (globalAnnotationGroup.enableCriteria != null && globalAnnotationGroup.enableCriteria.scoreSequence != null) {\n          let scoreSequence = globalAnnotationGroup.enableCriteria.scoreSequence;\n\n          if (scoreSequence != null) {\n            /*\n             * get the expected previous score and current score\n             * that will satisfy the rule\n             */\n            let previousScoreMatch = scoreSequence[0];\n            let currentScoreMatch = scoreSequence[1];\n\n            if (previousScore == null) {\n              // just matching on the current score\n              if (previousScoreMatch == \"\" &&\n                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                // found a match\n                annotationGroup = globalAnnotationGroup;\n                break;\n              }\n            } else {\n              if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                /*\n                 * the previous score and current score match the\n                 * expected scores so we have found the rule we want\n                 */\n                annotationGroup = globalAnnotationGroup;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return annotationGroup;\n  }\n\n  /**\n   * Get the notification for the given score, if exists.\n   * @param component the component content\n   * @param previousScore the previousScore we want notification for, can be null, which means we just want to look at\n   * the currentScore\n   * @param currentScore the currentScore we want notification for\n   * @returns the notification for the given score\n   */\n  getNotificationByScore(component, previousScore, currentScore) {\n\n    let notificationResult = null;\n\n    if (component.notificationSettings != null && component.notificationSettings.notifications != null) {\n      let notifications = component.notificationSettings.notifications;\n      for (let notification of notifications) {\n        if (notification.enableCriteria != null && notification.enableCriteria.scoreSequence != null) {\n          let scoreSequence = notification.enableCriteria.scoreSequence;\n\n          if (scoreSequence != null) {\n\n            /*\n             * get the expected previous score and current score\n             * that will satisfy the rule\n             */\n            let previousScoreMatch = scoreSequence[0];\n            let currentScoreMatch = scoreSequence[1];\n\n            if (previousScore == null) {\n              // just matching on the current score\n              if (previousScoreMatch == \"\" &&\n                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                // found a match\n                notificationResult = notification;\n                break;\n              }\n            } else {\n              if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                /*\n                 * the previous score and current score match the\n                 * expected scores so we have found the rule we want\n                 */\n                notificationResult = notification;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return notificationResult;\n  }\n\n  /**\n   * Returns a project template for new projects\n   */\n  getNewProjectTemplate() {\n    return {\n      \"nodes\": [\n        {\n          \"id\": \"group0\",\n          \"type\": \"group\",\n          \"title\": \"Master\",\n          \"startId\": \"group1\",\n          \"ids\": [\n            \"group1\"\n          ]\n        },\n        {\n          \"id\": \"group1\",\n          \"type\": \"group\",\n          \"title\": this.$translate('FIRST_ACTIVITY'),\n          \"startId\": \"\",\n          \"ids\": [\n          ],\n          \"icons\": {\n            \"default\": {\n              \"color\": \"#2196F3\",\n              \"type\": \"font\",\n              \"fontSet\": \"material-icons\",\n              \"fontName\": \"info\"\n            }\n          }\n        }\n      ],\n      \"constraints\": [],\n      \"startGroupId\": \"group0\",\n      \"startNodeId\": \"group0\",\n      \"navigationMode\": \"guided\",\n      \"layout\": {\n        \"template\": \"starmap|leftNav|rightNav\"\n      },\n      \"metadata\": {\n        \"title\": \"\"\n      },\n      \"notebook\": {\n        \"enabled\": false,\n        \"label\": this.$translate('NOTEBOOK'),\n        \"enableAddNew\": true,\n        \"itemTypes\": {\n          \"note\": {\n            \"type\": \"note\",\n            \"enabled\": true,\n            \"enableLink\": true,\n            \"enableAddNote\": true,\n            \"enableClipping\": true,\n            \"enableStudentUploads\": true,\n            \"requireTextOnEveryNote\": false,\n            \"label\": {\n              \"singular\": this.$translate('NOTE_LOWERCASE'),\n              \"plural\": this.$translate('NOTES_LOWERCASE'),\n              \"link\": this.$translate('NOTES'),\n              \"icon\": \"note\",\n              \"color\": \"#1565C0\"\n            }\n          },\n          \"question\": {\n            \"type\": \"question\",\n            \"enabled\": false,\n            \"enableLink\": true,\n            \"enableClipping\": true,\n            \"enableStudentUploads\": true,\n            \"label\": {\n              \"singular\": this.$translate('QUESTION_LOWER_CASE'),\n              \"plural\": this.$translate('QUESTIONS_LOWER_CASE'),\n              \"link\": this.$translate('QUESTIONS'),\n              \"icon\": \"live_help\",\n              \"color\": \"#F57C00\"\n            }\n          },\n          \"report\": {\n            \"enabled\": false,\n            \"label\": {\n              \"singular\": this.$translate('REPORT_LOWERCASE'),\n              \"plural\": this.$translate('REPORTS_LOWERCASE'),\n              \"link\": this.$translate('REPORT'),\n              \"icon\": \"assignment\",\n              \"color\": \"#AD1457\"\n            },\n            \"notes\": [\n              {\n                \"reportId\": \"finalReport\",\n                \"title\": this.$translate('FINAL_REPORT'),\n                \"description\": this.$translate('REPORT_DESCRIPTION'),\n                \"prompt\": this.$translate('REPORT_PROMPT'),\n                \"content\": this.$translate('REPORT_CONTENT')\n              }\n            ]\n          }\n        }\n      },\n      \"inactiveNodes\": []\n    };\n  }\n\n  /**\n   * Check if a node generates work by looking at all of its components\n   * @param nodeId the node id\n   * @return whether the node generates work\n   */\n  nodeHasWork(nodeId) {\n    var result = false;\n\n    if (nodeId != null) {\n\n      // get the node content object\n      var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n      if (nodeContent != null) {\n        var components = nodeContent.components;\n\n        if (components != null) {\n\n          // loop through all the components in the node\n          for (var component of components) {\n            if (component != null) {\n\n              // check if the component generates work\n              var componentHasWork = this.componentHasWork(component);\n\n              if (componentHasWork) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if a component generates work\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return whether the component generates work\n   */\n  componentHasWorkByNodeIdAndComponentId(nodeId, componentId) {\n    var result = false;\n\n    if (nodeId != null) {\n\n      // get the node content object\n      var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n      if (nodeContent != null) {\n        var components = nodeContent.components;\n\n        if (components != null) {\n\n          // loop through the components\n          for (var component of components) {\n            if (component != null && componentId == component.id) {\n              // we have found the component we are looking for\n\n              // check if the component generates work\n              var componentHasWork = this.componentHasWork(component);\n\n              if (componentHasWork) {\n                // the component generates work\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if a component generates work\n   * @param component check if this component generates work\n   * @return whether the component generates work\n   */\n  componentHasWork(component) {\n    var result = false;\n\n    if (component != null) {\n      var componentType = component.type;\n\n      // get the component service\n      var componentService = this.getComponentService(componentType);\n\n      if (componentService != null) {\n        // check if the component generates work\n        result = componentService.componentHasWork(component);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get a component service\n   * @param componentType the component type\n   * @return the component service\n   */\n  getComponentService(componentType) {\n\n    var componentService = null;\n\n    if (componentType != null) {\n\n      // get the component service name e.g. 'OpenResponseService'\n      var componentServiceName = componentType + 'Service';\n\n      /*\n       * check if we have previously retrieved the component service.\n       * if have previously retrieved the component service it will\n       * be in the componentServices map\n       */\n      componentService = this.componentServices[componentServiceName];\n\n      if (componentService == null) {\n        /*\n         * we have not previously retrieved the component service so\n         * we will get it now\n         */\n        componentService = this.$injector.get(componentServiceName);\n\n        /*\n         * save the component service to the map so we can easily\n         * retrieve it later\n         */\n        this.componentServices[componentServiceName] = componentService;\n      }\n    }\n\n    return componentService;\n  }\n\n  /**\n   * Check if a node is inactive. At the moment only step nodes can be\n   * inactive.\n   * @param nodeId the node id of the step\n   */\n  isInactive(nodeId) {\n\n    var result = false;\n\n    if (nodeId != null && this.project.inactiveNodes != null) {\n\n      // loop through all the inactive nodes\n      for (var inactiveNode of this.project.inactiveNodes) {\n\n        if (inactiveNode != null) {\n\n          if (nodeId === inactiveNode.id) {\n            /*\n             * we have found the node id we are looking for which\n             * means the node is inactive\n             */\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get an unused component id\n   * @param componentIdsToSkip (optional) An array of additional component ids\n   * to skip. This is used when we are creating multiple new components. There\n   * is avery small chance that we create duplicate component ids that aren't\n   * already in the project. We avoid this problem by using this parameter.\n   * Example\n   * We want to create two new components. We first generate a new component\n   * id for the first new component for example \"1234567890\". Then we generate\n   * a new component id for the second new component and pass in\n   * [\"1234567890\"] as componentIdsToSkip because the new \"1234567890\"\n   * component hasn't actually been added to the project yet.\n   * @return a component id that isn't already being used in the project\n   */\n  getUnusedComponentId(componentIdsToSkip) {\n    // we want to make an id with 10 characters\n    var idLength = 10;\n\n    // generate a new id\n    var newComponentId = this.UtilService.generateKey(idLength);\n\n    // check if the component id is already used in the project\n    if (this.isComponentIdUsed(newComponentId)) {\n      /*\n       * the component id is already used in the project so we need to\n       * try generating another one\n       */\n      var alreadyUsed = true;\n\n      /*\n       * keep trying to generate a new component id until we have found\n       * one that isn't already being used\n       */\n      while(!alreadyUsed) {\n        // generate a new id\n        newComponentId = this.UtilService.generateKey(idLength);\n\n        // check if the id is already being used in the project\n        alreadyUsed = this.isComponentIdUsed(newComponentId);\n\n        if (componentIdsToSkip != null && componentIdsToSkip.indexOf(newComponentId) != -1) {\n          /*\n           * the new component is in the componentIdsToSkip so it has\n           * already been used\n           */\n          alreadyUsed = true;\n        }\n      }\n    }\n\n    return newComponentId;\n  }\n\n  /**\n   * Check if the component id is already being used in the project\n   * @param componentId check if this component id is already being used in\n   * the project\n   * @return whether the component id is already being used in the project\n   */\n  isComponentIdUsed(componentId) {\n    var isUsed = false;\n\n    // loop through all the active nodes\n    for (var node of this.project.nodes) {\n\n      if (node != null) {\n        var components = node.components;\n\n        if (components != null) {\n\n          // loop through all the components\n          for (var component of components) {\n            if (component != null) {\n              if (componentId === component.id) {\n                // the component id is already being used\n                isUsed = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // loop through all the inactive nodes\n    for (var node of this.project.inactiveNodes) {\n\n      if (node != null) {\n        var components = node.components;\n\n        if (components != null) {\n\n          // loop through all the components\n          for (var component of components) {\n            if (component != null) {\n              if (componentId === component.id) {\n                // the component id is already being used\n                isUsed = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return isUsed;\n  }\n\n  /**\n   * Check if a node id is already being used in the project\n   * @param nodeId check if this node id is already being used in the project\n   * @return whether the node id is already being used in the project\n   */\n  isNodeIdUsed(nodeId) {\n    var isUsed = false;\n\n    // loop through all the active nodes\n    for (var node of this.project.nodes) {\n\n      if (node != null) {\n\n        if (nodeId === node.id) {\n          return true;\n        }\n      }\n    }\n\n    // loop through all the inactive nodes\n    for (var node of this.project.inactiveNodes) {\n\n      if (node != null) {\n\n        if (nodeId === node.id) {\n          return true;\n        }\n      }\n    }\n\n    return isUsed;\n  }\n\n  /**\n   * Copy the nodes into the project\n   * @param selectedNodes the nodes to import\n   * @param fromProjectId copy the nodes from this project\n   * @param toProjectId copy the nodes into this project\n   * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n   * new step the first step in the group. If this is a step, we will place\n   * the new step after it.\n   */\n  copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter) {\n\n    // get the import steps URL\n    var importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n    var httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = importStepsURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    // set the POST params\n    var params = {};\n    params.steps = angular.toJson(selectedNodes);\n    params.fromProjectId = fromProjectId;\n    params.toProjectId = toProjectId;\n    httpParams.data = $.param(params);\n\n    /*\n     * Make the request to import the steps. This will copy the asset files\n     * and change file names if necessary. If an asset file with the same\n     * name exists in both projects we will check if their content is the\n     * same. If the content is the same we don't need to copy the file. If\n     * the content is different, we need to make a copy of the file with a\n     * new name and change all the references in the steps to use the new\n     * name.\n     */\n    return this.$http(httpParams).then((result) => {\n\n      // get the selected nodes from the result that may have been modified\n      selectedNodes = result.data;\n\n      // get the inactive nodes from the project\n      var inactiveNodes = this.getInactiveNodes();\n\n      // used to hold all the new nodes\n      var newNodes = [];\n\n      // used to hold all the new node ids\n      var newNodeIds = [];\n\n      // loop through the nodes we will import\n      for (var selectedNode of selectedNodes) {\n\n        if (selectedNode != null) {\n\n          // make a copy of the node so that we don't modify the source\n          var tempNode = this.UtilService.makeCopyOfJSONObject(selectedNode);\n\n          // check if the node id is already being used in the current project\n          if (this.isNodeIdUsed(tempNode.id)) {\n            // the node id is already being used in the current project\n\n            // get the next available node id\n            var nextAvailableNodeId = this.getNextAvailableNodeId(newNodeIds);\n\n            // change the node id of the node we are importing\n            tempNode.id = nextAvailableNodeId;\n          }\n\n          // get the components in the node\n          var tempComponents = tempNode.components;\n\n          if (tempComponents != null) {\n\n            // loop through all the components in the node we are importing\n            for (var tempComponent of tempComponents) {\n\n              if (tempComponent != null) {\n\n                // check if the component id is already being used\n                if (this.isComponentIdUsed(tempComponent.id)) {\n                  // we are already using the component id so we will need to change it\n\n                  // find a component id that isn't currently being used\n                  var newComponentId = this.getUnusedComponentId();\n\n                  // set the new component id into the component\n                  tempComponent.id = newComponentId;\n                }\n              }\n            }\n          }\n\n          // clear the constraints\n          tempNode.constraints = [];\n\n          // add the new node and new node id to our arrays\n          newNodes.push(tempNode);\n          newNodeIds.push(tempNode.id);\n        }\n      }\n\n      if (nodeIdToInsertInsideOrAfter == null) {\n        /*\n         * the place to put the new node has not been specified so we\n         * will place it in the inactive steps section\n         */\n\n        /*\n         * Insert the node after the last inactive node. If there\n         * are no inactive nodes it will just be placed in the\n         * inactive nodes section. In the latter case we do this by\n         * setting nodeIdToInsertInsideOrAfter to 'inactiveSteps'.\n         */\n        if (inactiveNodes != null && inactiveNodes.length > 0) {\n          nodeIdToInsertInsideOrAfter = inactiveNodes[inactiveNodes.length - 1];\n        } else {\n          nodeIdToInsertInsideOrAfter = 'inactiveSteps';\n        }\n      }\n\n      // loop through all the new nodes\n      for (var newNode of newNodes) {\n        if (this.isGroupNode(nodeIdToInsertInsideOrAfter)) {\n          // we want to make the new step the first step in the given activity\n          this.createNodeInside(newNode, nodeIdToInsertInsideOrAfter);\n        } else {\n          // we want to place the new step after the given step\n          this.createNodeAfter(newNode, nodeIdToInsertInsideOrAfter);\n        }\n\n        /*\n         * Update the nodeIdToInsertInsideOrAfter so that when we are\n         * importing multiple steps, the steps get placed in the correct\n         * order.\n         *\n         * Example\n         * We are importing nodeA and nodeB and want to place them after\n         * nodeX. Therefore we want the order to be\n         *\n         * nodeX\n         * nodeA\n         * nodeB\n         *\n         * This means after we add nodeA, we must update\n         * nodeIdToInsertInsideOrAfter to be nodeA so that when we add\n         * nodeB, it will be placed after nodeA.\n         */\n        nodeIdToInsertInsideOrAfter = newNode.id;\n      }\n\n      return newNodes;\n    });\n  }\n\n  /**\n   * Get the next available constraint id for a node\n   * @param nodeId get the next available constraint id for this node\n   * e.g. node8Constraint2\n   * @return the next available constraint id for the node\n   */\n  getNextAvailableConstraintIdForNodeId(nodeId) {\n\n    var nextAvailableConstraintId = null;\n\n    if (nodeId != null) {\n\n      // an array to hold the constraint ids that are already being used\n      var usedConstraintIds = [];\n\n      // get the node\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n        var constraints = node.constraints;\n\n        if (constraints != null) {\n\n          // loop through all the constraints\n          for (var constraint of constraints) {\n            if (constraint != null) {\n              var constraintId = constraint.id;\n\n              // add the constraint id to the array of used constraint ids\n              usedConstraintIds.push(constraintId);\n            }\n          }\n        }\n      }\n\n      var foundNextAvailableConstraintId = false;\n      var counter = 1;\n\n      // loop until we have found a constraint id that hasn't been used\n      while(!foundNextAvailableConstraintId) {\n\n        // generate a constraint id\n        var potentialConstraintId = nodeId + 'Constraint' + counter;\n\n        // check if the constraint id has been used\n        if (usedConstraintIds.indexOf(potentialConstraintId) == -1) {\n          // we have found a constraint id that has not been used\n          nextAvailableConstraintId = potentialConstraintId;\n\n          // we are done looping\n          foundNextAvailableConstraintId = true;\n        } else {\n          // we have found a constraint id that has been used\n          counter++;\n        }\n      }\n    }\n\n    return nextAvailableConstraintId;\n  }\n\n  /**\n   * Set a field in the transition logic of a node\n   */\n  setTransitionLogicField(nodeId, field, value) {\n\n    if (nodeId != null && field != null) {\n\n      // get the node\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n\n        // get the transition logic\n        var transitionLogic = node.transitionLogic;\n\n        if (transitionLogic != null) {\n\n          // set the value of the field\n          transitionLogic[field] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Set the criteria params field\n   * @param criteria the criteria object\n   * @param field the field name\n   * @param value the value to set into the field\n   */\n  setCriteriaParamsField(criteria, field, value) {\n\n    if (criteria != null) {\n\n      if (criteria.params == null) {\n\n        // create a params field since it does not exist\n        criteria.params = {};\n      }\n\n      // set the value of the field\n      criteria.params[field] = value;\n    }\n  }\n\n  /**\n   * Get the criteria params field\n   * @param criteria the criteria object\n   * @param field the field name\n   */\n  getCriteriaParamsField(criteria, field) {\n\n    if (criteria != null) {\n\n      // get the params\n      var params = criteria.params;\n\n      if (params != null) {\n        // get the field value\n        return params[field];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Set the transition to value of a node\n   * @param fromNodeId the from node\n   * @param toNodeId the to node\n   */\n  setTransition(fromNodeId, toNodeId) {\n    var node = this.getNodeById(fromNodeId);\n\n    if (node != null) {\n      // get the transition logic of the node\n      var transitionLogic = node.transitionLogic;\n\n      if (transitionLogic != null) {\n\n        // get the transitions\n        var transitions = transitionLogic.transitions;\n\n        if (transitions == null || transitions.length == 0) {\n          // there are no transitions so we will create one\n          transitionLogic.transitions = [];\n\n          // create a transition object\n          var transition = {};\n          transitionLogic.transitions.push(transition);\n\n          transitions = transitionLogic.transitions;\n        }\n\n        if (transitions != null && transitions.length > 0) {\n\n          // get the first transition. we will assume there is only one transition.\n          var transition = transitions[0];\n\n          if (transition != null) {\n            // set the to value\n            transition.to = toNodeId;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the node id that comes after a given node id\n   * @param nodeId get the node id that comes after this node id\n   * @param the node id that comes after the one that is passed in as a parameter\n   */\n  getNodeIdAfter(nodeId) {\n\n    var nodeIdAfter = null;\n\n    // get an array of ordered items. each item represents a node\n    var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(this.idToOrder), 'order');\n\n    if (orderedItems != null) {\n\n      var foundNodeId = false;\n\n      // loop through all the items\n      for (var item of orderedItems) {\n\n        if (item != null) {\n          // get the node id of the item\n          var tempNodeId = item.$key;\n\n          // check if we have found the node id that was passed in as a parameter\n          if (foundNodeId) {\n            /*\n             * we have previously found the node id that was passed in which means\n             * the current temp node id is the one that comes after it\n             */\n            nodeIdAfter = tempNodeId;\n            break;\n          } else {\n\n            if (nodeId == tempNodeId) {\n              // we have found the node id that was passed in as a parameter\n              foundNodeId = true;\n            }\n          }\n        }\n      }\n    }\n\n    return nodeIdAfter;\n  }\n\n  /**\n   * Get the node ids in the branch by looking for nodes that have branch\n   * path taken constraints with the given fromNodeId and toNodeId\n   * @param fromNodeId the from node id\n   * @param toNodeId the to node id\n   * @return an array of nodes that are in the branch path\n   */\n  getNodeIdsInBranch(fromNodeId, toNodeId) {\n\n    var nodeIdsInBranch = [];\n\n    // get all the nodes in the project\n    var nodes = this.getNodes();\n\n    if (nodes != null) {\n\n      // loop through all the nodes\n      for (var node of nodes) {\n        if (node != null) {\n          if (this.hasBranchPathTakenConstraint(node, fromNodeId, toNodeId)) {\n            /*\n             * this node has the the branch path taken constraint we are\n             * looking for\n             */\n            nodeIdsInBranch.push(node.id);\n          }\n        }\n      }\n    }\n\n    this.orderNodeIds(nodeIdsInBranch);\n\n    return nodeIdsInBranch;\n  }\n\n  /**\n   * Order the node ids so that they show up in the same order as in the\n   * project.\n   * @param constraints An array of node ids.\n   * @return An array of ordered node ids.\n   */\n  orderNodeIds(nodeIds) {\n    let orderedNodeIds = this.getFlattenedProjectAsNodeIds();\n    return nodeIds.sort(this.nodeIdsComparatorGenerator(orderedNodeIds));\n  }\n\n  /**\n   * Create the node ids comparator function that is used for sorting an\n   * array of node ids.\n   * @param orderedNodeIds An array of node ids in the order in which they\n   * show up in the project.\n   * @return A comparator that orders node ids in the order in which they show\n   * up in the project.\n   */\n  nodeIdsComparatorGenerator(orderedNodeIds) {\n    return function(nodeIdA, nodeIdB) {\n      let nodeIdAIndex = orderedNodeIds.indexOf(nodeIdA);\n      let nodeIdBIndex = orderedNodeIds.indexOf(nodeIdB);\n      if (nodeIdAIndex < nodeIdBIndex) {\n        return -1;\n      } else if (nodeIdAIndex > nodeIdBIndex) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Check if a node has a branch path taken constraint\n   * @param node the node to check\n   * @param fromNodeId the from node id of the branch path taken\n   * @param toNodeId the to node id of the branch path taken\n   * @return whether the node has a branch path taken constraint with the\n   * given from node id and to node id\n   */\n  hasBranchPathTakenConstraint(node, fromNodeId, toNodeId) {\n\n    if (node != null) {\n\n      // get the constraints in the node\n      var constraints = node.constraints;\n\n      if (constraints != null) {\n\n        // loop through all the constraints\n        for (var constraint of constraints) {\n          if (constraint != null) {\n\n            // get the removal criteria of the constraint\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n\n              // loop through all the removal criterion\n              for (var removalCriterion of removalCriteria) {\n\n                if (removalCriterion != null) {\n\n                  // get the removal criterion name\n                  var name = removalCriterion.name;\n\n                  if (name == 'branchPathTaken') {\n                    // this is a branch path taken constraint\n\n                    // get the removal criterion params\n                    var params = removalCriterion.params;\n\n                    if (params != null) {\n                      if (fromNodeId == params.fromNodeId && toNodeId == params.toNodeId) {\n                        // the params match the from node id and to node id\n                        return true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Add branch path taken constraints to the node\n   * @param targetNodeId the node to add the constraints to\n   * @param fromNodeId the from node id of the branch path taken constraint\n   * @param toNodeId the to node id of the branch path taken constraint\n   */\n  addBranchPathTakenConstraints(targetNodeId, fromNodeId, toNodeId) {\n\n    if (targetNodeId != null) {\n\n      // get the node\n      var node = this.getNodeById(targetNodeId);\n\n      if (node != null) {\n\n        /*\n         * create the constraint that makes the node not visible until\n         * the given branch path is taken\n         */\n        var makeThisNodeNotVisibleConstraint = {};\n        makeThisNodeNotVisibleConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n        makeThisNodeNotVisibleConstraint.action = 'makeThisNodeNotVisible';\n        makeThisNodeNotVisibleConstraint.targetId = targetNodeId;\n        makeThisNodeNotVisibleConstraint.removalCriteria = [];\n        var notVisibleRemovalCriterion = {};\n        notVisibleRemovalCriterion.name = 'branchPathTaken';\n        notVisibleRemovalCriterion.params = {};\n        notVisibleRemovalCriterion.params.fromNodeId = fromNodeId;\n        notVisibleRemovalCriterion.params.toNodeId = toNodeId;\n        makeThisNodeNotVisibleConstraint.removalConditional = 'all';\n        makeThisNodeNotVisibleConstraint.removalCriteria.push(notVisibleRemovalCriterion);\n        node.constraints.push(makeThisNodeNotVisibleConstraint);\n\n        /*\n         * create the constraint that makes the node not visitable until\n         * the given branch path is taken\n         */\n        var makeThisNodeNotVisitableConstraint = {};\n        makeThisNodeNotVisitableConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n        makeThisNodeNotVisitableConstraint.action = 'makeThisNodeNotVisitable';\n        makeThisNodeNotVisitableConstraint.targetId = targetNodeId;\n        makeThisNodeNotVisitableConstraint.removalCriteria = [];\n        var notVisitableRemovalCriterion = {};\n        notVisitableRemovalCriterion.name = 'branchPathTaken';\n        notVisitableRemovalCriterion.params = {};\n        notVisitableRemovalCriterion.params.fromNodeId = fromNodeId;\n        notVisitableRemovalCriterion.params.toNodeId = toNodeId;\n        makeThisNodeNotVisitableConstraint.removalConditional = 'all';\n        makeThisNodeNotVisitableConstraint.removalCriteria.push(notVisitableRemovalCriterion);\n        node.constraints.push(makeThisNodeNotVisitableConstraint);\n      }\n    }\n  }\n\n  /**\n   * Remove the branch path taken constraints from a node\n   * @param nodeId remove the constraints from this node\n   */\n  removeBranchPathTakenNodeConstraints(nodeId) {\n\n    // get a node\n    var node = this.getNodeById(nodeId);\n\n    if (node != null) {\n\n      // get the constraints\n      var constraints = node.constraints;\n\n      if (constraints != null) {\n\n        // loop through all the constraints\n        for (var c = 0; c < constraints.length; c++) {\n          var constraint = constraints[c];\n\n          if (constraint != null) {\n\n            // get the removal criteria\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n\n              // loop through all the removal criteria\n              for (var removalCriterion of removalCriteria) {\n\n                if (removalCriterion != null) {\n                  if (removalCriterion.name == 'branchPathTaken') {\n                    // this is a branch path taken removal criterion\n                    var params = removalCriterion.params;\n\n                    // remove the constraint\n                    constraints.splice(c, 1);\n\n                    // move the counter back one because we just removed a constraint\n                    c--;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the branch path taken constraints from a node\n   * @param nodeId get the branch path taken constraints from this node\n   * @return an array of branch path taken constraints from the node\n   */\n  getBranchPathTakenConstraintsByNodeId(nodeId) {\n\n    var branchPathTakenConstraints = [];\n\n    if (nodeId != null) {\n\n      // get the node\n      var node = this.getNodeById(nodeId);\n\n      if (node != null) {\n\n        // get the constraints from the node\n        var constraints = node.constraints;\n\n        if (constraints != null) {\n\n          // loop through all the constraints\n          for (var constraint of constraints) {\n            if (constraint != null) {\n\n              // get the removal criteria from the constraint\n              var removalCriteria = constraint.removalCriteria;\n\n              if (removalCriteria != null) {\n\n                // loop through all the removal criteria\n                for (var removalCriterion of removalCriteria) {\n                  if (removalCriterion != null) {\n                    if (removalCriterion.name == 'branchPathTaken') {\n                      /*\n                       * we have found a branch path taken constraint so\n                       * we will add the constraint to the array\n                       */\n                      branchPathTakenConstraints.push(constraint);\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return branchPathTakenConstraints;\n  }\n\n  /**\n   * Update the branch path taken constraint\n   * @param node update the branch path taken constraints in this node\n   * @param currentFromNodeId the current from node id\n   * @param currentToNodeId the current to node id\n   * @param newFromNodeId the new from node id\n   * @param newToNodeId the new to node id\n   */\n  updateBranchPathTakenConstraint(node, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId) {\n\n    if (node != null) {\n      var constraints = node.constraints;\n\n      if (constraints != null) {\n\n        // loop through all the constraints for the node\n        for (var constraint of constraints) {\n          if (constraint != null) {\n\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalCriteria != null) {\n\n              // loop through all the removal criteria\n              for (var removalCriterion of removalCriteria) {\n                if (removalCriterion != null) {\n\n                  if (removalCriterion.name === 'branchPathTaken') {\n                    // we have found a branchPathTaken removal criterion\n\n                    var params = removalCriterion.params;\n\n                    if (params != null) {\n\n                      if (params.fromNodeId === currentFromNodeId &&\n                        params.toNodeId === currentToNodeId) {\n\n                        /*\n                         * we have found a branchPathTaken removal criterion\n                         * with the fromNodeId and toNodeId that we are\n                         * looking for so we will now update the values\n                         */\n                        params.fromNodeId = newFromNodeId;\n                        params.toNodeId = newToNodeId;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the project level rubric\n   * @return the project level rubric\n   */\n  getProjectRubric() {\n    return this.project.rubric;\n  }\n\n  /**\n   * Set the project level rubric\n   */\n  setProjectRubric(html) {\n    this.project.rubric = html;\n  }\n\n  /**\n   * Check if a node is a branch point\n   * @param nodeId the node id\n   * @return whether the node is a branch point\n   */\n  isBranchPoint(nodeId) {\n\n    var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n    if (transitions != null) {\n      if (transitions.length > 1) {\n        /*\n         * the node contains more than one transition which means it is\n         * a branch point\n         */\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if a node is the first node in a branch path\n   * @param nodeId the node id\n   * @return whether the node is the first node in a branch path\n   */\n  isFirstNodeInBranchPath(nodeId) {\n\n    var nodes = this.getNodes();\n\n    if (nodes != null) {\n      for (var node of nodes) {\n        if (node != null &&\n          node.transitionLogic != null &&\n          node.transitionLogic.transitions != null) {\n\n          var transitions = node.transitionLogic.transitions;\n\n          if (transitions.length > 1) {\n            /*\n             * there is more than one transition from this node\n             * which means it is a branch point\n             */\n\n            for (var transition of transitions) {\n              if (transition != null) {\n                var transitionTo = transition.to;\n\n                if (transitionTo === nodeId) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the node is in any branch path\n   * @param nodeId the node id of the node\n   * @return whether the node is in any branch path\n   */\n  isNodeInAnyBranchPath(nodeId) {\n\n    var result = false;\n\n    if (this.nodeIdToIsInBranchPath[nodeId] == null) {\n      /*\n       * we have not calculated whether the node id is in a branch path\n       * before so we will now\n       */\n\n      // get the branches in the project\n      var branches = this.getBranches();\n\n      // check if the node id is in any of the branches\n      result = this.isNodeIdInABranch(branches, nodeId);\n\n      // remember the result for this node id\n      this.nodeIdToIsInBranchPath[nodeId] = result;\n    } else {\n      /*\n       * we have calculated whether the node id is in a branch path\n       * before\n       */\n      result = this.nodeIdToIsInBranchPath[nodeId];\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if a node is a branch start point\n   * @param nodeId look for a branch with this start node id\n   * @return whether the node is a branch start point\n   */\n  isBranchStartPoint(nodeId) {\n\n    /*\n     * Get all the branches. Each branch is represented as an object that\n     * contains the branchStartPoint, branchEndPoint, and branchPaths.\n     */\n    var branches = this.getBranches();\n\n    if (branches != null) {\n\n      // loop through all the branches\n      for (var branch of branches) {\n        if (branch != null) {\n          if (branch.branchStartPoint == nodeId) {\n            /*\n             * we have found a branch with the given nodeId as the\n             * start point\n             */\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if a node is a branch end point\n   * @param nodeId look for a branch with this end node id\n   * @return whether the node is a branch end point\n   */\n  isBranchMergePoint(nodeId) {\n\n    /*\n     * Get all the branches. Each branch is represented as an object that\n     * contains the branchStartPoint, branchEndPoint, and branchPaths.\n     */\n    var branches = this.getBranches();\n\n    if (branches != null) {\n\n      // loop through all the branches\n      for (var branch of branches) {\n        if (branch != null) {\n          if (branch.branchEndPoint == nodeId) {\n            /*\n             * we have found a branch with the given nodeId as the\n             * end point\n             */\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get all the branches whose branch start point is the given node id\n   * @param nodeId the branch start point\n   * @return an array of branches that have the given branch start point\n   */\n  getBranchesByBranchStartPointNodeId(nodeId) {\n\n    var branches = [];\n\n    // get all the branches in the project\n    var allBranches = this.getBranches();\n\n    if (allBranches != null) {\n\n      // loop through all the branches in the project\n      for (var branch of allBranches) {\n        if (branch != null) {\n\n          if (nodeId == branch.branchStartPoint) {\n            /*\n             * the branch start point matches the node id we are\n             * looking for\n             */\n            branches.push(branch);\n          }\n        }\n      }\n    }\n\n    return branches;\n  }\n\n  /**\n   * Calculate the node numbers and set them into the nodeIdToNumber map\n   */\n  calculateNodeNumbers() {\n\n    // clear the node id to number mapping\n    this.nodeIdToNumber = {};\n\n    // clear the node id to branch path letter mapping\n    this.nodeIdToBranchPathLetter = {};\n\n    // get the start node id\n    var startNodeId = this.getStartNodeId();\n\n    var currentActivityNumber = 0;\n    var currentStepNumber = 0;\n\n    /*\n     * recursively calculate the node numbers by traversing the project\n     * tree\n     */\n    this.calculateNodeNumbersHelper(startNodeId, currentActivityNumber, currentStepNumber);\n  }\n\n  /**\n   * Recursively calcualte the node numbers by traversing the project tree\n   * using transitions\n   * @param nodeId the current node id we are on\n   * @param currentActivityNumber the current activity number\n   * @param currentStepNumber the current step number\n   * @param branchLetterCode (optional) the character code for the branch\n   * letter e.g. 1=A, 2=B, etc.\n   */\n  calculateNodeNumbersHelper(nodeId, currentActivityNumber, currentStepNumber, branchLetterCode) {\n\n    if (nodeId != null) {\n      if (this.isApplicationNode(nodeId)) {\n        // the node is a step node\n\n        // get the node object\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n          // get the parent group of the node\n          var parentGroup = this.getParentGroup(nodeId);\n\n          if (parentGroup != null) {\n\n            // check if the parent group has previously been assigned a number\n            if (this.nodeIdToNumber[parentGroup.id] == null) {\n              /*\n               * the parent group has not been assigned a number so\n               * we will assign a number now\n               */\n\n              // set the activity number\n              currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n              /*\n               * set the current step number to 1 now that we have\n               * entered a new group\n               */\n              currentStepNumber = 1;\n\n              // set the activity number\n              this.nodeIdToNumber[parentGroup.id] = \"\" + currentActivityNumber;\n            } else {\n              /*\n               * the parent group has previously been assigned a number so we\n               * will use it\n               */\n              currentActivityNumber = this.nodeIdToNumber[parentGroup.id];\n            }\n          }\n\n          if (this.isBranchMergePoint(nodeId)) {\n            /*\n             * the node is a merge point so we will not use a letter\n             * anymore now that we are no longer in a branch path\n             */\n            branchLetterCode = null;\n          }\n\n          if (this.isBranchStartPoint(nodeId)) {\n            // the node is a branch start point\n\n            // get the branch that this node is a start point for\n            var branchesByBranchStartPointNodeId = this.getBranchesByBranchStartPointNodeId(nodeId);\n\n            // get the branch object, there should only be one\n            var branchesObject = branchesByBranchStartPointNodeId[0];\n\n            /*\n             * this is used to obtain the max step number that has\n             * been used in the branch paths so that we know what\n             * step number to give the merge end point\n             */\n            var maxCurrentStepNumber = 0;\n\n            // set the step number for the branch start point\n            this.nodeIdToNumber[nodeId] = currentActivityNumber + '.' + currentStepNumber;\n\n            // increment the step counteer\n            currentStepNumber++;\n\n            // get the branch paths\n            var branchPaths = branchesObject.branchPaths;\n\n            // loop through all the branch paths\n            for (var bp = 0; bp < branchPaths.length; bp++) {\n\n              // get a branch path\n              var branchPath = branchPaths[bp];\n\n              // step number counter for this branch path\n              var branchCurrentStepNumber = currentStepNumber;\n\n              // get the letter code e.g. 1=A, 2=B, etc.\n              var branchLetterCode = bp;\n\n              // loop through all the nodes in the branch path\n              for (var bpn = 0; bpn < branchPath.length; bpn++) {\n                if (bpn == 0) {\n\n                  /*\n                   * Recursively call calculateNodeNumbersHelper on the\n                   * first step in this branch path. This will recursively\n                   * calculate the numbers for all the nodes in this\n                   * branch path.\n                   */\n                  var branchPathNodeId = branchPath[bpn];\n                  this.calculateNodeNumbersHelper(branchPathNodeId, currentActivityNumber, branchCurrentStepNumber, branchLetterCode);\n                }\n\n                // increment the step counter for this branch path\n                branchCurrentStepNumber++;\n\n                /*\n                 * update the max current step number if we have found\n                 * a larger number\n                 */\n                if (branchCurrentStepNumber > maxCurrentStepNumber) {\n                  maxCurrentStepNumber = branchCurrentStepNumber;\n                }\n              }\n            }\n\n            // get the step number we should use for the end point\n            currentStepNumber = maxCurrentStepNumber;\n\n            var branchEndPointNodeId = branchesObject.branchEndPoint;\n\n            /*\n             * calculate the node number for the branch end point and\n             * continue calculating node numbers for the nodes that\n             * come after it\n             */\n            this.calculateNodeNumbersHelper(branchEndPointNodeId, currentActivityNumber, currentStepNumber);\n          } else {\n            // the node is not a branch start point\n\n            /*\n             * check if we have already set the number for this node so\n             * that we don't need to unnecessarily re-calculate the\n             * node number\n             */\n            if (this.nodeIdToNumber[nodeId] == null) {\n              // we have not calculated the node number yet\n\n              var number = null;\n\n              if (branchLetterCode == null) {\n                // we do not need to add a branch letter\n\n                // get the node number e.g. 1.5\n                number = currentActivityNumber + '.' + currentStepNumber;\n              } else {\n                // we need to add a branch letter\n\n                // get the branch letter\n                var branchLetter = String.fromCharCode(65 + branchLetterCode);\n\n                // get the node number e.g. 1.5 A\n                number = currentActivityNumber + '.' + currentStepNumber + ' ' + branchLetter;\n\n                // remember the branch path letter for this node\n                this.nodeIdToBranchPathLetter[nodeId] = branchLetter;\n              }\n\n              // set the number for the node\n              this.nodeIdToNumber[nodeId] = number;\n            } else {\n              /*\n               * We have calculated the node number before so we\n               * will return. This will prevent infinite looping\n               * within the project.\n               */\n              return;\n            }\n\n            // increment the step number for the next node to use\n            currentStepNumber++;\n\n            var transitions = [];\n\n            if (node.transitionLogic != null && node.transitionLogic.transitions) {\n              transitions = node.transitionLogic.transitions;\n            }\n\n            if (transitions.length > 0) {\n\n              /*\n               * loop through all the transitions, there should only\n               * be one but we will loop through them just to be complete.\n               * if there was more than one transition, it would mean\n               * this node is a branch start point in which case we\n               * would have gone inside the other block of code where\n               * this.isBranchStartPoint() is true.\n               */\n              for (var transition of transitions) {\n\n                if (transition != null) {\n                  if (this.isBranchMergePoint(transition.to)) {\n\n                  } else {\n                    this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                  }\n                }\n              }\n            } else {\n              // if there are no transitions, check if the parent group has a transition\n\n              if (parentGroup != null &&\n                parentGroup.transitionLogic != null &&\n                parentGroup.transitionLogic.transitions != null &&\n                parentGroup.transitionLogic.transitions.length > 0) {\n\n                for (var transition of parentGroup.transitionLogic.transitions) {\n                  if (transition != null) {\n                    this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        // the node is a group node\n\n        // get the node object\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n          // check if the group has previously been assigned a number\n          if (this.nodeIdToNumber[nodeId] == null) {\n            /*\n             * the group has not been assigned a number so\n             * we will assign a number now\n             */\n\n            if (nodeId == 'group0') {\n              // group 0 will always be given the activity number of 0\n              this.nodeIdToNumber[nodeId] = \"\" + 0;\n            } else {\n              // set the activity number\n              currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n              /*\n               * set the current step number to 1 now that we have\n               * entered a new group\n               */\n              currentStepNumber = 1;\n\n              // set the activity number\n              this.nodeIdToNumber[nodeId] = \"\" + currentActivityNumber;\n            }\n          } else {\n            /*\n             * We have calculated the node number before so we\n             * will return. This will prevent infinite looping\n             * within the project.\n             */\n            return;\n          }\n\n          if (node.startId != null && node.startId != '') {\n            /*\n             * calculate the node number for the first step in this\n             * activity and any steps after it\n             */\n            this.calculateNodeNumbersHelper(node.startId, currentActivityNumber, currentStepNumber, branchLetterCode);\n          } else {\n            /*\n             * this activity doesn't have a start step so we will\n             * look for a transition\n             */\n\n            if (node != null &&\n              node.transitionLogic != null &&\n              node.transitionLogic.transitions != null &&\n              node.transitionLogic.transitions.length > 0) {\n\n              // loop through all the transitions\n              for (var transition of node.transitionLogic.transitions) {\n                if (transition != null) {\n                  /*\n                   * calculate the node number for the next group\n                   * and all its children steps\n                   */\n                  this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get script for this project\n   */\n  getProjectScript() {\n    return this.project.script;\n  }\n\n  /**\n   * Retrieve the script with the provided script filename\n   * @param scriptFilename\n   */\n  retrieveScript(scriptFilename) {\n    let assetDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n    let scriptPath = assetDirectoryPath + \"/\" + scriptFilename;\n    return this.$http.get(scriptPath).then((result) => {\n      return result.data;\n    });\n  };\n\n  /**\n   * Registers an additionalProcessingFunction for the specified node and component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param additionalProcessingFunction the function to register for the node and component.\n   */\n  addAdditionalProcessingFunction(nodeId, componentId, additionalProcessingFunction) {\n    let key = nodeId + \"_\" + componentId;\n    if (this.additionalProcessingFunctionsMap[key] == null) {\n      this.additionalProcessingFunctionsMap[key] = [];\n    }\n    this.additionalProcessingFunctionsMap[key].push(additionalProcessingFunction);\n  }\n\n  /**\n   * Returns true iff the specified node and component has any registered additionalProcessingFunctions\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns true/false\n   */\n  hasAdditionalProcessingFunctions(nodeId, componentId) {\n    return this.getAdditionalProcessingFunctions(nodeId, componentId) != null;\n  }\n\n  /**\n   * Returns an array of registered additionalProcessingFunctions for the specified node and component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns an array of additionalProcessingFunctions\n   */\n  getAdditionalProcessingFunctions(nodeId, componentId) {\n    let key = nodeId + \"_\" + componentId;\n    return this.additionalProcessingFunctionsMap[key];\n  }\n\n  /**\n   * Get the previous node\n   * @param nodeId get the node id that comes before this one\n   * @return the node id that comes before\n   */\n  getPreviousNodeId(nodeId) {\n    var previousNodeId = null;\n\n    // get the node ids in the project as a flat array\n    var flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n\n    if (flattenedNodeIds != null) {\n\n      // get the index of the node id\n      var indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n\n      if (indexOfNodeId != -1) {\n\n        // get the index of the previous node id\n        var indexOfPreviousNodeId = indexOfNodeId - 1;\n\n        // get the previous node id\n        previousNodeId = flattenedNodeIds[indexOfPreviousNodeId];\n      }\n    }\n\n    return previousNodeId;\n  }\n\n  /**\n   * Get the next node\n   * @param nodeId get the node id that comes after this one\n   * @return the node id that comes after\n   */\n  getNextNodeId(nodeId) {\n\n    var nextNodeId = null;\n\n    // get the node ids in the project as a flat array\n    var flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n\n    if (flattenedNodeIds != null) {\n\n      // get the index of the node id\n      var indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n\n      if (indexOfNodeId != -1) {\n\n        // get the index of the next node id\n        var indexOfNextNodeId = indexOfNodeId + 1;\n\n        // get the next node id\n        nextNodeId = flattenedNodeIds[indexOfNextNodeId];\n      }\n    }\n\n    return nextNodeId;\n  }\n\n  /**\n   * Set the project script filename\n   * @param script the script filename\n   */\n  setProjectScriptFilename(scriptFilename) {\n    this.project.script = scriptFilename;\n  }\n\n  /**\n   * Get the project script filename\n   */\n  getProjectScriptFilename() {\n\n    var scriptFilename = null;\n\n    if (this.project != null && this.project.script != null) {\n      scriptFilename = this.project.script;\n    }\n\n    return scriptFilename;\n  }\n\n  /**\n   * Get all the achievements object in the project. The achievements object\n   * contains the isEnabled field and an array of items.\n   * @return the achievement object\n   */\n  getAchievements() {\n    var achievements = null;\n\n    if (this.project != null) {\n      if (this.project.achievements == null) {\n        this.project.achievements = {\n          isEnabled: true,\n          items: []\n        };\n      }\n      achievements = this.project.achievements;\n    }\n\n    return achievements;\n  }\n\n  /**\n   * Get the achievement items in the project\n   * @return the achievement items\n   */\n  getAchievementItems() {\n    var achievementItems = null;\n\n    // get the achievements object\n    var achievements = this.getAchievements();\n\n    if (achievements != null) {\n      if (achievements.items == null) {\n        achievements.items = [];\n      }\n\n      // get the achievement items\n      achievementItems = achievements.items;\n    }\n\n    return achievementItems;\n  }\n\n  /**\n   * Get an achievement by the 10 character alphanumeric achievement id\n   * @param achievementId the 10 character alphanumeric achievement id\n   * @return the achievement with the given achievement id\n   */\n  getAchievementByAchievementId(achievementId) {\n\n    if (achievementId != null) {\n\n      // get the achievements object\n      var achievements = this.getAchievements();\n\n      if (achievements != null) {\n\n        // get the achievement items\n        var achievementItems = achievements.items;\n\n        if (achievementItems != null) {\n\n          // loop through the achievement items\n          for (var achievement of achievementItems) {\n\n            if (achievement != null && achievement.id == achievementId) {\n              /*\n               * the achievement id matches so we have found the\n               * achievement we are looking for\n               */\n              return achievement;\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if there are any rubrics in the project. There can potentially be\n   * a project rubric, node rubrics, and component rubrics.\n   * @return whether there are any rubrics in the project\n   */\n  hasRubrics() {\n\n    if (this.project != null) {\n\n      if (this.project.rubric != null && this.project.rubric != \"\") {\n        // there is a project rubric\n        return true;\n      }\n\n      // loop through all the nodes\n      for (var node of this.project.nodes) {\n        if (node != null) {\n          if (node.rubric != null && node.rubric != \"\") {\n            // there is a node rubric\n            return true;\n          }\n\n          if (node.components != null) {\n            // loop through all the components\n            for (var component of node.components) {\n              if (component != null) {\n                if (component.rubric != null && component.rubric != \"\") {\n                  // there is a component rubric\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the branch letter in the node position string if the node is in a\n   * branch path\n   * @param nodeId the node id we want the branch letter for\n   * @return the branch letter in the node position if the node is in a branch\n   * path\n   */\n  getBranchLetter(nodeId) {\n\n    var branchLetter = null;\n\n    if (nodeId != null) {\n\n      // get the node position e.g. \"1.8\" or \"1.9 A\"\n      var nodePosition = this.getNodePositionById(nodeId);\n\n      if (nodePosition != null) {\n\n        // regex for extracting the branch letter\n        var branchLetterRegex = /.*([A-Z])/;\n\n        // run the regex on the node position string\n        var match = branchLetterRegex.exec(nodePosition);\n\n        if (match != null) {\n          /*\n           * the node position has a branch letter so we will get it\n           * from the matched group\n           */\n          branchLetter = match[1];\n        }\n      }\n    }\n\n    return branchLetter;\n  }\n\n  /**\n   * Get the total number of rubrics (step + components) for the given nodeId\n   * @param nodeId the node id\n   * @return Number of rubrics for the node\n   */\n  getNumberOfRubricsByNodeId(nodeId) {\n    let n = 0;\n    let nodeContent = this.getNodeContentByNodeId(nodeId);\n\n    if (nodeContent) {\n\n      // get the step rubric if any\n      let nodeRubric = nodeContent.rubric;\n\n      if (nodeRubric != null && nodeRubric != '') {\n        // the step has a rubric\n        n++;\n      }\n\n      // get the components\n      let components = nodeContent.components;\n\n      if (components && components.length) {\n\n        // loop through all the components\n        for (let component of components) {\n          if (component) {\n\n            // get a component rubric\n            var componentRubric = component.rubric;\n\n            if (componentRubric != null && componentRubric != '') {\n              // a component has a rubric\n              n++;\n            }\n          }\n        }\n      }\n    }\n\n    return n;\n  }\n\n  /**\n   * Copy a component and insert it into the step\n   * @param nodeId we are copying a component in this node\n   * @param componentIds the components to copy\n   * @param insertAfterComponentId Which component to place the new components\n   * after. If this is null, we will put the new components at the beginning.\n   * @return an array of the new components\n   */\n  copyComponentAndInsert(nodeId, componentIds, insertAfterComponentId) {\n\n    // get the node for which we are moving components\n    var node = this.getNodeById(nodeId);\n\n    // array of new components\n    var newComponents = [];\n\n    // array of new component ids\n    var newComponentIds = [];\n\n    // loop through all the components we want to copy\n    for (var componentId of componentIds) {\n      // create a copy of the component\n      var newComponent = this.copyComponent(nodeId, componentId, newComponentIds);\n\n      newComponents.push(newComponent);\n      newComponentIds.push(newComponent.id);\n    }\n\n    // get the components in the node\n    var components = node.components;\n\n    if (components != null) {\n\n      var insertPosition = 0;\n\n      if (insertAfterComponentId == null) {\n        // place the new components at the beginning\n        insertPosition = 0;\n      } else {\n        // place the new components after the specified component id\n        insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n      }\n\n      // loop through all the new components\n      for (var newComponent of newComponents) {\n        // insert the new component\n        components.splice(insertPosition, 0, newComponent);\n\n        /*\n         * increment the insert position for cases when we have multiple\n         * new components\n         */\n        insertPosition += 1;\n      }\n    }\n\n    return newComponents;\n  }\n\n  /**\n   * Copy a component\n   * @param nodeId the node id\n   * @param componentId the compnent id\n   * @param componentIdsToSkip component ids that we can't use for our new\n   * component\n   * @return a new component object\n   */\n  copyComponent(nodeId, componentId, componentIdsToSkip) {\n\n    // get the component we want to copy\n    var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n    // make a copy of the component\n    var newComponent = this.UtilService.makeCopyOfJSONObject(component);\n\n    // get a new component id for the component\n    var newComponentId = this.getUnusedComponentId(componentIdsToSkip);\n    newComponent.id = newComponentId;\n\n    return newComponent;\n  }\n\n  /**\n   * Import components from a project. Also import asset files that are\n   * referenced in any of those components.\n   * @param components an array of component objects that we are importing\n   * @param importProjectId the id of the project we are importing from\n   * @param nodeId the node we are adding the components to\n   * @param insertAfterComponentId insert the components after this component\n   * id\n   * @return an array of the new components\n   */\n  importComponents(components, importProjectId, nodeId, insertAfterComponentId) {\n\n    var newComponents = [];\n    var newComponentIds = [];\n\n    /*\n     * loop through all the components and make sure their ids are not\n     * already used in the project\n     */\n    for (var component of components) {\n      if (component != null) {\n\n        // make a copy of the component object\n        var newComponent = this.UtilService.makeCopyOfJSONObject(component);\n        var newComponentId = newComponent.id;\n\n        // check if the component id is used in this project\n        if (this.isComponentIdUsed(newComponentId)) {\n          /*\n           * the component id is already used so we will find a new\n           * component id\n           */\n\n          // get a new component id\n          newComponentId = this.getUnusedComponentId(newComponentIds);\n\n          // set the new component id into our new component\n          newComponent.id = newComponentId;\n        }\n\n        // add the new component and new component id to our arrays\n        newComponents.push(newComponent);\n        newComponentIds.push(newComponentId);\n      }\n    }\n\n    // get the import steps URL\n    var importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n    var httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = importStepsURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n    // get the project id we are importing into\n    var toProjectId = this.ConfigService.getConfigParam('projectId');\n\n    // get the project id we are importing from\n    var fromProjectId = importProjectId;\n\n    // set the POST params\n    var params = {};\n    params.steps = angular.toJson(newComponents);\n    params.fromProjectId = fromProjectId;\n    params.toProjectId = toProjectId;\n    httpParams.data = $.param(params);\n\n    /*\n     * Make the request to import the components. This will copy the asset files\n     * and change file names if necessary. If an asset file with the same\n     * name exists in both projects we will check if their content is the\n     * same. If the content is the same we don't need to copy the file. If\n     * the content is different, we need to make a copy of the file with a\n     * new name and change all the references in the steps to use the new\n     * name.\n     */\n    return this.$http(httpParams).then((result) => {\n\n      // get the components from the result that may have been modified\n      newComponents = result.data;\n\n      // get the current components in the node\n      var node = this.getNodeById(nodeId);\n      var currentComponents = node.components;\n\n      var insertPosition = 0;\n\n      if (insertAfterComponentId == null) {\n        // place the new components at the beginning\n        insertPosition = 0;\n      } else {\n        // place the new components after the specified component id\n        insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n      }\n\n      // loop through all the new components and add them to the project\n      for (var newComponent of newComponents) {\n\n        // insert the new component\n        currentComponents.splice(insertPosition, 0, newComponent);\n\n        /*\n         * increment the insert position for cases when we have multiple\n         * new components\n         */\n        insertPosition += 1;\n      }\n\n      return newComponents;\n    });\n  }\n\n  /**\n   * Get the branch path letter\n   * @param nodeId get the branch path letter for this node if it is in a\n   * branch\n   * @return the branch path letter for the node if it is in a branch\n   */\n  getBranchPathLetter(nodeId) {\n    return this.nodeIdToBranchPathLetter[nodeId];\n  }\n\n  /**\n   * Set the node into the project by replacing the existing node with the\n   * given node id\n   * @param nodeId the node id of the node\n   * @param node the node object\n   */\n  setNode(nodeId, node) {\n\n    if (nodeId != null && node != null) {\n\n      // loop through all the nodes\n      for (let n = 0; n < this.project.nodes.length; n++) {\n        let tempNode = this.project.nodes[n];\n\n        if (tempNode != null && tempNode.id == nodeId) {\n          // we have found the node we want to replace\n          this.project.nodes[n] = node;\n        }\n      }\n\n      // loop through all the inactive nodes\n      for (let i = 0; i < this.project.inactiveNodes.length; i++) {\n        let tempNode = this.project.inactiveNodes[i];\n\n        if (tempNode != null && tempNode.id == nodeId) {\n          // we have found the node we want to replace\n          this.project.inactiveNodes[i] = node;\n        }\n      }\n\n      // update the id to node mapping with the new node\n      this.idToNode[nodeId] = node;\n    }\n  }\n\n  /**\n   * Remember the result for whether the node is affected by the constraint\n   * @param nodeId the node id\n   * @param constraintId the constraint id\n   * @param whether the node is affected by the constraint\n   */\n  setIsNodeAffectedByConstraintResult(nodeId, constraintId, result) {\n    this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId] = result;\n  }\n\n  /**\n   * Check if we have calculated the result for whether the node is affected\n   * by the constraint\n   * @param nodeId the node id\n   * @param constraintId the constraint id\n   * @return Return the result if we have calculated the result before. If we\n   * have not calculated the result before, we will return null.\n   */\n  getIsNodeAffectedByConstraintResult(nodeId, constraintId) {\n    return this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId];\n  }\n\n  /**\n   * Get the id to node mappings.\n   * @return An object the keys as node ids and the values as nodes.\n   */\n  getIdToNode() {\n    return this.idToNode;\n  }\n}\n\nProjectService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'UtilService'\n];\n\nexport default ProjectService;\n"]}