{"version":3,"sources":["projectService.es6"],"names":["ProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","project","transitions","applicationNodes","inactiveNodes","groupNodes","idToNode","idToElement","metadata","activeConstraints","rootNode","idToPosition","idToOrder","nodeCount","componentServices","$translate","filters","parseProject","style","name","getProjectMetadata","title","projectTitle","nodes","planningNodes","nodeId","childIds","node","getNodeById","ids","id","result","getNodes","n","length","transition","existingTransitions","getTransitions","replaced","t","existingTransition","splice","push","existingNodes","existingNode","existingNodeId","$broadcast","groupId","group","groupChildNodeIds","indexOf","groupNode","type","applicationNode","nodeType","content","constraints","setIdToNode","setIdToElement","addNode","addGroupNode","addApplicationNode","addNodeToGroupNode","c","constraint","p","planningNode","clearProjectFields","loadNodes","loadPlanningNodes","loadInactiveNodes","constraintId","active","getRootNode","setNodeOrder","branches","getBranches","branchNodeIds","pos","setIdToPosition","isNodeIdInABranch","getPositionById","b","getBranchNodePositionById","isGroupNode","i","child","getMode","planningIds","availablePlanningNodes","a","startGroupId","stepNumber","importProjectIdToOrder","getNodeOrderOfProjectHelper","item","childId","childStepNumber","path","getPathToNode","undefined","order","getIdByOrder","integerToAlpha","int","alphabet","branch","branchPaths","branchPath","nodeIndex","startPoint","branchStartPoint","startPointPos","branchPathPos","num","position","Object","entries","value","element","contentString","JSON","stringify","replaceAssetPaths","parse","contentBaseURL","getConfigParam","replace","RegExp","matchedString","delimiter","matchedStringWithoutQuotes","substr","charAt","injectClickToSnipImageIntoContentString","imgMatcher","matchGroup1","newString","tempNode","getNodePositionById","nodeIcon","defaultName","color","fontSet","fontName","imgSrc","imgAlt","icons","default","icon","$","extend","getGroupNodes","g","isNodeDirectChildOfGroup","parentGroupId","parentGroup","getParentGroup","val","depth","parent","getNodeDepth","groupIds","descendents","getDescendentsOfGroup","childDescendents","concat","projectStartId","getStartNodeId","groups","getGroups","groupStartId","startId","startNodeId","allConstraints","isNodeAffectedByConstraint","targetId","action","isNodeIdAfter","targetNode","isNodeDescendentOfGroup","nodeIdBefore","nodeIdAfter","isApplicationNode","pathsToEnd","getAllPaths","pathToEnd","index","parentGroupIndex","getTransitionsByFromNodeId","toNodeId","to","navigationMode","componentId","component","getComponentByNodeIdAndComponentId","componentType","componentService","get","getPossibleTransitionCriteria","fromNodeId","transitionLogic","getTransitionLogicByFromNodeId","nodesByToNodeId","nodeIds","getNodesByToNodeId","groupsThatPointToNodeId","hasTransitionTo","transitionsResults","projectURL","Date","getTime","then","projectJSON","data","setProject","projectId","configURL","window","configJSON","previewProjectURL","commitMessage","cleanupBeforeSave","getProjectId","saveProjectURL","projectJSONString","angular","toJson","httpParams","method","url","headers","params","param","commitHistory","notifyProjectBeginURL","otherAuthors","resolve","reject","notifyProjectEndURL","inactiveNode","checked","copyProjectURL","registerNewProjectURL","e","Error","commitProjectURL","wiseBaseURL","getWISEBaseURL","theme","themeSettings","pathsSoFar","allPaths","consolidatePaths","pathSoFar","includeGroups","addedCurrentNodeId","getParentGroupId","parentGroupTransitions","parentGroupTransition","allPathsFromToNode","tempPath","unshift","transitionResult","firstNodeId","firstParentGroupId","lastNodeId","pop","paths","consolidatedPath","arePathsEmpty","currentPath","getNonEmptyPathIndex","getFirstNodeIdInPathAtIndex","areFirstNodeIdsInPathsTheSame","removeNodeIdFromPaths","pathsThatContainNodeId","getPathsThatContainNodeId","removeNodeIdFromPath","consumedPath","consumePathsUntilNodeId","consumedNodeIds","x","tempNodeId","pathsToConsume","pathThatContainsNodeId","tempNodeIdIndex","nodeIdIndex","tempConsumedNodeIds","pathIndex","findBranches","previousNodeId","branchMetaObject","createBranchMetaObject","nextCommonNodeId","findNextCommonNodeId","branchEndPoint","extractPathsUpToNodeId","removeDuplicatePaths","trimPathsUpToNodeId","subPaths","allPathsContainNodeId","extractedPaths","extractedPath","slice","uniquePaths","isPathInUniquePaths","u","uniquePath","pathsEqual","path1","path2","path1NodeId","path2NodeId","bp","branchPathsIn","components","getComponentsByNodeId","tempComponent","tempComponentId","componentPosition","nodeContent","newGroupId","getNextAvailableGroupId","newGroup","newNodeId","getNextAvailableNodeId","newNode","showSaveButton","showSubmitButton","addInactiveNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","isInactive","insertNodeAfterInGroups","insertNodeAfterInTransitions","oldToGroupIds","transitionsFromGroup","transitionFromGroup","fromGroupId","newToGroupId","updateTransitionsForInsertingGroup","nodeIdToInsert","nodeIdToInsertAfter","previousNode","updateChildrenTransitionsForMovingGroup","previousNodeTransitionLogic","transitionsJSONString","transitionsCopy","fromJson","parentTransitions","parentTransition","newTransition","getGroupStartId","transitionObject","removeBranchPathTakenNodeConstraints","branchPathTakenConstraints","getBranchPathTakenConstraintsByNodeId","branchPathTakenConstraint","newConstraint","getNextAvailableConstraintIdForNodeId","removalCriteria","makeCopyOfJSONObject","nodeIdToInsertInside","nodeToInsert","previousNodes","previousGroups","getGroupNodesByToNodeId","previousGroup","lastNodesInGroup","getLastNodesInGroup","addToTransition","updateToTransition","nodesThatTransitionToGroup","nodeThatTransitionsToGroup","startNode","nextGroup","criteria","oldToNodeId","newToNodeId","lastNodes","getGroupIds","largestGroupIdNumber","groupIdNumber","isNaN","parseInt","nextAvailableGroupId","getNodeIds","largestNodeIdNumber","nodeIdNumber","inactiveNodeIds","getInactiveNodeIds","inactiveNodeId","nextAvailableNodeId","movingNodeIsActive","isActive","stationaryNodeIsActive","removeNodeIdFromTransitions","removeNodeIdFromGroups","moveToInactive","moveToActive","moveInactiveNode","nodeIdToCopy","copyNode","createNodeInside","createNodeAfter","nodeCopy","service","componentCopy","copyComponent","maxScore","showPreviousWorkPrompt","showPreviousWorkNodeId","showPreviousWorkComponentId","removeNodeIdFromNodes","hasSetNewStartId","isNodeInGroup","recalculatePositionsInGroup","nodeToRemove","nodeToRemoveTransitionLogic","nodeToRemoveTransitions","parentIdOfNodeToRemove","parentGroupStartId","nodeToRemoveTransition","parentIdOfFromNode","tc","tempTransition","tempToNodeId","parentIdOfToNode","isFirstNodeInBranchPath","nodeIdsInBranch","getNodeIdsInBranch","nib","nodeIdInBranch","nodeInBranch","transitionCopy","currentFromNodeId","currentToNodeId","newFromNodeId","updateBranchPathTakenConstraint","insertIndex","groupIdWeAreMoving","groupThatTransitionsToGroupWeAreMoving","updateChildrenTransitionsIntoGroupWeAreMoving","removeTransitionsOutOfGroup","createComponent","componentHasWork","doesAnyComponentShowSubmitButton","addComponentToNode","componentUsesSaveButton","nodeMaxScore","getMaxScoreForNode","componentMaxScore","firstLeafNodeId","done","tempApplicationNode","tempApplicationNodeId","planning","planningNodeTemplateId","availablePlanningNodeIds","availablePlanningNodesSoFar","availablePlanningNode","availablePlanningNodeActual","max","nextAvailablePlanningNodeId","planningNodeInstance","planningNodeInstanceNodeId","nodeIdToMove","moveNodesInside","moveNodesAfter","getChildNodeIdsById","message","nodeTitle","getNodePositionAndTitleByNodeId","removalConditional","criteriaMessages","tempRemovalCriteria","criteriaMessage","getCriteriaMessage","scoresString","scores","join","score","requiredSubmitCount","oldToGroupId","fromGroup","oldToGroup","newToGroup","newToGroupStartId","ot","oldToGroupStartId","transitionsBefore","previousGroupNodes","transitionsAfter","extracted","previousGroupNode","updateTransitionsForExtractingGroup","transitionAfter","inserted","getStartGroupId","startGroup","firstGroupId","connectedComponentId","connectedComponents","connectedComponent","componentContent","connectedComponentParams","inactiveGroups","activeNodes","activeNode","removeNodeFromInactiveNodes","removeNodeFromActiveNodes","added","removeTransitionsThatPointToNodeIdFromOutsideGroup","nodesThatPointToTargetNode","nodeThatPointsToTargetNode","nodeThatPointsToTargetNodeParentGroupId","removeTransition","toNodeIdParentGroupId","transitionsFromChild","tfc","transitionFromChild","firstNodeToRemoveTransition","firstNodeToRemoveTransitionToNodeId","nodeIdAndComponentIds","getNodeContentByNodeId","nodeIdAndComponentId","annotation","displayAnnotation","previousScore","currentScore","annotationGroup","globalAnnotationSettings","globalAnnotationGroups","globalAnnotationGroup","enableCriteria","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","notificationResult","notificationSettings","notifications","notification","getComponentService","componentServiceName","idLength","newComponentId","generateKey","isComponentIdUsed","alreadyUsed","isUsed","selectedNodes","fromProjectId","toProjectId","importStepsURL","steps","getInactiveNodes","selectedNode","isNodeIdUsed","tempComponents","getUnusedComponentId","nextAvailableConstraintId","usedConstraintIds","foundNextAvailableConstraintId","counter","potentialConstraintId","field","orderedItems","foundNodeId","$key","nodesInBranch","hasBranchPathTakenConstraint","r","removalCriterion","targetNodeId","makeThisNodeNotVisibleConstraint","notVisibleRemovalCriterion","makeThisNodeNotVisitableConstraint","notVisitableRemovalCriterion","rc","rubric","html","transitionTo","$inject"],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n\n    constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n        this.$filter = $filter;\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.UtilService = UtilService;\n        this.project = null;\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.inactiveNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n        this.componentServices = {};\n\n        this.$translate = this.$filter('translate');\n\n        // filtering options for navigation displays\n        this.filters = [\n            {'name': 'all', 'label': 'All'}\n            //{'name': 'todo', 'label': 'Todo'},\n            //{'name': 'completed', 'label': 'Completed'}\n        ];\n    };\n\n    setProject(project) {\n        this.project = project;\n        this.parseProject();\n    };\n\n    /**\n     * Initialize the data structures used to hold project information\n     */\n    clearProjectFields() {\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.inactiveNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n    };\n\n    getStyle() {\n        var style = '';\n        var project = this.project;\n        if (project != null) {\n            style = project.style;\n        }\n        return style;\n    };\n\n    getFilters() {\n        return this.filters;\n    };\n\n    /**\n     * Returns the name/title of the current project\n     */\n    getProjectTitle() {\n        var name = this.getProjectMetadata().title;\n        return name ? name : 'A WISE Project (No name)';\n    };\n\n    /**\n     * Set the project title\n     */\n    setProjectTitle(projectTitle) {\n        var metadata = this.getProjectMetadata();\n\n        if (metadata != null) {\n            metadata.title = projectTitle;\n        }\n    }\n\n    getProjectMetadata() {\n        return this.metadata ? this.metadata : {};\n    };\n\n    getNodes() {\n        var nodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            nodes = project.nodes;\n        }\n\n        return nodes;\n    };\n\n    getPlanningNodes() {\n        var planningNodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            planningNodes = project.planningNodes;\n        }\n\n        return planningNodes;\n    };\n\n    getChildNodeIdsById(nodeId) {\n        var childIds = [];\n        var node = this.getNodeById(nodeId);\n\n        if (node.ids) {\n            childIds = node.ids;\n        }\n\n        return childIds;\n    };\n\n    getGroupNodes() {\n        return this.groupNodes;\n    };\n\n    isNode(id) {\n        var result = false;\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    if (nodeId === id) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // adds or update transition if exists\n    addTransition(transition) {\n\n        var existingTransitions = this.getTransitions();\n        var replaced = false;\n        for (var t = 0; t < existingTransitions.length; t++) {\n            var existingTransition = existingTransitions[t];\n            if (existingTransition.id === transition.id) {\n                existingTransitions.splice(t, 1, transition);\n                replaced = true;\n            }\n        }\n        if (!replaced) {\n            existingTransitions.push(transition);\n        }\n    };\n\n    addNode(node) {\n        var existingNodes = this.project.nodes;\n\n        var replaced = false;\n        if (node != null && existingNodes != null) {\n            for (var n = 0; n < existingNodes.length; n++) {\n                var existingNode = existingNodes[n];\n                var existingNodeId = existingNode.id;\n                if (existingNodeId === node.id) {\n                    existingNodes.splice(n, 1, node);\n                    replaced = true;\n                }\n            }\n        }\n        if (!replaced) {\n            existingNodes.push(node);\n        }\n    };\n\n    addApplicationNode(node) {\n\n        var applicationNodes = this.applicationNodes;\n\n        if (node != null && applicationNodes != null) {\n            applicationNodes.push(node);\n        }\n    };\n\n    addGroupNode(node) {\n\n        var groupNodes = this.groupNodes;\n\n        if (node != null && groupNodes != null) {\n            groupNodes.push(node);\n        }\n\n        this.$rootScope.$broadcast('groupsChanged');\n    };\n\n    addNodeToGroupNode(groupId, nodeId) {\n        if (groupId != null && nodeId != null) {\n            var group = this.getNodeById(groupId);\n            if (group != null) {\n                var groupChildNodeIds = group.ids;\n                if (groupChildNodeIds != null) {\n                    if (groupChildNodeIds.indexOf(nodeId) === -1) {\n                        groupChildNodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    isGroupNode(id) {\n        var result = false;\n\n        var groupNode = this.getNodeById(id);\n\n        if (groupNode != null) {\n            var type = groupNode.type;\n\n            if (type === 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isApplicationNode(id) {\n        var result = false;\n\n        var applicationNode = this.getNodeById(id);\n\n        if (applicationNode != null) {\n            var type = applicationNode.type;\n\n            if (type !== 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getGroups() {\n        return this.groupNodes;\n    };\n\n    loadNodes(nodes) {\n        if (nodes != null) {\n            for (var n = 0 ; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n                    var nodeType = node.type;\n                    var content = node.content;\n                    var constraints = node.constraints;\n\n                    if (content != null) {\n                        //node.content = this.injectAssetPaths(content);\n                    }\n\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n\n                    this.addNode(node);\n\n                    if (nodeType === 'group') {\n                        this.addGroupNode(node);\n                    } else {\n                        this.addApplicationNode(node);\n                    }\n\n                    var groupId = node.groupId;\n\n                    if (groupId != null) {\n                        this.addNodeToGroupNode(groupId, nodeId);\n                    }\n\n                    if (constraints != null) {\n                        for (var c = 0; c < constraints.length; c++) {\n                            var constraint = constraints[c];\n\n                            this.activeConstraints.push(constraint);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Load the planning template nodes\n     * @param planning template nodes\n     */\n    loadPlanningNodes(planningNodes) {\n        if (planningNodes != null) {\n\n            // loop through all the planning template nodes\n            for (var p = 0; p < planningNodes.length; p++) {\n                var planningNode = planningNodes[p];\n\n                if (planningNode != null) {\n                    var nodeId = planningNode.id;\n\n                    this.setIdToNode(nodeId, planningNode);\n                    this.setIdToElement(nodeId, planningNode);\n\n                    // TODO: may need to add more function calls here to add the planning\n                }\n            }\n        }\n    }\n\n    parseProject() {\n        var project = this.project;\n        if (project != null) {\n\n            // clear and initialize our project data structures\n            this.clearProjectFields();\n\n            if (project.metadata) {\n                this.metadata = project.metadata;\n            }\n\n            var nodes = project.nodes;\n            this.loadNodes(nodes);\n\n            // load the planning node templates\n            var planningNodes = project.planningNodes;\n            this.loadPlanningNodes(planningNodes);\n\n            // load the inactive nodes\n            var inactiveNodes = project.inactiveNodes;\n            this.loadInactiveNodes(inactiveNodes);\n\n            var constraints = project.constraints;\n\n            if (constraints != null) {\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n                        var constraintId = constraint.id;\n                        constraint.active = true;\n\n                        this.setIdToElement(constraintId, constraint);\n                    }\n                }\n            }\n\n            // set root node\n            this.rootNode = this.getRootNode(nodes[0].id);\n\n            // set project order\n            this.setNodeOrder(this.rootNode, this.nodeCount);\n            //this.nodeCount = 0;\n\n            var n = nodes.length;\n            var branches = this.getBranches();\n            var branchNodeIds = [];\n\n            // set node positions\n            var id, pos;\n\n            while (n--) {\n                id = nodes[n].id;\n                if (id === this.rootNode.id) {\n                    this.setIdToPosition(id, '0');\n                } else if (this.isNodeIdInABranch(branches, id)) {\n                    // node is in a branch, so process later\n                    branchNodeIds.push(id);\n                } else {\n                    pos = this.getPositionById(id);\n                    this.setIdToPosition(id, pos);\n                }\n            }\n\n            // set branch node positions\n            var b = branchNodeIds.length;\n            while (b--) {\n                id = branchNodeIds[b];\n                pos = this.getBranchNodePositionById(id);\n                this.setIdToPosition(id, pos);\n            }\n        }\n    };\n\n    setNodeOrder(node) {\n        this.idToOrder[node.id] = {'order': this.nodeCount};\n        this.nodeCount++;\n        if (this.isGroupNode(node.id)) {\n            let childIds = node.ids;\n            for (let i = 0; i < childIds.length; i++) {\n                let child = this.getNodeById(childIds[i]);\n                this.setNodeOrder(child);\n            }\n\n            if (this.ConfigService.getMode() === 'classroomMonitor') {\n                // we're viewing the classroom monitor, so include planning nodes in the project structure\n                let planningIds = node.availablePlanningNodes;\n                if (planningIds) {\n                    for (let a = 0; a < planningIds.length; a++) {\n                        let child = this.getNodeById(planningIds[a].nodeId);\n                        this.setNodeOrder(child);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the node order mappings of the project\n     * @param project the project JSOn\n     * @return an object containing the idToOrder mapping and also the array\n     * of nodes\n     */\n    getNodeOrderOfProject(project) {\n\n        var idToOrder = {};\n\n        // initialize the node count used for counting the nodes\n        idToOrder.nodeCount = 0;\n\n        // get the start group id\n        var startGroupId = project.startGroupId;\n\n        // get the root node\n        var rootNode = this.getNodeById(startGroupId, project);\n\n        // initialize the step number\n        var stepNumber = '';\n\n        // initialize the nodes\n        var nodes = [];\n\n        // recursively traverse the project to calculate the node counts and step numbers\n        var importProjectIdToOrder = this.getNodeOrderOfProjectHelper(project, rootNode, idToOrder, stepNumber, nodes);\n\n        // remove the node count from the mapping since we don't need it anymore\n        delete importProjectIdToOrder.nodeCount;\n\n        // create the object we will return\n        var result = {};\n        result.idToOrder = importProjectIdToOrder;\n        result.nodes = nodes;\n\n        return result;\n    }\n\n    /**\n     * Recursively traverse the project to calculate the node order and step numbers\n     * @param project the project JSON\n     * @param node the current node we are on\n     * @param idToOrder the mapping of node id to item\n     * @param stepNumber the current step number\n     * @param nodes the array of nodes\n     */\n    getNodeOrderOfProjectHelper(project, node, idToOrder, stepNumber, nodes) {\n\n        /*\n         * Create the item that we will add to the idToOrder mapping.\n         * The 'order' field determines how the project nodes are displayed\n         * when we flatten the project for displaying.\n         */\n        var item = {\n            'order': idToOrder.nodeCount,\n            'node': node,\n            'stepNumber': stepNumber\n        };\n\n        // set the mapping of node id to item\n        idToOrder[node.id] = item;\n\n        // increment the node count\n        idToOrder.nodeCount++;\n\n        // add the item to the nodes array\n        nodes.push(item);\n\n        if (node.type == 'group') {\n            // the node is group so we also need to loop through its children\n\n            // get the child node ids\n            var childIds = node.ids;\n\n            // loop through all the children\n            for (var c = 0; c < childIds.length; c++) {\n                var childId = childIds[c];\n\n                // get a child node\n                var child = this.getNodeById(childId, project);\n\n                // get the current step number e.g. 1\n                var childStepNumber = stepNumber;\n\n                if (childStepNumber != '') {\n                    // add the . separator for the step number e.g. 1.\n                    childStepNumber += '.';\n                }\n\n                // update the step number e.g. 1.1\n                childStepNumber += (c + 1);\n\n                // recursively traverse the child\n                this.getNodeOrderOfProjectHelper(project, child, idToOrder, childStepNumber, nodes);\n            }\n        }\n\n        return idToOrder;\n    }\n\n    /**\n     * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getPositionById(id) {\n        for (var i = 0; i < this.rootNode.ids.length; i++) {\n            var node = this.getNodeById(this.rootNode.ids[i]);\n            var path = this.getPathToNode(node, i+1, id);\n            if (path != undefined && path != null) {\n                return path;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Returns the order of the given node id in the project. Returns null if no node with id exists.\n     * @param id String node id\n     * @return Number order of the given node id in the project\n     */\n    getOrderById(id) {\n        if (this.idToOrder[id]) {\n            return this.idToOrder[id].order;\n        }\n\n        return null;\n    };\n    /**\n     * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n     * @param order Number\n     * @return Number node id of the given order in the project\n     */\n    getIdByOrder(order) {\n        var nodeId = null;\n\n        for (var id in this.idToOrder) {\n            if (this.idToOrder[id].order === order) {\n                if (this.isGroupNode(id) && order > 1) {\n                    nodeId = this.getIdByOrder(order-1);\n                } else {\n                    nodeId = id;\n                }\n                break;\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getBranchNodePositionById(id) {\n        var branches = this.getBranches();\n        var b = branches.length;\n\n        // TODO: should we localize this? should we support more than 26?\n        var integerToAlpha = function(int) {\n            var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n            if (int > -1 && int < 26) {\n                return alphabet[int];\n            } else {\n                return int;\n            }\n        };\n\n        while (b--) {\n            var branch = branches[b];\n            var branchPaths = branch.branchPaths;\n            for (var p = 0; p < branchPaths.length; p++) {\n                var branchPath = branchPaths[p];\n                var nodeIndex = branchPath.indexOf(id);\n                if (nodeIndex > -1) {\n                    var startPoint = branch.branchStartPoint;\n                    var startPointPos = this.idToPosition[startPoint];\n                    var branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n                    return branchPathPos + (nodeIndex+1);\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n     * @param node a node to start searching down\n     * @param path the position of the given node\n     * @param id the node id to search for\n     * @return string path of the given node id in the project\n     */\n    getPathToNode(node, path, id) {\n        if (node.id === id) {\n            return path + '';\n        } else if (node.type === 'group') {\n            var num = 0;\n            var branches = this.getBranches();\n            for (var i = 0; i < node.ids.length; i++) {\n                var nodeId = node.ids[i];\n                if (this.isNodeIdInABranch(branches, nodeId)) {\n                    this.getBranchNodePositionById(nodeId);\n                } else {\n                    ++num;\n                    var pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n                    if (pos) {\n                        return pos;\n                    }\n                }\n            }\n        }\n    };\n\n    setIdToPosition(id, pos) {\n        if (id != null) {\n            this.idToPosition[id] = pos;\n        }\n    };\n\n    getNodePositionById(id) {\n        let position = null;\n\n        if (id != null) {\n            position = this.idToPosition[id] ? this.idToPosition[id] : null;\n        }\n\n        return position;\n    };\n\n    getNodeIdByOrder(order) {\n        let id = null;\n\n        if (order != null) {\n            for (let [nodeId, value] of Object.entries(this.idToOrder)) {\n                if (value.order === order) {\n                    id = nodeId;\n                    break;\n                }\n            }\n        }\n\n        return id;\n    }\n\n    getNodeOrderById(id) {\n        let order = null;\n\n        if (id != null) {\n            order = this.idToOrder[id] ? this.idToOrder[id].order : null;\n        }\n\n        return order;\n    };\n\n    setIdToNode(id, element) {\n        if (id != null) {\n            this.idToNode[id] = element;\n        }\n    };\n\n    setIdToElement(id, element) {\n        if (id != null) {\n            this.idToElement[id] = element;\n        }\n    };\n\n    /**\n     * Replace relative asset paths with absolute paths\n     * e.g.\n     * assets/myimage.jpg\n     * will be replaced with\n     * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n     * @param content a string or JSON object\n     * @return the same type of object that was passed in as the content\n     * but with relative asset paths replaced with absolute paths\n     */\n    injectAssetPaths(content) {\n\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.replaceAssetPaths(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.replaceAssetPaths(content);\n            }\n        }\n\n        return content;\n    };\n\n    /**\n     * Replace the relative asset paths with absolute paths\n     * @param contentString the content string\n     * @return the content string with relative asset paths replaced\n     * with absolute asset paths\n     */\n    replaceAssetPaths(contentString) {\n\n        if (contentString != null) {\n\n            // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n            var contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n            // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n            // the string we're looking for can't start with '/ and \"/.\n            // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n            contentString = contentString.replace(\n                new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/]?[^\\/]?[a-zA-Z0-9@\\\\._\\\\/\\\\s\\\\-]*[\\.](png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html.*?|js)(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n                (matchedString) => {\n                    // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n                    var delimiter = '';\n                    var matchedStringWithoutQuotes = '';\n\n                    if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n                        // the string has escaped quotes for example \\\"hello.png\\\"\n\n                        // get everything between the escaped quotes\n                        matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n                        // get the delimiter which will be \\' or \\\"\n                        delimiter = matchedString.substr(0,2);\n                    } else {\n                        // the string does not have escaped quotes for example \"hello.png\"\n\n                        // get everything between the quotes\n                        matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n                        // get the delimiter which will be ' or \"\n                        delimiter = matchedString.substr(0,1);\n                    }\n\n                    if (matchedStringWithoutQuotes != null && matchedStringWithoutQuotes.length > 0 && matchedStringWithoutQuotes.charAt(0) == \"/\") {\n                        /*\n                         * the matched string starts with a \"/\" which means it's\n                         * an absolute path and does not require path prepending\n                         * so we will just return the original unmodified string\n                         */\n                        return delimiter + matchedStringWithoutQuotes + delimiter;\n                    } else {\n                        //var matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n                        // make a new string with the contentBaseURL + assets/ prepended to the path\n                        return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n                    }\n                }\n            );\n        }\n\n        return contentString;\n    };\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param content the content\n     * @returns the modified content\n     */\n    injectClickToSnipImage(content) {\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.injectClickToSnipImageIntoContentString(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.injectClickToSnipImageIntoContentString(content);\n            }\n        }\n\n        return content;\n    }\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param contentString the content in string format\n     * @returns the modified content string\n     */\n    injectClickToSnipImageIntoContentString(contentString) {\n\n        if (contentString != null) {\n\n            // regex to match image elements\n            var imgMatcher = new RegExp('<img.*?src=\\\\\\\\?[\\'\"](.*?)\\\\\\\\?[\\'\"].*?>', 'gi');\n\n            // replace all instances that match\n            contentString = contentString.replace(imgMatcher,\n                (matchedString, matchGroup1) => {\n\n                    /*\n                     * insert the ng-click attribute\n                     * Before: <img src=\"abc.png\"/>\n                     * After: <img ng-click=\"vleController.snipImage($event)\" src=\"abc.png\" />\n                     */\n                    var newString = matchedString.replace('img', 'img ng-click=\\\\\\\"$emit(\\'snipImage\\', $event)\\\\\\\"');\n\n                    return newString;\n                }\n            );\n        }\n\n        return contentString;\n    }\n\n    /**\n     * Returns the node specified by the nodeId\n     * @param nodeId get the node with this node id\n     * @param (optional) the project to retrieve the node from. this is used in\n     * the case when we want the node from another project such as when we are\n     * importing a step from another project\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeById(nodeId, project) {\n        var element = null;\n\n        if (project == null) {\n            // the project argument is null so we will get it from the current project\n            if (nodeId != null && this.idToNode[nodeId]) {\n                element = this.idToNode[nodeId];\n            }\n        } else {\n            /*\n             * the project argument is not null so we will get the node from\n             * project that was passed in\n             */\n\n            // loop through all the active nodes in the project\n            for (var n = 0; n < project.nodes.length; n++) {\n                var tempNode = project.nodes[n];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we are looking for\n                    return tempNode;\n                }\n            }\n\n            // loop through all the inactive nodes in the project\n            for (var n = 0; n < project.inactiveNodes.length; n++) {\n                var tempNode = project.inactiveNodes[n];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we are looking for\n                    return tempNode;\n                }\n            }\n        }\n\n        return element;\n    };\n\n    /**\n     * Returns the title of the node with the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    };\n\n    /**\n     * Get the node position and title\n     * @param nodeId the node id\n     * @returns the node position and title, e.g. \"1.1 Introduction\"\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            var position = this.getNodePositionById(nodeId);\n\n            if (position != null) {\n                title = position + ': ' + node.title;\n            } else {\n                title = node.title;\n            }\n        }\n\n        return title;\n    };\n\n    getNodeIconByNodeId(nodeId) {\n        var node = this.getNodeById(nodeId);\n        var nodeIcon = null;\n\n        if (node != null) {\n            var nodeType = node.type;\n\n            // set defaults (TODO: get from configService?)\n            var defaultName = (nodeType === 'group') ? 'explore' : 'school';\n            nodeIcon = {\n                color: 'rgba(0,0,0,0.54)',\n                type: 'font',\n                fontSet: 'material-icons',\n                fontName: defaultName,\n                imgSrc: '',\n                imgAlt: 'node icon'\n            };\n\n            // TODO: check for different statuses\n            var icons = node.icons;\n            if (!!icons && !!icons.default) {\n                var icon = icons.default;\n                nodeIcon = $.extend(true, nodeIcon, icon);\n            }\n\n            // check for empty image source\n            if (!nodeIcon.imgSrc) {\n                // revert to font icon\n                nodeIcon.type = 'font';\n            }\n        }\n\n        return nodeIcon;\n    };\n\n    getParentGroup(nodeId) {\n        var result = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var groupNodes = this.getGroupNodes();\n\n                for (var g = 0; g < groupNodes.length; g++) {\n                    var groupNode = groupNodes[g];\n\n                    if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n                        result = groupNode;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the parent group id\n     * @param nodeId the parent group id\n     * @returns the parent group id\n     */\n    getParentGroupId(nodeId) {\n\n        var parentGroupId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n        }\n\n        return parentGroupId;\n    }\n\n    getNodeDepth(nodeId, val) {\n        var result = null;\n\n        if (nodeId != null) {\n            var depth = (typeof val === \"number\") ? val : 0;\n            var parent = this.getParentGroup(nodeId);\n            if (parent) {\n                depth = this.getNodeDepth(parent.id, depth + 1);\n            }\n            result = depth;\n        }\n\n        return result;\n    };\n\n    getRootNode(nodeId) {\n        var result = null;\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        if (parentGroup == null) {\n            result = this.getNodeById(nodeId);\n        } else {\n            result = this.getRootNode(parentGroup.id);\n        }\n\n        return result;\n    };\n\n    isNodeDirectChildOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var nodeId = node.id;\n            var groupIds = group.ids;\n\n            if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isNodeDescendentOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var descendents = this.getDescendentsOfGroup(group);\n            var nodeId = node.id;\n\n            if (descendents.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getDescendentsOfGroup(group) {\n        var descendents = [];\n\n        if (group != null) {\n            var childIds = group.ids;\n\n            if (childIds != null) {\n                descendents = childIds;\n\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n\n                    var node = this.getNodeById(childId);\n\n                    if (node != null) {\n                        var childDescendents = this.getDescendentsOfGroup(node);\n\n                        descendents = descendents.concat(childDescendents);\n                    }\n                }\n            }\n        }\n\n        return descendents;\n    };\n\n    isStartNode(node) {\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var projectStartId = this.getStartNodeId();\n\n            if (nodeId === projectStartId) {\n                result = true;\n            }\n\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    var groupStartId = group.startId;\n\n                    if (nodeId === groupStartId) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns the Project's start node id, or null if it's not defined in the project\n     */\n    getStartNodeId() {\n        var startNodeId = null;\n        var project = this.project;\n        if (project != null) {\n            startNodeId = project.startNodeId;\n        }\n        return startNodeId;\n    };\n\n    /**\n     * Set the start node id\n     * @param nodeId the new start node id\n     */\n    setStartNodeId(nodeId) {\n\n        if (nodeId != null) {\n            var project = this.project;\n            if (project != null) {\n                project.startNodeId = nodeId;\n            }\n        }\n    }\n\n    /**\n     * Get the start group id\n     * @return the start group id\n     */\n    getStartGroupId() {\n        var startGroupId = null;\n\n        var project = this.project;\n        if (project != null) {\n            startGroupId = project.startGroupId;\n        }\n\n        return startGroupId;\n    }\n\n    /**\n     * Check if the given node id is the start node id\n     * @return whether the node id is the start node id\n     */\n    isStartNodeId(nodeId) {\n\n        var result = false;\n\n        var project = this.project;\n\n        if (project != null) {\n            var startNodeId = project.startNodeId;\n\n            if (nodeId === startNodeId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    getConstraintsForNode(node) {\n        var constraints = [];\n\n        var allConstraints = this.activeConstraints;\n\n        for (var c = 0; c < allConstraints.length; c++) {\n            var constraint = allConstraints[c];\n\n            if (this.isNodeAffectedByConstraint(node, constraint)) {\n                constraints.push(constraint);\n            }\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Check if a node is affected by the constraint\n     * @param node check if the node is affected\n     * @param constraint the constraint that might affect the node\n     * @returns whether the node is affected by the constraint\n     */\n    isNodeAffectedByConstraint(node, constraint) {\n        var result = false;\n\n        if (node != null && constraint != null) {\n            var nodeId = node.id;\n            var targetId = constraint.targetId;\n            var action = constraint.action;\n\n            if (action === 'makeAllNodesAfterThisNotVisible') {\n                if (this.isNodeIdAfter(targetId, node.id)) {\n                    result = true;\n                }\n            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                if (this.isNodeIdAfter(targetId, node.id)) {\n                    result = true;\n                }\n            } else {\n                var targetNode = this.getNodeById(targetId);\n\n                if (targetNode != null) {\n                    var nodeType = targetNode.type;\n\n                    if (nodeType === 'node') {\n                        // the target is an application\n\n                        if (nodeId === targetId) {\n                            result = true;\n                        }\n                    } else if (nodeType === 'group') {\n                        // the target is a group\n\n                        if (nodeId === targetId) {\n                            result = true;\n                        }\n\n                        if (this.isNodeDescendentOfGroup(node, targetNode)) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id comes after another node id in the project\n     * @param nodeIdBefore the node id before\n     * @param nodeIdAfter the node id after\n     */\n    isNodeIdAfter(nodeIdBefore, nodeIdAfter) {\n        var result = false;\n\n        if (nodeIdBefore != null && nodeIdAfter != null) {\n\n            if (this.isApplicationNode(nodeIdBefore)) {\n                // the node id before is a step\n\n                // get all the paths from the beforeNodeId to the end of the project\n                var pathsToEnd = this.getAllPaths([], nodeIdBefore, true);\n\n                if (pathsToEnd != null) {\n\n                    // loop through all the paths\n                    for (var p = 0; p < pathsToEnd.length; p++) {\n\n                        var pathToEnd = pathsToEnd[p];\n\n                        if (pathToEnd != null) {\n\n                            /*\n                             * remove the first node id and its parent id because\n                             * we will check the remaining node ids in the array\n                             * for the nodeIdAfter\n                             */\n\n                            // get the index of the node id before\n                            var index = pathToEnd.indexOf(nodeIdBefore);\n\n                            if (index != -1) {\n                                // remove the node id before\n                                pathToEnd.splice(index, 1);\n                            }\n\n                            // get the parent group of the node id before\n                            var parentGroup = this.getParentGroup(nodeIdBefore);\n\n                            if (parentGroup != null) {\n                                // remove the parent group of the node id before\n                                var parentGroupId = parentGroup.id;\n                                var parentGroupIndex = pathToEnd.indexOf(parentGroupId);\n                                if (parentGroupIndex != -1) {\n                                    pathToEnd.splice(parentGroupIndex, 1);\n                                }\n                            }\n\n                            if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                // we have found the nodeIdAfter in the path to the end of the project\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // the node id before is an activity\n\n                // get the group\n                var group = this.getNodeById(nodeIdBefore);\n\n                if (group != null) {\n\n                    // get the transitions from the group\n                    var transitions = this.getTransitionsByFromNodeId(nodeIdBefore);\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                // get the paths between to toNodeId and the end of the project\n                                var pathsToEnd = this.getAllPaths([], toNodeId, true);\n\n                                // loop through all the paths\n                                for (var p = 0; p < pathsToEnd.length; p++) {\n\n                                    // get a path\n                                    var pathToEnd = pathsToEnd[p];\n\n                                    if (pathToEnd != null) {\n                                        if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                            // we have found the nodeIdAfter in the path to the end of the project\n                                            result = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    getNavigationMode() {\n        var navigationMode = null;\n        var project = this.project;\n        if (project != null) {\n            navigationMode = project.navigationMode;\n        }\n        return navigationMode;\n    };\n\n    getTransitions() {\n        var transitions = null;\n        var project = this.project;\n        if (project != null) {\n            transitions = project.transitions;\n        }\n        return transitions;\n    };\n\n    /**\n     * Returns all possible transition criteria for the specified node and component.\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        if (component != null) {\n            let componentType = component.type;\n            let componentService = this.$injector.get(componentType + 'Service');\n            if (componentService.getPossibleTransitionCriteria) {\n                return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n            } else {\n                return [];\n            }\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the transition logic for a node\n     * @param fromNodeId the from node id\n     * @returns the transition logic object\n     */\n    getTransitionLogicByFromNodeId(fromNodeId) {\n        var transitionLogic = null;\n\n        if (fromNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                // get the transition logic\n                transitionLogic = node.transitionLogic;\n            }\n        }\n\n        return transitionLogic;\n    };\n\n    /**\n     * Get the transitions for a node\n     * @param fromNodeId the node to get transitions from\n     * @returns an array of transitions\n     */\n    getTransitionsByFromNodeId(fromNodeId) {\n\n        var transitions = null;\n\n        if (fromNodeId != null) {\n            // get the transition logic\n            var transitionLogic = this.getTransitionLogicByFromNodeId(fromNodeId);\n\n            if (transitionLogic != null) {\n                // get the transitions\n                transitions = transitionLogic.transitions;\n            }\n        }\n\n        return transitions;\n    }\n\n    /**\n     * Get nodes that have a transition to the given node id\n     * @param toNodeId the node id\n     * @returns an array of node objects that transition to the\n     * given node id\n     */\n    getNodesByToNodeId(toNodeId) {\n        var nodesByToNodeId = [];\n\n        if (toNodeId != null) {\n\n            // get all the nodes\n            var nodes = this.project.nodes;\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions for the node\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                if (toNodeId === transition.to) {\n                                    // this node has a transition to the node id\n                                    nodesByToNodeId.push(node);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodesByToNodeId;\n    };\n\n    /**\n     * Get node ids of all the nodes that have a to transition to the given node id\n     * @param toNodeId\n     * @returns all the node ids that have a transition to the given node id\n     */\n    getNodeIdsByToNodeId(toNodeId) {\n        var nodeIds = [];\n\n        // get all the nodes that transition to the toNodeId\n        var nodes = this.getNodesByToNodeId(toNodeId);\n\n        if (nodes != null) {\n\n            // loop through all the nodes to get the node ids\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    nodeIds.push(node.id);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Get the group nodes that point to a given node id\n     * @param toNodeId\n     */\n    getGroupNodesByToNodeId(toNodeId) {\n        var groupsThatPointToNodeId = [];\n\n        if (toNodeId != null) {\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    if (this.hasTransitionTo(group, toNodeId)) {\n                        groupsThatPointToNodeId.push(group);\n                    }\n                }\n            }\n        }\n\n        return groupsThatPointToNodeId;\n    }\n\n    /**\n     * Check if a node has a transition to a node id\n     * @param node check if this node has a transition to the node id\n     * @param toNodeId we will look for a transition to this node id\n     * @returns whether the node has a transition to the node id\n     */\n    hasTransitionTo(node, toNodeId) {\n        var result = false;\n\n        if (node != null && toNodeId != null) {\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (toNodeId === transition.to) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the transitions that traverse from the fromNodeId and to the toNodeId\n     * @param fromNodeId the from node id\n     * @param toNodeId the to node id\n     * @returns an array of transitions that traverse from the fromNodeId and\n     * to the toNodeId\n     */\n    getTransitionsByFromAndToNodeId(fromNodeId, toNodeId) {\n        var transitionsResults = [];\n\n        if (fromNodeId != null && toNodeId != null) {\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var to = transition.to;\n\n                                if (toNodeId === to) {\n                                    transitionsResults.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return transitionsResults;\n    };\n\n    /**\n     * Retrieves the project JSON from Config.projectURL and returns it.\n     * If Config.projectURL is undefined, returns null.\n     */\n    retrieveProject() {\n        var projectURL = this.ConfigService.getConfigParam('projectURL');\n\n        if (projectURL == null) {\n            return null;\n        } else {\n            /*\n             * add a unique GET parameter value so that it always retrieves the\n             * latest version of the project file from the server and never\n             * retrieves the project from cache.\n             */\n            projectURL += '?noCache=' + (new Date()).getTime();\n        }\n\n        return this.$http.get(projectURL).then((result) => {\n            var projectJSON = result.data;\n            this.setProject(projectJSON);\n            return projectJSON;\n        });\n    };\n\n    /**\n     * Retrieve the project JSON\n     * @param projectId retrieve the project JSON with this id\n     * @return a promise to return the project JSON\n     */\n    retrieveProjectById(projectId) {\n\n        if (projectId != null) {\n\n            // get the config URL for the project\n            var configURL = window.configURL + '/' + projectId;\n\n            // get the config for the project\n            return this.$http.get(configURL).then((result) => {\n                var configJSON = result.data;\n\n                if (configJSON != null) {\n\n                    // get the project URL and preview project URL\n                    var projectURL = configJSON.projectURL;\n                    var previewProjectURL = configJSON.previewProjectURL;\n\n                    if (projectURL != null) {\n\n                        // get the project JSON\n                        return this.$http.get(projectURL).then((result) => {\n                            var projectJSON = result.data;\n\n                            /*\n                             * set the preview project URL into the project JSON\n                             * so that we easily obtain the preview project URL\n                             * later\n                             */\n                            projectJSON.previewProjectURL = previewProjectURL;\n\n                            return projectJSON;\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Saves the project to Config.saveProjectURL and returns commit history promise.\n     * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n     */\n    saveProject(commitMessage = \"\") {\n        this.$rootScope.$broadcast('savingProject');\n        // perform any cleanup before saving the project\n        this.cleanupBeforeSave();\n\n        var projectId = this.ConfigService.getProjectId();\n        var saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n        if (projectId == null || saveProjectURL == null) {\n            return null;\n        }\n\n        // Get the project from this service\n        var projectJSONString = angular.toJson(this.project, 4);\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = saveProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.projectId = projectId;\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var commitHistory = result.data;\n            this.$rootScope.$broadcast('projectSaved');\n            return commitHistory;\n        });\n    };\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectBegin(projectId = null) {\n        if (projectId == null) {\n            if (this.project != null) {\n                projectId = this.project.id;\n            } else {\n                return;\n            }\n        }\n        let notifyProjectBeginURL = this.ConfigService.getConfigParam('notifyProjectBeginURL') + projectId;\n        let httpParams = {\n            method: \"POST\",\n            url: notifyProjectBeginURL\n        };\n\n        return this.$http(httpParams).then((result) => {\n            let otherAuthors = result.data;\n            return otherAuthors;\n        });\n    }\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectEnd(projectId = null) {\n        return this.$q((resolve, reject) => {\n            if (projectId == null) {\n                if (this.project != null) {\n                    projectId = this.ConfigService.getProjectId();\n                } else {\n                    resolve();\n                }\n            }\n            let notifyProjectEndURL = this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId;\n            let httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = notifyProjectEndURL;\n\n            this.$http(httpParams).then(() => {\n                resolve();\n            })\n        });\n    }\n\n    /**\n     * Perform any necessary cleanup before we save the project.\n     * For example we need to remove the checked field in the inactive node\n     * objects.\n     */\n    cleanupBeforeSave() {\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    // remove the checked field\n                    delete inactiveNode.checked;\n                }\n            }\n        }\n    }\n\n    /**\n     * Copies the project with the specified id and returns a new project id if the project is\n     * successfully copied\n     */\n    copyProject(projectId) {\n        var copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n\n        if (copyProjectURL == null) {\n            return null;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = copyProjectURL + \"/\" + projectId;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Registers a new project having the projectJSON content with the server.\n     * Returns a new project Id if the project is successfully registered.\n     * Returns null if Config.registerNewProjectURL is undefined.\n     * Throws an error if projectJSONString is invalid JSON string\n     */\n    registerNewProject(projectJSONString, commitMessage) {\n        var registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n\n        if (registerNewProjectURL == null) {\n            return null;\n        }\n\n        try {\n            // Try parsing the JSON string and throw an error if there's an issue parsing it.\n            JSON.parse(projectJSONString);\n        } catch (e) {\n            throw new Error(\"Invalid projectJSONString.\");\n        }\n\n        if (!commitMessage) {\n            commitMessage = \"\";\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = registerNewProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Retrieves and returns the project's commit history.\n     */\n    getCommitHistory() {\n        var commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n\n        return this.$http({\n            url: commitProjectURL,\n            method: 'GET'\n        }).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Returns the theme path for the current project\n     */\n    getThemePath() {\n        let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        let project = this.project;\n        if (project && project.theme) {\n            // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n            return wiseBaseURL + '/wise5/themes/' + project.theme;\n        } else {\n            // TODO: get default theme name from ConfigService\n            return wiseBaseURL + '/wise5/themes/default';\n        }\n    };\n\n    /**\n     * Returns the theme settings for the current project\n     */\n    getThemeSettings() {\n        let themeSettings = {};\n        let project = this.project;\n\n        if (project && project.themeSettings) {\n            if (project.theme) {\n                // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n                themeSettings = project.themeSettings[project.theme];\n            } else {\n                // TODO: get default theme name from ConfigService\n                themeSettings = project.themeSettings[\"default\"];\n            }\n        }\n\n        return themeSettings ? themeSettings : {};\n    };\n\n    /**\n     * Flatten the project to obtain a list of node ids\n     */\n    getFlattenedProjectAsNodeIds() {\n        var nodeIds = [];\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the possible paths through the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // consolidate all the paths to create a single list of node ids\n        nodeIds = this.consolidatePaths(allPaths);\n        //nodeIds = this.consolidatePaths(allPaths.reverse());\n\n        return nodeIds;\n    };\n\n    /**\n     * Get all the possible paths through the project. This function\n     * recursively calls itself to traverse the project depth first.\n     * @param pathSoFar the node ids in the path so far. the node ids\n     * in this array are referenced to make sure we don't loop back\n     * on the path.\n     * @param nodeId the node id we want to get the paths from\n     * @param includeGroups whether to include the group node ids in the paths\n     * @return an array of paths. each path is an array of node ids.\n     */\n    getAllPaths(pathSoFar, nodeId, includeGroups) {\n        var allPaths = [];\n\n        if (nodeId != null) {\n            if (this.isApplicationNode(nodeId)) {\n                // the node is an application node\n\n                var path = [];\n\n                // get all the transitions from this node\n                var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n                if (transitions != null) {\n\n                    if (includeGroups) {\n                        // get the parent group\n                        var parentGroup = this.getParentGroup(nodeId);\n                        if (parentGroup != null) {\n\n                            // get the parent group id\n                            var parentGroupId = parentGroup.id;\n\n                            if (parentGroupId != null && pathSoFar.indexOf(parentGroupId) == -1) {\n                                // add the parent group id\n                                pathSoFar.push(parentGroup.id);\n                            }\n                        }\n                    }\n\n                    /*\n                     * add the node id to the path so far so we can later check\n                     * which nodes are already in the path to prevent looping\n                     * back in the path\n                     */\n                    pathSoFar.push(nodeId);\n\n                    if (transitions.length === 0) {\n                        /*\n                         * there are no transitions from the node id so we will\n                         * look for a transition in the parent group\n                         */\n\n                        var addedCurrentNodeId = false;\n\n                        var parentGroupId = this.getParentGroupId(nodeId);\n                        var parentGroupTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                        if (parentGroupTransitions != null) {\n                            for (var p = 0; p < parentGroupTransitions.length; p++) {\n                                var parentGroupTransition = parentGroupTransitions[p];\n\n                                if (parentGroupTransition != null) {\n\n                                    var toNodeId = parentGroupTransition.to;\n\n                                    if (pathSoFar.indexOf(toNodeId) == -1) {\n                                        /*\n                                         * recursively get the paths by getting all\n                                         * the paths for the to node\n                                         */\n                                        var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n\n                                            addedCurrentNodeId = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!addedCurrentNodeId) {\n                            /*\n                             * if the parent group doesn't have any transitions we will\n                             * need to add the current node id to the path\n                             */\n\n                            // add the node id to the path\n                            path.push(nodeId);\n\n                            // add the path to the all paths array\n                            allPaths.push(path);\n                        }\n                    } else {\n                        // there are transitions from this node id\n\n                        // loop through all the transitions from this node id\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transitionResult = [];\n\n                            // get a transition\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                // get the to node id\n                                var toNodeId = transition.to;\n\n                                if (pathSoFar.indexOf(toNodeId) == -1) {\n                                    // we have not found the to node in the path yet so we can traverse it\n\n                                    /*\n                                     * recursively get the paths by getting all\n                                     * the paths from the to node\n                                     */\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            if (includeGroups) {\n                                                // we need to add the group id to the path\n\n                                                if (tempPath.length > 0) {\n\n                                                    // get the first node id in the path\n                                                    var firstNodeId = tempPath[0];\n\n                                                    // get the parent id of the first node\n                                                    var firstParentGroupId = this.getParentGroupId(firstNodeId);\n\n                                                    // get the parent id of the current node\n                                                    var parentGroupId = this.getParentGroupId(nodeId);\n\n                                                    if (parentGroupId != firstParentGroupId) {\n                                                        /*\n                                                         * the parent ids are different which means this is a boundary\n                                                         * between two groups. for example if the project looked like\n                                                         * group1>node1>node2>group2>node3>node4\n                                                         * and the current node was node2 then the first node in the\n                                                         * path would be node3 which means we would need to place\n                                                         * group2 on the bath before node3\n                                                         */\n                                                        tempPath.unshift(firstParentGroupId);\n                                                    }\n                                                }\n                                            }\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                } else {\n                                    /*\n                                     * the node is already in the path so far which means\n                                     * the transition is looping back to a previous node.\n                                     * we do not want to take this transition because\n                                     * it will lead to an infinite loop. we will just\n                                     * add the current node id to the path and not take\n                                     * the transition which essentially ends the path.\n                                     */\n                                    // add the node id to the path\n                                    path.push(nodeId);\n\n                                    // add the path to the all paths array\n                                    allPaths.push(path);\n                                }\n                            }\n                        }\n                    }\n\n                    if (pathSoFar.length > 0) {\n                        // get the last node id\n                        var lastNodeId = pathSoFar[pathSoFar.length - 1];\n\n                        // check if the last node id is a group id\n                        if (this.isGroupNode(lastNodeId)) {\n                            /*\n                             * the last node id is a group id so we will remove it\n                             * since we are moving back up the path as we traverse\n                             * the nodes depth first\n                             */\n                            pathSoFar.pop();\n                        }\n                    }\n\n                    /*\n                     * remove the latest node id (this will be a step node id)\n                     * since we are moving back up the path as we traverse the\n                     * nodes depth first\n                     */\n                    pathSoFar.pop();\n                }\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n\n                /*\n                 * add the node id to the path so far so we can later check\n                 * which nodes are already in the path to prevent looping\n                 * back in the path\n                 */\n                pathSoFar.push(nodeId);\n\n                // get the group node\n                var groupNode = this.getNodeById(nodeId);\n\n                if (groupNode != null) {\n                    var startId = groupNode.startId;\n\n                    if (startId == null || startId == \"\") {\n                        // there is no start id so we will take the transition from the group\n                        // TODO? there is no start id so we will loop through all the child nodes\n\n                        // get the transitions from the group\n                        var transitions = this.getTransitionsByFromNodeId(groupNode.id);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    // get the paths from the to node to the end of the project\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // there is a start id so we will traverse it\n\n                        // get the paths from the start id to the end of the project\n                        var allPathsFromToNode = this.getAllPaths(pathSoFar, startId, includeGroups);\n\n                        if (allPathsFromToNode != null) {\n                            // loop through all the paths from the to node\n                            for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                // get a path\n                                var tempPath = allPathsFromToNode[a];\n\n                                // prepend the current node id to the path\n                                tempPath.unshift(nodeId);\n\n                                // add the path to our collection of paths\n                                allPaths.push(tempPath);\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * remove the latest node id since we are moving back\n                 * up the path as we traverse the nodes depth first\n                 */\n                pathSoFar.pop();\n            }\n        }\n\n        return allPaths;\n    };\n\n    /**\n     * Consolidate all the paths into a linear list of node ids\n     * @param paths an array of paths. each path is an array of node ids.\n     * @return an array of node ids that have been properly ordered\n     */\n    consolidatePaths(paths) {\n        var consolidatedPath = [];\n\n        if (paths != null) {\n\n            /*\n             * continue until all the paths are empty. as we consolidate\n             * node ids, we will remove them from the paths. once all the\n             * paths are empty we will be done consolidating the paths.\n             */\n            while(!this.arePathsEmpty(paths)) {\n\n                // start with the first path\n                var currentPath = this.getNonEmptyPathIndex(paths);\n\n                // get the first node id in the current path\n                var nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n\n                if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                    // the first node ids in all the paths are the same\n\n                    // remove the node id from all the paths\n                    this.removeNodeIdFromPaths(nodeId, paths);\n\n                    // add the node id to our consolidated path\n                    consolidatedPath.push(nodeId);\n                } else {\n                    // not all the top node ids are the same which means we have branched\n\n                    // get all the paths that contain the node id\n                    var pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n                    if (pathsThatContainNodeId != null) {\n                        if (pathsThatContainNodeId.length === 1) {\n                            // only the current path we are on has the node id\n\n                            // remove the node id from the path\n                            this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n                            // add the node id to our consolidated path\n                            consolidatedPath.push(nodeId);\n                        } else {\n                            // there are multiple paths that have this node id\n\n                            // consume all the node ids up to the given node id\n                            var consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n                            // remove the node id from the paths\n                            this.removeNodeIdFromPaths(nodeId, paths);\n\n                            // add the node id to the end of the consumed path\n                            consumedPath.push(nodeId);\n\n                            // add the consumed path to our consolidated path\n                            consolidatedPath = consolidatedPath.concat(consumedPath);\n                        }\n                    }\n                }\n\n            }\n        }\n\n        return consolidatedPath;\n    };\n\n    /**\n     * Consume the node ids in the paths until we get to the given node id\n     * @param paths the paths to consume\n     * @param nodeId the node id to stop consuming at\n     * @return an array of node ids that we have consumed\n     */\n    consumePathsUntilNodeId(paths, nodeId) {\n        var consumedNodeIds = [];\n\n        if (paths != null && nodeId != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id to stop consuming at\n                if (path != null && path.indexOf(nodeId) != -1) {\n                    /*\n                     * the path does contain the node id to stop consuming at\n                     * so we will consume the node ids in this path until\n                     * we get to the given node id to stop consuming at\n                     */\n\n                    // loop through the node ids in the path\n                    for (var x = 0; x < path.length; x++) {\n\n                        // get a node id\n                        var tempNodeId = path[x];\n\n                        if (nodeId === tempNodeId) {\n                            /*\n                             * the node id is the same as the one we need to\n                             * stop consuming at so we will stop looking\n                             * at this path\n                             */\n                            break;\n                        } else {\n                            /*\n                             * the node id is not the one that we need to stop consuming at\n                             * so we will consume it\n                             */\n\n                            // get all the paths that contain the node id\n                            var pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n                            if (pathsThatContainNodeId.length === 1) {\n                                // there is only one path with this node id\n\n                                // remove the node id from the path\n                                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            } else {\n                                // there are multiple paths with this node id\n\n                                // tempNodeId must come before nodeId\n\n                                var pathsToConsume = [];\n\n                                // loop through all the paths that contain the node id\n                                for (var g = 0; g < pathsThatContainNodeId.length; g++) {\n\n                                    // get a path that contains the node id\n                                    var pathThatContainsNodeId = pathsThatContainNodeId[g];\n\n                                    // get the index of the node id we want to remove\n                                    var tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                                    // get the index of the node id we want to stop consuming at\n                                    var nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                                    /*\n                                     * check if the node id we want to remove comes before\n                                     * the node id we want to stop consuming at. we need to\n                                     * do this to prevent an infinite loop. an example of\n                                     * when this can happen is if there are two paths\n                                     *\n                                     * path1 = 1, 2, 3, 4, 5\n                                     * path2 = 1, 2, 4, 3, 5\n                                     *\n                                     * as we consume path1 we will need to consume 3. in order to\n                                     * consume 3, we must consume consume up to 3 in path2.\n                                     * in order to consume up to 3 in path2 we must consume 4.\n                                     * in order to consume 4, we must consume everything before\n                                     * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                                     * this means we need to consume 3 which brings us back up\n                                     * to the top of this paragraph creating an infinite loop.\n                                     *\n                                     * this check below will prevent infinite loops by only\n                                     * adding paths that have the tempNodeId come before the\n                                     * nodeId to stop consuming at.\n                                     */\n                                    if (tempNodeIdIndex < nodeIdIndex) {\n                                        pathsToConsume.push(pathThatContainsNodeId);\n                                    }\n                                }\n\n                                /*\n                                 * take the paths that contain the given node id and consume\n                                 * the paths until the given node id\n                                 */\n                                var tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                                // remove the node id from the paths that contain it\n                                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                                // add the temp consumed node ids to our consumed node ids array\n                                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        return consumedNodeIds;\n    };\n\n    /**\n     * Get the path at the given index and get the first node id in\n     * the path\n     * @param paths an array of paths. each path is an array of node ids\n     * @param index the index of the path we want\n     * @return the first node in the given path\n     */\n    getFirstNodeIdInPathAtIndex(paths, index) {\n        var nodeId = null;\n\n        if (paths != null && index != null) {\n            // get the path at the given index\n            var path = paths[index];\n\n            if (path != null && path.length > 0) {\n                // get the first node id in the path\n                nodeId = path[0];\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Remove the node ifrom the paths\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     */\n    removeNodeIdFromPaths(nodeId, paths) {\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove the node id from the path\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     * @param pathIndex the path to remove from\n     */\n    removeNodeIdFromPath(nodeId, paths, pathIndex) {\n\n        if (nodeId != null && paths != null && pathIndex != null) {\n\n            // get the path at the given index\n            var path = paths[pathIndex];\n\n            if (path != null) {\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a ndoe id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if the first node ids in the paths are the same\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths have the same first node id\n     */\n    areFirstNodeIdsInPathsTheSame(paths) {\n        var result = true;\n\n        var nodeId = null;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // get the first node id in the path\n                var tempNodeId = path[0];\n\n                if (nodeId == null) {\n                    /*\n                     * this is the first path we have looked at so we will\n                     * remember the node id\n                     */\n                    nodeId = tempNodeId;\n                } else if (nodeId != tempNodeId) {\n                    /*\n                     * the node id does not match the first node id from a\n                     * previous path so the paths do not all have the same\n                     * first node id\n                     */\n                    result = false;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if all the paths are empty\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths are empty\n     */\n    arePathsEmpty(paths) {\n        var result = true;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the length of the path\n                    if (path.length !== 0) {\n                        // the path is not empty\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the paths that contain the node id\n     * @param nodeId the node id we are looking for\n     * @param paths an array of paths. each path is an array of node ids\n     * @return an array of paths that contain the given node id\n     */\n    getPathsThatContainNodeId(nodeId, paths) {\n        var pathsThatContainNodeId = [];\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id\n                if (path.indexOf(nodeId) != -1) {\n                    /*\n                     * add the path to the array of paths that contain\n                     * the node id\n                     */\n                    pathsThatContainNodeId.push(path);\n                }\n            }\n        }\n\n        return pathsThatContainNodeId;\n    };\n\n    /**\n     * Get a non empty path index. It will loop through the paths and\n     * return the index of the first non empty path.\n     * @param paths an array of paths. each path is an array of node ids\n     * @return the index of the path that is not empty\n     */\n    getNonEmptyPathIndex(paths) {\n        var index = null;\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // check the length of the path\n                if (path.length !== 0) {\n                    // the path is not empty so we will return this index\n                    index = p;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get the branches in the project\n     */\n    getBranches() {\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the paths in the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // find the branches in the project from the paths\n        var branches = this.findBranches(allPaths);\n\n        return branches;\n    };\n\n    /**\n     * Find the branches in the project\n     * @param paths all the possible paths through the project\n     * @return an array of branch objects. each branch object contains\n     * the branch start point, the branch paths, and the branch\n     * end point\n     */\n    findBranches(paths) {\n        var branches = [];\n\n        var previousNodeId = null;\n\n        /*\n         * continue until all the paths are empty. we will remove\n         * node ids from the paths as we traverse the paths to find\n         * the branches\n         */\n        while (!this.arePathsEmpty(paths)) {\n\n            // get the first node id in the first path\n            var nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n            if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                // the first node ids in all the paths are the same\n\n                // remove the node id from all the paths\n                this.removeNodeIdFromPaths(nodeId, paths);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nodeId;\n            } else {\n                // not all the top node ids are the same which means we have branched\n\n                // create a branch object\n                var branchMetaObject = this.createBranchMetaObject(previousNodeId);\n                branchMetaObject.branchStartPoint = previousNodeId;\n\n                // find the branch end point\n                var nextCommonNodeId = this.findNextCommonNodeId(paths);\n                branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n                // get the branch paths\n                var branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n                branchPaths = this.removeDuplicatePaths(branchPaths);\n                branchMetaObject.branchPaths = branchPaths;\n\n                // add the branch object to our array\n                branches.push(branchMetaObject);\n\n                // trim the paths so that they start at the branch end point\n                this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nextCommonNodeId;\n            }\n        }\n\n        return branches;\n    };\n\n    /**\n     * Create a branch meta object that will contain the branch start\n     * point, branch paths, and branch end point\n     * @return an object that contains a branch start point, branch paths,\n     * and a branch end point\n     */\n    createBranchMetaObject() {\n        var branchMetaObject = {};\n\n        branchMetaObject.branchStartPoint = null;\n        branchMetaObject.branchPaths = [];\n        branchMetaObject.branchEndPoint = null;\n\n        return branchMetaObject;\n    };\n\n    /**\n     * Find the next common node id in all the paths\n     * @param paths the paths to find the common node id in\n     * @return a node id that is in all the paths or null\n     * if there is no node id that is in all the paths\n     */\n    findNextCommonNodeId(paths) {\n        var nextCommonNodeId = null;\n        var subPaths = [];\n\n        if (paths != null) {\n            if (paths.length > 0) {\n                // get the first path\n                var path = paths[0];\n\n                // loop through all the node ids in the first path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    // check if the node id is in all the paths\n                    if (this.allPathsContainNodeId(paths, tempNodeId)) {\n                        /*\n                         * the node id is in all the paths so we have found\n                         * what we were looking for\n                         */\n                        nextCommonNodeId = tempNodeId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextCommonNodeId;\n    };\n\n    /**\n     * Check if all the paths contain the node id\n     * @param paths an array of paths. each path contains an array of node ids\n     * @param nodeId the node id that we will check is in all the paths\n     * @return whether the node id is in all the paths\n     */\n    allPathsContainNodeId(paths, nodeId) {\n        var result = false;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // get the index of the node id in the path\n                var index = path.indexOf(nodeId);\n\n                if (index == -1) {\n                    // the node id is not in the path\n                    result = false;\n                    break;\n                } else {\n                    // the node id is in the path\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Trim the paths up to the given node id so that the paths will contain\n     * the given node id and all the node ids after it. This function will\n     * modify the paths.\n     * @param paths the paths to trim\n     * @param nodeId the node id to trim up to\n     */\n    trimPathsUpToNodeId(paths, nodeId) {\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * trim the path to the end which will make\n                         * the path empty\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * trim the path up to the node id index. this will\n                     * modify the path array.\n                     */\n                    path.splice(0, index);\n                }\n            }\n        }\n    };\n\n\n    /**\n     * Extract the paths up to a given node id. This will be used to\n     * obtain branch paths.\n     * @param paths the paths to extract from\n     * @param nodeId the node id to extract up to\n     * @return paths that go up to but do not include the node id\n     */\n    extractPathsUpToNodeId(paths, nodeId) {\n        var extractedPaths = [];\n\n        if (paths != null) {\n            // loop through the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * extract up to the end of the path\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * get the path up to the node id index. this does\n                     * not modify the path array.\n                     */\n                    var extractedPath = path.slice(0, index);\n\n                    // add the\n                    extractedPaths.push(extractedPath);\n                }\n            }\n        }\n\n        return extractedPaths;\n    };\n\n    /**\n     * Removes duplicate paths\n     * @param paths an array of paths. each path contains an array of node ids\n     * @return an array of unique paths\n     */\n    removeDuplicatePaths(paths) {\n        var uniquePaths = [];\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                var isPathInUniquePaths = false;\n\n                // loop through all the unique paths so far\n                for (var u = 0; u < uniquePaths.length; u++) {\n                    // get a unique path\n                    var uniquePath = uniquePaths[u];\n\n                    // check if the paths are equal\n                    if (this.pathsEqual(path, uniquePath)) {\n                        // the paths are equal\n                        isPathInUniquePaths = true;\n                    }\n                }\n\n                if (!isPathInUniquePaths) {\n                    // the path is not equal to any paths in the unique\n                    // paths array so we will add it to the unique paths array\n                    uniquePaths.push(path);\n                }\n            }\n        }\n\n        return uniquePaths;\n    };\n\n    /**\n     * Check if two paths are equal\n     * @param path1 an array of node ids\n     * @param path2 an array of node ids\n     * @return whether the two paths contain the same node ids\n     * in the same order\n     */\n    pathsEqual(path1, path2) {\n        var result = false;\n\n        if (path1 != null && path2 != null) {\n\n            // check if the paths are the same length\n            if (path1.length === path2.length) {\n                result = true;\n\n                // loop through each element of the first path\n                for (var x = 0; x < path1.length; x++) {\n                    // get the node id from the first path\n                    var path1NodeId = path1[x];\n\n                    // get the node id from the second path\n                    var path2NodeId = path2[x];\n\n                    // check if the node ids are the same\n                    if (path1NodeId !== path2NodeId) {\n                        // the node ids are not the same to the paths are not equal\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id is in any branch\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return whether the node id is in any branch\n     */\n    isNodeIdInABranch(branches, nodeId) {\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branch objects\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch object\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths for this branch object\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // check if the node id is in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    // the node id is in this branch path\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Get the branch paths that a node id is in\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return an array of the branch paths that the node id is in\n     */\n    getBranchPathsByNodeId(branches, nodeId) {\n        var branchPathsIn = [];\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // get the index of the node id in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    /*\n                                     * the node is in this branch path so we will\n                                     * add the branch path to our array\n                                     */\n                                    branchPathsIn.push(branchPath);\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathsIn;\n    }\n\n    /**\n     * Get the component by node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n     */\n    getComponentByNodeIdAndComponentId(nodeId, componentId) {\n        var component = null;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n\n        }\n\n        return component;\n    };\n\n    /**\n     * Returns the position of the component in the node by node id and component id, 0-indexed.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component's position or -1 if nodeId or componentId are null or doesn't exist in the project.\n     */\n    getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n        var componentPosition = -1;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        componentPosition = c;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return componentPosition;\n    };\n\n    /**\n     * Get the components in a node\n     * @param nodeId the node id\n     * @returns an array of components or empty array if nodeId is null or doesn't exist in the project.\n     * if the node exists but doesn't have any components, returns an empty array.\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the components\n                if (node.components != null) {\n                    components = node.components;\n                }\n            }\n        }\n\n        return components;\n    };\n\n    getNodeContentByNodeId(nodeId) {\n        var nodeContent = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                nodeContent = node;\n            }\n        }\n\n        return nodeContent;\n    };\n\n    /**\n     * Replace a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param component the new component\n     */\n    replaceComponent(nodeId, componentId, component) {\n\n        if (nodeId != null && componentId != null && component != null) {\n\n            // get all the components for the node\n            var components = this.getComponentsByNodeId(nodeId);\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        if (tempComponent.id === componentId) {\n                            // the component id matches the one we want so we will replace it\n                            components[c] = component;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a new group\n     * @param title the title of the group\n     * @returns the group object\n     */\n    createGroup(title) {\n\n        // get the next available group id\n        var newGroupId = this.getNextAvailableGroupId();\n\n        // create the group object\n        var newGroup = {};\n        newGroup.id = newGroupId;\n        newGroup.type = 'group';\n        newGroup.title = title;\n        newGroup.startId = '';\n        newGroup.ids = [];\n\n        return newGroup;\n    };\n\n    /**\n     * Create a new node\n     * @param title the title of the node\n     * @returns the node object\n     */\n    createNode(title) {\n\n        // get the next available node id\n        var newNodeId = this.getNextAvailableNodeId();\n\n        // create the node object\n        var newNode = {};\n        newNode.id = newNodeId;\n        newNode.title = title;\n        newNode.type = 'node';\n        newNode.constraints = [];\n        newNode.transitionLogic = {};\n        newNode.transitionLogic.transitions = [];\n\n        newNode.showSaveButton = false;\n        newNode.showSubmitButton = false;\n        newNode.components = [];\n\n        return newNode;\n    };\n\n    /**\n     * Create a node inside the group\n     * @param node the new node\n     * @param nodeId the node id of the group to create the node in\n     */\n    createNodeInside(node, nodeId) {\n\n        if (nodeId == 'inactiveNodes') {\n            // add the node to the inactive nodes\n\n            // add the node to the inactive nodes\n            this.addInactiveNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n            this.setIdToElement(node.id, node);\n        } else {\n            // add the node to the active nodes\n\n            // add the node to the project\n            this.addNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n\n            // create the transitions for the node\n            this.insertNodeInsideInTransitions(node.id, nodeId);\n\n            // add the node to the group\n            this.insertNodeInsideInGroups(node.id, nodeId);\n        }\n    }\n\n    /**\n     * Create a node after the given node id\n     * @param node the new node\n     * @param nodeId the node to add after\n     */\n    createNodeAfter(node, nodeId) {\n\n        if (this.isInactive(nodeId)) {\n            // we are adding the node after a node that is inactive\n\n            // add the node to the inactive nodes\n            this.addInactiveNode(node, nodeId);\n\n            this.setIdToNode(node.id, node);\n            this.setIdToElement(node.id, node);\n        } else {\n            // we are adding the node after a node that is active\n\n            // add the node to the project\n            this.addNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n\n            // insert the new node id into the array of children ids\n            this.insertNodeAfterInGroups(node.id, nodeId);\n\n            // create the transition to the node\n            this.insertNodeAfterInTransitions(node, nodeId);\n        }\n\n        if (this.isGroupNode(node.id)) {\n            /*\n             * we are creating a group node so we will update/create the\n             * transitions that traverse from the previous group to this group\n             */\n\n            var oldToGroupIds = [];\n\n            // get the transitions that come out of the previous group\n            var transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n\n            if (transitionsFromGroup != null) {\n\n                /*\n                 * loop through all the transitions that come out of the previous group\n                 * and get the node ids that the group transitions to\n                 */\n                for (var t = 0; t < transitionsFromGroup.length; t++) {\n                    var transitionFromGroup = transitionsFromGroup[t];\n\n                    if (transitionFromGroup != null) {\n                        var toNodeId = transitionFromGroup.to;\n\n                        if (toNodeId != null) {\n                            oldToGroupIds.push(toNodeId);\n                        }\n                    }\n                }\n            }\n\n            var fromGroupId = nodeId;\n            var oldToGroupIds = oldToGroupIds;\n            var newToGroupId = node.id;\n\n            /*\n             * make the transitions point to the new group and make the new\n             * group transition to the old group\n             */\n            this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n        }\n    }\n\n    /**\n     * Insert the node after the given node id in the group's\n     * array of children ids\n     * @param nodeIdToInsert the node id we want to insert\n     * @param nodeIdToInsertAfter the node id we want to insert after\n     */\n    insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n        var groupNodes = this.getGroupNodes();\n\n        if (groupNodes != null) {\n\n            // loop through the groups\n            for (var g = 0; g < groupNodes.length; g++) {\n                var group = groupNodes[g];\n\n                if (group != null) {\n                    var ids = group.ids;\n\n                    if (ids != null) {\n\n                        // loop through the children ids\n                        for (var i = 0; i < ids.length; i++) {\n                            var id = ids[i];\n\n                            if (nodeIdToInsertAfter === id) {\n                                // we have found the node id we want to insert after\n\n                                // insert the new node id\n                                ids.splice(i + 1, 0, nodeIdToInsert);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node after another node\n     * @param node the node to insert\n     * @param nodeId the node id to insert after\n     */\n    insertNodeAfterInTransitions(node, nodeId) {\n\n        // get the node that will end up before\n        var previousNode = this.getNodeById(nodeId);\n\n        if (previousNode != null) {\n\n            if (previousNode.transitionLogic == null) {\n                previousNode.transitionLogic = {};\n                previousNode.transitionLogic.transitions = [];\n            }\n\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            if (this.isGroupNode(node.id)) {\n                /*\n                 * the node we are inserting is a group so we will update\n                 * the transitions of its children so that they transition\n                 * to the correct node\n                 */\n                this.updateChildrenTransitionsForMovingGroup(node, nodeId);\n            }\n\n            var previousNodeTransitionLogic = previousNode.transitionLogic;\n\n            if (previousNodeTransitionLogic != null) {\n\n                // get the transitions from the before node\n                var transitions = previousNodeTransitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // make a copy of the transitions\n                    var transitionsJSONString = angular.toJson(transitions);\n                    var transitionsCopy = angular.fromJson(transitionsJSONString);\n\n                    // set the transitions from the before node into the inserted node\n                    node.transitionLogic.transitions = transitionsCopy;\n                }\n            }\n\n            if (node.transitionLogic.transitions.length == 0) {\n                /*\n                 * The node does not have any transitions so we will look for\n                 * a transition on the parent group. If the parent has a\n                 * transition we will use it for the node.\n                 */\n\n                // get the parent group\n                var parentGroupId = this.getParentGroupId(nodeId);\n\n                // get the parent transitions\n                var parentTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                if (parentTransitions != null) {\n\n                    // loop through all the parent transitions\n                    for (var p = 0; p < parentTransitions.length; p++) {\n                        var parentTransition = parentTransitions[p];\n\n                        var newTransition = {};\n\n                        if (parentTransition != null) {\n                            var toNodeId = parentTransition.to;\n\n                            if (this.isGroupNode(toNodeId)) {\n                                // the transition is to a group\n\n                                // get the start id of the group\n                                var startId = this.getGroupStartId(toNodeId);\n\n                                if (startId == null || startId == '') {\n                                    // there is no start id so we will just use the group id\n                                    newTransition.to = toNodeId;\n                                } else {\n                                    // there is a start id so we will use it as the to node\n                                    newTransition.to = startId;\n                                }\n                            } else {\n                                // the tranisition is to a step\n                                newTransition.to = toNodeId;\n                            }\n                        }\n\n                        // add the new transition to the node\n                        node.transitionLogic.transitions.push(newTransition);\n                    }\n                }\n            }\n\n            var newNodeId = node.id;\n\n            // TODO handle branching case\n\n            // remove the transitions from the before node\n            previousNode.transitionLogic.transitions = [];\n\n            var transitionObject = {};\n            transitionObject.to = newNodeId;\n\n            // make the before node point to the new node\n            previousNode.transitionLogic.transitions.push(transitionObject);\n\n            // remove the branch path taken constraints from the node we are moving\n            this.removeBranchPathTakenNodeConstraints(node.id);\n\n            // get the branch path taken constraints from the previous node\n            var branchPathTakenConstraints = this.getBranchPathTakenConstraintsByNodeId(nodeId);\n\n            /*\n             * if the previous node was in a branch path, we will also put the\n             * inserted node into the branch path\n             */\n            if (branchPathTakenConstraints != null && branchPathTakenConstraints.length > 0) {\n\n                if (node.constraints == null) {\n                    node.constraints = [];\n                }\n\n                // loop through all the branch path taken constraints\n                for (var c = 0; c < branchPathTakenConstraints.length; c++) {\n\n                    // get a branch path taken constraint\n                    var branchPathTakenConstraint = branchPathTakenConstraints[c];\n\n                    if (branchPathTakenConstraint != null) {\n\n                        // create a new constraint with the same branch path taken parameters\n                        var newConstraint = {};\n                        newConstraint.id = this.getNextAvailableConstraintIdForNodeId(node.id);\n                        newConstraint.action = branchPathTakenConstraint.action;\n                        newConstraint.targetId = node.id;\n                        newConstraint.removalCriteria = this.UtilService.makeCopyOfJSONObject(branchPathTakenConstraint.removalCriteria);\n\n                        // add the constraint to the node\n                        node.constraints.push(newConstraint);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Insert a node into a group\n     * @param nodeIdToInsert the node id to insert\n     * @param nodeIdToInsertInside the node id of the group we will insert into\n     */\n    insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the group we will insert into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (group != null) {\n            var ids = group.ids;\n\n            if (ids != null) {\n\n                // insert the node node id into the beginning of the child ids\n                ids.splice(0, 0, nodeIdToInsert);\n\n                // set the inserted node id as the start id\n                group.startId = nodeIdToInsert;\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node into a group\n     * @param nodeIdToInsert node id that we will insert\n     * @param nodeIdToInsertInside the node id of the group we are inserting into\n     */\n    insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the node we are inserting\n        var nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n        // get the group we are inserting into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (this.isGroupNode(nodeIdToInsert)) {\n            /*\n             * the node we are inserting is a group so we will update\n             * the transitions of its children so that they transition\n             * to the correct node\n             */\n            this.updateChildrenTransitionsForMovingGroup(nodeToInsert, null);\n        }\n\n        /*\n         * since we are inserting a node into a group, the node will become\n         * the first node in the group. this means we need to update any nodes\n         * that point to the old start id and make them point to the node\n         * we are inserting.\n         */\n        if (nodeToInsert != null && group != null) {\n\n            // get the start node\n            var startId = group.startId;\n\n            // get transitions that point to the start node\n            var previousNodes = this.getNodesByToNodeId(startId);\n\n            if (previousNodes == null || previousNodes.length == 0) {\n                // there are no transitions to the start node\n\n                // find all the groups that point to this group\n                var previousGroups = this.getGroupNodesByToNodeId(nodeIdToInsertInside);\n\n                // loop through all the groups that point to this group\n                for (var g = 0; g < previousGroups.length; g++) {\n                    var previousGroup = previousGroups[g];\n\n                    if (previousGroup != null) {\n                        // get the nodes that do not have a transition in the previous group\n                        var lastNodesInGroup = this.getLastNodesInGroup(previousGroup.id);\n\n                        for (var n = 0; n < lastNodesInGroup.length; n++) {\n                            // get a node that does not have a transition\n                            var node = lastNodesInGroup[n];\n\n                            // add a transition from the node to the node we are inserting\n                            this.addToTransition(node, nodeIdToInsert);\n                        }\n                    }\n                }\n            } else {\n                // there are transitions to the start node\n\n                for (var p = 0; p < previousNodes.length; p++) {\n                    var previousNode = previousNodes[p];\n\n                    if (previousNode != null) {\n                        // change the transition to point to the node we are inserting\n                        this.updateToTransition(previousNode, startId, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * update all the transitions that point to the group and change\n             * them to point to the new start id\n             */\n            var nodesThatTransitionToGroup = this.getNodesByToNodeId(nodeIdToInsertInside);\n\n            if (nodesThatTransitionToGroup != null) {\n                for (var n = 0; n < nodesThatTransitionToGroup.length; n++) {\n                    var nodeThatTransitionsToGroup = nodesThatTransitionToGroup[n];\n\n                    if (!this.isGroupNode(nodeThatTransitionsToGroup.id)) {\n                        this.updateToTransition(nodeThatTransitionsToGroup, nodeIdToInsertInside, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * create a transition from the node we are inserting to the node that\n             * was previously the start node\n             */\n            if (startId != null && startId != '') {\n                // there is a start id\n\n                var startNode = this.getNodeById(startId);\n\n                if (startNode != null) {\n                    // the group has a start node which will become the transition to node\n\n                    if (nodeToInsert.transitionLogic == null) {\n                        nodeToInsert.transitionLogic = {};\n                    }\n\n                    if (nodeToInsert.transitionLogic.transitions == null) {\n                        nodeToInsert.transitionLogic.transitions = [];\n                    }\n\n                    /*\n                     * make the inserted node transition to the previous start node\n                     */\n                    var transitionObject = {};\n                    transitionObject.to = startId;\n                    nodeToInsert.transitionLogic.transitions.push(transitionObject);\n                }\n            }\n\n            //check if the node we inserted has any transitions now\n            var transitions = this.getTransitionsByFromNodeId(nodeIdToInsert);\n\n            if (transitions == null || transitions.length == 0) {\n                /*\n                 * the node doesn't have any transitions so we will see if\n                 * the parent group transitions to anything and use that\n                 * transition\n                 */\n\n                // get the transitions from the parent\n                var parentTransitions = this.getTransitionsByFromNodeId(nodeIdToInsertInside);\n\n                if (parentTransitions != null) {\n\n                    // loop through all the parent transitions\n                    for (var t = 0; t < parentTransitions.length; t++) {\n                        var parentTransition = parentTransitions[t];\n\n                        if (parentTransition != null) {\n                            var toNodeId = parentTransition.to;\n\n                            if (this.isGroupNode(toNodeId)) {\n                                // the to node is a group\n\n                                // get the to group\n                                var nextGroup = this.getNodeById(toNodeId);\n\n                                if (nextGroup != null) {\n\n                                    // get the start id of the to group\n                                    var startId = nextGroup.startId;\n\n                                    if (startId == null || startId == '') {\n                                        // there is no start id so we will just transition to the group\n                                        this.addToTransition(nodeToInsert, toNodeId);\n                                    } else {\n                                        // there is a start id so we will transition to that\n                                        this.addToTransition(nodeToInsert, startId);\n                                    }\n                                }\n                            } else {\n                                // the to node is not a group\n\n                                /*\n                                 * we will add a transition from the node we are inserting to\n                                 * to that node\n                                 */\n                                this.addToTransition(nodeToInsert, toNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a transition to a node\n     * @param node the node we are adding a transition to\n     * @param toNodeId the node id we going to transition to\n     * @param criteria (optional) a criteria object specifying\n     * what needs to be satisfied in order to use this transition\n     */\n    addToTransition(node, toNodeId, criteria) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transition = {};\n\n            // set the to node id\n            transition.to = toNodeId;\n\n            if (criteria != null) {\n                // set the criteria\n                transition.criteria = criteria;\n            }\n\n            // add the transition to the node's transitions\n            node.transitionLogic.transitions.push(transition);\n        }\n    }\n\n    /**\n     * Update the to value of aa transition\n     * @param node the node to update\n     * @param oldToNodeId the previous to node id\n     * @param newToNodeId the new to node id\n     */\n    updateToTransition(node, oldToNodeId, newToNodeId) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transitions = node.transitionLogic.transitions;\n\n            // loop through all the transitions\n            for (var t = 0; t < transitions.length; t++) {\n                var transition = transitions[t];\n\n                if (transition != null) {\n                    var toNodeId = transition.to;\n\n                    if (oldToNodeId === toNodeId) {\n                        // we have found the transition we want to update\n\n                        // update the to node id\n                        transition.to = newToNodeId;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the nodes in a group that do not have transitions\n     * @param groupId the group id\n     * @returns the nodes in the group that do not have transitions\n     */\n    getLastNodesInGroup(groupId) {\n        var lastNodes = [];\n\n        if (groupId != null) {\n            var group = this.getNodeById(groupId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            var child = this.getNodeById(childId);\n\n                            if (child != null) {\n                                var transitionLogic = child.transitionLogic;\n\n                                if (transitionLogic != null) {\n\n                                    // get the transitions\n                                    var transitions = transitionLogic.transitions;\n\n                                    if (transitions == null || transitions.length == 0) {\n                                        // this child does not have any transitions\n                                        lastNodes.push(child);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return lastNodes;\n    }\n\n    /**\n     * Get the next available group id\n     * @returns the next available group id\n     */\n    getNextAvailableGroupId() {\n\n        // get all the group ids\n        var groupIds = this.getGroupIds();\n\n        var largestGroupIdNumber = null;\n\n        // loop through all the existing group ids\n        for (var g = 0; g < groupIds.length; g++) {\n            var groupId = groupIds[g];\n\n            // get the number from the group id e.g. the number of 'group2' would be 2\n            var groupIdNumber = groupId.replace('group', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(groupIdNumber)) {\n\n                groupIdNumber = parseInt(groupIdNumber);\n\n                // update the largest group id number if necessary\n                if (largestGroupIdNumber == null) {\n                    largestGroupIdNumber = groupIdNumber;\n                } else if (groupIdNumber > largestGroupIdNumber) {\n                    largestGroupIdNumber = groupIdNumber;\n                }\n            }\n        }\n\n        // create the next available group id\n        var nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n\n        return nextAvailableGroupId;\n    }\n\n    /**\n     * Get all the group ids\n     * @returns an array with all the group ids\n     */\n    getGroupIds() {\n\n        var groupIds = [];\n\n        var groupNodes = this.groupNodes;\n\n        // loop through all the group nodes\n        for (var g = 0; g < groupNodes.length; g++) {\n            var group = groupNodes[g];\n\n            if (group != null) {\n                var groupId = group.id;\n\n                if (groupId != null) {\n                    // add the group id\n                    groupIds.push(groupId);\n                }\n            }\n        }\n\n        return groupIds;\n    }\n\n    /**\n     * Get the next available node id\n     * @returns the next available node id\n     */\n    getNextAvailableNodeId() {\n\n        // get all the node ids\n        var nodeIds = this.getNodeIds();\n\n        var largestNodeIdNumber = null;\n\n        // loop through all the existing node ids\n        for (var n = 0; n < nodeIds.length; n++) {\n            var nodeId = nodeIds[n];\n\n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = nodeId.replace('node', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n\n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n\n        // get all the inactive node ids\n        var inactiveNodeIds = this.getInactiveNodeIds();\n\n        for (var i = 0; i < inactiveNodeIds.length; i++) {\n            var inactiveNodeId = inactiveNodeIds[i];\n\n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = inactiveNodeId.replace('node', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n\n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n\n        // create the next available node id\n        var nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n\n        return nextAvailableNodeId;\n    }\n\n    /**\n     * Get all the node ids from steps (not groups)\n     * @returns an array with all the node ids\n     */\n    getNodeIds() {\n\n        var nodeIds = [];\n\n        var nodes = this.applicationNodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n                    nodeIds.push(nodeId);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Get all the node ids from inactive steps\n     * @returns an array with all the inactive node ids\n     */\n    getInactiveNodeIds() {\n\n        var nodeIds = [];\n\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var n = 0; n < inactiveNodes.length; n++) {\n                var inactiveNode = inactiveNodes[n];\n\n                if (inactiveNode != null) {\n                    var nodeId = inactiveNode.id;\n\n                    if (nodeId != null) {\n                        nodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Move nodes inside a group node\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id of the group we are moving the nodes inside\n     */\n    moveNodesInside(nodeIds, nodeId) {\n\n        // loop thorugh all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var tempNode = this.getNodeById(tempNodeId);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(tempNode, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                this.moveToActive(tempNode);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(tempNode, nodeId);\n            }\n\n            /*\n             * remember the node id so we can put the next node (if any)\n             * after this one\n             */\n            nodeId = tempNode.id;\n        }\n    }\n\n    /**\n     * Move nodes after a certain node id\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id we will put the moved nodes after\n     */\n    moveNodesAfter(nodeIds, nodeId) {\n\n        // loop through all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var node = this.getNodeById(tempNodeId);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(node, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                // move the node to the active nodes array\n                this.moveToActive(node);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(node, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = node.id;\n        }\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesInside(nodeIds, nodeId) {\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            if (n == 0) {\n                // this is the first node we are copying so we will insert it\n                // into the beginning of the group\n                this.createNodeInside(newNode, nodeId);\n            } else {\n                // this is not the first node we are copying so we will insert\n                // it after the node we previously inserted\n                this.createNodeAfter(newNode, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n        }\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesAfter(nodeIds, nodeId) {\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            this.createNodeAfter(newNode, nodeId);\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n        }\n    }\n\n    /**\n     * Copy the node with the specified nodeId\n     * @param nodeId the node id to copy\n     * @return copied node\n     */\n    copyNode(nodeId) {\n        var node = this.getNodeById(nodeId);\n\n        var nodeCopy = JSON.parse(JSON.stringify(node));\n        nodeCopy.id = this.getNextAvailableNodeId();\n        nodeCopy.transitionLogic = {};  // clear transition logic\n        nodeCopy.constraints = [];  // clear constraints\n        for (var c = 0; c < nodeCopy.components.length; c++) {\n            var component = nodeCopy.components[c];\n            var componentType = component.type;\n            // get the service for the node type \n            var service = this.$injector.get(componentType + 'Service'); \n            // copy the component\n            var componentCopy = service.copyComponent(component);\n            if (component.maxScore != null) {\n                // Also copy the max score if exists in original node\n                componentCopy.maxScore = component.maxScore;\n            }\n            if (component.showPreviousWorkPrompt != null) {\n                // Also copy the showPreviousWorkPrompt if exists in original node\n                componentCopy.showPreviousWorkPrompt = component.showPreviousWorkPrompt;\n            }\n            if (component.showPreviousWorkNodeId != null) {\n                // Also copy the showPreviousWorkNodeId if exists in original node\n                componentCopy.showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n            }\n            if (component.showPreviousWorkComponentId != null) {\n                // Also copy the showPreviousWorkComponentId if exists in original node\n                componentCopy.showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n            }\n\n            nodeCopy.components[c] = componentCopy;\n        }\n        return nodeCopy;\n    }\n\n    /**\n     * Delete a node\n     * @param nodeId the node id\n     */\n    deleteNode(nodeId) {\n\n        if (this.isGroupNode(nodeId)) {\n            // the node is a group node so we will also remove all of its children\n            var group = this.getNodeById(nodeId);\n\n            // TODO check if the child is in another group, if so do not remove\n\n            if (group != null) {\n                var ids = group.ids;\n\n                // loop through all the children\n                for (var i = 0; i < ids.length; i++) {\n                    var id = ids[i];\n\n                    // remove the child\n                    this.removeNodeIdFromTransitions(id);\n                    this.removeNodeIdFromGroups(id);\n                    this.removeNodeIdFromNodes(id);\n\n                    /*\n                     * move the counter back because we have removed a child\n                     * from the parent group's array of child ids so all of\n                     * the child ids were shifted back one and the next child\n                     * we want will be at i--\n                     */\n                    i--;\n                }\n            }\n        }\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        // check if we need to update the start id of the parent group\n        if (parentGroup != null) {\n\n            /*\n             * the node is the start node of the parent group so we need\n             * to update the start id of the parent group to point to\n             * the next node\n             */\n            if (nodeId === parentGroup.startId) {\n\n                var hasSetNewStartId = false;\n\n                // get the node\n                var node = this.getNodeById(nodeId);\n\n                if (node != null) {\n                    var transitionLogic = node.transitionLogic;\n\n                    if (transitionLogic != null) {\n                        var transitions = transitionLogic.transitions;\n\n                        if (transitions != null && transitions.length > 0) {\n                            var transition = transitions[0];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (toNodeId != null) {\n\n                                    // check that the to node is in the same group\n                                    if (this.isNodeInGroup(toNodeId, parentGroup.id)) {\n\n                                        // update the parent group start id\n                                        parentGroup.startId = toNodeId;\n                                        hasSetNewStartId = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (!hasSetNewStartId) {\n                    parentGroup.startId = '';\n                }\n            }\n        }\n\n        // remove the node\n        this.removeNodeIdFromTransitions(nodeId);\n        this.removeNodeIdFromGroups(nodeId);\n        this.removeNodeIdFromNodes(nodeId);\n\n        if (parentGroup != null) {\n            this.recalculatePositionsInGroup(parentGroup.id);\n        }\n    }\n\n    /**\n     * Update the transitions to handle removing a node\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromTransitions(nodeId) {\n\n        // get the node we are removing\n        var nodeToRemove = this.getNodeById(nodeId);\n\n        // get all the nodes that have a transition to the node we are removing\n        var nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n        // get the transitions of the node we are removing\n        var nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n        var nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n            nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        var parentIdOfNodeToRemove = this.getParentGroupId(nodeId);\n\n        var parentGroup = this.getNodeById(parentIdOfNodeToRemove);\n\n        // update the start id if we are removing the start node of a group\n        if (parentGroup != null) {\n            var parentGroupStartId = parentGroup.startId;\n\n            if (parentGroupStartId != null) {\n                if (parentGroupStartId === nodeId) {\n                    // the node we are removing is the start node\n\n                    if (nodeToRemoveTransitions != null && nodeToRemoveTransitions.length > 0) {\n\n                        // loop through all the transitions from the node to choose a new start id\n                        for (var t = 0; t < nodeToRemoveTransitions.length; t++) {\n                            var nodeToRemoveTransition = nodeToRemoveTransitions[t];\n\n                            if (nodeToRemoveTransition != null) {\n                                var toNodeId = nodeToRemoveTransition.to;\n\n                                if (toNodeId != null) {\n                                    /*\n                                     * we need to check that the to node id is in the\n                                     * same group. some transitions point to a node id\n                                     * in the next group which we would not want to use\n                                     * for the start id.\n                                     */\n                                    if (this.getParentGroupId(toNodeId) == parentIdOfNodeToRemove) {\n\n                                        // set the new start id\n                                        parentGroup.startId = toNodeId;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // there are no transitions so we will have an empty start id\n                        parentGroup.startId = '';\n                    }\n                }\n            }\n        }\n\n        // loop through all the nodes that transition to the node we are removing\n        for (var n = 0; n < nodesByToNodeId.length; n++) {\n\n            // get a node that has a transition to the node we are removing\n            var node = nodesByToNodeId[n];\n\n            if (node != null) {\n                var parentIdOfFromNode = this.getParentGroupId(node.id);\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    // loop through all the transitions of this node\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (nodeId === transition.to) {\n                            // we have found the transition to the node we are removing\n\n                            // copy the transitions from the node we are removing\n                            var transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n                            transitionsCopy = angular.fromJson(transitionsCopy);\n\n                            /*\n                             * if the parent from group is different than the parent removing group\n                             * remove transitions that are to a node in a different group than\n                             * the parent removing group\n                             */\n\n                            if (parentIdOfFromNode != parentIdOfNodeToRemove) {\n\n                                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                    var tempTransition = transitionsCopy[tc];\n\n                                    if (tempTransition != null) {\n                                        var tempToNodeId = tempTransition.to;\n\n                                        if (tempToNodeId != null) {\n                                            var parentIdOfToNode = this.getParentGroupId(tempToNodeId);\n\n                                            if (parentIdOfNodeToRemove != parentIdOfToNode) {\n                                                // remove the transition\n\n                                                transitionsCopy.splice(tc, 1);\n                                                tc--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            if (this.isFirstNodeInBranchPath(nodeId)) {\n                                /*\n                                 * Get the node ids that have a branchPathTaken\n                                 * constraint from the before node and to the node\n                                 * we are removing. If there are any, we need to\n                                 * update the branchPathTaken constraint with the\n                                 * next nodeId that comes after the node we are\n                                 * removing.\n                                 */\n                                var nodeIdsInBranch = this.getNodeIdsInBranch(node.id, nodeId);\n\n                                if (nodeIdsInBranch != null) {\n\n                                    // loop through all the node ids in the branch\n                                    for (var nib = 0; nib < nodeIdsInBranch.length; nib++) {\n                                        var nodeIdInBranch = nodeIdsInBranch[nib];\n                                        var nodeInBranch = this.getNodeById(nodeIdInBranch);\n\n                                        // loop through all the transitions in the node we are removing\n                                        for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                            var transitionCopy = transitionsCopy[tc];\n\n                                            if (transitionCopy != null) {\n                                                var currentFromNodeId = node.id;\n                                                var currentToNodeId = nodeId;\n                                                var newFromNodeId = node.id;\n                                                var newToNodeId = transitionCopy.to;\n\n                                                /*\n                                                 * change the branch path taken constraint by changing\n                                                 * the toNodeId\n                                                 */\n                                                this.updateBranchPathTakenConstraint(nodeInBranch, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // remove the transition to the node we are removing\n                            transitions.splice(t, 1);\n\n                            if (transitionsCopy != null) {\n                                var insertIndex = t;\n\n                                /*\n                                 * loop through all the transitions from the node we are removing\n                                 * and insert them into the transitions of the from node\n                                 * e.g.\n                                 * the node that comes before the node we are removing has these transitions\n                                 * \"transitions\": [\n                                 *     {\n                                 *         \"to\": \"node4\"\n                                 *     },\n                                 *     {\n                                 *         \"to\": \"node6\"\n                                 *     }\n                                 * ]\n                                 *\n                                 * we are removing node4. node4 has a transition to node5.\n                                 *\n                                 * the node that comes before the node we are removing now has these transitions\n                                 * \"transitions\": [\n                                 *     {\n                                 *         \"to\": \"node5\"\n                                 *     },\n                                 *     {\n                                 *         \"to\": \"node6\"\n                                 *     }\n                                 * ]\n                                 */\n                                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                    // insert a transition from the node we are removing\n                                    transitions.splice(insertIndex, 0, transitionsCopy[tc]);\n                                    insertIndex++;\n                                }\n                            }\n\n                            // check if the node we are moving is a group\n                            if (this.isGroupNode(nodeId)) {\n                                /*\n                                 * we are moving a group so we need to update transitions that\n                                 * go into the group\n                                 */\n                                var groupIdWeAreMoving = nodeId;\n                                var groupThatTransitionsToGroupWeAreMoving = node;\n                                this.updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving);\n                            }\n                        }\n                    }\n\n                    // set the transitions into the node that transitions to the node we are removing\n                    transitionLogic.transitions = transitions;\n                }\n            }\n        }\n\n        if (nodeToRemoveTransitionLogic != null) {\n            // clear the transitions of the node we are removing\n            nodeToRemoveTransitionLogic.transitions = [];\n        }\n\n        if (this.isGroupNode(nodeId)) {\n            /*\n             * this is a group node so we will remove all child transitions that\n             * go out of this group\n             */\n\n            //this.removeTransitionsIntoGroup(nodeId);\n            this.removeTransitionsOutOfGroup(nodeId);\n        }\n    };\n\n    /**\n     * Remove the node id from a group\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromGroups(nodeId) {\n\n        var groups = this.groupNodes;\n\n        if (groups != null) {\n\n            // loop through all the groups\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n\n                    // get the start id of the group\n                    var startId = group.startId;\n\n                    // get the child ids of the group\n                    var ids = group.ids;\n\n                    // loop through all the child ids\n                    for (var i = 0; i < ids.length; i++) {\n                        var id = ids[i];\n\n                        if (nodeId === id) {\n                            // we have found the node id we want to remove\n                            ids.splice(i, 1);\n\n                            if (nodeId === startId) {\n                                /*\n                                 * the node id is also the start id so we will get the\n                                 * next node id and set it as the new start id\n                                 */\n\n                                var hasSetNewStartId = false;\n\n                                // get the node we are removing\n                                var node = this.getNodeById(id);\n\n                                if (node != null) {\n                                    var transitionLogic = node.transitionLogic;\n\n                                    if (transitionLogic != null) {\n                                        var transitions = transitionLogic.transitions;\n\n                                        if (transitions != null && transitions.length > 0) {\n\n                                            // get the first transition\n                                            // TODO handle the case when the node we are removing is a branch point\n                                            var transition = transitions[0];\n\n                                            if (transition != null) {\n                                                // get the node that this node transitions to\n                                                var to = transition.to;\n\n                                                if (to != null) {\n                                                    // set the to node as the start id\n                                                    group.startId = to;\n                                                    hasSetNewStartId = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (!hasSetNewStartId) {\n                                    /*\n                                     * the node we are removing did not have a transition\n                                     * so there will be no start id\n                                     */\n                                    group.startId = '';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the array of nodes\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromNodes(nodeId) {\n\n        // get all the nodes in the project\n        var nodes = this.project.nodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                if (nodeId === node.id) {\n                    // we have found the node we want to remove\n                    nodes.splice(n, 1);\n                }\n            }\n        }\n\n        // get all the inactive nodes\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    if (nodeId === inactiveNode.id) {\n                        // we have found the inactive node we want to remove\n                        inactiveNodes.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove from the inactive nodes array\n     */\n    removeNodeIdFromInactiveNodes(nodeId) {\n\n        // get the inactive nodes array\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    var inactiveNodeId = inactiveNode.id;\n\n                    if (nodeId === inactiveNodeId) {\n                        /*\n                         * we have found the node we are looking for so we will\n                         * remove it\n                         */\n                        inactiveNodes.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a new component\n     * @param nodeId the node id to create the component in\n     * @param componentType the component type\n     */\n    createComponent(nodeId, componentType) {\n\n        if (nodeId != null && componentType != null) {\n            // get the node we will create the component in\n            var node = this.getNodeById(nodeId);\n\n            // get the service for the component type\n            var service = this.$injector.get(componentType + 'Service');\n\n            if (node != null && service != null) {\n\n                // create the new component\n                var component = service.createComponent();\n\n                if (service.componentHasWork()) {\n                    /*\n                     * the component has student work so we will need to\n                     * determine if we need to show the save button on the\n                     * component or the step\n                     */\n\n                    if (node.showSaveButton == true) {\n                        /*\n                         * the step is showing a save button so we will not show\n                         * the save button on this new component\n                         */\n                    } else {\n                        // the step is not showing a save button\n\n                        if (this.doesAnyComponentShowSubmitButton(node.id)) {\n                            /*\n                             * at least one of the other components in the step are\n                             * showing a submit button so we will also show the save\n                             * button on this new component\n                             */\n\n                            // turn on the component save button\n                            component.showSaveButton = true;\n                        } else {\n                            /*\n                             * none of the other components are showing a submit button\n                             * so we will show the save button on the step\n                             */\n\n                            // turn on the step save button\n                            node.showSaveButton = true;\n                        }\n                    }\n                }\n\n                // add the component to the node\n                this.addComponentToNode(node, component);\n            }\n        }\n    }\n\n    /**\n     * Does any component in the step generate work\n     * @param nodeId the node id\n     * @return whether any components in the step generates work\n     */\n    doesAnyComponentHaveWork(nodeId) {\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentType = component.type;\n\n                        // get the service for the component type\n                        var service = this.$injector.get(componentType + 'Service');\n\n                        if (service != null) {\n                            if (service.componentHasWork()) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if any of the components in the node are showing their save button\n     * @param nodeId the node id to check\n     * @return whether any of the components in the node show their save button\n     */\n    doesAnyComponentShowSaveButton(nodeId) {\n\n        var result = false;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        if (component.showSaveButton == true) {\n                            // the component is showing their save button\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if any of the components in the node are showing their submit button\n     * @param nodeId the node id to check\n     * @return whether any of the components in the node show their submit button\n     */\n    doesAnyComponentShowSubmitButton(nodeId) {\n\n        var result = false;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        if (component.showSubmitButton == true) {\n                            // the component is showing their save button\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Turn on the save button in all the components in the step\n     * @param nodeId the node id\n     */\n    turnOnSaveButtonInComponents(nodeId) {\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the component type\n                        var componentType = component.type;\n\n                        if (componentType != null) {\n\n                            // get the service for the component type\n                            var service = this.$injector.get(componentType + 'Service');\n\n                            if (service != null) {\n\n                                // check if this component uses a save button\n                                if (service.componentUsesSaveButton()) {\n\n                                    // turn on the save button in the component\n                                    component.showSaveButton = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn off the submit button in all the components in the step\n     * @param nodeId the node id\n     */\n    turnOffSaveButtonInComponents(nodeId) {\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the component type\n                        var componentType = component.type;\n\n                        if (componentType != null) {\n\n                            // get the service for the component type\n                            var service = this.$injector.get(componentType + 'Service');\n\n                            if (service != null) {\n\n                                // check if this component uses a save button\n                                if (service.componentUsesSaveButton()) {\n\n                                    // turn on the save button in the component\n                                    component.showSaveButton = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add the component to the node\n     * @param node the node\n     * @param component the component\n     */\n    addComponentToNode(node, component) {\n\n        if (node != null && component != null) {\n            node.components.push(component);\n        }\n    }\n\n    /**\n     * Move the component up within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentUp(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the first component because\n                             * the first component can't be moved up\n                             */\n                            if (c != 0) {\n                                // this is not the first component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index back\n                                components.splice(c - 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the component down within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentDown(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the last component because\n                             * the last component can't be moved down\n                             */\n                            if (c != components.length - 1) {\n                                // this is not the last component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index ahead\n                                components.splice(c + 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the component\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    deleteComponent(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to delete\n\n                            // remove the component\n                            components.splice(c, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the max score for the project\n     * @returns the max score for the project or null if none of the components in the project\n     * has max scores.\n     */\n    getMaxScore() {\n\n        var maxScore = null;\n\n        var nodes = this.project.nodes;\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeMaxScore = this.getMaxScoreForNode(node.id);\n\n                    if (nodeMaxScore != null) {\n                        if (maxScore == null) {\n                            maxScore = nodeMaxScore;\n                        } else {\n                            maxScore += nodeMaxScore;\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for the node\n     * @param nodeId the node id\n     * @returns the max score for the node\n     */\n    getMaxScoreForNode(nodeId) {\n        var maxScore = null;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the max score for the component\n                        var componentMaxScore = component.maxScore;\n\n                        // check if the component has a max score\n                        if (componentMaxScore != null) {\n\n                            // make sure the max score is a valid number\n                            if (!isNaN(componentMaxScore)) {\n\n                                if (maxScore == null) {\n                                    maxScore = componentMaxScore;\n                                } else {\n                                    // accumulate the max score\n                                    maxScore += componentMaxScore;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for a component\n     * @param nodeId get the max score from a component in this node\n     * @param componentId get the max score from this component\n     */\n    getMaxScoreForComponent(nodeId, componentId) {\n        var maxScore = null;\n\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n            maxScore = component.maxScore;\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Set the max score for a component\n     * @param nodeId set the max score from a component in this node\n     * @param componentId set the max score from this component\n     * @param maxScore set it to this maxScore\n     */\n    setMaxScoreForComponent(nodeId, componentId, maxScore) {\n        if (nodeId != null && componentId != null && maxScore != null && typeof maxScore === 'number') {\n            let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                component.maxScore = maxScore;\n            }\n        }\n    }\n\n    /**\n     * Determine if a node id is a direct child of a group\n     * @param nodeId the node id\n     * @param groupId the group id\n     */\n    isNodeInGroup(nodeId, groupId) {\n\n        var result = false;\n\n        var group = this.getNodeById(groupId);\n\n        var childIds = group.ids;\n\n        if (childIds != null) {\n            if (childIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the first leaf node by traversing all the start ids\n     * until a leaf node id is found\n     */\n    getFirstLeafNodeId() {\n\n        var firstLeafNodeId = null;\n\n        // get the start group id\n        var startGroupId = this.project.startGroupId;\n\n        // get the start group node\n        var node = this.getNodeById(startGroupId);\n\n        var done = false;\n\n        // loop until we have found a leaf node id or something went wrong\n        while (!done) {\n\n            if (node == null) {\n                done = true;\n            } else if (this.isGroupNode(node.id)) {\n                // set the first leaf node id to the group id for now\n                firstLeafNodeId = node.id;\n\n                // the current node is a group\n                node = this.getNodeById(node.startId);\n            } else if (this.isApplicationNode(node.id)) {\n                // the current node is a leaf\n                firstLeafNodeId = node.id;\n                done = true;\n            } else {\n                done = true;\n            }\n        }\n\n        return firstLeafNodeId;\n    }\n\n    /**\n     * Replace a node. This is used when we want to revert a node back to a\n     * previous version in the authoring tool.\n     * @param nodeId the node id\n     * @param node the node object\n     */\n    replaceNode(nodeId, node) {\n\n        if (nodeId != null && node != null) {\n\n            // set the id to node mapping\n            this.setIdToNode(nodeId, node);\n\n            // set the id to element mapping\n            this.setIdToElement(nodeId, node);\n\n            // update the nodes array\n            var nodes = this.getNodes();\n\n            if (nodes != null) {\n\n                for (var n = 0; n < nodes.length; n++) {\n                    var tempNode = nodes[n];\n\n                    if (tempNode != null) {\n                        var tempNodeId = tempNode.id;\n\n                        if (nodeId === tempNodeId) {\n                            // we have found the node we want to replace\n                            nodes.splice(n, 1, node);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // update the application nodes array\n            var applicationNodes = this.applicationNodes;\n\n            if (applicationNodes != null) {\n                for (var a = 0; a < applicationNodes.length; a++) {\n                    var tempApplicationNode = applicationNodes[a];\n\n                    if (tempApplicationNode != null) {\n                        var tempApplicationNodeId = tempApplicationNode.id;\n\n                        if (nodeId === tempApplicationNodeId) {\n                            // we have found the node we want to replace\n                            applicationNodes.splice(a, 1, node);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if a node is a planning node\n     * @param nodeId the node id\n     * @returns whether the node is a planning node\n     */\n    isPlanning(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                if (node.planning) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a node is a planning node instance\n     * @param nodeId the node id\n     * @returns whether the node is a planning node instance\n     */\n    isPlanningInstance(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node.planningNodeTemplateId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the available planning node ids for a node\n     * @param nodeId the node we want available planning nodes for\n     * @returns an array of available planning node ids\n     */\n    getAvailablePlanningNodeIds(nodeId) {\n        var availablePlanningNodeIds = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodeIds != null) {\n                availablePlanningNodeIds = node.availablePlanningNodeIds;\n            }\n        }\n\n        return availablePlanningNodeIds;\n    }\n\n    /**\n     * Get the available planning nodes for a given group\n     * @param nodeId the node id of the group\n     * @returns an array of planning node templates\n     */\n    getAvailablePlanningNodes(nodeId) {\n        var availablePlanningNodesSoFar = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodes != null) {\n                let availablePlanningNodes = node.availablePlanningNodes;\n\n                // loop through all the nodes and retrieve the actual node\n                for (var a = 0; a < availablePlanningNodes.length; a++) {\n                    var availablePlanningNode = availablePlanningNodes[a];\n\n                    if (availablePlanningNode != null) {\n\n                        // get the node\n                        var availablePlanningNodeActual = this.getNodeById(availablePlanningNode.nodeId);\n\n                        if (availablePlanningNodeActual != null) {\n                            if (availablePlanningNode.max != null) {\n                                availablePlanningNodeActual.max = availablePlanningNode.max;\n                            }\n                            availablePlanningNodesSoFar.push(availablePlanningNodeActual);\n                        }\n                    }\n                }\n            }\n        }\n\n        return availablePlanningNodesSoFar;\n    }\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group id to add the planning node instance to\n     * @param nodeId the node id of the planning node template\n     */\n    createPlanningNodeInstance(groupId, nodeId, nextAvailablePlanningNodeId) {\n\n        var planningNodeInstance = null;\n\n        if (nodeId != null && nextAvailablePlanningNodeId != null) {\n            // get the planning node template\n            var node = this.getNodeById(nodeId);\n\n            // create a planning node instance by copying the planning node template\n            planningNodeInstance = this.copyNode(nodeId);\n\n            // set the template id to point back to the planning template node\n            planningNodeInstance.planningNodeTemplateId = nodeId;\n\n            // set the planning node instance node id\n            planningNodeInstance.id = nextAvailablePlanningNodeId;\n        }\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Add a planning node instance inside a group node\n     * @param nodeIdToInsertInside the group id to insert into\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeInsideInTransitions(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // update the child ids of the group\n        this.insertNodeInsideInGroups(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Add a planning node instance after a node\n     * @param nodeIdToInsertAfter the node to insert after\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeAfterInTransitions(planningNodeInstance, nodeIdToInsertAfter);\n\n        // update the child ids of the group\n        this.insertNodeAfterInGroups(planningNodeInstanceNodeId, nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance inside a group\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertInside the group to move the node into\n     */\n    movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToInsertInside) {\n\n        // move the node inside the group node\n        this.moveNodesInside([nodeIdToMove], nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance after a node\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertAfter the other node to move the node after\n     */\n    movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToInsertAfter) {\n\n        // move the node after the other node\n        this.moveNodesAfter([nodeIdToMove], nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Recalculate the positions of the children in the group.\n     * The positions are the numbers usually seen before the title\n     * e.g. if the step is seen as 1.3: Gather Evidence, then 1.3\n     * is the position\n     * @param groupId recalculate all the children of this group\n     */\n    recalculatePositionsInGroup(groupId) {\n\n        if (groupId != null) {\n            let childIds = this.getChildNodeIdsById(groupId);\n\n            // loop through all the children\n            for (let c = 0; c < childIds.length; c++) {\n                let childId = childIds[c];\n\n                // calculate the position of the child id\n                let pos = this.getPositionById(childId);\n\n                // set the mapping of node id to position\n                this.setIdToPosition(childId, pos);\n            }\n        }\n    }\n\n    /**\n     * Get the message that describes how to disable the constraint\n     * @param nodeId the node the student is trying to go to\n     * @param constraint the constraint that is preventing the student\n     * from going to the node\n     * @returns the message to display to the student that describes how\n     * to disable the constraint\n     */\n    getConstraintMessage(nodeId, constraint) {\n\n        var message = '';\n\n        if (nodeId != null && constraint != null) {\n\n            // get the node title the student is trying to go to\n            var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n\n            var removalConditional = constraint.removalConditional;\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalConditional === 'any') {\n                message += this.$translate('TO_VISIT_STEP_YOU_MUST_PERFORM_ONE_OF_THE_ACTIONS_BELOW', { nodeTitle: nodeTitle }) + ':<br/>';\n            } else {\n                message += this.$translate('TO_VISIT_STEP_YOU_MUST_PERFORM_ALL_OF_THE_ACTIONS_BELOW', { nodeTitle: nodeTitle }) + ':<br/>';\n            }\n\n            if (removalCriteria != null) {\n\n                var criteriaMessages = '';\n\n                // loop through all the criteria\n                for (var x = 0; x < removalCriteria.length; x++) {\n                    var tempRemovalCriteria = removalCriteria[x];\n\n                    if (tempRemovalCriteria != null) {\n\n                        // get the message that describes the criteria that needs to be satisfied\n                        var criteriaMessage = this.getCriteriaMessage(tempRemovalCriteria);\n\n                        if (criteriaMessage != null && criteriaMessage != '') {\n                            // separate criteria messages with a line break\n                            if (criteriaMessages != '') {\n                                criteriaMessages += '<br/>';\n                            }\n                            criteriaMessages += criteriaMessage;\n                        }\n                    }\n                }\n\n                message += criteriaMessages;\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the message that describes how to satisfy the criteria\n     * TODO: check if the criteria is satisfied\n     * @param criteria the criteria object that needs to be satisfied\n     * @returns the message to display to the student that describes how to\n     * satisfy the criteria\n     */\n    getCriteriaMessage(criteria) {\n        var message = '';\n\n        if (criteria != null) {\n            var name = criteria.name;\n            var params = criteria.params;\n\n            if (name === 'isCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'isVisited') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('visitNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'isCorrect') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('correctlyAnswerNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'score') {\n                var nodeId = params.nodeId;\n                var nodeTitle = '';\n                var scoresString = '';\n\n                if (nodeId != null) {\n                    // get the step number and title\n                    nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                }\n\n                var scores = params.scores;\n\n                if (scores != null) {\n                    // get the required score\n                    scoresString = scores.join(', ');\n                }\n\n                // generate the message\n                message += this.$translate('obtainAScoreOfXOnNodeTitle', { score: scoresString, nodeTitle: nodeTitle });\n            } else if (name === 'choiceChosen') {\n\n            } else if (name === 'usedXSubmits') {\n                var nodeId = params.nodeId;\n                var nodeTitle = '';\n\n                // get the number of times the student must submit\n                var requiredSubmitCount = params.requiredSubmitCount;\n\n                if (nodeId != null) {\n                    // get the step number and title\n                    nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                }\n\n                // generate the message\n                if (requiredSubmitCount == 1) {\n                    message += this.$translate('submitXTimeOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n                } else {\n                    message += this.$translate('submitXTimesOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n                }\n            } else if (name === 'branchPathTaken') {\n\n            } else if (name === 'isPlanningActivityCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n                }\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the start id of a group\n     * @param nodeId get the start id of this group\n     * @returns the start id of the group\n     */\n    getGroupStartId(nodeId) {\n\n        var startId = null;\n\n        if (nodeId != null) {\n\n            // get the group\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                // get the start id\n                startId = node.startId;\n            }\n        }\n\n\n        return startId;\n    }\n\n    /**\n     * Get the start id of the node's parent group\n     * @param nodeId we will get the parent of this node and then look\n     * for the start id of the parent\n     * @returns the start id of the parent\n     */\n    getParentGroupStartId(nodeId) {\n        var parentGroupStartId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupStartId = parentGroup.startId;\n            }\n        }\n\n        return parentGroupStartId;\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup -> newToGroup\n     *\n     * After\n     * fromGroup -> newToGroup\n     * oldToGroup becomes dangling and has no transitions to or from it\n     */\n    updateTransitionsForExtractingGroup(fromGroupId, oldToGroupId, newToGroupId) {\n\n        /*\n         * make the transitions\n         * fromGroup -> newToGroup\n         */\n        if (fromGroupId != null && oldToGroupId != null) {\n            var fromGroup = this.getNodeById(fromGroupId);\n            var oldToGroup = this.getNodeById(oldToGroupId);\n            var newToGroup = null;\n            var newToGroupStartId = null;\n\n            if (newToGroupId != null) {\n                newToGroup = this.getNodeById(newToGroupId);\n            }\n\n            if (newToGroup != null) {\n                newToGroupStartId = newToGroup.startId;\n            }\n\n            if (fromGroup != null && oldToGroup != null) {\n                var childIds = fromGroup.ids;\n\n                // update the children of the from group to point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the from group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === oldToGroupId) {\n                                        // the transition is to the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        }\n                                    } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                        // the transition is to a node in the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else if (newToGroupStartId == null || newToGroupStartId == '') {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        } else {\n                                            // make the transition point to the new group start id\n                                            transition.to = newToGroupStartId;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * remove the transitions from the oldToGroup\n         */\n        if (oldToGroupId != null && newToGroupId != null) {\n\n            var oldToGroup = this.getNodeById(oldToGroupId);\n\n            if (oldToGroup != null) {\n                var childIds = oldToGroup.ids;\n\n                // remove the transitions from the old to group that point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the old to group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === newToGroupId) {\n                                        // the transition is to the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    } else if (this.isNodeInGroup(toNodeId, newToGroupId)) {\n                                        // the transition is to a node in the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup\n     * newToGroup is dangling and has no transitions to or from it\n     *\n     * After\n     * fromGroup -> newToGroup -> oldToGroup\n     */\n    updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId) {\n\n        var fromGroup = null;\n        var newToGroup = null;\n\n        if (fromGroupId != null) {\n            fromGroup = this.getNodeById(fromGroupId);\n        }\n\n        if (newToGroupId != null) {\n            newToGroup = this.getNodeById(newToGroupId);\n        }\n\n        /*\n         * make the transitions that point to the old group now point\n         * to the new group\n         * fromGroup -> newToGroup\n         */\n        if (fromGroup != null && newToGroup != null) {\n            var childIds = fromGroup.ids;\n            var newToGroupStartId = newToGroup.startId;\n\n            if (childIds != null) {\n\n                // loop through all the nodes in the from group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions from the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n                        /*\n                         * the child does not have any transitions so we will make it\n                         * point to the new group\n                         */\n                        if (newToGroupStartId == null || newToGroupStartId == '') {\n                            this.addToTransition(child, newToGroupId);\n                        } else {\n                            this.addToTransition(child, newToGroupStartId)\n                        }\n                    } else if (transitions != null) {\n\n                        // loop through all the transitions from the child\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (oldToGroupIds != null) {\n\n                                    /*\n                                     * loop through all the old to group ids to find transitions\n                                     * to the old to group\n                                     */\n                                    for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                        var oldToGroupId = oldToGroupIds[ot];\n\n                                        if (toNodeId === oldToGroupId) {\n                                            /*\n                                             * the transition is to the group so we will update the transition\n                                             * to the new group\n                                             */\n                                            transition.to = newToGroupId;\n                                        } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                            /*\n                                             * the transition is to a node in the old group so we will update\n                                             * the transition to point to the new group\n                                             */\n                                            if (newToGroupStartId == null || newToGroupStartId == '') {\n                                                transition.to = newToGroupId;\n                                            } else {\n                                                transition.to = newToGroupStartId;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * make the steps that do not have a transition now point to the old\n         * group\n         * newToGroup -> oldToGroup\n         */\n        if (newToGroup != null) {\n            var childIds = newToGroup.ids;\n\n            if (childIds != null) {\n\n                // loop through all the children in the new group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions for the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n\n                        if (oldToGroupIds != null) {\n\n                            // loop through all the old groups\n                            for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                var oldToGroupId = oldToGroupIds[ot];\n                                var oldToGroup = this.getNodeById(oldToGroupId);\n\n                                if (oldToGroup != null) {\n\n                                    var oldToGroupStartId = oldToGroup.startId;\n\n                                    var transition = {};\n\n                                    var toNodeId = '';\n\n                                    if (oldToGroupStartId == null) {\n                                        // there is no start node id so we will just point to the group\n                                        toNodeId = oldToGroup;\n                                    } else {\n                                        // there is a start node id so we will point to it\n                                        toNodeId = oldToGroupStartId;\n                                    }\n\n                                    // create the transition from the child to the old group\n                                    this.addToTransition(child, toNodeId);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the child transitions because we are moving a group. We will\n     * update the transitions into and out of the group in the location\n     * we are extracting the group from and also in the location we are\n     * inserting the group into.\n     * @param node the group we are moving\n     * @param nodeId we will put the group after this node id\n     */\n    updateChildrenTransitionsForMovingGroup(node, nodeId) {\n        var transitionsBefore = null;\n\n        // get the group nodes that point to the group we are moving\n        var previousGroupNodes = this.getGroupNodesByToNodeId(node.id);\n\n        // get all the transitions from the group we are moving\n        var transitionsAfter = this.getTransitionsByFromNodeId(node.id);\n\n        var extracted = false;\n\n        /*\n         * extract the group we are moving by updating the transitions of the\n         * from group and the new to group. also remove the transitions from the\n         * group we are moving.\n         */\n\n        // loop through all the groups that point to the group we are moving\n        for (var p = 0; p < previousGroupNodes.length; p++) {\n            var previousGroupNode = previousGroupNodes[p];\n\n            if (transitionsAfter == null || transitionsAfter.length == 0) {\n                // the group we are moving does not have any transitions\n\n                /*\n                 * remove the transitions to the group we are moving and make\n                 * new transitions from the from group to the new to group\n                 */\n                this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, null);\n                extracted = true;\n            } else {\n                // the group we are moving has transitions\n\n                // make the previous group point to the new to group\n                for (var t = 0; t < transitionsAfter.length; t++) {\n                    var transitionAfter = transitionsAfter[t];\n\n                    if (transitionAfter != null) {\n                        var toNodeId = transitionAfter.to;\n\n                        /*\n                         * remove the transitions to the group we are moving and make\n                         * new transitions from the from group to the new to group\n                         */\n                        this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, toNodeId);\n                        extracted = true;\n                    }\n                }\n            }\n        }\n\n        if (!extracted) {\n            /*\n             * we have not removed the transitions yet because the group\n             * we are moving does not have any groups before it\n             */\n\n            // remove the transitions from the group we are moving\n            for (var t = 0; t < transitionsAfter.length; t++) {\n                var transitionAfter = transitionsAfter[t];\n\n                if (transitionAfter != null) {\n                    var toNodeId = transitionAfter.to;\n\n                    // remove the transitions to the group we are moving\n                    this.updateTransitionsForExtractingGroup(null, node.id, toNodeId);\n                    extracted = true;\n                }\n            }\n        }\n\n        var inserted = false;\n\n        /*\n         * create the transitions from the from group to the group we are moving\n         * and the transitions from the group we are moving to the old to group\n         */\n        if (nodeId != null) {\n            // get the transitions from the previous group to the next group\n            var transitionsAfter = this.getTransitionsByFromNodeId(nodeId);\n\n            for (var t = 0; t < transitionsAfter.length; t++) {\n                var transitionAfter = transitionsAfter[t];\n\n                if (transitionAfter != null) {\n                    var toNodeId = transitionAfter.to;\n\n                    /*\n                     * create the transitions that traverse from the from group\n                     * to the group we are moving. also create the transitions\n                     * that traverse from the group we are moving to the old\n                     * to group.\n                     */\n                    this.updateTransitionsForInsertingGroup(nodeId, [toNodeId], node.id);\n                    inserted = true;\n                }\n            }\n        }\n\n        if (!inserted) {\n            /*\n             * we have not inserted the transitions yet because there were no\n             * previous group transitions\n             */\n\n            if (nodeId == null) {\n                /*\n                 * the previous node id is null which means there was no previous\n                 * group. this means the group we are inserting will become the\n                 * first group. this happens when the group we are moving\n                 * is moved inside the root (group0).\n                 */\n\n                var startGroupId = this.getStartGroupId();\n\n                if (startGroupId != null) {\n\n                    // get the start group for the whole project (group0)\n                    var startGroup = this.getNodeById(startGroupId);\n\n                    if (startGroup != null) {\n\n                        // get the first activity\n                        var firstGroupId = startGroup.startId;\n\n                        /*\n                         * create the transitions that traverse from the group\n                         * we are moving to the previous first activity.\n                         */\n                        this.updateTransitionsForInsertingGroup(nodeId, [firstGroupId], node.id);\n                    }\n                }\n\n            } else {\n                /*\n                 * we have not inserted the group yet because the from group doesn't\n                 * have a group after it\n                 */\n\n                /*\n                 * create the transitions that traverse from the from group\n                 * to the group we are moving.\n                 */\n                this.updateTransitionsForInsertingGroup(nodeId, null, node.id);\n            }\n        }\n    }\n\n    /**\n     * Check if a component is a connected component\n     * @param nodeId the node id of the component\n     * @param componentId the component that is listening for connected changes\n     * @param connectedComponentId the component that is broadcasting connected changes\n     * @returns whether the componentId is connected to the connectedComponentId\n     */\n    isConnectedComponent(nodeId, componentId, connectedComponentId) {\n\n        var result = false;\n\n        // get the component\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n\n            var connectedComponents = component.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n                        if (connectedComponentId === connectedComponent.id) {\n                            // we have found the connected component id we are looking for\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a connected component params\n     * @param componentId the connected component id\n     * @returns the params for the connected component\n     */\n    getConnectedComponentParams(componentContent, componentId) {\n\n        var connectedComponentParams = null;\n\n        if (componentContent != null && componentId != null) {\n\n            // get the connected components\n            var connectedComponents = componentContent.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n                        var tempComponentId = connectedComponent.id;\n\n                        if (componentId === tempComponentId) {\n                            // we have found the connected component we are looking for\n                            connectedComponentParams = connectedComponent;\n                        }\n                    }\n                }\n            }\n        }\n\n        return connectedComponentParams;\n    }\n\n    /**\n     * Get the inactive groups\n     * @returns the inactive groups\n     */\n    getInactiveGroups() {\n        var inactiveGroups = [];\n\n        if (this.project != null) {\n\n            if (this.project.inactiveGroups == null) {\n                this.project.inactiveGroups = [];\n            }\n\n            inactiveGroups = this.project.inactiveGroups;\n        }\n\n        return inactiveGroups;\n    }\n\n    /**\n     * Get the inactive nodes\n     * @returns the inactive nodes\n     */\n    getInactiveNodes() {\n        var inactiveNodes = [];\n\n        if (this.project != null) {\n\n            if (this.project.inactiveNodes == null) {\n                this.project.inactiveNodes = [];\n            }\n\n            inactiveNodes = this.project.inactiveNodes;\n        }\n\n        return inactiveNodes;\n    }\n\n    /**\n     * Remove the node from the active nodes\n     * @param nodeId the node to remove\n     * @returns the node that we have removed\n     */\n    removeNodeFromActiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n\n            // get the active nodes\n            var activeNodes = this.project.nodes;\n\n            if (activeNodes != null) {\n\n                // loop through all the active nodes\n                for (var a = 0; a < activeNodes.length; a++) {\n                    var activeNode = activeNodes[a];\n\n                    if (activeNode != null) {\n                        if (nodeId === activeNode.id) {\n                            // we have found the node we want to remove\n                            node = activeNode;\n\n                            // remove the node from the array\n                            activeNodes.splice(a, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove\n     * @returns the node that was removed\n     */\n    removeNodeFromInactiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n\n            // get all the inactive nodes\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // loop through all the inactive nodes\n                for (var i = 0; i < inactiveNodes.length; i++) {\n                    var inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (nodeId === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            node = inactiveNode;\n\n                            // remove the node from the array\n                            inactiveNodes.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Load the inactive nodes\n     * @param nodes the inactive nodes\n     */\n    loadInactiveNodes(nodes) {\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    // set the node into the mapping data structures\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n\n                    this.inactiveNodes.push(node);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the node is active\n     * @param nodeId the node to check\n     * @returns whether the node is in the active array\n     */\n    isActive(nodeId) {\n\n        var result = true;\n\n        if (nodeId != null) {\n\n            if (nodeId === 'inactiveNodes') {\n                // this occurs when the author puts a step into the inactive nodes\n                result = false;\n            } else if (nodeId === 'inactiveGroups') {\n                // this occurs when the author puts a group into the inactive groups\n                result = false;\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n                // TODO: implement this\n            } else {\n                // the node is a step node\n\n                // get the inactive nodes\n                var inactiveNodes = this.project.inactiveNodes;\n\n                if (inactiveNodes != null) {\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeId === inactiveNode.id) {\n                                // we have found the node in the inactive nodes\n                                result = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Move the node to the active nodes array\n     */\n    moveToActive(node) {\n        if (node != null) {\n\n            // make sure the node is inactive\n            if (!this.isActive(node.id)) {\n                // the node is inactive so we will move it to the active array\n\n                // remove the node from inactive nodes array\n                this.removeNodeFromInactiveNodes(node.id);\n\n                // add the node to the active array\n                this.addNode(node);\n            }\n        }\n    }\n\n    /**\n     * Move the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveToInactive(node, nodeIdToInsertAfter) {\n        if (node != null) {\n\n            // make sure the node is active\n            if (this.isActive(node.id)) {\n                // the node is active so we will move it to the inactive array\n\n                // remove the node from the active array\n                this.removeNodeFromActiveNodes(node.id);\n\n                // add the node to the inactive array\n                this.addInactiveNode(node, nodeIdToInsertAfter);\n            }\n        }\n    }\n\n    /**\n     * Add the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    addInactiveNode(node, nodeIdToInsertAfter) {\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // clear the transitions from this node\n                if (node.transitionLogic != null) {\n                    node.transitionLogic.transitions = [];\n                }\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveNodes') {\n                    // put the node at the beginning of the inactive steps\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move an inactive node within the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveInactiveNode(node, nodeIdToInsertAfter) {\n\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // remove the node from inactive nodes\n\n                // loop through all the inactive nodes\n                for (var i = 0; i < inactiveNodes.length; i++) {\n                    var inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (node.id === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            inactiveNodes.splice(i, 1);\n                        }\n                    }\n                }\n\n                // add the node back into the inactive nodes\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveNodes') {\n                    // put the node at the beginning of the inactive nodes\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go into the group\n     * @param nodeId the group id\n     */\n    removeTransitionsIntoGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the children\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            this.removeTransitionsThatPointToNodeIdFromOutsideGroup(childId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the transitions that point to the node that does not have\n     * the same parent\n     * @param nodeId remove transitions to this node\n     */\n    removeTransitionsThatPointToNodeIdFromOutsideGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            // get the parent of the node\n            var parentGroupId = this.getParentGroupId(nodeId);\n\n            // get all the nodes that point to the node\n            var nodesThatPointToTargetNode = this.getNodesByToNodeId(nodeId);\n\n            if (nodesThatPointToTargetNode != null) {\n\n                // loop through all the nodes that point to the node\n                for (var n = 0; n < nodesThatPointToTargetNode.length; n++) {\n                    var nodeThatPointsToTargetNode = nodesThatPointToTargetNode[n];\n\n                    if (nodeThatPointsToTargetNode != null) {\n\n                        // get the parent of the node that points to the node target node\n                        var nodeThatPointsToTargetNodeParentGroupId = this.getParentGroupId(nodeThatPointsToTargetNode.id);\n\n                        if (parentGroupId != nodeThatPointsToTargetNodeParentGroupId) {\n                            /*\n                             * the parent groups are different so we will remove\n                             * the transition\n                             */\n                            this.removeTransition(nodeThatPointsToTargetNode, nodeId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a transition\n     * @param node remove a transition in this node\n     * @param toNodeId remove the transition that goes to this node id\n     */\n    removeTransition(node, toNodeId) {\n\n        if (node != null && toNodeId != null) {\n\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // loop through all the transitions\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (transition != null) {\n                            if (toNodeId === transition.to) {\n                                // we have found a transition that goes to the toNodeId\n\n                                // remove the transition\n                                transitions.splice(t, 1);\n                                t--;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go out of the group\n     * @param nodeId the group id\n     */\n    removeTransitionsOutOfGroup(nodeId) {\n        if (nodeId != null) {\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n\n                            // get the transitions of the child\n                            var transitions = this.getTransitionsByFromNodeId(childId);\n\n                            if (transitions != null) {\n\n                                // loop through all the transitions\n                                for (var t = 0; t < transitions.length; t++) {\n                                    var transition = transitions[t];\n\n                                    if (transition != null) {\n\n                                        // get the to node id of the transition\n                                        var toNodeId = transition.to;\n\n                                        if (toNodeId != null) {\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (nodeId != toNodeIdParentGroupId) {\n                                                /*\n                                                 * the parent group is different which means it is a\n                                                 * transition that goes out of the group\n                                                 */\n\n                                                // remove the transition\n                                                transitions.splice(t, 1);\n                                                t--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n     * Update the step transitions that point into the group we are moving\n     * For example\n     * group1 has children node1 and node2 (node2 transitions to node3)\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * group3 has children node5 and node6\n     * if we move group2 after group3 we will need to change the\n     * transition from node2 to node3 and make node2 transition to node5\n     * the result will be\n     * group1 has children node1 and node2 (node2 transitions to node5)\n     * group3 has children node5 and node6\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * note: the (node4 transition to node5) will be removed later\n     * when is called removeTransitionsOutOfGroup\n     * note: when group2 is added in a later function call, we will add\n     * the node6 to node3 transition\n     * @param groupThatTransitionsToGroupWeAreMoving the group object\n     * that transitions to the group we are moving. we may need to update\n     * the transitions of this group's children.\n     * @param groupIdWeAreMoving the group id of the group we are moving\n     */\n    updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving) {\n\n        if (groupThatTransitionsToGroupWeAreMoving != null && groupIdWeAreMoving != null) {\n            var group = this.getNodeById(groupIdWeAreMoving);\n\n            if (group != null) {\n                // get all the nodes that have a transition to the node we are removing\n                var nodesByToNodeId = this.getNodesByToNodeId(groupIdWeAreMoving);\n\n                // get the transitions of the node we are removing\n                var nodeToRemoveTransitionLogic = group.transitionLogic;\n                var nodeToRemoveTransitions = [];\n\n                if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n                    nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n                }\n\n                if (nodeToRemoveTransitions.length == 0) {\n                    /*\n                     * The group we are moving is the last group in the project\n                     * and does not have any transitions. We will loop through\n                     * all the nodes that transition into this group and remove\n                     * those transitions.\n                     */\n\n                    // get child ids of the group that comes before the group we are moving\n                    var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n                    if (childIds != null) {\n\n                        // loop through all the children\n                        for (var c = 0; c < childIds.length; c++) {\n                            var childId = childIds[c];\n\n                            var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                            if (transitionsFromChild != null) {\n\n                                // loop through all the transitions from the child\n                                for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                                    var transitionFromChild = transitionsFromChild[tfc];\n\n                                    if (transitionFromChild != null) {\n                                        var toNodeId = transitionFromChild.to;\n\n                                        // get the parent group id of the toNodeId\n                                        var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                        if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                                            // the transition is to a child in the group we are moving\n\n                                            // remove the transition\n                                            transitionsFromChild.splice(tfc, 1);\n\n                                            /*\n                                             * move the counter back one because we have just removed an\n                                             * element from the array\n                                             */\n                                            tfc--;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (nodeToRemoveTransitions.length > 0) {\n\n                    // get the first group that comes after the group we are removing\n                    var firstNodeToRemoveTransition = nodeToRemoveTransitions[0];\n                    var firstNodeToRemoveTransitionToNodeId = firstNodeToRemoveTransition.to;\n\n                    if (this.isGroupNode(firstNodeToRemoveTransitionToNodeId)) {\n\n                        // get the group that comes after the group we are moving\n                        var groupNode = this.getNodeById(firstNodeToRemoveTransitionToNodeId);\n\n                        // get child ids of the group that comes before the group we are moving\n                        var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n                        if (childIds != null) {\n\n                            // loop through all the children\n                            for (var c = 0; c < childIds.length; c++) {\n                                var childId = childIds[c];\n\n                                var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                                if (transitionsFromChild != null) {\n\n                                    // loop through all the transitions from the child\n                                    for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                                        var transitionFromChild = transitionsFromChild[tfc];\n\n                                        if (transitionFromChild != null) {\n                                            var toNodeId = transitionFromChild.to;\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                                                // the transition is to a child in the group we are moving\n\n                                                if (groupNode.startId == null) {\n                                                    // change the transition to point to the after group\n                                                    transitionFromChild.to = firstNodeToRemoveTransitionToNodeId;\n                                                } else {\n                                                    // change the transition to point to the start id of the after group\n                                                    transitionFromChild.to = groupNode.startId;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the node ids and component ids in a node\n     * @param nodeId get the node ids and component ids in this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components in the node\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n\n                            var componentId = component.id;\n\n                            // create an object to hold the node id and component id\n                            var nodeIdAndComponentId = {};\n                            nodeIdAndComponentId.nodeId = nodeId;\n                            nodeIdAndComponentId.componentId = componentId;\n\n                            // add the object to the array\n                            nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n\n    /**\n     * Get the show previous work node ids and component ids in a node\n     * @param nodeId get the show previous work node ids and component ids in\n     * this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getShowPreviousWorkNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                            var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                            if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n\n                                // create an object to hold the node id and component id\n                                var nodeIdAndComponentId = {};\n                                nodeIdAndComponentId.nodeId = showPreviousWorkNodeId;\n                                nodeIdAndComponentId.componentId = showPreviousWorkComponentId;\n\n                                // add the object to the array\n                                nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n\n    /**\n     * Check if we need to display the annotation to the student\n     * @param annotation the annotation\n     * @returns whether we need to display the annotation to the student\n     */\n    displayAnnotation(annotation) {\n\n        var result = true;\n\n        if (annotation != null) {\n            var nodeId = annotation.nodeId;\n            var componentId = annotation.componentId;\n\n            // get the component content\n            var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                var componentType = component.type;\n\n                // get the component service\n                var componentService = this.$injector.get(componentType + 'Service');\n\n                if (componentService != null && componentService.displayAnnotation != null) {\n                    // check if we need to display the annotation to the student\n                    result = componentService.displayAnnotation(component, annotation);\n                    /*if (annotation.data != null && annotation.data.isGlobal && annotation.data.isPopup) {\n                        result = false;  // don't display annotation inline; it will be displayed in a popup\n                    }*/\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the global annotation properties for the specified component and score, if exists.\n     * @param component the component content\n     * @param previousScore the previousScore we want the annotation properties for, can be null, which means we just want to look at\n     * the currentScore\n     * @param currentScore the currentScore we want the annotation properties for\n     * @returns the annotation properties for the given score\n     */\n    getGlobalAnnotationGroupByScore(component, previousScore, currentScore) {\n\n        let annotationGroup = null;\n\n        if (component.globalAnnotationSettings != null && component.globalAnnotationSettings.globalAnnotationGroups != null) {\n            let globalAnnotationGroups = component.globalAnnotationSettings.globalAnnotationGroups;\n\n            for (let g = 0; g < globalAnnotationGroups.length; g++) {\n                let globalAnnotationGroup = globalAnnotationGroups[g];\n\n                if (globalAnnotationGroup.enableCriteria != null && globalAnnotationGroup.enableCriteria.scoreSequence != null) {\n                    let scoreSequence = globalAnnotationGroup.enableCriteria.scoreSequence;\n\n                    if (scoreSequence != null) {\n                        /*\n                         * get the expected previous score and current score\n                         * that will satisfy the rule\n                         */\n                        let previousScoreMatch = scoreSequence[0];\n                        let currentScoreMatch = scoreSequence[1];\n\n                        if (previousScore == null) {\n                            // just matching on the current score\n                            if (previousScoreMatch == \"\" &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                // found a match\n                                annotationGroup = globalAnnotationGroup;\n                                break;\n                            }\n                        } else {\n                            if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                /*\n                                 * the previous score and current score match the\n                                 * expected scores so we have found the rule we want\n                                 */\n                                annotationGroup = globalAnnotationGroup;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return annotationGroup;\n    }\n\n    /**\n     * Get the notification for the given score, if exists.\n     * @param component the component content\n     * @param previousScore the previousScore we want notification for, can be null, which means we just want to look at\n     * the currentScore\n     * @param currentScore the currentScore we want notification for\n     * @returns the notification for the given score\n     */\n    getNotificationByScore(component, previousScore, currentScore) {\n\n        let notificationResult = null;\n\n        if (component.notificationSettings != null && component.notificationSettings.notifications != null) {\n            let notifications = component.notificationSettings.notifications;\n            for (let n = 0; n < notifications.length; n++) {\n                let notification = notifications[n];\n                if (notification.enableCriteria != null && notification.enableCriteria.scoreSequence != null) {\n                    let scoreSequence = notification.enableCriteria.scoreSequence;\n\n                    if (scoreSequence != null) {\n\n                        /*\n                         * get the expected previous score and current score\n                         * that will satisfy the rule\n                         */\n                        let previousScoreMatch = scoreSequence[0];\n                        let currentScoreMatch = scoreSequence[1];\n\n                        if (previousScore == null) {\n                            // just matching on the current score\n                            if (previousScoreMatch == \"\" &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                // found a match\n                                notificationResult = notification;\n                                break;\n                            }\n                        } else {\n                            if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                /*\n                                 * the previous score and current score match the\n                                 * expected scores so we have found the rule we want\n                                 */\n                                notificationResult = notification;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return notificationResult;\n    }\n\n    /**\n     * Returns a project template for new projects\n     */\n    getNewProjectTemplate() {\n        return {\n            \"nodes\": [\n                {\n                    \"id\": \"group0\",\n                    \"type\": \"group\",\n                    \"title\": \"Master\",\n                    \"startId\": \"group1\",\n                    \"ids\": [\n                        \"group1\"\n                    ]\n                },\n                {\n                    \"id\": \"group1\",\n                    \"type\": \"group\",\n                    \"title\": this.$translate('FIRST_ACTIVITY'),\n                    \"startId\": \"\",\n                    \"ids\": [\n                    ],\n                    \"icons\": {\n                        \"default\": {\n                            \"color\": \"#2196F3\",\n                            \"type\": \"font\",\n                            \"fontSet\": \"material-icons\",\n                            \"fontName\": \"info\"\n                        }\n                    }\n                }\n            ],\n            \"constraints\": [],\n            \"startGroupId\": \"group0\",\n            \"startNodeId\": \"group0\",\n            \"navigationMode\": \"guided\",\n            \"layout\": {\n                \"template\": \"starmap|leftNav|rightNav\"\n            },\n            \"metadata\": {\n                \"title\": this.$translate('MY_NEW_PROJECT')\n            },\n            \"notebook\": {\n                \"enabled\": false,\n                \"label\": this.$translate('NOTEBOOK'),\n                \"enableAddNew\": true,\n                \"itemTypes\": {\n                    \"note\": {\n                        \"type\": \"note\",\n                        \"enabled\": true,\n                        \"enableLink\": true,\n                        \"enableAddNote\": true,\n                        \"enableClipping\": true,\n                        \"enableStudentUploads\": true,\n                        \"requireTextOnEveryNote\": false,\n                        \"label\": {\n                            \"singular\": this.$translate('NOTE_LOWERCASE'),\n                            \"plural\": this.$translate('NOTES_LOWERCASE'),\n                            \"link\": this.$translate('NOTES'),\n                            \"icon\": \"note\",\n                            \"color\": \"#1565C0\"\n                        }\n                    },\n                    \"question\": {\n                        \"type\": \"question\",\n                        \"enabled\": false,\n                        \"enableLink\": true,\n                        \"enableClipping\": true,\n                        \"enableStudentUploads\": true,\n                        \"label\": {\n                            \"singular\": this.$translate('QUESTION_LOWER_CASE'),\n                            \"plural\": this.$translate('QUESTIONS_LOWER_CASE'),\n                            \"link\": this.$translate('QUESTIONS'),\n                            \"icon\": \"live_help\",\n                            \"color\": \"#F57C00\"\n                        }\n                    },\n                    \"report\": {\n                        \"enabled\": false,\n                        \"label\": {\n                            \"singular\": this.$translate('REPORT_LOWERCASE'),\n                            \"plural\": this.$translate('REPORTS_LOWERCASE'),\n                            \"link\": this.$translate('REPORT'),\n                            \"icon\": \"assignment\",\n                            \"color\": \"#AD1457\"\n                        },\n                        \"notes\": [\n                            {\n                                \"reportId\": \"finalReport\",\n                                \"title\": this.$translate('FINAL_REPORT'),\n                                \"description\": this.$translate('REPORT_DESCRIPTION'),\n                                \"prompt\": this.$translate('REPORT_PROMPT'),\n                                \"content\": this.$translate('REPORT_CONTENT')\n                            }\n                        ]\n                    }\n                }\n            },\n            \"inactiveGroups\": [],\n            \"inactiveNodes\": []\n        };\n    }\n\n    /**\n     * Check if a node generates work by looking at all of its components\n     * @param nodeId the node id\n     * @return whether the node generates work\n     */\n    nodeHasWork(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node content object\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components in the node\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n\n                            // check if the component generates work\n                            var componentHasWork = this.componentHasWork(component);\n\n                            if (componentHasWork) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a component generates work\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return whether the component generates work\n     */\n    componentHasWorkByNodeIdAndComponentId(nodeId, componentId) {\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node content object\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null && componentId == component.id) {\n                            // we have found the component we are looking for\n\n                            // check if the component generates work\n                            var componentHasWork = this.componentHasWork(component);\n\n                            if (componentHasWork) {\n                                // the component generates work\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a component generates work\n     * @param component check if this component generates work\n     * @return whether the component generates work\n     */\n    componentHasWork(component) {\n        var result = false;\n\n        if (component != null) {\n            var componentType = component.type;\n\n            // get the component service\n            var componentService = this.getComponentService(componentType);\n\n            if (componentService != null) {\n                // check if the component generates work\n                result = componentService.componentHasWork(component);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a component service\n     * @param componentType the component type\n     * @return the component service\n     */\n    getComponentService(componentType) {\n\n        var componentService = null;\n\n        if (componentType != null) {\n\n            // get the component service name e.g. 'OpenResponseService'\n            var componentServiceName = componentType + 'Service';\n\n            /*\n             * check if we have previously retrieved the component service.\n             * if have previously retrieved the component service it will\n             * be in the componentServices map\n             */\n            componentService = this.componentServices[componentServiceName];\n\n            if (componentService == null) {\n                /*\n                 * we have not previously retrieved the component service so\n                 * we will get it now\n                 */\n                componentService = this.$injector.get(componentServiceName);\n\n                /*\n                 * save the component service to the map so we can easily\n                 * retrieve it later\n                 */\n                this.componentServices[componentServiceName] = componentService;\n            }\n        }\n\n        return componentService;\n    }\n\n    /**\n     * Check if a node is inactive. At the moment only step nodes can be\n     * inactive.\n     * @param nodeId the node id of the step\n     */\n    isInactive(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null && this.project.inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < this.project.inactiveNodes.length; i++) {\n\n                // get an inactive node\n                var inactiveNode = this.project.inactiveNodes[i];\n\n                if (inactiveNode != null) {\n\n                    if (nodeId === inactiveNode.id) {\n                        /*\n                         * we have found the node id we are looking for which\n                         * means the node is inactive\n                         */\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get an unused component id\n     * @return a component id that isn't already being used in the project\n     */\n    getUnusedComponentId() {\n        // we want to make an id with 10 characters\n        var idLength = 10;\n\n        // generate a new id\n        var newComponentId = this.UtilService.generateKey(idLength);\n\n        // check if the component id is already used in the project\n        if (this.isComponentIdUsed(newComponentId)) {\n            /*\n             * the component id is already used in the project so we need to\n             * try generating another one\n             */\n            var alreadyUsed = true;\n\n            /*\n             * keep trying to generate a new component id until we have found\n             * one that isn't already being used\n             */\n            while(!alreadyUsed) {\n                // generate a new id\n                newComponentId = this.UtilService.generateKey(idLength);\n\n                // check if the id is already being used in the project\n                alreadyUsed = this.isComponentIdUsed(newComponentId);\n            }\n        }\n\n        return newComponentId;\n    }\n\n    /**\n     * Check if the component id is already being used in the project\n     * @param componentId check if this component id is already being used in\n     * the project\n     * @return whether the component id is already being used in the project\n     */\n    isComponentIdUsed(componentId) {\n        var isUsed = false;\n\n        // loop through all the active nodes\n        for (var n = 0; n < this.project.nodes.length; n++) {\n\n            // get an active node\n            var node = this.project.nodes[n];\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            if (componentId === component.id) {\n                                // the component id is already being used\n                                isUsed = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // loop through all the inactive nodes\n        for (var n = 0; n < this.project.inactiveNodes.length; n++) {\n\n            // get an inactive node\n            var node = this.project.inactiveNodes[n];\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            if (componentId === component.id) {\n                                // the component id is already being used\n                                isUsed = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return isUsed;\n    }\n\n    /**\n     * Check if a node id is already being used in the project\n     * @param nodeId check if this node id is already being used in the project\n     * @return whether the node id is already being used in the project\n     */\n    isNodeIdUsed(nodeId) {\n        var isUsed = false;\n\n        // loop through all the active nodes\n        for (var n = 0; n < this.project.nodes.length; n++) {\n\n            // get an active node\n            var node = this.project.nodes[n];\n\n            if (node != null) {\n\n                if (nodeId === node.id) {\n                    return true;\n                }\n            }\n        }\n\n        // loop through all the inactive nodes\n        for (var n = 0; n < this.project.inactiveNodes.length; n++) {\n\n            // get an inactive node\n            var node = this.project.inactiveNodes[n];\n\n            if (node != null) {\n\n                if (nodeId === node.id) {\n                    return true;\n                }\n            }\n        }\n\n        return isUsed;\n    }\n\n    /**\n     * Copy the nodes into the project\n     * @param selectedNodes the nodes to import\n     * @param fromProjectId copy the nodes from this project\n     * @param toProjectId copy the nodes into this project\n     */\n    copyNodes(selectedNodes, fromProjectId, toProjectId) {\n\n        // get the import steps URL\n        var importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = importStepsURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        // set the POST params\n        var params = {};\n        params.steps = angular.toJson(selectedNodes);\n        params.fromProjectId = fromProjectId;\n        params.toProjectId = toProjectId;\n        httpParams.data = $.param(params);\n\n        /*\n         * Make the request to import the steps. This will copy the asset files\n         * and change file names if necessary. If an asset file with the same\n         * name exists in both projects we will check if their content is the\n         * same. If the content is the same we don't need to copy the file. If\n         * the content is different, we need to make a copy of the file with a\n         * new name and change all the references in the steps to use the new\n         * name.\n         */\n        return this.$http(httpParams).then((result) => {\n\n            // get the selected nodes from the result that may have been modified\n            selectedNodes = result.data;\n\n            // get the inactive nodes from the project\n            var inactiveNodes = this.getInactiveNodes();\n\n            // we will insert the steps into the inactive steps\n            var nodeIdToInsertAfter = 'inactiveSteps';\n\n            // loop through the nodes we will import\n            for (var n = 0; n < selectedNodes.length; n++) {\n\n                // get a node\n                var selectedNode = selectedNodes[n];\n\n                if (selectedNode != null) {\n\n                    /*\n                     * Insert the node after the last inactive node. If there\n                     * are no inactive nodes it will just be placed in the\n                     * inactive nodes section. In the latter case we do this by\n                     * setting nodeIdToInsertAfter to 'inactiveSteps'.\n                     */\n                    if (inactiveNodes != null && inactiveNodes.length > 0) {\n                        nodeIdToInsertAfter = inactiveNodes[inactiveNodes.length - 1];\n                    }\n\n                    // make a copy of the node so that we don't modify the source\n                    var tempNode = this.UtilService.makeCopyOfJSONObject(selectedNode);\n\n                    // check if the node id is already being used in the current project\n                    if (this.isNodeIdUsed(tempNode.id)) {\n                        // the node id is already being used in the current project\n\n                        // get the next available node id\n                        var nextAvailableNodeId = this.getNextAvailableNodeId();\n\n                        // change the node id of the node we are importing\n                        tempNode.id = nextAvailableNodeId;\n                    }\n\n                    // get the components in the node\n                    var tempComponents = tempNode.components;\n\n                    if (tempComponents != null) {\n\n                        // loop through all the components in the node we are importing\n                        for (var c = 0; c < tempComponents.length; c++) {\n\n                            // get a component\n                            var tempComponent = tempComponents[c];\n\n                            if (tempComponent != null) {\n\n                                // check if the component id is already being used\n                                if (this.isComponentIdUsed(tempComponent.id)) {\n                                    // we are already using the component id so we will need to change it\n\n                                    // find a component id that isn't currently being used\n                                    var newComponentId = this.getUnusedComponentId();\n\n                                    // set the new component id into the component\n                                    tempComponent.id = newComponentId;\n                                }\n                            }\n                        }\n                    }\n\n                    // clear the constraints\n                    tempNode.constraints = [];\n\n                    // add the imported node to the end of the inactive nodes\n                    this.addInactiveNode(tempNode, nodeIdToInsertAfter);\n                }\n            }\n        });\n    }\n\n    /**\n     * Get the next available constraint id for a node\n     * @param nodeId get the next available constraint id for this node\n     * e.g. node8Constraint2\n     * @return the next available constraint id for the node\n     */\n    getNextAvailableConstraintIdForNodeId(nodeId) {\n\n        var nextAvailableConstraintId = null;\n\n        if (nodeId != null) {\n\n            // an array to hold the constraint ids that are already being used\n            var usedConstraintIds = [];\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // loop through all the constraints\n                    for (var c = 0; c < constraints.length; c++) {\n                        var constraint = constraints[c];\n\n                        if (constraint != null) {\n                            var constraintId = constraint.id;\n\n                            // add the constraint id to the array of used constraint ids\n                            usedConstraintIds.push(constraintId);\n                        }\n                    }\n                }\n            }\n\n            var foundNextAvailableConstraintId = false;\n            var counter = 1;\n\n            // loop until we have found a constraint id that hasn't been used\n            while(!foundNextAvailableConstraintId) {\n\n                // generate a constraint id\n                var potentialConstraintId = nodeId + 'Constraint' + counter;\n\n                // check if the constraint id has been used\n                if (usedConstraintIds.indexOf(potentialConstraintId) == -1) {\n                    // we have found a constraint id that has not been used\n                    nextAvailableConstraintId = potentialConstraintId;\n\n                    // we are done looping\n                    foundNextAvailableConstraintId = true;\n                } else {\n                    // we have found a constraint id that has been used\n                    counter++;\n                }\n            }\n        }\n\n        return nextAvailableConstraintId;\n    }\n\n    /**\n     * Set a field in the transition logic of a node\n     */\n    setTransitionLogicField(nodeId, field, value) {\n\n        if (nodeId != null && field != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the transition logic\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n\n                    // set the value of the field\n                    transitionLogic[field] = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the criteria params field\n     * @param criteria the criteria object\n     * @param field the field name\n     * @param value the value to set into the field\n     */\n    setCriteriaParamsField(criteria, field, value) {\n\n        if (criteria != null) {\n\n            if (criteria.params == null) {\n\n                // create a params field since it does not exist\n                criteria.params = {};\n            }\n\n            // set the value of the field\n            criteria.params[field] = value;\n        }\n    }\n\n    /**\n     * Get the criteria params field\n     * @param criteria the criteria object\n     * @param field the field name\n     */\n    getCriteriaParamsField(criteria, field) {\n\n        if (criteria != null) {\n\n            // get the params\n            var params = criteria.params;\n\n            if (params != null) {\n                // get the field value\n                return params[field];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Set the transition to value of a node\n     * @param fromNodeId the from node\n     * @param toNodeId the to node\n     */\n    setTransition(fromNodeId, toNodeId) {\n        var node = this.getNodeById(fromNodeId);\n\n        if (node != null) {\n            // get the transition logic of the node\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n\n                // get the transitions\n                var transitions = transitionLogic.transitions;\n\n                if (transitions == null || transitions.length == 0) {\n                    // there are no transitions so we will create one\n                    transitionLogic.transitions = [];\n\n                    // create a transition object\n                    var transition = {};\n                    transitionLogic.transitions.push(transition);\n\n                    transitions = transitionLogic.transitions;\n                }\n\n                if (transitions != null && transitions.length > 0) {\n\n                    // get the first transition. we will assume there is only one transition.\n                    var transition = transitions[0];\n\n                    if (transition != null) {\n                        // set the to value\n                        transition.to = toNodeId;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the node id that comes after a given node id\n     * @param nodeId get the node id that comes after this node id\n     * @param the node id that comes after the one that is passed in as a parameter\n     */\n    getNodeIdAfter(nodeId) {\n\n        var nodeIdAfter = null;\n\n        // get an array of ordered items. each item represents a node\n        var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(this.idToOrder), 'order');\n\n        if (orderedItems != null) {\n\n            var foundNodeId = false;\n\n            // loop through all the items\n            for (var i = 0; i < orderedItems.length; i++) {\n\n                // get an item\n                var item = orderedItems[i];\n\n                if (item != null) {\n                    // get the node id of the item\n                    var tempNodeId = item.$key;\n\n                    // check if we have found the node id that was passed in as a parameter\n                    if (foundNodeId) {\n                        /*\n                         * we have previously found the node id that was passed in which means\n                         * the current temp node id is the one that comes after it\n                         */\n                        nodeIdAfter = tempNodeId;\n                        break;\n                    } else {\n\n                        if (nodeId == tempNodeId) {\n                            // we have found the node id that was passed in as a parameter\n                            foundNodeId = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAfter;\n    }\n\n    /**\n     * Get the node ids in the branch by looking for nodes that have branch\n     * path taken constraints with the given fromNodeId and toNodeId\n     * @param fromNodeId the from node id\n     * @param toNodeId the to node id\n     * @return an array of nodes that are in the branch path\n     */\n    getNodeIdsInBranch(fromNodeId, toNodeId) {\n\n        var nodesInBranch = [];\n\n        // get all the nodes in the project\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    if (this.hasBranchPathTakenConstraint(node, fromNodeId, toNodeId)) {\n                        /*\n                         * this node has the the branch path taken constraint we are\n                         * looking for\n                         */\n                        nodesInBranch.push(node.id);\n                    }\n                }\n            }\n        }\n\n        return nodesInBranch;\n    }\n\n    /**\n     * Check if a node has a branch path taken constraint\n     * @param node the node to check\n     * @param fromNodeId the from node id of the branch path taken\n     * @param toNodeId the to node id of the branch path taken\n     * @return whether the node has a branch path taken constraint with the\n     * given from node id and to node id\n     */\n    hasBranchPathTakenConstraint(node, fromNodeId, toNodeId) {\n\n        if (node != null) {\n\n            // get the constraints in the node\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the removal criteria of the constraint\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criterion\n                            for (var r = 0; r < removalCriteria.length; r++) {\n\n                                // get a removal criterion\n                                var removalCriterion = removalCriteria[r];\n\n                                if (removalCriterion != null) {\n\n                                    // get the removal criterion name\n                                    var name = removalCriterion.name;\n\n                                    if (name == 'branchPathTaken') {\n                                        // this is a branch path taken constraint\n\n                                        // get the removal criterion params\n                                        var params = removalCriterion.params;\n\n                                        if (params != null) {\n                                            if (fromNodeId == params.fromNodeId && toNodeId == params.toNodeId) {\n                                                // the params match the from node id and to node id\n                                                return true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Add branch path taken constraints to the node\n     * @param targetNodeId the node to add the constraints to\n     * @param fromNodeId the from node id of the branch path taken constraint\n     * @param toNodeId the to node id of the branch path taken constraint\n     */\n    addBranchPathTakenConstraints(targetNodeId, fromNodeId, toNodeId) {\n\n        if (targetNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(targetNodeId);\n\n            if (node != null) {\n\n                /*\n                 * create the constraint that makes the node not visible until\n                 * the given branch path is taken\n                 */\n                var makeThisNodeNotVisibleConstraint = {};\n                makeThisNodeNotVisibleConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n                makeThisNodeNotVisibleConstraint.action = 'makeThisNodeNotVisible';\n                makeThisNodeNotVisibleConstraint.targetId = targetNodeId;\n                makeThisNodeNotVisibleConstraint.removalCriteria = [];\n                var notVisibleRemovalCriterion = {};\n                notVisibleRemovalCriterion.name = 'branchPathTaken';\n                notVisibleRemovalCriterion.params = {};\n                notVisibleRemovalCriterion.params.fromNodeId = fromNodeId;\n                notVisibleRemovalCriterion.params.toNodeId = toNodeId;\n                makeThisNodeNotVisibleConstraint.removalConditional = 'all';\n                makeThisNodeNotVisibleConstraint.removalCriteria.push(notVisibleRemovalCriterion);\n                node.constraints.push(makeThisNodeNotVisibleConstraint);\n\n                /*\n                 * create the constraint that makes the node not visitable until\n                 * the given branch path is taken\n                 */\n                var makeThisNodeNotVisitableConstraint = {};\n                makeThisNodeNotVisitableConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n                makeThisNodeNotVisitableConstraint.action = 'makeThisNodeNotVisitable';\n                makeThisNodeNotVisitableConstraint.targetId = targetNodeId;\n                makeThisNodeNotVisitableConstraint.removalCriteria = [];\n                var notVisitableRemovalCriterion = {};\n                notVisitableRemovalCriterion.name = 'branchPathTaken';\n                notVisitableRemovalCriterion.params = {};\n                notVisitableRemovalCriterion.params.fromNodeId = fromNodeId;\n                notVisitableRemovalCriterion.params.toNodeId = toNodeId;\n                makeThisNodeNotVisitableConstraint.removalConditional = 'all';\n                makeThisNodeNotVisitableConstraint.removalCriteria.push(notVisitableRemovalCriterion);\n                node.constraints.push(makeThisNodeNotVisitableConstraint);\n            }\n        }\n    }\n\n    /**\n     * Remove the branch path taken constraints from a node\n     * @param nodeId remove the constraints from this node\n     */\n    removeBranchPathTakenNodeConstraints(nodeId) {\n\n        // get a node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the constraints\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the removal criteria\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criteria\n                            for (var rc = 0; rc < removalCriteria.length; rc++) {\n\n                                // get a removal criterion\n                                var removalCriterion = removalCriteria[rc];\n\n                                if (removalCriterion != null) {\n                                    if (removalCriterion.name == 'branchPathTaken') {\n                                        // this is a branch path taken removal criterion\n                                        var params = removalCriterion.params;\n\n                                        // remove the constraint\n                                        constraints.splice(c, 1);\n\n                                        // move the counter back one because we just removed a constraint\n                                        c--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the branch path taken constraints from a node\n     * @param nodeId get the branch path taken constraints from this node\n     * @return an array of branch path taken constraints from the node\n     */\n    getBranchPathTakenConstraintsByNodeId(nodeId) {\n\n        var branchPathTakenConstraints = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the constraints from the node\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // loop through all the constraints\n                    for (var c = 0; c < constraints.length; c++) {\n                        var constraint = constraints[c];\n\n                        if (constraint != null) {\n\n                            // get the removal criteria from the constraint\n                            var removalCriteria = constraint.removalCriteria;\n\n                            if (removalCriteria != null) {\n\n                                // loop through all the removal criteria\n                                for (var rc = 0; rc < removalCriteria.length; rc++) {\n                                    var removalCriterion = removalCriteria[rc];\n\n                                    if (removalCriterion != null) {\n                                        if (removalCriterion.name == 'branchPathTaken') {\n                                            /*\n                                             * we have found a branch path taken constraint so\n                                             * we will add the constraint to the array\n                                             */\n                                            branchPathTakenConstraints.push(constraint);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenConstraints;\n    }\n\n    /**\n     * Update the branch path taken constraint\n     * @param node update the branch path taken constraints in this node\n     * @param currentFromNodeId the current from node id\n     * @param currentToNodeId the current to node id\n     * @param newFromNodeId the new from node id\n     * @param newToNodeId the new to node id\n     */\n    updateBranchPathTakenConstraint(node, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId) {\n\n        if (node != null) {\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints for the node\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criteria\n                            for (var r = 0; r < removalCriteria.length; r++) {\n                                var removalCriterion = removalCriteria[r];\n\n                                if (removalCriterion != null) {\n\n                                    if (removalCriterion.name === 'branchPathTaken') {\n                                        // we have found a branchPathTaken removal criterion\n\n                                        var params = removalCriterion.params;\n\n                                        if (params != null) {\n\n                                            if (params.fromNodeId === currentFromNodeId &&\n                                                params.toNodeId === currentToNodeId) {\n\n                                                /*\n                                                 * we have found a branchPathTaken removal criterion\n                                                 * with the fromNodeId and toNodeId that we are\n                                                 * looking for so we will now update the values\n                                                 */\n                                                params.fromNodeId = newFromNodeId;\n                                                params.toNodeId = newToNodeId;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the project level rubric\n     * @return the project level rubric\n     */\n    getProjectRubric() {\n        return this.project.rubric;\n    }\n\n    /**\n     * Set the project level rubric\n     */\n    setProjectRubric(html) {\n        this.project.rubric = html;\n    }\n\n    /**\n     * Check if a node is a branch point\n     * @param nodeId the node id\n     * @return whether the node is a branch point\n     */\n    isBranchPoint(nodeId) {\n\n        var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions != null) {\n            if (transitions.length > 1) {\n                /*\n                 * the node contains more than one transition which means it is\n                 * a branch point\n                 */\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a node is the first node in a branch path\n     * @param nodeId the node id\n     * @return whether the node is the first node in a branch path\n     */\n    isFirstNodeInBranchPath(nodeId) {\n\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null &&\n                    node.transitionLogic != null &&\n                    node.transitionLogic.transitions != null) {\n\n                    var transitions = node.transitionLogic.transitions;\n\n                    if (transitions.length > 1) {\n                        /*\n                         * there is more than one transition from this node\n                         * which means it is a branch point\n                         */\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var transitionTo = transition.to;\n\n                                if (transitionTo === nodeId) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n}\n\nProjectService.$inject = [\n    '$filter',\n    '$http',\n    '$injector',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'UtilService'\n];\n\nexport default ProjectService;\n"]}