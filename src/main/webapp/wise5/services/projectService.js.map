{"version":3,"sources":["projectService.es6"],"names":[],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n\n    constructor($http, $injector, $q, $rootScope, ConfigService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.project = null;\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n\n        // filtering options for navigation displays\n        this.filters = [\n            {'name': 'all', 'label': 'All'},\n            //{'name': 'todo', 'label': 'Todo'},\n            //{'name': 'completed', 'label': 'Completed'},\n            {'name': 'bookmark', 'label': 'Bookmarks'} // TODO: Add when bookmarks are active\n        ];\n    };\n\n    setProject(project) {\n        this.project = project;\n        this.parseProject();\n    };\n\n    /**\n     * Initialize the data structures used to hold project information\n     */\n    clearProjectFields() {\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n    };\n\n    getStyle() {\n        var style = '';\n        var project = this.project;\n        if (project != null) {\n            style = project.style;\n        }\n        return style;\n    };\n\n    getFilters() {\n        return this.filters;\n    };\n\n    /**\n     * Returns the name/title of the current project\n     */\n    getProjectTitle() {\n        var name = this.getProjectMetadata().title;\n        return name ? name : 'A WISE Project (No name)';\n    };\n\n    /**\n     * Set the project title\n     */\n    setProjectTitle(projectTitle) {\n        var metadata = this.getProjectMetadata();\n\n        if (metadata != null) {\n            metadata.title = projectTitle;\n        }\n    }\n\n    getProjectMetadata() {\n        return this.metadata ? this.metadata : {};\n    };\n\n    getNodes() {\n        var nodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            nodes = project.nodes;\n        }\n\n        return nodes;\n    };\n\n    getPlanningNodes() {\n        var planningNodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            planningNodes = project.planningNodes;\n        }\n\n        return planningNodes;\n    };\n\n    getChildNodeIdsById(nodeId) {\n        var childIds = [];\n        var node = this.getNodeById(nodeId);\n\n        if (node.ids) {\n            childIds = node.ids;\n        }\n\n        return childIds;\n    };\n\n    getGroupNodes() {\n        return this.groupNodes;\n    };\n\n    isNode(id) {\n        var result = false;\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    if (nodeId === id) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // adds or update transition if exists\n    addTransition(transition) {\n\n        var existingTransitions = this.getTransitions();\n        var replaced = false;\n        for (var t = 0; t < existingTransitions.length; t++) {\n            var existingTransition = existingTransitions[t];\n            if (existingTransition.id === transition.id) {\n                existingTransitions.splice(t, 1, transition);\n                replaced = true;\n            }\n        }\n        if (!replaced) {\n            existingTransitions.push(transition);\n        }\n    };\n\n    addNode(node) {\n        var existingNodes = this.project.nodes;\n\n        var replaced = false;\n        if (node != null && existingNodes != null) {\n            for (var n = 0; n < existingNodes.length; n++) {\n                var existingNode = existingNodes[n];\n                var existingNodeId = existingNode.id;\n                if (existingNodeId === node.id) {\n                    existingNodes.splice(n, 1, node);\n                    replaced = true;\n                }\n            }\n        }\n        if (!replaced) {\n            existingNodes.push(node);\n        }\n    };\n\n    addApplicationNode(node) {\n\n        var applicationNodes = this.applicationNodes;\n\n        if (node != null && applicationNodes != null) {\n            applicationNodes.push(node);\n        }\n    };\n\n    addGroupNode(node) {\n\n        var groupNodes = this.groupNodes;\n\n        if (node != null && groupNodes != null) {\n            groupNodes.push(node);\n        }\n\n        this.$rootScope.$broadcast('groupsChanged');\n    };\n\n    addNodeToGroupNode(groupId, nodeId) {\n        if (groupId != null && nodeId != null) {\n            var group = this.getNodeById(groupId);\n            if (group != null) {\n                var groupChildNodeIds = group.ids;\n                if (groupChildNodeIds != null) {\n                    if (groupChildNodeIds.indexOf(nodeId) === -1) {\n                        groupChildNodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    isGroupNode(id) {\n        var result = false;\n\n        var groupNode = this.getNodeById(id);\n\n        if (groupNode != null) {\n            var type = groupNode.type;\n\n            if (type === 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isApplicationNode(id) {\n        var result = false;\n\n        var applicationNode = this.getNodeById(id);\n\n        if (applicationNode != null) {\n            var type = applicationNode.type;\n\n            if (type !== 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getGroups() {\n        return this.groupNodes;\n    };\n\n    loadNodes(nodes) {\n        if (nodes != null) {\n            for (var n = 0 ; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n                    var nodeType = node.type;\n                    var content = node.content;\n                    var constraints = node.constraints;\n\n                    if (content != null) {\n                        //node.content = this.injectAssetPaths(content);\n                    }\n\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n\n                    this.addNode(node);\n\n                    if (nodeType === 'group') {\n                        this.addGroupNode(node);\n                    } else {\n                        this.addApplicationNode(node);\n                    }\n\n                    var groupId = node.groupId;\n\n                    if (groupId != null) {\n                        this.addNodeToGroupNode(groupId, nodeId);\n                    }\n\n                    if (constraints != null) {\n                        for (var c = 0; c < constraints.length; c++) {\n                            var constraint = constraints[c];\n\n                            this.activeConstraints.push(constraint);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Load the planning template nodes\n     * @param planning template nodes\n     */\n    loadPlanningNodes(planningNodes) {\n        if (planningNodes != null) {\n\n            // loop through all the planning template nodes\n            for (var p = 0; p < planningNodes.length; p++) {\n                var planningNode = planningNodes[p];\n\n                if (planningNode != null) {\n                    var nodeId = planningNode.id;\n\n                    this.setIdToNode(nodeId, planningNode);\n                    this.setIdToElement(nodeId, planningNode);\n\n                    // TODO: may need to add more function calls here to add the planning\n                }\n            }\n        }\n    }\n\n    parseProject() {\n        var project = this.project;\n        if (project != null) {\n\n            // clear and initialize our project data structures\n            this.clearProjectFields();\n\n            if (project.metadata) {\n                this.metadata = project.metadata;\n            }\n\n            var nodes = project.nodes;\n            this.loadNodes(nodes);\n\n            // load the planning node templates\n            var planningNodes = project.planningNodes;\n            this.loadPlanningNodes(planningNodes);\n\n            // load the inactive nodes\n            var inactiveNodes = project.inactiveNodes;\n            this.loadInactiveNodes(inactiveNodes);\n\n            var constraints = project.constraints;\n\n            if (constraints != null) {\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n                        var constraintId = constraint.id;\n                        constraint.active = true;\n\n                        this.setIdToElement(constraintId, constraint);\n                    }\n                }\n            }\n\n            // set root node\n            this.rootNode = this.getRootNode(nodes[0].id);\n\n            // set project order\n            this.setNodeOrder(this.rootNode, this.nodeCount);\n            //this.nodeCount = 0;\n\n            var n = nodes.length;\n            var branches = this.getBranches();\n            var branchNodeIds = [];\n\n            // set node positions\n            var id, pos;\n\n            while (n--) {\n                id = nodes[n].id;\n                if (id === this.rootNode.id) {\n                    this.setIdToPosition(id, '0');\n                } else if (this.isNodeIdInABranch(branches, id)) {\n                    // node is in a branch, so process later\n                    branchNodeIds.push(id);\n                } else {\n                    pos = this.getPositionById(id);\n                    this.setIdToPosition(id, pos);\n                }\n            }\n\n            // set branch node positions\n            var b = branchNodeIds.length;\n            while (b--) {\n                id = branchNodeIds[b];\n                pos = this.getBranchNodePositionById(id);\n                this.setIdToPosition(id, pos);\n            }\n        }\n    };\n\n    setNodeOrder(node) {\n        this.idToOrder[node.id] = {'order': this.nodeCount};\n        this.nodeCount++;\n        if (this.isGroupNode(node.id)) {\n            var childIds = node.ids;\n            for (var i = 0; i < childIds.length; i++) {\n                var child = this.getNodeById(childIds[i]);\n                this.setNodeOrder(child);\n            }\n        }\n    };\n\n    /**\n     * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getPositionById(id) {\n        for (var i = 0; i < this.rootNode.ids.length; i++) {\n            var node = this.getNodeById(this.rootNode.ids[i]);\n            var path = this.getPathToNode(node, i+1, id);\n            if (path != undefined && path != null) {\n                return path;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Returns the order of the given node id in the project. Returns null if no node with id exists.\n     * @param id String node id\n     * @return Number order of the given node id in the project\n     */\n    getOrderById(id) {\n        if (this.idToOrder[id]) {\n            return this.idToOrder[id].order;\n        }\n\n        return null;\n    };\n    /**\n     * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n     * @param order Number\n     * @return Number node id of the given order in the project\n     */\n    getIdByOrder(order) {\n        var nodeId = null;\n\n        for (var id in this.idToOrder) {\n            if (this.idToOrder[id].order === order) {\n                if (this.isGroupNode(id) && order > 1) {\n                    nodeId = this.getIdByOrder(order-1);\n                } else {\n                    nodeId = id;\n                }\n                break;\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getBranchNodePositionById(id) {\n        var branches = this.getBranches();\n        var b = branches.length;\n\n        // TODO: should we localize this? should we support more than 26?\n        var integerToAlpha = function(int) {\n            var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n            if (int > -1 && int < 26) {\n                return alphabet[int];\n            } else {\n                return int;\n            }\n        };\n\n        while (b--) {\n            var branch = branches[b];\n            var branchPaths = branch.branchPaths;\n            for (var p = 0; p < branchPaths.length; p++) {\n                var branchPath = branchPaths[p];\n                var nodeIndex = branchPath.indexOf(id);\n                if (nodeIndex > -1) {\n                    var startPoint = branch.branchStartPoint;\n                    var startPointPos = this.idToPosition[startPoint];\n                    var branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n                    return branchPathPos + (nodeIndex+1);\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n     * @param node a node to start searching down\n     * @param path the position of the given node\n     * @param id the node id to search for\n     * @return string path of the given node id in the project\n     */\n    getPathToNode(node, path, id) {\n        if (node.id === id) {\n            return path + '';\n        } else if (node.type === 'group') {\n            var num = 0;\n            var branches = this.getBranches();\n            for (var i = 0; i < node.ids.length; i++) {\n                var nodeId = node.ids[i];\n                if (this.isNodeIdInABranch(branches, nodeId)) {\n                    this.getBranchNodePositionById(nodeId);\n                } else {\n                    ++num;\n                    var pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n                    if (pos) {\n                        return pos;\n                    }\n                }\n            }\n        }\n    };\n\n    setIdToPosition(id, pos) {\n        if (id != null) {\n            this.idToPosition[id] = pos;\n        }\n    };\n\n    getNodePositionById(id) {\n        if (id != null) {\n            return this.idToPosition[id];\n        }\n    };\n\n    setIdToNode(id, element) {\n        if (id != null) {\n            this.idToNode[id] = element;\n        }\n    };\n\n    setIdToElement(id, element) {\n        if (id != null) {\n            this.idToElement[id] = element;\n        }\n    };\n\n    /**\n     * Replace relative asset paths with absolute paths\n     * e.g.\n     * assets/myimage.jpg\n     * will be replaced with\n     * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n     * @param content a string or JSON object\n     * @return the same type of object that was passed in as the content\n     * but with relative asset paths replaced with absolute paths\n     */\n    injectAssetPaths(content) {\n\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.replaceAssetPaths(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.replaceAssetPaths(content);\n            }\n        }\n\n        return content;\n    };\n\n    /**\n     * Replace the relative asset paths with absolute paths\n     * @param contentString the content string\n     * @return the content string with relative asset paths replaced\n     * with absolute asset paths\n     */\n    replaceAssetPaths(contentString) {\n\n        if (contentString != null) {\n\n            // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n            var contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n            // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n            // the string we're looking for can't start with '/ and \"/.\n            // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n            contentString = contentString.replace(\n                new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/]?[^\\/]?[a-zA-Z0-9@\\\\._\\\\/\\\\s\\\\-]*[\\.](png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html|js)(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n                (matchedString) => {\n                    // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n                    var delimiter = '';\n                    var matchedStringWithoutQuotes = '';\n\n                    if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n                        // the string has escaped quotes for example \\\"hello.png\\\"\n\n                        // get everything between the escaped quotes\n                        matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n                        // get the delimiter which will be \\' or \\\"\n                        delimiter = matchedString.substr(0,2);\n                    } else {\n                        // the string does not have escaped qoutes for example \"hello.png\"\n\n                        // get everything between the quotes\n                        matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n                        // get the delimiter which will be ' or \"\n                        delimiter = matchedString.substr(0,1);\n                    }\n\n                    //var matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n                    // make a new string with the contentBaseURL + assets/ prepended to the path\n                    return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n                }\n            );\n        }\n\n        return contentString;\n    };\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param content the content\n     * @returns the modified content\n     */\n    injectClickToSnipImage(content) {\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.injectClickToSnipImageIntoContentString(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.injectClickToSnipImageIntoContentString(content);\n            }\n        }\n\n        return content;\n    }\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param contentString the content in string format\n     * @returns the modified content string\n     */\n    injectClickToSnipImageIntoContentString(contentString) {\n\n        if (contentString != null) {\n\n            // regex to match image elements\n            var imgMatcher = new RegExp('<img.*?src=\\\\\\\\?[\\'\"](.*?)\\\\\\\\?[\\'\"].*?>', 'gi');\n\n            // replace all instances that match\n            contentString = contentString.replace(imgMatcher,\n                (matchedString, matchGroup1) => {\n\n                    /*\n                     * insert the ng-click attribute\n                     * Before: <img src=\"abc.png\"/>\n                     * After: <img ng-click=\"vleController.snipImage($event)\"/>\n                     */\n                    var newString = matchedString.replace('img', 'img ng-click=\\\\\\\"vleController.snipImage($event)\\\\\\\"');\n\n                    return newString;\n                }\n            );\n        }\n\n        return contentString;\n    }\n\n    /**\n     * Returns the node specified by the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeById(nodeId) {\n        var element = null;\n\n        if (nodeId != null && this.idToNode[nodeId]) {\n            element = this.idToNode[nodeId];\n        }\n\n        return element;\n    };\n\n    /**\n     * Returns the title of the node with the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    };\n\n    /**\n     * Get the node position and title\n     * @param nodeId the node id\n     * @returns the node position and title, e.g. \"1.1 Introduction\"\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            var position = this.getNodePositionById(nodeId);\n\n            if (position != null) {\n                title = position + ': ' + node.title;\n            } else {\n                title = node.title;\n            }\n        }\n\n        return title;\n    };\n\n    getNodeIconByNodeId(nodeId) {\n        var node = this.getNodeById(nodeId);\n        var nodeIcon = null;\n\n        if (node != null) {\n            var nodeType = node.type;\n\n            // set defaults (TODO: get from configService?)\n            var defaultName = (nodeType === 'group') ? 'explore' : 'school';\n            nodeIcon = {\n                color: 'rgba(0,0,0,0.54)',\n                type: 'font',\n                fontSet: 'material-icons',\n                fontName: defaultName,\n                imgSrc: '',\n                imgAlt: 'node icon'\n            };\n\n            // TODO: check for different statuses\n            var icons = node.icons;\n            if (!!icons && !!icons.default) {\n                var icon = icons.default;\n                nodeIcon = $.extend(true, nodeIcon, icon);\n            }\n\n            // check for empty image source\n            if (!nodeIcon.imgSrc) {\n                // revert to font icon\n                nodeIcon.type = 'font';\n            }\n        }\n\n        return nodeIcon;\n    };\n\n    getParentGroup(nodeId) {\n        var result = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var groupNodes = this.getGroupNodes();\n\n                for (var g = 0; g < groupNodes.length; g++) {\n                    var groupNode = groupNodes[g];\n\n                    if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n                        result = groupNode;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the parent group id\n     * @param nodeId the parent group id\n     * @returns the parent group id\n     */\n    getParentGroupId(nodeId) {\n\n        var parentGroupId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n        }\n\n        return parentGroupId;\n    }\n\n    getNodeDepth(nodeId, val) {\n        var result = null;\n\n        if (nodeId != null) {\n            var depth = (typeof val === \"number\") ? val : 0;\n            var parent = this.getParentGroup(nodeId);\n            if (parent) {\n                depth = this.getNodeDepth(parent.id, depth + 1);\n            }\n            result = depth;\n        }\n\n        return result;\n    };\n\n    getRootNode(nodeId) {\n        var result = null;\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        if (parentGroup == null) {\n            result = this.getNodeById(nodeId);\n        } else {\n            result = this.getRootNode(parentGroup.id);\n        }\n\n        return result;\n    };\n\n    isNodeDirectChildOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var nodeId = node.id;\n            var groupIds = group.ids;\n\n            if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isNodeDescendentOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var descendents = this.getDescendentsOfGroup(group);\n            var nodeId = node.id;\n\n            if (descendents.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getDescendentsOfGroup(group) {\n        var descendents = [];\n\n        if (group != null) {\n            var childIds = group.ids;\n\n            if (childIds != null) {\n                descendents = childIds;\n\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n\n                    var node = this.getNodeById(childId);\n\n                    if (node != null) {\n                        var childDescendents = this.getDescendentsOfGroup(node);\n\n                        descendents = descendents.concat(childDescendents);\n                    }\n                }\n            }\n        }\n\n        return descendents;\n    };\n\n    isStartNode(node) {\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var projectStartId = this.getStartNodeId();\n\n            if (nodeId === projectStartId) {\n                result = true;\n            }\n\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    var groupStartId = group.startId;\n\n                    if (nodeId === groupStartId) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns the Project's start node id, or null if it's not defined in the project\n     */\n    getStartNodeId() {\n        var startNodeId = null;\n        var project = this.project;\n        if (project != null) {\n            startNodeId = project.startNodeId;\n        }\n        return startNodeId;\n    };\n\n    /**\n     * Set the start node id\n     * @param nodeId the new start node id\n     */\n    setStartNodeId(nodeId) {\n\n        if (nodeId != null) {\n            var project = this.project;\n            if (project != null) {\n                project.startNodeId = nodeId;\n            }\n        }\n    }\n\n    /**\n     * Get the start group id\n     * @return the start group id\n     */\n    getStartGroupId() {\n        var startGroupId = null;\n\n        var project = this.project;\n        if (project != null) {\n            startGroupId = project.startGroupId;\n        }\n\n        return startGroupId;\n    }\n\n    /**\n     * Check if the given node id is the start node id\n     * @return whether the node id is the start node id\n     */\n    isStartNodeId(nodeId) {\n\n        var result = false;\n\n        var project = this.project;\n\n        if (project != null) {\n            var startNodeId = project.startNodeId;\n\n            if (nodeId === startNodeId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    getConstraintsForNode(node) {\n        var constraints = [];\n\n        var allConstraints = this.activeConstraints;\n\n        for (var c = 0; c < allConstraints.length; c++) {\n            var constraint = allConstraints[c];\n\n            if (this.isNodeAffectedByConstraint(node, constraint)) {\n                constraints.push(constraint);\n            }\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Check if a node is affected by the constraint\n     * @param node check if the node is affected\n     * @param constraint the constraint that might affect the node\n     * @returns whether the node is affected by the constraint\n     */\n    isNodeAffectedByConstraint(node, constraint) {\n        var result = false;\n\n        if (node != null && constraint != null) {\n            var nodeId = node.id;\n            var targetId = constraint.targetId;\n            var action = constraint.action;\n\n            if (action === 'makeAllNodesAfterThisNotVisible') {\n                if (this.isNodeIdAfter(targetId, node.id)) {\n                    result = true;\n                }\n            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                if (this.isNodeIdAfter(targetId, node.id)) {\n                    result = true;\n                }\n            } else {\n                var targetNode = this.getNodeById(targetId);\n\n                if (targetNode != null) {\n                    var nodeType = targetNode.type;\n\n                    if (nodeType === 'node') {\n                        // the target is an application\n\n                        if (nodeId === targetId) {\n                            result = true;\n                        }\n                    } else if (nodeType === 'group') {\n                        // the target is a group\n\n                        if (this.isNodeDescendentOfGroup(node, targetNode)) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id comes after another node id in the project\n     * @param nodeIdBefore the node id before\n     * @param nodeIdAfter the node id after\n     */\n    isNodeIdAfter(nodeIdBefore, nodeIdAfter) {\n        var result = false;\n\n        if (nodeIdBefore != null && nodeIdAfter != null) {\n\n            if (this.isApplicationNode(nodeIdBefore)) {\n                // the node id before is a step\n\n                // get all the paths from the beforeNodeId to the end of the project\n                var pathsToEnd = this.getAllPaths([], nodeIdBefore, true);\n\n                if (pathsToEnd != null) {\n\n                    // loop through all the paths\n                    for (var p = 0; p < pathsToEnd.length; p++) {\n\n                        var pathToEnd = pathsToEnd[p];\n\n                        if (pathToEnd != null) {\n\n                            /*\n                             * remove the first node id and its parent id because\n                             * we will check the remaining node ids in the array\n                             * for the nodeIdAfter\n                             */\n\n                            // get the index of the node id before\n                            var index = pathToEnd.indexOf(nodeIdBefore);\n\n                            if (index != -1) {\n                                // remove the node id before\n                                pathToEnd.splice(index, 1);\n                            }\n\n                            // get the parent group of the node id before\n                            var parentGroup = this.getParentGroup(nodeIdBefore);\n\n                            if (parentGroup != null) {\n                                // remove the parent group of the node id before\n                                var parentGroupId = parentGroup.id;\n                                var parentGroupIndex = pathToEnd.indexOf(parentGroupId);\n                                if (parentGroupIndex != -1) {\n                                    pathToEnd.splice(parentGroupIndex, 1);\n                                }\n                            }\n\n                            if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                // we have found the nodeIdAfter in the path to the end of the project\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // the node id before is an activity\n\n                // get the group\n                var group = this.getNodeById(nodeIdBefore);\n\n                if (group != null) {\n\n                    // get the transitions from the group\n                    var transitions = this.getTransitionsByFromNodeId(nodeIdBefore);\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                // get the paths between to toNodeId and the end of the project\n                                var pathsToEnd = this.getAllPaths([], toNodeId, true);\n\n                                // loop through all the paths\n                                for (var p = 0; p < pathsToEnd.length; p++) {\n\n                                    // get a path\n                                    var pathToEnd = pathsToEnd[p];\n\n                                    if (pathToEnd != null) {\n                                        if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                            // we have found the nodeIdAfter in the path to the end of the project\n                                            result = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    getNavigationMode() {\n        var navigationMode = null;\n        var project = this.project;\n        if (project != null) {\n            navigationMode = project.navigationMode;\n        }\n        return navigationMode;\n    };\n\n    getTransitions() {\n        var transitions = null;\n        var project = this.project;\n        if (project != null) {\n            transitions = project.transitions;\n        }\n        return transitions;\n    };\n\n    /**\n     * Returns all possible transition criteria for the specified node and component.\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        if (component != null) {\n            let componentType = component.type;\n            let componentService = this.$injector.get(componentType + 'Service');\n            if (componentService.getPossibleTransitionCriteria) {\n                return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n            } else {\n                return [];\n            }\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the transition logic for a node\n     * @param fromNodeId the from node id\n     * @returns the transition logic object\n     */\n    getTransitionLogicByFromNodeId(fromNodeId) {\n        var transitionLogic = null;\n\n        if (fromNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                // get the transition logic\n                transitionLogic = node.transitionLogic;\n            }\n        }\n\n        return transitionLogic;\n    };\n\n    /**\n     * Get the transitions for a node\n     * @param fromNodeId the node to get transitions from\n     * @returns an array of transitions\n     */\n    getTransitionsByFromNodeId(fromNodeId) {\n\n        var transitions = null;\n\n        if (fromNodeId != null) {\n            // get the transition logic\n            var transitionLogic = this.getTransitionLogicByFromNodeId(fromNodeId);\n\n            if (transitionLogic != null) {\n                // get the transitions\n                transitions = transitionLogic.transitions;\n            }\n        }\n\n        return transitions;\n    }\n\n    /**\n     * Get nodes that have a transition to the given node id\n     * @param toNodeId the node id\n     * @returns an array of node objects that transition to the\n     * given node id\n     */\n    getNodesByToNodeId(toNodeId) {\n        var nodesByToNodeId = [];\n\n        if (toNodeId != null) {\n\n            // get all the nodes\n            var nodes = this.project.nodes;\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions for the node\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                if (toNodeId === transition.to) {\n                                    // this node has a transition to the node id\n                                    nodesByToNodeId.push(node);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodesByToNodeId;\n    };\n\n    /**\n     * Get node ids of all the nodes that have a to transition to the given node id\n     * @param toNodeId\n     * @returns all the node ids that have a transition to the given node id\n     */\n    getNodeIdsByToNodeId(toNodeId) {\n        var nodeIds = [];\n\n        // get all the nodes that transition to the toNodeId\n        var nodes = this.getNodesByToNodeId(toNodeId);\n\n        if (nodes != null) {\n\n            // loop through all the nodes to get the node ids\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    nodeIds.push(node.id);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Get the group nodes that point to a given node id\n     * @param toNodeId\n     */\n    getGroupNodesByToNodeId(toNodeId) {\n        var groupsThatPointToNodeId = [];\n\n        if (toNodeId != null) {\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    if (this.hasTransitionTo(group, toNodeId)) {\n                        groupsThatPointToNodeId.push(group);\n                    }\n                }\n            }\n        }\n\n        return groupsThatPointToNodeId;\n    }\n\n    /**\n     * Check if a node has a transition to a node id\n     * @param node check if this node has a transition to the node id\n     * @param toNodeId we will look for a transition to this node id\n     * @returns whether the node has a transition to the node id\n     */\n    hasTransitionTo(node, toNodeId) {\n        var result = false;\n\n        if (node != null && toNodeId != null) {\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (toNodeId === transition.to) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the transitions that traverse from the fromNodeId and to the toNodeId\n     * @param fromNodeId the from node id\n     * @param toNodeId the to node id\n     * @returns an array of transitions that traverse from the fromNodeId and\n     * to the toNodeId\n     */\n    getTransitionsByFromAndToNodeId(fromNodeId, toNodeId) {\n        var transitionsResults = [];\n\n        if (fromNodeId != null && toNodeId != null) {\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var to = transition.to;\n\n                                if (toNodeId === to) {\n                                    transitionsResults.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return transitionsResults;\n    };\n\n    /**\n     * Retrieves the project JSON from Config.projectURL and returns it.\n     * If Config.projectURL is undefined, returns null.\n     */\n    retrieveProject() {\n        var projectURL = this.ConfigService.getConfigParam('projectURL');\n\n        if (projectURL == null) {\n            return null;\n        } else {\n            /*\n             * add a unique GET parameter value so that it always retrieves the\n             * latest version of the project file from the server and never\n             * retrieves the project from cache.\n             */\n            projectURL += '?noCache=' + (new Date()).getTime();\n        }\n\n        return this.$http.get(projectURL).then((result) => {\n            var projectJSON = result.data;\n            this.setProject(projectJSON);\n            return projectJSON;\n        });\n    };\n\n    /**\n     * Saves the project to Config.saveProjectURL and returns commit history promise.\n     * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n     */\n    saveProject(commitMessage = \"Made changes via WISE5 Authoring Tool\") {\n\n        // perform any cleanup before saving the project\n        this.cleanupBeforeSave();\n\n        var projectId = this.ConfigService.getProjectId();\n        var saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n        if (projectId == null || saveProjectURL == null) {\n            return null;\n        }\n\n        // Get the project from this service\n        var projectJSONString = angular.toJson(this.project, 4);\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = saveProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.projectId = projectId;\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var commitHistory = result.data;\n            return commitHistory;\n        });\n    };\n\n    /**\n     * Get the current authors for this project\n     * @param projectId\n     */\n    getCurrentAuthors(projectId = null) {\n        return this.$q((resolve, reject) => {\n            if (projectId == null) {\n                if (this.project != null) {\n                    projectId = this.ConfigService.getProjectId();\n                } else {\n                    // we're not editing any projects, so there are no authors\n                    resolve([]);\n                }\n            }\n            let notifyProjectEndURL = this.ConfigService.getConfigParam('getCurrentAuthorsURL') + projectId;\n            let httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = notifyProjectEndURL;\n\n            this.$http(httpParams).then((result) => {\n                resolve(result.data);\n            })\n        });\n    };\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectBegin(projectId = null) {\n        if (projectId == null) {\n            if (this.project != null) {\n                projectId = this.project.id;\n            } else {\n                return;\n            }\n        }\n        let notifyProjectBeginURL = this.ConfigService.getConfigParam('notifyProjectBeginURL') + projectId;\n        let httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = notifyProjectBeginURL;\n\n        return this.$http(httpParams).then((result) => {\n            let otherAuthors = result.data;\n            return otherAuthors;\n        });\n    }\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectEnd(projectId = null) {\n        return this.$q((resolve, reject) => {\n            if (projectId == null) {\n                if (this.project != null) {\n                    projectId = this.ConfigService.getProjectId();\n                } else {\n                    resolve();\n                }\n            }\n            let notifyProjectEndURL = this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId;\n            let httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = notifyProjectEndURL;\n\n            this.$http(httpParams).then(() => {\n                resolve();\n            })\n        });\n    }\n\n    /**\n     * Perform any necessary cleanup before we save the project.\n     * For example we need to remove the checked field in the inactive node\n     * objects.\n     */\n    cleanupBeforeSave() {\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    // remove the checked field\n                    delete inactiveNode.checked;\n                }\n            }\n        }\n    }\n\n    /**\n     * Copies the project with the specified id and returns a new project id if the project is\n     * successfully copied\n     */\n    copyProject(projectId) {\n        var copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n\n        if (copyProjectURL == null) {\n            return null;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = copyProjectURL + \"/\" + projectId;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Registers a new project having the projectJSON content with the server.\n     * Returns a new project Id if the project is successfully registered.\n     * Returns null if Config.registerNewProjectURL is undefined.\n     * Throws an error if projectJSONString is invalid JSON string\n     */\n    registerNewProject(projectJSONString, commitMessage) {\n        var registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n\n        if (registerNewProjectURL == null) {\n            return null;\n        }\n\n        try {\n            // Try parsing the JSON string and throw an error if there's an issue parsing it.\n            JSON.parse(projectJSONString);\n        } catch (e) {\n            throw new Error(\"Invalid projectJSONString.\");\n        }\n\n        if (!commitMessage) {\n            commitMessage = \"\";\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = registerNewProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Retrieves and returns the project's commit history.\n     */\n    getCommitHistory() {\n        var commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n\n        return this.$http({\n            url: commitProjectURL,\n            method: 'GET'\n        }).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Returns the theme path for the current project\n     */\n    getThemePath() {\n        let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        let project = this.project;\n        if (project && project.theme) {\n            // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n            return wiseBaseURL + '/wise5/themes/' + project.theme;\n        } else {\n            // TODO: get default theme name from ConfigService\n            return wiseBaseURL + '/wise5/themes/default';\n        }\n    };\n\n    /**\n     * Returns the theme settings for the current project\n     */\n    getThemeSettings() {\n        let themeSettings = {};\n        let project = this.project;\n\n        if (project && project.themeSettings) {\n            if (project.theme) {\n                // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n                themeSettings = project.themeSettings[project.theme];\n            } else {\n                // TODO: get default theme name from ConfigService\n                themeSettings = project.themeSettings[\"default\"];\n            }\n        }\n\n        return themeSettings ? themeSettings : {};\n    };\n\n    /**\n     * Flatten the project to obtain a list of node ids\n     */\n    getFlattenedProjectAsNodeIds() {\n        var nodeIds = [];\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the possible paths through the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // consolidate all the paths to create a single list of node ids\n        nodeIds = this.consolidatePaths(allPaths);\n        //nodeIds = this.consolidatePaths(allPaths.reverse());\n\n        return nodeIds;\n    };\n\n    /**\n     * Get all the possible paths through the project. This function\n     * recursively calls itself to traverse the project depth first.\n     * @param pathSoFar the node ids in the path so far. the node ids\n     * in this array are referenced to make sure we don't loop back\n     * on the path.\n     * @param nodeId the node id we want to get the paths from\n     * @param includeGroups whether to include the group node ids in the paths\n     * @return an array of paths. each path is an array of node ids.\n     */\n    getAllPaths(pathSoFar, nodeId, includeGroups) {\n        var allPaths = [];\n\n        if (nodeId != null) {\n            if (this.isApplicationNode(nodeId)) {\n                // the node is an application node\n\n                var path = [];\n\n                // get all the transitions from this node\n                var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n                if (transitions != null) {\n\n                    if (includeGroups) {\n                        // get the parent group\n                        var parentGroup = this.getParentGroup(nodeId);\n                        if (parentGroup != null) {\n\n                            // get the parent group id\n                            var parentGroupId = parentGroup.id;\n\n                            if (parentGroupId != null && pathSoFar.indexOf(parentGroupId) == -1) {\n                                // add the parent group id\n                                pathSoFar.push(parentGroup.id);\n                            }\n                        }\n                    }\n\n                    /*\n                     * add the node id to the path so far so we can later check\n                     * which nodes are already in the path to prevent looping\n                     * back in the path\n                     */\n                    pathSoFar.push(nodeId);\n\n                    if (transitions.length === 0) {\n                        /*\n                         * there are no transitions from the node id so we will\n                         * look for a transition in the parent group\n                         */\n\n                        var addedCurrentNodeId = false;\n\n                        var parentGroupId = this.getParentGroupId(nodeId);\n                        var parentGroupTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                        if (parentGroupTransitions != null) {\n                            for (var p = 0; p < parentGroupTransitions.length; p++) {\n                                var parentGroupTransition = parentGroupTransitions[p];\n\n                                if (parentGroupTransition != null) {\n\n                                    var toNodeId = parentGroupTransition.to;\n\n                                    if (pathSoFar.indexOf(toNodeId) == -1) {\n                                        /*\n                                         * recursively get the paths by getting all\n                                         * the paths for the to node\n                                         */\n                                        var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n\n                                            addedCurrentNodeId = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!addedCurrentNodeId) {\n                            /*\n                             * if the parent group doesn't have any transitions we will\n                             * need to add the current node id to the path\n                             */\n\n                            // add the node id to the path\n                            path.push(nodeId);\n\n                            // add the path to the all paths array\n                            allPaths.push(path);\n                        }\n                    } else {\n                        // there are transitions from this node id\n\n                        // loop through all the transitions from this node id\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transitionResult = [];\n\n                            // get a transition\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                // get the to node id\n                                var toNodeId = transition.to;\n\n                                if (pathSoFar.indexOf(toNodeId) == -1) {\n                                    // we have not found the to node in the path yet so we can traverse it\n\n                                    /*\n                                     * recursively get the paths by getting all\n                                     * the paths from the to node\n                                     */\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            if (includeGroups) {\n                                                // we need to add the group id to the path\n\n                                                if (tempPath.length > 0) {\n\n                                                    // get the first node id in the path\n                                                    var firstNodeId = tempPath[0];\n\n                                                    // get the parent id of the first node\n                                                    var firstParentGroupId = this.getParentGroupId(firstNodeId);\n\n                                                    // get the parent id of the current node\n                                                    var parentGroupId = this.getParentGroupId(nodeId);\n\n                                                    if (parentGroupId != firstParentGroupId) {\n                                                        /*\n                                                         * the parent ids are different which means this is a boundary\n                                                         * between two groups. for example if the project looked like\n                                                         * group1>node1>node2>group2>node3>node4\n                                                         * and the current node was node2 then the first node in the\n                                                         * path would be node3 which means we would need to place\n                                                         * group2 on the bath before node3\n                                                         */\n                                                        tempPath.unshift(firstParentGroupId);\n                                                    }\n                                                }\n                                            }\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                } else {\n                                    /*\n                                     * the node is already in the path so far which means\n                                     * the transition is looping back to a previous node.\n                                     * we do not want to take this transition because\n                                     * it will lead to an infinite loop. we will just\n                                     * add the current node id to the path and not take\n                                     * the transition which essentially ends the path.\n                                     */\n                                    // add the node id to the path\n                                    path.push(nodeId);\n\n                                    // add the path to the all paths array\n                                    allPaths.push(path);\n                                }\n                            }\n                        }\n                    }\n\n                    if (pathSoFar.length > 0) {\n                        // get the last node id\n                        var lastNodeId = pathSoFar[pathSoFar.length - 1];\n\n                        // check if the last node id is a group id\n                        if (this.isGroupNode(lastNodeId)) {\n                            /*\n                             * the last node id is a group id so we will remove it\n                             * since we are moving back up the path as we traverse\n                             * the nodes depth first\n                             */\n                            pathSoFar.pop();\n                        }\n                    }\n\n                    /*\n                     * remove the latest node id (this will be a step node id)\n                     * since we are moving back up the path as we traverse the\n                     * nodes depth first\n                     */\n                    pathSoFar.pop();\n                }\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n\n                /*\n                 * add the node id to the path so far so we can later check\n                 * which nodes are already in the path to prevent looping\n                 * back in the path\n                 */\n                pathSoFar.push(nodeId);\n\n                // get the group node\n                var groupNode = this.getNodeById(nodeId);\n\n                if (groupNode != null) {\n                    var startId = groupNode.startId;\n\n                    if (startId == null || startId == \"\") {\n                        // there is no start id so we will take the transition from the group\n                        // TODO? there is no start id so we will loop through all the child nodes\n\n                        // get the transitions from the group\n                        var transitions = this.getTransitionsByFromNodeId(groupNode.id);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    // get the paths from the to node to the end of the project\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // there is a start id so we will traverse it\n\n                        // get the paths from the start id to the end of the project\n                        var allPathsFromToNode = this.getAllPaths(pathSoFar, startId, includeGroups);\n\n                        if (allPathsFromToNode != null) {\n                            // loop through all the paths from the to node\n                            for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                // get a path\n                                var tempPath = allPathsFromToNode[a];\n\n                                // prepend the current node id to the path\n                                tempPath.unshift(nodeId);\n\n                                // add the path to our collection of paths\n                                allPaths.push(tempPath);\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * remove the latest node id since we are moving back\n                 * up the path as we traverse the nodes depth first\n                 */\n                pathSoFar.pop();\n            }\n        }\n\n        return allPaths;\n    };\n\n    /**\n     * Consolidate all the paths into a linear list of node ids\n     * @param paths an array of paths. each path is an array of node ids.\n     * @return an array of node ids that have been properly ordered\n     */\n    consolidatePaths(paths) {\n        var consolidatedPath = [];\n\n        if (paths != null) {\n\n            /*\n             * continue until all the paths are empty. as we consolidate\n             * node ids, we will remove them from the paths. once all the\n             * paths are empty we will be done consolidating the paths.\n             */\n            while(!this.arePathsEmpty(paths)) {\n\n                // start with the first path\n                var currentPath = this.getNonEmptyPathIndex(paths);\n\n                // get the first node id in the current path\n                var nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n\n                if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                    // the first node ids in all the paths are the same\n\n                    // remove the node id from all the paths\n                    this.removeNodeIdFromPaths(nodeId, paths);\n\n                    // add the node id to our consolidated path\n                    consolidatedPath.push(nodeId);\n                } else {\n                    // not all the top node ids are the same which means we have branched\n\n                    // get all the paths that contain the node id\n                    var pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n                    if (pathsThatContainNodeId != null) {\n                        if (pathsThatContainNodeId.length === 1) {\n                            // only the current path we are on has the node id\n\n                            // remove the node id from the path\n                            this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n                            // add the node id to our consolidated path\n                            consolidatedPath.push(nodeId);\n                        } else {\n                            // there are multiple paths that have this node id\n\n                            // consume all the node ids up to the given node id\n                            var consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n                            // remove the node id from the paths\n                            this.removeNodeIdFromPaths(nodeId, paths);\n\n                            // add the node id to the end of the consumed path\n                            consumedPath.push(nodeId);\n\n                            // add the consumed path to our consolidated path\n                            consolidatedPath = consolidatedPath.concat(consumedPath);\n                        }\n                    }\n                }\n\n            }\n        }\n\n        return consolidatedPath;\n    };\n\n    /**\n     * Consume the node ids in the paths until we get to the given node id\n     * @param paths the paths to consume\n     * @param nodeId the node id to stop consuming at\n     * @return an array of node ids that we have consumed\n     */\n    consumePathsUntilNodeId(paths, nodeId) {\n        var consumedNodeIds = [];\n\n        if (paths != null && nodeId != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id to stop consuming at\n                if (path != null && path.indexOf(nodeId) != -1) {\n                    /*\n                     * the path does contain the node id to stop consuming at\n                     * so we will consume the node ids in this path until\n                     * we get to the given node id to stop consuming at\n                     */\n\n                    // loop through the node ids in the path\n                    for (var x = 0; x < path.length; x++) {\n\n                        // get a node id\n                        var tempNodeId = path[x];\n\n                        if (nodeId === tempNodeId) {\n                            /*\n                             * the node id is the same as the one we need to\n                             * stop consuming at so we will stop looking\n                             * at this path\n                             */\n                            break;\n                        } else {\n                            /*\n                             * the node id is not the one that we need to stop consuming at\n                             * so we will consume it\n                             */\n\n                            // get all the paths that contain the node id\n                            var pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n                            if (pathsThatContainNodeId.length === 1) {\n                                // there is only one path with this node id\n\n                                // remove the node id from the path\n                                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            } else {\n                                // there are multiple paths with this node id\n\n                                // tempNodeId must come before nodeId\n\n                                var pathsToConsume = [];\n\n                                // loop through all the paths that contain the node id\n                                for (var g = 0; g < pathsThatContainNodeId.length; g++) {\n\n                                    // get a path that contains the node id\n                                    var pathThatContainsNodeId = pathsThatContainNodeId[g];\n\n                                    // get the index of the node id we want to remove\n                                    var tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                                    // get the index of the node id we want to stop consuming at\n                                    var nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                                    /*\n                                     * check if the node id we want to remove comes before\n                                     * the node id we want to stop consuming at. we need to\n                                     * do this to prevent an infinite loop. an example of\n                                     * when this can happen is if there are two paths\n                                     *\n                                     * path1 = 1, 2, 3, 4, 5\n                                     * path2 = 1, 2, 4, 3, 5\n                                     *\n                                     * as we consume path1 we will need to consume 3. in order to\n                                     * consume 3, we must consume consume up to 3 in path2.\n                                     * in order to consume up to 3 in path2 we must consume 4.\n                                     * in order to consume 4, we must consume everything before\n                                     * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                                     * this means we need to consume 3 which brings us back up\n                                     * to the top of this paragraph creating an infinite loop.\n                                     *\n                                     * this check below will prevent infinite loops by only\n                                     * adding paths that have the tempNodeId come before the\n                                     * nodeId to stop consuming at.\n                                     */\n                                    if (tempNodeIdIndex < nodeIdIndex) {\n                                        pathsToConsume.push(pathThatContainsNodeId);\n                                    }\n                                }\n\n                                /*\n                                 * take the paths that contain the given node id and consume\n                                 * the paths until the given node id\n                                 */\n                                var tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                                // remove the node id from the paths that contain it\n                                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                                // add the temp consumed node ids to our consumed node ids array\n                                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        return consumedNodeIds;\n    };\n\n    /**\n     * Get the path at the given index and get the first node id in\n     * the path\n     * @param paths an array of paths. each path is an array of node ids\n     * @param index the index of the path we want\n     * @return the first node in the given path\n     */\n    getFirstNodeIdInPathAtIndex(paths, index) {\n        var nodeId = null;\n\n        if (paths != null && index != null) {\n            // get the path at the given index\n            var path = paths[index];\n\n            if (path != null && path.length > 0) {\n                // get the first node id in the path\n                nodeId = path[0];\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Remove the node ifrom the paths\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     */\n    removeNodeIdFromPaths(nodeId, paths) {\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove the node id from the path\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     * @param pathIndex the path to remove from\n     */\n    removeNodeIdFromPath(nodeId, paths, pathIndex) {\n\n        if (nodeId != null && paths != null && pathIndex != null) {\n\n            // get the path at the given index\n            var path = paths[pathIndex];\n\n            if (path != null) {\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a ndoe id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if the first node ids in the paths are the same\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths have the same first node id\n     */\n    areFirstNodeIdsInPathsTheSame(paths) {\n        var result = true;\n\n        var nodeId = null;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // get the first node id in the path\n                var tempNodeId = path[0];\n\n                if (nodeId == null) {\n                    /*\n                     * this is the first path we have looked at so we will\n                     * remember the node id\n                     */\n                    nodeId = tempNodeId;\n                } else if (nodeId != tempNodeId) {\n                    /*\n                     * the node id does not match the first node id from a\n                     * previous path so the paths do not all have the same\n                     * first node id\n                     */\n                    result = false;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if all the paths are empty\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths are empty\n     */\n    arePathsEmpty(paths) {\n        var result = true;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the length of the path\n                    if (path.length !== 0) {\n                        // the path is not empty\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the paths that contain the node id\n     * @param nodeId the node id we are looking for\n     * @param paths an array of paths. each path is an array of node ids\n     * @return an array of paths that contain the given node id\n     */\n    getPathsThatContainNodeId(nodeId, paths) {\n        var pathsThatContainNodeId = [];\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id\n                if (path.indexOf(nodeId) != -1) {\n                    /*\n                     * add the path to the array of paths that contain\n                     * the node id\n                     */\n                    pathsThatContainNodeId.push(path);\n                }\n            }\n        }\n\n        return pathsThatContainNodeId;\n    };\n\n    /**\n     * Get a non empty path index. It will loop through the paths and\n     * return the index of the first non empty path.\n     * @param paths an array of paths. each path is an array of node ids\n     * @return the index of the path that is not empty\n     */\n    getNonEmptyPathIndex(paths) {\n        var index = null;\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // check the length of the path\n                if (path.length !== 0) {\n                    // the path is not empty so we will return this index\n                    index = p;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get the branches in the project\n     */\n    getBranches() {\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the paths in the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // find the branches in the project from the paths\n        var branches = this.findBranches(allPaths);\n\n        return branches;\n    };\n\n    /**\n     * Find the branches in the project\n     * @param paths all the possible paths through the project\n     * @return an array of branch objects. each branch object contains\n     * the branch start point, the branch paths, and the branch\n     * end point\n     */\n    findBranches(paths) {\n        var branches = [];\n\n        var previousNodeId = null;\n\n        /*\n         * continue until all the paths are empty. we will remove\n         * node ids from the paths as we traverse the paths to find\n         * the branches\n         */\n        while (!this.arePathsEmpty(paths)) {\n\n            // get the first node id in the first path\n            var nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n            if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                // the first node ids in all the paths are the same\n\n                // remove the node id from all the paths\n                this.removeNodeIdFromPaths(nodeId, paths);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nodeId;\n            } else {\n                // not all the top node ids are the same which means we have branched\n\n                // create a branch object\n                var branchMetaObject = this.createBranchMetaObject(previousNodeId);\n                branchMetaObject.branchStartPoint = previousNodeId;\n\n                // find the branch end point\n                var nextCommonNodeId = this.findNextCommonNodeId(paths);\n                branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n                // get the branch paths\n                var branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n                branchPaths = this.removeDuplicatePaths(branchPaths);\n                branchMetaObject.branchPaths = branchPaths;\n\n                // add the branch object to our array\n                branches.push(branchMetaObject);\n\n                // trim the paths so that they start at the branch end point\n                this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nextCommonNodeId;\n            }\n        }\n\n        return branches;\n    };\n\n    /**\n     * Create a branch meta object that will contain the branch start\n     * point, branch paths, and branch end point\n     * @return an object that contains a branch start point, branch paths,\n     * and a branch end point\n     */\n    createBranchMetaObject() {\n        var branchMetaObject = {};\n\n        branchMetaObject.branchStartPoint = null;\n        branchMetaObject.branchPaths = [];\n        branchMetaObject.branchEndPoint = null;\n\n        return branchMetaObject;\n    };\n\n    /**\n     * Find the next common node id in all the paths\n     * @param paths the paths to find the common node id in\n     * @return a node id that is in all the paths or null\n     * if there is no node id that is in all the paths\n     */\n    findNextCommonNodeId(paths) {\n        var nextCommonNodeId = null;\n        var subPaths = [];\n\n        if (paths != null) {\n            if (paths.length > 0) {\n                // get the first path\n                var path = paths[0];\n\n                // loop through all the node ids in the first path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    // check if the node id is in all the paths\n                    if (this.allPathsContainNodeId(paths, tempNodeId)) {\n                        /*\n                         * the node id is in all the paths so we have found\n                         * what we were looking for\n                         */\n                        nextCommonNodeId = tempNodeId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextCommonNodeId;\n    };\n\n    /**\n     * Check if all the paths contain the node id\n     * @param paths an array of paths. each path contains an array of node ids\n     * @param nodeId the node id that we will check is in all the paths\n     * @return whether the node id is in all the paths\n     */\n    allPathsContainNodeId(paths, nodeId) {\n        var result = false;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // get the index of the node id in the path\n                var index = path.indexOf(nodeId);\n\n                if (index == -1) {\n                    // the node id is not in the path\n                    result = false;\n                    break;\n                } else {\n                    // the node id is in the path\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Trim the paths up to the given node id so that the paths will contain\n     * the given node id and all the node ids after it. This function will\n     * modify the paths.\n     * @param paths the paths to trim\n     * @param nodeId the node id to trim up to\n     */\n    trimPathsUpToNodeId(paths, nodeId) {\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * trim the path to the end which will make\n                         * the path empty\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * trim the path up to the node id index. this will\n                     * modify the path array.\n                     */\n                    path.splice(0, index);\n                }\n            }\n        }\n    };\n\n\n    /**\n     * Extract the paths up to a given node id. This will be used to\n     * obtain branch paths.\n     * @param paths the paths to extract from\n     * @param nodeId the node id to extract up to\n     * @return paths that go up to but do not include the node id\n     */\n    extractPathsUpToNodeId(paths, nodeId) {\n        var extractedPaths = [];\n\n        if (paths != null) {\n            // loop through the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * extract up to the end of the path\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * get the path up to the node id index. this does\n                     * not modify the path array.\n                     */\n                    var extractedPath = path.slice(0, index);\n\n                    // add the\n                    extractedPaths.push(extractedPath);\n                }\n            }\n        }\n\n        return extractedPaths;\n    };\n\n    /**\n     * Removes duplicate paths\n     * @param paths an array of paths. each path contains an array of node ids\n     * @return an array of unique paths\n     */\n    removeDuplicatePaths(paths) {\n        var uniquePaths = [];\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                var isPathInUniquePaths = false;\n\n                // loop through all the unique paths so far\n                for (var u = 0; u < uniquePaths.length; u++) {\n                    // get a unique path\n                    var uniquePath = uniquePaths[u];\n\n                    // check if the paths are equal\n                    if (this.pathsEqual(path, uniquePath)) {\n                        // the paths are equal\n                        isPathInUniquePaths = true;\n                    }\n                }\n\n                if (!isPathInUniquePaths) {\n                    // the path is not equal to any paths in the unique\n                    // paths array so we will add it to the unique paths array\n                    uniquePaths.push(path);\n                }\n            }\n        }\n\n        return uniquePaths;\n    };\n\n    /**\n     * Check if two paths are equal\n     * @param path1 an array of node ids\n     * @param path2 an array of node ids\n     * @return whether the two paths contain the same node ids\n     * in the same order\n     */\n    pathsEqual(path1, path2) {\n        var result = false;\n\n        if (path1 != null && path2 != null) {\n\n            // check if the paths are the same length\n            if (path1.length === path2.length) {\n                result = true;\n\n                // loop through each element of the first path\n                for (var x = 0; x < path1.length; x++) {\n                    // get the node id from the first path\n                    var path1NodeId = path1[x];\n\n                    // get the node id from the second path\n                    var path2NodeId = path2[x];\n\n                    // check if the node ids are the same\n                    if (path1NodeId !== path2NodeId) {\n                        // the node ids are not the same to the paths are not equal\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id is in any branch\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return whether the node id is in any branch\n     */\n    isNodeIdInABranch(branches, nodeId) {\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branch objects\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch object\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths for this branch object\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // check if the node id is in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    // the node id is in this branch path\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Get the branch paths that a node id is in\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return an array of the branch paths that the node id is in\n     */\n    getBranchPathsByNodeId(branches, nodeId) {\n        var branchPathsIn = [];\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // get the index of the node id in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    /*\n                                     * the node is in this branch path so we will\n                                     * add the branch path to our array\n                                     */\n                                    branchPathsIn.push(branchPath);\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathsIn;\n    }\n\n    /**\n     * Get the component by node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n     */\n    getComponentByNodeIdAndComponentId(nodeId, componentId) {\n        var component = null;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n\n        }\n\n        return component;\n    };\n\n    /**\n     * Returns the position of the component in the node by node id and component id, 0-indexed.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component's position or -1 if nodeId or componentId are null or doesn't exist in the project.\n     */\n    getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n        var componentPosition = -1;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        componentPosition = c;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return componentPosition;\n    };\n\n    /**\n     * Get the components in a node\n     * @param nodeId the node id\n     * @returns an array of components or empty array if nodeId is null or doesn't exist in the project.\n     * if the node exists but doesn't have any components, returns an empty array.\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the components\n                if (node.components != null) {\n                    components = node.components;\n                }\n            }\n        }\n\n        return components;\n    };\n\n    getNodeContentByNodeId(nodeId) {\n        var nodeContent = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                nodeContent = node;\n            }\n        }\n\n        return nodeContent;\n    };\n\n    /**\n     * Replace a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param component the new component\n     */\n    replaceComponent(nodeId, componentId, component) {\n\n        if (nodeId != null && componentId != null && component != null) {\n\n            // get all the components for the node\n            var components = this.getComponentsByNodeId(nodeId);\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        if (tempComponent.id === componentId) {\n                            // the component id matches the one we want so we will replace it\n                            components[c] = component;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a new group\n     * @param title the title of the group\n     * @returns the group object\n     */\n    createGroup(title) {\n\n        // get the next available group id\n        var newGroupId = this.getNextAvailableGroupId();\n\n        // create the group object\n        var newGroup = {};\n        newGroup.id = newGroupId;\n        newGroup.type = 'group';\n        newGroup.title = title;\n        newGroup.startId = '';\n        newGroup.ids = [];\n\n        return newGroup;\n    };\n\n    /**\n     * Create a new node\n     * @param title the title of the node\n     * @returns the node object\n     */\n    createNode(title) {\n\n        // get the next available node id\n        var newNodeId = this.getNextAvailableNodeId();\n\n        // create the node object\n        var newNode = {};\n        newNode.id = newNodeId;\n        newNode.title = title;\n        newNode.type = 'node';\n        newNode.constraints = [];\n        newNode.transitionLogic = {};\n        newNode.transitionLogic.transitions = [];\n\n        newNode.showSaveButton = true;\n        newNode.showSubmitButton = false;\n        newNode.components = [];\n\n        return newNode;\n    };\n\n    /**\n     * Create a node inside the group\n     * @param node the new node\n     * @param nodeId the node id of the group to create the node in\n     */\n    createNodeInside(node, nodeId) {\n        // add the node to the project\n        this.addNode(node);\n\n        // add the node to our mapping of node id to node\n        this.setIdToNode(node.id, node);\n\n        // create the transitions for the node\n        this.insertNodeInsideInTransitions(node.id, nodeId);\n\n        // add the node to the group\n        this.insertNodeInsideInGroups(node.id, nodeId);\n    }\n\n    /**\n     * Create a node after the given node id\n     * @param node the new node\n     * @param nodeId the node to add after\n     */\n    createNodeAfter(node, nodeId) {\n\n        // add the node to the project\n        this.addNode(node);\n\n        // add the node to our mapping of node id to node\n        this.setIdToNode(node.id, node);\n\n        // insert the new node id into the array of children ids\n        this.insertNodeAfterInGroups(node.id, nodeId);\n\n        // create the transition to the node\n        this.insertNodeAfterInTransitions(node, nodeId);\n\n        if (this.isGroupNode(node.id)) {\n            /*\n             * we are creating a group node so we will update/create the\n             * transitions that traverse from the previous group to this group\n             */\n\n            var oldToGroupIds = [];\n\n            // get the transitions that come out of the previous group\n            var transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n\n            if (transitionsFromGroup != null) {\n\n                /*\n                 * loop through all the transitions that come out of the previous group\n                 * and get the node ids that the group transitions to\n                 */\n                for (var t = 0; t < transitionsFromGroup.length; t++) {\n                    var transitionFromGroup = transitionsFromGroup[t];\n\n                    if (transitionFromGroup != null) {\n                        var toNodeId = transitionFromGroup.to;\n\n                        if (toNodeId != null) {\n                            oldToGroupIds.push(toNodeId);\n                        }\n                    }\n                }\n            }\n\n            var fromGroupId = nodeId;\n            var oldToGroupIds = oldToGroupIds;\n            var newToGroupId = node.id;\n\n            /*\n             * make the transitions point to the new group and make the new\n             * group transition to the old group\n             */\n            this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n        }\n    }\n\n    /**\n     * Insert the node after the given node id in the group's\n     * array of children ids\n     * @param nodeIdToInsert the node id we want to insert\n     * @param nodeIdToInsertAfter the node id we want to insert after\n     */\n    insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n        var groupNodes = this.getGroupNodes();\n\n        if (groupNodes != null) {\n\n            // loop through the groups\n            for (var g = 0; g < groupNodes.length; g++) {\n                var group = groupNodes[g];\n\n                if (group != null) {\n                    var ids = group.ids;\n\n                    if (ids != null) {\n\n                        // loop through the children ids\n                        for (var i = 0; i < ids.length; i++) {\n                            var id = ids[i];\n\n                            if (nodeIdToInsertAfter === id) {\n                                // we have found the node id we want to insert after\n\n                                // insert the new node id\n                                ids.splice(i + 1, 0, nodeIdToInsert);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node after another node\n     * @param node the node to insert\n     * @param nodeId the node id to insert after\n     */\n    insertNodeAfterInTransitions(node, nodeId) {\n\n        // get the node that will end up before\n        var previousNode = this.getNodeById(nodeId);\n\n        if (previousNode != null) {\n\n            if (previousNode.transitionLogic == null) {\n                previousNode.transitionLogic = {};\n                previousNode.transitionLogic.transitions = [];\n            }\n\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            if (this.isGroupNode(node.id)) {\n                /*\n                 * the node we are inserting is a group so we will update\n                 * the transitions of its children so that they transition\n                 * to the correct node\n                 */\n                this.updateChildrenTransitionsForMovingGroup(node, nodeId);\n            }\n\n            var previousNodeTransitionLogic = previousNode.transitionLogic;\n\n            if (previousNodeTransitionLogic != null) {\n\n                // get the transitions from the before node\n                var transitions = previousNodeTransitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // make a copy of the transitions\n                    var transitionsJSONString = angular.toJson(transitions);\n                    var transitionsCopy = angular.fromJson(transitionsJSONString);\n\n                    // set the transitions from the before node into the inserted node\n                    node.transitionLogic.transitions = transitionsCopy;\n                }\n            }\n\n            if (node.transitionLogic.transitions.length == 0) {\n                /*\n                 * The node does not have any transitions so we will look for\n                 * a transition on the parent group. If the parent has a\n                 * transition we will use it for the node.\n                 */\n\n                // get the parent group\n                var parentGroupId = this.getParentGroupId(nodeId);\n\n                // get the parent transitions\n                var parentTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                if (parentTransitions != null) {\n\n                    // loop through all the parent transitions\n                    for (var p = 0; p < parentTransitions.length; p++) {\n                        var parentTransition = parentTransitions[p];\n\n                        var newTransition = {};\n\n                        if (parentTransition != null) {\n                            var toNodeId = parentTransition.to;\n\n                            if (this.isGroupNode(toNodeId)) {\n                                // the transition is to a group\n\n                                // get the start id of the group\n                                var startId = this.getGroupStartId(toNodeId);\n\n                                if (startId == null || startId == '') {\n                                    // there is no start id so we will just use the group id\n                                    newTransition.to = toNodeId;\n                                } else {\n                                    // there is a start id so we will use it as the to node\n                                    newTransition.to = startId;\n                                }\n                            } else {\n                                // the tranisition is to a step\n                                newTransition.to = toNodeId;\n                            }\n                        }\n\n                        // add the new transition to the node\n                        node.transitionLogic.transitions.push(newTransition);\n                    }\n                }\n            }\n\n            var newNodeId = node.id;\n\n            // TODO handle branching case\n\n            // remove the transitions from the before node\n            previousNode.transitionLogic.transitions = [];\n\n            var transitionObject = {};\n            transitionObject.to = newNodeId;\n\n            // make the before node point to the new node\n            previousNode.transitionLogic.transitions.push(transitionObject);\n        }\n    }\n\n    /**\n     * Insert a node into a group\n     * @param nodeIdToInsert the node id to insert\n     * @param nodeIdToInsertInside the node id of the group we will insert into\n     */\n    insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the group we will insert into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (group != null) {\n            var ids = group.ids;\n\n            if (ids != null) {\n\n                // insert the node node id into the beginning of the child ids\n                ids.splice(0, 0, nodeIdToInsert);\n\n                // set the inserted node id as the start id\n                group.startId = nodeIdToInsert;\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node into a group\n     * @param nodeIdToInsert node id that we will insert\n     * @param nodeIdToInsertInside the node id of the group we are inserting into\n     */\n    insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the node we are inserting\n        var nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n        // get the group we are inserting into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (this.isGroupNode(nodeIdToInsert)) {\n            /*\n             * the node we are inserting is a group so we will update\n             * the transitions of its children so that they transition\n             * to the correct node\n             */\n            this.updateChildrenTransitionsForMovingGroup(nodeToInsert, null);\n        }\n\n        /*\n         * since we are inserting a node into a group, the node will become\n         * the first node in the group. this means we need to update any nodes\n         * that point to the old start id and make them point to the node\n         * we are inserting.\n         */\n        if (nodeToInsert != null && group != null) {\n\n            // get the start node\n            var startId = group.startId;\n\n            // get transitions that point to the start node\n            var previousNodes = this.getNodesByToNodeId(startId);\n\n            if (previousNodes == null || previousNodes.length == 0) {\n                // there are no transitions to the start node\n\n                // find all the groups that point to this group\n                var previousGroups = this.getGroupNodesByToNodeId(nodeIdToInsertInside);\n\n                // loop through all the groups that point to this group\n                for (var g = 0; g < previousGroups.length; g++) {\n                    var previousGroup = previousGroups[g];\n\n                    if (previousGroup != null) {\n                        // get the nodes that do not have a transition in the previous group\n                        var lastNodesInGroup = this.getLastNodesInGroup(previousGroup.id);\n\n                        for (var n = 0; n < lastNodesInGroup.length; n++) {\n                            // get a node that does not have a transition\n                            var node = lastNodesInGroup[n];\n\n                            // add a transition from the node to the node we are inserting\n                            this.addToTransition(node, nodeIdToInsert);\n                        }\n                    }\n                }\n            } else {\n                // there are transitions to the start node\n\n                for (var p = 0; p < previousNodes.length; p++) {\n                    var previousNode = previousNodes[p];\n\n                    if (previousNode != null) {\n                        // change the transition to point to the node we are inserting\n                        this.updateToTransition(previousNode, startId, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * update all the transitions that point to the group and change\n             * them to point to the new start id\n             */\n            var nodesThatTransitionToGroup = this.getNodesByToNodeId(nodeIdToInsertInside);\n\n            if (nodesThatTransitionToGroup != null) {\n                for (var n = 0; n < nodesThatTransitionToGroup.length; n++) {\n                    var nodeThatTransitionsToGroup = nodesThatTransitionToGroup[n];\n\n                    if (!this.isGroupNode(nodeThatTransitionsToGroup.id)) {\n                        this.updateToTransition(nodeThatTransitionsToGroup, nodeIdToInsertInside, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * create a transition from the node we are inserting to the node that\n             * was previously the start node\n             */\n            if (startId != null && startId != '') {\n                // there is a start id\n\n                var startNode = this.getNodeById(startId);\n\n                if (startNode != null) {\n                    // the group has a start node which will become the transition to node\n\n                    if (nodeToInsert.transitionLogic == null) {\n                        nodeToInsert.transitionLogic = {};\n                    }\n\n                    if (nodeToInsert.transitionLogic.transitions == null) {\n                        nodeToInsert.transitionLogic.transitions = [];\n                    }\n\n                    /*\n                     * make the inserted node transition to the previous start node\n                     */\n                    var transitionObject = {};\n                    transitionObject.to = startId;\n                    nodeToInsert.transitionLogic.transitions.push(transitionObject);\n                }\n            }\n\n            //check if the node we inserted has any transitions now\n            var transitions = this.getTransitionsByFromNodeId(nodeIdToInsert);\n\n            if (transitions == null || transitions.length == 0) {\n                /*\n                 * the node doesn't have any transitions so we will see if\n                 * the parent group transitions to anything and use that\n                 * transition\n                 */\n\n                // get the transitions from the parent\n                var parentTransitions = this.getTransitionsByFromNodeId(nodeIdToInsertInside);\n\n                if (parentTransitions != null) {\n\n                    // loop through all the parent transitions\n                    for (var t = 0; t < parentTransitions.length; t++) {\n                        var parentTransition = parentTransitions[t];\n\n                        if (parentTransition != null) {\n                            var toNodeId = parentTransition.to;\n\n                            if (this.isGroupNode(toNodeId)) {\n                                // the to node is a group\n\n                                // get the to group\n                                var nextGroup = this.getNodeById(toNodeId);\n\n                                if (nextGroup != null) {\n\n                                    // get the start id of the to group\n                                    var startId = nextGroup.startId;\n\n                                    if (startId == null || startId == '') {\n                                        // there is no start id so we will just transition to the group\n                                        this.addToTransition(nodeToInsert, toNodeId);\n                                    } else {\n                                        // there is a start id so we will transition to that\n                                        this.addToTransition(nodeToInsert, startId);\n                                    }\n                                }\n                            } else {\n                                // the to node is not a group\n\n                                /*\n                                 * we will add a transition from the node we are inserting to\n                                 * to that node\n                                 */\n                                this.addToTransition(nodeToInsert, toNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a transition to a node\n     * @param node the node we are adding a transition to\n     * @param toNodeId the node id we going to transition to\n     * @param criteria (optional) a criteria object specifying\n     * what needs to be satisfied in order to use this transition\n     */\n    addToTransition(node, toNodeId, criteria) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transition = {};\n\n            // set the to node id\n            transition.to = toNodeId;\n\n            if (criteria != null) {\n                // set the criteria\n                transition.criteria = criteria;\n            }\n\n            // add the transition to the node's transitions\n            node.transitionLogic.transitions.push(transition);\n        }\n    }\n\n    /**\n     * Update the to value of aa transition\n     * @param node the node to update\n     * @param oldToNodeId the previous to node id\n     * @param newToNodeId the new to node id\n     */\n    updateToTransition(node, oldToNodeId, newToNodeId) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transitions = node.transitionLogic.transitions;\n\n            // loop through all the transitions\n            for (var t = 0; t < transitions.length; t++) {\n                var transition = transitions[t];\n\n                if (transition != null) {\n                    var toNodeId = transition.to;\n\n                    if (oldToNodeId === toNodeId) {\n                        // we have found the transition we want to update\n\n                        // update the to node id\n                        transition.to = newToNodeId;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the nodes in a group that do not have transitions\n     * @param groupId the group id\n     * @returns the nodes in the group that do not have transitions\n     */\n    getLastNodesInGroup(groupId) {\n        var lastNodes = [];\n\n        if (groupId != null) {\n            var group = this.getNodeById(groupId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            var child = this.getNodeById(childId);\n\n                            if (child != null) {\n                                var transitionLogic = child.transitionLogic;\n\n                                if (transitionLogic != null) {\n\n                                    // get the transitions\n                                    var transitions = transitionLogic.transitions;\n\n                                    if (transitions == null || transitions.length == 0) {\n                                        // this child does not have any transitions\n                                        lastNodes.push(child);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return lastNodes;\n    }\n\n    /**\n     * Get the next available group id\n     * @returns the next available group id\n     */\n    getNextAvailableGroupId() {\n\n        // get all the group ids\n        var groupIds = this.getGroupIds();\n\n        var largestGroupIdNumber = null;\n\n        // loop through all the existing group ids\n        for (var g = 0; g < groupIds.length; g++) {\n            var groupId = groupIds[g];\n\n            // get the number from the group id e.g. the number of 'group2' would be 2\n            var groupIdNumber = groupId.replace('group', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(groupIdNumber)) {\n\n                groupIdNumber = parseInt(groupIdNumber);\n\n                // update the largest group id number if necessary\n                if (largestGroupIdNumber == null) {\n                    largestGroupIdNumber = groupIdNumber;\n                } else if (groupIdNumber > largestGroupIdNumber) {\n                    largestGroupIdNumber = groupIdNumber;\n                }\n            }\n        }\n\n        // create the next available group id\n        var nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n\n        return nextAvailableGroupId;\n    }\n\n    /**\n     * Get all the group ids\n     * @returns an array with all the group ids\n     */\n    getGroupIds() {\n\n        var groupIds = [];\n\n        var groupNodes = this.groupNodes;\n\n        // loop through all the group nodes\n        for (var g = 0; g < groupNodes.length; g++) {\n            var group = groupNodes[g];\n\n            if (group != null) {\n                var groupId = group.id;\n\n                if (groupId != null) {\n                    // add the group id\n                    groupIds.push(groupId);\n                }\n            }\n        }\n\n        return groupIds;\n    }\n\n    /**\n     * Get the next available node id\n     * @returns the next available node id\n     */\n    getNextAvailableNodeId() {\n\n        // get all the node ids\n        var nodeIds = this.getNodeIds();\n\n        var largestNodeIdNumber = null;\n\n        // loop through all the existing node ids\n        for (var n = 0; n < nodeIds.length; n++) {\n            var nodeId = nodeIds[n];\n\n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = nodeId.replace('node', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n\n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n\n        // create the next available node id\n        var nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n\n        return nextAvailableNodeId;\n    }\n\n    /**\n     * Get all the node ids from steps (not groups)\n     * @returns an array with all the node ids\n     */\n    getNodeIds() {\n\n        var nodeIds = [];\n\n        var nodes = this.applicationNodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n                    nodeIds.push(nodeId);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Move nodes inside a group node\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id of the group we are moving the nodes inside\n     */\n    moveNodesInside(nodeIds, nodeId) {\n\n        // loop thorugh all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var tempNode = this.getNodeById(tempNodeId);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(tempNode, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                this.moveToActive(tempNode);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(tempNode, nodeId);\n            }\n\n            /*\n             * remember the node id so we can put the next node (if any)\n             * after this one\n             */\n            nodeId = tempNode.id;\n        }\n    }\n\n    /**\n     * Move nodes after a certain node id\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id we will put the moved nodes after\n     */\n    moveNodesAfter(nodeIds, nodeId) {\n\n        // loop through all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var node = this.getNodeById(tempNodeId);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(node, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                // move the node to the active nodes array\n                this.moveToActive(node);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(node, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = node.id;\n        }\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesInside(nodeIds, nodeId) {\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            if (n == 0) {\n                // this is the first node we are copying so we will insert it\n                // into the beginning of the group\n                this.createNodeInside(newNode, nodeId);\n            } else {\n                // this is not the first node we are copying so we will insert\n                // it after the node we previously inserted\n                this.createNodeAfter(newNode, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n        }\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesAfter(nodeIds, nodeId) {\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            this.createNodeAfter(newNode, nodeId);\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n        }\n    }\n\n    /**\n     * Copy the node with the specified nodeId\n     * @param nodeId the node id to copy\n     * @return copied node\n     */\n    copyNode(nodeId) {\n        var node = this.getNodeById(nodeId);\n\n        var nodeCopy = JSON.parse(JSON.stringify(node));\n        nodeCopy.id = this.getNextAvailableNodeId();\n        nodeCopy.transitionLogic = {};  // clear transition logic\n        nodeCopy.constraints = [];  // clear constraints\n        for (var c = 0; c < nodeCopy.components.length; c++) {\n            var component = nodeCopy.components[c];\n            var componentType = component.type;\n            // get the service for the node type \n            var service = this.$injector.get(componentType + 'Service'); \n            // copy the component\n            var componentCopy = service.copyComponent(component);\n            if (component.maxScore != null) {\n                // Also copy the max score if exists in original node\n                componentCopy.maxScore = component.maxScore;\n            }\n            if (component.showPreviousWorkPrompt != null) {\n                // Also copy the showPreviousWorkPrompt if exists in original node\n                componentCopy.showPreviousWorkPrompt = component.showPreviousWorkPrompt;\n            }\n            if (component.showPreviousWorkNodeId != null) {\n                // Also copy the showPreviousWorkNodeId if exists in original node\n                componentCopy.showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n            }\n            if (component.showPreviousWorkComponentId != null) {\n                // Also copy the showPreviousWorkComponentId if exists in original node\n                componentCopy.showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n            }\n\n            nodeCopy.components[c] = componentCopy;\n        }\n        return nodeCopy;\n    }\n\n    /**\n     * Delete a node\n     * @param nodeId the node id\n     */\n    deleteNode(nodeId) {\n\n        if (this.isGroupNode(nodeId)) {\n            // the node is a group node so we will also remove all of its children\n            var group = this.getNodeById(nodeId);\n\n            // TODO check if the child is in another group, if so do not remove\n\n            if (group != null) {\n                var ids = group.ids;\n\n                // loop through all the children\n                for (var i = 0; i < ids.length; i++) {\n                    var id = ids[i];\n\n                    // remove the child\n                    this.removeNodeIdFromTransitions(id);\n                    this.removeNodeIdFromGroups(id);\n                    this.removeNodeIdFromNodes(id);\n\n                    /*\n                     * move the counter back because we have removed a child\n                     * from the parent group's array of child ids so all of\n                     * the child ids were shifted back one and the next child\n                     * we want will be at i--\n                     */\n                    i--;\n                }\n            }\n        }\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        // check if we need to update the start id of the parent group\n        if (parentGroup != null) {\n\n            /*\n             * the node is the start node of the parent group so we need\n             * to update the start id of the parent group to point to\n             * the next node\n             */\n            if (nodeId === parentGroup.startId) {\n\n                var hasSetNewStartId = false;\n\n                // get the node\n                var node = this.getNodeById(nodeId);\n\n                if (node != null) {\n                    var transitionLogic = node.transitionLogic;\n\n                    if (transitionLogic != null) {\n                        var transitions = transitionLogic.transitions;\n\n                        if (transitions != null && transitions.length > 0) {\n                            var transition = transitions[0];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (toNodeId != null) {\n\n                                    // check that the to node is in the same group\n                                    if (this.isNodeInGroup(toNodeId, parentGroup.id)) {\n\n                                        // update the parent group start id\n                                        parentGroup.startId = toNodeId;\n                                        hasSetNewStartId = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (!hasSetNewStartId) {\n                    parentGroup.startId = '';\n                }\n            }\n        }\n\n        // remove the node\n        this.removeNodeIdFromTransitions(nodeId);\n        this.removeNodeIdFromGroups(nodeId);\n        this.removeNodeIdFromNodes(nodeId);\n\n        if (parentGroup != null) {\n            this.recalculatePositionsInGroup(parentGroup.id);\n        }\n    }\n\n    /**\n     * Update the transitions to handle removing a node\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromTransitions(nodeId) {\n\n        // get the node we are removing\n        var nodeToRemove = this.getNodeById(nodeId);\n\n        // get all the nodes that have a transition to the node we are removing\n        var nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n        // get the transitions of the node we are removing\n        var nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n        var nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n            nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        var parentIdOfNodeToRemove = this.getParentGroupId(nodeId);\n\n        var parentGroup = this.getNodeById(parentIdOfNodeToRemove);\n\n        // update the start id if we are removing the start node of a group\n        if (parentGroup != null) {\n            var parentGroupStartId = parentGroup.startId;\n\n            if (parentGroupStartId != null) {\n                if (parentGroupStartId === nodeId) {\n                    // the node we are removing is the start node\n\n                    if (nodeToRemoveTransitions != null && nodeToRemoveTransitions.length > 0) {\n\n                        // loop through all the transitions from the node to choose a new start id\n                        for (var t = 0; t < nodeToRemoveTransitions.length; t++) {\n                            var nodeToRemoveTransition = nodeToRemoveTransitions[t];\n\n                            if (nodeToRemoveTransition != null) {\n                                var toNodeId = nodeToRemoveTransition.to;\n\n                                if (toNodeId != null) {\n                                    /*\n                                     * we need to check that the to node id is in the\n                                     * same group. some transitions point to a node id\n                                     * in the next group which we would not want to use\n                                     * for the start id.\n                                     */\n                                    if (this.getParentGroupId(toNodeId) == parentIdOfNodeToRemove) {\n\n                                        // set the new start id\n                                        parentGroup.startId = toNodeId;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // there are no transitions so we will have an empty start id\n                        parentGroup.startId = '';\n                    }\n                }\n            }\n        }\n\n        // loop through all the nodes that transition to the node we are removing\n        for (var n = 0; n < nodesByToNodeId.length; n++) {\n\n            // get a node that has a transition to the node we are removing\n            var node = nodesByToNodeId[n];\n\n            if (node != null) {\n                var parentIdOfFromNode = this.getParentGroupId(node.id);\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    // loop through all the transitions of this node\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (nodeId === transition.to) {\n                            // we have found the transition to the node we are removing\n\n                            // copy the transitions from the node we are removing\n                            var transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n                            transitionsCopy = angular.fromJson(transitionsCopy);\n\n                            /*\n                             * if the parent from group is different than the parent removing group\n                             * remove transitions that are to a node in a different group than\n                             * the parent removing group\n                             */\n\n                            if (parentIdOfFromNode != parentIdOfNodeToRemove) {\n\n                                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                    var tempTransition = transitionsCopy[tc];\n\n                                }\n                                if (tempTransition != null) {\n                                    var tempToNodeId = tempTransition.to;\n\n                                    if (tempToNodeId != null) {\n                                        var parentIdOfToNode = this.getParentGroupId(tempToNodeId);\n\n                                        if (parentIdOfNodeToRemove != parentIdOfToNode) {\n                                            // remove the transition\n\n                                            transitionsCopy.splice(tc, 1);\n                                            tc--;\n                                        }\n                                    }\n                                }\n                            }\n\n                            // remove the transition to the node we are removing\n                            transitions.splice(t, 1);\n\n                            // insert the transitions from the node we are removing\n                            transitions = transitions.concat(transitionsCopy);\n\n                            // check if the node we are moving is a group\n                            if (this.isGroupNode(nodeId)) {\n                                /*\n                                 * we are moving a group so we need to update transitions that\n                                 * go into the group\n                                 */\n                                var groupIdWeAreMoving = nodeId;\n                                var groupThatTransitionsToGroupWeAreMoving = node;\n                                this.updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving);\n                            }\n                        }\n                    }\n\n                    // set the transitions into the node that transitions to the node we are removing\n                    transitionLogic.transitions = transitions;\n                }\n            }\n        }\n\n        if (nodeToRemoveTransitionLogic != null) {\n            // clear the transitions of the node we are removing\n            nodeToRemoveTransitionLogic.transitions = [];\n        }\n\n        if (this.isGroupNode(nodeId)) {\n            /*\n             * this is a group node so we will remove all child transitions that\n             * go out of this group\n             */\n\n            //this.removeTransitionsIntoGroup(nodeId);\n            this.removeTransitionsOutOfGroup(nodeId);\n        }\n    };\n\n    /**\n     * Remove the node id from a group\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromGroups(nodeId) {\n\n        var groups = this.groupNodes;\n\n        if (groups != null) {\n\n            // loop through all the groups\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n\n                    // get the start id of the group\n                    var startId = group.startId;\n\n                    // get the child ids of the group\n                    var ids = group.ids;\n\n                    // loop through all the child ids\n                    for (var i = 0; i < ids.length; i++) {\n                        var id = ids[i];\n\n                        if (nodeId === id) {\n                            // we have found the node id we want to remove\n                            ids.splice(i, 1);\n\n                            if (nodeId === startId) {\n                                /*\n                                 * the node id is also the start id so we will get the\n                                 * next node id and set it as the new start id\n                                 */\n\n                                var hasSetNewStartId = false;\n\n                                // get the node we are removing\n                                var node = this.getNodeById(id);\n\n                                if (node != null) {\n                                    var transitionLogic = node.transitionLogic;\n\n                                    if (transitionLogic != null) {\n                                        var transitions = transitionLogic.transitions;\n\n                                        if (transitions != null && transitions.length > 0) {\n\n                                            // get the first transition\n                                            // TODO handle the case when the node we are removing is a branch point\n                                            var transition = transitions[0];\n\n                                            if (transition != null) {\n                                                // get the node that this node transitions to\n                                                var to = transition.to;\n\n                                                if (to != null) {\n                                                    // set the to node as the start id\n                                                    group.startId = to;\n                                                    hasSetNewStartId = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (!hasSetNewStartId) {\n                                    /*\n                                     * the node we are removing did not have a transition\n                                     * so there will be no start id\n                                     */\n                                    group.startId = '';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the array of nodes\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromNodes(nodeId) {\n\n        // get all the nodes in the project\n        var nodes = this.project.nodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                if (nodeId === node.id) {\n                    // we have found the node we want to remove\n                    nodes.splice(n, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove from the inactive nodes array\n     */\n    removeNodeIdFromInactiveNodes(nodeId) {\n\n        // get the inactive nodes array\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    var inactiveNodeId = inactiveNode.id;\n\n                    if (nodeId === inactiveNodeId) {\n                        /*\n                         * we have found the node we are looking for so we will\n                         * remove it\n                         */\n                        inactiveNodes.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a new component\n     * @param nodeId the node id to create the component in\n     * @param componentType the component type\n     */\n    createComponent(nodeId, componentType) {\n\n        if (nodeId != null && componentType != null) {\n            // get the node we will create the component in\n            var node = this.getNodeById(nodeId);\n\n            // get the service for the node type\n            var service = this.$injector.get(componentType + 'Service');\n\n            if (node != null && service != null) {\n\n                // create the new component\n                var component = service.createComponent();\n\n                // add the component to the node\n                this.addComponentToNode(node, component);\n            }\n        }\n    }\n\n    /**\n     * Add the component to the node\n     * @param node the node\n     * @param component the component\n     */\n    addComponentToNode(node, component) {\n\n        if (node != null && component != null) {\n            node.components.push(component);\n        }\n    }\n\n    /**\n     * Move the component up within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentUp(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the first component because\n                             * the first component can't be moved up\n                             */\n                            if (c != 0) {\n                                // this is not the first component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index back\n                                components.splice(c - 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the component down within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentDown(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the last component because\n                             * the last component can't be moved down\n                             */\n                            if (c != components.length - 1) {\n                                // this is not the last component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index ahead\n                                components.splice(c + 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the component\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    deleteComponent(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to delete\n\n                            // remove the component\n                            components.splice(c, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the max score for the project\n     * @returns the max score for the project or null if none of the components in the project\n     * has max scores.\n     */\n    getMaxScore() {\n\n        var maxScore = null;\n\n        var nodes = this.project.nodes;\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeMaxScore = this.getMaxScoreForNode(node.id);\n\n                    if (nodeMaxScore != null) {\n                        if (maxScore == null) {\n                            maxScore = nodeMaxScore;\n                        } else {\n                            maxScore += nodeMaxScore;\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for the node\n     * @param nodeId the node id\n     * @returns the max score for the node\n     */\n    getMaxScoreForNode(nodeId) {\n        var maxScore = null;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the max score for the component\n                        var componentMaxScore = component.maxScore;\n\n                        // check if the component has a max score\n                        if (componentMaxScore != null) {\n\n                            // make sure the max score is a valid number\n                            if (!isNaN(componentMaxScore)) {\n\n                                if (maxScore == null) {\n                                    maxScore = componentMaxScore;\n                                } else {\n                                    // accumulate the max score\n                                    maxScore += componentMaxScore;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for a component\n     * @param nodeId get the max score from a component in this node\n     * @param componentId get the max score from this component\n     */\n    getMaxScoreForComponent(nodeId, componentId) {\n        var maxScore = null;\n\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n            maxScore = component.maxScore;\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Determine if a node id is a direct child of a group\n     * @param nodeId the node id\n     * @param groupId the group id\n     */\n    isNodeInGroup(nodeId, groupId) {\n\n        var result = false;\n\n        var group = this.getNodeById(groupId);\n\n        var childIds = group.ids;\n\n        if (childIds != null) {\n            if (childIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the first leaf node by traversing all the start ids\n     * until a leaf node id is found\n     */\n    getFirstLeafNodeId() {\n\n        var firstLeafNodeId = null;\n\n        // get the start group id\n        var startGroupId = this.project.startGroupId;\n\n        // get the start group node\n        var node = this.getNodeById(startGroupId);\n\n        var done = false;\n\n        // loop until we have found a leaf node id or something went wrong\n        while (!done) {\n\n            if (node == null) {\n                done = true;\n            } else if (this.isGroupNode(node.id)) {\n                // set the first leaf node id to the group id for now\n                firstLeafNodeId = node.id;\n\n                // the current node is a group\n                node = this.getNodeById(node.startId);\n            } else if (this.isApplicationNode(node.id)) {\n                // the current node is a leaf\n                firstLeafNodeId = node.id;\n                done = true;\n            } else {\n                done = true;\n            }\n        }\n\n        return firstLeafNodeId;\n    }\n\n    /**\n     * Replace a node. This is used when we want to revert a node back to a\n     * previous version in the authoring tool.\n     * @param nodeId the node id\n     * @param node the node object\n     */\n    replaceNode(nodeId, node) {\n\n        if (nodeId != null && node != null) {\n\n            // set the id to node mapping\n            this.setIdToNode(nodeId, node);\n\n            // set the id to element mapping\n            this.setIdToElement(nodeId, node);\n\n            // update the nodes array\n            var nodes = this.getNodes();\n\n            if (nodes != null) {\n\n                for (var n = 0; n < nodes.length; n++) {\n                    var tempNode = nodes[n];\n\n                    if (tempNode != null) {\n                        var tempNodeId = tempNode.id;\n\n                        if (nodeId === tempNodeId) {\n                            // we have found the node we want to replace\n                            nodes.splice(n, 1, node);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // update the application nodes array\n            var applicationNodes = this.applicationNodes;\n\n            if (applicationNodes != null) {\n                for (var a = 0; a < applicationNodes.length; a++) {\n                    var tempApplicationNode = applicationNodes[a];\n\n                    if (tempApplicationNode != null) {\n                        var tempApplicationNodeId = tempApplicationNode.id;\n\n                        if (nodeId === tempApplicationNodeId) {\n                            // we have found the node we want to replace\n                            applicationNodes.splice(a, 1, node);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if a node is a planning node\n     * @param nodeId the node id\n     * @returns whether the node is a planning node\n     */\n    isPlanning(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                if (node.planning) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a node is a planning node instance\n     * @param nodeId the node id\n     * @returns whether the node is a planning node instance\n     */\n    isPlanningInstance(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node.planningNodeTemplateId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the available planning node ids for a node\n     * @param nodeId the node we want available planning nodes for\n     * @returns an array of available planning node ids\n     */\n    getAvailablePlanningNodeIds(nodeId) {\n        var availablePlanningNodeIds = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodeIds != null) {\n                availablePlanningNodeIds = node.availablePlanningNodeIds;\n            }\n        }\n\n        return availablePlanningNodeIds;\n    }\n\n    /**\n     * Get the available planning nodes for a given group\n     * @param nodeId the node id of the group\n     * @returns an array of planning node templates\n     */\n    getAvailablePlanningNodes(nodeId) {\n        var availablePlanningNodesSoFar = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodes != null) {\n                let availablePlanningNodes = node.availablePlanningNodes;\n\n                // loop through all the nodes and retrieve the actual node\n                for (var a = 0; a < availablePlanningNodes.length; a++) {\n                    var availablePlanningNode = availablePlanningNodes[a];\n\n                    if (availablePlanningNode != null) {\n\n                        // get the node\n                        var availablePlanningNodeActual = this.getNodeById(availablePlanningNode.nodeId);\n\n                        if (availablePlanningNodeActual != null) {\n                            if (availablePlanningNode.max != null) {\n                                availablePlanningNodeActual.max = availablePlanningNode.max;\n                            }\n                            availablePlanningNodesSoFar.push(availablePlanningNodeActual);\n                        }\n                    }\n                }\n            }\n        }\n\n        return availablePlanningNodesSoFar;\n    }\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group id to add the planning node instance to\n     * @param nodeId the node id of the planning node template\n     */\n    createPlanningNodeInstance(groupId, nodeId, nextAvailablePlanningNodeId) {\n\n        var planningNodeInstance = null;\n\n        if (nodeId != null && nextAvailablePlanningNodeId != null) {\n            // get the planning node template\n            var node = this.getNodeById(nodeId);\n\n            // create a planning node instance by copying the planning node template\n            planningNodeInstance = this.copyNode(nodeId);\n\n            // set the template id to point back to the planning template node\n            planningNodeInstance.planningNodeTemplateId = nodeId;\n\n            // set the planning node instance node id\n            planningNodeInstance.id = nextAvailablePlanningNodeId;\n        }\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Add a planning node instance inside a group node\n     * @param nodeIdToInsertInside the group id to insert into\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeInsideInTransitions(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // update the child ids of the group\n        this.insertNodeInsideInGroups(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Add a planning node instance after a node\n     * @param nodeIdToInsertAfter the node to insert after\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeAfterInTransitions(planningNodeInstance, nodeIdToInsertAfter);\n\n        // update the child ids of the group\n        this.insertNodeAfterInGroups(planningNodeInstanceNodeId, nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance inside a group\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertInside the group to move the node into\n     */\n    movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToInsertInside) {\n\n        // move the node inside the group node\n        this.moveNodesInside([nodeIdToMove], nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance after a node\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertAfter the other node to move the node after\n     */\n    movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToInsertAfter) {\n\n        // move the node after the other node\n        this.moveNodesAfter([nodeIdToMove], nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Recalculate the positions of the children in the group.\n     * The positions are the numbers usually seen before the title\n     * e.g. if the step is seen as 1.3: Gather Evidence, then 1.3\n     * is the position\n     * @param groupId recalculate all the children of this group\n     */\n    recalculatePositionsInGroup(groupId) {\n\n        if (groupId != null) {\n            var childIds = this.getChildNodeIdsById(groupId);\n\n            // loop througha all the children\n            for (var c = 0; c < childIds.length; c++) {\n                var childId = childIds[c];\n\n                // calculate the position of the child id\n                var pos = this.getPositionById(childId);\n\n                // set the mapping of node id to position\n                this.setIdToPosition(childId, pos);\n            }\n        }\n    }\n\n    /**\n     * Get the message that describes how to disable the constraint\n     * @param nodeId the node the student is trying to go to\n     * @param constraint the constraint that is preventing the student\n     * from going to the node\n     * @returns the message to display to the student that describes how\n     * to disable the constraint\n     */\n    getConstraintMessage(nodeId, constraint) {\n\n        var message = '';\n\n        if (nodeId != null && constraint != null) {\n\n            // get the node title the student is trying to go to\n            var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n\n            var removalConditional = constraint.removalConditional;\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalConditional === 'any') {\n                message += 'To visit \"' + nodeTitle + '\" you must perform one of the actions below:<br/>';\n            } else {\n                message += 'To visit \"' + nodeTitle + '\" you must perform all of the actions below:<br/>';\n            }\n\n            if (removalCriteria != null) {\n\n                var criteriaMessages = '';\n\n                // loop through all the criteria\n                for (var x = 0; x < removalCriteria.length; x++) {\n                    var tempRemovalCriteria = removalCriteria[x];\n\n                    if (tempRemovalCriteria != null) {\n\n                        // get the message that describes the criteria that needs to be satisfied\n                        var criteriaMessage = this.getCriteriaMessage(tempRemovalCriteria);\n\n                        if (criteriaMessage != null && criteriaMessage != '') {\n                            // separate criteria messages with a line break\n                            if (criteriaMessages != '') {\n                                criteriaMessages += '<br/>';\n                            }\n                            criteriaMessages += criteriaMessage;\n                        }\n                    }\n                }\n\n                message += criteriaMessages;\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the message that describes how to satisfy the criteria\n     * TODO: check if the criteria is satisfied\n     * @param criteria the criteria object that needs to be satisfied\n     * @returns the message to display to the student that describes how to\n     * satisfy the criteria\n     */\n    getCriteriaMessage(criteria) {\n        var message = '';\n\n        if (criteria != null) {\n            var name = criteria.name;\n            var params = criteria.params;\n\n            if (name === 'isCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += 'Complete \"' + nodeTitle + '\"';\n                }\n            } else if (name === 'isVisited') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += 'Visit \"' + nodeTitle + '\"';\n                }\n            } else if (name === 'choiceChosen') {\n\n            } else if (name === 'branchPathTaken') {\n\n            } else if (name === 'isPlanningActivityCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += 'Complete \"' + nodeTitle + '\"';\n                }\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the start id of a group\n     * @param nodeId get the start id of this group\n     * @returns the start id of the group\n     */\n    getGroupStartId(nodeId) {\n\n        var startId = null;\n\n        if (nodeId != null) {\n\n            // get the group\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                // get the start id\n                startId = node.startId;\n            }\n        }\n\n\n        return startId;\n    }\n\n    /**\n     * Get the start id of the node's parent group\n     * @param nodeId we will get the parent of this node and then look\n     * for the start id of the parent\n     * @returns the start id of the parent\n     */\n    getParentGroupStartId(nodeId) {\n        var parentGroupStartId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupStartId = parentGroup.startId;\n            }\n        }\n\n        return parentGroupStartId;\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup -> newToGroup\n     *\n     * After\n     * fromGroup -> newToGroup\n     * oldToGroup becomes dangling and has no transitions to or from it\n     */\n    updateTransitionsForExtractingGroup(fromGroupId, oldToGroupId, newToGroupId) {\n\n        /*\n         * make the transitions\n         * fromGroup -> newToGroup\n         */\n        if (fromGroupId != null && oldToGroupId != null) {\n            var fromGroup = this.getNodeById(fromGroupId);\n            var oldToGroup = this.getNodeById(oldToGroupId);\n            var newToGroup = null;\n            var newToGroupStartId = null;\n\n            if (newToGroupId != null) {\n                newToGroup = this.getNodeById(newToGroupId);\n            }\n\n            if (newToGroup != null) {\n                newToGroupStartId = newToGroup.startId;\n            }\n\n            if (fromGroup != null && oldToGroup != null) {\n                var childIds = fromGroup.ids;\n\n                // update the children of the from group to point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the from group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === oldToGroupId) {\n                                        // the transition is to the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        }\n                                    } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                        // the transition is to a node in the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else if (newToGroupStartId == null || newToGroupStartId == '') {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        } else {\n                                            // make the transition point to the new group start id\n                                            transition.to = newToGroupStartId;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * remove the transitions from the oldToGroup\n         */\n        if (oldToGroupId != null && newToGroupId != null) {\n\n            var oldToGroup = this.getNodeById(oldToGroupId);\n\n            if (oldToGroup != null) {\n                var childIds = oldToGroup.ids;\n\n                // remove the transitions from the old to group that point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the old to group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === newToGroupId) {\n                                        // the transition is to the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    } else if (this.isNodeInGroup(toNodeId, newToGroupId)) {\n                                        // the transition is to a node in the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup\n     * newToGroup is dangling and has no transitions to or from it\n     *\n     * After\n     * fromGroup -> newToGroup -> oldToGroup\n     */\n    updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId) {\n\n        var fromGroup = null;\n        var newToGroup = null;\n\n        if (fromGroupId != null) {\n            fromGroup = this.getNodeById(fromGroupId);\n        }\n\n        if (newToGroupId != null) {\n            newToGroup = this.getNodeById(newToGroupId);\n        }\n\n        /*\n         * make the transitions that point to the old group now point\n         * to the new group\n         * fromGroup -> newToGroup\n         */\n        if (fromGroup != null && newToGroup != null) {\n            var childIds = fromGroup.ids;\n            var newToGroupStartId = newToGroup.startId;\n\n            if (childIds != null) {\n\n                // loop through all the nodes in the from group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions from the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n                        /*\n                         * the child does not have any transitions so we will make it\n                         * point to the new group\n                         */\n                        if (newToGroupStartId == null || newToGroupStartId == '') {\n                            this.addToTransition(child, newToGroupId);\n                        } else {\n                            this.addToTransition(child, newToGroupStartId)\n                        }\n                    } else if (transitions != null) {\n\n                        // loop through all the transitions from the child\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (oldToGroupIds != null) {\n\n                                    /*\n                                     * loop through all the old to group ids to find transitions\n                                     * to the old to group\n                                     */\n                                    for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                        var oldToGroupId = oldToGroupIds[ot];\n\n                                        if (toNodeId === oldToGroupId) {\n                                            /*\n                                             * the transition is to the group so we will update the transition\n                                             * to the new group\n                                             */\n                                            transition.to = newToGroupId;\n                                        } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                            /*\n                                             * the transition is to a node in the old group so we will update\n                                             * the transition to point to the new group\n                                             */\n                                            if (newToGroupStartId == null || newToGroupStartId == '') {\n                                                transition.to = newToGroupId;\n                                            } else {\n                                                transition.to = newToGroupStartId;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * make the steps that do not have a transition now point to the old\n         * group\n         * newToGroup -> oldToGroup\n         */\n        if (newToGroup != null) {\n            var childIds = newToGroup.ids;\n\n            if (childIds != null) {\n\n                // loop through all the children in the new group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions for the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n\n                        if (oldToGroupIds != null) {\n\n                            // loop through all the old groups\n                            for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                var oldToGroupId = oldToGroupIds[ot];\n                                var oldToGroup = this.getNodeById(oldToGroupId);\n\n                                if (oldToGroup != null) {\n\n                                    var oldToGroupStartId = oldToGroup.startId;\n\n                                    var transition = {};\n\n                                    var toNodeId = '';\n\n                                    if (oldToGroupStartId == null) {\n                                        // there is no start node id so we will just point to the group\n                                        toNodeId = oldToGroup;\n                                    } else {\n                                        // there is a start node id so we will point to it\n                                        toNodeId = oldToGroupStartId;\n                                    }\n\n                                    // create the transition from the child to the old group\n                                    this.addToTransition(child, toNodeId);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the child transitions because we are moving a group. We will\n     * update the transitions into and out of the group in the location\n     * we are extracting the group from and also in the location we are\n     * inserting the group into.\n     * @param node the group we are moving\n     * @param nodeId we will put the group after this node id\n     */\n    updateChildrenTransitionsForMovingGroup(node, nodeId) {\n        var transitionsBefore = null;\n\n        // get the group nodes that point to the group we are moving\n        var previousGroupNodes = this.getGroupNodesByToNodeId(node.id);\n\n        // get all the transitions from the group we are moving\n        var transitionsAfter = this.getTransitionsByFromNodeId(node.id);\n\n        var extracted = false;\n\n        /*\n         * extract the group we are moving by updating the transitions of the\n         * from group and the new to group. also remove the transitions from the\n         * group we are moving.\n         */\n\n        // loop through all the groups that point to the group we are moving\n        for (var p = 0; p < previousGroupNodes.length; p++) {\n            var previousGroupNode = previousGroupNodes[p];\n\n            if (transitionsAfter == null || transitionsAfter.length == 0) {\n                // the group we are moving does not have any transitions\n\n                /*\n                 * remove the transitions to the group we are moving and make\n                 * new transitions from the from group to the new to group\n                 */\n                this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, null);\n                extracted = true;\n            } else {\n                // the group we are moving has transitions\n\n                // make the previous group point to the new to group\n                for (var t = 0; t < transitionsAfter.length; t++) {\n                    var transitionAfter = transitionsAfter[t];\n\n                    if (transitionAfter != null) {\n                        var toNodeId = transitionAfter.to;\n\n                        /*\n                         * remove the transitions to the group we are moving and make\n                         * new transitions from the from group to the new to group\n                         */\n                        this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, toNodeId);\n                        extracted = true;\n                    }\n                }\n            }\n        }\n\n        if (!extracted) {\n            /*\n             * we have not removed the transitions yet because the group\n             * we are moving does not have any groups before it\n             */\n\n            // remove the transitions from the group we are moving\n            for (var t = 0; t < transitionsAfter.length; t++) {\n                var transitionAfter = transitionsAfter[t];\n\n                if (transitionAfter != null) {\n                    var toNodeId = transitionAfter.to;\n\n                    // remove the transitions to the group we are moving\n                    this.updateTransitionsForExtractingGroup(null, node.id, toNodeId);\n                    extracted = true;\n                }\n            }\n        }\n\n        var inserted = false;\n\n        /*\n         * create the transitions from the from group to the group we are moving\n         * and the transitions from the group we are moving to the old to group\n         */\n        if (nodeId != null) {\n            // get the transitions from the previous group to the next group\n            var transitionsAfter = this.getTransitionsByFromNodeId(nodeId);\n\n            for (var t = 0; t < transitionsAfter.length; t++) {\n                var transitionAfter = transitionsAfter[t];\n\n                if (transitionAfter != null) {\n                    var toNodeId = transitionAfter.to;\n\n                    /*\n                     * create the transitions that traverse from the from group\n                     * to the group we are moving. also create the transitions\n                     * that traverse from the group we are moving to the old\n                     * to group.\n                     */\n                    this.updateTransitionsForInsertingGroup(nodeId, [toNodeId], node.id);\n                    inserted = true;\n                }\n            }\n        }\n\n        if (!inserted) {\n            /*\n             * we have not inserted the transitions yet because there were no\n             * previous group transitions\n             */\n\n            if (nodeId == null) {\n                /*\n                 * the previous node id is null which means there was no previous\n                 * group. this means the group we are inserting will become the\n                 * first group. this happens when the group we are moving\n                 * is moved inside the root (group0).\n                 */\n\n                var startGroupId = this.getStartGroupId();\n\n                if (startGroupId != null) {\n\n                    // get the start group for the whole project (group0)\n                    var startGroup = this.getNodeById(startGroupId);\n\n                    if (startGroup != null) {\n\n                        // get the first activity\n                        var firstGroupId = startGroup.startId;\n\n                        /*\n                         * create the transitions that traverse from the group\n                         * we are moving to the previous first activity.\n                         */\n                        this.updateTransitionsForInsertingGroup(nodeId, [firstGroupId], node.id);\n                    }\n                }\n\n            } else {\n                /*\n                 * we have not inserted the group yet because the from group doesn't\n                 * have a group after it\n                 */\n\n                /*\n                 * create the transitions that traverse from the from group\n                 * to the group we are moving.\n                 */\n                this.updateTransitionsForInsertingGroup(nodeId, null, node.id);\n            }\n        }\n    }\n\n    /**\n     * Check if a component is a connected component\n     * @param nodeId the node id of the component\n     * @param componentId the component that is listening for connected changes\n     * @param connectedComponentId the component that is broadcasting connected changes\n     * @returns whether the componentId is connected to the connectedComponentId\n     */\n    isConnectedComponent(nodeId, componentId, connectedComponentId) {\n\n        var result = false;\n\n        // get the component\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n\n            var connectedComponents = component.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n                        if (connectedComponentId === connectedComponent.id) {\n                            // we have found the connected component id we are looking for\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a connected component params\n     * @param componentId the connected component id\n     * @returns the params for the connected component\n     */\n    getConnectedComponentParams(componentContent, componentId) {\n\n        var connectedComponentParams = null;\n\n        if (componentContent != null && componentId != null) {\n\n            // get the connected components\n            var connectedComponents = componentContent.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n                        var tempComponentId = connectedComponent.id;\n\n                        if (componentId === tempComponentId) {\n                            // we have found the connected component we are looking for\n                            connectedComponentParams = connectedComponent;\n                        }\n                    }\n                }\n            }\n        }\n\n        return connectedComponentParams;\n    }\n\n    /**\n     * Get the inactive groups\n     * @returns the inactive groups\n     */\n    getInactiveGroups() {\n        var inactiveGroups = [];\n\n        if (this.project != null) {\n\n            if (this.project.inactiveGroups == null) {\n                this.project.inactiveGroups = [];\n            }\n\n            inactiveGroups = this.project.inactiveGroups;\n        }\n\n        return inactiveGroups;\n    }\n\n    /**\n     * Get the inactive nodes\n     * @returns the inactive nodes\n     */\n    getInactiveNodes() {\n        var inactiveNodes = [];\n\n        if (this.project != null) {\n\n            if (this.project.inactiveNodes == null) {\n                this.project.inactiveNodes = [];\n            }\n\n            inactiveNodes = this.project.inactiveNodes;\n        }\n\n        return inactiveNodes;\n    }\n\n    /**\n     * Remove the node from the active nodes\n     * @param nodeId the node to remove\n     * @returns the node that we have removed\n     */\n    removeNodeFromActiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n\n            // get the active nodes\n            var activeNodes = this.project.nodes;\n\n            if (activeNodes != null) {\n\n                // loop through all the active nodes\n                for (var a = 0; a < activeNodes.length; a++) {\n                    var activeNode = activeNodes[a];\n\n                    if (activeNode != null) {\n                        if (nodeId === activeNode.id) {\n                            // we have found the node we want to remove\n                            node = activeNode;\n\n                            // remove the node from the array\n                            activeNodes.splice(a, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove\n     * @returns the node that was removed\n     */\n    removeNodeFromInactiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n\n            // get all the inactive nodes\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // loop through all the inactive nodes\n                for (var i = 0; i < inactiveNodes.length; i++) {\n                    var inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (nodeId === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            node = inactiveNode;\n\n                            // remove the node from the array\n                            inactiveNodes.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Load the inactive nodes\n     * @param nodes the inactive nodes\n     */\n    loadInactiveNodes(nodes) {\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    // set the node into the mapping data structures\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the node is active\n     * @param nodeId the node to check\n     * @returns whether the node is in the active array\n     */\n    isActive(nodeId) {\n\n        var result = true;\n\n        if (nodeId != null) {\n\n            if (nodeId === 'inactiveNodes') {\n                // this occurs when the author puts a step into the inactive nodes\n                result = false;\n            } else if (nodeId === 'inactiveGroups') {\n                // this occurs when the author puts a group into the inactive groups\n                result = false;\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n                // TODO: implement this\n            } else {\n                // the node is a step node\n\n                // get the inactive nodes\n                var inactiveNodes = this.project.inactiveNodes;\n\n                if (inactiveNodes != null) {\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeId === inactiveNode.id) {\n                                // we have found the node in the inactive nodes\n                                result = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Move the node to the active nodes array\n     */\n    moveToActive(node) {\n        if (node != null) {\n\n            // make sure the node is inactive\n            if (!this.isActive(node.id)) {\n                // the node is inactive so we will move it to the active array\n\n                // remove the node from inactive nodes array\n                this.removeNodeFromInactiveNodes(node.id);\n\n                // add the node to the active array\n                this.addNode(node);\n            }\n        }\n    }\n\n    /**\n     * Move the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveToInactive(node, nodeIdToInsertAfter) {\n        if (node != null) {\n\n            // make sure the node is active\n            if (this.isActive(node.id)) {\n                // the node is active so we will move it to the inactive array\n\n                // remove the node from the active array\n                this.removeNodeFromActiveNodes(node.id);\n\n                // add the node to the inactive array\n                this.addInactiveNode(node, nodeIdToInsertAfter);\n            }\n        }\n    }\n\n    /**\n     * Add the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    addInactiveNode(node, nodeIdToInsertAfter) {\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps') {\n                    // put the node at the beginning of the inactive steps\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move an inactive node within the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveInactiveNode(node, nodeIdToInsertAfter) {\n\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // remove the node from inactive nodes\n\n                // loop through all the inactive nodes\n                for (var i = 0; i < inactiveNodes.length; i++) {\n                    var inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (node.id === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            inactiveNodes.splice(i, 1);\n                        }\n                    }\n                }\n\n                // add the node back into the inactive nodes\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps') {\n                    // put the node at the beginning of the inactive nodes\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go into the group\n     * @param nodeId the group id\n     */\n    removeTransitionsIntoGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the children\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            this.removeTransitionsThatPointToNodeIdFromOutsideGroup(childId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the transitions that point to the node that does not have\n     * the same parent\n     * @param nodeId remove transitions to this node\n     */\n    removeTransitionsThatPointToNodeIdFromOutsideGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            // get the parent of the node\n            var parentGroupId = this.getParentGroupId(nodeId);\n\n            // get all the nodes that point to the node\n            var nodesThatPointToTargetNode = this.getNodesByToNodeId(nodeId);\n\n            if (nodesThatPointToTargetNode != null) {\n\n                // loop through all the nodes that point to the node\n                for (var n = 0; n < nodesThatPointToTargetNode.length; n++) {\n                    var nodeThatPointsToTargetNode = nodesThatPointToTargetNode[n];\n\n                    if (nodeThatPointsToTargetNode != null) {\n\n                        // get the parent of the node that points to the node target node\n                        var nodeThatPointsToTargetNodeParentGroupId = this.getParentGroupId(nodeThatPointsToTargetNode.id);\n\n                        if (parentGroupId != nodeThatPointsToTargetNodeParentGroupId) {\n                            /*\n                             * the parent groups are different so we will remove\n                             * the transition\n                             */\n                            this.removeTransition(nodeThatPointsToTargetNode, nodeId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a transition\n     * @param node remove a transition in this node\n     * @param toNodeId remove the transition that goes to this node id\n     */\n    removeTransition(node, toNodeId) {\n\n        if (node != null && toNodeId != null) {\n\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // loop through all the transitions\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (transition != null) {\n                            if (toNodeId === transition.to) {\n                                // we have found a transition that goes to the toNodeId\n\n                                // remove the transition\n                                transitions.splice(t, 1);\n                                t--;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go out of the group\n     * @param nodeId the group id\n     */\n    removeTransitionsOutOfGroup(nodeId) {\n        if (nodeId != null) {\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n\n                            // get the transitions of the child\n                            var transitions = this.getTransitionsByFromNodeId(childId);\n\n                            if (transitions != null) {\n\n                                // loop through all the transitions\n                                for (var t = 0; t < transitions.length; t++) {\n                                    var transition = transitions[t];\n\n                                    if (transition != null) {\n\n                                        // get the to node id of the transition\n                                        var toNodeId = transition.to;\n\n                                        if (toNodeId != null) {\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (nodeId != toNodeIdParentGroupId) {\n                                                /*\n                                                 * the parent group is different which means it is a\n                                                 * transition that goes out of the group\n                                                 */\n\n                                                // remove the transition\n                                                transitions.splice(t, 1);\n                                                t--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n     * Update the step transitions that point into the group we are moving\n     * For example\n     * group1 has children node1 and node2 (node2 transitions to node3)\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * group3 has children node5 and node6\n     * if we move group2 after group3 we will need to change the\n     * transition from node2 to node3 and make node2 transition to node5\n     * the result will be\n     * group1 has children node1 and node2 (node2 transitions to node5)\n     * group3 has children node5 and node6\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * note: the (node4 transition to node5) will be removed later\n     * when is called removeTransitionsOutOfGroup\n     * note: when group2 is added in a later function call, we will add\n     * the node6 to node3 transition\n     * @param groupThatTransitionsToGroupWeAreMoving the group object\n     * that transitions to the group we are moving. we may need to update\n     * the transitions of this group's children.\n     * @param groupIdWeAreMoving the group id of the group we are moving\n     */\n    updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving) {\n\n        if (groupThatTransitionsToGroupWeAreMoving != null && groupIdWeAreMoving != null) {\n            var group = this.getNodeById(groupIdWeAreMoving);\n\n            if (group != null) {\n                // get all the nodes that have a transition to the node we are removing\n                var nodesByToNodeId = this.getNodesByToNodeId(groupIdWeAreMoving);\n\n                // get the transitions of the node we are removing\n                var nodeToRemoveTransitionLogic = group.transitionLogic;\n                var nodeToRemoveTransitions = [];\n\n                if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n                    nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n                }\n\n                if (nodeToRemoveTransitions.length > 0) {\n\n                    // get the first group that comes after the group we are removing\n                    var firstNodeToRemoveTransition = nodeToRemoveTransitions[0];\n                    var firstNodeToRemoveTransitionToNodeId = firstNodeToRemoveTransition.to;\n\n                    if (this.isGroupNode(firstNodeToRemoveTransitionToNodeId)) {\n\n                        // get the group that comes after the group we are moving\n                        var groupNode = this.getNodeById(firstNodeToRemoveTransitionToNodeId);\n\n                        // get child ids of the group that comes before the group we are moving\n                        var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n                        if (childIds != null) {\n\n                            // loop through all the children\n                            for (var c = 0; c < childIds.length; c++) {\n                                var childId = childIds[c];\n\n                                var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                                if (transitionsFromChild != null) {\n\n                                    // loop through all the transitions from the child\n                                    for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                                        var transitionFromChild = transitionsFromChild[tfc];\n\n                                        if (transitionFromChild != null) {\n                                            var toNodeId = transitionFromChild.to;\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                                                // the transition is to a child in the group we are moving\n\n                                                if (groupNode.startId == null) {\n                                                    // change the transition to point to the after group\n                                                    transitionFromChild.to = firstNodeToRemoveTransitionToNodeId;\n                                                } else {\n                                                    // change the transition to point to the start id of the after group\n                                                    transitionFromChild.to = groupNode.startId;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the node ids and component ids in a node\n     * @param nodeId get the node ids and component ids in this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components in the node\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n\n                            var componentId = component.id;\n\n                            // create an object to hold the node id and component id\n                            var nodeIdAndComponentId = {};\n                            nodeIdAndComponentId.nodeId = nodeId;\n                            nodeIdAndComponentId.componentId = componentId;\n\n                            // add the object to the array\n                            nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n\n    /**\n     * Get the show previous work node ids and component ids in a node\n     * @param nodeId get the show previous work node ids and component ids in\n     * this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getShowPreviousWorkNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                            var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                            if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n\n                                // create an object to hold the node id and component id\n                                var nodeIdAndComponentId = {};\n                                nodeIdAndComponentId.nodeId = showPreviousWorkNodeId;\n                                nodeIdAndComponentId.componentId = showPreviousWorkComponentId;\n\n                                // add the object to the array\n                                nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n}\n\nProjectService.$inject = [\n    '$http',\n    '$injector',\n    '$q',\n    '$rootScope',\n    'ConfigService'\n];\n\nexport default ProjectService;\n"]}