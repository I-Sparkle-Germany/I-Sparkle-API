{"version":3,"sources":["projectService.es6"],"names":[],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n\n    constructor($http, $injector, $rootScope, ConfigService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.project = null;\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n\n        // filtering options for navigation displays\n        this.filters = [\n            {'name': 'all', 'label': 'All'},\n            //{'name': 'todo', 'label': 'Todo'},\n            //{'name': 'completed', 'label': 'Completed'},\n            {'name': 'bookmark', 'label': 'Bookmarks'} // TODO: Add when bookmarks are active\n        ];\n    };\n\n    setProject(project) {\n        this.project = project;\n        this.parseProject();\n    };\n\n    /**\n     * Initialize the data structures used to hold project information\n     */\n    clearProjectFields() {\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n    };\n\n    getStyle() {\n        var style = '';\n        var project = this.project;\n        if (project != null) {\n            style = project.style;\n        }\n        return style;\n    };\n\n    getFilters() {\n        return this.filters;\n    };\n\n    /**\n     * Returns the name/title of the current project\n     */\n    getProjectTitle() {\n        var name = this.getProjectMetadata().title;\n        return name ? name : 'A WISE Project (No name)';\n    };\n\n    getProjectMetadata() {\n        return this.metadata;\n    };\n\n    getNodes() {\n        var nodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            nodes = project.nodes;\n        }\n\n        return nodes;\n    };\n\n    getChildNodeIdsById(nodeId) {\n        var childIds = [];\n        var node = this.getNodeById(nodeId);\n\n        if (node.ids) {\n            childIds = node.ids;\n        }\n\n        return childIds;\n    };\n\n    getGroupNodes() {\n        return this.groupNodes;\n    };\n\n    isNode(id) {\n        var result = false;\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    if (nodeId === id) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // adds or update transition if exists\n    addTransition(transition) {\n\n        var existingTransitions = this.getTransitions();\n        var replaced = false;\n        for (var t = 0; t < existingTransitions.length; t++) {\n            var existingTransition = existingTransitions[t];\n            if (existingTransition.id === transition.id) {\n                existingTransitions.splice(t, 1, transition);\n                replaced = true;\n            }\n        }\n        if (!replaced) {\n            existingTransitions.push(transition);\n        }\n    };\n\n    addNode(node) {\n        var existingNodes = this.project.nodes;\n\n        var replaced = false;\n        if (node != null && existingNodes != null) {\n            for (var n = 0; n < existingNodes.length; n++) {\n                var existingNode = existingNodes[n];\n                var existingNodeId = existingNode.id;\n                if (existingNodeId === node.id) {\n                    existingNodes.splice(n, 1, node);\n                    replaced = true;\n                }\n            }\n        }\n        if (!replaced) {\n            existingNodes.push(node);\n        }\n    };\n\n    addApplicationNode(node) {\n\n        var applicationNodes = this.applicationNodes;\n\n        if (node != null && applicationNodes != null) {\n            applicationNodes.push(node);\n        }\n    };\n\n    addGroupNode(node) {\n\n        var groupNodes = this.groupNodes;\n\n        if (node != null && groupNodes != null) {\n            groupNodes.push(node);\n        }\n\n        this.$rootScope.$broadcast('groupsChanged');\n    };\n\n    addNodeToGroupNode(groupId, nodeId) {\n        if (groupId != null && nodeId != null) {\n            var group = this.getNodeById(groupId);\n            if (group != null) {\n                var groupChildNodeIds = group.ids;\n                if (groupChildNodeIds != null) {\n                    if (groupChildNodeIds.indexOf(nodeId) === -1) {\n                        groupChildNodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    isGroupNode(id) {\n        var result = false;\n\n        var groupNode = this.getNodeById(id);\n\n        if (groupNode != null) {\n            var type = groupNode.type;\n\n            if (type === 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isApplicationNode(id) {\n        var result = false;\n\n        var applicationNode = this.getNodeById(id);\n\n        if (applicationNode != null) {\n            var type = applicationNode.type;\n\n            if (type !== 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getGroups() {\n        return this.groupNodes;\n    };\n\n    loadNodes(nodes) {\n        if (nodes != null) {\n            for (var n = 0 ; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n                    var nodeType = node.type;\n                    var content = node.content;\n                    var constraints = node.constraints;\n\n                    if (content != null) {\n                        //node.content = this.injectAssetPaths(content);\n                    }\n\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n\n                    this.addNode(node);\n\n                    if (nodeType === 'group') {\n                        this.addGroupNode(node);\n                    } else {\n                        this.addApplicationNode(node);\n                    }\n\n                    var groupId = node.groupId;\n\n                    if (groupId != null) {\n                        this.addNodeToGroupNode(groupId, nodeId);\n                    }\n\n                    if (constraints != null) {\n                        for (var c = 0; c < constraints.length; c++) {\n                            var constraint = constraints[c];\n\n                            this.activeConstraints.push(constraint);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    parseProject() {\n        var project = this.project;\n        if (project != null) {\n\n            // clear and initialize our project data structures\n            this.clearProjectFields();\n\n            if (project.metadata) {\n                this.metadata = project.metadata;\n            }\n\n            var nodes = project.nodes;\n            this.loadNodes(nodes);\n\n            var constraints = project.constraints;\n\n            if (constraints != null) {\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n                        var constraintId = constraint.id;\n                        constraint.active = true;\n\n                        this.setIdToElement(constraintId, constraint);\n                    }\n                }\n            }\n\n            // set root node\n            this.rootNode = this.getRootNode(nodes[0].id);\n\n            // set project order\n            this.setNodeOrder(this.rootNode, this.nodeCount);\n            this.nodeCount = 0;\n\n            var n = nodes.length;\n            var branches = this.getBranches();\n            var branchNodeIds = [];\n\n            // set node positions\n            var id, pos;\n\n            while (n--) {\n                id = nodes[n].id;\n                if (id === this.rootNode.id) {\n                    this.setIdToPosition(id, '0');\n                } else if (this.isNodeIdInABranch(branches, id)) {\n                    // node is in a branch, so process later\n                    branchNodeIds.push(id);\n                } else {\n                    pos = this.getPositionById(id);\n                    this.setIdToPosition(id, pos);\n                }\n            }\n\n            // set branch node positions\n            var b = branchNodeIds.length;\n            while (b--) {\n                id = branchNodeIds[b];\n                pos = this.getBranchNodePositionById(id);\n                this.setIdToPosition(id, pos);\n            }\n        }\n    };\n\n    setNodeOrder(node) {\n        this.idToOrder[node.id] = {'order': this.nodeCount};\n        this.nodeCount++;\n        if (this.isGroupNode(node.id)) {\n            var childIds = node.ids;\n            for (var i = 0; i < childIds.length; i++) {\n                var child = this.getNodeById(childIds[i]);\n                this.setNodeOrder(child);\n            }\n        }\n    };\n\n    /**\n     * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getPositionById(id) {\n        for (var i = 0; i < this.rootNode.ids.length; i++) {\n            var node = this.getNodeById(this.rootNode.ids[i]);\n            var path = this.getPathToNode(node, i+1, id);\n            if (path != undefined && path != null) {\n                return path;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Returns the order of the given node id in the project. Returns null if no node with id exists.\n     * @param id String node id\n     * @return Number order of the given node id in the project\n     */\n    getOrderById(id) {\n        if (this.idToOrder[id]) {\n            return this.idToOrder[id].order;\n        }\n\n        return null;\n    };\n    /**\n     * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n     * @param order Number\n     * @return Number node id of the given order in the project\n     */\n    getIdByOrder(order) {\n        var nodeId = null;\n\n        for (var id in this.idToOrder) {\n            if (this.idToOrder[id].order === order) {\n                if (this.isGroupNode(id) && order > 1) {\n                    nodeId = this.getIdByOrder(order-1);\n                } else {\n                    nodeId = id;\n                }\n                break;\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getBranchNodePositionById(id) {\n        var branches = this.getBranches();\n        var b = branches.length;\n\n        // TODO: should we localize this? should we support more than 26?\n        var integerToAlpha = function(int) {\n            var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n            if (int > -1 && int < 26) {\n                return alphabet[int];\n            } else {\n                return int;\n            }\n        };\n\n        while (b--) {\n            var branch = branches[b];\n            var branchPaths = branch.branchPaths;\n            for (var p = 0; p < branchPaths.length; p++) {\n                var branchPath = branchPaths[p];\n                var nodeIndex = branchPath.indexOf(id);\n                if (nodeIndex > -1) {\n                    var startPoint = branch.branchStartPoint;\n                    var startPointPos = this.idToPosition[startPoint];\n                    var branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n                    return branchPathPos + (nodeIndex+1);\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n     * @param node a node to start searching down\n     * @param path the position of the given node\n     * @param id the node id to search for\n     * @return string path of the given node id in the project\n     */\n    getPathToNode(node, path, id) {\n        if (node.id === id) {\n            return path + '';\n        } else if (node.type === 'group') {\n            var num = 0;\n            var branches = this.getBranches();\n            for (var i = 0; i < node.ids.length; i++) {\n                var nodeId = node.ids[i];\n                if (this.isNodeIdInABranch(branches, nodeId)) {\n                    this.getBranchNodePositionById(nodeId);\n                } else {\n                    ++num;\n                    var pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n                    if (pos) {\n                        return pos;\n                    }\n                }\n            }\n        }\n    };\n\n    setIdToPosition(id, pos) {\n        if (id != null) {\n            this.idToPosition[id] = pos;\n        }\n    };\n\n    getNodePositionById(id) {\n        if (id != null) {\n            return this.idToPosition[id];\n        }\n    };\n\n    setIdToNode(id, element) {\n        if (id != null) {\n            this.idToNode[id] = element;\n        }\n    };\n\n    setIdToElement(id, element) {\n        if (id != null) {\n            this.idToElement[id] = element;\n        }\n    };\n\n    /**\n     * Replace relative asset paths with absolute paths\n     * e.g.\n     * assets/myimage.jpg\n     * will be replaced with\n     * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n     * @param content a string or JSON object\n     * @return the same type of object that was passed in as the content\n     * but with relative asset paths replaced with absolute paths\n     */\n    injectAssetPaths(content) {\n\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.replaceAssetPaths(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.replaceAssetPaths(content);\n            }\n        }\n\n        return content;\n    };\n\n    /**\n     * Replace the relative asset paths with absolute paths\n     * @param contentString the content string\n     * @return the content string with relative asset paths replaced\n     * with absolute asset paths\n     */\n    replaceAssetPaths(contentString) {\n\n        if (contentString != null) {\n\n            // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n            var contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n            // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n            // the string we're looking for can't start with '/ and \"/.\n            // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n            contentString = contentString.replace(\n                new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/][^\\/][a-zA-Z0-9@\\\\._\\\\/\\\\s\\\\-]*\\.(png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html)(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n                function myFunction(matchedString) {\n                    // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n                    var delimiter = '';\n                    var matchedStringWithoutQuotes = '';\n\n                    if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n                        // the string has escaped quotes for example \\\"hello.png\\\"\n\n                        // get everything between the escaped quotes\n                        matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n                        // get the delimiter which will be \\' or \\\"\n                        delimiter = matchedString.substr(0,2);\n                    } else {\n                        // the string does not have escaped qoutes for example \"hello.png\"\n\n                        // get everything between the quotes\n                        matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n                        // get the delimiter which will be ' or \"\n                        delimiter = matchedString.substr(0,1);\n                    }\n\n                    //var matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n                    // make a new string with the contentBaseURL + assets/ prepended to the path\n                    return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n                }\n            );\n        }\n\n        return contentString;\n    };\n\n    /**\n     * Returns the node specified by the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeById(nodeId) {\n        var element = null;\n\n        if (nodeId != null && this.idToNode[nodeId]) {\n            element = this.idToNode[nodeId];\n        }\n\n        return element;\n    };\n\n    /**\n     * Returns the title of the node with the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    };\n\n    /**\n     * Get the node position and title\n     * @param nodeId the node id\n     * @returns the node position and title, e.g. \"1.1 Introduction\"\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            var position = this.getNodePositionById(nodeId);\n\n            if (position != null) {\n                title = position + ' ' + node.title;\n            } else {\n                title = node.title;\n            }\n        }\n\n        return title;\n    };\n\n    getNodeIconByNodeId(nodeId) {\n        var node = this.getNodeById(nodeId);\n        var nodeIcon = null;\n\n        if (node != null) {\n            var nodeType = node.type;\n\n            // set defaults (TODO: get from configService?)\n            var defaultName = (nodeType === 'group') ? 'explore' : 'school';\n            nodeIcon = {\n                color: 'rgba(0,0,0,0.54)',\n                type: 'font',\n                fontSet: 'material-icons',\n                fontName: defaultName,\n                imgSrc: '',\n                imgAlt: 'node icon'\n            };\n\n            // TODO: check for different statuses\n            var icons = node.icons;\n            if (!!icons && !!icons.default) {\n                var icon = icons.default;\n                nodeIcon = $.extend(true, nodeIcon, icon);\n            }\n\n            // check for empty image source\n            if (!nodeIcon.imgSrc) {\n                // revert to font icon\n                nodeIcon.type = 'font';\n            }\n        }\n\n        return nodeIcon;\n    };\n\n    getParentGroup(nodeId) {\n        var result = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var groupNodes = this.getGroupNodes();\n\n                for (var g = 0; g < groupNodes.length; g++) {\n                    var groupNode = groupNodes[g];\n\n                    if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n                        result = groupNode;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getNodeDepth(nodeId, val) {\n        var result = null;\n\n        if (nodeId != null) {\n            var depth = (typeof val === \"number\") ? val : 0;\n            var parent = this.getParentGroup(nodeId);\n            if (parent) {\n                depth = this.getNodeDepth(parent.id, depth + 1);\n            }\n            result = depth;\n        }\n\n        return result;\n    };\n\n    getRootNode(nodeId) {\n        var result = null;\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        if (parentGroup == null) {\n            result = this.getNodeById(nodeId);\n        } else {\n            result = this.getRootNode(parentGroup.id);\n        }\n\n        return result;\n    };\n\n    isNodeDirectChildOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var nodeId = node.id;\n            var groupIds = group.ids;\n\n            if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isNodeDescendentOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var descendents = this.getDescendentsOfGroup(group);\n            var nodeId = node.id;\n\n            if (descendents.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getDescendentsOfGroup(group) {\n        var descendents = [];\n\n        if (group != null) {\n            var childIds = group.ids;\n\n            if (childIds != null) {\n                descendents = childIds;\n\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n\n                    var node = this.getNodeById(childId);\n\n                    if (node != null) {\n                        var childDescendents = this.getDescendentsOfGroup(node);\n\n                        descendents = descendents.concat(childDescendents);\n                    }\n                }\n            }\n        }\n\n        return descendents;\n    };\n\n    isStartNode(node) {\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var projectStartId = this.getStartNodeId();\n\n            if (nodeId === projectStartId) {\n                result = true;\n            }\n\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    var groupStartId = group.startId;\n\n                    if (nodeId === groupStartId) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n    \n    /**\n     * Returns the Project's start node id, or null if it's not defined in the project\n     */\n    getStartNodeId() {\n        var startNodeId = null;\n        var project = this.project;\n        if (project != null) {\n            startNodeId = project.startNodeId;\n        }\n        return startNodeId;\n    };\n\n    /**\n     * Set the start node id\n     * @param nodeId the new start node id\n     */\n    setStartNodeId(nodeId) {\n        \n        if (nodeId != null) {\n            var project = this.project;\n            if (project != null) {\n                project.startNodeId = nodeId;\n            }\n        }\n    }\n    \n    /**\n     * Get the start group id\n     * @return the start group id\n     */\n    getStartGroupId() {\n        var startGroupId = null;\n        \n        var project = this.project;\n        if (project != null) {\n            startGroupId = project.startGroupId;\n        }\n        \n        return startGroupId;\n    }\n    \n    /**\n     * Check if the given node id is the start node id\n     * @return whether the node id is the start node id\n     */\n    isStartNodeId(nodeId) {\n        \n        var result = false;\n        \n        var project = this.project;\n        \n        if (project != null) {\n            var startNodeId = project.startNodeId;\n            \n            if (nodeId === startNodeId) {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n\n    getConstraintsForNode(node) {\n        var constraints = [];\n\n        var allConstraints = this.activeConstraints;\n\n        for (var c = 0; c < allConstraints.length; c++) {\n            var constraint = allConstraints[c];\n\n            if (this.isNodeAffectedByConstraint(node, constraint)) {\n                constraints.push(constraint);\n            }\n        }\n\n        return constraints;\n    };\n\n    isNodeAffectedByConstraint(node, constraint) {\n        var result = false;\n\n        if (node != null && constraint != null) {\n            var nodeId = node.id;\n            var targetId = constraint.targetId;\n\n            var targetNode = this.getNodeById(targetId);\n\n            if (targetNode != null) {\n                var nodeType = targetNode.type;\n\n                if (nodeType === 'node') {\n                    // the target is an application\n\n                    if (nodeId === targetId) {\n                        result = true;\n                    }\n                } else if (nodeType === 'group') {\n                    // the target is a group\n\n                    if (this.isNodeDescendentOfGroup(node, targetNode)) {\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getNavigationMode() {\n        var navigationMode = null;\n        var project = this.project;\n        if (project != null) {\n            navigationMode = project.navigationMode;\n        }\n        return navigationMode;\n    };\n\n    getTransitions() {\n        var transitions = null;\n        var project = this.project;\n        if (project != null) {\n            transitions = project.transitions;\n        }\n        return transitions;\n    };\n\n    /**\n     * Get the transition logic for a node\n     * @param fromNodeId the from node id\n     * @returns the transition logic object\n     */\n    getTransitionLogicByFromNodeId(fromNodeId) {\n        var transitionLogic = null;\n\n        if (fromNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                // get the transition logic\n                transitionLogic = node.transitionLogic;\n            }\n        }\n\n        return transitionLogic;\n    };\n\n    getTransitionsByToNodeId(toNodeId) {\n        var transitionsResults = [];\n        if (toNodeId != null) {\n            var transitions = this.getTransitions();\n\n            if (transitions != null) {\n                for (var i = 0; i < transitions.length; i++) {\n                    var transition = transitions[i];\n                    if (transition.to === toNodeId) {\n                        transitionsResults.push(transition);\n                    }\n                }\n            }\n        }\n\n        return transitionsResults;\n    };\n\n    /**\n     * Get nodes that have a transition to the given node id\n     * @param toNodeId the node id\n     * @returns an array of node objects that transition to the\n     * given node id\n     */\n    getNodesByToNodeId(toNodeId) {\n        var nodesByToNodeId = [];\n\n        if (toNodeId != null) {\n\n            // get all the nodes\n            var nodes = this.project.nodes;\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions for the node\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                if (toNodeId === transition.to) {\n                                    // this node has a transition to the node id\n                                    nodesByToNodeId.push(node);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodesByToNodeId;\n    };\n\n    getTransitionsByFromAndToNodeId(fromNodeId, toNodeId) {\n        var transitionsResults = [];\n\n        if (fromNodeId != null && toNodeId != null) {\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var to = transition.to;\n\n                                if (toNodeId === to) {\n                                    transitionsResults.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return transitionsResults;\n    };\n\n    /**\n     * Retrieves the project JSON from Config.projectURL and returns it.\n     * If Config.projectURL is undefined, returns null.\n     */\n    retrieveProject() {\n        var projectURL = this.ConfigService.getConfigParam('projectURL');\n\n        if (projectURL == null) {\n            return null;\n        }\n\n        return this.$http.get(projectURL).then((result) => {\n            var projectJSON = result.data;\n            this.setProject(projectJSON);\n            return projectJSON;\n        });\n    };\n\n    /**\n     * Saves the project to Config.saveProjectURL and returns commit history promise.\n     * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n     */\n    saveProject(commitMessage = \"Made changes via WISE5 Authoring Tool\") {\n\n        var projectId = this.ConfigService.getProjectId();\n        var saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n        if (projectId == null || saveProjectURL == null) {\n            return null;\n        }\n\n        // Get the project from this service\n        var projectJSONString = angular.toJson(this.project, 4);\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = saveProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.projectId = projectId;\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var commitHistory = result.data;\n            return commitHistory;\n        });\n    };\n\n    /**\n     * Registers a new project having the projectJSON content with the server.\n     * Returns a new project Id if the project is successfully registered.\n     * Returns null if Config.registerNewProjectURL is undefined.\n     * Throws an error if projectJSONString is invalid JSON string\n     */\n    registerNewProject(projectJSONString, commitMessage) {\n        var registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n\n        if (registerNewProjectURL == null) {\n            return null;\n        }\n\n        try {\n            // Try parsing the JSON string and throw an error if there's an issue parsing it.\n            JSON.parse(projectJSONString);\n        } catch (e) {\n            throw new Error(\"Invalid projectJSONString.\");\n        }\n\n        if (!commitMessage) {\n            commitMessage = \"\";\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = registerNewProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Retrieves and returns the project's commit history.\n     */\n    getCommitHistory() {\n        var commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n\n        return this.$http({\n            url: commitProjectURL,\n            method: 'GET'\n        }).then((result) => {\n            return result.data;\n        });\n    };\n\n    getThemePath() {\n        var wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        var project = this.project;\n        if (project && project.theme) {\n            // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n            return wiseBaseURL + '/wise5/vle/themes/' + project.theme;\n        } else {\n            // TODO: get default theme name from ConfigService\n            return wiseBaseURL + '/wise5/vle/themes/default';\n        }\n    };\n\n    /**\n     * Flatten the project to obtain a list of node ids\n     */\n    getFlattenedProjectAsNodeIds() {\n        var nodeIds = [];\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the possible paths through the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // consolidate all the paths to create a single list of node ids\n        nodeIds = this.consolidatePaths(allPaths);\n        //nodeIds = this.consolidatePaths(allPaths.reverse());\n\n        return nodeIds;\n    };\n\n    /**\n     * Get all the possible paths through the project. This function\n     * recursively calls itself to traverse the project depth first.\n     * @param pathSoFar the node ids in the path so far. the node ids\n     * in this array are referenced to make sure we don't loop back\n     * on the path.\n     * @param nodeId the node id we are want to get the paths from\n     * @return an array of paths. each path is an array of node ids.\n     */\n    getAllPaths(pathSoFar, nodeId) {\n        var allPaths = [];\n\n        if (nodeId != null) {\n            if (this.isApplicationNode(nodeId)) {\n                // the node is an application node\n\n                // get the transition logic from the node id\n                var transitionLogic = this.getTransitionLogicByFromNodeId(nodeId);\n\n                if (transitionLogic != null) {\n\n                    // get all the transitions from this node\n                    var transitions = transitionLogic.transitions;\n\n                    var path = [];\n\n                    if (transitions != null) {\n\n                        // add the node id to the path so far\n                        pathSoFar.push(nodeId);\n\n                        if (transitions.length === 0) {\n                            /*\n                             * there are no transitions from the node id so this path\n                             * only contains this node id\n                             */\n\n                            // add the node id to the path\n                            path.push(nodeId);\n\n                            // add the path to the all paths array\n                            allPaths.push(path);\n                        } else {\n                            // loop through all the transitions from this node id\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transitionResult = [];\n\n                                // get a transition\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    // get the to node id\n                                    var toNodeId = transition.to;\n\n                                    if (pathSoFar.indexOf(toNodeId) == -1) {\n                                        /*\n                                         * recursively get the paths by getting all\n                                         * the paths for the to node\n                                         */\n                                        var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId);\n\n                                        if (allPathsFromToNode != null) {\n                                            // loop through all the paths for the to node\n                                            for (var a = 0; a<allPathsFromToNode.length; a++) {\n\n                                                // get a path\n                                                var tempPath = allPathsFromToNode[a];\n\n                                                // prepend the current node id to the path\n                                                tempPath.unshift(nodeId);\n\n                                                // add the path to our collection of paths\n                                                allPaths.push(tempPath);\n                                            }\n                                        }\n                                    } else {\n                                        /*\n                                         * the node is already in the path so far which means\n                                         * the transition is looping back to a previous node.\n                                         * we do not want to take this transition because\n                                         * it will lead to an infinite loop. we will just\n                                         * add the current node id to the path and not take\n                                         * the transition which essentially ends the path.\n                                         */\n                                        // add the node id to the path\n                                        path.push(nodeId);\n\n                                        // add the path to the all paths array\n                                        allPaths.push(path);\n                                    }\n                                }\n                            }\n                        }\n\n                        /*\n                         * remove the latest node id since we are moving back\n                         * up the path as we traverse the nodes depth first\n                         */\n                        pathSoFar.pop();\n                    }\n                }\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n            }\n        }\n\n        return allPaths;\n    };\n\n    /**\n     * Consolidate all the paths into a linear list of node ids\n     * @param paths an array of paths. each path is an array of node ids.\n     * @return an array of node ids that have been properly ordered\n     */\n    consolidatePaths(paths) {\n        var consolidatedPath = [];\n\n        if (paths != null) {\n\n            /*\n             * continue until all the paths are empty. as we consolidate\n             * node ids, we will remove them from the paths. once all the\n             * paths are empty we will be done consolidating the paths.\n             */\n            while(!this.arePathsEmpty(paths)) {\n\n                // start with the first path\n                var currentPath = this.getNonEmptyPathIndex(paths);\n\n                // get the first node id in the current path\n                var nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n\n                if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                    // the first node ids in all the paths are the same\n\n                    // remove the node id from all the paths\n                    this.removeNodeIdFromPaths(nodeId, paths);\n\n                    // add the node id to our consolidated path\n                    consolidatedPath.push(nodeId);\n                } else {\n                    // not all the top node ids are the same which means we have branched\n\n                    // get all the paths that contain the node id\n                    var pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n                    if (pathsThatContainNodeId != null) {\n                        if (pathsThatContainNodeId.length === 1) {\n                            // only the current path we are on has the node id\n\n                            // remove the node id from the path\n                            this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n                            // add the node id to our consolidated path\n                            consolidatedPath.push(nodeId);\n                        } else {\n                            // there are multiple paths that have this node id\n\n                            // consume all the node ids up to the given node id\n                            var consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n                            // remove the node id from the paths\n                            this.removeNodeIdFromPaths(nodeId, paths);\n\n                            // add the node id to the end of the consumed path\n                            consumedPath.push(nodeId);\n\n                            // add the consumed path to our consolidated path\n                            consolidatedPath = consolidatedPath.concat(consumedPath);\n                        }\n                    }\n                }\n\n            }\n        }\n\n        return consolidatedPath;\n    };\n\n    /**\n     * Consume the node ids in the paths until we get to the given node id\n     * @param paths the paths to consume\n     * @param nodeId the node id to stop consuming at\n     * @return an array of node ids that we have consumed\n     */\n    consumePathsUntilNodeId(paths, nodeId) {\n        var consumedNodeIds = [];\n\n        if (paths != null && nodeId != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id to stop consuming at\n                if (path != null && path.indexOf(nodeId) != -1) {\n                    /*\n                     * the path does contain the node id to stop consuming at\n                     * so we will consume the node ids in this path until\n                     * we get to the given node id to stop consuming at\n                     */\n\n                    // loop through the node ids in the path\n                    for (var x = 0; x < path.length; x++) {\n\n                        // get a node id\n                        var tempNodeId = path[x];\n\n                        if (nodeId === tempNodeId) {\n                            /*\n                             * the node id is the same as the one we need to\n                             * stop consuming at so we will stop looking\n                             * at this path\n                             */\n                            break;\n                        } else {\n                            /*\n                             * the node id is not the one that we need to stop consuming at\n                             * so we will consume it\n                             */\n\n                            // get all the paths that contain the node id\n                            var pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n                            if (pathsThatContainNodeId.length === 1) {\n                                // there is only one path with this node id\n\n                                // remove the node id from the path\n                                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            } else {\n                                // there are multiple paths with this node id\n\n                                // tempNodeId must come before nodeId\n\n                                var pathsToConsume = [];\n\n                                // loop through all the paths that contain the node id\n                                for (var g = 0; g < pathsThatContainNodeId.length; g++) {\n\n                                    // get a path that contains the node id\n                                    var pathThatContainsNodeId = pathsThatContainNodeId[g];\n\n                                    // get the index of the node id we want to remove\n                                    var tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                                    // get the index of the node id we want to stop consuming at\n                                    var nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                                    /*\n                                     * check if the node id we want to remove comes before\n                                     * the node id we want to stop consuming at. we need to\n                                     * do this to prevent an infinite loop. an example of\n                                     * when this can happen is if there are two paths\n                                     *\n                                     * path1 = 1, 2, 3, 4, 5\n                                     * path2 = 1, 2, 4, 3, 5\n                                     *\n                                     * as we consume path1 we will need to consume 3. in order to\n                                     * consume 3, we must consume consume up to 3 in path2.\n                                     * in order to consume up to 3 in path2 we must consume 4.\n                                     * in order to consume 4, we must consume everything before\n                                     * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                                     * this means we need to consume 3 which brings us back up\n                                     * to the top of this paragraph creating an infinite loop.\n                                     *\n                                     * this check below will prevent infinite loops by only\n                                     * adding paths that have the tempNodeId come before the\n                                     * nodeId to stop consuming at.\n                                     */\n                                    if (tempNodeIdIndex < nodeIdIndex) {\n                                        pathsToConsume.push(pathThatContainsNodeId);\n                                    }\n                                }\n\n                                /*\n                                 * take the paths that contain the given node id and consume\n                                 * the paths until the given node id\n                                 */\n                                var tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                                // remove the node id from the paths that contain it\n                                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                                // add the temp consumed node ids to our consumed node ids array\n                                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        return consumedNodeIds;\n    };\n\n    /**\n     * Get the path at the given index and get the first node id in\n     * the path\n     * @param paths an array of paths. each path is an array of node ids\n     * @param index the index of the path we want\n     * @return the first node in the given path\n     */\n    getFirstNodeIdInPathAtIndex(paths, index) {\n        var nodeId = null;\n\n        if (paths != null && index != null) {\n            // get the path at the given index\n            var path = paths[index];\n\n            if (path != null && path.length > 0) {\n                // get the first node id in the path\n                nodeId = path[0];\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Remove the node ifrom the paths\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     */\n    removeNodeIdFromPaths(nodeId, paths) {\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove the node id from the path\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     * @param pathIndex the path to remove from\n     */\n    removeNodeIdFromPath(nodeId, paths, pathIndex) {\n\n        if (nodeId != null && paths != null && pathIndex != null) {\n\n            // get the path at the given index\n            var path = paths[pathIndex];\n\n            if (path != null) {\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a ndoe id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if the first node ids in the paths are the same\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths have the same first node id\n     */\n    areFirstNodeIdsInPathsTheSame(paths) {\n        var result = true;\n\n        var nodeId = null;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // get the first node id in the path\n                var tempNodeId = path[0];\n\n                if (nodeId == null) {\n                    /*\n                     * this is the first path we have looked at so we will\n                     * remember the node id\n                     */\n                    nodeId = tempNodeId;\n                } else if (nodeId != tempNodeId) {\n                    /*\n                     * the node id does not match the first node id from a\n                     * previous path so the paths do not all have the same\n                     * first node id\n                     */\n                    result = false;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if all the paths are empty\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths are empty\n     */\n    arePathsEmpty(paths) {\n        var result = true;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the length of the path\n                    if (path.length !== 0) {\n                        // the path is not empty\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the paths that contain the node id\n     * @param nodeId the node id we are looking for\n     * @param paths an array of paths. each path is an array of node ids\n     * @return an array of paths that contain the given node id\n     */\n    getPathsThatContainNodeId(nodeId, paths) {\n        var pathsThatContainNodeId = [];\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id\n                if (path.indexOf(nodeId) != -1) {\n                    /*\n                     * add the path to the array of paths that contain\n                     * the node id\n                     */\n                    pathsThatContainNodeId.push(path);\n                }\n            }\n        }\n\n        return pathsThatContainNodeId;\n    };\n\n    /**\n     * Get a non empty path index. It will loop through the paths and\n     * return the index of the first non empty path.\n     * @param paths an array of paths. each path is an array of node ids\n     * @return the index of the path that is not empty\n     */\n    getNonEmptyPathIndex(paths) {\n        var index = null;\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // check the length of the path\n                if (path.length !== 0) {\n                    // the path is not empty so we will return this index\n                    index = p;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get the branches in the project\n     */\n    getBranches() {\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the paths in the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // find the branches in the project from the paths\n        var branches = this.findBranches(allPaths);\n\n        return branches;\n    };\n\n    /**\n     * Find the branches in the project\n     * @param paths all the possible paths through the project\n     * @return an array of branch objects. each branch object contains\n     * the branch start point, the branch paths, and the branch\n     * end point\n     */\n    findBranches(paths) {\n        var branches = [];\n\n        var previousNodeId = null;\n\n        /*\n         * continue until all the paths are empty. we will remove\n         * node ids from the paths as we traverse the paths to find\n         * the branches\n         */\n        while (!this.arePathsEmpty(paths)) {\n\n            // get the first node id in the first path\n            var nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n            if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                // the first node ids in all the paths are the same\n\n                // remove the node id from all the paths\n                this.removeNodeIdFromPaths(nodeId, paths);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nodeId;\n            } else {\n                // not all the top node ids are the same which means we have branched\n\n                // create a branch object\n                var branchMetaObject = this.createBranchMetaObject(previousNodeId);\n                branchMetaObject.branchStartPoint = previousNodeId;\n\n                // find the branch end point\n                var nextCommonNodeId = this.findNextCommonNodeId(paths);\n                branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n                // get the branch paths\n                var branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n                branchPaths = this.removeDuplicatePaths(branchPaths);\n                branchMetaObject.branchPaths = branchPaths;\n\n                // add the branch object to our array\n                branches.push(branchMetaObject);\n\n                // trim the paths so that they start at the branch end point\n                this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nextCommonNodeId;\n            }\n        }\n\n        return branches;\n    };\n\n    /**\n     * Create a branch meta object that will contain the branch start\n     * point, branch paths, and branch end point\n     * @return an object that contains a branch start point, branch paths,\n     * and a branch end point\n     */\n    createBranchMetaObject() {\n        var branchMetaObject = {};\n\n        branchMetaObject.branchStartPoint = null;\n        branchMetaObject.branchPaths = [];\n        branchMetaObject.branchEndPoint = null;\n\n        return branchMetaObject;\n    };\n\n    /**\n     * Find the next common node id in all the paths\n     * @param paths the paths to find the common node id in\n     * @return a node id that is in all the paths or null\n     * if there is no node id that is in all the paths\n     */\n    findNextCommonNodeId(paths) {\n        var nextCommonNodeId = null;\n        var subPaths = [];\n\n        if (paths != null) {\n            if (paths.length > 0) {\n                // get the first path\n                var path = paths[0];\n\n                // loop through all the node ids in the first path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    // check if the node id is in all the paths\n                    if (this.allPathsContainNodeId(paths, tempNodeId)) {\n                        /*\n                         * the node id is in all the paths so we have found\n                         * what we were looking for\n                         */\n                        nextCommonNodeId = tempNodeId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextCommonNodeId;\n    };\n\n    /**\n     * Check if all the paths contain the node id\n     * @param paths an array of paths. each path contains an array of node ids\n     * @param nodeId the node id that we will check is in all the paths\n     * @return whether the node id is in all the paths\n     */\n    allPathsContainNodeId(paths, nodeId) {\n        var result = false;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // get the index of the node id in the path\n                var index = path.indexOf(nodeId);\n\n                if (index == -1) {\n                    // the node id is not in the path\n                    result = false;\n                    break;\n                } else {\n                    // the node id is in the path\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Trim the paths up to the given node id so that the paths will contain\n     * the given node id and all the node ids after it. This function will\n     * modify the paths.\n     * @param paths the paths to trim\n     * @param nodeId the node id to trim up to\n     */\n    trimPathsUpToNodeId(paths, nodeId) {\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * trim the path to the end which will make\n                         * the path empty\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * trim the path up to the node id index. this will\n                     * modify the path array.\n                     */\n                    path.splice(0, index);\n                }\n            }\n        }\n    };\n\n\n    /**\n     * Extract the paths up to a given node id. This will be used to\n     * obtain branch paths.\n     * @param paths the paths to extract from\n     * @param nodeId the node id to extract up to\n     * @return paths that go up to but do not include the node id\n     */\n    extractPathsUpToNodeId(paths, nodeId) {\n        var extractedPaths = [];\n\n        if (paths != null) {\n            // loop through the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * extract up to the end of the path\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * get the path up to the node id index. this does\n                     * not modify the path array.\n                     */\n                    var extractedPath = path.slice(0, index);\n\n                    // add the\n                    extractedPaths.push(extractedPath);\n                }\n            }\n        }\n\n        return extractedPaths;\n    };\n\n    /**\n     * Removes duplicate paths\n     * @param paths an array of paths. each path contains an array of node ids\n     * @return an array of unique paths\n     */\n    removeDuplicatePaths(paths) {\n        var uniquePaths = [];\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                var isPathInUniquePaths = false;\n\n                // loop through all the unique paths so far\n                for (var u = 0; u < uniquePaths.length; u++) {\n                    // get a unique path\n                    var uniquePath = uniquePaths[u];\n\n                    // check if the paths are equal\n                    if (this.pathsEqual(path, uniquePath)) {\n                        // the paths are equal\n                        isPathInUniquePaths = true;\n                    }\n                }\n\n                if (!isPathInUniquePaths) {\n                    // the path is not equal to any paths in the unique\n                    // paths array so we will add it to the unique paths array\n                    uniquePaths.push(path);\n                }\n            }\n        }\n\n        return uniquePaths;\n    };\n\n    /**\n     * Check if two paths are equal\n     * @param path1 an array of node ids\n     * @param path2 an array of node ids\n     * @return whether the two paths contain the same node ids\n     * in the same order\n     */\n    pathsEqual(path1, path2) {\n        var result = false;\n\n        if (path1 != null && path2 != null) {\n\n            // check if the paths are the same length\n            if (path1.length === path2.length) {\n                result = true;\n\n                // loop through each element of the first path\n                for (var x = 0; x < path1.length; x++) {\n                    // get the node id from the first path\n                    var path1NodeId = path1[x];\n\n                    // get the node id from the second path\n                    var path2NodeId = path2[x];\n\n                    // check if the node ids are the same\n                    if (path1NodeId !== path2NodeId) {\n                        // the node ids are not the same to the paths are not equal\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id is in any branch\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return whether the node id is in any branch\n     */\n    isNodeIdInABranch(branches, nodeId) {\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branch objects\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch object\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths for this branch object\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // check if the node id is in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    // the node id is in this branch path\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Get the branch paths that a node id is in\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return an array of the branch paths that the node id is in\n     */\n    getBranchPathsByNodeId(branches, nodeId) {\n        var branchPathsIn = [];\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // get the index of the node id in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    /*\n                                     * the node is in this branch path so we will\n                                     * add the branch path to our array\n                                     */\n                                    branchPathsIn.push(branchPath);\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathsIn;\n    }\n\n    /**\n     * Get the component by node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n     */\n    getComponentByNodeIdAndComponentId(nodeId, componentId) {\n        var component = null;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n\n        }\n\n        return component;\n    };\n\n    /**\n     * Returns the position of the component in the node by node id and component id, 0-indexed.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component's position or -1 if nodeId or componentId are null or doesn't exist in the project.\n     */\n    getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n        var componentPosition = -1;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        componentPosition = c;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return componentPosition;\n    };\n\n    /**\n     * Get the components in a node\n     * @param nodeId the node id\n     * @returns an array of components or empty array if nodeId is null or doesn't exist in the project.\n     * if the node exists but doesn't have any components, returns an empty array.\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the components\n                if (node.components != null) {\n                    components = node.components;\n                }\n            }\n        }\n\n        return components;\n    };\n\n    getNodeContentByNodeId(nodeId) {\n        var nodeContent = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                nodeContent = node.content;\n            }\n        }\n\n        return nodeContent;\n    };\n\n    /**\n     * Replace a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param component the new component\n     */\n    replaceComponent(nodeId, componentId, component) {\n\n        if (nodeId != null && componentId != null && component != null) {\n\n            // get all the components for the node\n            var components = this.getComponentsByNodeId(nodeId);\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        if (tempComponent.id === componentId) {\n                            // the component id matches the one we want so we will replace it\n                            components[c] = component;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a new group\n     * @param title the title of the group\n     * @returns the group object\n     */\n    createGroup(title) {\n\n        // get the next available group id\n        var newGroupId = this.getNextAvailableGroupId();\n\n        // create the group object\n        var newGroup = {};\n        newGroup.id = newGroupId;\n        newGroup.type = 'group';\n        newGroup.title = title;\n        newGroup.startId = '';\n        newGroup.ids = [];\n\n        return newGroup;\n    };\n\n    /**\n     * Create a new node\n     * @param title the title of the node\n     * @returns the node object\n     */\n    createNode(title) {\n\n        // get the next available node id\n        var newNodeId = this.getNextAvailableNodeId();\n\n        // create the node object\n        var newNode = {};\n        newNode.id = newNodeId;\n        newNode.title = title;\n        newNode.type = 'node';\n        newNode.constraints = [];\n        newNode.transitionLogic = {};\n\n        newNode.showSaveButton = true;\n        newNode.showSubmitButton = false;\n        newNode.components = [];\n\n        return newNode;\n    };\n\n    /**\n     * Create a node inside the group\n     * @param node the new node\n     * @param nodeId the node id of the group\n     */\n    createNodeInside(node, nodeId) {\n\n        // add the node to the project\n        this.addNode(node);\n\n        // add the node to our mapping of node id to node\n        this.setIdToNode(node.id, node);\n\n        // get the group node\n        var groupNode = this.getNodeById(nodeId);\n\n        if (groupNode != null) {\n            var ids = groupNode.ids;\n\n            if (ids != null) {\n                // add the node id to the beginning of the array of children ids\n                ids.splice(0, 0, node.id);\n            }\n        }\n\n        // get the start node id\n        var previousStartId = groupNode.startId;\n\n        // set the new node as the start node\n        groupNode.startId = node.id;\n\n        if (node.transitionLogic == null) {\n            node.transitionLogic = {};\n        }\n\n        if (node.transitionLogic.transitions == null) {\n            node.transitionLogic.transitions = [];\n        }\n\n        if (previousStartId != null && previousStartId != '') {\n            // have the new node point to the previous start id\n            var transitionObject = {};\n            transitionObject.to = previousStartId;\n            node.transitionLogic.transitions.push(transitionObject);\n        }\n    }\n\n    /**\n     * Create a node after the given node id\n     * @param node the new node\n     * @param nodeId the node to add after\n     */\n    createNodeAfter(node, nodeId) {\n\n        // add the node to the project\n        this.addNode(node);\n\n        // add the node to our mapping of node id to node\n        this.setIdToNode(node.id, node);\n\n        // insert the new node id into the array of children ids\n        this.insertNodeAfterInGroups(node.id, nodeId);\n\n        if (!this.isGroupNode(node.id)) {\n            // the node is not a group so we will update the transitions\n            this.insertNodeAfterInTransitions(node, nodeId);\n        }\n    }\n\n    /**\n     * Insert the node after the given node id in the group's\n     * array of children ids\n     * @param nodeIdToInsert the node id we want to insert\n     * @param nodeIdToInsertAfter the node id we want to insert after\n     */\n    insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n        var groupNodes = this.getGroupNodes();\n\n        if (groupNodes != null) {\n\n            // loop through the groups\n            for (var g = 0; g < groupNodes.length; g++) {\n                var group = groupNodes[g];\n\n                if (group != null) {\n                    var ids = group.ids;\n\n                    if (ids != null) {\n\n                        // loop through the children ids\n                        for (var i = 0; i < ids.length; i++) {\n                            var id = ids[i];\n\n                            if (nodeIdToInsertAfter === id) {\n                                // we have found the node id we want to insert after\n\n                                // insert the new node id\n                                ids.splice(i + 1, 0, nodeIdToInsert);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node after another node\n     * @param node the node to insert\n     * @param nodeId the node id to insert after\n     */\n    insertNodeAfterInTransitions(node, nodeId) {\n\n        // get the node that will end up before\n        var previousNode = this.getNodeById(nodeId);\n\n        if (previousNode != null) {\n\n            if (previousNode.transitionLogic == null) {\n                previousNode.transitionLogic = {};\n            }\n\n            var previousNodeTransitionLogic = previousNode.transitionLogic;\n\n            if (previousNodeTransitionLogic != null) {\n\n                // get the transitions from the before node\n                var transitions = previousNodeTransitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // make a copy of the transitions\n                    var transitionsJSONString = angular.toJson(transitions);\n                    var transitionsCopy = angular.fromJson(transitionsJSONString);\n\n                    if (node.transitionLogic == null) {\n                        node.transitionLogic = {};\n                    }\n\n                    // set the transitions from the before node into the inserted node\n                    node.transitionLogic.transitions = transitionsCopy;\n                }\n            }\n\n            var newNodeId = node.id;\n\n            // TODO handle branching case\n\n            // remove the transitions from the before node\n            previousNode.transitionLogic.transitions = [];\n\n            var transitionObject = {};\n            transitionObject.to = newNodeId;\n\n            // make the before node point to the new node\n            previousNode.transitionLogic.transitions.push(transitionObject);\n        }\n    }\n\n    /**\n     * Insert a node into a group\n     * @param nodeIdToInsert the node id to insert\n     * @param nodeIdToInsertInside the node id of the group we will insert into\n     */\n    insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the group we will insert into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (group != null) {\n            var ids = group.ids;\n\n            if (ids != null) {\n\n                // insert the node node id into the beginning of the child ids\n                ids.splice(0, 0, nodeIdToInsert);\n\n                // set the inserted node id as the start id\n                group.startId = nodeIdToInsert;\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node into a group\n     * @param nodeIdToInsert node id that we will insert\n     * @param nodeIdToInsertInside the node id of the group we are inserting into\n     */\n    insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the node we are inserting\n        var nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n        // get the group we are inserting into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (nodeToInsert != null && group != null) {\n\n            // get the start node\n            var startId = group.startId;\n            var startNode = this.getNodeById(startId);\n            \n            if (startNode != null) {\n                // the group has a start node which will become the transition to node\n                \n                if (nodeToInsert.transitionLogic == null) {\n                    nodeToInsert.transitionLogic = {};\n                }\n    \n                if (nodeToInsert.transitionLogic.transitions == null) {\n                    nodeToInsert.transitionLogic.transitions = [];\n                }\n    \n                /*\n                 * make the inserted node transition to the previous start node\n                 */\n                var transitionObject = {};\n                transitionObject.to = startId;\n                nodeToInsert.transitionLogic.transitions.push(transitionObject);\n            }\n        }\n    }\n\n    /**\n     * Get the next available group id\n     * @returns the next available group id\n     */\n    getNextAvailableGroupId() {\n\n        // get all the group ids\n        var groupIds = this.getGroupIds();\n        \n        var largestGroupIdNumber = null;\n        \n        // loop through all the existing group ids\n        for (var g = 0; g < groupIds.length; g++) {\n            var groupId = groupIds[g];\n            \n            // get the number from the group id e.g. the number of 'group2' would be 2\n            var groupIdNumber = groupId.replace('group', '');\n            \n            // make sure the number is an actual number\n            if (!isNaN(groupIdNumber)) {\n            \n                groupIdNumber = parseInt(groupIdNumber);\n                \n                // update the largest group id number if necessary\n                if (largestGroupIdNumber == null) {\n                    largestGroupIdNumber = groupIdNumber;\n                } else if (groupIdNumber > largestGroupIdNumber) {\n                    largestGroupIdNumber = groupIdNumber;\n                }\n            }\n        }\n        \n        // create the next available group id\n        var nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n        \n        return nextAvailableGroupId;\n    }\n\n    /**\n     * Get all the group ids\n     * @returns an array with all the group ids\n     */\n    getGroupIds() {\n\n        var groupIds = [];\n\n        var groupNodes = this.groupNodes;\n\n        // loop through all the group nodes\n        for (var g = 0; g < groupNodes.length; g++) {\n            var group = groupNodes[g];\n\n            if (group != null) {\n                var groupId = group.id;\n\n                if (groupId != null) {\n                    // add the group id\n                    groupIds.push(groupId);\n                }\n            }\n        }\n\n        return groupIds;\n    }\n\n    /**\n     * Get the next available node id\n     * @returns the next available node id\n     */\n    getNextAvailableNodeId() {\n\n        // get all the node ids\n        var nodeIds = this.getNodeIds();\n        \n        var largestNodeIdNumber = null;\n        \n        // loop through all the existing node ids\n        for (var n = 0; n < nodeIds.length; n++) {\n            var nodeId = nodeIds[n];\n            \n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = nodeId.replace('node', '');\n            \n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n                \n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n        \n        // create the next available node id\n        var nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n        \n        return nextAvailableNodeId;\n    }\n\n    /**\n     * Get all the node ids from steps (not groups)\n     * @returns an array with all the node ids\n     */\n    getNodeIds() {\n\n        var nodeIds = [];\n\n        var nodes = this.applicationNodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n                    nodeIds.push(nodeId);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Move nodes inside a group node\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id of the group we are moving the nodes inside\n     */\n    moveNodesInside(nodeIds, nodeId) {\n\n        // loop thorugh all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var tempNode = this.getNodeById(tempNodeId);\n\n            // remove the node from the group\n            this.removeNodeIdFromGroups(tempNodeId);\n            \n            // remove the node from the transitions\n            this.removeNodeIdFromTransitions(tempNodeId);\n\n            if (n == 0) {\n                /*\n                 * this is the first node we are moving so we will insert it\n                 * into the beginning of the group\n                 */\n                this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                this.insertNodeInsideInGroups(tempNodeId, nodeId);\n            } else {\n                /*\n                 * this is not the first node we are moving so we will insert\n                 * it after the node we previously inserted\n                 */\n                this.insertNodeAfterInTransitions(tempNode, nodeId);\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n            }\n\n            /*\n             * remember the node id so we can put the next node (if any)\n             * after this one\n             */\n            nodeId = tempNode.id;\n        }\n    }\n\n    /**\n     * Move nodes after a certain node id\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id we will put the moved nodes after\n     */\n    moveNodesAfter(nodeIds, nodeId) {\n\n        // loop through all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var node = this.getNodeById(tempNodeId);\n\n            // remove the node from the groups\n            this.removeNodeIdFromGroups(tempNodeId);\n            \n            if (!this.isGroupNode(node.id)) {\n                // this is not a group node so we will remove it from transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n            }\n\n            // insert the node into the parent group\n            this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n            if (!this.isGroupNode(node.id)) {\n                // this is not a group node so we will insert it into transitions\n                this.insertNodeAfterInTransitions(node, nodeId);\n            }\n\n            /*\n             * remember the node id so we can put the next node (if any)\n             * after this one\n             */\n            nodeId = node.id;\n        }\n    }\n\n    /**\n     * Delete a node\n     * @param nodeId the node id\n     */\n    deleteNode(nodeId) {\n\n        if (this.isGroupNode(nodeId)) {\n            // the node is a group node so we will also remove all of its children\n            var group = this.getNodeById(nodeId);\n\n            // TODO check if the child is in another group, if so do not remove\n\n            if (group != null) {\n                var ids = group.ids;\n\n                // loop through all the children\n                for (var i = 0; i < ids.length; i++) {\n                    var id = ids[i];\n\n                    // remove the child\n                    this.removeNodeIdFromGroups(id);\n                    this.removeNodeIdFromTransitions(id);\n                    this.removeNodeIdFromNodes(id);\n\n                    /*\n                     * move the counter back because we have removed a child\n                     * from the parent group's array of child ids so all of\n                     * the child ids were shifted back one and the next child\n                     * we want will be at i--\n                     */\n                    i--;\n                }\n            }\n        }\n        \n        var parentGroup = this.getParentGroup(nodeId);\n        \n        // check if we need to update the start id of the parent group\n        if (parentGroup != null) {\n        \n            /*\n             * the node is the start node of the parent group so we need\n             * to update the start id of the parent group to point to\n             * the next node\n             */\n            if (nodeId === parentGroup.startId) {\n            \n                var hasSetNewStartId = false;\n\n                // get the node\n                var node = this.getNodeById(nodeId);\n                \n                if (node != null) {\n                    var transitionLogic = node.transitionLogic;\n                    \n                    if (transitionLogic != null) {\n                        var transitions = transitionLogic.transitions;\n                        \n                        if (transitions != null && transitions.length > 0) {\n                            var transition = transitions[0];\n                            \n                            if (transition != null) {\n                                var toNodeId = transition.to;\n                                \n                                if (toNodeId != null) {\n                                    // update the parent group start id\n                                    parentGroup.startId = toNodeId;\n                                    hasSetNewStartId = true;\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                if (!hasSetNewStartId) {\n                    parentGroup.startId = '';\n                }\n            }\n        }\n\n        // remove the node\n        this.removeNodeIdFromGroups(nodeId);\n        this.removeNodeIdFromTransitions(nodeId);\n        this.removeNodeIdFromNodes(nodeId);\n    }\n\n    /**\n     * Update the transitions to handle removing a node\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromTransitions(nodeId) {\n\n        // get the node we are removing\n        var nodeToRemove = this.getNodeById(nodeId);\n\n        // get all the nodes that have a transition to the node we are removing\n        var nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n        // get the transitions of the node we are removing\n        var nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n        var nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null) {\n            nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        // loop through all the nodes that transition to the node we are removing\n        for (var n = 0; n < nodesByToNodeId.length; n++) {\n\n            // get a node that has a transition to the node we are removing\n            var node = nodesByToNodeId[n];\n\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                // loop through all the transitions of this node\n                for (var t = 0; t < transitions.length; t++) {\n                    var transition = transitions[t];\n\n                    if (nodeId === transition.to) {\n                        // we have found the transition to the node we are removing\n\n                        // copy the transitions from the node we are removing\n                        var transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n                        transitionsCopy = angular.fromJson(transitionsCopy);\n\n                        // remove the transition to the node we are removing\n                        transitions.splice(t, 1);\n\n                        // insert the transitions from the node we are removing\n                        transitions = transitions.slice(0, t).concat(transitionsCopy).concat(transitions.slice(t + 1));\n                    }\n                }\n\n                // set the transitions into the node that transitions to the node we are removing\n                transitionLogic.transitions = transitions;\n            }\n        }\n\n        if (nodeToRemoveTransitionLogic != null) {\n            // clear the transitions of the node we are removing\n            nodeToRemoveTransitionLogic.transitions = [];\n        }\n    };\n\n    /**\n     * Remove the node id from a group\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromGroups(nodeId) {\n\n        var groups = this.groupNodes;\n\n        if (groups != null) {\n\n            // loop through all the groups\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n\n                    // get the start id of the group\n                    var startId = group.startId;\n\n                    // get the child ids of the group\n                    var ids = group.ids;\n\n                    // loop through all the child ids\n                    for (var i = 0; i < ids.length; i++) {\n                        var id = ids[i];\n\n                        if (nodeId === id) {\n                            // we have found the node id we want to remove\n                            ids.splice(i, 1);\n\n                            if (nodeId === startId) {\n                                /*\n                                 * the node id is also the start id so we will get the\n                                 * next node id and set it as the new start id\n                                 */\n                                \n                                var hasSetNewStartId = false;\n\n                                // get the node we are removing\n                                var node = this.getNodeById(id);\n\n                                if (node != null) {\n                                    var transitionLogic = node.transitionLogic;\n\n                                    if (transitionLogic != null) {\n                                        var transitions = transitionLogic.transitions;\n\n                                        if (transitions != null && transitions.length > 0) {\n\n                                            // get the first transition\n                                            // TODO handle the case when the node we are removing is a branch point\n                                            var transition = transitions[0];\n\n                                            if (transition != null) {\n                                                // get the node that this node transitions to\n                                                var to = transition.to;\n\n                                                if (to != null) {\n                                                    // set the to node as the start id\n                                                    group.startId = to;\n                                                    hasSetNewStartId = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                \n                                if (!hasSetNewStartId) {\n                                    /*\n                                     * the node we are removing did not have a transition\n                                     * so there will be no start id\n                                     */\n                                    group.startId = '';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the array of nodes\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromNodes(nodeId) {\n\n        // get all the nodes in the project\n        var nodes = this.project.nodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                if (nodeId === node.id) {\n                    // we have found the node we want to remove\n                    nodes.splice(n, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a new component\n     * @param nodeId the node id to create the component in\n     * @param componentType the component type\n     */\n    createComponent(nodeId, componentType) {\n\n        if (nodeId != null && componentType != null) {\n            // get the node we will create the component in\n            var node = this.getNodeById(nodeId);\n\n            // get the service for the node type\n            var service = this.$injector.get(componentType + 'Service');\n\n            if (node != null && service != null) {\n\n                // create the new component\n                var component = service.createComponent();\n\n                // add the component to the node\n                this.addComponentToNode(node, component);\n            }\n        }\n    }\n\n    /**\n     * Add the component to the node\n     * @param node the node\n     * @param component the component\n     */\n    addComponentToNode(node, component) {\n\n        if (node != null && component != null) {\n            node.components.push(component);\n        }\n    }\n\n    /**\n     * Move the component up within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentUp(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the first component because\n                             * the first component can't be moved up\n                             */\n                            if (c != 0) {\n                                // this is not the first component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index back\n                                components.splice(c - 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the component down within the node\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    moveComponentDown(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to move\n\n                            /*\n                             * make sure this is not the last component because\n                             * the last component can't be moved down\n                             */\n                            if (c != components.length - 1) {\n                                // this is not the last component\n\n                                // remove the component\n                                components.splice(c, 1);\n\n                                // put the component back in at the position one index ahead\n                                components.splice(c + 1, 0, component);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete the component\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    deleteComponent(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to delete\n\n                            // remove the component\n                            components.splice(c, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the max score for the project\n     * @returns the max score for the project or null if none of the components in the project\n     * has max scores.\n     */\n    getMaxScore() {\n\n        var maxScore = null;\n\n        var nodes = this.project.nodes;\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n\n                    var components = node.components;\n\n                    if (components != null) {\n\n                        // loop through all the components\n                        for (var c = 0; c < components.length; c++) {\n                            var component = components[c];\n\n                            if (component != null) {\n\n                                var componentMaxScore = component.maxScore;\n\n                                // check if the component has a max score\n                                if (componentMaxScore != null) {\n\n                                    // make sure the max score is a valid number\n                                    if (!isNaN(componentMaxScore)) {\n\n                                        if (maxScore == null) {\n                                            maxScore = componentMaxScore;\n                                        } else {\n                                            maxScore += componentMaxScore;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n    \n    /**\n     * Determine if a node id is a direct child of a group\n     * @param nodeId the node id\n     * @param groupId the group id\n     */\n    isNodeInGroup(nodeId, groupId) {\n    \n        var result = false;\n        \n        var group = this.getNodeById(groupId);\n        \n        var childIds = group.ids;\n        \n        if (childIds != null) {\n            if (childIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Get the first leaf node by traversing all the start ids\n     * until a leaf node id is found\n     */\n    getFirstLeafNodeId() {\n        \n        var firstLeafNodeId = null;\n        \n        // get the start group id\n        var startGroupId = this.project.startGroupId;\n        \n        // get the start group node\n        var node = this.getNodeById(startGroupId);\n        \n        var done = false;\n        \n        // loop until we have found a leaf node id or something went wrong\n        while(!done) {\n            \n            if (node == null) {\n                done = true;\n            } else if (this.isGroupNode(node.id)) {\n                // the current node is a group\n                node = this.getNodeById(node.startId);\n            } else if (this.isApplicationNode(node.id)) {\n                // the current node is a leaf\n                firstLeafNodeId = node.id;\n                done = true;\n            } else {\n                done = true;\n            }\n        }\n        \n        return firstLeafNodeId;\n    }\n}\n\nProjectService.$inject = [\n    '$http',\n    '$injector',\n    '$rootScope',\n    'ConfigService'\n];\n\nexport default ProjectService;\n"]}