{"version":3,"sources":["projectService.es6"],"names":["ProjectService","$filter","$http","$injector","$q","$rootScope","ConfigService","UtilService","project","transitions","applicationNodes","inactiveStepNodes","inactiveGroupNodes","groupNodes","idToNode","idToElement","metadata","activeConstraints","rootNode","idToPosition","idToOrder","nodeCount","componentServices","nodeIdToNumber","nodeIdToIsInBranchPath","nodeIdToBranchPathLetter","achievements","isNodeAffectedByConstraintResult","$translate","additionalProcessingFunctionsMap","filters","parseProject","style","name","getProjectMetadata","title","projectTitle","nodes","planningNodes","nodeId","childIds","node","getNodeById","ids","id","result","getNodes","n","length","transition","existingTransitions","getTransitions","replaced","t","existingTransition","splice","push","existingNodes","existingNode","existingNodeId","$broadcast","groupId","group","groupChildNodeIds","indexOf","groupNode","type","applicationNode","nodeType","content","constraints","setIdToNode","setIdToElement","addNode","addGroupNode","addApplicationNode","addNodeToGroupNode","isPreview","getConfigParam","c","constraint","p","planningNode","clearProjectFields","loadNodes","loadPlanningNodes","inactiveNodes","loadInactiveNodes","constraintId","active","getRootNode","setNodeOrder","branches","getBranches","branchNodeIds","pos","setIdToPosition","isNodeIdInABranch","getPositionById","b","getBranchNodePositionById","calculateNodeNumbers","isGroupNode","i","child","getMode","planningIds","availablePlanningNodes","a","startGroupId","stepNumber","importProjectIdToOrder","getNodeOrderOfProjectHelper","item","childId","childStepNumber","path","getPathToNode","undefined","order","getIdByOrder","integerToAlpha","int","alphabet","branch","branchPaths","branchPath","nodeIndex","startPoint","branchStartPoint","startPointPos","branchPathPos","num","position","Object","entries","value","element","contentString","JSON","stringify","replaceAssetPaths","parse","contentBaseURL","replace","RegExp","matchedString","delimiter","matchedStringWithoutQuotes","substr","charAt","injectClickToSnipImageIntoContentString","imgMatcher","matchGroup1","newString","tempNode","getNodePositionById","nodeIcon","defaultName","color","fontSet","fontName","imgSrc","imgAlt","icons","default","icon","$","extend","getGroupNodes","g","isNodeDirectChildOfGroup","getInactiveGroupNodes","ig","inactiveGroupNode","parentGroupId","parentGroup","getParentGroup","val","depth","parent","getNodeDepth","groupIds","descendents","getDescendentsOfGroup","childDescendents","concat","projectStartId","getStartNodeId","groups","getGroups","groupStartId","startId","startNodeId","allConstraints","isNodeAffectedByConstraint","rememberedResult","getIsNodeAffectedByConstraintResult","targetId","action","isNodeIdAfter","targetNode","isNodeDescendentOfGroup","setIsNodeAffectedByConstraintResult","nodeIdBefore","nodeIdAfter","isApplicationNode","pathsToEnd","getAllPaths","pathToEnd","index","parentGroupIndex","getTransitionsByFromNodeId","toNodeId","to","navigationMode","componentId","component","getComponentByNodeIdAndComponentId","componentType","componentService","get","getPossibleTransitionCriteria","fromNodeId","transitionLogic","getTransitionLogicByFromNodeId","nodesByToNodeId","nodeIds","getNodesByToNodeId","groupsThatPointToNodeId","hasTransitionTo","transitionsResults","projectURL","Date","getTime","then","projectJSON","data","setProject","projectId","configURL","window","configJSON","previewProjectURL","commitMessage","cleanupBeforeSave","getProjectId","saveProjectURL","projectJSONString","angular","toJson","httpParams","method","url","headers","params","param","commitHistory","notifyProjectBeginURL","otherAuthors","resolve","reject","notifyProjectEndURL","activeNodes","getActiveNodes","activeNode","checked","getInactiveNodes","inactiveNode","copyProjectURL","registerNewProjectURL","e","Error","commitProjectURL","wiseBaseURL","getWISEBaseURL","theme","themeSettings","pathsSoFar","allPaths","consolidatePaths","pathSoFar","includeGroups","addedCurrentNodeId","getParentGroupId","parentGroupTransitions","parentGroupTransition","allPathsFromToNode","tempPath","unshift","transitionResult","firstNodeId","firstParentGroupId","lastNodeId","pop","ap","paths","consolidatedPath","arePathsEmpty","currentPath","getNonEmptyPathIndex","getFirstNodeIdInPathAtIndex","areFirstNodeIdsInPathsTheSame","removeNodeIdFromPaths","pathsThatContainNodeId","getPathsThatContainNodeId","removeNodeIdFromPath","consumedPath","consumePathsUntilNodeId","consumedNodeIds","x","tempNodeId","pathsToConsume","pathThatContainsNodeId","tempNodeIdIndex","nodeIdIndex","tempConsumedNodeIds","pathIndex","findBranches","previousNodeId","branchMetaObject","createBranchMetaObject","nextCommonNodeId","findNextCommonNodeId","branchEndPoint","extractPathsUpToNodeId","removeDuplicatePaths","trimPathsUpToNodeId","subPaths","allPathsContainNodeId","extractedPaths","extractedPath","slice","uniquePaths","isPathInUniquePaths","u","uniquePath","pathsEqual","path1","path2","path1NodeId","path2NodeId","bp","branchPathsIn","components","getComponentsByNodeId","tempComponent","tempComponentId","componentPosition","nodeContent","newGroupId","getNextAvailableGroupId","newGroup","newNodeId","getNextAvailableNodeId","newNode","showSaveButton","showSubmitButton","addInactiveNode","insertNodeInsideInTransitions","insertNodeInsideInGroups","isInactive","insertNodeAfterInGroups","insertNodeAfterInTransitions","oldToGroupIds","transitionsFromGroup","transitionFromGroup","fromGroupId","newToGroupId","updateTransitionsForInsertingGroup","nodeIdToInsert","nodeIdToInsertAfter","previousNode","updateChildrenTransitionsForMovingGroup","previousNodeTransitionLogic","transitionsJSONString","transitionsCopy","fromJson","parentTransitions","parentTransition","newTransition","getGroupStartId","transitionObject","removeBranchPathTakenNodeConstraints","branchPathTakenConstraints","getBranchPathTakenConstraintsByNodeId","branchPathTakenConstraint","newConstraint","getNextAvailableConstraintIdForNodeId","removalCriteria","makeCopyOfJSONObject","nodeIdToInsertInside","nodeToInsert","previousNodes","previousGroups","getGroupNodesByToNodeId","previousGroup","lastNodesInGroup","getLastNodesInGroup","addToTransition","updateToTransition","nodesThatTransitionToGroup","nodeThatTransitionsToGroup","startNode","nextGroup","criteria","oldToNodeId","newToNodeId","lastNodes","getGroupIds","largestGroupIdNumber","groupIdNumber","isNaN","parseInt","nextAvailableGroupId","inactiveGroup","inactiveGroupId","nodeIdsToSkip","getNodeIds","largestNodeIdNumber","nodeIdNumber","inactiveNodeIds","getInactiveNodeIds","inactiveNodeId","s","nodeIdToSkip","nextAvailableNodeId","movedNodes","movingNodeIsActive","isActive","stationaryNodeIsActive","removeNodeIdFromTransitions","removeNodeIdFromGroups","moveToInactive","moveToActive","moveInactiveNode","newNodes","nodeIdToCopy","copyNode","createNodeInside","createNodeAfter","nodeCopy","newComponentIds","newComponentId","getUnusedComponentId","removingProjectStartNodeId","removeNodeIdFromNodes","hasSetNewStartId","isNodeInGroup","setStartNodeId","nextNodeId","nextGroupNode","nextGroupStartId","transitionToNodeId","recalculatePositionsInGroup","nodeToRemove","nodeToRemoveTransitionLogic","nodeToRemoveTransitions","parentIdOfNodeToRemove","parentGroupStartId","nodeToRemoveTransition","parentIdOfFromNode","tc","tempTransition","tempToNodeId","parentIdOfToNode","isFirstNodeInBranchPath","nodeIdsInBranch","getNodeIdsInBranch","nib","nodeIdInBranch","nodeInBranch","transitionCopy","currentFromNodeId","currentToNodeId","newFromNodeId","updateBranchPathTakenConstraint","isBranchPoint","getBranchesByBranchStartPointNodeId","bpn","branchPathNodeId","branchPathNode","insertIndex","groupIdWeAreMoving","groupThatTransitionsToGroupWeAreMoving","updateChildrenTransitionsIntoGroupWeAreMoving","removeTransitionsOutOfGroup","insertAfterComponentId","service","createComponent","componentHasWork","doesAnyComponentShowSubmitButton","addComponentToNode","componentUsesSaveButton","added","componentIds","componentsToMove","maxScore","firstPath","nodeMaxScore","getMaxScoreForNode","componentMaxScore","firstLeafNodeId","done","tempApplicationNode","tempApplicationNodeId","planning","planningNodeTemplateId","availablePlanningNodeIds","availablePlanningNodesSoFar","availablePlanningNode","availablePlanningNodeActual","max","nextAvailablePlanningNodeId","planningNodeInstance","planningNodeInstanceNodeId","nodeIdToMove","moveNodesInside","moveNodesAfter","getChildNodeIdsById","message","nodeTitle","getNodePositionAndTitleByNodeId","removalConditional","criteriaMessages","tempRemovalCriteria","criteriaMessage","getCriteriaMessage","scoresString","scores","join","score","requiredSubmitCount","oldToGroupId","fromGroup","oldToGroup","newToGroup","newToGroupStartId","ot","oldToGroupStartId","transitionsBefore","previousGroupNodes","transitionsAfter","extracted","previousGroupNode","updateTransitionsForExtractingGroup","transitionAfter","inserted","getStartGroupId","startGroup","firstGroupId","connectedComponentId","connectedComponents","connectedComponent","componentContent","connectedComponentParams","removeChildNodesFromActiveNodes","removeNodeFromActiveNodes","removeChildFromParent","removeNodeFromInactiveStepNodes","removeNodeFromInactiveGroupNodes","startIdUpdated","inactiveStepNode","isGroupActive","activeNodeId","activeComponents","activeComponent","activeComponentId","removeNodeFromInactiveNodes","childNode","addGroupChildNodesToInactive","removeTransitionsThatPointToNodeIdFromOutsideGroup","nodesThatPointToTargetNode","nodeThatPointsToTargetNode","nodeThatPointsToTargetNodeParentGroupId","removeTransition","toNodeIdParentGroupId","transitionsFromChild","tfc","transitionFromChild","firstNodeToRemoveTransition","firstNodeToRemoveTransitionToNodeId","nodeIdAndComponentIds","getNodeContentByNodeId","nodeIdAndComponentId","showPreviousWorkNodeId","showPreviousWorkComponentId","annotation","displayAnnotation","previousScore","currentScore","annotationGroup","globalAnnotationSettings","globalAnnotationGroups","globalAnnotationGroup","enableCriteria","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","notificationResult","notificationSettings","notifications","notification","getComponentService","componentServiceName","componentIdsToSkip","idLength","generateKey","isComponentIdUsed","alreadyUsed","isUsed","selectedNodes","fromProjectId","toProjectId","nodeIdToInsertInsideOrAfter","importStepsURL","steps","newNodeIds","selectedNode","isNodeIdUsed","tempComponents","nn","nextAvailableConstraintId","usedConstraintIds","foundNextAvailableConstraintId","counter","potentialConstraintId","field","orderedItems","foundNodeId","$key","nodesInBranch","hasBranchPathTakenConstraint","r","removalCriterion","targetNodeId","makeThisNodeNotVisibleConstraint","notVisibleRemovalCriterion","makeThisNodeNotVisitableConstraint","notVisitableRemovalCriterion","rc","rubric","html","transitionTo","allBranches","currentActivityNumber","currentStepNumber","calculateNodeNumbersHelper","branchLetterCode","isBranchMergePoint","isBranchStartPoint","branchesByBranchStartPointNodeId","branchesObject","maxCurrentStepNumber","branchCurrentStepNumber","branchEndPointNodeId","number","branchLetter","String","fromCharCode","pg","script","scriptFilename","assetDirectoryPath","getProjectAssetsDirectoryPath","scriptPath","additionalProcessingFunction","key","getAdditionalProcessingFunctions","flattenedNodeIds","getFlattenedProjectAsNodeIds","indexOfNodeId","indexOfPreviousNodeId","indexOfNextNodeId","isEnabled","items","achievementItems","getAchievements","achievementId","achievement","nodePosition","branchLetterRegex","exec","nodeRubric","componentRubric","newComponents","newComponent","copyComponent","insertPosition","getComponentPositionByNodeIdAndComponentId","importProjectId","currentComponents","$inject"],"mappings":"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","file":"projectService.js","sourcesContent":["'use strict';\n\nclass ProjectService {\n\n    constructor($filter, $http, $injector, $q, $rootScope, ConfigService, UtilService) {\n        this.$filter = $filter;\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.UtilService = UtilService;\n        this.project = null;\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.inactiveStepNodes = [];\n        this.inactiveGroupNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n        this.componentServices = {};\n        this.nodeIdToNumber = {};\n        this.nodeIdToIsInBranchPath = {};\n        this.nodeIdToBranchPathLetter = {};\n        this.achievements = [];\n        this.isNodeAffectedByConstraintResult = {};\n\n        this.$translate = this.$filter('translate');\n\n        // map from nodeId_componentId to array of additionalProcessingFunctions\n        this.additionalProcessingFunctionsMap = {};\n\n        // filtering options for navigation displays\n        this.filters = [\n            {'name': 'all', 'label': 'All'}\n            //{'name': 'todo', 'label': 'Todo'},\n            //{'name': 'completed', 'label': 'Completed'}\n        ];\n    };\n\n    setProject(project) {\n        this.project = project;\n        this.parseProject();\n    };\n\n    /**\n     * Initialize the data structures used to hold project information\n     */\n    clearProjectFields() {\n        this.transitions = [];\n        this.applicationNodes = [];\n        this.inactiveStepNodes = [];\n        this.inactiveGroupNodes = [];\n        this.groupNodes = [];\n        this.idToNode = {};\n        this.idToElement = {};\n        this.metadata = {};\n        this.activeConstraints = [];\n        this.rootNode = null;\n        this.idToPosition = {};\n        this.idToOrder = {};\n        this.nodeCount = 0;\n        this.nodeIdToIsInBranchPath = {};\n        this.achievements = [];\n    };\n\n    getStyle() {\n        var style = '';\n        var project = this.project;\n        if (project != null) {\n            style = project.style;\n        }\n        return style;\n    };\n\n    getFilters() {\n        return this.filters;\n    };\n\n    /**\n     * Returns the name/title of the current project\n     */\n    getProjectTitle() {\n        var name = this.getProjectMetadata().title;\n        return name ? name : 'A WISE Project (No name)';\n    };\n\n    /**\n     * Set the project title\n     */\n    setProjectTitle(projectTitle) {\n        var metadata = this.getProjectMetadata();\n\n        if (metadata != null) {\n            metadata.title = projectTitle;\n        }\n    }\n\n    getProjectMetadata() {\n        return this.metadata ? this.metadata : {};\n    };\n\n    getNodes() {\n        var nodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            nodes = project.nodes;\n        }\n\n        return nodes;\n    };\n\n    getPlanningNodes() {\n        var planningNodes = null;\n        var project = this.project;\n\n        if (project != null) {\n            planningNodes = project.planningNodes;\n        }\n\n        return planningNodes;\n    };\n\n    getChildNodeIdsById(nodeId) {\n        var childIds = [];\n        var node = this.getNodeById(nodeId);\n\n        if (node.ids) {\n            childIds = node.ids;\n        }\n\n        return childIds;\n    };\n\n    getGroupNodes() {\n        return this.groupNodes;\n    };\n\n    isNode(id) {\n        var result = false;\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    if (nodeId === id) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    // adds or update transition if exists\n    addTransition(transition) {\n\n        var existingTransitions = this.getTransitions();\n        var replaced = false;\n        for (var t = 0; t < existingTransitions.length; t++) {\n            var existingTransition = existingTransitions[t];\n            if (existingTransition.id === transition.id) {\n                existingTransitions.splice(t, 1, transition);\n                replaced = true;\n            }\n        }\n        if (!replaced) {\n            existingTransitions.push(transition);\n        }\n    };\n\n    addNode(node) {\n        var existingNodes = this.project.nodes;\n\n        var replaced = false;\n        if (node != null && existingNodes != null) {\n            for (var n = 0; n < existingNodes.length; n++) {\n                var existingNode = existingNodes[n];\n                var existingNodeId = existingNode.id;\n                if (existingNodeId === node.id) {\n                    existingNodes.splice(n, 1, node);\n                    replaced = true;\n                }\n            }\n        }\n        if (!replaced) {\n            existingNodes.push(node);\n        }\n    };\n\n    addApplicationNode(node) {\n\n        var applicationNodes = this.applicationNodes;\n\n        if (node != null && applicationNodes != null) {\n            applicationNodes.push(node);\n        }\n    };\n\n    addGroupNode(node) {\n\n        var groupNodes = this.groupNodes;\n\n        if (node != null && groupNodes != null) {\n            groupNodes.push(node);\n        }\n\n        this.$rootScope.$broadcast('groupsChanged');\n    };\n\n    addNodeToGroupNode(groupId, nodeId) {\n        if (groupId != null && nodeId != null) {\n            var group = this.getNodeById(groupId);\n            if (group != null) {\n                var groupChildNodeIds = group.ids;\n                if (groupChildNodeIds != null) {\n                    if (groupChildNodeIds.indexOf(nodeId) === -1) {\n                        groupChildNodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    isGroupNode(id) {\n        var result = false;\n\n        var groupNode = this.getNodeById(id);\n\n        if (groupNode != null) {\n            var type = groupNode.type;\n\n            if (type === 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isApplicationNode(id) {\n        var result = false;\n\n        var applicationNode = this.getNodeById(id);\n\n        if (applicationNode != null) {\n            var type = applicationNode.type;\n\n            if (type !== 'group') {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getGroups() {\n        return this.groupNodes;\n    };\n\n    /**\n     * Get the inactive group nodes.\n     * @return An array of inactive group nodes.\n     */\n    getInactiveGroupNodes() {\n        return this.inactiveGroupNodes;\n    }\n\n    /**\n     * Get the inactive step nodes. This will include the inactive steps that\n     * are in an inactive group.\n     * @return An array of inactive step nodes.\n     */\n    getInactiveStepNodes() {\n        return this.inactiveStepNodes;\n    }\n\n    loadNodes(nodes) {\n        if (nodes != null) {\n            for (var n = 0 ; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n                    var nodeType = node.type;\n                    var content = node.content;\n                    var constraints = node.constraints;\n\n                    if (content != null) {\n                        //node.content = this.injectAssetPaths(content);\n                    }\n\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n\n                    this.addNode(node);\n\n                    if (nodeType === 'group') {\n                        this.addGroupNode(node);\n                    } else {\n                        this.addApplicationNode(node);\n                    }\n\n                    var groupId = node.groupId;\n\n                    if (groupId != null) {\n                        this.addNodeToGroupNode(groupId, nodeId);\n                    }\n\n                    if (constraints != null) {\n\n                        if (this.ConfigService.isPreview() == true && this.ConfigService.getConfigParam('constraints') === false) {\n                            /*\n                             * if we are in preview mode and constraints are set\n                             * to false, we will not add the constraints\n                             */\n                        } else {\n                            // all other cases we will add the constraints\n\n                            for (var c = 0; c < constraints.length; c++) {\n                                var constraint = constraints[c];\n\n                                this.activeConstraints.push(constraint);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Load the planning template nodes\n     * @param planning template nodes\n     */\n    loadPlanningNodes(planningNodes) {\n        if (planningNodes != null) {\n\n            // loop through all the planning template nodes\n            for (var p = 0; p < planningNodes.length; p++) {\n                var planningNode = planningNodes[p];\n\n                if (planningNode != null) {\n                    var nodeId = planningNode.id;\n\n                    this.setIdToNode(nodeId, planningNode);\n                    this.setIdToElement(nodeId, planningNode);\n\n                    // TODO: may need to add more function calls here to add the planning\n                }\n            }\n        }\n    }\n\n    /**\n     * Parse the project to detect the nodes, branches, node numbers, etc.\n     */\n    parseProject() {\n        var project = this.project;\n        if (project != null) {\n\n            // clear and initialize our project data structures\n            this.clearProjectFields();\n\n            if (project.metadata) {\n                this.metadata = project.metadata;\n            }\n\n            var nodes = project.nodes;\n            this.loadNodes(nodes);\n\n            // load the planning node templates\n            var planningNodes = project.planningNodes;\n            this.loadPlanningNodes(planningNodes);\n\n            // load the inactive nodes\n            var inactiveNodes = project.inactiveNodes;\n            this.loadInactiveNodes(inactiveNodes);\n\n            var constraints = project.constraints;\n\n            if (constraints != null) {\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n                        var constraintId = constraint.id;\n                        constraint.active = true;\n\n                        this.setIdToElement(constraintId, constraint);\n                    }\n                }\n            }\n\n            // set root node\n            this.rootNode = this.getRootNode(nodes[0].id);\n\n            // set project order\n            this.setNodeOrder(this.rootNode, this.nodeCount);\n            //this.nodeCount = 0;\n\n            var n = nodes.length;\n            var branches = this.getBranches();\n            var branchNodeIds = [];\n\n            // set node positions\n            var id, pos;\n\n            while (n--) {\n                id = nodes[n].id;\n                if (id === this.rootNode.id) {\n                    this.setIdToPosition(id, '0');\n                } else if (this.isNodeIdInABranch(branches, id)) {\n                    // node is in a branch, so process later\n                    branchNodeIds.push(id);\n                } else {\n                    pos = this.getPositionById(id);\n                    this.setIdToPosition(id, pos);\n                }\n            }\n\n            // set branch node positions\n            var b = branchNodeIds.length;\n            while (b--) {\n                id = branchNodeIds[b];\n                pos = this.getBranchNodePositionById(id);\n                this.setIdToPosition(id, pos);\n            }\n\n            /*\n             * calculate the node numbers\n             * e.g. if the step is called\n             * 1.5 View the Potential Energy\n             * then the node number is 1.5\n             */\n            this.calculateNodeNumbers();\n\n            if (this.project.achievements != null) {\n                // get the project achievements\n                this.achievements = this.project.achievements;\n            }\n        }\n\n        this.$rootScope.$broadcast('projectChanged');\n    };\n\n    setNodeOrder(node) {\n        this.idToOrder[node.id] = {'order': this.nodeCount};\n        this.nodeCount++;\n        if (this.isGroupNode(node.id)) {\n            let childIds = node.ids;\n            for (let i = 0; i < childIds.length; i++) {\n                let child = this.getNodeById(childIds[i]);\n                this.setNodeOrder(child);\n            }\n\n            if (this.ConfigService.getMode() === 'classroomMonitor') {\n                // we're viewing the classroom monitor, so include planning nodes in the project structure\n                let planningIds = node.availablePlanningNodes;\n                if (planningIds) {\n                    for (let a = 0; a < planningIds.length; a++) {\n                        let child = this.getNodeById(planningIds[a].nodeId);\n                        this.setNodeOrder(child);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the node order mappings of the project\n     * @param project the project JSOn\n     * @return an object containing the idToOrder mapping and also the array\n     * of nodes\n     */\n    getNodeOrderOfProject(project) {\n\n        var idToOrder = {};\n\n        // initialize the node count used for counting the nodes\n        idToOrder.nodeCount = 0;\n\n        // get the start group id\n        var startGroupId = project.startGroupId;\n\n        // get the root node\n        var rootNode = this.getNodeById(startGroupId, project);\n\n        // initialize the step number\n        var stepNumber = '';\n\n        // initialize the nodes\n        var nodes = [];\n\n        // recursively traverse the project to calculate the node counts and step numbers\n        var importProjectIdToOrder = this.getNodeOrderOfProjectHelper(project, rootNode, idToOrder, stepNumber, nodes);\n\n        // remove the node count from the mapping since we don't need it anymore\n        delete importProjectIdToOrder.nodeCount;\n\n        // create the object we will return\n        var result = {};\n        result.idToOrder = importProjectIdToOrder;\n        result.nodes = nodes;\n\n        return result;\n    }\n\n    /**\n     * Recursively traverse the project to calculate the node order and step numbers\n     * @param project the project JSON\n     * @param node the current node we are on\n     * @param idToOrder the mapping of node id to item\n     * @param stepNumber the current step number\n     * @param nodes the array of nodes\n     */\n    getNodeOrderOfProjectHelper(project, node, idToOrder, stepNumber, nodes) {\n\n        /*\n         * Create the item that we will add to the idToOrder mapping.\n         * The 'order' field determines how the project nodes are displayed\n         * when we flatten the project for displaying.\n         */\n        var item = {\n            'order': idToOrder.nodeCount,\n            'node': node,\n            'stepNumber': stepNumber\n        };\n\n        // set the mapping of node id to item\n        idToOrder[node.id] = item;\n\n        // increment the node count\n        idToOrder.nodeCount++;\n\n        // add the item to the nodes array\n        nodes.push(item);\n\n        if (node.type == 'group') {\n            // the node is group so we also need to loop through its children\n\n            // get the child node ids\n            var childIds = node.ids;\n\n            // loop through all the children\n            for (var c = 0; c < childIds.length; c++) {\n                var childId = childIds[c];\n\n                // get a child node\n                var child = this.getNodeById(childId, project);\n\n                // get the current step number e.g. 1\n                var childStepNumber = stepNumber;\n\n                if (childStepNumber != '') {\n                    // add the . separator for the step number e.g. 1.\n                    childStepNumber += '.';\n                }\n\n                // update the step number e.g. 1.1\n                childStepNumber += (c + 1);\n\n                // recursively traverse the child\n                this.getNodeOrderOfProjectHelper(project, child, idToOrder, childStepNumber, nodes);\n            }\n        }\n\n        return idToOrder;\n    }\n\n    /**\n     * Returns the position in the project for the node with the given id. Returns null if no node with id exists.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getPositionById(id) {\n        for (var i = 0; i < this.rootNode.ids.length; i++) {\n            var node = this.getNodeById(this.rootNode.ids[i]);\n            var path = this.getPathToNode(node, i+1, id);\n            if (path != undefined && path != null) {\n                return path;\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Returns the order of the given node id in the project. Returns null if no node with id exists.\n     * @param id String node id\n     * @return Number order of the given node id in the project\n     */\n    getOrderById(id) {\n        if (this.idToOrder[id]) {\n            return this.idToOrder[id].order;\n        }\n\n        return null;\n    };\n    /**\n     * Returns the id of the node with the given order in the project. Returns null if no order with node exists.\n     * @param order Number\n     * @return Number node id of the given order in the project\n     */\n    getIdByOrder(order) {\n        var nodeId = null;\n\n        for (var id in this.idToOrder) {\n            if (this.idToOrder[id].order === order) {\n                if (this.isGroupNode(id) && order > 1) {\n                    nodeId = this.getIdByOrder(order-1);\n                } else {\n                    nodeId = id;\n                }\n                break;\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Returns the position in the project for the branch node with the given id. Returns null if no node with id exists or node is not a branch node.\n     * @param id a node id\n     * @return string position of the given node id in the project\n     */\n    getBranchNodePositionById(id) {\n        var branches = this.getBranches();\n        var b = branches.length;\n\n        // TODO: should we localize this? should we support more than 26?\n        var integerToAlpha = function(int) {\n            var alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n            if (int > -1 && int < 26) {\n                return alphabet[int];\n            } else {\n                return int;\n            }\n        };\n\n        while (b--) {\n            var branch = branches[b];\n            var branchPaths = branch.branchPaths;\n            for (var p = 0; p < branchPaths.length; p++) {\n                var branchPath = branchPaths[p];\n                var nodeIndex = branchPath.indexOf(id);\n                if (nodeIndex > -1) {\n                    var startPoint = branch.branchStartPoint;\n                    var startPointPos = this.idToPosition[startPoint];\n                    var branchPathPos = startPointPos + ' ' + integerToAlpha(p);\n                    return branchPathPos + (nodeIndex+1);\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Recursively searches for the given node id from the point of the given node down and returns the path number (position)\n     * @param node a node to start searching down\n     * @param path the position of the given node\n     * @param id the node id to search for\n     * @return string path of the given node id in the project\n     */\n    getPathToNode(node, path, id) {\n        if (node.id === id) {\n            return path + '';\n        } else if (node.type === 'group') {\n            var num = 0;\n            var branches = this.getBranches();\n            for (var i = 0; i < node.ids.length; i++) {\n                var nodeId = node.ids[i];\n                if (this.isNodeIdInABranch(branches, nodeId)) {\n                    this.getBranchNodePositionById(nodeId);\n                } else {\n                    ++num;\n                    var pos = this.getPathToNode(this.getNodeById(nodeId), (path) + '.' + (num), id);\n                    if (pos) {\n                        return pos;\n                    }\n                }\n            }\n        }\n    };\n\n    setIdToPosition(id, pos) {\n        if (id != null) {\n            this.idToPosition[id] = pos;\n        }\n    };\n\n    getNodePositionById(id) {\n        let position = null;\n\n        if (id != null) {\n            //position = this.idToPosition[id] ? this.idToPosition[id] : null;\n            position = this.nodeIdToNumber[id];\n        }\n\n        return position;\n    };\n\n    getNodeIdByOrder(order) {\n        let id = null;\n\n        if (order != null) {\n            for (let [nodeId, value] of Object.entries(this.idToOrder)) {\n                if (value.order === order) {\n                    id = nodeId;\n                    break;\n                }\n            }\n        }\n\n        return id;\n    }\n\n    getNodeOrderById(id) {\n        let order = null;\n\n        if (id != null) {\n            order = this.idToOrder[id] ? this.idToOrder[id].order : null;\n        }\n\n        return order;\n    };\n\n    setIdToNode(id, element) {\n        if (id != null) {\n            this.idToNode[id] = element;\n        }\n    };\n\n    setIdToElement(id, element) {\n        if (id != null) {\n            this.idToElement[id] = element;\n        }\n    };\n\n    /**\n     * Replace relative asset paths with absolute paths\n     * e.g.\n     * assets/myimage.jpg\n     * will be replaced with\n     * http://wise.berkeley.edu/curriculum/123456/assets/myimage.jpg\n     * @param content a string or JSON object\n     * @return the same type of object that was passed in as the content\n     * but with relative asset paths replaced with absolute paths\n     */\n    injectAssetPaths(content) {\n\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.replaceAssetPaths(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.replaceAssetPaths(content);\n            }\n        }\n\n        return content;\n    };\n\n    /**\n     * Replace the relative asset paths with absolute paths\n     * @param contentString the content string\n     * @return the content string with relative asset paths replaced\n     * with absolute asset paths\n     */\n    replaceAssetPaths(contentString) {\n\n        if (contentString != null) {\n\n            // get the content base url e.g. http://wise.berkeley.edu/curriculum/123456/\n            var contentBaseURL = this.ConfigService.getConfigParam('projectBaseURL');\n\n            // only look for string that starts with ' or \" and ends in png, jpg, jpeg, pdf, etc.\n            // the string we're looking for can't start with '/ and \"/.\n            // note that this also works for \\\"abc.png and \\'abc.png, where the quotes are escaped\n            contentString = contentString.replace(\n                new RegExp('(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")[^:][^\\/]?[^\\/]?[a-zA-Z0-9@\\\\._\\\\/\\\\s\\\\-]*[\\.](png|jpe?g|pdf|gif|mov|mp4|mp3|wav|swf|css|txt|json|xlsx?|doc|html.*?|js).*?(\\'|\\\"|\\\\\\\\\\'|\\\\\\\\\\\")', 'gi'),\n                (matchedString) => {\n                    // once found, we prepend the contentBaseURL + \"assets/\" to the string within the quotes and keep everything else the same.\n                    var delimiter = '';\n                    var matchedStringWithoutQuotes = '';\n\n                    if (matchedString.length > 2 && matchedString.substr(0,1) == '\\\\') {\n                        // the string has escaped quotes for example \\\"hello.png\\\"\n\n                        // get everything between the escaped quotes\n                        matchedStringWithoutQuotes = matchedString.substr(2, matchedString.length - 4);\n\n                        // get the delimiter which will be \\' or \\\"\n                        delimiter = matchedString.substr(0,2);\n                    } else {\n                        // the string does not have escaped quotes for example \"hello.png\"\n\n                        // get everything between the quotes\n                        matchedStringWithoutQuotes = matchedString.substr(1, matchedString.length - 2);\n\n                        // get the delimiter which will be ' or \"\n                        delimiter = matchedString.substr(0,1);\n                    }\n\n                    if (matchedStringWithoutQuotes != null && matchedStringWithoutQuotes.length > 0 && matchedStringWithoutQuotes.charAt(0) == \"/\") {\n                        /*\n                         * the matched string starts with a \"/\" which means it's\n                         * an absolute path and does not require path prepending\n                         * so we will just return the original unmodified string\n                         */\n                        return delimiter + matchedStringWithoutQuotes + delimiter;\n                    } else {\n                        //var matchedStringWithoutFirstAndLastQuote = matchedString.substr(1, matchedString.length - 2);  // everything but the beginning and end quote (' or \")\n                        // make a new string with the contentBaseURL + assets/ prepended to the path\n                        return delimiter + contentBaseURL + \"assets/\" + matchedStringWithoutQuotes + delimiter;\n                    }\n                }\n            );\n        }\n\n        return contentString;\n    };\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param content the content\n     * @returns the modified content\n     */\n    injectClickToSnipImage(content) {\n        if (content != null) {\n\n            if (typeof content === 'object') {\n\n                var contentString = JSON.stringify(content);\n\n                if (contentString != null) {\n\n                    // replace the relative asset paths with the absolute paths\n                    contentString = this.injectClickToSnipImageIntoContentString(contentString);\n\n                    content = JSON.parse(contentString);\n                }\n            } else if (typeof content === 'string') {\n\n                // replace the relative asset paths with the absolute paths\n                content = this.injectClickToSnipImageIntoContentString(content);\n            }\n        }\n\n        return content;\n    }\n\n    /**\n     * Inject the ng-click attribute that will call the snipImage function\n     * @param contentString the content in string format\n     * @returns the modified content string\n     */\n    injectClickToSnipImageIntoContentString(contentString) {\n\n        if (contentString != null) {\n\n            // regex to match image elements\n            var imgMatcher = new RegExp('<img.*?src=\\\\\\\\?[\\'\"](.*?)\\\\\\\\?[\\'\"].*?>', 'gi');\n\n            // replace all instances that match\n            contentString = contentString.replace(imgMatcher,\n                (matchedString, matchGroup1) => {\n\n                    /*\n                     * insert the ng-click attribute\n                     * Before: <img src=\"abc.png\"/>\n                     * After: <img ng-click=\"vleController.snipImage($event)\" src=\"abc.png\" />\n                     */\n                    var newString = matchedString.replace('img', 'img ng-click=\\\\\\\"$emit(\\'snipImage\\', $event)\\\\\\\"');\n\n                    return newString;\n                }\n            );\n        }\n\n        return contentString;\n    }\n\n    /**\n     * Returns the node specified by the nodeId\n     * @param nodeId get the node with this node id\n     * @param (optional) the project to retrieve the node from. this is used in\n     * the case when we want the node from another project such as when we are\n     * importing a step from another project\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeById(nodeId, project) {\n        var element = null;\n\n        if (project == null) {\n            // the project argument is null so we will get it from the current project\n            if (nodeId != null && this.idToNode[nodeId]) {\n                element = this.idToNode[nodeId];\n            }\n        } else {\n            /*\n             * the project argument is not null so we will get the node from\n             * project that was passed in\n             */\n\n            // loop through all the active nodes in the project\n            for (var n = 0; n < project.nodes.length; n++) {\n                var tempNode = project.nodes[n];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we are looking for\n                    return tempNode;\n                }\n            }\n\n            // loop through all the inactive nodes in the project\n            for (var n = 0; n < project.inactiveNodes.length; n++) {\n                var tempNode = project.inactiveNodes[n];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we are looking for\n                    return tempNode;\n                }\n            }\n        }\n\n        return element;\n    };\n\n    /**\n     * Returns the title of the node with the nodeId\n     * Return null if nodeId param is null or the specified node does not exist in the project.\n     */\n    getNodeTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    };\n\n    /**\n     * Get the node position and title\n     * @param nodeId the node id\n     * @returns the node position and title, e.g. \"1.1 Introduction\"\n     */\n    getNodePositionAndTitleByNodeId(nodeId) {\n        var title = null;\n\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            var position = this.getNodePositionById(nodeId);\n\n            if (position != null) {\n                title = position + ': ' + node.title;\n            } else {\n                title = node.title;\n            }\n        }\n\n        return title;\n    };\n\n    getNodeIconByNodeId(nodeId) {\n        var node = this.getNodeById(nodeId);\n        var nodeIcon = null;\n\n        if (node != null) {\n            var nodeType = node.type;\n\n            // set defaults (TODO: get from configService?)\n            var defaultName = (nodeType === 'group') ? 'explore' : 'school';\n            nodeIcon = {\n                color: 'rgba(0,0,0,0.54)',\n                type: 'font',\n                fontSet: 'material-icons',\n                fontName: defaultName,\n                imgSrc: '',\n                imgAlt: 'node icon'\n            };\n\n            // TODO: check for different statuses\n            var icons = node.icons;\n            if (!!icons && !!icons.default) {\n                var icon = icons.default;\n                nodeIcon = $.extend(true, nodeIcon, icon);\n            }\n\n            // check for empty image source\n            if (!nodeIcon.imgSrc) {\n                // revert to font icon\n                nodeIcon.type = 'font';\n            }\n        }\n\n        return nodeIcon;\n    };\n\n    getParentGroup(nodeId) {\n        var result = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                // Check if the node is a child of an active group.\n                var groupNodes = this.getGroupNodes();\n                for (var g = 0; g < groupNodes.length; g++) {\n                    var groupNode = groupNodes[g];\n                    if (this.isNodeDirectChildOfGroup(node, groupNode)) {\n                        return groupNode;\n                    }\n                }\n\n                // Check if the node is a child of an inactive group.\n                var inactiveGroupNodes = this.getInactiveGroupNodes();\n                for (var ig = 0; ig < inactiveGroupNodes.length; ig++) {\n                    var inactiveGroupNode = inactiveGroupNodes[ig];\n                    if (this.isNodeDirectChildOfGroup(node, inactiveGroupNode)) {\n                        return inactiveGroupNode;\n                    }\n                }\n            }\n        }\n\n        return null;\n    };\n\n    /**\n     * Get the parent group id\n     * @param nodeId the parent group id\n     * @returns the parent group id\n     */\n    getParentGroupId(nodeId) {\n\n        var parentGroupId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n        }\n\n        return parentGroupId;\n    }\n\n    getNodeDepth(nodeId, val) {\n        var result = null;\n\n        if (nodeId != null) {\n            var depth = (typeof val === \"number\") ? val : 0;\n            var parent = this.getParentGroup(nodeId);\n            if (parent) {\n                depth = this.getNodeDepth(parent.id, depth + 1);\n            }\n            result = depth;\n        }\n\n        return result;\n    };\n\n    getRootNode(nodeId) {\n        var result = null;\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        if (parentGroup == null) {\n            result = this.getNodeById(nodeId);\n        } else {\n            result = this.getRootNode(parentGroup.id);\n        }\n\n        return result;\n    };\n\n    isNodeDirectChildOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var nodeId = node.id;\n            var groupIds = group.ids;\n\n            if (groupIds != null && groupIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    isNodeDescendentOfGroup(node, group) {\n        var result = false;\n\n        if (node != null && group != null) {\n            var descendents = this.getDescendentsOfGroup(group);\n            var nodeId = node.id;\n\n            if (descendents.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getDescendentsOfGroup(group) {\n        var descendents = [];\n\n        if (group != null) {\n            var childIds = group.ids;\n\n            if (childIds != null) {\n                descendents = childIds;\n\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n\n                    var node = this.getNodeById(childId);\n\n                    if (node != null) {\n                        var childDescendents = this.getDescendentsOfGroup(node);\n\n                        descendents = descendents.concat(childDescendents);\n                    }\n                }\n            }\n        }\n\n        return descendents;\n    };\n\n    isStartNode(node) {\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var projectStartId = this.getStartNodeId();\n\n            if (nodeId === projectStartId) {\n                result = true;\n            }\n\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    var groupStartId = group.startId;\n\n                    if (nodeId === groupStartId) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns the Project's start node id, or null if it's not defined in the project\n     */\n    getStartNodeId() {\n        var startNodeId = null;\n        var project = this.project;\n        if (project != null) {\n            startNodeId = project.startNodeId;\n        }\n        return startNodeId;\n    };\n\n    /**\n     * Set the start node id\n     * @param nodeId the new start node id\n     */\n    setStartNodeId(nodeId) {\n\n        if (nodeId != null) {\n            var project = this.project;\n            if (project != null) {\n                project.startNodeId = nodeId;\n            }\n        }\n    }\n\n    /**\n     * Get the start group id\n     * @return the start group id\n     */\n    getStartGroupId() {\n        var startGroupId = null;\n\n        var project = this.project;\n        if (project != null) {\n            startGroupId = project.startGroupId;\n        }\n\n        return startGroupId;\n    }\n\n    /**\n     * Check if the given node id is the start node id\n     * @return whether the node id is the start node id\n     */\n    isStartNodeId(nodeId) {\n\n        var result = false;\n\n        var project = this.project;\n\n        if (project != null) {\n            var startNodeId = project.startNodeId;\n\n            if (nodeId === startNodeId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    getConstraintsForNode(node) {\n        var constraints = [];\n\n        var allConstraints = this.activeConstraints;\n\n        for (var c = 0; c < allConstraints.length; c++) {\n            var constraint = allConstraints[c];\n\n            if (this.isNodeAffectedByConstraint(node, constraint)) {\n                constraints.push(constraint);\n            }\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Check if a node is affected by the constraint\n     * @param node check if the node is affected\n     * @param constraint the constraint that might affect the node\n     * @returns whether the node is affected by the constraint\n     */\n    isNodeAffectedByConstraint(node, constraint) {\n        var result = false;\n\n        if (node != null && constraint != null) {\n\n            // check if we have previously calculated the result before\n            var rememberedResult = this.getIsNodeAffectedByConstraintResult(node.id, constraint.id, result);\n\n            if (rememberedResult != null) {\n                // we have calculated the result before\n\n                // use the remembered result\n                result = rememberedResult;\n            } else {\n                // we have not calculated the result before\n\n                var nodeId = node.id;\n                var targetId = constraint.targetId;\n                var action = constraint.action;\n\n                if (action === 'makeAllNodesAfterThisNotVisible') {\n                    if (this.isNodeIdAfter(targetId, node.id)) {\n                        result = true;\n                    }\n                } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                    if (this.isNodeIdAfter(targetId, node.id)) {\n                        result = true;\n                    }\n                } else {\n                    var targetNode = this.getNodeById(targetId);\n\n                    if (targetNode != null) {\n                        var nodeType = targetNode.type;\n\n                        if (nodeType === 'node') {\n                            // the target is an application\n\n                            if (nodeId === targetId) {\n                                result = true;\n                            }\n                        } else if (nodeType === 'group') {\n                            // the target is a group\n\n                            if (nodeId === targetId) {\n                                result = true;\n                            }\n\n                            if (this.isNodeDescendentOfGroup(node, targetNode)) {\n                                result = true;\n                            }\n                        }\n                    }\n                }\n\n                // remember the result so we can look it up in the future\n                this.setIsNodeAffectedByConstraintResult(node.id, constraint.id, result);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id comes after another node id in the project\n     * @param nodeIdBefore the node id before\n     * @param nodeIdAfter the node id after\n     */\n    isNodeIdAfter(nodeIdBefore, nodeIdAfter) {\n        var result = false;\n\n        if (nodeIdBefore != null && nodeIdAfter != null) {\n\n            if (this.isApplicationNode(nodeIdBefore)) {\n                // the node id before is a step\n\n                // get all the paths from the beforeNodeId to the end of the project\n                var pathsToEnd = this.getAllPaths([], nodeIdBefore, true);\n\n                if (pathsToEnd != null) {\n\n                    // loop through all the paths\n                    for (var p = 0; p < pathsToEnd.length; p++) {\n\n                        var pathToEnd = pathsToEnd[p];\n\n                        if (pathToEnd != null) {\n\n                            /*\n                             * remove the first node id and its parent id because\n                             * we will check the remaining node ids in the array\n                             * for the nodeIdAfter\n                             */\n\n                            // get the index of the node id before\n                            var index = pathToEnd.indexOf(nodeIdBefore);\n\n                            if (index != -1) {\n                                // remove the node id before\n                                pathToEnd.splice(index, 1);\n                            }\n\n                            // get the parent group of the node id before\n                            var parentGroup = this.getParentGroup(nodeIdBefore);\n\n                            if (parentGroup != null) {\n                                // remove the parent group of the node id before\n                                var parentGroupId = parentGroup.id;\n                                var parentGroupIndex = pathToEnd.indexOf(parentGroupId);\n                                if (parentGroupIndex != -1) {\n                                    pathToEnd.splice(parentGroupIndex, 1);\n                                }\n                            }\n\n                            if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                // we have found the nodeIdAfter in the path to the end of the project\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // the node id before is an activity\n\n                // get the group\n                var group = this.getNodeById(nodeIdBefore);\n\n                if (group != null) {\n\n                    // get the transitions from the group\n                    var transitions = this.getTransitionsByFromNodeId(nodeIdBefore);\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                // get the paths between to toNodeId and the end of the project\n                                var pathsToEnd = this.getAllPaths([], toNodeId, true);\n\n                                // loop through all the paths\n                                for (var p = 0; p < pathsToEnd.length; p++) {\n\n                                    // get a path\n                                    var pathToEnd = pathsToEnd[p];\n\n                                    if (pathToEnd != null) {\n                                        if (pathToEnd.indexOf(nodeIdAfter) != -1) {\n                                            // we have found the nodeIdAfter in the path to the end of the project\n                                            result = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    getNavigationMode() {\n        var navigationMode = null;\n        var project = this.project;\n        if (project != null) {\n            navigationMode = project.navigationMode;\n        }\n        return navigationMode;\n    };\n\n    getTransitions() {\n        var transitions = null;\n        var project = this.project;\n        if (project != null) {\n            transitions = project.transitions;\n        }\n        return transitions;\n    };\n\n    /**\n     * Returns all possible transition criteria for the specified node and component.\n     */\n    getPossibleTransitionCriteria(nodeId, componentId) {\n        let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n        if (component != null) {\n            let componentType = component.type;\n            let componentService = this.$injector.get(componentType + 'Service');\n            if (componentService.getPossibleTransitionCriteria) {\n                return componentService.getPossibleTransitionCriteria(nodeId, componentId, component);\n            } else {\n                return [];\n            }\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the transition logic for a node\n     * @param fromNodeId the from node id\n     * @returns the transition logic object\n     */\n    getTransitionLogicByFromNodeId(fromNodeId) {\n        var transitionLogic = null;\n\n        if (fromNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                // get the transition logic\n                transitionLogic = node.transitionLogic;\n            }\n        }\n\n        return transitionLogic;\n    };\n\n    /**\n     * Get the transitions for a node\n     * @param fromNodeId the node to get transitions from\n     * @returns an array of transitions\n     */\n    getTransitionsByFromNodeId(fromNodeId) {\n\n        var transitions = null;\n\n        if (fromNodeId != null) {\n            // get the transition logic\n            var transitionLogic = this.getTransitionLogicByFromNodeId(fromNodeId);\n\n            if (transitionLogic != null) {\n                // get the transitions\n                transitions = transitionLogic.transitions;\n            }\n        }\n\n        return transitions;\n    }\n\n    /**\n     * Get nodes that have a transition to the given node id\n     * @param toNodeId the node id\n     * @returns an array of node objects that transition to the\n     * given node id\n     */\n    getNodesByToNodeId(toNodeId) {\n        var nodesByToNodeId = [];\n\n        if (toNodeId != null) {\n\n            // get all the nodes\n            var nodes = this.project.nodes;\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        // loop through all the transitions for the node\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                if (toNodeId === transition.to) {\n                                    // this node has a transition to the node id\n                                    nodesByToNodeId.push(node);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodesByToNodeId;\n    };\n\n    /**\n     * Get node ids of all the nodes that have a to transition to the given node id\n     * @param toNodeId\n     * @returns all the node ids that have a transition to the given node id\n     */\n    getNodeIdsByToNodeId(toNodeId) {\n        var nodeIds = [];\n\n        // get all the nodes that transition to the toNodeId\n        var nodes = this.getNodesByToNodeId(toNodeId);\n\n        if (nodes != null) {\n\n            // loop through all the nodes to get the node ids\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    nodeIds.push(node.id);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Get the group nodes that point to a given node id\n     * @param toNodeId\n     */\n    getGroupNodesByToNodeId(toNodeId) {\n        var groupsThatPointToNodeId = [];\n\n        if (toNodeId != null) {\n            var groups = this.getGroups();\n\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n                    if (this.hasTransitionTo(group, toNodeId)) {\n                        groupsThatPointToNodeId.push(group);\n                    }\n                }\n            }\n        }\n\n        return groupsThatPointToNodeId;\n    }\n\n    /**\n     * Check if a node has a transition to a node id\n     * @param node check if this node has a transition to the node id\n     * @param toNodeId we will look for a transition to this node id\n     * @returns whether the node has a transition to the node id\n     */\n    hasTransitionTo(node, toNodeId) {\n        var result = false;\n\n        if (node != null && toNodeId != null) {\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (toNodeId === transition.to) {\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the transitions that traverse from the fromNodeId and to the toNodeId\n     * @param fromNodeId the from node id\n     * @param toNodeId the to node id\n     * @returns an array of transitions that traverse from the fromNodeId and\n     * to the toNodeId\n     */\n    getTransitionsByFromAndToNodeId(fromNodeId, toNodeId) {\n        var transitionsResults = [];\n\n        if (fromNodeId != null && toNodeId != null) {\n            var node = this.getNodeById(fromNodeId);\n\n            if (node != null) {\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    if (transitions != null) {\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var to = transition.to;\n\n                                if (toNodeId === to) {\n                                    transitionsResults.push(transition);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return transitionsResults;\n    };\n\n    /**\n     * Retrieves the project JSON from Config.projectURL and returns it.\n     * If Config.projectURL is undefined, returns null.\n     */\n    retrieveProject() {\n        var projectURL = this.ConfigService.getConfigParam('projectURL');\n\n        if (projectURL == null) {\n            return null;\n        } else {\n            /*\n             * add a unique GET parameter value so that it always retrieves the\n             * latest version of the project file from the server and never\n             * retrieves the project from cache.\n             */\n            projectURL += '?noCache=' + (new Date()).getTime();\n        }\n\n        return this.$http.get(projectURL).then((result) => {\n            var projectJSON = result.data;\n            this.setProject(projectJSON);\n            return projectJSON;\n        });\n    };\n\n    /**\n     * Retrieve the project JSON\n     * @param projectId retrieve the project JSON with this id\n     * @return a promise to return the project JSON\n     */\n    retrieveProjectById(projectId) {\n\n        if (projectId != null) {\n\n            // get the config URL for the project\n            var configURL = window.configURL + '/' + projectId;\n\n            // get the config for the project\n            return this.$http.get(configURL).then((result) => {\n                var configJSON = result.data;\n\n                if (configJSON != null) {\n\n                    // get the project URL and preview project URL\n                    var projectURL = configJSON.projectURL;\n                    var previewProjectURL = configJSON.previewProjectURL;\n\n                    if (projectURL != null) {\n\n                        // get the project JSON\n                        return this.$http.get(projectURL).then((result) => {\n                            var projectJSON = result.data;\n\n                            /*\n                             * set the preview project URL into the project JSON\n                             * so that we easily obtain the preview project URL\n                             * later\n                             */\n                            projectJSON.previewProjectURL = previewProjectURL;\n\n                            return projectJSON;\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Saves the project to Config.saveProjectURL and returns commit history promise.\n     * if Config.saveProjectURL or Config.projectId are undefined, does not save and returns null\n     */\n    saveProject(commitMessage = \"\") {\n        this.$rootScope.$broadcast('savingProject');\n        // perform any cleanup before saving the project\n        this.cleanupBeforeSave();\n\n        var projectId = this.ConfigService.getProjectId();\n        var saveProjectURL = this.ConfigService.getConfigParam('saveProjectURL');\n        if (projectId == null || saveProjectURL == null) {\n            return null;\n        }\n\n        // Get the project from this service\n        var projectJSONString = angular.toJson(this.project, 4);\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = saveProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.projectId = projectId;\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var commitHistory = result.data;\n            this.$rootScope.$broadcast('projectSaved');\n            return commitHistory;\n        });\n    };\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectBegin(projectId = null) {\n        if (projectId == null) {\n            if (this.project != null) {\n                projectId = this.project.id;\n            } else {\n                return;\n            }\n        }\n        let notifyProjectBeginURL = this.ConfigService.getConfigParam('notifyProjectBeginURL') + projectId;\n        let httpParams = {\n            method: \"POST\",\n            url: notifyProjectBeginURL\n        };\n\n        return this.$http(httpParams).then((result) => {\n            let otherAuthors = result.data;\n            return otherAuthors;\n        });\n    }\n\n    /**\n     * Notifies others that the specified project is being authored\n     * @param projectId id of the project\n     */\n    notifyAuthorProjectEnd(projectId = null) {\n        return this.$q((resolve, reject) => {\n            if (projectId == null) {\n                if (this.project != null) {\n                    projectId = this.ConfigService.getProjectId();\n                } else {\n                    resolve();\n                }\n            }\n            let notifyProjectEndURL = this.ConfigService.getConfigParam('notifyProjectEndURL') + projectId;\n            let httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = notifyProjectEndURL;\n\n            this.$http(httpParams).then(() => {\n                resolve();\n            })\n        });\n    }\n\n    /**\n     * Perform any necessary cleanup before we save the project.\n     * For example we need to remove the checked field in the inactive node\n     * objects.\n     */\n    cleanupBeforeSave() {\n        let activeNodes = this.getActiveNodes();\n        for (let activeNode of activeNodes) {\n            if (activeNode != null) {\n                delete activeNode.checked;\n            }\n        }\n\n        let inactiveNodes = this.getInactiveNodes();\n        for (let inactiveNode of inactiveNodes) {\n            if (inactiveNode != null) {\n                delete inactiveNode.checked;\n            }\n        }\n    }\n\n    /**\n     * Copies the project with the specified id and returns a new project id if the project is\n     * successfully copied\n     */\n    copyProject(projectId) {\n        var copyProjectURL = this.ConfigService.getConfigParam('copyProjectURL');\n\n        if (copyProjectURL == null) {\n            return null;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = copyProjectURL + \"/\" + projectId;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Registers a new project having the projectJSON content with the server.\n     * Returns a new project Id if the project is successfully registered.\n     * Returns null if Config.registerNewProjectURL is undefined.\n     * Throws an error if projectJSONString is invalid JSON string\n     */\n    registerNewProject(projectJSONString, commitMessage) {\n        var registerNewProjectURL = this.ConfigService.getConfigParam('registerNewProjectURL');\n\n        if (registerNewProjectURL == null) {\n            return null;\n        }\n\n        try {\n            // Try parsing the JSON string and throw an error if there's an issue parsing it.\n            JSON.parse(projectJSONString);\n        } catch (e) {\n            throw new Error(\"Invalid projectJSONString.\");\n        }\n\n        if (!commitMessage) {\n            commitMessage = \"\";\n        }\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = registerNewProjectURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        var params = {};\n        params.commitMessage = commitMessage;\n        params.projectJSONString = projectJSONString;\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n            var projectId = result.data;\n            return projectId;\n        });\n    };\n\n    /**\n     * Retrieves and returns the project's commit history.\n     */\n    getCommitHistory() {\n        var commitProjectURL = this.ConfigService.getConfigParam('commitProjectURL');\n\n        return this.$http({\n            url: commitProjectURL,\n            method: 'GET'\n        }).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Returns the theme path for the current project\n     */\n    getThemePath() {\n        let wiseBaseURL = this.ConfigService.getWISEBaseURL();\n        let project = this.project;\n        if (project && project.theme) {\n            // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n            return wiseBaseURL + '/wise5/themes/' + project.theme;\n        } else {\n            // TODO: get default theme name from ConfigService\n            return wiseBaseURL + '/wise5/themes/default';\n        }\n    };\n\n    /**\n     * Returns the theme settings for the current project\n     */\n    getThemeSettings() {\n        let themeSettings = {};\n        let project = this.project;\n\n        if (project && project.themeSettings) {\n            if (project.theme) {\n                // TODO: check if this is a valid theme (using ConfigService) rather than just truthy\n                themeSettings = project.themeSettings[project.theme];\n            } else {\n                // TODO: get default theme name from ConfigService\n                themeSettings = project.themeSettings[\"default\"];\n            }\n        }\n\n        return themeSettings ? themeSettings : {};\n    };\n\n    /**\n     * Flatten the project to obtain a list of node ids\n     */\n    getFlattenedProjectAsNodeIds() {\n        var nodeIds = [];\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the possible paths through the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // consolidate all the paths to create a single list of node ids\n        nodeIds = this.consolidatePaths(allPaths);\n        //nodeIds = this.consolidatePaths(allPaths.reverse());\n\n        return nodeIds;\n    };\n\n    /**\n     * Get all the possible paths through the project. This function\n     * recursively calls itself to traverse the project depth first.\n     * @param pathSoFar the node ids in the path so far. the node ids\n     * in this array are referenced to make sure we don't loop back\n     * on the path.\n     * @param nodeId the node id we want to get the paths from\n     * @param includeGroups whether to include the group node ids in the paths\n     * @return an array of paths. each path is an array of node ids.\n     */\n    getAllPaths(pathSoFar, nodeId, includeGroups) {\n        var allPaths = [];\n\n        if (nodeId != null) {\n            if (this.isApplicationNode(nodeId)) {\n                // the node is an application node\n\n                var path = [];\n\n                // get all the transitions from this node\n                var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n                if (transitions != null) {\n\n                    if (includeGroups) {\n                        // get the parent group\n                        var parentGroup = this.getParentGroup(nodeId);\n                        if (parentGroup != null) {\n\n                            // get the parent group id\n                            var parentGroupId = parentGroup.id;\n\n                            if (parentGroupId != null && pathSoFar.indexOf(parentGroupId) == -1) {\n                                // add the parent group id\n                                pathSoFar.push(parentGroup.id);\n                            }\n                        }\n                    }\n\n                    /*\n                     * add the node id to the path so far so we can later check\n                     * which nodes are already in the path to prevent looping\n                     * back in the path\n                     */\n                    pathSoFar.push(nodeId);\n\n                    if (transitions.length === 0) {\n                        /*\n                         * there are no transitions from the node id so we will\n                         * look for a transition in the parent group\n                         */\n\n                        var addedCurrentNodeId = false;\n\n                        var parentGroupId = this.getParentGroupId(nodeId);\n                        var parentGroupTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                        if (parentGroupTransitions != null) {\n                            for (var p = 0; p < parentGroupTransitions.length; p++) {\n                                var parentGroupTransition = parentGroupTransitions[p];\n\n                                if (parentGroupTransition != null) {\n\n                                    var toNodeId = parentGroupTransition.to;\n\n                                    if (pathSoFar.indexOf(toNodeId) == -1) {\n                                        /*\n                                         * recursively get the paths by getting all\n                                         * the paths for the to node\n                                         */\n                                        var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n\n                                            addedCurrentNodeId = true;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!addedCurrentNodeId) {\n                            /*\n                             * if the parent group doesn't have any transitions we will\n                             * need to add the current node id to the path\n                             */\n\n                            // add the node id to the path\n                            path.push(nodeId);\n\n                            // add the path to the all paths array\n                            allPaths.push(path);\n                        }\n                    } else {\n                        // there are transitions from this node id\n\n                        // loop through all the transitions from this node id\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transitionResult = [];\n\n                            // get a transition\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                // get the to node id\n                                var toNodeId = transition.to;\n\n                                if (toNodeId != null && pathSoFar.indexOf(toNodeId) == -1) {\n                                    // we have not found the to node in the path yet so we can traverse it\n\n                                    /*\n                                     * recursively get the paths by getting all\n                                     * the paths from the to node\n                                     */\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            if (includeGroups) {\n                                                // we need to add the group id to the path\n\n                                                if (tempPath.length > 0) {\n\n                                                    // get the first node id in the path\n                                                    var firstNodeId = tempPath[0];\n\n                                                    // get the parent id of the first node\n                                                    var firstParentGroupId = this.getParentGroupId(firstNodeId);\n\n                                                    // get the parent id of the current node\n                                                    var parentGroupId = this.getParentGroupId(nodeId);\n\n                                                    if (parentGroupId != firstParentGroupId) {\n                                                        /*\n                                                         * the parent ids are different which means this is a boundary\n                                                         * between two groups. for example if the project looked like\n                                                         * group1>node1>node2>group2>node3>node4\n                                                         * and the current node was node2 then the first node in the\n                                                         * path would be node3 which means we would need to place\n                                                         * group2 on the path before node3\n                                                         */\n                                                        tempPath.unshift(firstParentGroupId);\n                                                    }\n                                                }\n                                            }\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                } else {\n                                    /*\n                                     * the node is already in the path so far which means\n                                     * the transition is looping back to a previous node.\n                                     * we do not want to take this transition because\n                                     * it will lead to an infinite loop. we will just\n                                     * add the current node id to the path and not take\n                                     * the transition which essentially ends the path.\n                                     */\n                                    // add the node id to the path\n                                    path.push(nodeId);\n\n                                    // add the path to the all paths array\n                                    allPaths.push(path);\n                                }\n                            }\n                        }\n                    }\n\n                    if (pathSoFar.length > 0) {\n                        // get the last node id\n                        var lastNodeId = pathSoFar[pathSoFar.length - 1];\n\n                        // check if the last node id is a group id\n                        if (this.isGroupNode(lastNodeId)) {\n                            /*\n                             * the last node id is a group id so we will remove it\n                             * since we are moving back up the path as we traverse\n                             * the nodes depth first\n                             */\n                            pathSoFar.pop();\n                        }\n                    }\n\n                    /*\n                     * remove the latest node id (this will be a step node id)\n                     * since we are moving back up the path as we traverse the\n                     * nodes depth first\n                     */\n                    pathSoFar.pop();\n\n                    if (includeGroups) {\n                        if (pathSoFar.length == 1) {\n\n                            /*\n                             * we are including groups and we have traversed\n                             * back up to the start node id for the project.\n                             * the only node id left in pathSoFar is now the\n                             * parent group of the start node id. we will\n                             * now add this parent group of the start node id\n                             * to all of the paths\n                             */\n\n                            // loop through all the paths\n                            for (var ap = 0; ap < allPaths.length; ap++) {\n\n                                // get a path\n                                var path = allPaths[ap];\n\n                                if (path != null) {\n                                    /*\n                                     * prepend the parent group of the start node id\n                                     * to the path\n                                     */\n                                    path.unshift(pathSoFar[0]);\n                                }\n                            }\n\n                            /*\n                             * remove the parent group of the start node id from\n                             * pathSoFar which leaves us with an empty pathSoFar\n                             * which means we are completely done with\n                             * calculating all the paths\n                             */\n                            pathSoFar.pop();\n                        }\n                    }\n                }\n            } else if (this.isGroupNode(nodeId)) {\n                // the node is a group node\n\n                /*\n                 * add the node id to the path so far so we can later check\n                 * which nodes are already in the path to prevent looping\n                 * back in the path\n                 */\n                pathSoFar.push(nodeId);\n\n                // get the group node\n                var groupNode = this.getNodeById(nodeId);\n\n                if (groupNode != null) {\n                    var startId = groupNode.startId;\n\n                    if (startId == null || startId == \"\") {\n                        // there is no start id so we will take the transition from the group\n                        // TODO? there is no start id so we will loop through all the child nodes\n\n                        // get the transitions from the group\n                        var transitions = this.getTransitionsByFromNodeId(groupNode.id);\n\n                        if (transitions != null && transitions.length > 0) {\n\n                            // loop through all the transitions from the group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    // get the paths from the to node to the end of the project\n                                    var allPathsFromToNode = this.getAllPaths(pathSoFar, toNodeId, includeGroups);\n\n                                    if (allPathsFromToNode != null) {\n                                        // loop through all the paths from the to node\n                                        for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                            // get a path\n                                            var tempPath = allPathsFromToNode[a];\n\n                                            // prepend the current node id to the path\n                                            tempPath.unshift(nodeId);\n\n                                            // add the path to our collection of paths\n                                            allPaths.push(tempPath);\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            /*\n                             * this activity does not have any transitions so\n                             * we have reached the end of this path\n                             */\n\n                            var tempPath = [];\n\n                            // prepend the current node id to the path\n                            tempPath.unshift(nodeId);\n\n                            // add the path to our collection of paths\n                            allPaths.push(tempPath);\n                        }\n                    } else {\n                        // there is a start id so we will traverse it\n\n                        // get the paths from the start id to the end of the project\n                        var allPathsFromToNode = this.getAllPaths(pathSoFar, startId, includeGroups);\n\n                        if (allPathsFromToNode != null) {\n                            // loop through all the paths from the to node\n                            for (var a = 0; a < allPathsFromToNode.length; a++) {\n\n                                // get a path\n                                var tempPath = allPathsFromToNode[a];\n\n                                // prepend the current node id to the path\n                                tempPath.unshift(nodeId);\n\n                                // add the path to our collection of paths\n                                allPaths.push(tempPath);\n                            }\n                        }\n                    }\n                }\n\n                /*\n                 * remove the latest node id since we are moving back\n                 * up the path as we traverse the nodes depth first\n                 */\n                pathSoFar.pop();\n            }\n        }\n\n        return allPaths;\n    };\n\n    /**\n     * Consolidate all the paths into a linear list of node ids\n     * @param paths an array of paths. each path is an array of node ids.\n     * @return an array of node ids that have been properly ordered\n     */\n    consolidatePaths(paths) {\n        var consolidatedPath = [];\n\n        if (paths != null) {\n\n            /*\n             * continue until all the paths are empty. as we consolidate\n             * node ids, we will remove them from the paths. once all the\n             * paths are empty we will be done consolidating the paths.\n             */\n            while(!this.arePathsEmpty(paths)) {\n\n                // start with the first path\n                var currentPath = this.getNonEmptyPathIndex(paths);\n\n                // get the first node id in the current path\n                var nodeId = this.getFirstNodeIdInPathAtIndex(paths, currentPath);\n\n                if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                    // the first node ids in all the paths are the same\n\n                    // remove the node id from all the paths\n                    this.removeNodeIdFromPaths(nodeId, paths);\n\n                    // add the node id to our consolidated path\n                    consolidatedPath.push(nodeId);\n                } else {\n                    // not all the top node ids are the same which means we have branched\n\n                    // get all the paths that contain the node id\n                    var pathsThatContainNodeId = this.getPathsThatContainNodeId(nodeId, paths);\n\n                    if (pathsThatContainNodeId != null) {\n                        if (pathsThatContainNodeId.length === 1) {\n                            // only the current path we are on has the node id\n\n                            // remove the node id from the path\n                            this.removeNodeIdFromPath(nodeId, paths, currentPath);\n\n                            // add the node id to our consolidated path\n                            consolidatedPath.push(nodeId);\n                        } else {\n                            // there are multiple paths that have this node id\n\n                            // consume all the node ids up to the given node id\n                            var consumedPath = this.consumePathsUntilNodeId(paths, nodeId);\n\n                            // remove the node id from the paths\n                            this.removeNodeIdFromPaths(nodeId, paths);\n\n                            // add the node id to the end of the consumed path\n                            consumedPath.push(nodeId);\n\n                            // add the consumed path to our consolidated path\n                            consolidatedPath = consolidatedPath.concat(consumedPath);\n                        }\n                    }\n                }\n\n            }\n        }\n\n        return consolidatedPath;\n    };\n\n    /**\n     * Consume the node ids in the paths until we get to the given node id\n     * @param paths the paths to consume\n     * @param nodeId the node id to stop consuming at\n     * @return an array of node ids that we have consumed\n     */\n    consumePathsUntilNodeId(paths, nodeId) {\n        var consumedNodeIds = [];\n\n        if (paths != null && nodeId != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id to stop consuming at\n                if (path != null && path.indexOf(nodeId) != -1) {\n                    /*\n                     * the path does contain the node id to stop consuming at\n                     * so we will consume the node ids in this path until\n                     * we get to the given node id to stop consuming at\n                     */\n\n                    // loop through the node ids in the path\n                    for (var x = 0; x < path.length; x++) {\n\n                        // get a node id\n                        var tempNodeId = path[x];\n\n                        if (nodeId === tempNodeId) {\n                            /*\n                             * the node id is the same as the one we need to\n                             * stop consuming at so we will stop looking\n                             * at this path\n                             */\n                            break;\n                        } else {\n                            /*\n                             * the node id is not the one that we need to stop consuming at\n                             * so we will consume it\n                             */\n\n                            // get all the paths that contain the node id\n                            var pathsThatContainNodeId = this.getPathsThatContainNodeId(tempNodeId, paths);\n\n                            if (pathsThatContainNodeId.length === 1) {\n                                // there is only one path with this node id\n\n                                // remove the node id from the path\n                                this.removeNodeIdFromPath(tempNodeId, paths, p);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            } else {\n                                // there are multiple paths with this node id\n\n                                // tempNodeId must come before nodeId\n\n                                var pathsToConsume = [];\n\n                                // loop through all the paths that contain the node id\n                                for (var g = 0; g < pathsThatContainNodeId.length; g++) {\n\n                                    // get a path that contains the node id\n                                    var pathThatContainsNodeId = pathsThatContainNodeId[g];\n\n                                    // get the index of the node id we want to remove\n                                    var tempNodeIdIndex = pathThatContainsNodeId.indexOf(tempNodeId);\n\n                                    // get the index of the node id we want to stop consuming at\n                                    var nodeIdIndex = pathThatContainsNodeId.indexOf(nodeId);\n\n                                    /*\n                                     * check if the node id we want to remove comes before\n                                     * the node id we want to stop consuming at. we need to\n                                     * do this to prevent an infinite loop. an example of\n                                     * when this can happen is if there are two paths\n                                     *\n                                     * path1 = 1, 2, 3, 4, 5\n                                     * path2 = 1, 2, 4, 3, 5\n                                     *\n                                     * as we consume path1 we will need to consume 3. in order to\n                                     * consume 3, we must consume consume up to 3 in path2.\n                                     * in order to consume up to 3 in path2 we must consume 4.\n                                     * in order to consume 4, we must consume everything before\n                                     * 4 in path1. everything before 4 in path1 is 1, 2, 3.\n                                     * this means we need to consume 3 which brings us back up\n                                     * to the top of this paragraph creating an infinite loop.\n                                     *\n                                     * this check below will prevent infinite loops by only\n                                     * adding paths that have the tempNodeId come before the\n                                     * nodeId to stop consuming at.\n                                     */\n                                    if (tempNodeIdIndex < nodeIdIndex) {\n                                        pathsToConsume.push(pathThatContainsNodeId);\n                                    }\n                                }\n\n                                /*\n                                 * take the paths that contain the given node id and consume\n                                 * the paths until the given node id\n                                 */\n                                var tempConsumedNodeIds = this.consumePathsUntilNodeId(pathsToConsume, tempNodeId);\n\n                                // remove the node id from the paths that contain it\n                                this.removeNodeIdFromPaths(tempNodeId, pathsThatContainNodeId);\n\n                                // add the temp consumed node ids to our consumed node ids array\n                                consumedNodeIds = consumedNodeIds.concat(tempConsumedNodeIds);\n\n                                // move the counter back one since we have just removed a node id\n                                x--;\n\n                                // add the node id to the consumed node ids array\n                                consumedNodeIds.push(tempNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        return consumedNodeIds;\n    };\n\n    /**\n     * Get the path at the given index and get the first node id in\n     * the path\n     * @param paths an array of paths. each path is an array of node ids\n     * @param index the index of the path we want\n     * @return the first node in the given path\n     */\n    getFirstNodeIdInPathAtIndex(paths, index) {\n        var nodeId = null;\n\n        if (paths != null && index != null) {\n            // get the path at the given index\n            var path = paths[index];\n\n            if (path != null && path.length > 0) {\n                // get the first node id in the path\n                nodeId = path[0];\n            }\n        }\n\n        return nodeId;\n    };\n\n    /**\n     * Remove the node ifrom the paths\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     */\n    removeNodeIdFromPaths(nodeId, paths) {\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Remove the node id from the path\n     * @param nodeId the node id to remove\n     * @param paths an array of paths. each path is an array of node ids\n     * @param pathIndex the path to remove from\n     */\n    removeNodeIdFromPath(nodeId, paths, pathIndex) {\n\n        if (nodeId != null && paths != null && pathIndex != null) {\n\n            // get the path at the given index\n            var path = paths[pathIndex];\n\n            if (path != null) {\n\n                // loop through all the node ids in the path\n                for (var x = 0; x < path.length; x++) {\n                    // get a ndoe id\n                    var tempNodeId = path[x];\n\n                    /*\n                     * check if the node id matches the one we are looking\n                     * for\n                     */\n                    if (nodeId === tempNodeId) {\n                        /*\n                         * we have found the node id we are looking for so\n                         * we will remove it from the path\n                         */\n                        path.splice(x, 1);\n\n                        /*\n                         * move the counter back since we just removed a\n                         * node id. we will continue searching this path\n                         * for the node id in case the path contains it\n                         * multiple times.\n                         */\n                        x--;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Check if the first node ids in the paths are the same\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths have the same first node id\n     */\n    areFirstNodeIdsInPathsTheSame(paths) {\n        var result = true;\n\n        var nodeId = null;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // get the first node id in the path\n                var tempNodeId = path[0];\n\n                if (nodeId == null) {\n                    /*\n                     * this is the first path we have looked at so we will\n                     * remember the node id\n                     */\n                    nodeId = tempNodeId;\n                } else if (nodeId != tempNodeId) {\n                    /*\n                     * the node id does not match the first node id from a\n                     * previous path so the paths do not all have the same\n                     * first node id\n                     */\n                    result = false;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if all the paths are empty\n     * @param paths an array of paths. each path is an array of node ids\n     * @return whether all the paths are empty\n     */\n    arePathsEmpty(paths) {\n        var result = true;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the length of the path\n                    if (path.length !== 0) {\n                        // the path is not empty\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the paths that contain the node id\n     * @param nodeId the node id we are looking for\n     * @param paths an array of paths. each path is an array of node ids\n     * @return an array of paths that contain the given node id\n     */\n    getPathsThatContainNodeId(nodeId, paths) {\n        var pathsThatContainNodeId = [];\n\n        if (nodeId != null && paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                // check if the path contains the node id\n                if (path.indexOf(nodeId) != -1) {\n                    /*\n                     * add the path to the array of paths that contain\n                     * the node id\n                     */\n                    pathsThatContainNodeId.push(path);\n                }\n            }\n        }\n\n        return pathsThatContainNodeId;\n    };\n\n    /**\n     * Get a non empty path index. It will loop through the paths and\n     * return the index of the first non empty path.\n     * @param paths an array of paths. each path is an array of node ids\n     * @return the index of the path that is not empty\n     */\n    getNonEmptyPathIndex(paths) {\n        var index = null;\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // check the length of the path\n                if (path.length !== 0) {\n                    // the path is not empty so we will return this index\n                    index = p;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    };\n\n    /**\n     * Get the branches in the project\n     */\n    getBranches() {\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        /*\n         * an array to keep track of the node ids in the path that\n         * we are currently on as we traverse the nodes in the project\n         * depth first\n         */\n        var pathsSoFar = [];\n\n        // get all the paths in the project\n        var allPaths = this.getAllPaths(pathsSoFar, startNodeId);\n\n        // find the branches in the project from the paths\n        var branches = this.findBranches(allPaths);\n\n        return branches;\n    };\n\n    /**\n     * Find the branches in the project\n     * @param paths all the possible paths through the project\n     * @return an array of branch objects. each branch object contains\n     * the branch start point, the branch paths, and the branch\n     * end point\n     */\n    findBranches(paths) {\n        var branches = [];\n\n        var previousNodeId = null;\n\n        /*\n         * continue until all the paths are empty. we will remove\n         * node ids from the paths as we traverse the paths to find\n         * the branches\n         */\n        while (!this.arePathsEmpty(paths)) {\n\n            // get the first node id in the first path\n            var nodeId = this.getFirstNodeIdInPathAtIndex(paths, 0);\n\n            if (this.areFirstNodeIdsInPathsTheSame(paths)) {\n                // the first node ids in all the paths are the same\n\n                // remove the node id from all the paths\n                this.removeNodeIdFromPaths(nodeId, paths);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nodeId;\n            } else {\n                // not all the top node ids are the same which means we have branched\n\n                // create a branch object\n                var branchMetaObject = this.createBranchMetaObject(previousNodeId);\n                branchMetaObject.branchStartPoint = previousNodeId;\n\n                // find the branch end point\n                var nextCommonNodeId = this.findNextCommonNodeId(paths);\n                branchMetaObject.branchEndPoint = nextCommonNodeId;\n\n                // get the branch paths\n                var branchPaths = this.extractPathsUpToNodeId(paths, nextCommonNodeId);\n                branchPaths = this.removeDuplicatePaths(branchPaths);\n                branchMetaObject.branchPaths = branchPaths;\n\n                // add the branch object to our array\n                branches.push(branchMetaObject);\n\n                // trim the paths so that they start at the branch end point\n                this.trimPathsUpToNodeId(paths, nextCommonNodeId);\n\n                // remember this node id for the next iteration of the loop\n                previousNodeId = nextCommonNodeId;\n            }\n        }\n\n        return branches;\n    };\n\n    /**\n     * Create a branch meta object that will contain the branch start\n     * point, branch paths, and branch end point\n     * @return an object that contains a branch start point, branch paths,\n     * and a branch end point\n     */\n    createBranchMetaObject() {\n        var branchMetaObject = {};\n\n        branchMetaObject.branchStartPoint = null;\n        branchMetaObject.branchPaths = [];\n        branchMetaObject.branchEndPoint = null;\n\n        return branchMetaObject;\n    };\n\n    /**\n     * Find the next common node id in all the paths\n     * @param paths the paths to find the common node id in\n     * @return a node id that is in all the paths or null\n     * if there is no node id that is in all the paths\n     */\n    findNextCommonNodeId(paths) {\n        var nextCommonNodeId = null;\n        var subPaths = [];\n\n        if (paths != null) {\n            if (paths.length > 0) {\n                // get the first path\n                var path = paths[0];\n\n                // loop through all the node ids in the first path\n                for (var x = 0; x < path.length; x++) {\n                    // get a node id\n                    var tempNodeId = path[x];\n\n                    // check if the node id is in all the paths\n                    if (this.allPathsContainNodeId(paths, tempNodeId)) {\n                        /*\n                         * the node id is in all the paths so we have found\n                         * what we were looking for\n                         */\n                        nextCommonNodeId = tempNodeId;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return nextCommonNodeId;\n    };\n\n    /**\n     * Check if all the paths contain the node id\n     * @param paths an array of paths. each path contains an array of node ids\n     * @param nodeId the node id that we will check is in all the paths\n     * @return whether the node id is in all the paths\n     */\n    allPathsContainNodeId(paths, nodeId) {\n        var result = false;\n\n        if (paths != null) {\n\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                // get the index of the node id in the path\n                var index = path.indexOf(nodeId);\n\n                if (index == -1) {\n                    // the node id is not in the path\n                    result = false;\n                    break;\n                } else {\n                    // the node id is in the path\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Trim the paths up to the given node id so that the paths will contain\n     * the given node id and all the node ids after it. This function will\n     * modify the paths.\n     * @param paths the paths to trim\n     * @param nodeId the node id to trim up to\n     */\n    trimPathsUpToNodeId(paths, nodeId) {\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * trim the path to the end which will make\n                         * the path empty\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * trim the path up to the node id index. this will\n                     * modify the path array.\n                     */\n                    path.splice(0, index);\n                }\n            }\n        }\n    };\n\n\n    /**\n     * Extract the paths up to a given node id. This will be used to\n     * obtain branch paths.\n     * @param paths the paths to extract from\n     * @param nodeId the node id to extract up to\n     * @return paths that go up to but do not include the node id\n     */\n    extractPathsUpToNodeId(paths, nodeId) {\n        var extractedPaths = [];\n\n        if (paths != null) {\n            // loop through the paths\n            for (var p = 0; p < paths.length; p++) {\n\n                // get a path\n                var path = paths[p];\n\n                if (path != null) {\n\n                    // get the index of the node id in the path\n                    var index = path.indexOf(nodeId);\n\n                    if (index == -1) {\n                        /*\n                         * the node id is not in the path so we will\n                         * extract up to the end of the path\n                         */\n                        index = path.length;\n                    }\n\n                    /*\n                     * get the path up to the node id index. this does\n                     * not modify the path array.\n                     */\n                    var extractedPath = path.slice(0, index);\n\n                    // add the\n                    extractedPaths.push(extractedPath);\n                }\n            }\n        }\n\n        return extractedPaths;\n    };\n\n    /**\n     * Removes duplicate paths\n     * @param paths an array of paths. each path contains an array of node ids\n     * @return an array of unique paths\n     */\n    removeDuplicatePaths(paths) {\n        var uniquePaths = [];\n\n        if (paths != null) {\n            // loop through all the paths\n            for (var p = 0; p < paths.length; p++) {\n                // get a path\n                var path = paths[p];\n\n                var isPathInUniquePaths = false;\n\n                // loop through all the unique paths so far\n                for (var u = 0; u < uniquePaths.length; u++) {\n                    // get a unique path\n                    var uniquePath = uniquePaths[u];\n\n                    // check if the paths are equal\n                    if (this.pathsEqual(path, uniquePath)) {\n                        // the paths are equal\n                        isPathInUniquePaths = true;\n                    }\n                }\n\n                if (!isPathInUniquePaths) {\n                    // the path is not equal to any paths in the unique\n                    // paths array so we will add it to the unique paths array\n                    uniquePaths.push(path);\n                }\n            }\n        }\n\n        return uniquePaths;\n    };\n\n    /**\n     * Check if two paths are equal\n     * @param path1 an array of node ids\n     * @param path2 an array of node ids\n     * @return whether the two paths contain the same node ids\n     * in the same order\n     */\n    pathsEqual(path1, path2) {\n        var result = false;\n\n        if (path1 != null && path2 != null) {\n\n            // check if the paths are the same length\n            if (path1.length === path2.length) {\n                result = true;\n\n                // loop through each element of the first path\n                for (var x = 0; x < path1.length; x++) {\n                    // get the node id from the first path\n                    var path1NodeId = path1[x];\n\n                    // get the node id from the second path\n                    var path2NodeId = path2[x];\n\n                    // check if the node ids are the same\n                    if (path1NodeId !== path2NodeId) {\n                        // the node ids are not the same to the paths are not equal\n                        result = false;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if a node id is in any branch\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return whether the node id is in any branch\n     */\n    isNodeIdInABranch(branches, nodeId) {\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branch objects\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch object\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths for this branch object\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // check if the node id is in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    // the node id is in this branch path\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * Get the branch paths that a node id is in\n     * @param branches an array of branch objects\n     * @param nodeId the node id to check\n     * @return an array of the branch paths that the node id is in\n     */\n    getBranchPathsByNodeId(branches, nodeId) {\n        var branchPathsIn = [];\n\n        if (branches != null && nodeId != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n\n                // get a branch\n                var branch = branches[b];\n\n                if (branch != null) {\n\n                    // get the branch paths\n                    var branchPaths = branch.branchPaths;\n\n                    if (branchPaths != null) {\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            if (branchPath != null) {\n\n                                // get the index of the node id in the branch path\n                                var index = branchPath.indexOf(nodeId);\n\n                                if (index != -1) {\n                                    /*\n                                     * the node is in this branch path so we will\n                                     * add the branch path to our array\n                                     */\n                                    branchPathsIn.push(branchPath);\n\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathsIn;\n    }\n\n    /**\n     * Get the component by node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component or null if the nodeId or componentId are null or does not exist in the project.\n     */\n    getComponentByNodeIdAndComponentId(nodeId, componentId) {\n        var component = null;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        component = tempComponent;\n                        break;\n                    }\n                }\n            }\n\n        }\n\n        return component;\n    };\n\n    /**\n     * Returns the position of the component in the node by node id and component id, 0-indexed.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns the component's position or -1 if nodeId or componentId are null or doesn't exist in the project.\n     */\n    getComponentPositionByNodeIdAndComponentId(nodeId, componentId) {\n        var componentPosition = -1;\n\n        if (nodeId != null && componentId != null) {\n\n            var components = this.getComponentsByNodeId(nodeId);\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n                var tempComponent = components[c];\n\n                if (tempComponent != null) {\n                    var tempComponentId = tempComponent.id;\n\n                    if (componentId === tempComponentId) {\n                        // we have found the component we want\n                        componentPosition = c;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return componentPosition;\n    };\n\n    /**\n     * Get the components in a node\n     * @param nodeId the node id\n     * @returns an array of components or empty array if nodeId is null or doesn't exist in the project.\n     * if the node exists but doesn't have any components, returns an empty array.\n     */\n    getComponentsByNodeId(nodeId) {\n        var components = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the components\n                if (node.components != null) {\n                    components = node.components;\n                }\n            }\n        }\n\n        return components;\n    };\n\n    getNodeContentByNodeId(nodeId) {\n        var nodeContent = null;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                nodeContent = node;\n            }\n        }\n\n        return nodeContent;\n    };\n\n    /**\n     * Replace a component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param component the new component\n     */\n    replaceComponent(nodeId, componentId, component) {\n\n        if (nodeId != null && componentId != null && component != null) {\n\n            // get all the components for the node\n            var components = this.getComponentsByNodeId(nodeId);\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null) {\n\n                        if (tempComponent.id === componentId) {\n                            // the component id matches the one we want so we will replace it\n                            components[c] = component;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Create a new group\n     * @param title the title of the group\n     * @returns the group object\n     */\n    createGroup(title) {\n\n        // get the next available group id\n        var newGroupId = this.getNextAvailableGroupId();\n\n        // create the group object\n        var newGroup = {};\n        newGroup.id = newGroupId;\n        newGroup.type = 'group';\n        newGroup.title = title;\n        newGroup.startId = '';\n        newGroup.ids = [];\n\n        return newGroup;\n    };\n\n    /**\n     * Create a new node\n     * @param title the title of the node\n     * @returns the node object\n     */\n    createNode(title) {\n\n        // get the next available node id\n        var newNodeId = this.getNextAvailableNodeId();\n\n        // create the node object\n        var newNode = {};\n        newNode.id = newNodeId;\n        newNode.title = title;\n        newNode.type = 'node';\n        newNode.constraints = [];\n        newNode.transitionLogic = {};\n        newNode.transitionLogic.transitions = [];\n\n        newNode.showSaveButton = false;\n        newNode.showSubmitButton = false;\n        newNode.components = [];\n\n        return newNode;\n    };\n\n    /**\n     * Create a node inside the group\n     * @param node the new node\n     * @param nodeId the node id of the group to create the node in\n     */\n    createNodeInside(node, nodeId) {\n\n        if (nodeId == 'inactiveNodes') {\n            // add the node to the inactive nodes\n\n            // add the node to the inactive nodes\n            this.addInactiveNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n            this.setIdToElement(node.id, node);\n        } else if (nodeId == 'inactiveGroups') {\n            // add the node to the inactive groups\n            this.addInactiveNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n            this.setIdToElement(node.id, node);\n        } else {\n            // add the node to the active nodes\n\n            // add the node to the project\n            this.addNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n\n            // create the transitions for the node\n            this.insertNodeInsideInTransitions(node.id, nodeId);\n\n            // add the node to the group\n            this.insertNodeInsideInGroups(node.id, nodeId);\n        }\n    }\n\n    /**\n     * Create a node after the given node id\n     * @param node the new node\n     * @param nodeId the node to add after\n     */\n    createNodeAfter(node, nodeId) {\n\n        if (this.isInactive(nodeId)) {\n            // we are adding the node after a node that is inactive\n\n            // add the node to the inactive nodes\n            this.addInactiveNode(node, nodeId);\n\n            this.setIdToNode(node.id, node);\n            this.setIdToElement(node.id, node);\n        } else {\n            // we are adding the node after a node that is active\n\n            // add the node to the project\n            this.addNode(node);\n\n            // add the node to our mapping of node id to node\n            this.setIdToNode(node.id, node);\n\n            // insert the new node id into the array of children ids\n            this.insertNodeAfterInGroups(node.id, nodeId);\n\n            // create the transition to the node\n            this.insertNodeAfterInTransitions(node, nodeId);\n        }\n\n        if (this.isGroupNode(node.id)) {\n            /*\n             * we are creating a group node so we will update/create the\n             * transitions that traverse from the previous group to this group\n             */\n\n            var oldToGroupIds = [];\n\n            // get the transitions that come out of the previous group\n            var transitionsFromGroup = this.getTransitionsByFromNodeId(nodeId);\n\n            if (transitionsFromGroup != null) {\n\n                /*\n                 * loop through all the transitions that come out of the previous group\n                 * and get the node ids that the group transitions to\n                 */\n                for (var t = 0; t < transitionsFromGroup.length; t++) {\n                    var transitionFromGroup = transitionsFromGroup[t];\n\n                    if (transitionFromGroup != null) {\n                        var toNodeId = transitionFromGroup.to;\n\n                        if (toNodeId != null) {\n                            oldToGroupIds.push(toNodeId);\n                        }\n                    }\n                }\n            }\n\n            var fromGroupId = nodeId;\n            var oldToGroupIds = oldToGroupIds;\n            var newToGroupId = node.id;\n\n            /*\n             * make the transitions point to the new group and make the new\n             * group transition to the old group\n             */\n            this.updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId);\n        }\n    }\n\n    /**\n     * Insert the node after the given node id in the group's\n     * array of children ids\n     * @param nodeIdToInsert the node id we want to insert\n     * @param nodeIdToInsertAfter the node id we want to insert after\n     */\n    insertNodeAfterInGroups(nodeIdToInsert, nodeIdToInsertAfter) {\n        var groupNodes = this.getGroupNodes();\n\n        if (groupNodes != null) {\n\n            // loop through the groups\n            for (var g = 0; g < groupNodes.length; g++) {\n                var group = groupNodes[g];\n\n                if (group != null) {\n                    var ids = group.ids;\n\n                    if (ids != null) {\n\n                        // loop through the children ids\n                        for (var i = 0; i < ids.length; i++) {\n                            var id = ids[i];\n\n                            if (nodeIdToInsertAfter === id) {\n                                // we have found the node id we want to insert after\n\n                                // insert the new node id\n                                ids.splice(i + 1, 0, nodeIdToInsert);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node after another node\n     * @param node the node to insert\n     * @param nodeId the node id to insert after\n     */\n    insertNodeAfterInTransitions(node, nodeId) {\n\n        // get the node that will end up before\n        var previousNode = this.getNodeById(nodeId);\n\n        if (previousNode != null) {\n\n            if (previousNode.transitionLogic == null) {\n                previousNode.transitionLogic = {};\n                previousNode.transitionLogic.transitions = [];\n            }\n\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            if (this.isGroupNode(node.id)) {\n                /*\n                 * the node we are inserting is a group so we will update\n                 * the transitions of its children so that they transition\n                 * to the correct node\n                 */\n                this.updateChildrenTransitionsForMovingGroup(node, nodeId);\n            }\n\n            var previousNodeTransitionLogic = previousNode.transitionLogic;\n\n            if (previousNodeTransitionLogic != null) {\n\n                // get the transitions from the before node\n                var transitions = previousNodeTransitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // make a copy of the transitions\n                    var transitionsJSONString = angular.toJson(transitions);\n                    var transitionsCopy = angular.fromJson(transitionsJSONString);\n\n                    // set the transitions from the before node into the inserted node\n                    node.transitionLogic.transitions = transitionsCopy;\n                }\n            }\n\n            if (node.transitionLogic.transitions.length == 0) {\n                /*\n                 * The node does not have any transitions so we will look for\n                 * a transition on the parent group. If the parent has a\n                 * transition we will use it for the node.\n                 */\n\n                // get the parent group\n                var parentGroupId = this.getParentGroupId(nodeId);\n\n                if (parentGroupId != null &&\n                      parentGroupId != '' &&\n                      parentGroupId != 'group0') {\n\n                    // get the parent transitions\n                    var parentTransitions = this.getTransitionsByFromNodeId(parentGroupId);\n\n                    if (parentTransitions != null) {\n\n                        // loop through all the parent transitions\n                        for (var p = 0; p < parentTransitions.length; p++) {\n                            var parentTransition = parentTransitions[p];\n\n                            var newTransition = {};\n\n                            if (parentTransition != null) {\n                                var toNodeId = parentTransition.to;\n\n                                if (this.isGroupNode(toNodeId)) {\n                                    // the transition is to a group\n\n                                    // get the start id of the group\n                                    var startId = this.getGroupStartId(toNodeId);\n\n                                    if (startId == null || startId == '') {\n                                        // there is no start id so we will just use the group id\n                                        newTransition.to = toNodeId;\n                                    } else {\n                                        // there is a start id so we will use it as the to node\n                                        newTransition.to = startId;\n                                    }\n                                } else {\n                                    // the tranisition is to a step\n                                    newTransition.to = toNodeId;\n                                }\n                            }\n\n                            // add the new transition to the node\n                            node.transitionLogic.transitions.push(newTransition);\n                        }\n                    }\n                }\n            }\n\n            var newNodeId = node.id;\n\n            // TODO handle branching case\n\n            // remove the transitions from the before node\n            previousNode.transitionLogic.transitions = [];\n\n            var transitionObject = {};\n            transitionObject.to = newNodeId;\n\n            // make the before node point to the new node\n            previousNode.transitionLogic.transitions.push(transitionObject);\n\n            // remove the branch path taken constraints from the node we are moving\n            this.removeBranchPathTakenNodeConstraints(node.id);\n\n            // get the branch path taken constraints from the previous node\n            var branchPathTakenConstraints = this.getBranchPathTakenConstraintsByNodeId(nodeId);\n\n            /*\n             * if the previous node was in a branch path, we will also put the\n             * inserted node into the branch path\n             */\n            if (branchPathTakenConstraints != null && branchPathTakenConstraints.length > 0) {\n\n                if (node.constraints == null) {\n                    node.constraints = [];\n                }\n\n                // loop through all the branch path taken constraints\n                for (var c = 0; c < branchPathTakenConstraints.length; c++) {\n\n                    // get a branch path taken constraint\n                    var branchPathTakenConstraint = branchPathTakenConstraints[c];\n\n                    if (branchPathTakenConstraint != null) {\n\n                        // create a new constraint with the same branch path taken parameters\n                        var newConstraint = {};\n                        newConstraint.id = this.getNextAvailableConstraintIdForNodeId(node.id);\n                        newConstraint.action = branchPathTakenConstraint.action;\n                        newConstraint.targetId = node.id;\n                        newConstraint.removalCriteria = this.UtilService.makeCopyOfJSONObject(branchPathTakenConstraint.removalCriteria);\n\n                        // add the constraint to the node\n                        node.constraints.push(newConstraint);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Insert a node into a group\n     * @param nodeIdToInsert the node id to insert\n     * @param nodeIdToInsertInside the node id of the group we will insert into\n     */\n    insertNodeInsideInGroups(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the group we will insert into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (group != null) {\n            var ids = group.ids;\n\n            if (ids != null) {\n\n                // insert the node node id into the beginning of the child ids\n                ids.splice(0, 0, nodeIdToInsert);\n\n                // set the inserted node id as the start id\n                group.startId = nodeIdToInsert;\n            }\n        }\n    }\n\n    /**\n     * Update the transitions to handle inserting a node into a group\n     * @param nodeIdToInsert node id that we will insert\n     * @param nodeIdToInsertInside the node id of the group we are inserting into\n     */\n    insertNodeInsideInTransitions(nodeIdToInsert, nodeIdToInsertInside) {\n\n        // get the node we are inserting\n        var nodeToInsert = this.getNodeById(nodeIdToInsert);\n\n        if (nodeToInsert != null &&\n            nodeToInsert.transitionLogic != null &&\n            nodeToInsert.transitionLogic.transitions != null) {\n\n            // clear out any existing transitions\n            nodeToInsert.transitionLogic.transitions = [];\n\n            /*\n             * remove the branch path taken constraints from the node we are\n             * inserting\n             */\n            this.removeBranchPathTakenNodeConstraints(nodeIdToInsert);\n        }\n\n        // get the group we are inserting into\n        var group = this.getNodeById(nodeIdToInsertInside);\n\n        if (this.isGroupNode(nodeIdToInsert)) {\n            /*\n             * the node we are inserting is a group so we will update\n             * the transitions of its children so that they transition\n             * to the correct node\n             */\n            this.updateChildrenTransitionsForMovingGroup(nodeToInsert, null);\n        }\n\n        /*\n         * since we are inserting a node into a group, the node will become\n         * the first node in the group. this means we need to update any nodes\n         * that point to the old start id and make them point to the node\n         * we are inserting.\n         */\n        if (nodeToInsert != null && group != null) {\n\n            // get the start node\n            var startId = group.startId;\n\n            // get transitions that point to the start node\n            var previousNodes = this.getNodesByToNodeId(startId);\n\n            if (previousNodes == null || previousNodes.length == 0) {\n                // there are no transitions to the start node\n\n                // find all the groups that point to this group\n                var previousGroups = this.getGroupNodesByToNodeId(nodeIdToInsertInside);\n\n                // loop through all the groups that point to this group\n                for (var g = 0; g < previousGroups.length; g++) {\n                    var previousGroup = previousGroups[g];\n\n                    if (previousGroup != null) {\n                        // get the nodes that do not have a transition in the previous group\n                        var lastNodesInGroup = this.getLastNodesInGroup(previousGroup.id);\n\n                        for (var n = 0; n < lastNodesInGroup.length; n++) {\n                            // get a node that does not have a transition\n                            var node = lastNodesInGroup[n];\n\n                            // add a transition from the node to the node we are inserting\n                            this.addToTransition(node, nodeIdToInsert);\n                        }\n                    }\n                }\n            } else {\n                // there are transitions to the start node\n\n                for (var p = 0; p < previousNodes.length; p++) {\n                    var previousNode = previousNodes[p];\n\n                    if (previousNode != null && previousNode.id != 'group0') {\n                        // change the transition to point to the node we are inserting\n                        this.updateToTransition(previousNode, startId, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * update all the transitions that point to the group and change\n             * them to point to the new start id\n             */\n            var nodesThatTransitionToGroup = this.getNodesByToNodeId(nodeIdToInsertInside);\n\n            if (nodesThatTransitionToGroup != null) {\n                for (var n = 0; n < nodesThatTransitionToGroup.length; n++) {\n                    var nodeThatTransitionsToGroup = nodesThatTransitionToGroup[n];\n\n                    if (!this.isGroupNode(nodeThatTransitionsToGroup.id)) {\n                        this.updateToTransition(nodeThatTransitionsToGroup, nodeIdToInsertInside, nodeIdToInsert);\n                    }\n                }\n            }\n\n            /*\n             * create a transition from the node we are inserting to the node that\n             * was previously the start node\n             */\n            if (startId != null && startId != '') {\n                // there is a start id\n\n                var startNode = this.getNodeById(startId);\n\n                if (startNode != null) {\n                    // the group has a start node which will become the transition to node\n\n                    if (nodeToInsert.transitionLogic == null) {\n                        nodeToInsert.transitionLogic = {};\n                    }\n\n                    if (nodeToInsert.transitionLogic.transitions == null) {\n                        nodeToInsert.transitionLogic.transitions = [];\n                    }\n\n                    /*\n                     * make the inserted node transition to the previous start node\n                     */\n                    var transitionObject = {};\n                    transitionObject.to = startId;\n                    nodeToInsert.transitionLogic.transitions.push(transitionObject);\n                }\n            }\n\n            //check if the node we inserted has any transitions now\n            var transitions = this.getTransitionsByFromNodeId(nodeIdToInsert);\n\n            if (transitions == null || transitions.length == 0) {\n                /*\n                 * the node doesn't have any transitions so we will see if\n                 * the parent group transitions to anything and use that\n                 * transition\n                 */\n\n                // get the transitions from the parent\n                var parentTransitions = this.getTransitionsByFromNodeId(nodeIdToInsertInside);\n\n                if (parentTransitions != null) {\n\n                    // loop through all the parent transitions\n                    for (var t = 0; t < parentTransitions.length; t++) {\n                        var parentTransition = parentTransitions[t];\n\n                        if (parentTransition != null) {\n                            var toNodeId = parentTransition.to;\n\n                            if (this.isGroupNode(toNodeId)) {\n                                // the to node is a group\n\n                                // get the to group\n                                var nextGroup = this.getNodeById(toNodeId);\n\n                                if (nextGroup != null) {\n\n                                    // get the start id of the to group\n                                    var startId = nextGroup.startId;\n\n                                    if (startId == null || startId == '') {\n                                        // there is no start id so we will just transition to the group\n                                        this.addToTransition(nodeToInsert, toNodeId);\n                                    } else {\n                                        // there is a start id so we will transition to that\n                                        this.addToTransition(nodeToInsert, startId);\n                                    }\n                                }\n                            } else {\n                                // the to node is not a group\n\n                                /*\n                                 * we will add a transition from the node we are inserting to\n                                 * to that node\n                                 */\n                                this.addToTransition(nodeToInsert, toNodeId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a transition to a node\n     * @param node the node we are adding a transition to\n     * @param toNodeId the node id we going to transition to\n     * @param criteria (optional) a criteria object specifying\n     * what needs to be satisfied in order to use this transition\n     */\n    addToTransition(node, toNodeId, criteria) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transition = {};\n\n            // set the to node id\n            transition.to = toNodeId;\n\n            if (criteria != null) {\n                // set the criteria\n                transition.criteria = criteria;\n            }\n\n            // add the transition to the node's transitions\n            node.transitionLogic.transitions.push(transition);\n        }\n    }\n\n    /**\n     * Update the to value of aa transition\n     * @param node the node to update\n     * @param oldToNodeId the previous to node id\n     * @param newToNodeId the new to node id\n     */\n    updateToTransition(node, oldToNodeId, newToNodeId) {\n        if (node != null) {\n            if (node.transitionLogic == null) {\n                node.transitionLogic = {};\n            }\n\n            if (node.transitionLogic.transitions == null) {\n                node.transitionLogic.transitions = [];\n            }\n\n            var transitions = node.transitionLogic.transitions;\n\n            // loop through all the transitions\n            for (var t = 0; t < transitions.length; t++) {\n                var transition = transitions[t];\n\n                if (transition != null) {\n                    var toNodeId = transition.to;\n\n                    if (oldToNodeId === toNodeId) {\n                        // we have found the transition we want to update\n\n                        // update the to node id\n                        transition.to = newToNodeId;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the nodes in a group that do not have transitions\n     * @param groupId the group id\n     * @returns the nodes in the group that do not have transitions\n     */\n    getLastNodesInGroup(groupId) {\n        var lastNodes = [];\n\n        if (groupId != null) {\n            var group = this.getNodeById(groupId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            var child = this.getNodeById(childId);\n\n                            if (child != null) {\n                                var transitionLogic = child.transitionLogic;\n\n                                if (transitionLogic != null) {\n\n                                    // get the transitions\n                                    var transitions = transitionLogic.transitions;\n\n                                    if (transitions == null || transitions.length == 0) {\n                                        // this child does not have any transitions\n                                        lastNodes.push(child);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return lastNodes;\n    }\n\n    /**\n     * Get the next available group id\n     * @returns the next available group id\n     */\n    getNextAvailableGroupId() {\n\n        // get all the group ids\n        var groupIds = this.getGroupIds();\n\n        var largestGroupIdNumber = null;\n\n        // loop through all the existing group ids\n        for (var g = 0; g < groupIds.length; g++) {\n            var groupId = groupIds[g];\n\n            // get the number from the group id e.g. the number of 'group2' would be 2\n            var groupIdNumber = groupId.replace('group', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(groupIdNumber)) {\n\n                groupIdNumber = parseInt(groupIdNumber);\n\n                // update the largest group id number if necessary\n                if (largestGroupIdNumber == null) {\n                    largestGroupIdNumber = groupIdNumber;\n                } else if (groupIdNumber > largestGroupIdNumber) {\n                    largestGroupIdNumber = groupIdNumber;\n                }\n            }\n        }\n\n        // create the next available group id\n        var nextAvailableGroupId = 'group' + (largestGroupIdNumber + 1);\n\n        return nextAvailableGroupId;\n    }\n\n    /**\n     * Get all the group ids\n     * @returns an array with all the group ids\n     */\n    getGroupIds() {\n        var groupIds = [];\n\n        // Get the active group node ids.\n        var groupNodes = this.groupNodes;\n        for (var g = 0; g < groupNodes.length; g++) {\n            var group = groupNodes[g];\n            if (group != null) {\n                var groupId = group.id;\n                if (groupId != null) {\n                    groupIds.push(groupId);\n                }\n            }\n        }\n\n        // Get the inactive group node ids.\n        var inactiveGroupNodes = this.getInactiveGroupNodes();\n        for (var inactiveGroup of inactiveGroupNodes) {\n            if (inactiveGroup != null) {\n                var inactiveGroupId = inactiveGroup.id;\n                if (inactiveGroupId != null) {\n                    groupIds.push(inactiveGroupId);\n                }\n            }\n        }\n\n        return groupIds;\n    }\n\n    /**\n     * Get the next available node id\n     * @param nodeIdsToSkip (optional) An array of additional node ids to not\n     * use. This parameter is used in cases where we are creating multiple new\n     * nodes at once.\n     * Example\n     * We ask for two new node ids by calling getNextAvailableNodeId() twice.\n     * The first time it returns \"node10\".\n     * If we ask the second time without actually creating and adding node10,\n     * it will return \"node10\" again. If we provide \"node10\" in the\n     * nodeIdsToSkip, then getNextAvailableNodeId() will properly return to us\n     * \"node11\".\n     * @returns the next available node id\n     */\n    getNextAvailableNodeId(nodeIdsToSkip) {\n\n        // get all the node ids\n        var nodeIds = this.getNodeIds();\n\n        var largestNodeIdNumber = null;\n\n        // loop through all the existing node ids\n        for (var n = 0; n < nodeIds.length; n++) {\n            var nodeId = nodeIds[n];\n\n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = nodeId.replace('node', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n\n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n\n        // get all the inactive node ids\n        var inactiveNodeIds = this.getInactiveNodeIds();\n\n        for (var i = 0; i < inactiveNodeIds.length; i++) {\n            var inactiveNodeId = inactiveNodeIds[i];\n\n            // get the number from the node id e.g. the number of 'node2' would be 2\n            var nodeIdNumber = inactiveNodeId.replace('node', '');\n\n            // make sure the number is an actual number\n            if (!isNaN(nodeIdNumber)) {\n                nodeIdNumber = parseInt(nodeIdNumber);\n\n                // update the largest node id number if necessary\n                if (largestNodeIdNumber == null) {\n                    largestNodeIdNumber = nodeIdNumber;\n                } else if (nodeIdNumber > largestNodeIdNumber) {\n                    largestNodeIdNumber = nodeIdNumber;\n                }\n            }\n        }\n\n        if (nodeIdsToSkip != null) {\n            // there are node ids to skip\n\n            // loop through all the node ids to skip\n            for (var s = 0; s < nodeIdsToSkip.length; s++) {\n                var nodeIdToSkip = nodeIdsToSkip[s];\n\n                // get the number from the node id e.g. the number of 'node2' would be 2\n                var nodeIdNumber = nodeIdToSkip.replace('node', '');\n\n                // make sure the number is an actual number\n                if (!isNaN(nodeIdNumber)) {\n                    nodeIdNumber = parseInt(nodeIdNumber);\n\n                    // update the largest node id number if necessary\n                    if (largestNodeIdNumber == null) {\n                        largestNodeIdNumber = nodeIdNumber;\n                    } else if (nodeIdNumber > largestNodeIdNumber) {\n                        largestNodeIdNumber = nodeIdNumber;\n                    }\n                }\n            }\n        }\n\n        // create the next available node id\n        var nextAvailableNodeId = 'node' + (largestNodeIdNumber + 1);\n\n        return nextAvailableNodeId;\n    }\n\n    /**\n     * Get all the node ids from steps (not groups)\n     * @returns an array with all the node ids\n     */\n    getNodeIds() {\n\n        var nodeIds = [];\n\n        var nodes = this.applicationNodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                if (nodeId != null) {\n                    nodeIds.push(nodeId);\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Get all the node ids from inactive steps\n     * @returns an array with all the inactive node ids\n     */\n    getInactiveNodeIds() {\n\n        var nodeIds = [];\n\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var n = 0; n < inactiveNodes.length; n++) {\n                var inactiveNode = inactiveNodes[n];\n\n                if (inactiveNode != null) {\n                    var nodeId = inactiveNode.id;\n\n                    if (nodeId != null) {\n                        nodeIds.push(nodeId);\n                    }\n                }\n            }\n        }\n\n        return nodeIds;\n    }\n\n    /**\n     * Move nodes inside a group node\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id of the group we are moving the nodes inside\n     */\n    moveNodesInside(nodeIds, nodeId) {\n\n        var movedNodes = [];\n\n        // loop through all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var tempNode = this.getNodeById(tempNodeId);\n            movedNodes.push(tempNode);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the group\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(tempNode, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                this.moveToActive(tempNode);\n\n                if (n == 0) {\n                    /*\n                     * this is the first node we are moving so we will insert it\n                     * into the beginning of the group\n                     */\n                    this.insertNodeInsideInTransitions(tempNodeId, nodeId);\n                    this.insertNodeInsideInGroups(tempNodeId, nodeId);\n                } else {\n                    /*\n                     * this is not the first node we are moving so we will insert\n                     * it after the node we previously inserted\n                     */\n                    this.insertNodeAfterInTransitions(tempNode, nodeId);\n                    this.insertNodeAfterInGroups(tempNodeId, nodeId);\n                }\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(tempNode, nodeId);\n            }\n\n            /*\n             * remember the node id so we can put the next node (if any)\n             * after this one\n             */\n            nodeId = tempNode.id;\n        }\n\n        return movedNodes;\n    }\n\n    /**\n     * Move nodes after a certain node id\n     * @param nodeIds the node ids to move\n     * @param nodeId the node id we will put the moved nodes after\n     */\n    moveNodesAfter(nodeIds, nodeId) {\n\n        var movedNodes = [];\n\n        // loop through all the nodes we are moving\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are moving\n            var tempNodeId = nodeIds[n];\n            var node = this.getNodeById(tempNodeId);\n            movedNodes.push(node);\n\n            var movingNodeIsActive = this.isActive(tempNodeId);\n            var stationaryNodeIsActive = this.isActive(nodeId);\n\n            if (movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from active to active\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from active to inactive\n\n                // remove the transitions\n                this.removeNodeIdFromTransitions(tempNodeId);\n\n                // remove the node from the groups\n                this.removeNodeIdFromGroups(tempNodeId);\n\n                // move the node to the inactive array\n                this.moveToInactive(node, nodeId);\n            } else if (!movingNodeIsActive && stationaryNodeIsActive) {\n                // we are moving from inactive to active\n\n                // move the node to the active nodes array\n                this.moveToActive(node);\n\n                // insert the node into the parent group\n                this.insertNodeAfterInGroups(tempNodeId, nodeId);\n\n                // create the transition\n                this.insertNodeAfterInTransitions(node, nodeId);\n            } else if (!movingNodeIsActive && !stationaryNodeIsActive) {\n                // we are moving from inactive to inactive\n\n                // move the node within the inactive nodes\n                this.moveInactiveNode(node, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = node.id;\n        }\n\n        return movedNodes;\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesInside(nodeIds, nodeId) {\n\n        var newNodes = [];\n\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            if (n == 0) {\n                // this is the first node we are copying so we will insert it\n                // into the beginning of the group\n                this.createNodeInside(newNode, nodeId);\n            } else {\n                // this is not the first node we are copying so we will insert\n                // it after the node we previously inserted\n                this.createNodeAfter(newNode, nodeId);\n            }\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n\n            newNodes.push(newNode);\n        }\n\n        return newNodes;\n    }\n\n    /**\n     * Copy nodes and put them after a certain node id\n     * @param nodeIds the node ids to copy\n     * @param nodeId the node id we will put the copied nodes after\n     */\n    copyNodesAfter(nodeIds, nodeId) {\n\n        var newNodes = [];\n\n        // loop through all the nodes we are copying\n        for (var n = 0; n < nodeIds.length; n++) {\n\n            // get the node we are copying\n            var nodeIdToCopy = nodeIds[n];\n\n            // create a copy of the node\n            var newNode = this.copyNode(nodeIdToCopy);\n            var newNodeId = newNode.id;\n\n            this.createNodeAfter(newNode, nodeId);\n\n            // remember the node id so we can put the next node (if any) after this one\n            nodeId = newNodeId;\n            this.parseProject();  // refresh project and update references because a new node have been added.\n\n            newNodes.push(newNode);\n        }\n\n        return newNodes;\n    }\n\n    /**\n     * Copy the node with the specified nodeId\n     * @param nodeId the node id to copy\n     * @return copied node\n     */\n    copyNode(nodeId) {\n        var node = this.getNodeById(nodeId);\n\n        // make a copy of the node\n        var nodeCopy = this.UtilService.makeCopyOfJSONObject(node);\n        nodeCopy.id = this.getNextAvailableNodeId();\n        nodeCopy.transitionLogic = {};  // clear transition logic\n        nodeCopy.constraints = [];  // clear constraints\n\n        // used to hold the new component ids\n        var newComponentIds = [];\n\n        // loop through all the components and give them a new component id\n        for (var c = 0; c < nodeCopy.components.length; c++) {\n\n            // get a component\n            var component = nodeCopy.components[c];\n\n            // give the component a new id\n            var newComponentId = this.getUnusedComponentId(newComponentIds);\n\n            // remember the new component id\n            newComponentIds.push(newComponentId);\n\n            // set the new component id into the component\n            component.id = newComponentId;\n        }\n        return nodeCopy;\n    }\n\n    /**\n     * Delete a node\n     * @param nodeId the node id\n     */\n    deleteNode(nodeId) {\n\n        /*\n         * flag for whether we are deleting the project start node id.\n         * if we are deleting the project start node id, we will need\n         * to change it to the next logical node id that will be used\n         * as the project start.\n         */\n        var removingProjectStartNodeId = false;\n\n        if (this.isGroupNode(nodeId)) {\n            // the node is a group node so we will also remove all of its children\n            var group = this.getNodeById(nodeId);\n\n            // TODO check if the child is in another group, if so do not remove\n\n            if (group != null) {\n                var ids = group.ids;\n\n                // loop through all the children\n                for (var i = 0; i < ids.length; i++) {\n                    var id = ids[i];\n\n                    // remove the child\n                    this.removeNodeIdFromTransitions(id);\n                    this.removeNodeIdFromGroups(id);\n                    this.removeNodeIdFromNodes(id);\n\n                    if (this.project.startNodeId == id) {\n                        removingProjectStartNodeId = true;\n                    }\n\n                    /*\n                     * move the counter back because we have removed a child\n                     * from the parent group's array of child ids so all of\n                     * the child ids were shifted back one and the next child\n                     * we want will be at i--\n                     */\n                    i--;\n                }\n            }\n        }\n\n        var parentGroup = this.getParentGroup(nodeId);\n\n        // check if we need to update the start id of the parent group\n        if (parentGroup != null) {\n\n            /*\n             * the node is the start node of the parent group so we need\n             * to update the start id of the parent group to point to\n             * the next node\n             */\n            if (nodeId === parentGroup.startId) {\n\n                var hasSetNewStartId = false;\n\n                // get the node\n                var node = this.getNodeById(nodeId);\n\n                if (node != null) {\n                    var transitionLogic = node.transitionLogic;\n\n                    if (transitionLogic != null) {\n                        var transitions = transitionLogic.transitions;\n\n                        if (transitions != null && transitions.length > 0) {\n                            var transition = transitions[0];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (toNodeId != null) {\n\n                                    // check that the to node is in the same group\n                                    if (this.isNodeInGroup(toNodeId, parentGroup.id)) {\n\n                                        // update the parent group start id\n                                        parentGroup.startId = toNodeId;\n                                        hasSetNewStartId = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (!hasSetNewStartId) {\n                    parentGroup.startId = '';\n                }\n            }\n        }\n\n        if (nodeId === this.getStartNodeId()) {\n            // the node we are removing is the project start node id\n            removingProjectStartNodeId = true;\n        }\n\n        if (removingProjectStartNodeId) {\n            /*\n             * we are removing the project start node id so we need to update\n             * the startNodeId to something else\n             */\n\n            if (this.isGroupNode(nodeId)) {\n                /*\n                 * we are removing a group so we need to set the startNodeId to\n                 * the first node of the next group or if the next group doesn't\n                 * have any nodes, we will just use the next group\n                 */\n\n                // get the transitions of the group we are removing\n                var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n                if (transitions == null || transitions.length == 0) {\n                    /*\n                     * the group doesn't have any transitions so we will set\n                     * the startNodeId to 'group0'\n                     */\n                    this.setStartNodeId('group0');\n                } else {\n                    // the group has transitions\n\n                    var nextNodeId = null;\n\n                    if (transitions[0] != null && transitions[0].to != null) {\n                        // get the first transition\n                        nextNodeId = transitions[0].to;\n                    }\n\n                    if (nextNodeId != null) {\n                        if (this.isGroupNode(nextNodeId)) {\n                            // the transition is to a group\n\n                            // get the next group\n                            var nextGroupNode = this.getNodeById(nextNodeId);\n\n                            if (nextGroupNode != null) {\n\n                                // get the start id of the next group\n                                var nextGroupStartId = nextGroupNode.startId;\n\n                                if (nextGroupStartId == null) {\n                                    /*\n                                     * the next group does not have a start id so we\n                                     * will just use the next group id as the project\n                                     * start node id\n                                     */\n                                    this.setStartNodeId(nextNodeId);\n                                } else {\n                                    /*\n                                     * the next group has a start id so we will use\n                                     * it as the project start node id\n                                     */\n                                    this.setStartNodeId(nextGroupStartId);\n                                }\n                            }\n                        } else {\n                            /*\n                             * the transition is to a step so we will use it as the\n                             * project start node id\n                             */\n                            this.setStartNodeId(nextNodeId);\n                        }\n                    }\n                }\n            } else {\n                /*\n                 * we are removing a step node so we will set the startNodeId to\n                 * the next node in the transitions, or if there are no\n                 * transitions, we will use the parent group\n                 */\n\n                // get the transitions from the step we are removing\n                var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n                if (transitions == null || transitions.length == 0) {\n                    /*\n                     * the step doesn't have any transitions so we will use the\n                     * its parent group as the start node id\n                     */\n                    var parentGroupId = this.getParentGroupId(nodeId);\n                    this.setStartNodeId(parentGroupId);\n                } else {\n                    // the step has transitions\n\n                    if (transitions[0] != null && transitions[0].to != null) {\n                        /*\n                         * get the first transition and set it as the project\n                         * start node id\n                         */\n                        var transitionToNodeId = transitions[0].to;\n                        this.setStartNodeId(transitionToNodeId);\n                    }\n                }\n            }\n        }\n\n        // remove the node\n        this.removeNodeIdFromTransitions(nodeId);\n        this.removeNodeIdFromGroups(nodeId);\n        this.removeNodeIdFromNodes(nodeId);\n\n        if (parentGroup != null) {\n            this.recalculatePositionsInGroup(parentGroup.id);\n        }\n    }\n\n    /**\n     * Update the transitions to handle removing a node\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromTransitions(nodeId) {\n\n        // get the node we are removing\n        var nodeToRemove = this.getNodeById(nodeId);\n\n        // get all the nodes that have a transition to the node we are removing\n        var nodesByToNodeId = this.getNodesByToNodeId(nodeId);\n\n        // get the transitions of the node we are removing\n        var nodeToRemoveTransitionLogic = nodeToRemove.transitionLogic;\n        var nodeToRemoveTransitions = [];\n\n        if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n            nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n        }\n\n        var parentIdOfNodeToRemove = this.getParentGroupId(nodeId);\n\n        var parentGroup = this.getNodeById(parentIdOfNodeToRemove);\n\n        // update the start id if we are removing the start node of a group\n        if (parentGroup != null) {\n            var parentGroupStartId = parentGroup.startId;\n\n            if (parentGroupStartId != null) {\n                if (parentGroupStartId === nodeId) {\n                    // the node we are removing is the start node\n\n                    if (nodeToRemoveTransitions != null && nodeToRemoveTransitions.length > 0) {\n\n                        // loop through all the transitions from the node to choose a new start id\n                        for (var t = 0; t < nodeToRemoveTransitions.length; t++) {\n                            var nodeToRemoveTransition = nodeToRemoveTransitions[t];\n\n                            if (nodeToRemoveTransition != null) {\n                                var toNodeId = nodeToRemoveTransition.to;\n\n                                if (toNodeId != null) {\n                                    /*\n                                     * we need to check that the to node id is in the\n                                     * same group. some transitions point to a node id\n                                     * in the next group which we would not want to use\n                                     * for the start id.\n                                     */\n                                    if (this.getParentGroupId(toNodeId) == parentIdOfNodeToRemove) {\n\n                                        // set the new start id\n                                        parentGroup.startId = toNodeId;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // there are no transitions so we will have an empty start id\n                        parentGroup.startId = '';\n                    }\n                }\n            }\n        }\n\n        // loop through all the nodes that transition to the node we are removing\n        for (var n = 0; n < nodesByToNodeId.length; n++) {\n\n            // get a node that has a transition to the node we are removing\n            var node = nodesByToNodeId[n];\n\n            if (node != null) {\n                var parentIdOfFromNode = this.getParentGroupId(node.id);\n\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n                    var transitions = transitionLogic.transitions;\n\n                    // loop through all the transitions of this node\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (nodeId === transition.to) {\n                            // we have found the transition to the node we are removing\n\n                            // copy the transitions from the node we are removing\n                            var transitionsCopy = angular.toJson(nodeToRemoveTransitions);\n                            transitionsCopy = angular.fromJson(transitionsCopy);\n\n                            /*\n                             * if the parent from group is different than the parent removing group\n                             * remove transitions that are to a node in a different group than\n                             * the parent removing group\n                             */\n\n                            if (parentIdOfFromNode != parentIdOfNodeToRemove) {\n\n                                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                    var tempTransition = transitionsCopy[tc];\n\n                                    if (tempTransition != null) {\n                                        var tempToNodeId = tempTransition.to;\n\n                                        if (tempToNodeId != null) {\n                                            var parentIdOfToNode = this.getParentGroupId(tempToNodeId);\n\n                                            if (parentIdOfNodeToRemove != parentIdOfToNode) {\n                                                // remove the transition\n\n                                                transitionsCopy.splice(tc, 1);\n                                                tc--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            if (this.isFirstNodeInBranchPath(nodeId)) {\n                                /*\n                                 * Get the node ids that have a branchPathTaken\n                                 * constraint from the before node and to the node\n                                 * we are removing. If there are any, we need to\n                                 * update the branchPathTaken constraint with the\n                                 * next nodeId that comes after the node we are\n                                 * removing.\n                                 */\n                                var nodeIdsInBranch = this.getNodeIdsInBranch(node.id, nodeId);\n\n                                if (nodeIdsInBranch != null) {\n\n                                    // loop through all the node ids in the branch\n                                    for (var nib = 0; nib < nodeIdsInBranch.length; nib++) {\n                                        var nodeIdInBranch = nodeIdsInBranch[nib];\n                                        var nodeInBranch = this.getNodeById(nodeIdInBranch);\n\n                                        // loop through all the transitions in the node we are removing\n                                        for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                            var transitionCopy = transitionsCopy[tc];\n\n                                            if (transitionCopy != null) {\n                                                var currentFromNodeId = node.id;\n                                                var currentToNodeId = nodeId;\n                                                var newFromNodeId = node.id;\n                                                var newToNodeId = transitionCopy.to;\n\n                                                /*\n                                                 * change the branch path taken constraint by changing\n                                                 * the toNodeId\n                                                 */\n                                                this.updateBranchPathTakenConstraint(nodeInBranch, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                                            }\n                                        }\n                                    }\n                                }\n                            } else if (this.isBranchPoint(nodeId)) {\n                                // the node we are removing is a branch point\n\n                                /*\n                                 * get all the branches that have the node we\n                                 * are removing as the start point\n                                 */\n                                var branches = this.getBranchesByBranchStartPointNodeId(nodeId);\n\n                                // loop through all branches\n                                for (var b = 0; b < branches.length; b++) {\n                                    var branch = branches[b];\n\n                                    if (branch != null) {\n\n                                        /*\n                                         * get the branch paths. these paths do not\n                                         * contain the start point or merge point.\n                                         */\n                                        var branchPaths = branch.branchPaths;\n\n                                        if (branchPaths != null) {\n\n                                            // loop through all the branch paths\n                                            for (var bp = 0; bp < branchPaths.length; bp++) {\n                                                var branchPath = branchPaths[bp];\n\n                                                if (branchPath != null) {\n\n                                                    // get the start point\n                                                    var currentFromNodeId = nodeId;\n\n                                                    // get the first node in this branch\n                                                    var currentToNodeId = branchPath[0];\n\n                                                    // this will be the new start point\n                                                    var newFromNodeId = node.id;\n\n                                                    // get the first node in this branch\n                                                    var newToNodeId = branchPath[0];\n\n                                                    // loop through all the nodes in the branch path\n                                                    for (var bpn = 0; bpn < branchPath.length; bpn++) {\n\n                                                        // get the node id\n                                                        var branchPathNodeId = branchPath[bpn];\n\n                                                        // get the node\n                                                        var branchPathNode = this.getNodeById(branchPathNodeId);\n\n                                                        // update the constraints related to the branching\n                                                        this.updateBranchPathTakenConstraint(branchPathNode, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // remove the transition to the node we are removing\n                            transitions.splice(t, 1);\n\n                            if (transitionsCopy != null) {\n                                var insertIndex = t;\n\n                                /*\n                                 * loop through all the transitions from the node we are removing\n                                 * and insert them into the transitions of the from node\n                                 * e.g.\n                                 * the node that comes before the node we are removing has these transitions\n                                 * \"transitions\": [\n                                 *     {\n                                 *         \"to\": \"node4\"\n                                 *     },\n                                 *     {\n                                 *         \"to\": \"node6\"\n                                 *     }\n                                 * ]\n                                 *\n                                 * we are removing node4. node4 has a transition to node5.\n                                 *\n                                 * the node that comes before the node we are removing now has these transitions\n                                 * \"transitions\": [\n                                 *     {\n                                 *         \"to\": \"node5\"\n                                 *     },\n                                 *     {\n                                 *         \"to\": \"node6\"\n                                 *     }\n                                 * ]\n                                 */\n                                for (var tc = 0; tc < transitionsCopy.length; tc++) {\n                                    // insert a transition from the node we are removing\n                                    transitions.splice(insertIndex, 0, transitionsCopy[tc]);\n                                    insertIndex++;\n                                }\n                            }\n\n                            // check if the node we are moving is a group\n                            if (this.isGroupNode(nodeId)) {\n                                /*\n                                 * we are moving a group so we need to update transitions that\n                                 * go into the group\n                                 */\n                                var groupIdWeAreMoving = nodeId;\n                                var groupThatTransitionsToGroupWeAreMoving = node;\n                                this.updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving);\n                            }\n                        }\n                    }\n\n                    if (this.isBranchPoint(nodeId)) {\n                        /*\n                         * the node we are deleting is a branch point so we to\n                         * copy the transition logic to the node that comes\n                         * before it\n                         */\n                        node.transitionLogic = this.UtilService.makeCopyOfJSONObject(nodeToRemoveTransitionLogic);\n\n                        /*\n                         * set the transitions for the node that comes before\n                         * the one we are removing\n                         */\n                        node.transitionLogic.transitions = transitions;\n                    }\n                }\n            }\n        }\n\n        if (nodeToRemoveTransitionLogic != null) {\n            // clear the transitions of the node we are removing\n            nodeToRemoveTransitionLogic.transitions = [];\n        }\n\n        if (this.isGroupNode(nodeId)) {\n            /*\n             * this is a group node so we will remove all child transitions that\n             * go out of this group\n             */\n\n            //this.removeTransitionsIntoGroup(nodeId);\n            this.removeTransitionsOutOfGroup(nodeId);\n        }\n    };\n\n    /**\n     * Remove the node id from a group\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromGroups(nodeId) {\n\n        var groups = this.groupNodes;\n\n        if (groups != null) {\n\n            // loop through all the groups\n            for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n\n                if (group != null) {\n\n                    // get the start id of the group\n                    var startId = group.startId;\n\n                    // get the child ids of the group\n                    var ids = group.ids;\n\n                    // loop through all the child ids\n                    for (var i = 0; i < ids.length; i++) {\n                        var id = ids[i];\n\n                        if (nodeId === id) {\n                            // we have found the node id we want to remove\n                            ids.splice(i, 1);\n\n                            if (nodeId === startId) {\n                                /*\n                                 * the node id is also the start id so we will get the\n                                 * next node id and set it as the new start id\n                                 */\n\n                                var hasSetNewStartId = false;\n\n                                // get the node we are removing\n                                var node = this.getNodeById(id);\n\n                                if (node != null) {\n                                    var transitionLogic = node.transitionLogic;\n\n                                    if (transitionLogic != null) {\n                                        var transitions = transitionLogic.transitions;\n\n                                        if (transitions != null && transitions.length > 0) {\n\n                                            // get the first transition\n                                            // TODO handle the case when the node we are removing is a branch point\n                                            var transition = transitions[0];\n\n                                            if (transition != null) {\n                                                // get the node that this node transitions to\n                                                var to = transition.to;\n\n                                                if (to != null) {\n                                                    // set the to node as the start id\n                                                    group.startId = to;\n                                                    hasSetNewStartId = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (!hasSetNewStartId) {\n                                    /*\n                                     * the node we are removing did not have a transition\n                                     * so there will be no start id\n                                     */\n                                    group.startId = '';\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the array of nodes\n     * @param nodeId the node id to remove\n     */\n    removeNodeIdFromNodes(nodeId) {\n\n        // get all the nodes in the project\n        var nodes = this.project.nodes;\n\n        // loop through all the nodes\n        for (var n = 0; n < nodes.length; n++) {\n            var node = nodes[n];\n\n            if (node != null) {\n                if (nodeId === node.id) {\n                    // we have found the node we want to remove\n                    nodes.splice(n, 1);\n                }\n            }\n        }\n\n        // get all the inactive nodes\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    if (nodeId === inactiveNode.id) {\n                        // we have found the inactive node we want to remove\n                        inactiveNodes.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove from the inactive nodes array\n     */\n    removeNodeIdFromInactiveNodes(nodeId) {\n\n        // get the inactive nodes array\n        var inactiveNodes = this.project.inactiveNodes;\n\n        if (inactiveNodes != null) {\n\n            // loop through the inactive nodes\n            for (var i = 0; i < inactiveNodes.length; i++) {\n                var inactiveNode = inactiveNodes[i];\n\n                if (inactiveNode != null) {\n                    var inactiveNodeId = inactiveNode.id;\n\n                    if (nodeId === inactiveNodeId) {\n                        /*\n                         * we have found the node we are looking for so we will\n                         * remove it\n                         */\n                        inactiveNodes.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a new component\n     * @param nodeId the node id to create the component in\n     * @param componentType the component type\n     * @param insertAfterComponentId Insert the new compnent after the given\n     * component id. If this argument is null, we will place the new component\n     * in the first position.\n     */\n    createComponent(nodeId, componentType, insertAfterComponentId) {\n\n        var component = null;\n\n        if (nodeId != null && componentType != null) {\n            // get the node we will create the component in\n            var node = this.getNodeById(nodeId);\n\n            // get the service for the component type\n            var service = this.$injector.get(componentType + 'Service');\n\n            if (node != null && service != null) {\n\n                // create the new component\n                component = service.createComponent();\n\n                if (service.componentHasWork()) {\n                    /*\n                     * the component has student work so we will need to\n                     * determine if we need to show the save button on the\n                     * component or the step\n                     */\n\n                    if (node.showSaveButton == true) {\n                        /*\n                         * the step is showing a save button so we will not show\n                         * the save button on this new component\n                         */\n                    } else {\n                        // the step is not showing a save button\n\n                        if (this.doesAnyComponentShowSubmitButton(node.id)) {\n                            /*\n                             * at least one of the other components in the step are\n                             * showing a submit button so we will also show the save\n                             * button on this new component\n                             */\n\n                            // turn on the component save button\n                            component.showSaveButton = true;\n                        } else {\n                            /*\n                             * none of the other components are showing a submit button\n                             * so we will show the save button on the step\n                             */\n\n                            // turn on the step save button\n                            node.showSaveButton = true;\n                        }\n                    }\n                }\n\n                // add the component to the node\n                this.addComponentToNode(node, component, insertAfterComponentId);\n            }\n        }\n\n        return component;\n    }\n\n    /**\n     * Does any component in the step generate work\n     * @param nodeId the node id\n     * @return whether any components in the step generates work\n     */\n    doesAnyComponentHaveWork(nodeId) {\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentType = component.type;\n\n                        // get the service for the component type\n                        var service = this.$injector.get(componentType + 'Service');\n\n                        if (service != null) {\n                            if (service.componentHasWork()) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if any of the components in the node are showing their save button\n     * @param nodeId the node id to check\n     * @return whether any of the components in the node show their save button\n     */\n    doesAnyComponentShowSaveButton(nodeId) {\n\n        var result = false;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        if (component.showSaveButton == true) {\n                            // the component is showing their save button\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if any of the components in the node are showing their submit button\n     * @param nodeId the node id to check\n     * @return whether any of the components in the node show their submit button\n     */\n    doesAnyComponentShowSubmitButton(nodeId) {\n\n        var result = false;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n                        if (component.showSubmitButton == true) {\n                            // the component is showing their save button\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Turn on the save button in all the components in the step\n     * @param nodeId the node id\n     */\n    turnOnSaveButtonInComponents(nodeId) {\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the component type\n                        var componentType = component.type;\n\n                        if (componentType != null) {\n\n                            // get the service for the component type\n                            var service = this.$injector.get(componentType + 'Service');\n\n                            if (service != null) {\n\n                                // check if this component uses a save button\n                                if (service.componentUsesSaveButton()) {\n\n                                    // turn on the save button in the component\n                                    component.showSaveButton = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Turn off the submit button in all the components in the step\n     * @param nodeId the node id\n     */\n    turnOffSaveButtonInComponents(nodeId) {\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the components in the node\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n\n                    // get a component\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the component type\n                        var componentType = component.type;\n\n                        if (componentType != null) {\n\n                            // get the service for the component type\n                            var service = this.$injector.get(componentType + 'Service');\n\n                            if (service != null) {\n\n                                // check if this component uses a save button\n                                if (service.componentUsesSaveButton()) {\n\n                                    // turn on the save button in the component\n                                    component.showSaveButton = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Add the component to the node\n     * @param node the node\n     * @param component the component\n     * @param insertAfterComponentId Insert the component after this given\n     * component id. If this argument is null, we will place the new component\n     * in the first position.\n     */\n    addComponentToNode(node, component, insertAfterComponentId) {\n\n        if (node != null && component != null) {\n\n            if (insertAfterComponentId == null) {\n                /*\n                 * insertAfterComponentId is null so we will place the new\n                 * component in the first position\n                 */\n                node.components.splice(0, 0, component);\n            } else {\n                // place the new component after the insertAfterComponentId\n\n                // boolean flag for whether we have added the component yet\n                var added = false;\n\n                // get the components in the step\n                var components = node.components;\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var tempComponent = components[c];\n\n                    if (tempComponent != null && tempComponent.id != null && tempComponent.id == insertAfterComponentId) {\n                        /*\n                         * we have found the component we want to add the new\n                         * one after\n                         */\n\n                        // add the component\n                        components.splice(c + 1, 0, component);\n                        added = true;\n                        break;\n                    }\n                }\n\n                if (!added) {\n                    /*\n                     * the component has not been added yet so we will just add\n                     * it at the end\n                     */\n                    node.components.push(component);\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the component(s) within the node\n     * @param nodeId we are moving component(s) in this node\n     * @param componentIds the component(s) we are moving\n     * @param insertAfterComponentId Insert the component(s) after this given\n     * component id. If this argument is null, we will place the new\n     * component(s) in the first position.\n     */\n    moveComponent(nodeId, componentIds, insertAfterComponentId) {\n\n        // get the node for which we are moving components\n        var node = this.getNodeById(nodeId);\n\n        // get the components in the node\n        var components = node.components;\n\n        var componentsToMove = [];\n\n        // remove the component(s)\n        for (var a = components.length - 1; a >= 0; a--) {\n            var tempComponent = components[a];\n\n            if (tempComponent != null) {\n\n                if (componentIds.indexOf(tempComponent.id) != -1) {\n                    // we have found a component we want to move\n\n                    // add the component to our array of components we are moving\n                    componentsToMove.splice(0, 0, tempComponent);\n\n                    // remove the component from the components array in the node\n                    components.splice(a, 1);\n                }\n            }\n        }\n\n        // insert the component(s)\n        if (insertAfterComponentId == null) {\n            // insert the components at the beginning of the components list\n\n            // loop through all the components we are moving\n            for (var c = 0; c < componentsToMove.length; c++) {\n\n                // insert a component\n                components.splice(c, 0, componentsToMove[c]);\n            }\n        } else {\n            // insert the component(s) after the given insertAfterComponentId\n\n            // loop through all the components\n            for (var b = 0; b < components.length; b++) {\n                var tempComponent = components[b];\n\n                if (tempComponent != null && tempComponent.id == insertAfterComponentId) {\n                    // we have found the component we want to add after\n\n                    // loop through all the components we are moving\n                    for (var c = 0; c < componentsToMove.length; c++) {\n                        // insert a component\n                        components.splice(b + 1 + c, 0, componentsToMove[c]);\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        return componentsToMove;\n    }\n\n    /**\n     * Delete the component\n     * @param nodeId the node id\n     * @param componentId the component id\n     */\n    deleteComponent(nodeId, componentId) {\n        if (nodeId != null && componentId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component.id === componentId) {\n                            // we have found the component we want to delete\n\n                            // remove the component\n                            components.splice(c, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * TODO: Deprecated, should be removed; replaced by getMaxScoreForWorkgroupId in StudentStatusService\n     * Get the max score for the project. If the project contains branches, we\n     * will only calculate the max score for a single path from the first node\n     * to the last node in the project.\n     * @returns the max score for the project or null if none of the components in the project\n     * has max scores.\n     */\n    getMaxScore() {\n\n        var maxScore = null;\n\n        // get the start node id of the project\n        var startNodeId = this.getStartNodeId()\n\n        // get all the paths in the project\n        var allPaths = this.getAllPaths([], startNodeId);\n\n        if (allPaths != null && allPaths.length > 0) {\n\n            // get the first path\n            var firstPath = allPaths[0];\n\n            // loop through all the node ids in the path\n            for (var n = 0; n < firstPath.length; n++) {\n\n                // get a node id\n                var nodeId = firstPath[n];\n\n                // get the max score for the node\n                var nodeMaxScore = this.getMaxScoreForNode(nodeId);\n\n                if (nodeMaxScore != null) {\n                    if (maxScore == null) {\n                        maxScore = nodeMaxScore;\n                    } else {\n                        maxScore += nodeMaxScore;\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for the node\n     * @param nodeId the node id\n     * @returns the max score for the node\n     */\n    getMaxScoreForNode(nodeId) {\n        var maxScore = null;\n\n        // get the node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n            var components = node.components;\n\n            if (components != null) {\n\n                // loop through all the components\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n\n                        // get the max score for the component\n                        var componentMaxScore = component.maxScore;\n\n                        // check if the component has a max score\n                        if (componentMaxScore != null) {\n\n                            // make sure the max score is a valid number\n                            if (!isNaN(componentMaxScore)) {\n\n                                if (maxScore == null) {\n                                    maxScore = componentMaxScore;\n                                } else {\n                                    // accumulate the max score\n                                    maxScore += componentMaxScore;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Get the max score for a component\n     * @param nodeId get the max score from a component in this node\n     * @param componentId get the max score from this component\n     */\n    getMaxScoreForComponent(nodeId, componentId) {\n        var maxScore = null;\n\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n            maxScore = component.maxScore;\n        }\n\n        return maxScore;\n    }\n\n    /**\n     * Set the max score for a component\n     * @param nodeId set the max score from a component in this node\n     * @param componentId set the max score from this component\n     * @param maxScore set it to this maxScore\n     */\n    setMaxScoreForComponent(nodeId, componentId, maxScore) {\n        if (nodeId != null && componentId != null && maxScore != null && typeof maxScore === 'number') {\n            let component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                component.maxScore = maxScore;\n            }\n        }\n    }\n\n    /**\n     * Determine if a node id is a direct child of a group\n     * @param nodeId the node id\n     * @param groupId the group id\n     */\n    isNodeInGroup(nodeId, groupId) {\n\n        var result = false;\n\n        var group = this.getNodeById(groupId);\n\n        var childIds = group.ids;\n\n        if (childIds != null) {\n            if (childIds.indexOf(nodeId) != -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the first leaf node by traversing all the start ids\n     * until a leaf node id is found\n     */\n    getFirstLeafNodeId() {\n\n        var firstLeafNodeId = null;\n\n        // get the start group id\n        var startGroupId = this.project.startGroupId;\n\n        // get the start group node\n        var node = this.getNodeById(startGroupId);\n\n        var done = false;\n\n        // loop until we have found a leaf node id or something went wrong\n        while (!done) {\n\n            if (node == null) {\n                done = true;\n            } else if (this.isGroupNode(node.id)) {\n                // set the first leaf node id to the group id for now\n                firstLeafNodeId = node.id;\n\n                // the current node is a group\n                node = this.getNodeById(node.startId);\n            } else if (this.isApplicationNode(node.id)) {\n                // the current node is a leaf\n                firstLeafNodeId = node.id;\n                done = true;\n            } else {\n                done = true;\n            }\n        }\n\n        return firstLeafNodeId;\n    }\n\n    /**\n     * Replace a node. This is used when we want to revert a node back to a\n     * previous version in the authoring tool.\n     * @param nodeId the node id\n     * @param node the node object\n     */\n    replaceNode(nodeId, node) {\n\n        if (nodeId != null && node != null) {\n\n            // set the id to node mapping\n            this.setIdToNode(nodeId, node);\n\n            // set the id to element mapping\n            this.setIdToElement(nodeId, node);\n\n            // update the nodes array\n            var nodes = this.getNodes();\n\n            if (nodes != null) {\n\n                for (var n = 0; n < nodes.length; n++) {\n                    var tempNode = nodes[n];\n\n                    if (tempNode != null) {\n                        var tempNodeId = tempNode.id;\n\n                        if (nodeId === tempNodeId) {\n                            // we have found the node we want to replace\n                            nodes.splice(n, 1, node);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // update the application nodes array\n            var applicationNodes = this.applicationNodes;\n\n            if (applicationNodes != null) {\n                for (var a = 0; a < applicationNodes.length; a++) {\n                    var tempApplicationNode = applicationNodes[a];\n\n                    if (tempApplicationNode != null) {\n                        var tempApplicationNodeId = tempApplicationNode.id;\n\n                        if (nodeId === tempApplicationNodeId) {\n                            // we have found the node we want to replace\n                            applicationNodes.splice(a, 1, node);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if a node is a planning node\n     * @param nodeId the node id\n     * @returns whether the node is a planning node\n     */\n    isPlanning(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                if (node.planning) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a node is a planning node instance\n     * @param nodeId the node id\n     * @returns whether the node is a planning node instance\n     */\n    isPlanningInstance(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node.planningNodeTemplateId) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the available planning node ids for a node\n     * @param nodeId the node we want available planning nodes for\n     * @returns an array of available planning node ids\n     */\n    getAvailablePlanningNodeIds(nodeId) {\n        var availablePlanningNodeIds = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodeIds != null) {\n                availablePlanningNodeIds = node.availablePlanningNodeIds;\n            }\n        }\n\n        return availablePlanningNodeIds;\n    }\n\n    /**\n     * Get the available planning nodes for a given group\n     * @param nodeId the node id of the group\n     * @returns an array of planning node templates\n     */\n    getAvailablePlanningNodes(nodeId) {\n        var availablePlanningNodesSoFar = [];\n\n        if (nodeId != null) {\n            var node = this.getNodeById(nodeId);\n\n            if (node != null && node.availablePlanningNodes != null) {\n                let availablePlanningNodes = node.availablePlanningNodes;\n\n                // loop through all the nodes and retrieve the actual node\n                for (var a = 0; a < availablePlanningNodes.length; a++) {\n                    var availablePlanningNode = availablePlanningNodes[a];\n\n                    if (availablePlanningNode != null) {\n\n                        // get the node\n                        var availablePlanningNodeActual = this.getNodeById(availablePlanningNode.nodeId);\n\n                        if (availablePlanningNodeActual != null) {\n                            if (availablePlanningNode.max != null) {\n                                availablePlanningNodeActual.max = availablePlanningNode.max;\n                            }\n                            availablePlanningNodesSoFar.push(availablePlanningNodeActual);\n                        }\n                    }\n                }\n            }\n        }\n\n        return availablePlanningNodesSoFar;\n    }\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group id to add the planning node instance to\n     * @param nodeId the node id of the planning node template\n     */\n    createPlanningNodeInstance(groupId, nodeId, nextAvailablePlanningNodeId) {\n\n        var planningNodeInstance = null;\n\n        if (nodeId != null && nextAvailablePlanningNodeId != null) {\n            // get the planning node template\n            var node = this.getNodeById(nodeId);\n\n            // create a planning node instance by copying the planning node template\n            planningNodeInstance = this.copyNode(nodeId);\n\n            // set the template id to point back to the planning template node\n            planningNodeInstance.planningNodeTemplateId = nodeId;\n\n            // set the planning node instance node id\n            planningNodeInstance.id = nextAvailablePlanningNodeId;\n        }\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Add a planning node instance inside a group node\n     * @param nodeIdToInsertInside the group id to insert into\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeInsideInTransitions(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // update the child ids of the group\n        this.insertNodeInsideInGroups(planningNodeInstanceNodeId, nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Add a planning node instance after a node\n     * @param nodeIdToInsertAfter the node to insert after\n     * @param planningNodeInstance the planning node instance to add\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance) {\n        // get the node id\n        var planningNodeInstanceNodeId = planningNodeInstance.id;\n\n        // add an entry in our mapping data structures of node id to object\n        this.setIdToNode(planningNodeInstanceNodeId, planningNodeInstance);\n        this.setIdToElement(planningNodeInstanceNodeId, planningNodeInstance);\n\n        // add the node to the nodes array in the project\n        this.addNode(planningNodeInstance);\n\n        // update the transitions\n        this.insertNodeAfterInTransitions(planningNodeInstance, nodeIdToInsertAfter);\n\n        // update the child ids of the group\n        this.insertNodeAfterInGroups(planningNodeInstanceNodeId, nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance inside a group\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertInside the group to move the node into\n     */\n    movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToInsertInside) {\n\n        // move the node inside the group node\n        this.moveNodesInside([nodeIdToMove], nodeIdToInsertInside);\n\n        // recalculate all the position values in the group\n        this.recalculatePositionsInGroup(nodeIdToInsertInside);\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Move a planning node instance after a node\n     * @param nodeIdToMove the node to move\n     * @param nodeIdToInsertAfter the other node to move the node after\n     */\n    movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToInsertAfter) {\n\n        // move the node after the other node\n        this.moveNodesAfter([nodeIdToMove], nodeIdToInsertAfter);\n\n        var parentGroup = this.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // recalculate all the position values in the group\n            this.recalculatePositionsInGroup(parentGroupId);\n        }\n\n        /*\n         * set the order of the planning node instance so that it shows up\n         * in the select step drop down in the correct order\n         */\n        this.setNodeOrder(this.rootNode, 0);\n    }\n\n    /**\n     * Recalculate the positions of the children in the group.\n     * The positions are the numbers usually seen before the title\n     * e.g. if the step is seen as 1.3: Gather Evidence, then 1.3\n     * is the position\n     * @param groupId recalculate all the children of this group\n     */\n    recalculatePositionsInGroup(groupId) {\n\n        if (groupId != null) {\n            let childIds = this.getChildNodeIdsById(groupId);\n\n            // loop through all the children\n            for (let c = 0; c < childIds.length; c++) {\n                let childId = childIds[c];\n\n                // calculate the position of the child id\n                let pos = this.getPositionById(childId);\n\n                // set the mapping of node id to position\n                this.setIdToPosition(childId, pos);\n            }\n        }\n    }\n\n    /**\n     * Get the message that describes how to disable the constraint\n     * @param nodeId the node the student is trying to go to\n     * @param constraint the constraint that is preventing the student\n     * from going to the node\n     * @returns the message to display to the student that describes how\n     * to disable the constraint\n     */\n    getConstraintMessage(nodeId, constraint) {\n\n        var message = '';\n\n        if (nodeId != null && constraint != null) {\n\n            // get the node title the student is trying to go to\n            var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n\n            var removalConditional = constraint.removalConditional;\n            var removalCriteria = constraint.removalCriteria;\n\n            if (removalConditional === 'any') {\n                message += this.$translate('TO_VISIT_STEP_YOU_MUST_PERFORM_ONE_OF_THE_ACTIONS_BELOW', { nodeTitle: nodeTitle }) + ':<br/>';\n            } else {\n                message += this.$translate('TO_VISIT_STEP_YOU_MUST_PERFORM_ALL_OF_THE_ACTIONS_BELOW', { nodeTitle: nodeTitle }) + ':<br/>';\n            }\n\n            if (removalCriteria != null) {\n\n                var criteriaMessages = '';\n\n                // loop through all the criteria\n                for (var x = 0; x < removalCriteria.length; x++) {\n                    var tempRemovalCriteria = removalCriteria[x];\n\n                    if (tempRemovalCriteria != null) {\n\n                        // get the message that describes the criteria that needs to be satisfied\n                        var criteriaMessage = this.getCriteriaMessage(tempRemovalCriteria);\n\n                        if (criteriaMessage != null && criteriaMessage != '') {\n                            // separate criteria messages with a line break\n                            if (criteriaMessages != '') {\n                                criteriaMessages += '<br/>';\n                            }\n                            criteriaMessages += criteriaMessage;\n                        }\n                    }\n                }\n\n                message += criteriaMessages;\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the message that describes how to satisfy the criteria\n     * TODO: check if the criteria is satisfied\n     * @param criteria the criteria object that needs to be satisfied\n     * @returns the message to display to the student that describes how to\n     * satisfy the criteria\n     */\n    getCriteriaMessage(criteria) {\n        var message = '';\n\n        if (criteria != null) {\n            var name = criteria.name;\n            var params = criteria.params;\n\n            if (name === 'isCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'isVisited') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('visitNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'isCorrect') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('correctlyAnswerNodeTitle', { nodeTitle: nodeTitle });\n                }\n            } else if (name === 'score') {\n                var nodeId = params.nodeId;\n                var nodeTitle = '';\n                var scoresString = '';\n\n                if (nodeId != null) {\n                    // get the step number and title\n                    nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                }\n\n                var scores = params.scores;\n\n                if (scores != null) {\n                    // get the required score\n                    scoresString = scores.join(', ');\n                }\n\n                // generate the message\n                message += this.$translate('obtainAScoreOfXOnNodeTitle', { score: scoresString, nodeTitle: nodeTitle });\n            } else if (name === 'choiceChosen') {\n\n            } else if (name === 'usedXSubmits') {\n                var nodeId = params.nodeId;\n                var nodeTitle = '';\n\n                // get the number of times the student must submit\n                var requiredSubmitCount = params.requiredSubmitCount;\n\n                if (nodeId != null) {\n                    // get the step number and title\n                    nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                }\n\n                // generate the message\n                if (requiredSubmitCount == 1) {\n                    message += this.$translate('submitXTimeOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n                } else {\n                    message += this.$translate('submitXTimesOnNodeTitle', { requiredSubmitCount: requiredSubmitCount, nodeTitle: nodeTitle });\n                }\n            } else if (name === 'branchPathTaken') {\n\n            } else if (name === 'isPlanningActivityCompleted') {\n                var nodeId = params.nodeId;\n                if (nodeId != null) {\n                    var nodeTitle = this.getNodePositionAndTitleByNodeId(nodeId);\n                    message += this.$translate('completeNodeTitle', { nodeTitle: nodeTitle });\n                }\n            }\n        }\n\n        return message;\n    }\n\n    /**\n     * Get the start id of a group\n     * @param nodeId get the start id of this group\n     * @returns the start id of the group\n     */\n    getGroupStartId(nodeId) {\n\n        var startId = null;\n\n        if (nodeId != null) {\n\n            // get the group\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                // get the start id\n                startId = node.startId;\n            }\n        }\n\n\n        return startId;\n    }\n\n    /**\n     * Get the start id of the node's parent group\n     * @param nodeId we will get the parent of this node and then look\n     * for the start id of the parent\n     * @returns the start id of the parent\n     */\n    getParentGroupStartId(nodeId) {\n        var parentGroupStartId = null;\n\n        if (nodeId != null) {\n            var parentGroup = this.getParentGroup(nodeId);\n\n            if (parentGroup != null) {\n                parentGroupStartId = parentGroup.startId;\n            }\n        }\n\n        return parentGroupStartId;\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup -> newToGroup\n     *\n     * After\n     * fromGroup -> newToGroup\n     * oldToGroup becomes dangling and has no transitions to or from it\n     */\n    updateTransitionsForExtractingGroup(fromGroupId, oldToGroupId, newToGroupId) {\n\n        /*\n         * make the transitions\n         * fromGroup -> newToGroup\n         */\n        if (fromGroupId != null && oldToGroupId != null) {\n            var fromGroup = this.getNodeById(fromGroupId);\n            var oldToGroup = this.getNodeById(oldToGroupId);\n            var newToGroup = null;\n            var newToGroupStartId = null;\n\n            if (newToGroupId != null) {\n                newToGroup = this.getNodeById(newToGroupId);\n            }\n\n            if (newToGroup != null) {\n                newToGroupStartId = newToGroup.startId;\n            }\n\n            if (fromGroup != null && oldToGroup != null) {\n                var childIds = fromGroup.ids;\n\n                // update the children of the from group to point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the from group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === oldToGroupId) {\n                                        // the transition is to the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        }\n                                    } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                        // the transition is to a node in the group\n                                        if (newToGroupId == null && newToGroupStartId == null) {\n                                            // there is no new to group so we will remove the transition\n                                            transitions.splice(t, 1);\n                                            t--;\n                                        } else if (newToGroupStartId == null || newToGroupStartId == '') {\n                                            // make the transition point to the new to group\n                                            transition.to = newToGroupId;\n                                        } else {\n                                            // make the transition point to the new group start id\n                                            transition.to = newToGroupStartId;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * remove the transitions from the oldToGroup\n         */\n        if (oldToGroupId != null && newToGroupId != null) {\n\n            var oldToGroup = this.getNodeById(oldToGroupId);\n\n            if (oldToGroup != null) {\n                var childIds = oldToGroup.ids;\n\n                // remove the transitions from the old to group that point to the new to group\n                if (childIds != null) {\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n                        var child = this.getNodeById(childId);\n                        var transitions = this.getTransitionsByFromNodeId(childId);\n\n                        if (transitions != null) {\n\n                            // loop through all the transitions from the old to group\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    var toNodeId = transition.to;\n\n                                    if (toNodeId === newToGroupId) {\n                                        // the transition is to the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    } else if (this.isNodeInGroup(toNodeId, newToGroupId)) {\n                                        // the transition is to a node in the group so we will remove it\n                                        transitions.splice(t, 1);\n                                        t--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the transitions so that the fromGroup points to the newToGroup\n     *\n     * Before\n     * fromGroup -> oldToGroup\n     * newToGroup is dangling and has no transitions to or from it\n     *\n     * After\n     * fromGroup -> newToGroup -> oldToGroup\n     */\n    updateTransitionsForInsertingGroup(fromGroupId, oldToGroupIds, newToGroupId) {\n\n        var fromGroup = null;\n        var newToGroup = null;\n\n        if (fromGroupId != null) {\n            fromGroup = this.getNodeById(fromGroupId);\n        }\n\n        if (newToGroupId != null) {\n            newToGroup = this.getNodeById(newToGroupId);\n        }\n\n        /*\n         * make the transitions that point to the old group now point\n         * to the new group\n         * fromGroup -> newToGroup\n         */\n        if (fromGroup != null && newToGroup != null) {\n            var childIds = fromGroup.ids;\n            var newToGroupStartId = newToGroup.startId;\n\n            if (childIds != null) {\n\n                // loop through all the nodes in the from group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions from the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n                        /*\n                         * the child does not have any transitions so we will make it\n                         * point to the new group\n                         */\n                        if (newToGroupStartId == null || newToGroupStartId == '') {\n                            this.addToTransition(child, newToGroupId);\n                        } else {\n                            this.addToTransition(child, newToGroupStartId)\n                        }\n                    } else if (transitions != null) {\n\n                        // loop through all the transitions from the child\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var toNodeId = transition.to;\n\n                                if (oldToGroupIds != null) {\n\n                                    /*\n                                     * loop through all the old to group ids to find transitions\n                                     * to the old to group\n                                     */\n                                    for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                        var oldToGroupId = oldToGroupIds[ot];\n\n                                        if (toNodeId === oldToGroupId) {\n                                            /*\n                                             * the transition is to the group so we will update the transition\n                                             * to the new group\n                                             */\n                                            transition.to = newToGroupId;\n                                        } else if (this.isNodeInGroup(toNodeId, oldToGroupId)) {\n                                            /*\n                                             * the transition is to a node in the old group so we will update\n                                             * the transition to point to the new group\n                                             */\n                                            if (newToGroupStartId == null || newToGroupStartId == '') {\n                                                transition.to = newToGroupId;\n                                            } else {\n                                                transition.to = newToGroupStartId;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * make the steps that do not have a transition now point to the old\n         * group\n         * newToGroup -> oldToGroup\n         */\n        if (newToGroup != null) {\n            var childIds = newToGroup.ids;\n\n            if (childIds != null) {\n\n                // loop through all the children in the new group\n                for (var c = 0; c < childIds.length; c++) {\n                    var childId = childIds[c];\n                    var child = this.getNodeById(childId);\n\n                    // get the transitions for the child\n                    var transitions = this.getTransitionsByFromNodeId(childId);\n\n                    if (transitions == null || transitions.length == 0) {\n\n                        if (oldToGroupIds != null) {\n\n                            // loop through all the old groups\n                            for (var ot = 0; ot < oldToGroupIds.length; ot++) {\n                                var oldToGroupId = oldToGroupIds[ot];\n                                var oldToGroup = this.getNodeById(oldToGroupId);\n\n                                if (oldToGroup != null) {\n\n                                    var oldToGroupStartId = oldToGroup.startId;\n\n                                    var transition = {};\n\n                                    var toNodeId = '';\n\n                                    if (oldToGroupStartId == null) {\n                                        // there is no start node id so we will just point to the group\n                                        toNodeId = oldToGroup;\n                                    } else {\n                                        // there is a start node id so we will point to it\n                                        toNodeId = oldToGroupStartId;\n                                    }\n\n                                    // create the transition from the child to the old group\n                                    this.addToTransition(child, toNodeId);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Update the child transitions because we are moving a group. We will\n     * update the transitions into and out of the group in the location\n     * we are extracting the group from and also in the location we are\n     * inserting the group into.\n     * @param node the group we are moving\n     * @param nodeId we will put the group after this node id\n     */\n    updateChildrenTransitionsForMovingGroup(node, nodeId) {\n        var transitionsBefore = null;\n\n        // get the group nodes that point to the group we are moving\n        var previousGroupNodes = this.getGroupNodesByToNodeId(node.id);\n\n        // get all the transitions from the group we are moving\n        var transitionsAfter = this.getTransitionsByFromNodeId(node.id);\n\n        var extracted = false;\n\n        /*\n         * extract the group we are moving by updating the transitions of the\n         * from group and the new to group. also remove the transitions from the\n         * group we are moving.\n         */\n\n        // loop through all the groups that point to the group we are moving\n        for (var p = 0; p < previousGroupNodes.length; p++) {\n            var previousGroupNode = previousGroupNodes[p];\n\n            if (transitionsAfter == null || transitionsAfter.length == 0) {\n                // the group we are moving does not have any transitions\n\n                /*\n                 * remove the transitions to the group we are moving and make\n                 * new transitions from the from group to the new to group\n                 */\n                this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, null);\n                extracted = true;\n            } else {\n                // the group we are moving has transitions\n\n                // make the previous group point to the new to group\n                for (var t = 0; t < transitionsAfter.length; t++) {\n                    var transitionAfter = transitionsAfter[t];\n\n                    if (transitionAfter != null) {\n                        var toNodeId = transitionAfter.to;\n\n                        /*\n                         * remove the transitions to the group we are moving and make\n                         * new transitions from the from group to the new to group\n                         */\n                        this.updateTransitionsForExtractingGroup(previousGroupNode.id, node.id, toNodeId);\n                        extracted = true;\n                    }\n                }\n            }\n        }\n\n        if (!extracted) {\n            /*\n             * we have not removed the transitions yet because the group\n             * we are moving does not have any groups before it\n             */\n\n            if (transitionsAfter != null) {\n                // remove the transitions from the group we are moving\n                for (var t = 0; t < transitionsAfter.length; t++) {\n                    var transitionAfter = transitionsAfter[t];\n\n                    if (transitionAfter != null) {\n                        var toNodeId = transitionAfter.to;\n\n                        // remove the transitions to the group we are moving\n                        this.updateTransitionsForExtractingGroup(null, node.id, toNodeId);\n                        extracted = true;\n                    }\n                }\n            }\n        }\n\n        var inserted = false;\n\n        /*\n         * create the transitions from the from group to the group we are moving\n         * and the transitions from the group we are moving to the old to group\n         */\n        if (nodeId != null) {\n            // get the transitions from the previous group to the next group\n            var transitionsAfter = this.getTransitionsByFromNodeId(nodeId);\n\n            for (var t = 0; t < transitionsAfter.length; t++) {\n                var transitionAfter = transitionsAfter[t];\n\n                if (transitionAfter != null) {\n                    var toNodeId = transitionAfter.to;\n\n                    /*\n                     * create the transitions that traverse from the from group\n                     * to the group we are moving. also create the transitions\n                     * that traverse from the group we are moving to the old\n                     * to group.\n                     */\n                    this.updateTransitionsForInsertingGroup(nodeId, [toNodeId], node.id);\n                    inserted = true;\n                }\n            }\n        }\n\n        if (!inserted) {\n            /*\n             * we have not inserted the transitions yet because there were no\n             * previous group transitions\n             */\n\n            if (nodeId == null) {\n                /*\n                 * the previous node id is null which means there was no previous\n                 * group. this means the group we are inserting will become the\n                 * first group. this happens when the group we are moving\n                 * is moved inside the root (group0).\n                 */\n\n                var startGroupId = this.getStartGroupId();\n\n                if (startGroupId != null) {\n\n                    // get the start group for the whole project (group0)\n                    var startGroup = this.getNodeById(startGroupId);\n\n                    if (startGroup != null) {\n\n                        // get the first activity\n                        var firstGroupId = startGroup.startId;\n\n                        /*\n                         * create the transitions that traverse from the group\n                         * we are moving to the previous first activity.\n                         */\n                        this.updateTransitionsForInsertingGroup(nodeId, [firstGroupId], node.id);\n                    }\n                }\n\n            } else {\n                /*\n                 * we have not inserted the group yet because the from group doesn't\n                 * have a group after it\n                 */\n\n                /*\n                 * create the transitions that traverse from the from group\n                 * to the group we are moving.\n                 */\n                this.updateTransitionsForInsertingGroup(nodeId, null, node.id);\n            }\n        }\n    }\n\n    /**\n     * Check if a component is a connected component\n     * @param nodeId the node id of the component\n     * @param componentId the component that is listening for connected changes\n     * @param connectedComponentId the component that is broadcasting connected changes\n     * @returns whether the componentId is connected to the connectedComponentId\n     */\n    isConnectedComponent(nodeId, componentId, connectedComponentId) {\n\n        var result = false;\n\n        // get the component\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        if (component != null) {\n\n            var connectedComponents = component.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n\n                        /*\n                         * check if the connected component id matches the one\n                         * we are looking for. connectedComponent.id is the old\n                         * field we used to store the component id in so we will\n                         * look for that field for the sake of backwards\n                         * compatibility. connectedComponent.componentId is the\n                         * new field we store the component id in.\n                         */\n                        if (connectedComponentId === connectedComponent.id ||\n                            connectedComponentId === connectedComponent.componentId) {\n                            // we have found the connected component id we are looking for\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a connected component params\n     * @param componentId the connected component id\n     * @returns the params for the connected component\n     */\n    getConnectedComponentParams(componentContent, componentId) {\n\n        var connectedComponentParams = null;\n\n        if (componentContent != null && componentId != null) {\n\n            // get the connected components\n            var connectedComponents = componentContent.connectedComponents;\n\n            if (connectedComponents != null) {\n\n                // loop through all the connected components\n                for (var c = 0; c < connectedComponents.length; c++) {\n                    var connectedComponent = connectedComponents[c];\n\n                    if (connectedComponent != null) {\n\n                        /*\n                         * check if the connected component id matches the one\n                         * we are looking for. connectedComponent.id is the old\n                         * field we used to store the component id in so we will\n                         * look for that field for the sake of backwards\n                         * compatibility. connectedComponent.componentId is the\n                         * new field we store the component id in.\n                         */\n                        if (componentId === connectedComponent.id ||\n                            componentId === connectedComponent.componentId) {\n                            // we have found the connected component we are looking for\n                            connectedComponentParams = connectedComponent;\n                        }\n                    }\n                }\n            }\n        }\n\n        return connectedComponentParams;\n    }\n\n    /**\n     * Get the active nodes.\n     * @return An array of the active node objects.\n     */\n    getActiveNodes() {\n        return this.project.nodes;\n    }\n\n    /**\n     * Get the inactive nodes\n     * @returns the inactive nodes\n     */\n    getInactiveNodes() {\n        var inactiveNodes = [];\n\n        if (this.project != null) {\n\n            if (this.project.inactiveNodes == null) {\n                this.project.inactiveNodes = [];\n            }\n\n            inactiveNodes = this.project.inactiveNodes;\n        }\n\n        return inactiveNodes;\n    }\n\n    /**\n     * Remove the node from the active nodes\n     * @param nodeId the node to remove\n     * @returns the node that we have removed\n     */\n    removeNodeFromActiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n            var activeNodes = this.project.nodes;\n            if (activeNodes != null) {\n                for (var a = 0; a < activeNodes.length; a++) {\n                    var activeNode = activeNodes[a];\n                    if (activeNode != null) {\n                        if (nodeId === activeNode.id) {\n                            // we have found the node we want to remove\n                            node = activeNode;\n\n                            // remove the node from the array\n                            activeNodes.splice(a, 1);\n\n                            if (activeNode.type == 'group') {\n                                this.removeChildNodesFromActiveNodes(activeNode);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    }\n\n    /**\n     * Move the child nodes of a group from the active nodes and put them into\n     * the inactive nodes.\n     * @param node The group node.\n     */\n    removeChildNodesFromActiveNodes(node) {\n        if (node != null) {\n            let childIds = node.ids;\n            for (let childId of childIds) {\n                this.removeNodeFromActiveNodes(childId);\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive nodes array\n     * @param nodeId the node to remove\n     * @returns the node that was removed\n     */\n    removeNodeFromInactiveNodes(nodeId) {\n        var node = null;\n\n        if (nodeId != null) {\n\n            let parentGroup = this.getParentGroup(nodeId);\n            if (parentGroup != null) {\n                // The node has a parent so we will remove it from the parent.\n                this.removeChildFromParent(nodeId);\n            }\n\n            // get all the inactive nodes\n            let inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // loop through all the inactive nodes\n                for (let i = 0; i < inactiveNodes.length; i++) {\n                    let inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (nodeId === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            node = inactiveNode;\n\n                            // remove the node from the array\n                            inactiveNodes.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            this.removeNodeFromInactiveStepNodes(nodeId);\n            this.removeNodeFromInactiveGroupNodes(nodeId);\n        }\n\n        return node;\n    }\n\n    /**\n     * Remove the child node from the parent group.\n     * @param nodeId The child node to remove from the parent.\n     */\n    removeChildFromParent(nodeId) {\n        let parentGroup = this.getParentGroup(nodeId);\n        if (parentGroup != null) {\n            // Remove the child from the parent\n            for (let i = 0; i < parentGroup.ids.length; i++) {\n                let childId = parentGroup.ids[i];\n                if (nodeId == childId) {\n                    parentGroup.ids.splice(i, 1);\n                    break;\n                }\n            }\n            if (nodeId == parentGroup.startId) {\n                /*\n                 * The child we removed was the start id of the group so we\n                 * will update the start id.\n                 */\n                let startIdUpdated = false;\n                let transitions = this.getTransitionsByFromNodeId(nodeId);\n                if (transitions != null &&\n                        transitions.length > 0 &&\n                        transitions[0] != null &&\n                        transitions[0].to != null) {\n                    parentGroup.startId = transitions[0].to;\n                    startIdUpdated = true;\n                }\n                if (!startIdUpdated && parentGroup.ids.length > 0) {\n                    parentGroup.startId = parentGroup.ids[0];\n                    startIdUpdated = true;\n                }\n                if (!startIdUpdated) {\n                    parentGroup.startId = '';\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive step nodes array.\n     * @param nodeId The node id of the node we want to remove from the\n     * inactive step nodes array.\n     */\n    removeNodeFromInactiveStepNodes(nodeId) {\n        for (let i = 0; i < this.inactiveStepNodes.length; i++) {\n            let inactiveStepNode = this.inactiveStepNodes[i];\n            if (nodeId == inactiveStepNode.id) {\n                this.inactiveStepNodes.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Remove the node from the inactive group nodes array.\n     * @param nodeId The node id of the group we want to remove from the\n     * inactive group nodes array.\n     */\n    removeNodeFromInactiveGroupNodes(nodeId) {\n        for (let i = 0; i < this.inactiveGroupNodes.length; i++) {\n            let inactiveGroupNode = this.inactiveGroupNodes[i];\n            if (nodeId == inactiveGroupNode.id) {\n                this.inactiveGroupNodes.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Load the inactive nodes\n     * @param nodes the inactive nodes\n     */\n    loadInactiveNodes(nodes) {\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    var nodeId = node.id;\n\n                    // set the node into the mapping data structures\n                    this.setIdToNode(nodeId, node);\n                    this.setIdToElement(nodeId, node);\n                    if (node.type == 'group') {\n                        this.inactiveGroupNodes.push(node);\n                    } else {\n                        this.inactiveStepNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if the node is active\n     * @param nodeId the node to check\n     * @param componentId (optional) the component to check\n     * @returns whether the node or component is active\n     */\n    isActive(nodeId, componentId) {\n\n        if (nodeId != null) {\n\n            if (nodeId === 'inactiveNodes') {\n                // this occurs when the author puts a step into the inactive nodes\n                return false;\n            } else if (nodeId === 'inactiveGroups') {\n                // this occurs when the author puts a group into the inactive groups\n                return false;\n            } else if (this.isGroupNode(nodeId)) {\n                return this.isGroupActive(nodeId);\n            } else {\n                // the node is a step node\n\n                // get all the active nodes\n                var activeNodes = this.project.nodes;\n\n                if (activeNodes != null) {\n\n                    // loop through all the active nodes\n                    for (var n = 0; n < activeNodes.length; n++) {\n\n                        // get an active node\n                        var activeNode = activeNodes[n];\n\n                        if (activeNode != null) {\n\n                            // get the active node id\n                            var activeNodeId = activeNode.id;\n\n                            if (nodeId == activeNodeId) {\n                                // we have found the node id we are looking for\n\n                                if (componentId != null) {\n                                    // we need to find the node id and component id\n\n                                    // get the components in the node\n                                    var activeComponents = activeNode.components;\n\n                                    if (activeComponents != null) {\n\n                                        // loop through all the components\n                                        for (var c = 0; c < activeComponents.length; c++) {\n\n                                            // get a component\n                                            var activeComponent = activeComponents[c];\n\n                                            if (activeComponent != null) {\n                                                var activeComponentId = activeComponent.id;\n\n                                                if (componentId == activeComponentId) {\n                                                    /*\n                                                     * we have found the component id we are\n                                                     * looking for so we are done\n                                                     */\n                                                    return true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    //we only need to find the node id so we are done\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a group is active.\n     * @param nodeId the node id of the group\n     */\n    isGroupActive(nodeId) {\n        for (let activeNode of this.project.nodes) {\n            if (nodeId == activeNode.id) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Move the node to the active nodes array\n     */\n    moveToActive(node) {\n        if (node != null) {\n\n            // make sure the node is inactive\n            if (!this.isActive(node.id)) {\n                // the node is inactive so we will move it to the active array\n\n                // remove the node from inactive nodes array\n                this.removeNodeFromInactiveNodes(node.id);\n\n                // add the node to the active array\n                this.addNode(node);\n\n                if (this.isGroupNode(node.id)) {\n                    /*\n                     * This is a group node so we will also move all of its\n                     * children to active.\n                     */\n                    let childIds = node.ids;\n                    for (let childId of childIds) {\n                        let childNode = this.removeNodeFromInactiveNodes(childId);\n                        this.addNode(childNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Move the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveToInactive(node, nodeIdToInsertAfter) {\n        if (node != null) {\n\n            // make sure the node is active\n            if (this.isActive(node.id)) {\n                // the node is active so we will move it to the inactive array\n\n                // remove the node from the active array\n                this.removeNodeFromActiveNodes(node.id);\n\n                // add the node to the inactive array\n                this.addInactiveNode(node, nodeIdToInsertAfter);\n            }\n        }\n    }\n\n    /**\n     * Add the node to the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    addInactiveNode(node, nodeIdToInsertAfter) {\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // clear the transitions from this node\n                if (node.transitionLogic != null) {\n                    node.transitionLogic.transitions = [];\n                }\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveNodes' || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveGroups') {\n                    // put the node at the beginning of the inactive steps\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n\n                if (node.type == 'group') {\n                    this.inactiveGroupNodes.push(node.id);\n                    this.addGroupChildNodesToInactive(node);\n                } else {\n                    this.inactiveStepNodes.push(node.id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a group's child nodes to the inactive nodes.\n     * @param node The group node.\n     */\n    addGroupChildNodesToInactive(node) {\n        if (node != null) {\n            let childIds = node.ids;\n            for (let childId of childIds) {\n                let childNode = this.getNodeById(childId);\n                this.project.inactiveNodes.push(childNode);\n                this.inactiveStepNodes.push(childNode);\n            }\n        }\n    }\n\n    /**\n     * Move an inactive node within the inactive nodes array\n     * @param node the node to move\n     * @param nodeIdToInsertAfter place the node after this\n     */\n    moveInactiveNode(node, nodeIdToInsertAfter) {\n\n        if (node != null) {\n            var inactiveNodes = this.project.inactiveNodes;\n\n            if (inactiveNodes != null) {\n\n                // remove the node from inactive nodes\n\n                // loop through all the inactive nodes\n                for (var i = 0; i < inactiveNodes.length; i++) {\n                    var inactiveNode = inactiveNodes[i];\n\n                    if (inactiveNode != null) {\n                        if (node.id === inactiveNode.id) {\n                            // we have found the node we want to remove\n                            inactiveNodes.splice(i, 1);\n                        }\n                    }\n                }\n\n                // add the node back into the inactive nodes\n\n                if (nodeIdToInsertAfter == null || nodeIdToInsertAfter === 'inactiveSteps' || nodeIdToInsertAfter === 'inactiveNodes') {\n                    // put the node at the beginning of the inactive nodes\n                    inactiveNodes.splice(0, 0, node);\n                } else {\n                    // put the node after one of the inactive nodes\n\n                    var added = false;\n\n                    // loop through all the inactive nodes\n                    for (var i = 0; i < inactiveNodes.length; i++) {\n                        var inactiveNode = inactiveNodes[i];\n\n                        if (inactiveNode != null) {\n                            if (nodeIdToInsertAfter === inactiveNode.id) {\n                                // we have found the position to place the node\n                                inactiveNodes.splice(i + 1, 0, node);\n                                added = true;\n                            }\n                        }\n                    }\n\n                    if (!added) {\n                        /*\n                         * we haven't added the node yet so we will just add it\n                         * to the end of the array\n                         */\n                        inactiveNodes.push(node);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go into the group\n     * @param nodeId the group id\n     */\n    removeTransitionsIntoGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the children\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n                            this.removeTransitionsThatPointToNodeIdFromOutsideGroup(childId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove the transitions that point to the node that does not have\n     * the same parent\n     * @param nodeId remove transitions to this node\n     */\n    removeTransitionsThatPointToNodeIdFromOutsideGroup(nodeId) {\n\n        if (nodeId != null) {\n\n            // get the parent of the node\n            var parentGroupId = this.getParentGroupId(nodeId);\n\n            // get all the nodes that point to the node\n            var nodesThatPointToTargetNode = this.getNodesByToNodeId(nodeId);\n\n            if (nodesThatPointToTargetNode != null) {\n\n                // loop through all the nodes that point to the node\n                for (var n = 0; n < nodesThatPointToTargetNode.length; n++) {\n                    var nodeThatPointsToTargetNode = nodesThatPointToTargetNode[n];\n\n                    if (nodeThatPointsToTargetNode != null) {\n\n                        // get the parent of the node that points to the node target node\n                        var nodeThatPointsToTargetNodeParentGroupId = this.getParentGroupId(nodeThatPointsToTargetNode.id);\n\n                        if (parentGroupId != nodeThatPointsToTargetNodeParentGroupId) {\n                            /*\n                             * the parent groups are different so we will remove\n                             * the transition\n                             */\n                            this.removeTransition(nodeThatPointsToTargetNode, nodeId);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove a transition\n     * @param node remove a transition in this node\n     * @param toNodeId remove the transition that goes to this node id\n     */\n    removeTransition(node, toNodeId) {\n\n        if (node != null && toNodeId != null) {\n\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n                var transitions = transitionLogic.transitions;\n\n                if (transitions != null) {\n\n                    // loop through all the transitions\n                    for (var t = 0; t < transitions.length; t++) {\n                        var transition = transitions[t];\n\n                        if (transition != null) {\n                            if (toNodeId === transition.to) {\n                                // we have found a transition that goes to the toNodeId\n\n                                // remove the transition\n                                transitions.splice(t, 1);\n                                t--;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove transitions that go out of the group\n     * @param nodeId the group id\n     */\n    removeTransitionsOutOfGroup(nodeId) {\n        if (nodeId != null) {\n            var group = this.getNodeById(nodeId);\n\n            if (group != null) {\n                var childIds = group.ids;\n\n                if (childIds != null) {\n\n                    // loop through all the child ids\n                    for (var c = 0; c < childIds.length; c++) {\n                        var childId = childIds[c];\n\n                        if (childId != null) {\n\n                            // get the transitions of the child\n                            var transitions = this.getTransitionsByFromNodeId(childId);\n\n                            if (transitions != null) {\n\n                                // loop through all the transitions\n                                for (var t = 0; t < transitions.length; t++) {\n                                    var transition = transitions[t];\n\n                                    if (transition != null) {\n\n                                        // get the to node id of the transition\n                                        var toNodeId = transition.to;\n\n                                        if (toNodeId != null) {\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (nodeId != toNodeIdParentGroupId) {\n                                                /*\n                                                 * the parent group is different which means it is a\n                                                 * transition that goes out of the group\n                                                 */\n\n                                                // remove the transition\n                                                transitions.splice(t, 1);\n                                                t--;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /*\n     * Update the step transitions that point into the group we are moving\n     * For example\n     * group1 has children node1 and node2 (node2 transitions to node3)\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * group3 has children node5 and node6\n     * if we move group2 after group3 we will need to change the\n     * transition from node2 to node3 and make node2 transition to node5\n     * the result will be\n     * group1 has children node1 and node2 (node2 transitions to node5)\n     * group3 has children node5 and node6\n     * group2 has children node3 and node4 (node4 transitions to node5)\n     * note: the (node4 transition to node5) will be removed later\n     * when is called removeTransitionsOutOfGroup\n     * note: when group2 is added in a later function call, we will add\n     * the node6 to node3 transition\n     * @param groupThatTransitionsToGroupWeAreMoving the group object\n     * that transitions to the group we are moving. we may need to update\n     * the transitions of this group's children.\n     * @param groupIdWeAreMoving the group id of the group we are moving\n     */\n    updateChildrenTransitionsIntoGroupWeAreMoving(groupThatTransitionsToGroupWeAreMoving, groupIdWeAreMoving) {\n\n        if (groupThatTransitionsToGroupWeAreMoving != null && groupIdWeAreMoving != null) {\n            var group = this.getNodeById(groupIdWeAreMoving);\n\n            if (group != null) {\n                // get all the nodes that have a transition to the node we are removing\n                var nodesByToNodeId = this.getNodesByToNodeId(groupIdWeAreMoving);\n\n                // get the transitions of the node we are removing\n                var nodeToRemoveTransitionLogic = group.transitionLogic;\n                var nodeToRemoveTransitions = [];\n\n                if (nodeToRemoveTransitionLogic != null && nodeToRemoveTransitionLogic.transitions != null) {\n                    nodeToRemoveTransitions = nodeToRemoveTransitionLogic.transitions;\n                }\n\n                if (nodeToRemoveTransitions.length == 0) {\n                    /*\n                     * The group we are moving is the last group in the project\n                     * and does not have any transitions. We will loop through\n                     * all the nodes that transition into this group and remove\n                     * those transitions.\n                     */\n\n                    // get child ids of the group that comes before the group we are moving\n                    var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n                    if (childIds != null) {\n\n                        // loop through all the children\n                        for (var c = 0; c < childIds.length; c++) {\n                            var childId = childIds[c];\n\n                            var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                            if (transitionsFromChild != null) {\n\n                                // loop through all the transitions from the child\n                                for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                                    var transitionFromChild = transitionsFromChild[tfc];\n\n                                    if (transitionFromChild != null) {\n                                        var toNodeId = transitionFromChild.to;\n\n                                        // get the parent group id of the toNodeId\n                                        var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                        if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                                            // the transition is to a child in the group we are moving\n\n                                            // remove the transition\n                                            transitionsFromChild.splice(tfc, 1);\n\n                                            /*\n                                             * move the counter back one because we have just removed an\n                                             * element from the array\n                                             */\n                                            tfc--;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (nodeToRemoveTransitions.length > 0) {\n\n                    // get the first group that comes after the group we are removing\n                    var firstNodeToRemoveTransition = nodeToRemoveTransitions[0];\n                    var firstNodeToRemoveTransitionToNodeId = firstNodeToRemoveTransition.to;\n\n                    if (this.isGroupNode(firstNodeToRemoveTransitionToNodeId)) {\n\n                        // get the group that comes after the group we are moving\n                        var groupNode = this.getNodeById(firstNodeToRemoveTransitionToNodeId);\n\n                        // get child ids of the group that comes before the group we are moving\n                        var childIds = groupThatTransitionsToGroupWeAreMoving.ids;\n\n                        if (childIds != null) {\n\n                            // loop through all the children\n                            for (var c = 0; c < childIds.length; c++) {\n                                var childId = childIds[c];\n\n                                var transitionsFromChild = this.getTransitionsByFromNodeId(childId);\n\n                                if (transitionsFromChild != null) {\n\n                                    // loop through all the transitions from the child\n                                    for (var tfc = 0; tfc < transitionsFromChild.length; tfc++) {\n                                        var transitionFromChild = transitionsFromChild[tfc];\n\n                                        if (transitionFromChild != null) {\n                                            var toNodeId = transitionFromChild.to;\n\n                                            // get the parent group id of the toNodeId\n                                            var toNodeIdParentGroupId = this.getParentGroupId(toNodeId);\n\n                                            if (groupIdWeAreMoving === toNodeIdParentGroupId) {\n                                                // the transition is to a child in the group we are moving\n\n                                                if (groupNode.startId == null) {\n                                                    // change the transition to point to the after group\n                                                    transitionFromChild.to = firstNodeToRemoveTransitionToNodeId;\n                                                } else {\n                                                    // change the transition to point to the start id of the after group\n                                                    transitionFromChild.to = groupNode.startId;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the node ids and component ids in a node\n     * @param nodeId get the node ids and component ids in this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components in the node\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n\n                            var componentId = component.id;\n\n                            // create an object to hold the node id and component id\n                            var nodeIdAndComponentId = {};\n                            nodeIdAndComponentId.nodeId = nodeId;\n                            nodeIdAndComponentId.componentId = componentId;\n\n                            // add the object to the array\n                            nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n\n    /**\n     * Get the show previous work node ids and component ids in a node\n     * @param nodeId get the show previous work node ids and component ids in\n     * this node\n     * @returns an array of objects. the objects contain a node id\n     * and component id.\n     */\n    getShowPreviousWorkNodeIdsAndComponentIds(nodeId) {\n\n        var nodeIdAndComponentIds = [];\n\n        if (nodeId != null) {\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                            var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                            if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n\n                                // create an object to hold the node id and component id\n                                var nodeIdAndComponentId = {};\n                                nodeIdAndComponentId.nodeId = showPreviousWorkNodeId;\n                                nodeIdAndComponentId.componentId = showPreviousWorkComponentId;\n\n                                // add the object to the array\n                                nodeIdAndComponentIds.push(nodeIdAndComponentId);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAndComponentIds;\n    }\n\n    /**\n     * Check if we need to display the annotation to the student\n     * @param annotation the annotation\n     * @returns whether we need to display the annotation to the student\n     */\n    displayAnnotation(annotation) {\n\n        var result = true;\n\n        if (annotation != null) {\n            var nodeId = annotation.nodeId;\n            var componentId = annotation.componentId;\n\n            // get the component content\n            var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n                var componentType = component.type;\n\n                // get the component service\n                var componentService = this.$injector.get(componentType + 'Service');\n\n                if (componentService != null && componentService.displayAnnotation != null) {\n                    // check if we need to display the annotation to the student\n                    result = componentService.displayAnnotation(component, annotation);\n                    /*if (annotation.data != null && annotation.data.isGlobal && annotation.data.isPopup) {\n                        result = false;  // don't display annotation inline; it will be displayed in a popup\n                    }*/\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the global annotation properties for the specified component and score, if exists.\n     * @param component the component content\n     * @param previousScore the previousScore we want the annotation properties for, can be null, which means we just want to look at\n     * the currentScore\n     * @param currentScore the currentScore we want the annotation properties for\n     * @returns the annotation properties for the given score\n     */\n    getGlobalAnnotationGroupByScore(component, previousScore, currentScore) {\n\n        let annotationGroup = null;\n\n        if (component.globalAnnotationSettings != null && component.globalAnnotationSettings.globalAnnotationGroups != null) {\n            let globalAnnotationGroups = component.globalAnnotationSettings.globalAnnotationGroups;\n\n            for (let g = 0; g < globalAnnotationGroups.length; g++) {\n                let globalAnnotationGroup = globalAnnotationGroups[g];\n\n                if (globalAnnotationGroup.enableCriteria != null && globalAnnotationGroup.enableCriteria.scoreSequence != null) {\n                    let scoreSequence = globalAnnotationGroup.enableCriteria.scoreSequence;\n\n                    if (scoreSequence != null) {\n                        /*\n                         * get the expected previous score and current score\n                         * that will satisfy the rule\n                         */\n                        let previousScoreMatch = scoreSequence[0];\n                        let currentScoreMatch = scoreSequence[1];\n\n                        if (previousScore == null) {\n                            // just matching on the current score\n                            if (previousScoreMatch == \"\" &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                // found a match\n                                annotationGroup = globalAnnotationGroup;\n                                break;\n                            }\n                        } else {\n                            if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                /*\n                                 * the previous score and current score match the\n                                 * expected scores so we have found the rule we want\n                                 */\n                                annotationGroup = globalAnnotationGroup;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return annotationGroup;\n    }\n\n    /**\n     * Get the notification for the given score, if exists.\n     * @param component the component content\n     * @param previousScore the previousScore we want notification for, can be null, which means we just want to look at\n     * the currentScore\n     * @param currentScore the currentScore we want notification for\n     * @returns the notification for the given score\n     */\n    getNotificationByScore(component, previousScore, currentScore) {\n\n        let notificationResult = null;\n\n        if (component.notificationSettings != null && component.notificationSettings.notifications != null) {\n            let notifications = component.notificationSettings.notifications;\n            for (let n = 0; n < notifications.length; n++) {\n                let notification = notifications[n];\n                if (notification.enableCriteria != null && notification.enableCriteria.scoreSequence != null) {\n                    let scoreSequence = notification.enableCriteria.scoreSequence;\n\n                    if (scoreSequence != null) {\n\n                        /*\n                         * get the expected previous score and current score\n                         * that will satisfy the rule\n                         */\n                        let previousScoreMatch = scoreSequence[0];\n                        let currentScoreMatch = scoreSequence[1];\n\n                        if (previousScore == null) {\n                            // just matching on the current score\n                            if (previousScoreMatch == \"\" &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                // found a match\n                                notificationResult = notification;\n                                break;\n                            }\n                        } else {\n                            if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                                currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n                                /*\n                                 * the previous score and current score match the\n                                 * expected scores so we have found the rule we want\n                                 */\n                                notificationResult = notification;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return notificationResult;\n    }\n\n    /**\n     * Returns a project template for new projects\n     */\n    getNewProjectTemplate() {\n        return {\n            \"nodes\": [\n                {\n                    \"id\": \"group0\",\n                    \"type\": \"group\",\n                    \"title\": \"Master\",\n                    \"startId\": \"group1\",\n                    \"ids\": [\n                        \"group1\"\n                    ]\n                },\n                {\n                    \"id\": \"group1\",\n                    \"type\": \"group\",\n                    \"title\": this.$translate('FIRST_ACTIVITY'),\n                    \"startId\": \"\",\n                    \"ids\": [\n                    ],\n                    \"icons\": {\n                        \"default\": {\n                            \"color\": \"#2196F3\",\n                            \"type\": \"font\",\n                            \"fontSet\": \"material-icons\",\n                            \"fontName\": \"info\"\n                        }\n                    }\n                }\n            ],\n            \"constraints\": [],\n            \"startGroupId\": \"group0\",\n            \"startNodeId\": \"group0\",\n            \"navigationMode\": \"guided\",\n            \"layout\": {\n                \"template\": \"starmap|leftNav|rightNav\"\n            },\n            \"metadata\": {\n                \"title\": \"\"\n            },\n            \"notebook\": {\n                \"enabled\": false,\n                \"label\": this.$translate('NOTEBOOK'),\n                \"enableAddNew\": true,\n                \"itemTypes\": {\n                    \"note\": {\n                        \"type\": \"note\",\n                        \"enabled\": true,\n                        \"enableLink\": true,\n                        \"enableAddNote\": true,\n                        \"enableClipping\": true,\n                        \"enableStudentUploads\": true,\n                        \"requireTextOnEveryNote\": false,\n                        \"label\": {\n                            \"singular\": this.$translate('NOTE_LOWERCASE'),\n                            \"plural\": this.$translate('NOTES_LOWERCASE'),\n                            \"link\": this.$translate('NOTES'),\n                            \"icon\": \"note\",\n                            \"color\": \"#1565C0\"\n                        }\n                    },\n                    \"question\": {\n                        \"type\": \"question\",\n                        \"enabled\": false,\n                        \"enableLink\": true,\n                        \"enableClipping\": true,\n                        \"enableStudentUploads\": true,\n                        \"label\": {\n                            \"singular\": this.$translate('QUESTION_LOWER_CASE'),\n                            \"plural\": this.$translate('QUESTIONS_LOWER_CASE'),\n                            \"link\": this.$translate('QUESTIONS'),\n                            \"icon\": \"live_help\",\n                            \"color\": \"#F57C00\"\n                        }\n                    },\n                    \"report\": {\n                        \"enabled\": false,\n                        \"label\": {\n                            \"singular\": this.$translate('REPORT_LOWERCASE'),\n                            \"plural\": this.$translate('REPORTS_LOWERCASE'),\n                            \"link\": this.$translate('REPORT'),\n                            \"icon\": \"assignment\",\n                            \"color\": \"#AD1457\"\n                        },\n                        \"notes\": [\n                            {\n                                \"reportId\": \"finalReport\",\n                                \"title\": this.$translate('FINAL_REPORT'),\n                                \"description\": this.$translate('REPORT_DESCRIPTION'),\n                                \"prompt\": this.$translate('REPORT_PROMPT'),\n                                \"content\": this.$translate('REPORT_CONTENT')\n                            }\n                        ]\n                    }\n                }\n            },\n            \"inactiveNodes\": []\n        };\n    }\n\n    /**\n     * Check if a node generates work by looking at all of its components\n     * @param nodeId the node id\n     * @return whether the node generates work\n     */\n    nodeHasWork(nodeId) {\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node content object\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through all the components in the node\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n\n                            // check if the component generates work\n                            var componentHasWork = this.componentHasWork(component);\n\n                            if (componentHasWork) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a component generates work\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return whether the component generates work\n     */\n    componentHasWorkByNodeIdAndComponentId(nodeId, componentId) {\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node content object\n            var nodeContent = this.getNodeContentByNodeId(nodeId);\n\n            if (nodeContent != null) {\n                var components = nodeContent.components;\n\n                if (components != null) {\n\n                    // loop through the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null && componentId == component.id) {\n                            // we have found the component we are looking for\n\n                            // check if the component generates work\n                            var componentHasWork = this.componentHasWork(component);\n\n                            if (componentHasWork) {\n                                // the component generates work\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a component generates work\n     * @param component check if this component generates work\n     * @return whether the component generates work\n     */\n    componentHasWork(component) {\n        var result = false;\n\n        if (component != null) {\n            var componentType = component.type;\n\n            // get the component service\n            var componentService = this.getComponentService(componentType);\n\n            if (componentService != null) {\n                // check if the component generates work\n                result = componentService.componentHasWork(component);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get a component service\n     * @param componentType the component type\n     * @return the component service\n     */\n    getComponentService(componentType) {\n\n        var componentService = null;\n\n        if (componentType != null) {\n\n            // get the component service name e.g. 'OpenResponseService'\n            var componentServiceName = componentType + 'Service';\n\n            /*\n             * check if we have previously retrieved the component service.\n             * if have previously retrieved the component service it will\n             * be in the componentServices map\n             */\n            componentService = this.componentServices[componentServiceName];\n\n            if (componentService == null) {\n                /*\n                 * we have not previously retrieved the component service so\n                 * we will get it now\n                 */\n                componentService = this.$injector.get(componentServiceName);\n\n                /*\n                 * save the component service to the map so we can easily\n                 * retrieve it later\n                 */\n                this.componentServices[componentServiceName] = componentService;\n            }\n        }\n\n        return componentService;\n    }\n\n    /**\n     * Check if a node is inactive. At the moment only step nodes can be\n     * inactive.\n     * @param nodeId the node id of the step\n     */\n    isInactive(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null && this.project.inactiveNodes != null) {\n\n            // loop through all the inactive nodes\n            for (var i = 0; i < this.project.inactiveNodes.length; i++) {\n\n                // get an inactive node\n                var inactiveNode = this.project.inactiveNodes[i];\n\n                if (inactiveNode != null) {\n\n                    if (nodeId === inactiveNode.id) {\n                        /*\n                         * we have found the node id we are looking for which\n                         * means the node is inactive\n                         */\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get an unused component id\n     * @param componentIdsToSkip (optional) An array of additional component ids\n     * to skip. This is used when we are creating multiple new components. There\n     * is avery small chance that we create duplicate component ids that aren't\n     * already in the project. We avoid this problem by using this parameter.\n     * Example\n     * We want to create two new components. We first generate a new component\n     * id for the first new component for example \"1234567890\". Then we generate\n     * a new component id for the second new component and pass in\n     * [\"1234567890\"] as componentIdsToSkip because the new \"1234567890\"\n     * component hasn't actually been added to the project yet.\n     * @return a component id that isn't already being used in the project\n     */\n    getUnusedComponentId(componentIdsToSkip) {\n        // we want to make an id with 10 characters\n        var idLength = 10;\n\n        // generate a new id\n        var newComponentId = this.UtilService.generateKey(idLength);\n\n        // check if the component id is already used in the project\n        if (this.isComponentIdUsed(newComponentId)) {\n            /*\n             * the component id is already used in the project so we need to\n             * try generating another one\n             */\n            var alreadyUsed = true;\n\n            /*\n             * keep trying to generate a new component id until we have found\n             * one that isn't already being used\n             */\n            while(!alreadyUsed) {\n                // generate a new id\n                newComponentId = this.UtilService.generateKey(idLength);\n\n                // check if the id is already being used in the project\n                alreadyUsed = this.isComponentIdUsed(newComponentId);\n\n                if (componentIdsToSkip != null && componentIdsToSkip.indexOf(newComponentId) != -1) {\n                    /*\n                     * the new component is in the componentIdsToSkip so it has\n                     * already been used\n                     */\n                    alreadyUsed = true;\n                }\n            }\n        }\n\n        return newComponentId;\n    }\n\n    /**\n     * Check if the component id is already being used in the project\n     * @param componentId check if this component id is already being used in\n     * the project\n     * @return whether the component id is already being used in the project\n     */\n    isComponentIdUsed(componentId) {\n        var isUsed = false;\n\n        // loop through all the active nodes\n        for (var n = 0; n < this.project.nodes.length; n++) {\n\n            // get an active node\n            var node = this.project.nodes[n];\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            if (componentId === component.id) {\n                                // the component id is already being used\n                                isUsed = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // loop through all the inactive nodes\n        for (var n = 0; n < this.project.inactiveNodes.length; n++) {\n\n            // get an inactive node\n            var node = this.project.inactiveNodes[n];\n\n            if (node != null) {\n                var components = node.components;\n\n                if (components != null) {\n\n                    // loop through all the components\n                    for (var c = 0; c < components.length; c++) {\n                        var component = components[c];\n\n                        if (component != null) {\n                            if (componentId === component.id) {\n                                // the component id is already being used\n                                isUsed = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return isUsed;\n    }\n\n    /**\n     * Check if a node id is already being used in the project\n     * @param nodeId check if this node id is already being used in the project\n     * @return whether the node id is already being used in the project\n     */\n    isNodeIdUsed(nodeId) {\n        var isUsed = false;\n\n        // loop through all the active nodes\n        for (var n = 0; n < this.project.nodes.length; n++) {\n\n            // get an active node\n            var node = this.project.nodes[n];\n\n            if (node != null) {\n\n                if (nodeId === node.id) {\n                    return true;\n                }\n            }\n        }\n\n        // loop through all the inactive nodes\n        for (var n = 0; n < this.project.inactiveNodes.length; n++) {\n\n            // get an inactive node\n            var node = this.project.inactiveNodes[n];\n\n            if (node != null) {\n\n                if (nodeId === node.id) {\n                    return true;\n                }\n            }\n        }\n\n        return isUsed;\n    }\n\n    /**\n     * Copy the nodes into the project\n     * @param selectedNodes the nodes to import\n     * @param fromProjectId copy the nodes from this project\n     * @param toProjectId copy the nodes into this project\n     * @param nodeIdToInsertInsideOrAfter If this is a group, we will make the\n     * new step the first step in the group. If this is a step, we will place\n     * the new step after it.\n     */\n    copyNodes(selectedNodes, fromProjectId, toProjectId, nodeIdToInsertInsideOrAfter) {\n\n        // get the import steps URL\n        var importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = importStepsURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        // set the POST params\n        var params = {};\n        params.steps = angular.toJson(selectedNodes);\n        params.fromProjectId = fromProjectId;\n        params.toProjectId = toProjectId;\n        httpParams.data = $.param(params);\n\n        /*\n         * Make the request to import the steps. This will copy the asset files\n         * and change file names if necessary. If an asset file with the same\n         * name exists in both projects we will check if their content is the\n         * same. If the content is the same we don't need to copy the file. If\n         * the content is different, we need to make a copy of the file with a\n         * new name and change all the references in the steps to use the new\n         * name.\n         */\n        return this.$http(httpParams).then((result) => {\n\n            // get the selected nodes from the result that may have been modified\n            selectedNodes = result.data;\n\n            // get the inactive nodes from the project\n            var inactiveNodes = this.getInactiveNodes();\n\n            // used to hold all the new nodes\n            var newNodes = [];\n\n            // used to hold all the new node ids\n            var newNodeIds = [];\n\n            // loop through the nodes we will import\n            for (var n = 0; n < selectedNodes.length; n++) {\n\n                // get a node\n                var selectedNode = selectedNodes[n];\n\n                if (selectedNode != null) {\n\n                    // make a copy of the node so that we don't modify the source\n                    var tempNode = this.UtilService.makeCopyOfJSONObject(selectedNode);\n\n                    // check if the node id is already being used in the current project\n                    if (this.isNodeIdUsed(tempNode.id)) {\n                        // the node id is already being used in the current project\n\n                        // get the next available node id\n                        var nextAvailableNodeId = this.getNextAvailableNodeId(newNodeIds);\n\n                        // change the node id of the node we are importing\n                        tempNode.id = nextAvailableNodeId;\n                    }\n\n                    // get the components in the node\n                    var tempComponents = tempNode.components;\n\n                    if (tempComponents != null) {\n\n                        // loop through all the components in the node we are importing\n                        for (var c = 0; c < tempComponents.length; c++) {\n\n                            // get a component\n                            var tempComponent = tempComponents[c];\n\n                            if (tempComponent != null) {\n\n                                // check if the component id is already being used\n                                if (this.isComponentIdUsed(tempComponent.id)) {\n                                    // we are already using the component id so we will need to change it\n\n                                    // find a component id that isn't currently being used\n                                    var newComponentId = this.getUnusedComponentId();\n\n                                    // set the new component id into the component\n                                    tempComponent.id = newComponentId;\n                                }\n                            }\n                        }\n                    }\n\n                    // clear the constraints\n                    tempNode.constraints = [];\n\n                    // add the new node and new node id to our arrays\n                    newNodes.push(tempNode);\n                    newNodeIds.push(tempNode.id);\n                }\n            }\n\n            if (nodeIdToInsertInsideOrAfter == null) {\n                /*\n                 * the place to put the new node has not been specified so we\n                 * will place it in the inactive steps section\n                 */\n\n                /*\n                 * Insert the node after the last inactive node. If there\n                 * are no inactive nodes it will just be placed in the\n                 * inactive nodes section. In the latter case we do this by\n                 * setting nodeIdToInsertInsideOrAfter to 'inactiveSteps'.\n                 */\n                if (inactiveNodes != null && inactiveNodes.length > 0) {\n                    nodeIdToInsertInsideOrAfter = inactiveNodes[inactiveNodes.length - 1];\n                } else {\n                    nodeIdToInsertInsideOrAfter = 'inactiveSteps';\n                }\n            }\n\n            // loop through all the new nodes\n            for (var nn = 0; nn < newNodes.length; nn++) {\n                var newNode = newNodes[nn];\n\n                if (this.isGroupNode(nodeIdToInsertInsideOrAfter)) {\n                    // we want to make the new step the first step in the given activity\n                    this.createNodeInside(newNode, nodeIdToInsertInsideOrAfter);\n                } else {\n                    // we want to place the new step after the given step\n                    this.createNodeAfter(newNode, nodeIdToInsertInsideOrAfter);\n                }\n\n                /*\n                 * Update the nodeIdToInsertInsideOrAfter so that when we are\n                 * importing multiple steps, the steps get placed in the correct\n                 * order.\n                 *\n                 * Example\n                 * We are importing nodeA and nodeB and want to place them after\n                 * nodeX. Therefore we want the order to be\n                 *\n                 * nodeX\n                 * nodeA\n                 * nodeB\n                 *\n                 * This means after we add nodeA, we must update\n                 * nodeIdToInsertInsideOrAfter to be nodeA so that when we add\n                 * nodeB, it will be placed after nodeA.\n                 */\n                nodeIdToInsertInsideOrAfter = newNode.id;\n            }\n\n            return newNodes;\n        });\n    }\n\n    /**\n     * Get the next available constraint id for a node\n     * @param nodeId get the next available constraint id for this node\n     * e.g. node8Constraint2\n     * @return the next available constraint id for the node\n     */\n    getNextAvailableConstraintIdForNodeId(nodeId) {\n\n        var nextAvailableConstraintId = null;\n\n        if (nodeId != null) {\n\n            // an array to hold the constraint ids that are already being used\n            var usedConstraintIds = [];\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // loop through all the constraints\n                    for (var c = 0; c < constraints.length; c++) {\n                        var constraint = constraints[c];\n\n                        if (constraint != null) {\n                            var constraintId = constraint.id;\n\n                            // add the constraint id to the array of used constraint ids\n                            usedConstraintIds.push(constraintId);\n                        }\n                    }\n                }\n            }\n\n            var foundNextAvailableConstraintId = false;\n            var counter = 1;\n\n            // loop until we have found a constraint id that hasn't been used\n            while(!foundNextAvailableConstraintId) {\n\n                // generate a constraint id\n                var potentialConstraintId = nodeId + 'Constraint' + counter;\n\n                // check if the constraint id has been used\n                if (usedConstraintIds.indexOf(potentialConstraintId) == -1) {\n                    // we have found a constraint id that has not been used\n                    nextAvailableConstraintId = potentialConstraintId;\n\n                    // we are done looping\n                    foundNextAvailableConstraintId = true;\n                } else {\n                    // we have found a constraint id that has been used\n                    counter++;\n                }\n            }\n        }\n\n        return nextAvailableConstraintId;\n    }\n\n    /**\n     * Set a field in the transition logic of a node\n     */\n    setTransitionLogicField(nodeId, field, value) {\n\n        if (nodeId != null && field != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the transition logic\n                var transitionLogic = node.transitionLogic;\n\n                if (transitionLogic != null) {\n\n                    // set the value of the field\n                    transitionLogic[field] = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the criteria params field\n     * @param criteria the criteria object\n     * @param field the field name\n     * @param value the value to set into the field\n     */\n    setCriteriaParamsField(criteria, field, value) {\n\n        if (criteria != null) {\n\n            if (criteria.params == null) {\n\n                // create a params field since it does not exist\n                criteria.params = {};\n            }\n\n            // set the value of the field\n            criteria.params[field] = value;\n        }\n    }\n\n    /**\n     * Get the criteria params field\n     * @param criteria the criteria object\n     * @param field the field name\n     */\n    getCriteriaParamsField(criteria, field) {\n\n        if (criteria != null) {\n\n            // get the params\n            var params = criteria.params;\n\n            if (params != null) {\n                // get the field value\n                return params[field];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Set the transition to value of a node\n     * @param fromNodeId the from node\n     * @param toNodeId the to node\n     */\n    setTransition(fromNodeId, toNodeId) {\n        var node = this.getNodeById(fromNodeId);\n\n        if (node != null) {\n            // get the transition logic of the node\n            var transitionLogic = node.transitionLogic;\n\n            if (transitionLogic != null) {\n\n                // get the transitions\n                var transitions = transitionLogic.transitions;\n\n                if (transitions == null || transitions.length == 0) {\n                    // there are no transitions so we will create one\n                    transitionLogic.transitions = [];\n\n                    // create a transition object\n                    var transition = {};\n                    transitionLogic.transitions.push(transition);\n\n                    transitions = transitionLogic.transitions;\n                }\n\n                if (transitions != null && transitions.length > 0) {\n\n                    // get the first transition. we will assume there is only one transition.\n                    var transition = transitions[0];\n\n                    if (transition != null) {\n                        // set the to value\n                        transition.to = toNodeId;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the node id that comes after a given node id\n     * @param nodeId get the node id that comes after this node id\n     * @param the node id that comes after the one that is passed in as a parameter\n     */\n    getNodeIdAfter(nodeId) {\n\n        var nodeIdAfter = null;\n\n        // get an array of ordered items. each item represents a node\n        var orderedItems = this.$filter('orderBy')(this.$filter('toArray')(this.idToOrder), 'order');\n\n        if (orderedItems != null) {\n\n            var foundNodeId = false;\n\n            // loop through all the items\n            for (var i = 0; i < orderedItems.length; i++) {\n\n                // get an item\n                var item = orderedItems[i];\n\n                if (item != null) {\n                    // get the node id of the item\n                    var tempNodeId = item.$key;\n\n                    // check if we have found the node id that was passed in as a parameter\n                    if (foundNodeId) {\n                        /*\n                         * we have previously found the node id that was passed in which means\n                         * the current temp node id is the one that comes after it\n                         */\n                        nodeIdAfter = tempNodeId;\n                        break;\n                    } else {\n\n                        if (nodeId == tempNodeId) {\n                            // we have found the node id that was passed in as a parameter\n                            foundNodeId = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return nodeIdAfter;\n    }\n\n    /**\n     * Get the node ids in the branch by looking for nodes that have branch\n     * path taken constraints with the given fromNodeId and toNodeId\n     * @param fromNodeId the from node id\n     * @param toNodeId the to node id\n     * @return an array of nodes that are in the branch path\n     */\n    getNodeIdsInBranch(fromNodeId, toNodeId) {\n\n        var nodesInBranch = [];\n\n        // get all the nodes in the project\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n\n            // loop through all the nodes\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    if (this.hasBranchPathTakenConstraint(node, fromNodeId, toNodeId)) {\n                        /*\n                         * this node has the the branch path taken constraint we are\n                         * looking for\n                         */\n                        nodesInBranch.push(node.id);\n                    }\n                }\n            }\n        }\n\n        return nodesInBranch;\n    }\n\n    /**\n     * Check if a node has a branch path taken constraint\n     * @param node the node to check\n     * @param fromNodeId the from node id of the branch path taken\n     * @param toNodeId the to node id of the branch path taken\n     * @return whether the node has a branch path taken constraint with the\n     * given from node id and to node id\n     */\n    hasBranchPathTakenConstraint(node, fromNodeId, toNodeId) {\n\n        if (node != null) {\n\n            // get the constraints in the node\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the removal criteria of the constraint\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criterion\n                            for (var r = 0; r < removalCriteria.length; r++) {\n\n                                // get a removal criterion\n                                var removalCriterion = removalCriteria[r];\n\n                                if (removalCriterion != null) {\n\n                                    // get the removal criterion name\n                                    var name = removalCriterion.name;\n\n                                    if (name == 'branchPathTaken') {\n                                        // this is a branch path taken constraint\n\n                                        // get the removal criterion params\n                                        var params = removalCriterion.params;\n\n                                        if (params != null) {\n                                            if (fromNodeId == params.fromNodeId && toNodeId == params.toNodeId) {\n                                                // the params match the from node id and to node id\n                                                return true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Add branch path taken constraints to the node\n     * @param targetNodeId the node to add the constraints to\n     * @param fromNodeId the from node id of the branch path taken constraint\n     * @param toNodeId the to node id of the branch path taken constraint\n     */\n    addBranchPathTakenConstraints(targetNodeId, fromNodeId, toNodeId) {\n\n        if (targetNodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(targetNodeId);\n\n            if (node != null) {\n\n                /*\n                 * create the constraint that makes the node not visible until\n                 * the given branch path is taken\n                 */\n                var makeThisNodeNotVisibleConstraint = {};\n                makeThisNodeNotVisibleConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n                makeThisNodeNotVisibleConstraint.action = 'makeThisNodeNotVisible';\n                makeThisNodeNotVisibleConstraint.targetId = targetNodeId;\n                makeThisNodeNotVisibleConstraint.removalCriteria = [];\n                var notVisibleRemovalCriterion = {};\n                notVisibleRemovalCriterion.name = 'branchPathTaken';\n                notVisibleRemovalCriterion.params = {};\n                notVisibleRemovalCriterion.params.fromNodeId = fromNodeId;\n                notVisibleRemovalCriterion.params.toNodeId = toNodeId;\n                makeThisNodeNotVisibleConstraint.removalConditional = 'all';\n                makeThisNodeNotVisibleConstraint.removalCriteria.push(notVisibleRemovalCriterion);\n                node.constraints.push(makeThisNodeNotVisibleConstraint);\n\n                /*\n                 * create the constraint that makes the node not visitable until\n                 * the given branch path is taken\n                 */\n                var makeThisNodeNotVisitableConstraint = {};\n                makeThisNodeNotVisitableConstraint.id = this.getNextAvailableConstraintIdForNodeId(targetNodeId);\n                makeThisNodeNotVisitableConstraint.action = 'makeThisNodeNotVisitable';\n                makeThisNodeNotVisitableConstraint.targetId = targetNodeId;\n                makeThisNodeNotVisitableConstraint.removalCriteria = [];\n                var notVisitableRemovalCriterion = {};\n                notVisitableRemovalCriterion.name = 'branchPathTaken';\n                notVisitableRemovalCriterion.params = {};\n                notVisitableRemovalCriterion.params.fromNodeId = fromNodeId;\n                notVisitableRemovalCriterion.params.toNodeId = toNodeId;\n                makeThisNodeNotVisitableConstraint.removalConditional = 'all';\n                makeThisNodeNotVisitableConstraint.removalCriteria.push(notVisitableRemovalCriterion);\n                node.constraints.push(makeThisNodeNotVisitableConstraint);\n            }\n        }\n    }\n\n    /**\n     * Remove the branch path taken constraints from a node\n     * @param nodeId remove the constraints from this node\n     */\n    removeBranchPathTakenNodeConstraints(nodeId) {\n\n        // get a node\n        var node = this.getNodeById(nodeId);\n\n        if (node != null) {\n\n            // get the constraints\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        // get the removal criteria\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criteria\n                            for (var rc = 0; rc < removalCriteria.length; rc++) {\n\n                                // get a removal criterion\n                                var removalCriterion = removalCriteria[rc];\n\n                                if (removalCriterion != null) {\n                                    if (removalCriterion.name == 'branchPathTaken') {\n                                        // this is a branch path taken removal criterion\n                                        var params = removalCriterion.params;\n\n                                        // remove the constraint\n                                        constraints.splice(c, 1);\n\n                                        // move the counter back one because we just removed a constraint\n                                        c--;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the branch path taken constraints from a node\n     * @param nodeId get the branch path taken constraints from this node\n     * @return an array of branch path taken constraints from the node\n     */\n    getBranchPathTakenConstraintsByNodeId(nodeId) {\n\n        var branchPathTakenConstraints = [];\n\n        if (nodeId != null) {\n\n            // get the node\n            var node = this.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the constraints from the node\n                var constraints = node.constraints;\n\n                if (constraints != null) {\n\n                    // loop through all the constraints\n                    for (var c = 0; c < constraints.length; c++) {\n                        var constraint = constraints[c];\n\n                        if (constraint != null) {\n\n                            // get the removal criteria from the constraint\n                            var removalCriteria = constraint.removalCriteria;\n\n                            if (removalCriteria != null) {\n\n                                // loop through all the removal criteria\n                                for (var rc = 0; rc < removalCriteria.length; rc++) {\n                                    var removalCriterion = removalCriteria[rc];\n\n                                    if (removalCriterion != null) {\n                                        if (removalCriterion.name == 'branchPathTaken') {\n                                            /*\n                                             * we have found a branch path taken constraint so\n                                             * we will add the constraint to the array\n                                             */\n                                            branchPathTakenConstraints.push(constraint);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenConstraints;\n    }\n\n    /**\n     * Update the branch path taken constraint\n     * @param node update the branch path taken constraints in this node\n     * @param currentFromNodeId the current from node id\n     * @param currentToNodeId the current to node id\n     * @param newFromNodeId the new from node id\n     * @param newToNodeId the new to node id\n     */\n    updateBranchPathTakenConstraint(node, currentFromNodeId, currentToNodeId, newFromNodeId, newToNodeId) {\n\n        if (node != null) {\n            var constraints = node.constraints;\n\n            if (constraints != null) {\n\n                // loop through all the constraints for the node\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    if (constraint != null) {\n\n                        var removalCriteria = constraint.removalCriteria;\n\n                        if (removalCriteria != null) {\n\n                            // loop through all the removal criteria\n                            for (var r = 0; r < removalCriteria.length; r++) {\n                                var removalCriterion = removalCriteria[r];\n\n                                if (removalCriterion != null) {\n\n                                    if (removalCriterion.name === 'branchPathTaken') {\n                                        // we have found a branchPathTaken removal criterion\n\n                                        var params = removalCriterion.params;\n\n                                        if (params != null) {\n\n                                            if (params.fromNodeId === currentFromNodeId &&\n                                                params.toNodeId === currentToNodeId) {\n\n                                                /*\n                                                 * we have found a branchPathTaken removal criterion\n                                                 * with the fromNodeId and toNodeId that we are\n                                                 * looking for so we will now update the values\n                                                 */\n                                                params.fromNodeId = newFromNodeId;\n                                                params.toNodeId = newToNodeId;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the project level rubric\n     * @return the project level rubric\n     */\n    getProjectRubric() {\n        return this.project.rubric;\n    }\n\n    /**\n     * Set the project level rubric\n     */\n    setProjectRubric(html) {\n        this.project.rubric = html;\n    }\n\n    /**\n     * Check if a node is a branch point\n     * @param nodeId the node id\n     * @return whether the node is a branch point\n     */\n    isBranchPoint(nodeId) {\n\n        var transitions = this.getTransitionsByFromNodeId(nodeId);\n\n        if (transitions != null) {\n            if (transitions.length > 1) {\n                /*\n                 * the node contains more than one transition which means it is\n                 * a branch point\n                 */\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a node is the first node in a branch path\n     * @param nodeId the node id\n     * @return whether the node is the first node in a branch path\n     */\n    isFirstNodeInBranchPath(nodeId) {\n\n        var nodes = this.getNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null &&\n                    node.transitionLogic != null &&\n                    node.transitionLogic.transitions != null) {\n\n                    var transitions = node.transitionLogic.transitions;\n\n                    if (transitions.length > 1) {\n                        /*\n                         * there is more than one transition from this node\n                         * which means it is a branch point\n                         */\n\n                        for (var t = 0; t < transitions.length; t++) {\n                            var transition = transitions[t];\n\n                            if (transition != null) {\n                                var transitionTo = transition.to;\n\n                                if (transitionTo === nodeId) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if the node is in any branch path\n     * @param nodeId the node id of the node\n     * @return whether the node is in any branch path\n     */\n    isNodeInAnyBranchPath(nodeId) {\n\n        var result = false;\n\n        if (this.nodeIdToIsInBranchPath[nodeId] == null) {\n            /*\n             * we have not calculated whether the node id is in a branch path\n             * before so we will now\n             */\n\n            // get the branches in the project\n            var branches = this.getBranches();\n\n            // check if the node id is in any of the branches\n            result = this.isNodeIdInABranch(branches, nodeId);\n\n            // remember the result for this node id\n            this.nodeIdToIsInBranchPath[nodeId] = result;\n        } else {\n            /*\n             * we have calculated whether the node id is in a branch path\n             * before\n             */\n            result = this.nodeIdToIsInBranchPath[nodeId];\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if a node is a branch start point\n     * @param nodeId look for a branch with this start node id\n     * @return whether the node is a branch start point\n     */\n    isBranchStartPoint(nodeId) {\n\n        /*\n         * Get all the branches. Each branch is represented as an object that\n         * contains the branchStartPoint, branchEndPoint, and branchPaths.\n         */\n        var branches = this.getBranches();\n\n        if (branches != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n                var branch = branches[b];\n\n                if (branch != null) {\n                    if (branch.branchStartPoint == nodeId) {\n                        /*\n                         * we have found a branch with the given nodeId as the\n                         * start point\n                         */\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if a node is a branch end point\n     * @param nodeId look for a branch with this end node id\n     * @return whether the node is a branch end point\n     */\n    isBranchMergePoint(nodeId) {\n\n        /*\n         * Get all the branches. Each branch is represented as an object that\n         * contains the branchStartPoint, branchEndPoint, and branchPaths.\n         */\n        var branches = this.getBranches();\n\n        if (branches != null) {\n\n            // loop through all the branches\n            for (var b = 0; b < branches.length; b++) {\n                var branch = branches[b];\n\n                if (branch != null) {\n                    if (branch.branchEndPoint == nodeId) {\n                        /*\n                         * we have found a branch with the given nodeId as the\n                         * end point\n                         */\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get all the branches whose branch start point is the given node id\n     * @param nodeId the branch start point\n     * @return an array of branches that have the given branch start point\n     */\n    getBranchesByBranchStartPointNodeId(nodeId) {\n\n        var branches = [];\n\n        // get all the branches in the project\n        var allBranches = this.getBranches();\n\n        if (allBranches != null) {\n\n            // loop through all the branches in the project\n            for (var b = 0; b < allBranches.length; b++) {\n                var branch = allBranches[b];\n\n                if (branch != null) {\n\n                    if (nodeId == branch.branchStartPoint) {\n                        /*\n                         * the branch start point matches the node id we are\n                         * looking for\n                         */\n                        branches.push(branch);\n                    }\n                }\n            }\n        }\n\n        return branches;\n    }\n\n    /**\n     * Calculate the node numbers and set them into the nodeIdToNumber map\n     */\n    calculateNodeNumbers() {\n\n        // clear the node id to number mapping\n        this.nodeIdToNumber = {};\n\n        // clear the node id to branch path letter mapping\n        this.nodeIdToBranchPathLetter = {};\n\n        // get the start node id\n        var startNodeId = this.getStartNodeId();\n\n        var currentActivityNumber = 0;\n        var currentStepNumber = 0;\n\n        /*\n         * recursively calculate the node numbers by traversing the project\n         * tree\n         */\n        this.calculateNodeNumbersHelper(startNodeId, currentActivityNumber, currentStepNumber);\n    }\n\n    /**\n     * Recursively calcualte the node numbers by traversing the project tree\n     * using transitions\n     * @param nodeId the current node id we are on\n     * @param currentActivityNumber the current activity number\n     * @param currentStepNumber the current step number\n     * @param branchLetterCode (optional) the character code for the branch\n     * letter e.g. 1=A, 2=B, etc.\n     */\n    calculateNodeNumbersHelper(nodeId, currentActivityNumber, currentStepNumber, branchLetterCode) {\n\n        if (nodeId != null) {\n            if (this.isApplicationNode(nodeId)) {\n                // the node is a step node\n\n                // get the node object\n                var node = this.getNodeById(nodeId);\n\n                if (node != null) {\n\n                    // get the parent group of the node\n                    var parentGroup = this.getParentGroup(nodeId);\n\n                    if (parentGroup != null) {\n\n                        // check if the parent group has previously been assigned a number\n                        if (this.nodeIdToNumber[parentGroup.id] == null) {\n                            /*\n                             * the parent group has not been assigned a number so\n                             * we will assign a number now\n                             */\n\n                            // set the activity number\n                            currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n                            /*\n                             * set the current step number to 1 now that we have\n                             * entered a new group\n                             */\n                            currentStepNumber = 1;\n\n                            // set the activity number\n                            this.nodeIdToNumber[parentGroup.id] = \"\" + currentActivityNumber;\n                        } else {\n                            /*\n                             * the parent group has previously been assigned a number so we\n                             * will use it\n                             */\n                            currentActivityNumber = this.nodeIdToNumber[parentGroup.id];\n                        }\n                    }\n\n                    if (this.isBranchMergePoint(nodeId)) {\n                        /*\n                         * the node is a merge point so we will not use a letter\n                         * anymore now that we are no longer in a branch path\n                         */\n                        branchLetterCode = null;\n                    }\n\n                    if (this.isBranchStartPoint(nodeId)) {\n                        // the node is a branch start point\n\n                        // get the branch that this node is a start point for\n                        var branchesByBranchStartPointNodeId = this.getBranchesByBranchStartPointNodeId(nodeId);\n\n                        // get the branch object, there should only be one\n                        var branchesObject = branchesByBranchStartPointNodeId[0];\n\n                        /*\n                         * this is used to obtain the max step number that has\n                         * been used in the branch paths so that we know what\n                         * step number to give the merge end point\n                         */\n                        var maxCurrentStepNumber = 0;\n\n                        // set the step number for the branch start point\n                        this.nodeIdToNumber[nodeId] = currentActivityNumber + '.' + currentStepNumber;\n\n                        // increment the step counteer\n                        currentStepNumber++;\n\n                        // get the branch paths\n                        var branchPaths = branchesObject.branchPaths;\n\n                        // loop through all the branch paths\n                        for (var bp = 0; bp < branchPaths.length; bp++) {\n\n                            // get a branch path\n                            var branchPath = branchPaths[bp];\n\n                            // step number counter for this branch path\n                            var branchCurrentStepNumber = currentStepNumber;\n\n                            // get the letter code e.g. 1=A, 2=B, etc.\n                            var branchLetterCode = bp;\n\n                            // loop through all the nodes in the branch path\n                            for (var bpn = 0; bpn < branchPath.length; bpn++) {\n                                if (bpn == 0) {\n\n                                    /*\n                                     * Recursively call calculateNodeNumbersHelper on the\n                                     * first step in this branch path. This will recursively\n                                     * calculate the numbers for all the nodes in this\n                                     * branch path.\n                                     */\n                                    var branchPathNodeId = branchPath[bpn];\n                                    this.calculateNodeNumbersHelper(branchPathNodeId, currentActivityNumber, branchCurrentStepNumber, branchLetterCode);\n                                }\n\n                                // increment the step counter for this branch path\n                                branchCurrentStepNumber++;\n\n                                /*\n                                 * update the max current step number if we have found\n                                 * a larger number\n                                 */\n                                if (branchCurrentStepNumber > maxCurrentStepNumber) {\n                                    maxCurrentStepNumber = branchCurrentStepNumber;\n                                }\n                            }\n                        }\n\n                        // get the step number we should use for the end point\n                        currentStepNumber = maxCurrentStepNumber;\n\n                        var branchEndPointNodeId = branchesObject.branchEndPoint;\n\n                        /*\n                         * calculate the node number for the branch end point and\n                         * continue calculating node numbers for the nodes that\n                         * come after it\n                         */\n                        this.calculateNodeNumbersHelper(branchEndPointNodeId, currentActivityNumber, currentStepNumber);\n                    } else {\n                        // the node is not a branch start point\n\n                        /*\n                         * check if we have already set the number for this node so\n                         * that we don't need to unnecessarily re-calculate the\n                         * node number\n                         */\n                        if (this.nodeIdToNumber[nodeId] == null) {\n                            // we have not calculated the node number yet\n\n                            var number = null;\n\n                            if (branchLetterCode == null) {\n                                // we do not need to add a branch letter\n\n                                // get the node number e.g. 1.5\n                                number = currentActivityNumber + '.' + currentStepNumber;\n                            } else {\n                                // we need to add a branch letter\n\n                                // get the branch letter\n                                var branchLetter = String.fromCharCode(65 + branchLetterCode);\n\n                                // get the node number e.g. 1.5 A\n                                number = currentActivityNumber + '.' + currentStepNumber + ' ' + branchLetter;\n\n                                // remember the branch path letter for this node\n                                this.nodeIdToBranchPathLetter[nodeId] = branchLetter;\n                            }\n\n                            // set the number for the node\n                            this.nodeIdToNumber[nodeId] = number;\n                        } else {\n                            /*\n                             * We have calculated the node number before so we\n                             * will return. This will prevent infinite looping\n                             * within the project.\n                             */\n                            return;\n                        }\n\n                        // increment the step number for the next node to use\n                        currentStepNumber++;\n\n                        var transitions = [];\n\n                        if (node.transitionLogic != null && node.transitionLogic.transitions) {\n                            transitions = node.transitionLogic.transitions;\n                        }\n\n                        if (transitions.length > 0) {\n\n                            /*\n                             * loop through all the transitions, there should only\n                             * be one but we will loop through them just to be complete.\n                             * if there was more than one transition, it would mean\n                             * this node is a branch start point in which case we\n                             * would have gone inside the other block of code where\n                             * this.isBranchStartPoint() is true.\n                             */\n                            for (var t = 0; t < transitions.length; t++) {\n                                var transition = transitions[t];\n\n                                if (transition != null) {\n                                    if (this.isBranchMergePoint(transition.to)) {\n\n                                    } else {\n                                        this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                                    }\n                                }\n                            }\n                        } else {\n                            // if there are no transitions, check if the parent group has a transition\n\n                            if (parentGroup != null &&\n                                parentGroup.transitionLogic != null &&\n                                parentGroup.transitionLogic.transitions != null &&\n                                parentGroup.transitionLogic.transitions.length > 0) {\n\n                                for (var pg = 0; pg < parentGroup.transitionLogic.transitions.length; pg++) {\n                                    var transition = parentGroup.transitionLogic.transitions[pg];\n\n                                    if (transition != null) {\n                                        this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // the node is a group node\n\n                // get the node object\n                var node = this.getNodeById(nodeId);\n\n                if (node != null) {\n                    // check if the group has previously been assigned a number\n                    if (this.nodeIdToNumber[nodeId] == null) {\n                        /*\n                         * the group has not been assigned a number so\n                         * we will assign a number now\n                         */\n\n                        if (nodeId == 'group0') {\n                            // group 0 will always be given the activity number of 0\n                            this.nodeIdToNumber[nodeId] = \"\" + 0;\n                        } else {\n                            // set the activity number\n                            currentActivityNumber = parseInt(currentActivityNumber) + 1;\n\n                            /*\n                             * set the current step number to 1 now that we have\n                             * entered a new group\n                             */\n                            currentStepNumber = 1;\n\n                            // set the activity number\n                            this.nodeIdToNumber[nodeId] = \"\" + currentActivityNumber;\n                        }\n                    } else {\n                        /*\n                         * We have calculated the node number before so we\n                         * will return. This will prevent infinite looping\n                         * within the project.\n                         */\n                        return;\n                    }\n\n                    if (node.startId != null && node.startId != '') {\n                        /*\n                         * calculate the node number for the first step in this\n                         * activity and any steps after it\n                         */\n                        this.calculateNodeNumbersHelper(node.startId, currentActivityNumber, currentStepNumber, branchLetterCode);\n                    } else {\n                        /*\n                         * this activity doesn't have a start step so we will\n                         * look for a transition\n                         */\n\n                        if (node != null &&\n                            node.transitionLogic != null &&\n                            node.transitionLogic.transitions != null &&\n                            node.transitionLogic.transitions.length > 0) {\n\n                            // loop through all the transitions\n                            for (var t = 0; t < node.transitionLogic.transitions.length; t++) {\n                                var transition = node.transitionLogic.transitions[t];\n\n                                if (transition != null) {\n                                    /*\n                                     * calculate the node number for the next group\n                                     * and all its children steps\n                                     */\n                                    this.calculateNodeNumbersHelper(transition.to, currentActivityNumber, currentStepNumber, branchLetterCode);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get script for this project\n     */\n    getProjectScript() {\n        return this.project.script;\n    }\n\n    /**\n     * Retrieve the script with the provided script filename\n     * @param scriptFilename\n     */\n    retrieveScript(scriptFilename) {\n        let assetDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n        let scriptPath = assetDirectoryPath + \"/\" + scriptFilename;\n        return this.$http.get(scriptPath).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Registers an additionalProcessingFunction for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param additionalProcessingFunction the function to register for the node and component.\n     */\n    addAdditionalProcessingFunction(nodeId, componentId, additionalProcessingFunction) {\n        let key = nodeId + \"_\" + componentId;\n        if (this.additionalProcessingFunctionsMap[key] == null) {\n            this.additionalProcessingFunctionsMap[key] = [];\n        }\n        this.additionalProcessingFunctionsMap[key].push(additionalProcessingFunction);\n    }\n\n    /**\n     * Returns true iff the specified node and component has any registered additionalProcessingFunctions\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns true/false\n     */\n    hasAdditionalProcessingFunctions(nodeId, componentId) {\n        return this.getAdditionalProcessingFunctions(nodeId, componentId) != null;\n    }\n\n    /**\n     * Returns an array of registered additionalProcessingFunctions for the specified node and component\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of additionalProcessingFunctions\n     */\n    getAdditionalProcessingFunctions(nodeId, componentId) {\n        let key = nodeId + \"_\" + componentId;\n        return this.additionalProcessingFunctionsMap[key];\n    }\n\n    /**\n     * Get the previous node\n     * @param nodeId get the node id that comes before this one\n     * @return the node id that comes before\n     */\n    getPreviousNodeId(nodeId) {\n        var previousNodeId = null;\n\n        // get the node ids in the project as a flat array\n        var flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n\n        if (flattenedNodeIds != null) {\n\n            // get the index of the node id\n            var indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n\n            if (indexOfNodeId != -1) {\n\n                // get the index of the previous node id\n                var indexOfPreviousNodeId = indexOfNodeId - 1;\n\n                // get the previous node id\n                previousNodeId = flattenedNodeIds[indexOfPreviousNodeId];\n            }\n        }\n\n        return previousNodeId;\n    }\n\n    /**\n     * Get the next node\n     * @param nodeId get the node id that comes after this one\n     * @return the node id that comes after\n     */\n    getNextNodeId(nodeId) {\n\n        var nextNodeId = null;\n\n        // get the node ids in the project as a flat array\n        var flattenedNodeIds = this.getFlattenedProjectAsNodeIds();\n\n        if (flattenedNodeIds != null) {\n\n            // get the index of the node id\n            var indexOfNodeId = flattenedNodeIds.indexOf(nodeId);\n\n            if (indexOfNodeId != -1) {\n\n                // get the index of the next node id\n                var indexOfNextNodeId = indexOfNodeId + 1;\n\n                // get the next node id\n                nextNodeId = flattenedNodeIds[indexOfNextNodeId];\n            }\n        }\n\n        return nextNodeId;\n    }\n\n    /**\n     * Set the project script filename\n     * @param script the script filename\n     */\n    setProjectScriptFilename(scriptFilename) {\n        this.project.script = scriptFilename;\n    }\n\n    /**\n     * Get the project script filename\n     */\n    getProjectScriptFilename() {\n\n        var scriptFilename = null;\n\n        if (this.project != null && this.project.script != null) {\n            scriptFilename = this.project.script;\n        }\n\n        return scriptFilename;\n    }\n\n    /**\n     * Get all the achievements object in the project. The achievements object\n     * contains the isEnabled field and an array of items.\n     * @return the achievement object\n     */\n    getAchievements() {\n        var achievements = null;\n\n        if (this.project != null) {\n            if (this.project.achievements == null) {\n                this.project.achievements = {\n                    isEnabled: true,\n                    items: []\n                };\n            }\n            achievements = this.project.achievements;\n        }\n\n        return achievements;\n    }\n\n    /**\n     * Get the achievement items in the project\n     * @return the achievement items\n     */\n    getAchievementItems() {\n        var achievementItems = null;\n\n        // get the achievements object\n        var achievements = this.getAchievements();\n\n        if (achievements != null) {\n            if (achievements.items == null) {\n                achievements.items = [];\n            }\n\n            // get the achievement items\n            achievementItems = achievements.items;\n        }\n\n        return achievementItems;\n    }\n\n    /**\n     * Get an achievement by the 10 character alphanumeric achievement id\n     * @param achievementId the 10 character alphanumeric achievement id\n     * @return the achievement with the given achievement id\n     */\n    getAchievementByAchievementId(achievementId) {\n\n        if (achievementId != null) {\n\n            // get the achievements object\n            var achievements = this.getAchievements();\n\n            if (achievements != null) {\n\n                // get the achievement items\n                var achievementItems = achievements.items;\n\n                if (achievementItems != null) {\n\n                    // loop through the achievement items\n                    for (var a = 0; a < achievementItems.length; a++) {\n\n                        // get an achievement\n                        var achievement = achievementItems[a];\n\n                        if (achievement != null && achievement.id == achievementId) {\n                            /*\n                             * the achievement id matches so we have found the\n                             * achievement we are looking for\n                             */\n                            return achievement;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if there are any rubrics in the project. There can potentially be\n     * a project rubric, node rubrics, and component rubrics.\n     * @return whether there are any rubrics in the project\n     */\n    hasRubrics() {\n\n        if (this.project != null) {\n\n            if (this.project.rubric != null && this.project.rubric != \"\") {\n                // there is a project rubric\n                return true;\n            }\n\n            // loop through all the nodes\n            for (var n = 0; n < this.project.nodes.length; n++) {\n                var node = this.project.nodes[n];\n\n                if (node != null) {\n                    if (node.rubric != null && node.rubric != \"\") {\n                        // there is a node rubric\n                        return true;\n                    }\n\n                    if (node.components != null) {\n                        // loop through all the components\n                        for (var c = 0; c < node.components.length; c++) {\n                            var component = node.components[c];\n\n                            if (component != null) {\n                                if (component.rubric != null && component.rubric != \"\") {\n                                    // there is a component rubric\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the branch letter in the node position string if the node is in a\n     * branch path\n     * @param nodeId the node id we want the branch letter for\n     * @return the branch letter in the node position if the node is in a branch\n     * path\n     */\n    getBranchLetter(nodeId) {\n\n        var branchLetter = null;\n\n        if (nodeId != null) {\n\n            // get the node position e.g. \"1.8\" or \"1.9 A\"\n            var nodePosition = this.getNodePositionById(nodeId);\n\n            if (nodePosition != null) {\n\n                // regex for extracting the branch letter\n                var branchLetterRegex = /.*([A-Z])/;\n\n                // run the regex on the node position string\n                var match = branchLetterRegex.exec(nodePosition);\n\n                if (match != null) {\n                    /*\n                     * the node position has a branch letter so we will get it\n                     * from the matched group\n                     */\n                    branchLetter = match[1];\n                }\n            }\n        }\n\n        return branchLetter;\n    }\n\n    /**\n     * Get the total number of rubrics (step + components) for the given nodeId\n     * @param nodeId the node id\n     * @return Number of rubrics for the node\n     */\n    getNumberOfRubricsByNodeId(nodeId) {\n        let n = 0;\n        let nodeContent = this.getNodeContentByNodeId(nodeId);\n\n        if (nodeContent) {\n\n            // get the step rubric if any\n            let nodeRubric = nodeContent.rubric;\n\n            if (nodeRubric != null && nodeRubric != '') {\n                // the step has a rubric\n                n++;\n            }\n\n            // get the components\n            let components = nodeContent.components;\n\n            if (components && components.length) {\n\n                // loop through all the components\n                for (let c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component) {\n\n                        // get a component rubric\n                        var componentRubric = component.rubric;\n\n                        if (componentRubric != null && componentRubric != '') {\n                            // a component has a rubric\n                            n++;\n                        }\n                    }\n                }\n            }\n        }\n\n        return n;\n    }\n\n    /**\n     * Copy a component and insert it into the step\n     * @param nodeId we are copying a component in this node\n     * @param componentIds the components to copy\n     * @param insertAfterComponentId Which component to place the new components\n     * after. If this is null, we will put the new components at the beginning.\n     * @return an array of the new components\n     */\n    copyComponentAndInsert(nodeId, componentIds, insertAfterComponentId) {\n\n        // get the node for which we are moving components\n        var node = this.getNodeById(nodeId);\n\n        // array of new components\n        var newComponents = [];\n\n        // array of new component ids\n        var newComponentIds = [];\n\n        // loop through all the components we want to copy\n        for (var c = 0; c < componentIds.length; c++) {\n            var componentId = componentIds[c];\n\n            // create a copy of the component\n            var newComponent = this.copyComponent(nodeId, componentId, newComponentIds);\n\n            newComponents.push(newComponent);\n            newComponentIds.push(newComponent.id);\n        }\n\n        // get the components in the node\n        var components = node.components;\n\n        if (components != null) {\n\n            var insertPosition = 0;\n\n            if (insertAfterComponentId == null) {\n                // place the new components at the beginning\n                insertPosition = 0;\n            } else {\n                // place the new components after the specified component id\n                insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n            }\n\n            // loop through all the new components\n            for (var n = 0; n < newComponents.length; n++) {\n                var newComponent = newComponents[n];\n\n                // insert the new component\n                components.splice(insertPosition, 0, newComponent);\n\n                /*\n                 * increment the insert position for cases when we have multiple\n                 * new components\n                 */\n                insertPosition += 1;\n            }\n        }\n\n        return newComponents;\n    }\n\n    /**\n     * Copy a component\n     * @param nodeId the node id\n     * @param componentId the compnent id\n     * @param componentIdsToSkip component ids that we can't use for our new\n     * component\n     * @return a new component object\n     */\n    copyComponent(nodeId, componentId, componentIdsToSkip) {\n\n        // get the component we want to copy\n        var component = this.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n        // make a copy of the component\n        var newComponent = this.UtilService.makeCopyOfJSONObject(component);\n\n        // get a new component id for the component\n        var newComponentId = this.getUnusedComponentId(componentIdsToSkip);\n        newComponent.id = newComponentId;\n\n        return newComponent;\n    }\n\n    /**\n     * Import components from a project. Also import asset files that are\n     * referenced in any of those components.\n     * @param components an array of component objects that we are importing\n     * @param importProjectId the id of the project we are importing from\n     * @param nodeId the node we are adding the components to\n     * @param insertAfterComponentId insert the components after this component\n     * id\n     * @return an array of the new components\n     */\n    importComponents(components, importProjectId, nodeId, insertAfterComponentId) {\n\n        var newComponents = [];\n        var newComponentIds = [];\n\n        /*\n         * loop through all the components and make sure their ids are not\n         * already used in the project\n         */\n        for (var c = 0; c < components.length; c++) {\n            var component = components[c];\n\n            if (component != null) {\n\n                // make a copy of the component object\n                var newComponent = this.UtilService.makeCopyOfJSONObject(component);\n                var newComponentId = newComponent.id;\n\n                // check if the component id is used in this project\n                if (this.isComponentIdUsed(newComponentId)) {\n                    /*\n                     * the component id is already used so we will find a new\n                     * component id\n                     */\n\n                    // get a new component id\n                    newComponentId = this.getUnusedComponentId(newComponentIds);\n\n                    // set the new component id into our new component\n                    newComponent.id = newComponentId;\n                }\n\n                // add the new component and new component id to our arrays\n                newComponents.push(newComponent);\n                newComponentIds.push(newComponentId);\n            }\n        }\n\n        // get the import steps URL\n        var importStepsURL = this.ConfigService.getConfigParam('importStepsURL');\n\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = importStepsURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        // get the project id we are importing into\n        var toProjectId = this.ConfigService.getConfigParam('projectId');\n\n        // get the project id we are importing from\n        var fromProjectId = importProjectId;\n\n        // set the POST params\n        var params = {};\n        params.steps = angular.toJson(newComponents);\n        params.fromProjectId = fromProjectId;\n        params.toProjectId = toProjectId;\n        httpParams.data = $.param(params);\n\n        /*\n         * Make the request to import the components. This will copy the asset files\n         * and change file names if necessary. If an asset file with the same\n         * name exists in both projects we will check if their content is the\n         * same. If the content is the same we don't need to copy the file. If\n         * the content is different, we need to make a copy of the file with a\n         * new name and change all the references in the steps to use the new\n         * name.\n         */\n        return this.$http(httpParams).then((result) => {\n\n            // get the components from the result that may have been modified\n            newComponents = result.data;\n\n            // get the current components in the node\n            var node = this.getNodeById(nodeId);\n            var currentComponents = node.components;\n\n            var insertPosition = 0;\n\n            if (insertAfterComponentId == null) {\n                // place the new components at the beginning\n                insertPosition = 0;\n            } else {\n                // place the new components after the specified component id\n                insertPosition = this.getComponentPositionByNodeIdAndComponentId(nodeId, insertAfterComponentId) + 1;\n            }\n\n            // loop through all the new components and add them to the project\n            for (var n = 0; n < newComponents.length; n++) {\n                var newComponent = newComponents[n];\n\n                // insert the new component\n                currentComponents.splice(insertPosition, 0, newComponent);\n\n                /*\n                 * increment the insert position for cases when we have multiple\n                 * new components\n                 */\n                insertPosition += 1;\n            }\n\n            return newComponents;\n        });\n    }\n\n    /**\n     * Get the branch path letter\n     * @param nodeId get the branch path letter for this node if it is in a\n     * branch\n     * @return the branch path letter for the node if it is in a branch\n     */\n    getBranchPathLetter(nodeId) {\n        return this.nodeIdToBranchPathLetter[nodeId];\n    }\n\n    /**\n     * Set the node into the project by replacing the existing node with the\n     * given node id\n     * @param nodeId the node id of the node\n     * @param node the node object\n     */\n    setNode(nodeId, node) {\n\n        if (nodeId != null && node != null) {\n\n            // loop through all the nodes\n            for (let n = 0; n < this.project.nodes.length; n++) {\n                let tempNode = this.project.nodes[n];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we want to replace\n                    this.project.nodes[n] = node;\n                }\n            }\n\n            // loop through all the inactive nodes\n            for (let i = 0; i < this.project.inactiveNodes.length; i++) {\n                let tempNode = this.project.inactiveNodes[i];\n\n                if (tempNode != null && tempNode.id == nodeId) {\n                    // we have found the node we want to replace\n                    this.project.inactiveNodes[i] = node;\n                }\n            }\n\n            // update the id to node mapping with the new node\n            this.idToNode[nodeId] = node;\n        }\n    }\n\n    /**\n     * Remember the result for whether the node is affected by the constraint\n     * @param nodeId the node id\n     * @param constraintId the constraint id\n     * @param whether the node is affected by the constraint\n     */\n    setIsNodeAffectedByConstraintResult(nodeId, constraintId, result) {\n        this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId] = result;\n    }\n\n    /**\n     * Check if we have calculated the result for whether the node is affected\n     * by the constraint\n     * @param nodeId the node id\n     * @param constraintId the constraint id\n     * @return Return the result if we have calculated the result before. If we\n     * have not calculated the result before, we will return null.\n     */\n    getIsNodeAffectedByConstraintResult(nodeId, constraintId) {\n        return this.isNodeAffectedByConstraintResult[nodeId + '-' + constraintId];\n    }\n\n    /**\n     * Get the id to node mappings.\n     * @return An object the keys as node ids and the values as nodes.\n     */\n    getIdToNode() {\n        return this.idToNode;\n    }\n}\n\nProjectService.$inject = [\n    '$filter',\n    '$http',\n    '$injector',\n    '$q',\n    '$rootScope',\n    'ConfigService',\n    'UtilService'\n];\n\nexport default ProjectService;\n"]}