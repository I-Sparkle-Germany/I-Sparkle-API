{"version":3,"sources":["sessionService.es6"],"names":[],"mappings":"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","file":"sessionService.js","sourcesContent":["class SessionService {\n    constructor($http,\n                $rootScope,\n                ConfigService\n                //StudentDataService) {\n    ) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        //this.StudentDataService = StudentDataService;\n        /*\n         * the amount of time (in milliseconds) before we automatically log\n         * out the user\n         */\n        this.sessionTimeoutInterval = null;\n\n        /*\n         * the amount of time (in milliseconds) before we check if there\n         * were any mouse events\n         */\n        this.checkMouseEventInterval = null;\n\n        /*\n         * the timestamp when the last mouse event occurred\n         */\n        this.lastMouseEventTimestamp = null;\n\n        // the id for the setTimeout of the warning message\n        this.warningId = null;\n\n        // the id for the setTimeout of the automatic log out\n        this.logOutId = null;\n\n        /*\n         * boolean value used to determine if we need to log out the\n         * user or just bring them back to the home page when we exit\n         * the VLE\n         */\n        this.performLogOut = false;\n\n        /**\n         * Listen for the 'componentDoneUnloading' event. When the user logs\n         * out of the VLE, we will need to wait for certain components to\n         * finish performing any necessary processing (such as saving) before\n         * we actually log out. Once a component has completed their unloading\n         * they will fire the 'componentDoneUnloading' event. We will listen\n         * for this event and when there are no more components left to wait\n         * for, we will then log out.\n         */\n        this.$rootScope.$on('doneExiting', () => {\n\n            // check if all components are done unloading so we can exit\n            // no longer needed.\n            //this.attemptExit();\n        });\n\n        /**\n         * Listen for the 'goHome' event. We will attempt to go home when\n         * the 'goHome' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to go home right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to go home again.\n         */\n        this.$rootScope.$on('goHome', () => {\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        });\n\n        /**\n         * Listen for the 'logOut' event. We will attempt to log out when\n         * the 'logOut' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to log out right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to log out again.\n         */\n        this.$rootScope.$on('logOut', () => {\n\n            /*\n             * set the perform log out boolean to true so that we know to\n             * log out the user later\n             */\n            this.performLogOut = true;\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        });\n    }\n\n    /**\n     * Start the timers, save session initialized event\n     */\n    initializeSession() {\n        if (this.ConfigService.isPreview()) {\n            // no session management for previewers\n            return;\n        }\n        \n        var minutes = 30;\n        var seconds = minutes * 60;\n        var milliseconds = seconds * 1000;\n        this.sessionTimeoutInterval = milliseconds;\n\n        // set the check mouse interval to one minute\n        this.checkMouseEventInterval = this.convertMinutesToMilliseconds(1);\n\n        // start the warning and auto log out timers\n        this.startTimers();\n\n        // start the check mouse event timer\n        this.startCheckMouseEventTimer();\n\n        // save session started event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"sessionStarted\";\n        var eventData = {};\n        //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Start the warning and auto log out timers\n     */\n    startTimers() {\n        this.startWarningTimer();\n        this.startLogOutTimer();\n    };\n\n    /**\n     * Start the warning timer\n     */\n    startWarningTimer() {\n        var warningTimeoutInterval = this.sessionTimeoutInterval * 0.9;\n        this.warningId = setTimeout(angular.bind(this, this.showWarning), warningTimeoutInterval);\n    };\n\n    /**\n     * Start the auto log out timer\n     */\n    startLogOutTimer() {\n        this.logOutId = setTimeout(angular.bind(this, this.forceLogOut), this.sessionTimeoutInterval);\n    };\n\n    /**\n     * Start the check mouse event timer\n     */\n    startCheckMouseEventTimer() {\n        setInterval(angular.bind(this, this.checkMouseEvent), this.checkMouseEventInterval);\n    };\n\n    /**\n     * Fire the event that will show the warning message\n     */\n    showWarning() {\n        if (this.checkMouseEvent()) {\n            // a mouse event has occurred recently so we don't need to show the warning\n        } else {\n            // a mouse event has not occurred recently so we will show the warning\n            this.$rootScope.$broadcast('showSessionWarning');\n        }\n    };\n\n    /**\n     * Renew the session with the server and refresh the local timers\n     */\n    renewSession() {\n        var renewSessionURL = this.ConfigService.getConfigParam('renewSessionURL');\n        // make a request to the log out url\n        this.$http.get(renewSessionURL).then((result) => {\n            var isRenewSessionSuccessful = result.data;\n\n            if (isRenewSessionSuccessful === 'true') {\n                this.clearTimers();\n                this.startTimers();\n            } else {\n                this.forceLogOut();\n            }\n        });\n    };\n\n    /**\n     * Delete the existing timers\n     */\n    clearTimers() {\n        clearTimeout(this.warningId);\n        clearTimeout(this.logOutId);\n    };\n    \n    /**\n     * Called when the user moves the mouse\n     */\n    mouseMoved() {\n        // get the current timestamp\n        var date = new Date();\n        var timestamp = date.getTime();\n\n        // remember this timestamp\n        this.lastMouseEventTimestamp = timestamp;\n    };\n\n    /**\n     * Check if there were any mouse events since the last time we checked.\n     * Currently we check every 1 minute which is based on the value of the \n     * checkMouseEventInterval variable.\n     * @returns whether there was a mouse event recently\n     */\n    checkMouseEvent() {\n        \n        var eventOccurred = false;\n        \n        if (this.lastMouseEventTimestamp != null) {\n            // there was a mouse event since the last time we checked\n\n            // reset the timers\n            this.renewSession();\n\n            // clear the mouse event timestamp\n            this.lastMouseEventTimestamp = null;\n            \n            eventOccurred = true;\n        }\n        \n        return eventOccurred;\n    };\n\n    /**\n     * Convert minutes to milliseconds\n     * @param minutes the number of minutes\n     * @return the number of milliseconds\n     */\n    convertMinutesToMilliseconds(minutes) {\n        var milliseconds = null;\n\n        if (minutes != null) {\n            // get the number of seconds\n            var seconds = minutes * 60;\n\n            // get the number of milliseconds\n            milliseconds = seconds * 1000;\n        }\n\n        return milliseconds;\n    };\n\n    /**\n     * Log out the user\n     */\n    forceLogOut() {\n        \n        /*\n         * make a final check to see if there were any mouse events recently\n         * before we log out the user\n         */\n        if (this.checkMouseEvent()) {\n            // a mouse event has occurred so we will not log out the user\n        } else {\n            // a mouse event has not occurred recently so we will log out the user\n            this.clearTimers();\n            this.$rootScope.$broadcast('logOut');\n        }\n    };\n\n    /**\n     * Check if there are components that are not ready to exit\n     * because they have not saved their data yet. If there are no\n     * components left to wait for, we can then exit.\n     */\n    attemptExit() {\n        // get all the components listening for the exit event\n        var exitListenerCount = this.$rootScope.$$listenerCount.exit;\n\n        /*\n         * Check how many exit listeners are still listening for the\n         * exit event. Components such as nodes will finish saving their\n         * data and then be removed from the listener count.\n         */\n        if (exitListenerCount != null && exitListenerCount > 0) {\n            // don't log out yet because there are still listeners\n        } else {\n            // there are no more listeners so we will exit\n            var mainHomePageURL = this.ConfigService.getMainHomePageURL();\n\n            // save sessionEnded event\n            var nodeId = null;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"sessionEnded\";\n            var eventData = {};\n            //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            if (this.performLogOut) {\n                // log out the user and bring them to the home page\n\n                // get the url that will log out the user\n                var sessionLogOutURL = this.ConfigService.getSessionLogOutURL();\n\n                // take user to log out url\n                window.location.href = sessionLogOutURL;\n            } else {\n                /*\n                 * bring the user to the student or teacher home page but\n                 * do not log them out\n                 */\n\n                // Get the wiseBaseURL e.g. /wise\n                var wiseBaseURL = this.ConfigService.getWISEBaseURL();\n\n                var homePageURL = '';\n\n                // get the user type\n                var userType = this.ConfigService.getConfigParam('userType');\n\n                if (userType === 'student') {\n                    // send the user to the student home page\n                    homePageURL = wiseBaseURL + '/student';\n                } else if (userType === 'teacher') {\n                    // send the user to the teacher home page\n                    homePageURL = wiseBaseURL + '/teacher';\n                } else {\n                    // send the user to the main home page\n                    homePageURL = mainHomePageURL;\n                }\n\n                window.location.href = homePageURL;\n            }\n        }\n    };\n}\n\n//SessionService.$inject = ['$http','$rootScope','ConfigService','StudentDataService'];\nSessionService.$inject = ['$http','$rootScope','ConfigService'];\n\nexport default SessionService;\n"]}