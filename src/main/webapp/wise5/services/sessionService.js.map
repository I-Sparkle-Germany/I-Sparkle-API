{"version":3,"sources":["sessionService.es6"],"names":["SessionService","$http","$rootScope","ConfigService","initialized","warningInterval","convertMinutesToMilliseconds","logOutInterval","checkMouseEventInterval","lastMouseEventTimestamp","performLogOut","warningIds","logOutIds","$on","$broadcast","attemptExit","isPreview","startWarningTimer","startCheckMouseEventTimer","clearWarningTimers","warningId","setTimeout","angular","bind","showWarning","push","w","length","clearTimeout","splice","clearLogOutTimers","logOutId","forceLogOut","l","setInterval","checkMouseEvent","startLogOutTimer","renewSessionURL","getConfigParam","get","then","result","renewSessionResult","data","restartWarningTimer","date","Date","timestamp","getTime","eventOccurred","renewSession","minutes","milliseconds","seconds","clearTimers","exitListenerCount","$$listenerCount","exit","mainHomePageURL","getMainHomePageURL","sessionLogOutURL","getSessionLogOutURL","window","location","href","wiseBaseURL","getWISEBaseURL","homePageURL","userType","$inject"],"mappings":"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","file":"sessionService.js","sourcesContent":["class SessionService {\n  constructor($http,\n              $rootScope,\n              ConfigService\n              //StudentDataService) {\n  ) {\n    this.$http = $http;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.initialized = false;\n\n    /*\n     * The amount of user inactive time (in milliseconds) before we display\n     * a warning message asking if they want to stay logged in.\n     */\n    this.warningInterval = this.convertMinutesToMilliseconds(25);\n\n    /*\n     * The amount of time (in milliseconds) after the warning message is\n     * displayed at which we automatically log out the user.\n     */\n    this.logOutInterval = this.convertMinutesToMilliseconds(5);\n\n    /*\n     * The amount of time (in milliseconds) before we check if there were\n     * any mouse events.\n     */\n    this.checkMouseEventInterval = this.convertMinutesToMilliseconds(1);\n\n    /*\n     * the timestamp when the last mouse event occurred\n     */\n    this.lastMouseEventTimestamp = null;\n\n    /*\n     * boolean value used to determine if we need to log out the\n     * user or just bring them back to the home page when we exit\n     * the VLE\n     */\n    this.performLogOut = false;\n\n    // the active warning ids\n    this.warningIds = [];\n\n    // the active log out ids\n    this.logOutIds = [];\n\n    /**\n     * Listen for the 'componentDoneUnloading' event. When the user logs\n     * out of the VLE, we will need to wait for certain components to\n     * finish performing any necessary processing (such as saving) before\n     * we actually log out. Once a component has completed their unloading\n     * they will fire the 'componentDoneUnloading' event. We will listen\n     * for this event and when there are no more components left to wait\n     * for, we will then log out.\n     */\n    this.$rootScope.$on('doneExiting', () => {\n\n      // check if all components are done unloading so we can exit\n      // no longer needed.\n      //this.attemptExit();\n    });\n\n    /**\n     * Listen for the 'goHome' event. We will attempt to go home when\n     * the 'goHome' even is fired. There may be components that have not\n     * saved their data yet so we may not be able to go home right away.\n     * If there are components that have not saved their data yet, we\n     * will wait for those components to fire the 'componentDoneUnloading'\n     * event and then try to go home again.\n     */\n    this.$rootScope.$on('goHome', () => {\n\n      // let other components know that we are exiting\n      this.$rootScope.$broadcast('exit');\n\n      // check if all components are done unloading so we can exit\n      this.attemptExit();\n    });\n\n    /**\n     * Listen for the 'logOut' event. We will attempt to log out when\n     * the 'logOut' even is fired. There may be components that have not\n     * saved their data yet so we may not be able to log out right away.\n     * If there are components that have not saved their data yet, we\n     * will wait for those components to fire the 'componentDoneUnloading'\n     * event and then try to log out again.\n     */\n    this.$rootScope.$on('logOut', () => {\n\n      /*\n       * set the perform log out boolean to true so that we know to\n       * log out the user later\n       */\n      this.performLogOut = true;\n\n      // let other components know that we are exiting\n      this.$rootScope.$broadcast('exit');\n\n      // check if all components are done unloading so we can exit\n      this.attemptExit();\n    });\n  }\n\n  /**\n   * Start the timers, save session initialized event\n   */\n  initializeSession() {\n    if (!this.initialized) {\n      this.initialized = true;\n      if (this.ConfigService.isPreview()) {\n        // no session management for previewers\n        return;\n      }\n\n      this.startWarningTimer();\n      this.startCheckMouseEventTimer();\n    }\n  };\n\n  /**\n   * Start the warning timer. When the warning timer expires, we will display\n   * a warning message to the user asking them if they want to stay logged in.\n   */\n  startWarningTimer() {\n    // clear all the previous warning timers\n    this.clearWarningTimers();\n    const warningId = setTimeout(angular.bind(this, this.showWarning), this.warningInterval);\n    this.warningIds.push(warningId);\n  }\n\n  /**\n   * Clear the warning timers\n   */\n  clearWarningTimers() {\n    // clear all the active warning timeouts\n    for (let w = 0; w < this.warningIds.length; w++) {\n\n      // get a warning id\n      const warningId = this.warningIds[w];\n\n      // clear the timeout for the warning id\n      clearTimeout(warningId);\n\n      // remove the warning id from the array\n      this.warningIds.splice(w, 1);\n\n      // move the counter back now that we have removed a warning id\n      w--;\n    }\n  }\n\n  /**\n   * Restart the warning time so that it starts counting from 0 again.\n   */\n  restartWarningTimer() {\n    this.clearWarningTimers();\n    this.startWarningTimer();\n  }\n\n  /**\n   * Start the auto log out timer\n   */\n  startLogOutTimer() {\n    // clear all the previou log out timers\n    this.clearLogOutTimers();\n    const logOutId = setTimeout(angular.bind(this, this.forceLogOut), this.logOutInterval);\n    this.logOutIds.push(logOutId);\n  };\n\n  /**\n   * Clear the log out timers\n   */\n  clearLogOutTimers() {\n    // clear all the active log out timeouts\n    for (let l = 0; l < this.logOutIds.length; l++) {\n\n      // get a log out id\n      const logOutId = this.logOutIds[l];\n\n      // clear the timeout for the log out id\n      clearTimeout(logOutId);\n\n      // remove the log out id from the array\n      this.logOutIds.splice(l, 1);\n\n      // move the counter back now that we have removed a log out id\n      l--;\n    }\n  }\n\n  /**\n   * Start the check mouse event timer\n   */\n  startCheckMouseEventTimer() {\n    setInterval(angular.bind(this, this.checkMouseEvent), this.checkMouseEventInterval);\n  };\n\n  /**\n   * Fire the event that will show the warning message\n   */\n  showWarning() {\n    if (this.checkMouseEvent()) {\n      // a mouse event has occurred recently so we don't need to show the warning\n    } else {\n      // a mouse event has not occurred recently so we will show the warning\n      this.$rootScope.$broadcast('showSessionWarning');\n      this.startLogOutTimer();\n    }\n  };\n\n  /**\n   * Renew the session with the server and refresh the local timers\n   */\n  renewSession() {\n    const renewSessionURL = this.ConfigService.getConfigParam('renewSessionURL');\n    // make a request to the log out url\n    this.$http.get(renewSessionURL).then((result) => {\n      const renewSessionResult = result.data;\n\n      if (renewSessionResult === 'true') {\n        // the session is still active\n        this.clearLogOutTimers();\n        this.restartWarningTimer();\n      } else if (renewSessionResult === \"requestLogout\") {\n        // WISE server is requesting that we log out\n        this.$rootScope.$broadcast('showRequestLogout');\n      } else {\n        // User is no longer logged in (session is inactive)\n        this.forceLogOut();\n      }\n    });\n  };\n\n  /**\n   * Delete the existing timers\n   */\n  clearTimers() {\n    this.clearWarningTimers();\n    this.clearLogOutTimers();\n  };\n\n  /**\n   * Called when the user moves the mouse\n   */\n  mouseMoved() {\n    // get the current timestamp\n    const date = new Date();\n    const timestamp = date.getTime();\n\n    // remember this timestamp\n    this.lastMouseEventTimestamp = timestamp;\n  };\n\n  /**\n   * Check if there were any mouse events since the last time we checked.\n   * Currently we check every 1 minute which is based on the value of the\n   * checkMouseEventInterval variable.\n   * @returns whether there was a mouse event recently\n   */\n  checkMouseEvent() {\n    let eventOccurred = false;\n\n    if (this.lastMouseEventTimestamp != null) {\n      // there was a mouse event since the last time we checked\n\n      // reset the timers\n      this.renewSession();\n\n      // clear the mouse event timestamp\n      this.lastMouseEventTimestamp = null;\n\n      eventOccurred = true;\n    }\n\n    return eventOccurred;\n  };\n\n  /**\n   * Convert minutes to milliseconds\n   * @param minutes the number of minutes\n   * @return the number of milliseconds\n   */\n  convertMinutesToMilliseconds(minutes) {\n    let milliseconds = null;\n\n    if (minutes != null) {\n      // get the number of seconds\n      const seconds = minutes * 60;\n\n      // get the number of milliseconds\n      milliseconds = seconds * 1000;\n    }\n\n    return milliseconds;\n  };\n\n  /**\n   * Log out the user\n   */\n  forceLogOut() {\n    /*\n     * make a final check to see if there were any mouse events recently\n     * before we log out the user\n     */\n    if (this.checkMouseEvent()) {\n      // a mouse event has occurred so we will not log out the user\n    } else {\n      // a mouse event has not occurred recently so we will log out the user\n      this.clearTimers();\n      this.$rootScope.$broadcast('logOut');\n    }\n  };\n\n  /**\n   * Check if there are components that are not ready to exit\n   * because they have not saved their data yet. If there are no\n   * components left to wait for, we can then exit.\n   */\n  attemptExit() {\n    // get all the components listening for the exit event\n    const exitListenerCount = this.$rootScope.$$listenerCount.exit;\n\n    /*\n     * Check how many exit listeners are still listening for the\n     * exit event. Components such as nodes will finish saving their\n     * data and then be removed from the listener count.\n     */\n    if (exitListenerCount != null && exitListenerCount > 0) {\n      // don't log out yet because there are still listeners\n    } else {\n      // there are no more listeners so we will exit\n      const mainHomePageURL = this.ConfigService.getMainHomePageURL();\n\n      if (this.performLogOut) {\n        // log out the user and bring them to the home page\n\n        // get the url that will log out the user\n        const sessionLogOutURL = this.ConfigService.getSessionLogOutURL();\n\n        // take user to log out url\n        window.location.href = sessionLogOutURL;\n      } else {\n        /*\n         * bring the user to the student or teacher home page but\n         * do not log them out\n         */\n\n        // Get the wiseBaseURL e.g. /wise\n        const wiseBaseURL = this.ConfigService.getWISEBaseURL();\n\n        let homePageURL = '';\n\n        // get the user type\n        const userType = this.ConfigService.getConfigParam('userType');\n\n        if (userType === 'student') {\n          // send the user to the student home page\n          homePageURL = wiseBaseURL + '/student';\n        } else if (userType === 'teacher') {\n          // send the user to the teacher home page\n          homePageURL = wiseBaseURL + '/teacher';\n        } else {\n          // send the user to the main home page\n          homePageURL = mainHomePageURL;\n        }\n\n        window.location.href = homePageURL;\n      }\n    }\n  };\n}\n\nSessionService.$inject = [\n  '$http',\n  '$rootScope',\n  'ConfigService'\n];\n\nexport default SessionService;\n"]}