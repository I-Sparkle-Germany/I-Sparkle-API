{"version":3,"sources":["sessionService.es6"],"names":["SessionService","$http","$rootScope","ConfigService","sessionTimeoutInterval","checkMouseEventInterval","lastMouseEventTimestamp","performLogOut","warningIds","logOutIds","$on","$broadcast","attemptExit","isPreview","minutes","seconds","milliseconds","convertMinutesToMilliseconds","startTimers","startCheckMouseEventTimer","nodeId","componentId","componentType","category","event","eventData","startWarningTimer","startLogOutTimer","clearWarningTimers","warningTimeoutInterval","warningId","setTimeout","angular","bind","showWarning","push","w","length","clearTimeout","splice","clearLogOutTimers","logOutId","forceLogOut","l","setInterval","checkMouseEvent","renewSessionURL","getConfigParam","get","then","result","renewSessionResult","data","clearTimers","date","Date","timestamp","getTime","eventOccurred","renewSession","exitListenerCount","$$listenerCount","exit","mainHomePageURL","getMainHomePageURL","sessionLogOutURL","getSessionLogOutURL","window","location","href","wiseBaseURL","getWISEBaseURL","homePageURL","userType","$inject"],"mappings":"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","file":"sessionService.js","sourcesContent":["class SessionService {\n    constructor($http,\n                $rootScope,\n                ConfigService\n                //StudentDataService) {\n    ) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        //this.StudentDataService = StudentDataService;\n        /*\n         * the amount of time (in milliseconds) before we automatically log\n         * out the user\n         */\n        this.sessionTimeoutInterval = null;\n\n        /*\n         * the amount of time (in milliseconds) before we check if there\n         * were any mouse events\n         */\n        this.checkMouseEventInterval = null;\n\n        /*\n         * the timestamp when the last mouse event occurred\n         */\n        this.lastMouseEventTimestamp = null;\n\n        // the id for the setTimeout of the warning message\n        //this.warningId = null;\n\n        // the id for the setTimeout of the automatic log out\n        //this.logOutId = null;\n\n        /*\n         * boolean value used to determine if we need to log out the\n         * user or just bring them back to the home page when we exit\n         * the VLE\n         */\n        this.performLogOut = false;\n\n        // the active warning ids\n        this.warningIds = [];\n\n        // the active log out ids\n        this.logOutIds = [];\n\n        /**\n         * Listen for the 'componentDoneUnloading' event. When the user logs\n         * out of the VLE, we will need to wait for certain components to\n         * finish performing any necessary processing (such as saving) before\n         * we actually log out. Once a component has completed their unloading\n         * they will fire the 'componentDoneUnloading' event. We will listen\n         * for this event and when there are no more components left to wait\n         * for, we will then log out.\n         */\n        this.$rootScope.$on('doneExiting', () => {\n\n            // check if all components are done unloading so we can exit\n            // no longer needed.\n            //this.attemptExit();\n        });\n\n        /**\n         * Listen for the 'goHome' event. We will attempt to go home when\n         * the 'goHome' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to go home right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to go home again.\n         */\n        this.$rootScope.$on('goHome', () => {\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        });\n\n        /**\n         * Listen for the 'logOut' event. We will attempt to log out when\n         * the 'logOut' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to log out right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to log out again.\n         */\n        this.$rootScope.$on('logOut', () => {\n\n            /*\n             * set the perform log out boolean to true so that we know to\n             * log out the user later\n             */\n            this.performLogOut = true;\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        });\n    }\n\n    /**\n     * Start the timers, save session initialized event\n     */\n    initializeSession() {\n        if (this.ConfigService.isPreview()) {\n            // no session management for previewers\n            return;\n        }\n\n        var minutes = 30;\n        var seconds = minutes * 60;\n        var milliseconds = seconds * 1000;\n        this.sessionTimeoutInterval = milliseconds;\n\n        // set the check mouse interval to one minute\n        this.checkMouseEventInterval = this.convertMinutesToMilliseconds(1);\n\n        // start the warning and auto log out timers\n        this.startTimers();\n\n        // start the check mouse event timer\n        this.startCheckMouseEventTimer();\n\n        // save session started event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"sessionStarted\";\n        var eventData = {};\n        //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Start the warning and auto log out timers\n     */\n    startTimers() {\n        this.startWarningTimer();\n        this.startLogOutTimer();\n    };\n\n    /**\n     * Start the warning timer\n     */\n    startWarningTimer() {\n\n        // clear all the active warning timers\n        this.clearWarningTimers();\n\n        var warningTimeoutInterval = this.sessionTimeoutInterval * 0.9;\n        var warningId = setTimeout(angular.bind(this, this.showWarning), warningTimeoutInterval);\n        this.warningIds.push(warningId);\n    };\n\n    /**\n     * Clear the warning timers\n     */\n    clearWarningTimers() {\n        // clear all the active warning timeouts\n        for (var w = 0; w < this.warningIds.length; w++) {\n\n            // get a warning id\n            var warningId = this.warningIds[w];\n\n            // clear the timeout for the warning id\n            clearTimeout(warningId);\n\n            // remove the warning id from the array\n            this.warningIds.splice(w, 1);\n\n            // move the counter back now that we have removed a warning id\n            w--;\n        }\n    }\n\n    /**\n     * Start the auto log out timer\n     */\n    startLogOutTimer() {\n\n        // clear all the active log out timers\n        this.clearLogOutTimers();\n\n        var logOutId = setTimeout(angular.bind(this, this.forceLogOut), this.sessionTimeoutInterval);\n        this.logOutIds.push(logOutId);\n    };\n\n    /**\n     * Clear the log out timers\n     */\n    clearLogOutTimers() {\n        // clear all the active log out timeouts\n        for (var l = 0; l < this.logOutIds.length; l++) {\n\n            // get a log out id\n            var logOutId = this.logOutIds[l];\n\n            // clear the timeout for the log out id\n            clearTimeout(logOutId);\n\n            // remove the log out id from the array\n            this.logOutIds.splice(l, 1);\n\n            // move the counter back now that we have removed a log out id\n            l--;\n        }\n    }\n\n    /**\n     * Start the check mouse event timer\n     */\n    startCheckMouseEventTimer() {\n        setInterval(angular.bind(this, this.checkMouseEvent), this.checkMouseEventInterval);\n    };\n\n    /**\n     * Fire the event that will show the warning message\n     */\n    showWarning() {\n        if (this.checkMouseEvent()) {\n            // a mouse event has occurred recently so we don't need to show the warning\n        } else {\n            // a mouse event has not occurred recently so we will show the warning\n            this.$rootScope.$broadcast('showSessionWarning');\n        }\n    };\n\n    /**\n     * Renew the session with the server and refresh the local timers\n     */\n    renewSession() {\n        var renewSessionURL = this.ConfigService.getConfigParam('renewSessionURL');\n        // make a request to the log out url\n        this.$http.get(renewSessionURL).then((result) => {\n            var renewSessionResult = result.data;\n\n            if (renewSessionResult === 'true') {\n                // Session is active, restart local timers.\n                this.clearTimers();\n                this.startTimers();\n            } else if (renewSessionResult === \"requestLogout\") {\n                // WISE server is requesting that we log out\n                this.$rootScope.$broadcast('showRequestLogout');\n            } else {\n                // User is no longer logged in (session is inactive)\n                this.forceLogOut();\n            }\n        });\n    };\n\n    /**\n     * Delete the existing timers\n     */\n    clearTimers() {\n        this.clearWarningTimers();\n        this.clearLogOutTimers();\n    };\n\n    /**\n     * Called when the user moves the mouse\n     */\n    mouseMoved() {\n        // get the current timestamp\n        var date = new Date();\n        var timestamp = date.getTime();\n\n        // remember this timestamp\n        this.lastMouseEventTimestamp = timestamp;\n    };\n\n    /**\n     * Check if there were any mouse events since the last time we checked.\n     * Currently we check every 1 minute which is based on the value of the\n     * checkMouseEventInterval variable.\n     * @returns whether there was a mouse event recently\n     */\n    checkMouseEvent() {\n        var eventOccurred = false;\n\n        if (this.lastMouseEventTimestamp != null) {\n            // there was a mouse event since the last time we checked\n\n            // reset the timers\n            this.renewSession();\n\n            // clear the mouse event timestamp\n            this.lastMouseEventTimestamp = null;\n\n            eventOccurred = true;\n        }\n\n        return eventOccurred;\n    };\n\n    /**\n     * Convert minutes to milliseconds\n     * @param minutes the number of minutes\n     * @return the number of milliseconds\n     */\n    convertMinutesToMilliseconds(minutes) {\n        var milliseconds = null;\n\n        if (minutes != null) {\n            // get the number of seconds\n            var seconds = minutes * 60;\n\n            // get the number of milliseconds\n            milliseconds = seconds * 1000;\n        }\n\n        return milliseconds;\n    };\n\n    /**\n     * Log out the user\n     */\n    forceLogOut() {\n        /*\n         * make a final check to see if there were any mouse events recently\n         * before we log out the user\n         */\n        if (this.checkMouseEvent()) {\n            // a mouse event has occurred so we will not log out the user\n        } else {\n            // a mouse event has not occurred recently so we will log out the user\n            this.clearTimers();\n            this.$rootScope.$broadcast('logOut');\n        }\n    };\n\n    /**\n     * Check if there are components that are not ready to exit\n     * because they have not saved their data yet. If there are no\n     * components left to wait for, we can then exit.\n     */\n    attemptExit() {\n        // get all the components listening for the exit event\n        var exitListenerCount = this.$rootScope.$$listenerCount.exit;\n\n        /*\n         * Check how many exit listeners are still listening for the\n         * exit event. Components such as nodes will finish saving their\n         * data and then be removed from the listener count.\n         */\n        if (exitListenerCount != null && exitListenerCount > 0) {\n            // don't log out yet because there are still listeners\n        } else {\n            // there are no more listeners so we will exit\n            var mainHomePageURL = this.ConfigService.getMainHomePageURL();\n\n            // save sessionEnded event\n            var nodeId = null;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"sessionEnded\";\n            var eventData = {};\n            //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            if (this.performLogOut) {\n                // log out the user and bring them to the home page\n\n                // get the url that will log out the user\n                var sessionLogOutURL = this.ConfigService.getSessionLogOutURL();\n\n                // take user to log out url\n                window.location.href = sessionLogOutURL;\n            } else {\n                /*\n                 * bring the user to the student or teacher home page but\n                 * do not log them out\n                 */\n\n                // Get the wiseBaseURL e.g. /wise\n                var wiseBaseURL = this.ConfigService.getWISEBaseURL();\n\n                var homePageURL = '';\n\n                // get the user type\n                var userType = this.ConfigService.getConfigParam('userType');\n\n                if (userType === 'student') {\n                    // send the user to the student home page\n                    homePageURL = wiseBaseURL + '/student';\n                } else if (userType === 'teacher') {\n                    // send the user to the teacher home page\n                    homePageURL = wiseBaseURL + '/teacher';\n                } else {\n                    // send the user to the main home page\n                    homePageURL = mainHomePageURL;\n                }\n\n                window.location.href = homePageURL;\n            }\n        }\n    };\n}\n\n//SessionService.$inject = ['$http','$rootScope','ConfigService','StudentDataService'];\nSessionService.$inject = ['$http','$rootScope','ConfigService'];\n\nexport default SessionService;\n"]}