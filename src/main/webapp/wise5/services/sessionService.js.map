{"version":3,"sources":["sessionService.es6"],"names":[],"mappings":"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","file":"sessionService.js","sourcesContent":["class SessionService {\n    constructor($http,\n                $rootScope,\n                ConfigService\n                //StudentDataService) {\n    ) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        //this.StudentDataService = StudentDataService;\n        /*\n         * the amount of time (in milliseconds) before we automatically log\n         * out the user\n         */\n        this.sessionTimeoutInterval = null;\n\n        /*\n         * the amount of time (in milliseconds) before we check if there\n         * were any mouse events\n         */\n        this.checkMouseEventInterval = null;\n\n        /*\n         * the timestamp when the last mouse event occurred\n         */\n        this.lastMouseEventTimestamp = null;\n\n        // the id for the setTimeout of the warning message\n        this.warningId = null;\n\n        // the id for the setTimeout of the automatic log out\n        this.logOutId = null;\n\n        /*\n         * boolean value used to determine if we need to log out the\n         * user or just bring them back to the home page when we exit\n         * the VLE\n         */\n        this.performLogOut = false;\n\n        /**\n         * Listen for the 'componentDoneUnloading' event. When the user logs\n         * out of the VLE, we will need to wait for certain components to\n         * finish performing any necessary processing (such as saving) before\n         * we actually log out. Once a component has completed their unloading\n         * they will fire the 'componentDoneUnloading' event. We will listen\n         * for this event and when there are no more components left to wait\n         * for, we will then log out.\n         */\n        this.$rootScope.$on('doneExiting', angular.bind(this, function() {\n\n            // check if all components are done unloading so we can exit\n            // no longer needed.\n            //this.attemptExit();\n        }));\n\n        /**\n         * Listen for the 'goHome' event. We will attempt to go home when\n         * the 'goHome' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to go home right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to go home again.\n         */\n        this.$rootScope.$on('goHome', angular.bind(this, function() {\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        }));\n\n        /**\n         * Listen for the 'logOut' event. We will attempt to log out when\n         * the 'logOut' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to log out right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to log out again.\n         */\n        this.$rootScope.$on('logOut', angular.bind(this, function() {\n\n            /*\n             * set the perform log out boolean to true so that we know to\n             * log out the user later\n             */\n            this.performLogOut = true;\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        }));\n    }\n\n    /**\n     * Start the timers, save session initialized event\n     */\n    initializeSession() {\n        if (this.ConfigService.isPreview()) {\n            // no session management for previewers\n            return;\n        }\n        var minutes = 20;\n        var seconds = minutes * 60;\n        var milliseconds = seconds * 1000;\n        this.sessionTimeoutInterval = milliseconds;\n\n        // set the check mouse interval to one minute\n        this.checkMouseEventInterval = this.convertMinutesToMilliseconds(1);\n\n        // start the warning and auto log out timers\n        this.startTimers();\n\n        // start the check mouse event timer\n        this.startCheckMouseEventTimer();\n\n        // save session started event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"sessionStarted\";\n        var eventData = {};\n        //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Start the warning and auto log out timers\n     */\n    startTimers() {\n        this.startWarningTimer();\n        this.startLogOutTimer();\n    };\n\n    /**\n     * Start the warning timer\n     */\n    startWarningTimer() {\n        var warningTimeoutInterval = this.sessionTimeoutInterval * 0.75;\n        this.warningId = setTimeout(angular.bind(this, this.showWarning), warningTimeoutInterval);\n    };\n\n    /**\n     * Start the auto log out timer\n     */\n    startLogOutTimer() {\n        this.logOutId = setTimeout(angular.bind(this, this.forceLogOut), this.sessionTimeoutInterval);\n    };\n\n    /**\n     * Start the check mouse event timer\n     */\n    startCheckMouseEventTimer() {\n        setInterval(angular.bind(this, this.checkMouseEvent), this.checkMouseEventInterval);\n    };\n\n    /**\n     * Fire the event that will show the warning message\n     */\n    showWarning() {\n        this.$rootScope.$broadcast('showSessionWarning');\n    };\n\n    /**\n     * Refresh the timers\n     */\n    renewSession() {\n        var renewSessionURL = this.ConfigService.getConfigParam('renewSessionURL');\n        // make a request to the log out url\n        this.$http.get(renewSessionURL).then(angular.bind(this, function(result) {\n            var isRenewSessionSuccessful = result.data;\n\n            if (isRenewSessionSuccessful === 'true') {\n                this.clearTimers();\n                this.startTimers();\n            } else {\n                this.forceLogOut();\n            }\n        }));\n    };\n\n    /**\n     * Delete the existing timers\n     */\n    clearTimers() {\n        clearTimeout(this.warningId);\n        clearTimeout(this.logOutId);\n    };\n\n    /**\n     * Called when a mouse event occurs\n     */\n    mouseEventOccurred() {\n\n        // get the current timestamp\n        var date = new Date();\n        var timestamp = date.getTime();\n\n        // remember this timestamp\n        this.lastMouseEventTimestamp = timestamp;\n    };\n\n    /**\n     * Check if there were any mouse events since the last time we checked\n     */\n    checkMouseEvent() {\n        if (this.lastMouseEventTimestamp != null) {\n            // there was a mouse event since the last time we checked\n\n            // reset the timers\n            this.renewSession();\n\n            // clear the mouse event timestamp\n            this.lastMouseEventTimestamp = null;\n        }\n    };\n\n    /**\n     * Convert minutes to milliseconds\n     * @param minutes the number of minutes\n     * @return the number of milliseconds\n     */\n    convertMinutesToMilliseconds(minutes) {\n        var milliseconds = null;\n\n        if (minutes != null) {\n            // get the number of seconds\n            var seconds = minutes * 60;\n\n            // get the number of milliseconds\n            milliseconds = seconds * 1000;\n        }\n\n        return milliseconds;\n    };\n\n    /**\n     * Log out the user\n     */\n    forceLogOut() {\n        this.clearTimers();\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    /**\n     * Check if there are components that are not ready to exit\n     * because they have not saved their data yet. If there are no\n     * components left to wait for, we can then exit.\n     */\n    attemptExit() {\n\n        // get all the components listening for the exit event\n        var exitListenerCount = this.$rootScope.$$listenerCount.exit;\n\n        /*\n         * Check how many exit listeners are still listening for the\n         * exit event. Components such as nodes will finish saving their\n         * data and then be removed from the listener count.\n         */\n        if (exitListenerCount != null && exitListenerCount > 0) {\n            // don't log out yet because there are still listeners\n        } else {\n            // there are no more listeners so we will exit\n            var mainHomePageURL = this.ConfigService.getMainHomePageURL();\n\n            // save sessionEnded event\n            var nodeId = null;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"sessionEnded\";\n            var eventData = {};\n            //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            if (this.performLogOut) {\n                // log out the user and bring them to the home page\n\n                // get the url that will log out the user\n                var sessionLogOutURL = this.ConfigService.getSessionLogOutURL();\n\n                // take user to log out url\n                window.location.href = sessionLogOutURL;\n            } else {\n                /*\n                 * bring the user to the student or teacher home page but\n                 * do not log them out\n                 */\n\n                //get the context path e.g. /wise\n                var contextPath = this.ConfigService.getConfigParam('contextPath');\n\n                var homePageURL = '';\n\n                // get the user type\n                var userType = this.ConfigService.getConfigParam('userType');\n\n                if (userType === 'student') {\n                    // send the user to the student home page\n                    homePageURL = contextPath + '/student';\n                } else if (userType === 'teacher') {\n                    // send the user to the teacher home page\n                    homePageURL = contextPath + '/teacher';\n                } else {\n                    // send the user to the main home page\n                    homePageURL = mainHomePageURL;\n                }\n\n                window.location.href = homePageURL;\n            }\n        }\n    };\n}\n\n//SessionService.$inject = ['$http','$rootScope','ConfigService','StudentDataService'];\nSessionService.$inject = ['$http','$rootScope','ConfigService'];\n\nexport default SessionService;"]}