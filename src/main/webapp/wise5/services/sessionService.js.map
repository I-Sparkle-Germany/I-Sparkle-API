{"version":3,"sources":["sessionService.es6"],"names":[],"mappings":"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","file":"sessionService.js","sourcesContent":["class SessionService {\n    constructor($http,\n                $rootScope,\n                ConfigService\n                //StudentDataService) {\n    ) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        //this.StudentDataService = StudentDataService;\n        /*\n         * the amount of time (in milliseconds) before we automatically log\n         * out the user\n         */\n        this.sessionTimeoutInterval = null;\n\n        /*\n         * the amount of time (in milliseconds) before we check if there\n         * were any mouse events\n         */\n        this.checkMouseEventInterval = null;\n\n        /*\n         * the timestamp when the last mouse event occurred\n         */\n        this.lastMouseEventTimestamp = null;\n\n        // the id for the setTimeout of the warning message\n        this.warningId = null;\n\n        // the id for the setTimeout of the automatic log out\n        this.logOutId = null;\n\n        /*\n         * boolean value used to determine if we need to log out the\n         * user or just bring them back to the home page when we exit\n         * the VLE\n         */\n        this.performLogOut = false;\n\n        /**\n         * Listen for the 'componentDoneUnloading' event. When the user logs\n         * out of the VLE, we will need to wait for certain components to\n         * finish performing any necessary processing (such as saving) before\n         * we actually log out. Once a component has completed their unloading\n         * they will fire the 'componentDoneUnloading' event. We will listen\n         * for this event and when there are no more components left to wait\n         * for, we will then log out.\n         */\n        this.$rootScope.$on('doneExiting', angular.bind(this, function() {\n\n            // check if all components are done unloading so we can exit\n            // no longer needed.\n            //this.attemptExit();\n        }));\n\n        /**\n         * Listen for the 'goHome' event. We will attempt to go home when\n         * the 'goHome' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to go home right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to go home again.\n         */\n        this.$rootScope.$on('goHome', angular.bind(this, function() {\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        }));\n\n        /**\n         * Listen for the 'logOut' event. We will attempt to log out when\n         * the 'logOut' even is fired. There may be components that have not\n         * saved their data yet so we may not be able to log out right away.\n         * If there are components that have not saved their data yet, we\n         * will wait for those components to fire the 'componentDoneUnloading'\n         * event and then try to log out again.\n         */\n        this.$rootScope.$on('logOut', angular.bind(this, function() {\n\n            /*\n             * set the perform log out boolean to true so that we know to\n             * log out the user later\n             */\n            this.performLogOut = true;\n\n            // let other components know that we are exiting\n            this.$rootScope.$broadcast('exit');\n\n            // check if all components are done unloading so we can exit\n            this.attemptExit();\n        }));\n    }\n\n    /**\n     * Start the timers, save session initialized event\n     */\n    initializeSession() {\n        if (this.ConfigService.isPreview()) {\n            // no session management for previewers\n            return;\n        }\n        var minutes = 20;\n        var seconds = minutes * 60;\n        var milliseconds = seconds * 1000;\n        this.sessionTimeoutInterval = milliseconds;\n\n        // set the check mouse interval to one minute\n        this.checkMouseEventInterval = this.convertMinutesToMilliseconds(1);\n\n        // start the warning and auto log out timers\n        this.startTimers();\n\n        // start the check mouse event timer\n        this.startCheckMouseEventTimer();\n\n        // save session started event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"sessionStarted\";\n        var eventData = {};\n        //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n    };\n\n    /**\n     * Start the warning and auto log out timers\n     */\n    startTimers() {\n        this.startWarningTimer();\n        this.startLogOutTimer();\n    };\n\n    /**\n     * Start the warning timer\n     */\n    startWarningTimer() {\n        var warningTimeoutInterval = this.sessionTimeoutInterval * 0.75;\n        this.warningId = setTimeout(angular.bind(this, this.showWarning), warningTimeoutInterval);\n    };\n\n    /**\n     * Start the auto log out timer\n     */\n    startLogOutTimer() {\n        this.logOutId = setTimeout(angular.bind(this, this.forceLogOut), this.sessionTimeoutInterval);\n    };\n\n    /**\n     * Start the check mouse event timer\n     */\n    startCheckMouseEventTimer() {\n        setInterval(angular.bind(this, this.checkMouseEvent), this.checkMouseEventInterval);\n    };\n\n    /**\n     * Fire the event that will show the warning message\n     */\n    showWarning() {\n        $rootScope.$broadcast('showSessionWarning');\n    };\n\n    /**\n     * Refresh the timers\n     */\n    renewSession() {\n        var renewSessionURL = this.ConfigService.getConfigParam('renewSessionURL');\n        // make a request to the log out url\n        this.$http.get(renewSessionURL).then(angular.bind(this, function(result) {\n            var isRenewSessionSuccessful = result.data;\n\n            if (isRenewSessionSuccessful === 'true') {\n                this.clearTimers();\n                this.startTimers();\n            } else {\n                this.forceLogOut();\n            }\n        }));\n    };\n\n    /**\n     * Delete the existing timers\n     */\n    clearTimers() {\n        clearTimeout(this.warningId);\n        clearTimeout(this.logOutId);\n    };\n\n    /**\n     * Called when a mouse event occurs\n     */\n    mouseEventOccurred() {\n\n        // get the current timestamp\n        var date = new Date();\n        var timestamp = date.getTime();\n\n        // remember this timestamp\n        this.lastMouseEventTimestamp = timestamp;\n    };\n\n    /**\n     * Check if there were any mouse events since the last time we checked\n     */\n    checkMouseEvent() {\n        if (this.lastMouseEventTimestamp != null) {\n            // there was a mouse event since the last time we checked\n\n            // reset the timers\n            this.renewSession();\n\n            // clear the mouse event timestamp\n            this.lastMouseEventTimestamp = null;\n        }\n    };\n\n    /**\n     * Convert minutes to milliseconds\n     * @param minutes the number of minutes\n     * @return the number of milliseconds\n     */\n    convertMinutesToMilliseconds(minutes) {\n        var milliseconds = null;\n\n        if (minutes != null) {\n            // get the number of seconds\n            var seconds = minutes * 60;\n\n            // get the number of milliseconds\n            milliseconds = seconds * 1000;\n        }\n\n        return milliseconds;\n    };\n\n    /**\n     * Log out the user\n     */\n    forceLogOut() {\n        this.clearTimers();\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    /**\n     * Check if there are components that are not ready to exit\n     * because they have not saved their data yet. If there are no\n     * components left to wait for, we can then exit.\n     */\n    attemptExit() {\n\n        // get all the components listening for the exit event\n        var exitListenerCount = this.$rootScope.$$listenerCount.exit;\n\n        /*\n         * Check how many exit listeners are still listening for the\n         * exit event. Components such as nodes will finish saving their\n         * data and then be removed from the listener count.\n         */\n        if (exitListenerCount != null && exitListenerCount > 0) {\n            // don't log out yet because there are still listeners\n        } else {\n            // there are no more listeners so we will exit\n            var mainHomePageURL = this.ConfigService.getMainHomePageURL();\n\n            // save sessionEnded event\n            var nodeId = null;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Navigation\";\n            var event = \"sessionEnded\";\n            var eventData = {};\n            //this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n            if (this.performLogOut) {\n                // log out the user and bring them to the home page\n\n                // get the url that will log out the user\n                var sessionLogOutURL = this.ConfigService.getSessionLogOutURL();\n\n                // take user to log out url\n                window.location.href = sessionLogOutURL;\n            } else {\n                /*\n                 * bring the user to the student or teacher home page but\n                 * do not log them out\n                 */\n\n                //get the context path e.g. /wise\n                var contextPath = this.ConfigService.getConfigParam('contextPath');\n\n                var homePageURL = '';\n\n                // get the user type\n                var userType = this.ConfigService.getConfigParam('userType');\n\n                if (userType === 'student') {\n                    // send the user to the student home page\n                    homePageURL = contextPath + '/student';\n                } else if (userType === 'teacher') {\n                    // send the user to the teacher home page\n                    homePageURL = contextPath + '/teacher';\n                } else {\n                    // send the user to the main home page\n                    homePageURL = mainHomePageURL;\n                }\n\n                window.location.href = homePageURL;\n            }\n        }\n    };\n}\n\n//SessionService.$inject = ['$http','$rootScope','ConfigService','StudentDataService'];\nSessionService.$inject = ['$http','$rootScope','ConfigService'];\n\nexport default SessionService;"]}