{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$filter","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","PlanningService","ProjectService","UtilService","$translate","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxScore","maxPlanningNodeNumber","saveToServerRequestCount","dummyStudentWorkId","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","annotation","handleAnnotationReceived","updateNodeStatuses","isPreview","componentStates","nodeStates","events","userName","userId","setAnnotations","populateHistories","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","studentWork","componentId","push","project","nodes","length","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","depth","getNodeDepth","sort","a","b","getMaxScore","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","getFlattenedProjectAsNodeIds","indexOf","isVisible","isVisibleResults","isVisitableResults","firstResult","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","previousIsCompletedValue","progress","getNodeProgressById","icon","getNodeIconByNodeId","latestComponentStatesForNode","getLatestComponentStateByNodeId","latestComponentStateClientSaveTime","clientSaveTime","latestComponentStateServerSaveTime","serverSaveTime","removalCriteria","evaluateNodeConstraint","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsRevisedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateIsCorrectCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","evaluateUsedXSubmitsCriteria","evaluateNumberOfWordsWrittenCriteria","evaluateAddXNumberOfNotesOnThisStepCriteria","getComponentStatesByNodeIdAndComponentId","componentState","isCorrect","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","isVisitedAfterNodeId","criteriaCreatedTimestamp","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","toString","requiredSubmitCount","manualSubmitCounter","highestSubmitCounter","isSubmit","submitCounter","requiredNumberOfWords","response","numberOfWords","wordCount","requiredNumberOfNotes","notebookService","notebook","getNotebookByWorkgroup","notebookItemsByNodeId","getNotebookItemsByNodeId","e","allItems","notebookItem","updateStackHistory","updateVisitedNodesHistory","index","indexOfNodeId","splice","timestamp","nodeStatesByNodeId","tempNodeId","notebookItemId","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","projectId","getProjectId","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","getMode","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","saveStudentStatus","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","projectCompletion","getProjectCompletion","studentStatusJSON","status","studentStatusParams","latestComponentState","getLatestComponentState","allNodeStatesByNodeId","c","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","eventName","getNodeById","isActive","completedItems","completedItemsWithWork","totalItems","totalItemsWithWork","nodeIds","getChildNodeIdsById","groupProgress","hasWork","nodeHasWork","completionPct","Math","round","completionPctWithWork","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","isGroup","components","getComponentsByNodeId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","getComponentStatesByNodeId","completionCriteria","inOrder","tempTimestamp","completionCriterion","tempComponentState","getComponentStateSubmittedAfter","getComponentStateSavedAfter","tempEvent","getVisitEventAfter","showClassmateWorkSource","onlyGetLatest","p","hasOwnProperty","nodeMaxScore","getMaxScoreForNode","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["class StudentDataService {\n  constructor(\n      $filter,\n      $http,\n      $injector,\n      $q,\n      $rootScope,\n      AnnotationService,\n      ConfigService,\n      PlanningService,\n      ProjectService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.PlanningService = PlanningService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.currentNode = null;\n    this.previousStep = null;\n    this.studentData = null;\n    this.stackHistory = [];  // array of node id's\n    this.visitedNodesHistory = [];\n    this.nodeStatuses = {};\n    this.runStatus = null;\n    this.maxScore = null;\n\n    this.maxPlanningNodeNumber = 0;\n\n    /*\n     * A counter to keep track of how many saveToServer requests we have\n     * made that we haven't received a response for yet. When this value\n     * goes back down to 0, we will send update the student status and then\n     * save it to the server.\n     */\n    this.saveToServerRequestCount = 0;\n\n    /*\n     * A dummy student work id that is used in preview mode when we simulate\n     * saving of student data.\n     */\n    this.dummyStudentWorkId = 1;\n\n    // listen for node status changes\n    this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\n      // calculate active global annotations and group them by group name as needed\n      this.AnnotationService.calculateActiveGlobalAnnotationGroups();\n\n      // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\n      let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\n      globalAnnotationGroups.map((globalAnnotationGroup) => {\n        let globalAnnotations = globalAnnotationGroup.annotations;\n        globalAnnotations.map((globalAnnotation) => {\n          if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\n            let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\n            let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\n            if (unGlobalizeCriteriaArray != null) {\n              if (unGlobalizeConditional === \"any\") {\n                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let anySatified = false;\n                for (let unGlobalizeCriteria of unGlobalizeCriteriaArray) {\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  anySatified = anySatified || unGlobalizeCriteriaResult;\n                }\n                if (anySatified) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              } else if (unGlobalizeConditional === \"all\") {\n                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let allSatisfied = true;\n                for (let unGlobalizeCriteria of unGlobalizeCriteriaArray) {\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\n                }\n                if (allSatisfied) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              }\n            }\n          }\n        });\n      })\n    });\n\n    /**\n     * Listen for the 'newAnnotationReceived' event which is fired when\n     * student receives a new annotation from the server\n     */\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n      if (args) {\n        // get the annotation that was saved to the server\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    this.$rootScope.$on('notebookUpdated', (event, args) => {\n      this.updateNodeStatuses();\n    });\n  }\n\n  retrieveStudentData() {\n    if (this.ConfigService.isPreview()) {\n      // initialize dummy student data\n      this.studentData = {};\n      this.studentData.componentStates = [];\n      this.studentData.nodeStates = [];\n      this.studentData.events = [];\n      this.studentData.annotations = [];\n      this.studentData.userName = this.$translate('PREVIEW_STUDENT');\n      this.studentData.userId = '0';\n\n      // set the annotations into the annotation service\n      this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n      // populate the student history\n      this.populateHistories(this.studentData.events);\n\n      // update the node statuses\n      this.updateNodeStatuses();\n    } else {\n      const studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n      const httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.url = studentDataURL;\n\n      const params = {};\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getEvents = true;\n      params.getAnnotations = true;\n      params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n      httpParams.params = params;\n\n      // make the request for the student data\n      return this.$http(httpParams).then((result) => {\n        const resultData = result.data;\n        if (resultData != null) {\n          this.studentData = {};\n\n          // get student work\n          this.studentData.componentStates = [];\n          this.studentData.nodeStates = [];\n          const studentWorkList = resultData.studentWorkList;\n          for (let studentWork of studentWorkList) {\n            if (studentWork.componentId != null) {\n              this.studentData.componentStates.push(studentWork);\n            } else {\n              this.studentData.nodeStates.push(studentWork);\n            }\n          }\n\n          // Check to see if this Project contains any Planning activities\n          if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n            // Overload/add new nodes based on student's work in the NodeState for the planning group.\n            for (let planningGroupNode of this.ProjectService.project.nodes) {\n              if (planningGroupNode.planning) {\n                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                if (lastestNodeStateForPlanningGroupNode != null) {\n                  let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                  if (studentModifiedNodes != null) {\n                    for (let studentModifiedNode of studentModifiedNodes) {\n                      let studentModifiedNodeId = studentModifiedNode.id;\n                      if (studentModifiedNode.planning) {\n                        // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                        for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                          if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                            // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                            this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                          }\n                        }\n                      } else {\n                        // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                        this.ProjectService.project.nodes.push(studentModifiedNode);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            // Re-parse the project with the modified changes\n            this.ProjectService.parseProject();\n          }\n\n          this.studentData.events = resultData.events;\n          this.studentData.annotations = resultData.annotations;\n          this.AnnotationService.setAnnotations(this.studentData.annotations);\n          this.populateHistories(this.studentData.events);\n          this.updateNodeStatuses();\n        }\n\n        return this.studentData;\n      });\n    }\n  };\n\n  /**\n   * Retrieve the run status\n   */\n  retrieveRunStatus() {\n    if (this.ConfigService.isPreview()) {\n      this.runStatus = {};\n    } else {\n      const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n      const runId = this.ConfigService.getConfigParam('runId');\n\n      const params = {\n        runId:runId\n      };\n\n      const httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.url = runStatusURL;\n      httpParams.params = params;\n\n      return this.$http(httpParams).then((result) => {\n        if (result != null) {\n          const data = result.data;\n          if (data != null) {\n            this.runStatus = data;\n          }\n        }\n      });\n    }\n  }\n\n  getNodeStatuses() {\n    return this.nodeStatuses;\n  };\n\n  setNodeStatusByNodeId(nodeId, nodeStatus) {\n    if (nodeId != null && nodeStatus != null) {\n      const nodeStatuses = this.nodeStatuses;\n      if (nodeStatuses != null) {\n        nodeStatuses[nodeId] = nodeStatus;\n      }\n    }\n  }\n\n  getNodeStatusByNodeId(nodeId) {\n    const nodeStatuses = this.nodeStatuses;\n    if (nodeId != null && nodeStatuses != null) {\n      return nodeStatuses[nodeId];\n    }\n    return null;\n  };\n\n  updateNodeStatuses() {\n    let nodes = this.ProjectService.getNodes();\n    let planningNodes = this.PlanningService.getPlanningNodes();\n    const groups = this.ProjectService.getGroups();\n\n    if (nodes != null) {\n      if (planningNodes != null) {\n        nodes = nodes.concat(planningNodes);\n      }\n      for (let node of nodes) {\n        if (!this.ProjectService.isGroupNode(node.id)) {\n          this.updateNodeStatusByNode(node);\n        }\n      }\n    }\n\n    let group;\n    if (groups != null) {\n      for (let group of groups) {\n        group.depth = this.ProjectService.getNodeDepth(group.id);\n      }\n\n      // sort by descending depth order (need to calculate completion for lowest level groups first)\n      groups.sort(function(a, b) {\n        return b.depth - a.depth;\n      });\n\n      for (let group of groups) {\n        this.updateNodeStatusByNode(group);\n      }\n    }\n\n    // update max score\n    this.maxScore = this.getMaxScore();\n    this.$rootScope.$broadcast('nodeStatusesChanged');\n  };\n\n  /**\n   * Update the node status for a node\n   * @param node the node to update\n   */\n  updateNodeStatusByNode(node) {\n    if (node != null) {\n      const nodeId = node.id;\n      const tempNodeStatus = {};\n      tempNodeStatus.nodeId = nodeId;\n      tempNodeStatus.isVisitable = true;\n      tempNodeStatus.isCompleted = true;\n\n      // get the constraints that affect this node\n      let constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n      if (this.ConfigService.getConfigParam('constraints') == false) {\n        /*\n         * constraints have been disabled, most likely because we are\n         * in preview without constraints mode\n         */\n        constraintsForNode = null;\n      }\n\n      if (constraintsForNode == null || constraintsForNode.length == 0) {\n        if (this.ProjectService.getFlattenedProjectAsNodeIds().indexOf(nodeId) == -1 &&\n          !this.ProjectService.isGroupNode(nodeId)) {\n          // there are no transitions to this node so it is not visible\n          tempNodeStatus.isVisible = false;\n          tempNodeStatus.isVisitable = true;\n        } else {\n          // this node does not have any constraints so it is clickable\n          tempNodeStatus.isVisible = true;\n          tempNodeStatus.isVisitable = true;\n        }\n      } else {\n        const isVisibleResults = [];\n        const isVisitableResults = [];\n\n        let result = false;\n        const firstResult = true;\n\n        for (let constraintForNode of constraintsForNode) {\n          if (constraintForNode != null) {\n            // evaluate the constraint to see if the node can be visited\n            const tempResult = this.evaluateConstraint(node, constraintForNode);\n\n            const action = constraintForNode.action;\n\n            if (action != null) {\n              if (action === 'makeThisNodeNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeThisNodeNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisitable') {\n                isVisitableResults.push(tempResult);\n              }\n            }\n          }\n        }\n\n        let isVisible = true;\n        let isVisitable = true;\n\n        for (let isVisibleResult of isVisibleResults) {\n          isVisible = isVisible && isVisibleResult;\n        }\n\n        for (let isVisitableResult of isVisitableResults) {\n          isVisitable = isVisitable && isVisitableResult;\n        }\n\n        tempNodeStatus.isVisible = isVisible;\n        tempNodeStatus.isVisitable = isVisitable;\n      }\n\n      tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n      tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n      const nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n      if (nodeStatus == null) {\n        this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n      } else {\n        /*\n         * get the previous isCompleted value so that we can later check\n         * if it has changed\n         */\n        const previousIsCompletedValue = this.nodeStatuses[nodeId].isCompleted;\n\n        this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n        this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n        this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n        this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n\n        if (previousIsCompletedValue == false && tempNodeStatus.isCompleted) {\n          /*\n           * the node status just changed from false to true so we\n           * will fire an event\n           */\n          this.$rootScope.$broadcast('nodeCompleted', { nodeId: nodeId });\n        }\n      }\n\n      this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n      this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n      // get the latest component state for the node\n      const latestComponentStatesForNode = this.getLatestComponentStateByNodeId(nodeId);\n      if (latestComponentStatesForNode != null) {\n        // set the latest component state timestamp into the node status\n        this.nodeStatuses[nodeId].latestComponentStateClientSaveTime = latestComponentStatesForNode.clientSaveTime;\n        this.nodeStatuses[nodeId].latestComponentStateServerSaveTime = latestComponentStatesForNode.serverSaveTime;\n      }\n    }\n  };\n\n  /**\n   * Evaluate the constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node has satisfied the constraint\n   */\n  evaluateConstraint(node, constraintForNode) {\n    if (constraintForNode != null) {\n      const removalCriteria = constraintForNode.removalCriteria;\n      if (removalCriteria != null) {\n        return this.evaluateNodeConstraint(node, constraintForNode);\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the node constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node satisifies the constraint\n   */\n  evaluateNodeConstraint(node, constraintForNode) {\n    let result = false;\n\n    if (constraintForNode != null) {\n      const removalCriteria = constraintForNode.removalCriteria;\n      const removalConditional = constraintForNode.removalConditional;\n      if (removalCriteria == null) {\n        result = true;\n      } else {\n        let firstResult = true;\n        for (let tempCriteria of removalCriteria) {\n          if (tempCriteria != null) {\n            // evaluate the criteria\n            const tempResult = this.evaluateCriteria(tempCriteria);\n\n            if (firstResult) {\n              // this is the first criteria in this for loop\n              result = tempResult;\n              firstResult = false;\n            } else {\n              // this is not the first criteria\n\n              if (removalConditional === 'any') {\n                // any of the criteria can be true to remove the constraint\n                result = result || tempResult;\n              } else {\n                // all the criteria need to be true to remove the constraint\n                result = result && tempResult;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n\n  /**\n   * Evaluate the criteria\n   * @param criteria the criteria\n   * @returns whether the criteria is satisfied or not\n   */\n  evaluateCriteria(criteria) {\n    let result = false;\n    if (criteria != null) {\n      const functionName = criteria.name;\n      if (functionName == null) {\n\n      } else if (functionName === 'branchPathTaken') {\n        result = this.evaluateBranchPathTakenCriteria(criteria);\n      } else if (functionName === 'isVisible') {\n\n      } else if (functionName === 'isVisitable') {\n\n      } else if (functionName === 'isVisited') {\n        result = this.evaluateIsVisitedCriteria(criteria);\n      } else if (functionName === 'isVisitedAfter') {\n        result = this.evaluateIsVisitedAfterCriteria(criteria);\n      } else if (functionName === 'isRevisedAfter') {\n        result = this.evaluateIsRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isVisitedAndRevisedAfter') {\n        result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isCompleted') {\n        result = this.evaluateIsCompletedCriteria(criteria);\n      } else if (functionName === 'isCorrect') {\n        result = this.evaluateIsCorrectCriteria(criteria);\n      } else if (functionName === 'choiceChosen') {\n        result = this.evaluateChoiceChosenCriteria(criteria);\n      } else if (functionName === 'isPlanningActivityCompleted') {\n        result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n      } else if (functionName === 'score') {\n        result = this.evaluateScoreCriteria(criteria);\n      } else if (functionName === 'usedXSubmits') {\n        result = this.evaluateUsedXSubmitsCriteria(criteria);\n      } else if (functionName === 'wroteXNumberOfWords') {\n        result = this.evaluateNumberOfWordsWrittenCriteria(criteria);\n      } else if (functionName === 'addXNumberOfNotesOnThisStep') {\n        result = this.evaluateAddXNumberOfNotesOnThisStepCriteria(criteria);\n      } else if (functionName === '') {\n\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Check if the isCompleted criteria was satisfied\n   * @param criteria an isCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCompletedCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      return this.isCompleted(nodeId);\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isCorrect criteria was satisfied\n   * @param criteria an isCorrect criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCorrectCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n\n      if (nodeId != null && componentId != null) {\n        const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const studentData = componentState.studentData;\n              if (studentData != null) {\n                if (studentData.isCorrect) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isPlanningActivityCompleted criteria was satisfied\n   * @param criteria a isPlanningActivityCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsPlanningActivityCompletedCriteria(criteria) {\n    let result = false;\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n\n      // get the group id\n      const nodeId = params.nodeId;\n\n      // get the number of planning steps the student needs to create\n      const planningStepsCreated = params.planningStepsCreated;\n\n      // get whether the student needs to complete all the steps in the activity\n      const planningStepsCompleted = params.planningStepsCompleted;\n\n      let planningStepsCreatedSatisfied = false;\n      let planningStepsCompletedSatisfied = false;\n\n      let planningNodes = [];\n\n      if (planningStepsCreated == null) {\n        // there is no value set so we will regard it as satisfied\n        planningStepsCreatedSatisfied = true;\n      } else {\n        /*\n         * there is a value for number of planning steps that need to be created\n         * so we will check if the student created enough planning steps\n         */\n\n        // get the node states for the activity\n        const nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n        if (nodeStates != null) {\n          for (let ns = nodeStates.length - 1; ns >= 0; ns--) {\n            let planningStepCount = 0;\n            const nodeState = nodeStates[ns];\n            if (nodeState != null) {\n              const studentData = nodeState.studentData;\n              if (studentData != null) {\n                const nodes = studentData.nodes;\n                if (nodes != null) {\n                  for (let node of nodes) {\n                    if (node != null) {\n                      if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                        // we have found a planning step the student created\n                        planningStepCount++;\n                      }\n                    }\n                  }\n\n                  if (planningStepCount >= planningStepsCreated) {\n                    // the student has created a sufficient number of planning steps\n                    planningStepsCreatedSatisfied = true;\n                    planningNodes = nodes;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (planningStepsCompleted == null) {\n        planningStepsCompletedSatisfied = true;\n      } else {\n        /*\n         * check if the activity is completed. this checks if all\n         * the children of the activity are completed.\n         */\n        if (this.isCompleted(nodeId)) {\n          planningStepsCompletedSatisfied = true;\n        }\n      }\n\n      if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Check if this branchPathTaken criteria was satisfied\n   * @param criteria a branchPathTaken criteria\n   * @returns whether the branchPathTaken criteria was satisfied\n   */\n  evaluateBranchPathTakenCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      // get the expected from and to node ids\n      const expectedFromNodeId = criteria.params.fromNodeId;\n      const expectedToNodeId = criteria.params.toNodeId;\n\n      // get all the branchPathTaken events from the from node id\n      const branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n      if (branchPathTakenEvents != null) {\n        for (let branchPathTakenEvent of branchPathTakenEvents) {\n          if (branchPathTakenEvent != null) {\n            const data = branchPathTakenEvent.data;\n            if (data != null) {\n              // get the from and to node ids of the event\n              const fromNodeId = data.fromNodeId;\n              const toNodeId = data.toNodeId;\n              if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                // the from and to node ids match the ones we are looking for\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Check if the isVisited criteria was satisfied\n   * @param criteria the isVisited criteria\n   * @returns whether the node id is visited\n   */\n  evaluateIsVisitedCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const nodeId = criteria.params.nodeId;\n      const events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isVisitedAfter criteria was satisfied\n   * @param criteria the isVisitedAfter criteria\n   * @returns whether the node id is visited after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      let events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId &&\n              'nodeEntered' === event.event &&\n              event.clientSaveTime > criteriaCreatedTimestamp) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isRevisedAfter criteria was satisfied\n   * @param criteria the isRevisedAfter criteria\n   * @returns whether the specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsRevisedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      // the student has entered the node after the criteriaCreatedTimestamp.\n      // now check if student has revised the work after this event\n      let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n      if (latestComponentStateForRevisedComponent.clientSaveTime > criteriaCreatedTimestamp) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isVisitedAndRevisedAfter criteria was satisfied\n   * @param criteria the isVisitedAndRevisedAfter criteria\n   * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      // get the node id we want to check if was visited\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      let events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n              // the student has entered the node after the criteriaCreatedTimestamp.\n              // now check if student has revised the work after this event\n              let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n              if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get all the branchPathTaken events by node id\n   * @params fromNodeId the from node id\n   * @returns all the branchPathTaken events from the given node id\n   */\n  getBranchPathTakenEventsByNodeId(fromNodeId) {\n    const branchPathTakenEvents = [];\n    const events = this.studentData.events;\n    if (events != null) {\n      for (let event of events) {\n        if (event != null) {\n          if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n            // we have found a branchPathTaken event from the from node id\n            branchPathTakenEvents.push(event);\n          }\n        }\n      }\n    }\n    return branchPathTakenEvents;\n  }\n\n  /**\n   * Evaluate the choice chosen criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateChoiceChosenCriteria(criteria) {\n    const serviceName = 'MultipleChoiceService';  // Assume MC component.\n    if (this.$injector.has(serviceName)) {\n      const service = this.$injector.get(serviceName);\n      return service.choiceChosen(criteria);\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the score criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateScoreCriteria(criteria) {\n    const params = criteria.params;\n    if (params != null) {\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const scores = params.scores;\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const scoreType = 'any';\n      if (nodeId != null && componentId != null && scores != null) {\n        const latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n        if (latestScoreAnnotation != null) {\n          const scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n          // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\n          if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\n            /*\n             * the student has received a score that matches a score\n             * we're looking for\n             */\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the used x submits criteria which requires the student to submit\n   * at least x number of times.\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the student submitted at least x number\n   * of times\n   */\n  evaluateUsedXSubmitsCriteria(criteria) {\n    const params = criteria.params;\n    if (params != null) {\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const requiredSubmitCount = params.requiredSubmitCount;\n\n      if (nodeId != null && componentId != null) {\n        const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n        if (componentStates != null) {\n          // counter for manually counting the component states with isSubmit=true\n          let manualSubmitCounter = 0;\n\n          // counter for remembering the highest submitCounter value found in studentData objects\n          let highestSubmitCounter = 0;\n\n          /*\n           * We are counting with two submit counters for backwards compatibility.\n           * Some componentStates only have isSubmit=true and do not keep an\n           * updated submitCounter for the number of submits.\n           */\n\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              if (componentState.isSubmit) {\n                manualSubmitCounter++;\n              }\n              const studentData = componentState.studentData;\n              if (studentData != null) {\n                if (studentData.submitCounter != null) {\n                  if (studentData.submitCounter > highestSubmitCounter) {\n                    /*\n                     * the submit counter in the student data is higher\n                     * than we have previously seen\n                     */\n                    highestSubmitCounter = studentData.submitCounter;\n                  }\n                }\n              }\n            }\n          }\n\n          if (manualSubmitCounter >= requiredSubmitCount || highestSubmitCounter >= requiredSubmitCount) {\n            // the student submitted the required number of times\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Evaluate the number of words written criteria.\n   * @param criteria The criteria to evaluate.\n   * @return A boolean value whether the student wrote the required number of\n   * words.\n   */\n  evaluateNumberOfWordsWrittenCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const requiredNumberOfWords = params.requiredNumberOfWords;\n\n      if (nodeId != null && componentId != null) {\n        const componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        if (componentState != null) {\n          const studentData = componentState.studentData;\n          const response = studentData.response;\n          const numberOfWords = this.UtilService.wordCount(response);\n          if (numberOfWords >= requiredNumberOfWords) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  evaluateAddXNumberOfNotesOnThisStepCriteria(criteria) {\n    const params = criteria.params;\n    const nodeId = params.nodeId;\n    const requiredNumberOfNotes = params.requiredNumberOfNotes;\n    const notebookService = this.$injector.get('NotebookService');\n    try {\n      const notebook = notebookService.getNotebookByWorkgroup();\n      const notebookItemsByNodeId = this.getNotebookItemsByNodeId(notebook, nodeId);\n      return notebookItemsByNodeId.length >= requiredNumberOfNotes;\n    } catch (e) {\n\n    }\n    return false;\n  }\n\n  getNotebookItemsByNodeId(notebook, nodeId) {\n    const notebookItemsByNodeId = [];\n    for (let notebookItem of notebook.allItems) {\n      if (notebookItem.nodeId === nodeId) {\n        notebookItemsByNodeId.push(notebookItem);\n      }\n    }\n    return notebookItemsByNodeId;\n  }\n\n  /**\n   * Populate the stack history and visited nodes history\n   * @param events the events\n   */\n  populateHistories(events) {\n    this.stackHistory = [];\n    this.visitedNodesHistory = [];\n\n    if (events != null) {\n      for (let event of events) {\n        if (event != null && event.event === 'nodeEntered') {\n          this.updateStackHistory(event.nodeId);\n          this.updateVisitedNodesHistory(event.nodeId);\n        }\n      }\n    }\n  };\n\n  getStackHistoryAtIndex(index) {\n    if (index < 0) {\n      index = this.stackHistory.length + index;\n    }\n    if (this.stackHistory != null && this.stackHistory.length > 0) {\n      return this.stackHistory[index];\n    }\n    return null;\n  };\n\n  getStackHistory() {\n    return this.stackHistory;\n  };\n\n  updateStackHistory(nodeId) {\n    const indexOfNodeId = this.stackHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.stackHistory.push(nodeId);\n    } else {\n      this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n    }\n  };\n\n  updateVisitedNodesHistory(nodeId) {\n    const indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.visitedNodesHistory.push(nodeId);\n    }\n  };\n\n  getVisitedNodesHistory() {\n    return this.visitedNodesHistory;\n  };\n\n  isNodeVisited(nodeId) {\n    const visitedNodesHistory = this.visitedNodesHistory;\n    if (visitedNodesHistory != null) {\n      const indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n      if (indexOfNodeId !== -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  createComponentState() {\n    const componentState = {};\n    componentState.timestamp = Date.parse(new Date());\n    return componentState;\n  };\n\n  addComponentState(componentState) {\n    if (this.studentData != null && this.studentData.componentStates != null) {\n      this.studentData.componentStates.push(componentState);\n    }\n  };\n\n  addNodeState(nodeState) {\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      this.studentData.nodeStates.push(nodeState);\n    }\n  };\n\n  /**\n   * Returns all NodeStates\n   * @returns Array of all NodeStates\n   */\n  getNodeStates() {\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      return this.studentData.nodeStates;\n    }\n    return [];\n  };\n\n  /**\n   * Get all NodeStates for a specific node\n   * @param nodeId id of node\n   * @returns Array of NodeStates for the specified node\n   */\n  getNodeStatesByNodeId(nodeId) {\n    const nodeStatesByNodeId = [];\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      const nodeStates = this.studentData.nodeStates;\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          const tempNodeId = nodeState.nodeId;\n          if (nodeId === tempNodeId) {\n            nodeStatesByNodeId.push(nodeState);\n          }\n        }\n      }\n    }\n    return nodeStatesByNodeId;\n  };\n\n  addEvent(event) {\n    if (this.studentData != null && this.studentData.events != null) {\n      this.studentData.events.push(event);\n    }\n  };\n\n  addAnnotation(annotation) {\n    if (this.studentData != null && this.studentData.annotations != null) {\n      this.studentData.annotations.push(annotation);\n    }\n  };\n\n  handleAnnotationReceived(annotation) {\n    this.studentData.annotations.push(annotation);\n    if (annotation.notebookItemId) {\n      this.$rootScope.$broadcast('notebookItemAnnotationReceived', {annotation: annotation});\n    } else {\n      this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n    }\n  }\n\n  saveComponentEvent(component, category, event, data) {\n    if (component == null || category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_COMPONENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    const context = \"Component\";\n    const nodeId = component.nodeId;\n    const componentId = component.componentId;\n    const componentType = component.componentType;\n    if (nodeId == null || componentId == null || componentType == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_NODE_ID_COMPONENT_ID_COMPONENT_TYPE_ERROR'));\n      return;\n    }\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n    if (category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_VLE_EVENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    const context = \"VLE\";\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n    const events = [];\n    const newEvent = this.createNewEvent();\n    newEvent.context = context;\n    newEvent.nodeId = nodeId;\n    newEvent.componentId = componentId;\n    newEvent.type = componentType;\n    newEvent.category = category;\n    newEvent.event = event;\n    newEvent.data = data;\n    events.push(newEvent);\n    const componentStates = null;\n    const nodeStates = null;\n    const annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  /**\n   * Create a new empty event\n   * @return a new empty event\n   */\n  createNewEvent() {\n    const event = {};\n    event.projectId = this.ConfigService.getProjectId();\n    event.runId = this.ConfigService.getRunId();\n    event.periodId = this.ConfigService.getPeriodId();\n    event.workgroupId = this.ConfigService.getWorkgroupId();\n    event.clientSaveTime = Date.parse(new Date());\n    return event;\n  };\n\n  saveNodeStates(nodeStates) {\n    const componentStates = null;\n    const events = null;\n    const annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n\n  saveAnnotations(annotations) {\n    const componentStates = null;\n    const nodeStates = null;\n    const events = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  saveToServer(componentStates, nodeStates, events, annotations) {\n    /*\n     * increment the request count since we are about to save data\n     * to the server\n     */\n    this.saveToServerRequestCount += 1;\n\n    // merge componentStates and nodeStates into StudentWork before posting\n    const studentWorkList = [];\n    if (componentStates != null && componentStates.length > 0) {\n      for (let componentState of componentStates) {\n        if (componentState != null) {\n          componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addComponentState(componentState);\n          studentWorkList.push(componentState);\n        }\n      }\n    }\n\n    if (nodeStates != null && nodeStates.length > 0) {\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addNodeState(nodeState);\n          studentWorkList.push(nodeState);\n        }\n      }\n    }\n\n    if (events != null && events.length > 0) {\n      for (let event of events) {\n        if (event != null) {\n          event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n          this.addEvent(event);\n        }\n      }\n    } else {\n      events = [];\n    }\n\n    if (annotations != null && annotations.length > 0) {\n      for (let annotation of annotations) {\n        if (annotation != null) {\n          annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n          if (annotation.id == null) {\n            // add to local annotation array if this annotation has not been saved to the server before.\n            this.addAnnotation(annotation);\n          }\n        }\n      }\n    } else {\n      annotations = [];\n    }\n\n    if (this.ConfigService.isPreview()) {\n      const savedStudentDataResponse = {\n        studentWorkList: studentWorkList,\n        events: events,\n        annotations: annotations\n      };\n\n      // if we're in preview, don't make any request to the server but pretend we did\n      this.saveToServerSuccess(savedStudentDataResponse);\n      let deferred = this.$q.defer();\n      deferred.resolve(savedStudentDataResponse);\n      return deferred.promise;\n    } else {\n      // set the workgroup id and run id\n      const params = {};\n      params.projectId = this.ConfigService.getProjectId();\n      params.runId = this.ConfigService.getRunId();\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.studentWorkList = angular.toJson(studentWorkList);\n      params.events = angular.toJson(events);\n      params.annotations = angular.toJson(annotations);\n\n      // get the url to POST the student data\n      const httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.data = $.param(params);\n\n      // make the request to post the student data\n      return this.$http(httpParams).then(\n        result => {\n          // get the local references to the component states that were posted and set their id and serverSaveTime\n          if (result != null && result.data != null) {\n            const savedStudentDataResponse = result.data;\n\n            this.saveToServerSuccess(savedStudentDataResponse);\n\n            return savedStudentDataResponse;\n          }\n        }, result => {\n          // a server error occured\n\n          /*\n           * decrement the request count since this request failed\n           * but is now completed\n           */\n          this.saveToServerRequestCount -= 1;\n\n          return null;\n        }\n      );\n    }\n  };\n\n  saveToServerSuccess(savedStudentDataResponse) {\n    // set dummy serverSaveTime for use if we're in preview mode\n    let serverSaveTime = Date.parse(new Date());\n\n    // handle saved studentWork\n    if (savedStudentDataResponse.studentWorkList) {\n      let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n      let localStudentWorkList = this.studentData.componentStates;\n      if (this.studentData.nodeStates) {\n        localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n      }\n\n      // set the id and serverSaveTime in the local studentWorkList\n      for (let savedStudentWork of savedStudentWorkList) {\n        /*\n         * loop through all the student work that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localStudentWorkList.length - 1; l >= 0; l--) {\n          const localStudentWork = localStudentWorkList[l];\n          if (localStudentWork.requestToken &&\n            localStudentWork.requestToken === savedStudentWork.requestToken) {\n            localStudentWork.id = savedStudentWork.id;\n            localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n            localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n            if (this.ConfigService.getMode() == \"preview\" && localStudentWork.id == null) {\n              /*\n               * we are in preview mode so we will set a dummy\n               * student work id into the student work\n               */\n              localStudentWork.id = this.dummyStudentWorkId;\n\n              /*\n               * increment the dummy student work id for the next\n               * student work\n               */\n              this.dummyStudentWorkId++;\n            }\n\n            this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n            break;\n          }\n        }\n      }\n    }\n    // handle saved events\n    if (savedStudentDataResponse.events) {\n      const savedEvents = savedStudentDataResponse.events;\n\n      const localEvents = this.studentData.events;\n\n      // set the id and serverSaveTime in the local event\n      for (let savedEvent of savedEvents) {\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localEvents.length - 1; l >= 0; l--) {\n          const localEvent = localEvents[l];\n          if (localEvent.requestToken &&\n            localEvent.requestToken === savedEvent.requestToken) {\n            localEvent.id = savedEvent.id;\n            localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n            localEvent.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n            break;\n          }\n        }\n      }\n    }\n\n    // handle saved annotations\n    if (savedStudentDataResponse.annotations) {\n      const savedAnnotations = savedStudentDataResponse.annotations;\n      const localAnnotations = this.studentData.annotations;\n\n      // set the id and serverSaveTime in the local annotation\n      for (let savedAnnotation of savedAnnotations) {\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localAnnotations.length - 1; l >= 0; l--) {\n          const localAnnotation = localAnnotations[l];\n          if (localAnnotation.requestToken &&\n            localAnnotation.requestToken === savedAnnotation.requestToken) {\n            localAnnotation.id = savedAnnotation.id;\n            localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n            localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n            break;\n          }\n        }\n      }\n    }\n\n    /*\n     * decrement the request count since we have received a response to\n     * one of our save requests\n     */\n    this.saveToServerRequestCount -= 1;\n\n    if (this.saveToServerRequestCount == 0) {\n      /*\n       * we have received the reponse to all of the saveToServer requests\n       * so we will now update the student status and save it to the\n       * server\n       */\n      this.updateNodeStatuses();\n      this.saveStudentStatus();\n    }\n  };\n\n  /**\n   * POSTs student status to server\n   * Returns a promise of the POST request\n   */\n  saveStudentStatus() {\n    if (!this.ConfigService.isPreview()) {\n      const studentStatusURL = this.ConfigService.getStudentStatusURL();\n      if (studentStatusURL != null) {\n        const runId = this.ConfigService.getRunId();\n        const periodId = this.ConfigService.getPeriodId();\n        const workgroupId = this.ConfigService.getWorkgroupId();\n        const currentNodeId = this.getCurrentNodeId();\n        const nodeStatuses = this.getNodeStatuses();\n        const projectCompletion = this.getProjectCompletion();\n\n        // create the JSON that will be saved to the database\n        const studentStatusJSON = {};\n        studentStatusJSON.runId = runId;\n        studentStatusJSON.periodId = periodId;\n        studentStatusJSON.workgroupId = workgroupId;\n        studentStatusJSON.currentNodeId = currentNodeId;\n        studentStatusJSON.nodeStatuses = nodeStatuses;\n        studentStatusJSON.projectCompletion = projectCompletion;\n\n        const status = angular.toJson(studentStatusJSON);\n        const studentStatusParams = {};\n        studentStatusParams.runId = runId;\n        studentStatusParams.periodId = periodId;\n        studentStatusParams.workgroupId = workgroupId;\n        studentStatusParams.status = status;\n\n        const httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = studentStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(studentStatusParams);\n\n        return this.$http(httpParams).then(\n          result => {\n            return true;\n          }, result => {\n            return false;\n          }\n        );\n      }\n    }\n  };\n\n  retrieveComponentStates(runId, periodId, workgroupId) {\n\n  };\n\n  getLatestComponentState() {\n    const studentData = this.studentData;\n    if (studentData != null) {\n      const componentStates = studentData.componentStates;\n      if (componentStates != null) {\n        return componentStates[componentStates.length - 1];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check whether the component has unsubmitted work\n   * @return boolean whether or not there is unsubmitted work\n   */\n  isComponentSubmitDirty() {\n    let latestComponentState = this.getLatestComponentState();\n    if (latestComponentState && !latestComponentState.isSubmit) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Get the latest NodeState for the specified node id\n   * @param nodeId the node id\n   * @return the latest node state with the matching node id or null if none are found\n   */\n  getLatestNodeStateByNodeId(nodeId) {\n    let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n    if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n      return allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n    }\n    return null;\n  };\n\n  /**\n   * Get the latest component state for the given node id and component\n   * id.\n   * @param nodeId the node id\n   * @param componentId the component id (optional)\n   * @return the latest component state with the matching node id and\n   * component id or null if none are found\n   */\n  getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n    if (nodeId) {\n      const studentData = this.studentData;\n      if (studentData) {\n        // get the component states\n        const componentStates = studentData.componentStates;\n        if (componentStates) {\n          for (let c = componentStates.length - 1; c >= 0; c--) {\n            const componentState = componentStates[c];\n            if (componentState) {\n              const componentStateNodeId = componentState.nodeId;\n              if (nodeId === componentStateNodeId) {\n                if (componentId) {\n                  const componentStateComponentId = componentState.componentId;\n                  if (componentId === componentStateComponentId) {\n                    return componentState;\n                  }\n                } else {\n                  return componentState;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Get the latest component state that was a submit\n   * for the given node id and component id.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the latest component state that was a submit with the matching\n   * node id and component id or null if none are found\n   */\n  getLatestSubmitComponentState(nodeId, componentId) {\n    const componentStates = this.studentData.componentStates;\n    for (let c = componentStates.length - 1; c >= 0; c--) {\n      const componentState = componentStates[c];\n      if (componentState.nodeId === nodeId &&\n          componentState.componentId === componentId &&\n          componentState.isSubmit) {\n        return componentState;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the student work by specified student work id, which can be a ComponentState or NodeState\n   * @param studentWorkId the student work id\n   * @return an StudentWork or null\n   */\n  getStudentWorkByStudentWorkId(studentWorkId) {\n    if (studentWorkId != null) {\n      const componentStates = this.studentData.componentStates;\n      if (componentStates != null) {\n        for (let componentState of componentStates) {\n          if (componentState != null && componentState.id === studentWorkId) {\n            return componentState;\n          }\n        }\n      }\n\n      const nodeStates = this.studentData.nodeStates;\n      if (nodeStates != null) {\n        for (let nodeState of nodeStates) {\n          if (nodeState != null && nodeState.id === studentWorkId) {\n            return nodeState;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns all the component states for this workgroup\n   */\n  getComponentStates() {\n    return this.studentData.componentStates;\n  };\n\n  /**\n   * Get the component states for the given node id\n   * @param nodeId the node id\n   * @return an array of component states for the given node id\n   */\n  getComponentStatesByNodeId(nodeId) {\n    const componentStatesByNodeId = [];\n    if (nodeId != null) {\n      const studentData = this.studentData;\n      if (studentData != null) {\n        const componentStates = studentData.componentStates;\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const componentStateNodeId = componentState.nodeId;\n              if (nodeId == componentStateNodeId) {\n                componentStatesByNodeId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n    return componentStatesByNodeId;\n  };\n\n  /**\n   * Get the component states for the given node id and component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return an array of component states for the given node id and\n   * component id\n   */\n  getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n    const componentStatesByNodeIdAndComponentId = [];\n    if (nodeId != null && componentId != null) {\n      const studentData = this.studentData;\n      if (studentData != null) {\n        const componentStates = studentData.componentStates;\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const componentStateNodeId = componentState.nodeId;\n              const componentStateComponentId = componentState.componentId;\n              if (nodeId == componentStateNodeId &&\n                  componentId == componentStateComponentId) {\n                componentStatesByNodeIdAndComponentId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return componentStatesByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all events\n   * @returns all events for the student\n   */\n  getEvents() {\n    if (this.studentData != null && this.studentData.events != null) {\n      return this.studentData.events;\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Get the events for a node id\n   * @param nodeId the node id\n   * @returns the events for the node id\n   */\n  getEventsByNodeId(nodeId) {\n    const eventsByNodeId = [];\n    if (nodeId != null) {\n      if (this.studentData != null && this.studentData.events != null) {\n        const events = this.studentData.events;\n        for (let event of events) {\n          if (event != null) {\n            const eventNodeId = event.nodeId;\n            if (nodeId === eventNodeId) {\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n    return eventsByNodeId;\n  };\n\n  /**\n   * Get the events for a component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns an array of events for the component id\n   */\n  getEventsByNodeIdAndComponentId(nodeId, componentId) {\n    const eventsByNodeId = [];\n    if (nodeId != null) {\n      if (this.studentData != null && this.studentData.events != null) {\n        const events = this.studentData.events;\n        for (let event of events) {\n          if (event != null) {\n            const eventNodeId = event.nodeId;\n            const eventComponentId = event.componentId;\n            if (nodeId === eventNodeId && componentId === eventComponentId) {\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n    return eventsByNodeId;\n  };\n\n  /**\n   * Get the node id of the latest node entered event for an active node that\n   * exists in the project. We need to check if the node exists in the project\n   * in case the node has been deleted from the project. We also need to check\n   * that the node is active in case the node has been moved to the inactive\n   * section of the project.\n   * @return the node id of the latest node entered event for an active node\n   * that exists in the project\n   */\n  getLatestNodeEnteredEventNodeIdWithExistingNode() {\n    const events = this.studentData.events;\n    for (let e = events.length - 1; e >= 0; e--) {\n      const event = events[e];\n      if (event != null) {\n        const eventName = event.event;\n        if (eventName == 'nodeEntered') {\n          const nodeId = event.nodeId;\n          const node = this.ProjectService.getNodeById(nodeId);\n          if (node != null) {\n            if (this.ProjectService.isActive(nodeId)) {\n              return nodeId;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the student can visit the node\n   * @param nodeId the node id\n   * @returns whether the student can visit the node\n   */\n  canVisitNode(nodeId) {\n    if (nodeId != null) {\n      // get the node status for the node\n      const nodeStatus = this.getNodeStatusByNodeId(nodeId);\n      if (nodeStatus != null) {\n        if (nodeStatus.isVisitable) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get the node status by node id\n   * @param nodeId the node id\n   * @returns the node status object for a node\n   */\n  getNodeStatusByNodeId(nodeId) {\n    if (nodeId != null) {\n      return this.nodeStatuses[nodeId];\n    }\n    return null;\n  };\n\n  /**\n   * Get progress information for a given node\n   * @param nodeId the node id\n   * @returns object with number of completed items (both all and for items\n   * that capture student work), number of visible items (all/with work),\n   * completion % (for all items, items with student work)\n   */\n  getNodeProgressById(nodeId) {\n    let completedItems = 0;\n    let completedItemsWithWork = 0;\n    let totalItems = 0;\n    let totalItemsWithWork = 0;\n    let progress = {};\n\n    if (this.ProjectService.isGroupNode(nodeId)) {\n      let nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n      for (let id of nodeIds) {\n        let status = this.nodeStatuses[id];\n        if (this.ProjectService.isGroupNode(id)) {\n          if (status.progress.totalItemsWithWork > -1) {\n            completedItems += status.progress.completedItems;\n            totalItems += status.progress.totalItems;\n            completedItemsWithWork += status.progress.completedItemsWithWork;\n            totalItemsWithWork += status.progress.totalItemsWithWork;\n          } else {\n            // we have a legacy node status so we'll need to calculate manually\n            let groupProgress = this.getNodeProgressById(id);\n            completedItems += groupProgress.completedItems;\n            totalItems += groupProgress.totalItems;\n            completedItemsWithWork += groupProgress.completedItemsWithWork;\n            totalItemsWithWork += groupProgress.totalItemsWithWork;\n          }\n        } else {\n          if (status.isVisible) {\n            totalItems++;\n\n            let hasWork = this.ProjectService.nodeHasWork(id);\n            if (hasWork) {\n              totalItemsWithWork++;\n            }\n\n            if (status.isCompleted) {\n              completedItems++;\n\n              if (hasWork) {\n                completedItemsWithWork++;\n              }\n            }\n          }\n        }\n      }\n\n      let completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n      let completionPctWithWork = totalItemsWithWork ? Math.round(completedItemsWithWork / totalItemsWithWork * 100) : 0;\n\n      progress = {\n        \"completedItems\": completedItems,\n        \"completedItemsWithWork\": completedItemsWithWork,\n        \"totalItems\": totalItems,\n        \"totalItemsWithWork\": totalItemsWithWork,\n        \"completionPct\": completionPct,\n        \"completionPctWithWork\": completionPctWithWork\n      };\n    }\n\n    // TODO: implement for steps (using components instead of child nodes)?\n\n    return progress;\n  };\n\n  /**\n   * Check if the given node or component is completed\n   * @param nodeId the node id\n   * @param componentId (optional) the component id\n   * @returns whether the node or component is completed\n   */\n  isCompleted(nodeId, componentId) {\n    let result = false;\n    if (nodeId && componentId) {\n      // check that the component is completed\n\n      // get the component states for the component\n      const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the component events\n      const componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the node events\n      const nodeEvents = this.getEventsByNodeId(nodeId);\n\n      // get the component object\n      const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      const node = this.ProjectService.getNodeById(nodeId);\n      if (component != null) {\n        // get the component type\n        const componentType = component.type;\n\n        if (componentType != null) {\n          // get the service for the component type\n          const service = this.$injector.get(componentType + 'Service');\n\n          // check if the component is completed\n          if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n            result = true;\n          }\n        }\n      }\n    } else if (nodeId) {\n      // check if node is a group\n      const isGroup = this.ProjectService.isGroupNode(nodeId);\n\n      const node = this.ProjectService.getNodeById(nodeId);\n\n      if (isGroup) {\n        // node is a group\n        let tempResult = true;\n\n        // check that all the nodes in the group are visible and completed\n        const nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n        if (nodeIds.length) {\n          for (let id of nodeIds) {\n            if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n              // the child is not visible or not completed so the group is not completed\n              tempResult = false;\n              break;\n            }\n          }\n        } else {\n          // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n          tempResult = false;\n        }\n        result = tempResult;\n      } else {\n        // check that all the components in the node are completed\n\n        // get all the components in the node\n        const components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        // we will default to is completed true\n        let tempResult = true;\n\n        /*\n         * All components must be completed in order for the node to be completed\n         * so we will loop through all the components and check if they are\n         * completed\n         */\n        for (let component of components) {\n          if (component != null) {\n            const componentId = component.id;\n            const componentType = component.type;\n\n            let tempNodeId = nodeId;\n            let tempNode = node;\n            let tempComponentId = componentId;\n            let tempComponent = component;\n\n            if (componentType != null) {\n              try {\n                // get the service name\n                const serviceName = componentType + 'Service';\n\n                if (this.$injector.has(serviceName)) {\n                  // get the service for the component type\n                  const service = this.$injector.get(serviceName);\n\n                  // get the component states for the component\n                  const componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the component events\n                  const componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the node events\n                  const nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                  // check if the component is completed\n                  const isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\n\n                  tempResult = tempResult && isComponentCompleted;\n                }\n              } catch (e) {\n                console.log(this.$translate('ERROR_COULD_NOT_CALCULATE_IS_COMPLETED') + tempComponentId);\n              }\n            }\n          }\n        }\n        result = tempResult;\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Get the current node\n   * @returns the current node object\n   */\n  getCurrentNode() {\n    return this.currentNode;\n  };\n\n  /**\n   * Get the current node id\n   * @returns the current node id\n   */\n  getCurrentNodeId() {\n    if (this.currentNode != null) {\n      return this.currentNode.id;\n    }\n    return null;\n  };\n\n  /**\n   * Set the current node\n   * @param nodeId the node id\n   */\n  setCurrentNodeByNodeId(nodeId) {\n    if (nodeId != null) {\n      const node = this.ProjectService.getNodeById(nodeId);\n      this.setCurrentNode(node);\n    }\n  };\n\n  /**\n   * Set the current node\n   * @param node the node object\n   */\n  setCurrentNode(node) {\n    const previousCurrentNode = this.currentNode;\n    if (previousCurrentNode !== node) {\n      if (previousCurrentNode &&\n          !this.ProjectService.isGroupNode(previousCurrentNode.id)) {\n        this.previousStep = previousCurrentNode;\n      }\n      this.currentNode = node;\n      this.$rootScope.$broadcast('currentNodeChanged',\n          {previousNode: previousCurrentNode, currentNode: this.currentNode});\n    }\n  };\n\n  /**\n   * End the current node\n   */\n  endCurrentNode() {\n    const previousCurrentNode = this.currentNode;\n    if (previousCurrentNode != null) {\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n    }\n  };\n\n  /**\n   * End the current node and set the current node\n   * @param nodeId the node id of the new current node\n   */\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n    if (this.nodeStatuses[nodeId].isVisitable) {\n      this.endCurrentNode();\n      this.setCurrentNodeByNodeId(nodeId);\n    } else {\n      this.nodeClickLocked(nodeId);\n    }\n  };\n\n  /**\n   * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n   * @param nodeId\n   */\n  nodeClickLocked(nodeId) {\n    this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n  };\n\n  /**\n   * This will parse a delimited string into an array of\n   * arrays. The default delimiter is the comma, but this\n   * can be overriden in the second argument.\n   * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n   */\n  CSVToArray( strData, strDelimiter ) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = (strDelimiter || \",\");\n\n    // Create a regular expression to parse the CSV values.\n    const objPattern = new RegExp(\n      (\n        // Delimiters.\n        \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n        // Quoted fields.\n        \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n        // Standard fields.\n        \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n      ),\n      \"gi\"\n    );\n\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    const arrData = [[]];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    let arrMatches = null;\n\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (arrMatches = objPattern.exec( strData )) {\n\n      // Get the delimiter that was found.\n      const strMatchedDelimiter = arrMatches[ 1 ];\n\n      // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n      if (\n        strMatchedDelimiter.length &&\n        (strMatchedDelimiter != strDelimiter)\n      ){\n\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push( [] );\n      }\n\n      // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n      if (arrMatches[ 2 ]){\n\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        const strMatchedValue = arrMatches[ 2 ].replace(\n          new RegExp( \"\\\"\\\"\", \"g\" ),\n          \"\\\"\"\n        );\n\n      } else {\n        // We found a non-quoted value.\n        const strMatchedValue = arrMatches[ 3 ];\n      }\n\n      // Now that we have our value string, let's add\n      // it to the data array.\n      let finalValue = strMatchedValue;\n      const floatVal = parseFloat(strMatchedValue);\n      if (!isNaN(floatVal)) {\n        finalValue = floatVal;\n      }\n      arrData[ arrData.length - 1 ].push( finalValue );\n    }\n    // Return the parsed data.\n    return( arrData );\n  };\n\n  /**\n   * Get the total score for the workgroup\n   * @returns the total score for the workgroup\n   */\n  getTotalScore() {\n    const annotations = this.studentData.annotations;\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    return this.AnnotationService.getTotalScore(annotations, workgroupId);\n  }\n\n  /**\n   * Get the project completion for the signed in student\n   * @returns the project completion percentage for the signed in student\n   */\n  getProjectCompletion() {\n    // group0 is always the root node of the whole project\n    const nodeId = 'group0';\n\n    // get the progress including all of the children nodes\n    const progress = this.getNodeProgressById(nodeId);\n\n    return progress;\n  }\n\n  /**\n   * Get the run status\n   */\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  /**\n   * Get the next available planning node instance node id\n   * @returns the next available planning node instance node id\n   */\n  getNextAvailablePlanningNodeId() {\n    // used to keep track of the highest planning node number we have found, which is 1-based\n    let currentMaxPlanningNodeNumber = 1;\n\n    let nodeStates = this.getNodeStates();\n    if (nodeStates != null) {\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          let nodeStateNodeId = nodeState.nodeId;\n          if (this.PlanningService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n            let nodes = nodeState.studentData.nodes;\n            for (let node of nodes) {\n              let nodeId = node.id;\n              // regex to match the planning node id e.g. planningNode2\n              let planningNodeIdRegEx = /planningNode(.*)/;\n\n              // run the regex on the node id\n              let result = nodeId.match(planningNodeIdRegEx);\n\n              if (result != null) {\n                // we have found a planning node instance node id\n\n                /*\n                 * get the number part of the planning node instance node id\n                 * e.g. if the nodeId is planningNode2, the number part\n                 * would be 2\n                 */\n                let planningNodeNumber = parseInt(result[1]);\n\n                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                  /*\n                   * update the max number part if we have found a new\n                   * higher number\n                   */\n                  currentMaxPlanningNodeNumber = planningNodeNumber;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n      // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n      this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n    }\n\n    // Increment maxPlanningNodeNumber each time this function is called.\n    this.maxPlanningNodeNumber++;\n\n    // return the next available planning node instance node id\n    return 'planningNode' + this.maxPlanningNodeNumber;\n  }\n\n  /**\n   * Get the annotations\n   * @returns the annotations\n   */\n  getAnnotations() {\n    if (this.studentData != null && this.studentData.annotations != null) {\n      return this.studentData.annotations;\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest component states for a node\n   * @param nodeId get the component states for the node\n   * @return an array containing the work for the node\n   */\n  getLatestComponentStatesByNodeId(nodeId) {\n    const latestComponentStates = [];\n    if (nodeId) {\n      const studentData = this.studentData;\n      if (studentData) {\n        const node = this.ProjectService.getNodeById(nodeId);\n        if (node != null) {\n          const components = node.components;\n          if (components != null) {\n            for (let component of components) {\n              if (component != null) {\n                const componentId = component.id;\n                let componentState =\n                    this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n                if (componentState == null) {\n                  /*\n                   * there is no component state for the component so we will\n                   * create an object that just contains the node id and\n                   * component id\n                   */\n                  componentState = {};\n                  componentState.nodeId = nodeId;\n                  componentState.componentId = componentId;\n                }\n                latestComponentStates.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n    return latestComponentStates;\n  }\n\n  /**\n   * Get the latest component state for a node\n   * @param nodeId get the latest component state for the node\n   * @return the latest component state for the node\n   */\n  getLatestComponentStateByNodeId(nodeId) {\n    if (nodeId != null) {\n      const studentData = this.studentData;\n      if (studentData) {\n        const componentStates = this.getComponentStatesByNodeId(nodeId);\n        return componentStates[componentStates.length - 1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the completion criteria is satisfied\n   * @param completionCriteria the completion criteria\n   * @return whether the completion criteria was satisfied\n   */\n  isCompletionCriteriaSatisfied(completionCriteria) {\n    let result = true;\n    if (completionCriteria != null) {\n      if (completionCriteria.inOrder) {\n        // the criteria need to be satisfied in order\n\n        let tempTimestamp = 0;\n        const criteria = completionCriteria.criteria;\n        for (let completionCriterion of criteria) {\n          let tempResult = true;\n          if (completionCriterion != null) {\n            // get the function name e.g. 'isVisited', 'isSaved', 'isSubmitted'\n            const functionName = completionCriterion.name;\n\n            if (functionName == 'isSubmitted') {\n              const nodeId = completionCriterion.nodeId;\n              const componentId = completionCriterion.componentId;\n\n              // get the first submit component state after the timestamp\n              const tempComponentState = this.getComponentStateSubmittedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isSaved') {\n              const nodeId = completionCriterion.nodeId;\n              const componentId = completionCriterion.componentId;\n\n              // get the first save component state after the timestamp\n              const tempComponentState = this.getComponentStateSavedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isVisited') {\n              const nodeId = completionCriterion.nodeId;\n\n              // get the first visit event after the timestamp\n              const tempEvent = this.getVisitEventAfter(nodeId, tempTimestamp);\n\n              if (tempEvent == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempEvent.serverSaveTime;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the first save component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a save component state after this timestamp\n   */\n  getComponentStateSavedAfter(nodeId, componentId, timestamp) {\n    const componentStates = this.studentData.componentStates;\n    if (componentStates != null) {\n      for (let tempComponentState of componentStates) {\n        if (tempComponentState != null &&\n            tempComponentState.serverSaveTime > timestamp &&\n            tempComponentState.nodeId === nodeId &&\n            tempComponentState.componentId === componentId) {\n          return tempComponentState;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first submit component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a submit component state after this timestamp\n   */\n  getComponentStateSubmittedAfter(nodeId, componentId, timestamp) {\n    const componentStates = this.studentData.componentStates;\n    if (componentStates != null) {\n      for (let tempComponentState of componentStates) {\n        if (tempComponentState != null &&\n            tempComponentState.serverSaveTime > timestamp &&\n            tempComponentState.nodeId === nodeId &&\n            tempComponentState.componentId === componentId &&\n            tempComponentState.isSubmit) {\n          return tempComponentState;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first visit event after the timestamp\n   */\n  getVisitEventAfter(nodeId, timestamp) {\n    const events = this.studentData.events;\n    if (events != null) {\n      for (let tempEvent of events) {\n        if (tempEvent != null &&\n            tempEvent.serverSaveTime > timestamp &&\n            tempEvent.nodeId === nodeId &&\n            tempEvent.event === 'nodeEntered') {\n          return tempEvent;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get classmate student work\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Where to get the work from.\n   * 'period' will get the classmate work only from the period the student is in.\n   * null will get work from the whole class (all periods).\n   *\n   * @return a promise that will return the component states from classmates\n   */\n  getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource) {\n    const studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = studentDataURL;\n\n    const params = {};\n    params.runId = this.ConfigService.getRunId();\n    params.nodeId = nodeId;\n    params.componentId = componentId;\n    params.getStudentWork = true;\n    params.getEvents = false;\n    params.getAnnotations = false;\n    params.onlyGetLatest = true;\n\n    if (showClassmateWorkSource == 'period') {\n      params.periodId = this.ConfigService.getPeriodId();\n    }\n\n    httpParams.params = params;\n\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null) {\n        return resultData.studentWorkList;\n      }\n      return [];\n    });\n  }\n\n  /**\n   * Get a student work from any student.\n   * @param id The student work id.\n   */\n  getStudentWorkById(id) {\n    const studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = studentDataURL;\n    const params = {};\n    params.runId = this.ConfigService.getRunId();\n    params.id = id;\n    params.getStudentWork = true;\n    params.getEvents = false;\n    params.getAnnotations = false;\n    params.onlyGetLatest = true;\n    httpParams.params = params;\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null && resultData.studentWorkList.length > 0) {\n        return resultData.studentWorkList[0];\n      }\n      return null;\n    });\n  }\n\n  /**\n   * Get the max possible score for the project\n   * @returns the sum of the max scores for all the nodes in the project visible\n   * to the current workgroup or null if none of the visible components has max scores.\n   */\n  getMaxScore() {\n    let maxScore = null;\n    for (let p in this.nodeStatuses) {\n      if (this.nodeStatuses.hasOwnProperty(p)) {\n        let nodeStatus = this.nodeStatuses[p];\n        let nodeId = nodeStatus.nodeId;\n\n        if (nodeStatus.isVisible && !this.ProjectService.isGroupNode(nodeId)) {\n          // node is visible and is not a group\n          // get node max score\n          let nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n          if (nodeMaxScore) {\n            // there is a max score for the node, so add to total\n            // TODO geoffreykwan: trying to add to null?\n            maxScore += nodeMaxScore;\n          }\n        }\n      }\n    }\n    return maxScore;\n  }\n}\n\nStudentDataService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'AnnotationService',\n  'ConfigService',\n  'PlanningService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default StudentDataService;\n"]}