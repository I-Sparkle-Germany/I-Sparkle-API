{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$filter","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","ProjectService","UtilService","$translate","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxScore","maxPlanningNodeNumber","saveToServerRequestCount","dummyStudentWorkId","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","i","length","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","annotation","handleAnnotationReceived","isPreview","componentStates","nodeStates","events","userName","userId","setAnnotations","populateHistories","updateNodeStatuses","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","s","studentWork","componentId","push","project","nodes","p","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","g","depth","getNodeDepth","sort","a","b","getMaxScore","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","getFlattenedProjectAsNodeIds","indexOf","isVisible","isVisibleResults","isVisitableResults","firstResult","c","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","previousIsCompletedValue","progress","getNodeProgressById","icon","getNodeIconByNodeId","latestComponentStatesForNode","getLatestComponentStateByNodeId","latestComponentStateClientSaveTime","clientSaveTime","latestComponentStateServerSaveTime","serverSaveTime","removalCriteria","evaluateNodeConstraint","visitedNodes","getVisitedNodesHistory","transitionsToNodeId","v","visitedNodeId","transitions","getTransitionsByFromAndToNodeId","isStartNode","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsRevisedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateIsCorrectCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","evaluateUsedXSubmitsCriteria","getComponentStatesByNodeIdAndComponentId","componentState","isCorrect","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","e","isVisitedAfter","isVisitedAfterNodeId","criteriaCreatedTimestamp","isRevisedAfter","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","isVisitedAndRevisedAfter","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","toString","requiredSubmitCount","manualSubmitCounter","highestSubmitCounter","isSubmit","submitCounter","updateStackHistory","updateVisitedNodesHistory","index","stackHistoryResult","indexOfNodeId","splice","timestamp","nodeStatesByNodeId","tempNodeId","notebookItemId","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","projectId","getProjectId","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","saveStudentStatus","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","getMode","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","projectCompletion","getProjectCompletion","studentStatusJSON","status","studentStatusParams","latestComponentState","submitDirty","getLatestComponentState","latestNodeState","allNodeStatesByNodeId","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","eventName","getNodeById","isActive","completedItems","completedItemsWithWork","totalItems","totalItemsWithWork","nodeIds","getChildNodeIdsById","groupProgress","hasWork","nodeHasWork","completionPct","Math","round","completionPctWithWork","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","isGroup","components","getComponentsByNodeId","showPreviousWorkNodeId","showPreviousWorkComponentId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","getComponentStatesByNodeId","completionCriteria","inOrder","tempTimestamp","completionCriterion","tempComponentState","getComponentStateSubmittedAfter","getComponentStateSavedAfter","tempEvent","getVisitEventAfter","showClassmateWorkSource","onlyGetLatest","hasOwnProperty","nodeMaxScore","getMaxScoreForNode","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n  constructor($filter,\n              $http,\n              $injector,\n              $q,\n              $rootScope,\n              AnnotationService,\n              ConfigService,\n              ProjectService,\n              UtilService) {\n\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n\n    this.currentNode = null;\n    this.previousStep = null;\n    this.studentData = null;\n    this.stackHistory = [];  // array of node id's\n    this.visitedNodesHistory = [];\n    this.nodeStatuses = {};\n    this.runStatus = null;\n    this.maxScore = null;\n\n    this.maxPlanningNodeNumber = 0;\n\n    /*\n     * A counter to keep track of how many saveToServer requests we have\n     * made that we haven't received a response for yet. When this value\n     * goes back down to 0, we will send update the student status and then\n     * save it to the server.\n     */\n    this.saveToServerRequestCount = 0;\n\n    /*\n     * A dummy student work id that is used in preview mode when we simulate\n     * saving of student data.\n     */\n    this.dummyStudentWorkId = 1;\n\n    // listen for node status changes\n    this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\n      // calculate active global annotations and group them by group name as needed\n      this.AnnotationService.calculateActiveGlobalAnnotationGroups();\n\n      // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\n      let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\n      globalAnnotationGroups.map((globalAnnotationGroup) => {\n        let globalAnnotations = globalAnnotationGroup.annotations;\n        globalAnnotations.map((globalAnnotation) => {\n          if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\n            let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\n            let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\n            if (unGlobalizeCriteriaArray != null) {\n              if (unGlobalizeConditional === \"any\") {\n                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let anySatified = false;\n                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                  let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  anySatified = anySatified || unGlobalizeCriteriaResult;\n                }\n                if (anySatified) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              } else if (unGlobalizeConditional === \"all\") {\n                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let allSatisfied = true;\n                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                  let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\n                }\n                if (allSatisfied) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              }\n            }\n          }\n        });\n      })\n    });\n\n    /**\n     * Listen for the 'newAnnotationReceived' event which is fired when\n     * student receives a new annotation from the server\n     */\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n      if (args) {\n        // get the annotation that was saved to the server\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n  }\n\n  retrieveStudentData() {\n\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project\n\n      // initialize dummy student data\n      this.studentData = {};\n      this.studentData.componentStates = [];\n      this.studentData.nodeStates = [];\n      this.studentData.events = [];\n      this.studentData.annotations = [];\n      this.studentData.userName = this.$translate('PREVIEW_STUDENT');\n      this.studentData.userId = '0';\n\n      // set the annotations into the annotation service\n      this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n      // populate the student history\n      this.populateHistories(this.studentData.events);\n\n      // update the node statuses\n      this.updateNodeStatuses();\n    } else {\n      // we are in a run\n\n      // get the url to get the student data\n      var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n      var httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.url = studentDataURL;\n\n      // set the workgroup id and run id\n      var params = {};\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getEvents = true;\n      params.getAnnotations = true;\n      params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n      httpParams.params = params;\n\n      // make the request for the student data\n      return this.$http(httpParams).then((result) => {\n        var resultData = result.data;\n        if (resultData != null) {\n\n          this.studentData = {};\n\n          // get student work\n          this.studentData.componentStates = [];\n          this.studentData.nodeStates = [];\n          var studentWorkList = resultData.studentWorkList;\n          for (var s = 0; s < studentWorkList.length; s++) {\n            var studentWork = studentWorkList[s];\n            if (studentWork.componentId != null) {\n              this.studentData.componentStates.push(studentWork);\n            } else {\n              this.studentData.nodeStates.push(studentWork);\n            }\n          }\n\n          // Check to see if this Project contains any Planning activities\n          if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n            // Overload/add new nodes based on student's work in the NodeState for the planning group.\n            for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n              let planningGroupNode = this.ProjectService.project.nodes[p];\n              if (planningGroupNode.planning) {\n                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                if (lastestNodeStateForPlanningGroupNode != null) {\n                  let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                  if (studentModifiedNodes != null) {\n                    for (let s = 0; s < studentModifiedNodes.length; s++) {\n                      let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                      let studentModifiedNodeId = studentModifiedNode.id;\n                      if (studentModifiedNode.planning) {\n                        // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                        for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                          if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                            // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                            this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                          }\n                        }\n                      } else {\n                        // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                        this.ProjectService.project.nodes.push(studentModifiedNode);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            // Re-parse the project with the modified changes\n            this.ProjectService.parseProject();\n          }\n\n          // get events\n          this.studentData.events = resultData.events;\n\n          // get annotations\n          this.studentData.annotations = resultData.annotations;\n\n          this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n          // populate the student history\n          this.populateHistories(this.studentData.events);\n\n          // update the node statuses\n          this.updateNodeStatuses();\n        }\n\n        return this.studentData;\n      });\n    }\n  };\n\n  /**\n   * Retrieve the run status\n   */\n  retrieveRunStatus() {\n\n    if (this.ConfigService.isPreview()) {\n      // we are previewing the project\n      this.runStatus = {};\n    } else {\n      // we are in a run\n      var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n      var runId = this.ConfigService.getConfigParam('runId');\n\n      //create the params for the request\n      var params = {\n        runId:runId\n      };\n\n      var httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.url = runStatusURL;\n      httpParams.params = params;\n\n      // make the request for the run status\n      return this.$http(httpParams).then((result) => {\n        if (result != null) {\n          var data = result.data;\n          if (data != null) {\n            // remember the run status\n            this.runStatus = data;\n          }\n        }\n      });\n    }\n  }\n\n  getNodeStatuses() {\n    return this.nodeStatuses;\n  };\n\n  setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n    if (nodeId != null && nodeStatus != null) {\n      var nodeStatuses = this.nodeStatuses;\n\n      if (nodeStatuses != null) {\n        nodeStatuses[nodeId] = nodeStatus;\n      }\n    }\n  }\n\n  getNodeStatusByNodeId(nodeId) {\n    var nodeStatus = null;\n\n    var nodeStatuses = this.nodeStatuses;\n\n    if (nodeId != null && nodeStatuses != null) {\n      nodeStatus = nodeStatuses[nodeId];\n    }\n\n    return nodeStatus;\n  };\n\n  updateNodeStatuses() {\n    let nodes = this.ProjectService.getNodes();\n    let planningNodes = this.ProjectService.getPlanningNodes();\n    var groups = this.ProjectService.getGroups();\n\n    if (nodes != null) {\n      if (planningNodes != null) {\n        nodes = nodes.concat(planningNodes);\n      }\n\n      for (var n = 0; n < nodes.length; n++) {\n        var node = nodes[n];\n        if (!this.ProjectService.isGroupNode(node.id)) {\n          this.updateNodeStatusByNode(node);\n        }\n      }\n    }\n\n    var group;\n    if (groups != null) {\n      for (var g = 0; g < groups.length; g++) {\n        group = groups[g];\n        group.depth = this.ProjectService.getNodeDepth(group.id);\n      }\n\n      // sort by descending depth order (need to calculate completion for lowest level groups first)\n      groups.sort(function(a, b) {\n        return b.depth - a.depth;\n      });\n\n      for (var i = 0; i < groups.length; i++) {\n        group = groups[i];\n        this.updateNodeStatusByNode(group);\n      }\n    }\n\n    // update max score\n    this.maxScore = this.getMaxScore();\n\n    this.$rootScope.$broadcast('nodeStatusesChanged');\n  };\n\n  /**\n   * Update the node status for a node\n   * @param node the node to update\n   */\n  updateNodeStatusByNode(node) {\n\n    if (node != null) {\n      var nodeId = node.id;\n\n      var tempNodeStatus = {};\n      tempNodeStatus.nodeId = nodeId;\n      tempNodeStatus.isVisitable = true;\n      tempNodeStatus.isCompleted = true;\n\n      // get the constraints that affect this node\n      var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n      if (this.ConfigService.getConfigParam('constraints') == false) {\n        /*\n         * constraints have been disabled, most likely because we are\n         * in preview without constraints mode\n         */\n        constraintsForNode = null;\n      }\n\n      if (constraintsForNode == null || constraintsForNode.length == 0) {\n        if (this.ProjectService.getFlattenedProjectAsNodeIds().indexOf(nodeId) == -1 &&\n          !this.ProjectService.isGroupNode(nodeId)) {\n          // there are no transitions to this node so it is not visible\n          tempNodeStatus.isVisible = false;\n          tempNodeStatus.isVisitable = true;\n        } else {\n          // this node does not have any constraints so it is clickable\n          tempNodeStatus.isVisible = true;\n          tempNodeStatus.isVisitable = true;\n        }\n      } else {\n        var isVisibleResults = [];\n        var isVisitableResults = [];\n\n        var result = false;\n        var firstResult = true;\n\n        // loop through all the constraints that affect this node\n        for (var c = 0; c < constraintsForNode.length; c++) {\n          var constraintForNode = constraintsForNode[c];\n\n          if (constraintForNode != null) {\n\n            // evaluate the constraint to see if the node can be visited\n            var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n            var action = constraintForNode.action;\n\n            if (action != null) {\n              if (action === 'makeThisNodeNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeThisNodeNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisitable') {\n                isVisitableResults.push(tempResult);\n              }\n            }\n          }\n        }\n\n        var isVisible = true;\n        var isVisitable = true;\n\n        for (var a = 0; a < isVisibleResults.length; a++) {\n          var isVisibleResult = isVisibleResults[a];\n\n          isVisible = isVisible && isVisibleResult;\n        }\n\n        for (var b = 0; b < isVisitableResults.length; b++) {\n          var isVisitableResult = isVisitableResults[b];\n\n          isVisitable = isVisitable && isVisitableResult;\n        }\n\n        tempNodeStatus.isVisible = isVisible;\n        tempNodeStatus.isVisitable = isVisitable;\n      }\n\n      tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n      tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n      var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n      if (nodeStatus == null) {\n        this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n      } else {\n\n        /*\n         * get the previous isCompleted value so that we can later check\n         * if it has changed\n         */\n        var previousIsCompletedValue = this.nodeStatuses[nodeId].isCompleted;\n\n        this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n        this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n        this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n        this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n\n        if (previousIsCompletedValue == false && tempNodeStatus.isCompleted) {\n          /*\n           * the node status just changed from false to true so we\n           * will fire an event\n           */\n\n          this.$rootScope.$broadcast('nodeCompleted', { nodeId: nodeId });\n        }\n      }\n\n      this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n      this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n      // get the latest component state for the node\n      var latestComponentStatesForNode = this.getLatestComponentStateByNodeId(nodeId);\n\n      if (latestComponentStatesForNode != null) {\n        // set the latest component state timestamp into the node status\n        this.nodeStatuses[nodeId].latestComponentStateClientSaveTime = latestComponentStatesForNode.clientSaveTime;\n        this.nodeStatuses[nodeId].latestComponentStateServerSaveTime = latestComponentStatesForNode.serverSaveTime;\n      }\n    }\n\n    //return nodeStatus;\n  };\n\n  /**\n   * Evaluate the constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node has satisfied the constraint\n   */\n  evaluateConstraint(node, constraintForNode) {\n    var result = false;\n\n    if (constraintForNode != null) {\n\n      var removalCriteria = constraintForNode.removalCriteria;\n\n      if (removalCriteria != null) {\n        result = this.evaluateNodeConstraint(node, constraintForNode);\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Evaluate the guided navigation constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node can be visited or not\n   */\n  evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n    var result = false;\n\n    if (node != null) {\n      var nodeId = node.id;\n\n      if (this.isNodeVisited(nodeId)) {\n        // the node has been visited before so it should be clickable\n        result = true;\n      } else {\n\n        // get all the nodes that have been visited\n        var visitedNodes = this.getVisitedNodesHistory();\n\n        var transitionsToNodeId = [];\n\n        // loop through all the ndoes that have been visited\n        for (var v = 0; v < visitedNodes.length; v++) {\n          var visitedNodeId = visitedNodes[v];\n\n          // get the transitions from the visited node to the node status node\n          var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n          // TODO: check if the transition can be used by the student\n\n          // concat the node ids\n          transitionsToNodeId = transitionsToNodeId.concat(transitions);\n        }\n\n        if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n          // there is a transition between the current node and the node status node\n\n          /*\n           * there are transitions from the current node to the node status node so\n           * the node status node is clickable\n           */\n          result = true;\n        } else {\n          /*\n           * there is no transition between the visited nodes and the node status node\n           * so we will set the node to be not clickable\n           */\n          result = false;\n        }\n\n        if (this.ProjectService.isStartNode(node)) {\n          /*\n           * the node is the start node of the project or a start node of a group\n           * so we will make it clickable\n           */\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Evaluate the node constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node satisifies the constraint\n   */\n  evaluateNodeConstraint(node, constraintForNode) {\n    var result = false;\n\n    if (constraintForNode != null) {\n      var removalCriteria = constraintForNode.removalCriteria;\n      var removalConditional = constraintForNode.removalConditional;\n\n      if (removalCriteria == null) {\n        result = true;\n      } else {\n        var firstResult = true;\n\n        // loop through all the criteria that need to be satisifed\n        for (var c = 0; c < removalCriteria.length; c++) {\n\n          // get a criteria\n          var tempCriteria = removalCriteria[c];\n\n          if (tempCriteria != null) {\n\n            // evaluate the criteria\n            var tempResult = this.evaluateCriteria(tempCriteria);\n\n            if (firstResult) {\n              // this is the first criteria in this for loop\n              result = tempResult;\n              firstResult = false;\n            } else {\n              // this is not the first criteria\n\n              if (removalConditional === 'any') {\n                // any of the criteria can be true to remove the constraint\n                result = result || tempResult;\n              } else {\n                // all the criteria need to be true to remove the constraint\n                result = result && tempResult;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n\n  /**\n   * Evaluate the criteria\n   * @param criteria the criteria\n   * @returns whether the criteria is satisfied or not\n   */\n  evaluateCriteria(criteria) {\n\n    var result = false;\n\n    if (criteria != null) {\n\n      var functionName = criteria.name;\n\n      if (functionName == null) {\n\n      } else if (functionName === 'branchPathTaken') {\n        result = this.evaluateBranchPathTakenCriteria(criteria);\n      } else if (functionName === 'isVisible') {\n\n      } else if (functionName === 'isVisitable') {\n\n      } else if (functionName === 'isVisited') {\n        result = this.evaluateIsVisitedCriteria(criteria);\n      } else if (functionName === 'isVisitedAfter') {\n        result = this.evaluateIsVisitedAfterCriteria(criteria);\n      } else if (functionName === 'isRevisedAfter') {\n        result = this.evaluateIsRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isVisitedAndRevisedAfter') {\n        result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isCompleted') {\n        result = this.evaluateIsCompletedCriteria(criteria);\n      } else if (functionName === 'isCorrect') {\n        result = this.evaluateIsCorrectCriteria(criteria);\n      } else if (functionName === 'choiceChosen') {\n        result = this.evaluateChoiceChosenCriteria(criteria);\n      } else if (functionName === 'isPlanningActivityCompleted') {\n        result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n      } else if (functionName === 'score') {\n        result = this.evaluateScoreCriteria(criteria);\n      } else if (functionName === 'usedXSubmits') {\n        result = this.evaluateUsedXSubmitsCriteria(criteria);\n      } else if (functionName === '') {\n\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if the isCompleted criteria was satisfied\n   * @param criteria an isCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCompletedCriteria(criteria) {\n    var result = false;\n\n    if (criteria != null && criteria.params != null) {\n      var params = criteria.params;\n      var nodeId = params.nodeId;\n\n      result = this.isCompleted(nodeId);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the isCorrect criteria was satisfied\n   * @param criteria an isCorrect criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCorrectCriteria(criteria) {\n\n    if (criteria != null && criteria.params != null) {\n\n      // get the criteria params\n      var params = criteria.params;\n      var nodeId = params.nodeId;\n      var componentId = params.componentId;\n\n      if (nodeId != null && componentId != null) {\n\n        // get the component states for the component\n        var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n        if (componentStates != null) {\n\n          // loop through all the component states\n          for (var c = 0; c < componentStates.length; c++) {\n\n            var componentState = componentStates[c];\n\n            if (componentState != null) {\n\n              var studentData = componentState.studentData;\n\n              if (studentData != null) {\n                if (studentData.isCorrect) {\n                  // the student answered correctly\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if the isPlanningActivityCompleted criteria was satisfied\n   * @param criteria a isPlanningActivityCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsPlanningActivityCompletedCriteria(criteria) {\n    var result = false;\n\n    if (criteria != null && criteria.params != null) {\n\n      var params = criteria.params;\n\n      // get the group id\n      var nodeId = params.nodeId;\n\n      // get the number of planning steps the student needs to create\n      var planningStepsCreated = params.planningStepsCreated;\n\n      // get whether the student needs to complete all the steps in the activity\n      var planningStepsCompleted = params.planningStepsCompleted;\n\n      var planningStepsCreatedSatisfied = false;\n      var planningStepsCompletedSatisfied = false;\n\n      var planningNodes = [];\n\n      if (planningStepsCreated == null) {\n        // there is no value set so we will regard it as satisfied\n        planningStepsCreatedSatisfied = true;\n      } else {\n        /*\n         * there is a value for number of planning steps that need to be created\n         * so we will check if the student created enough planning steps\n         */\n\n        // get the node states for the activity\n        var nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n        if (nodeStates != null) {\n\n          /*\n           * loop through all the node states from newest to oldest\n           * for the sake of efficiency\n           */\n          for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n\n            var planningStepCount = 0;\n\n            var nodeState = nodeStates[ns];\n\n            if (nodeState != null) {\n\n              // get the student data\n              var studentData = nodeState.studentData;\n\n              if (studentData != null) {\n\n                // get the nodes\n                var nodes = studentData.nodes;\n\n                if (nodes != null) {\n\n                  // loop through the nodes\n                  for (var n = 0; n < nodes.length; n++) {\n                    var node = nodes[n];\n\n                    if (node != null) {\n                      if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                        // we have found a planning step the student created\n                        planningStepCount++;\n                      }\n                    }\n                  }\n\n                  if (planningStepCount >= planningStepsCreated) {\n                    // the student has created a sufficient number of planning steps\n                    planningStepsCreatedSatisfied = true;\n                    planningNodes = nodes;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (planningStepsCompleted == null) {\n        planningStepsCompletedSatisfied = true;\n      } else {\n        /*\n         * check if the activity is completed. this checks if all\n         * the children of the activity are completed.\n         */\n        if (this.isCompleted(nodeId)) {\n          planningStepsCompletedSatisfied = true;\n        }\n      }\n\n      if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if this branchPathTaken criteria was satisfied\n   * @param criteria a branchPathTaken criteria\n   * @returns whether the branchPathTaken criteria was satisfied\n   */\n  evaluateBranchPathTakenCriteria(criteria) {\n    var result = false;\n\n    if (criteria != null && criteria.params != null) {\n      // get the expected from and to node ids\n      var expectedFromNodeId = criteria.params.fromNodeId;\n      var expectedToNodeId = criteria.params.toNodeId;\n\n      // get all the branchPathTaken events from the from node id\n      var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n      if (branchPathTakenEvents != null) {\n\n        // loop through all the branchPathTaken events\n        for (var b = 0; b < branchPathTakenEvents.length; b++) {\n          var branchPathTakenEvent = branchPathTakenEvents[b];\n\n          if (branchPathTakenEvent != null) {\n            var data = branchPathTakenEvent.data;\n\n            if (data != null) {\n              // get the from and to node ids of the event\n              var fromNodeId = data.fromNodeId;\n              var toNodeId = data.toNodeId;\n\n              if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                // the from and to node ids match the ones we are looking for\n                result = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Check if the isVisited criteria was satisfied\n   * @param criteria the isVisited criteria\n   * @returns whether the node id is visited\n   */\n  evaluateIsVisitedCriteria(criteria) {\n\n    var isVisited = false;\n\n    if (criteria != null && criteria.params != null) {\n\n      // get the node id we want to check if was visited\n      var nodeId = criteria.params.nodeId;\n\n      // get all the events\n      var events = this.studentData.events;\n\n      if (events != null) {\n\n        // loop through all the events\n        for (var e = 0; e < events.length; e++) {\n          var event = events[e];\n\n          if (event != null) {\n            if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n              // the student has entered the node before\n              isVisited = true;\n            }\n          }\n        }\n      }\n    }\n\n    return isVisited;\n  }\n\n  /**\n   * Check if the isVisitedAfter criteria was satisfied\n   * @param criteria the isVisitedAfter criteria\n   * @returns whether the node id is visited after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAfterCriteria(criteria) {\n\n    let isVisitedAfter = false;\n\n    if (criteria != null && criteria.params != null) {\n\n      // get the node id we want to check if was visited\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      // get all the events\n      let events = this.studentData.events;\n\n      if (events != null) {\n\n        // loop through all the events\n        for (let e = 0; e < events.length; e++) {\n          let event = events[e];\n\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n              // the student has entered the node after the criteriaCreatedTimestamp\n              isVisitedAfter = true;\n            }\n          }\n        }\n      }\n    }\n\n    return isVisitedAfter;\n  }\n\n  /**\n   * Check if the isRevisedAfter criteria was satisfied\n   * @param criteria the isRevisedAfter criteria\n   * @returns whether the specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsRevisedAfterCriteria(criteria) {\n\n    let isRevisedAfter = false;\n\n    if (criteria != null && criteria.params != null) {\n\n      // get the node id we want to check if was visited\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      // the student has entered the node after the criteriaCreatedTimestamp.\n      // now check if student has revised the work after this event\n      let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n      if (latestComponentStateForRevisedComponent.clientSaveTime > criteriaCreatedTimestamp) {\n        isRevisedAfter = true;\n      }\n    }\n\n    return isRevisedAfter;\n  }\n\n  /**\n   * Check if the isVisitedAndRevisedAfter criteria was satisfied\n   * @param criteria the isVisitedAndRevisedAfter criteria\n   * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\n\n    let isVisitedAndRevisedAfter = false;\n\n    if (criteria != null && criteria.params != null) {\n\n      // get the node id we want to check if was visited\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      // get all the events\n      let events = this.studentData.events;\n\n      if (events != null) {\n\n        // loop through all the events\n        for (let e = 0; e < events.length; e++) {\n          let event = events[e];\n\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n              // the student has entered the node after the criteriaCreatedTimestamp.\n              // now check if student has revised the work after this event\n              let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n              if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\n                isVisitedAndRevisedAfter = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return isVisitedAndRevisedAfter;\n  }\n\n  /**\n   * Get all the branchPathTaken events by node id\n   * @params fromNodeId the from node id\n   * @returns all the branchPathTaken events from the given node id\n   */\n  getBranchPathTakenEventsByNodeId(fromNodeId) {\n\n    var branchPathTakenEvents = [];\n    var events = this.studentData.events;\n\n    if (events != null) {\n\n      // loop through all the events\n      for (var e = 0; e < events.length; e++) {\n        var event = events[e];\n\n        if (event != null) {\n          if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n            // we have found a branchPathTaken event from the from node id\n            branchPathTakenEvents.push(event);\n          }\n        }\n      }\n    }\n\n    return branchPathTakenEvents;\n  }\n\n  /**\n   * Evaluate the choice chosen criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateChoiceChosenCriteria(criteria) {\n\n    var result = false;\n\n    var serviceName = 'MultipleChoiceService';  // Assume MC component.\n\n    if (this.$injector.has(serviceName)) {\n\n      // get the MultipleChoiceService\n      var service = this.$injector.get(serviceName);\n\n      // check if the criteria was satisfied\n      result = service.choiceChosen(criteria);\n    }\n\n    return result;\n  };\n\n  /**\n   * Evaluate the score criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateScoreCriteria(criteria) {\n\n    var result = false;\n\n    var params = criteria.params;\n\n    if (params != null) {\n\n      var nodeId = params.nodeId;\n      var componentId = params.componentId;\n      var scores = params.scores;\n      var workgroupId = this.ConfigService.getWorkgroupId();\n      var scoreType = 'any';\n\n      if (nodeId != null && componentId != null && scores != null) {\n\n        // get the latest score annotation\n        var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n        if (latestScoreAnnotation != null) {\n\n          // get the score value\n          var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n          // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\n          if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\n            /*\n             * the student has received a score that matches a score\n             * we're looking for\n             */\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Evaluate the used x submits criteria which requires the student to submit\n   * at least x number of times.\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the student submitted at least x number\n   * of times\n   */\n  evaluateUsedXSubmitsCriteria(criteria) {\n    var result = false;\n\n    var params = criteria.params;\n\n    if (params != null) {\n\n      // get the node id and component id to check the submit counter for\n      var nodeId = params.nodeId;\n      var componentId = params.componentId;\n\n      // get the number of submits required\n      var requiredSubmitCount = params.requiredSubmitCount;\n\n      if (nodeId != null && componentId != null) {\n\n        // get the component states for the component\n        var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n        if (componentStates != null) {\n\n          // counter for manually counting the component states with isSubmit=true\n          var manualSubmitCounter = 0;\n\n          // counter for remembering the highest submitCounter value found in studentData objects\n          var highestSubmitCounter = 0;\n\n          /*\n           * We are counting with two submit counters for backwards compatibility.\n           * Some componentStates only have isSubmit=true and do not keep an\n           * updated submitCounter for the number of submits.\n           */\n\n          // loop through all the component states\n          for (var c = 0; c < componentStates.length; c++) {\n\n            var componentState = componentStates[c];\n\n            if (componentState != null) {\n\n              if (componentState.isSubmit) {\n                // this is a submit component state\n                manualSubmitCounter++;\n              }\n\n              var studentData = componentState.studentData;\n\n              if (studentData != null) {\n\n                if (studentData.submitCounter != null) {\n                  if (studentData.submitCounter > highestSubmitCounter) {\n                    /*\n                     * the submit counter in the student data is higher\n                     * than we have previously seen\n                     */\n                    highestSubmitCounter = studentData.submitCounter;\n                  }\n                }\n              }\n            }\n          }\n\n          if (manualSubmitCounter >= requiredSubmitCount || highestSubmitCounter >= requiredSubmitCount) {\n            // the student submitted the required number of times\n            result = true;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Populate the stack history and visited nodes history\n   * @param events the events\n   */\n  populateHistories(events) {\n    this.stackHistory = [];\n    this.visitedNodesHistory = [];\n\n    if (events != null) {\n\n      // loop through all the events\n      for (var e = 0; e < events.length; e++) {\n        var event = events[e];\n\n        if (event != null) {\n\n          // look for the nodeEntered event\n          if (event.event === 'nodeEntered') {\n\n            // the student has visited this node id before\n            this.updateStackHistory(event.nodeId);\n            this.updateVisitedNodesHistory(event.nodeId);\n          }\n        }\n      }\n    }\n  };\n\n  getStackHistoryAtIndex(index) {\n    if (index < 0) {\n      index = this.stackHistory.length + index;\n    }\n    var stackHistoryResult = null;\n    if (this.stackHistory != null && this.stackHistory.length > 0) {\n      stackHistoryResult = this.stackHistory[index];\n    }\n    return stackHistoryResult;\n  };\n\n  getStackHistory() {\n    return this.stackHistory;\n  };\n\n  updateStackHistory(nodeId) {\n    var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.stackHistory.push(nodeId);\n    } else {\n      this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n    }\n  };\n\n  updateVisitedNodesHistory(nodeId) {\n    var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.visitedNodesHistory.push(nodeId);\n    }\n  };\n\n  getVisitedNodesHistory() {\n    return this.visitedNodesHistory;\n  };\n\n  isNodeVisited(nodeId) {\n    var result = false;\n    var visitedNodesHistory = this.visitedNodesHistory;\n\n    if (visitedNodesHistory != null) {\n      var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n      if (indexOfNodeId !== -1) {\n        result = true;\n      }\n    }\n\n    return result;\n  };\n\n  createComponentState() {\n    var componentState = {};\n\n    componentState.timestamp = Date.parse(new Date());\n\n    return componentState;\n  };\n\n  addComponentState(componentState) {\n    if (this.studentData != null && this.studentData.componentStates != null) {\n      this.studentData.componentStates.push(componentState);\n    }\n  };\n\n  addNodeState(nodeState) {\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      this.studentData.nodeStates.push(nodeState);\n    }\n  };\n\n  /**\n   * Returns all NodeStates\n   * @returns Array of all NodeStates\n   */\n  getNodeStates() {\n    let nodeStates = [];\n\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      nodeStates = this.studentData.nodeStates;\n    }\n\n    return nodeStates;\n  };\n\n  /**\n   * Get all NodeStates for a specific node\n   * @param nodeId id of node\n   * @returns Array of NodeStates for the specified node\n   */\n  getNodeStatesByNodeId(nodeId) {\n    var nodeStatesByNodeId = [];\n\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      var nodeStates = this.studentData.nodeStates;\n\n      for (var n = 0; n < nodeStates.length; n++) {\n        var nodeState = nodeStates[n];\n\n        if (nodeState != null) {\n          var tempNodeId = nodeState.nodeId;\n\n          if (nodeId === tempNodeId) {\n            nodeStatesByNodeId.push(nodeState);\n          }\n        }\n      }\n    }\n\n    return nodeStatesByNodeId;\n  };\n\n  addEvent(event) {\n    if (this.studentData != null && this.studentData.events != null) {\n      this.studentData.events.push(event);\n    }\n  };\n\n  addAnnotation(annotation) {\n    if (this.studentData != null && this.studentData.annotations != null) {\n      this.studentData.annotations.push(annotation);\n    }\n  };\n\n  handleAnnotationReceived(annotation) {\n    // add the annotation to the local annotations array\n    this.studentData.annotations.push(annotation);\n\n    if (annotation.notebookItemId) {\n      // broadcast the event that a new notebook item annotation has been received\n      this.$rootScope.$broadcast('notebookItemAnnotationReceived', {annotation: annotation});\n    } else {\n      // broadcast the event that a new annotation has been received\n      this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n    }\n  }\n\n  saveComponentEvent(component, category, event, data) {\n    if (component == null || category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_COMPONENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    var context = \"Component\";\n    var nodeId = component.nodeId;\n    var componentId = component.componentId;\n    var componentType = component.componentType;\n    if (nodeId == null || componentId == null || componentType == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_NODE_ID_COMPONENT_ID_COMPONENT_TYPE_ERROR'));\n      return;\n    }\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n    if (category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_VLE_EVENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    var context = \"VLE\";\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n    var events = [];\n    var newEvent = this.createNewEvent();\n    newEvent.context = context;\n    newEvent.nodeId = nodeId;\n    newEvent.componentId = componentId;\n    newEvent.type = componentType;\n    newEvent.category = category;\n    newEvent.event = event;\n    newEvent.data = data;\n    events.push(newEvent);\n    var componentStates = null;\n    var nodeStates = null;\n    var annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  /**\n   * Create a new empty event\n   * @return a new empty event\n   */\n  createNewEvent() {\n    var event = {};\n\n    event.projectId = this.ConfigService.getProjectId();\n    event.runId = this.ConfigService.getRunId();\n    event.periodId = this.ConfigService.getPeriodId();\n    event.workgroupId = this.ConfigService.getWorkgroupId();\n    event.clientSaveTime = Date.parse(new Date());\n\n    return event;\n  };\n\n  saveNodeStates(nodeStates) {\n    var componentStates = null;\n    var events = null;\n    var annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n\n  saveAnnotations(annotations) {\n    var componentStates = null;\n    var nodeStates = null;\n    var events = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  saveToServer(componentStates, nodeStates, events, annotations) {\n    /*\n     * increment the request count since we are about to save data\n     * to the server\n     */\n    this.saveToServerRequestCount += 1;\n\n    // merge componentStates and nodeStates into StudentWork before posting\n    var studentWorkList = [];\n    if (componentStates != null && componentStates.length > 0) {\n      for (var c = 0; c < componentStates.length; c++) {\n        var componentState = componentStates[c];\n\n        if (componentState != null) {\n          componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addComponentState(componentState);\n          studentWorkList.push(componentState);\n        }\n      }\n    }\n\n    if (nodeStates != null && nodeStates.length > 0) {\n      for (var n = 0; n < nodeStates.length; n++) {\n        var nodeState = nodeStates[n];\n\n        if (nodeState != null) {\n          nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addNodeState(nodeState);\n          studentWorkList.push(nodeState);\n        }\n      }\n    }\n\n    if (events != null && events.length > 0) {\n      for (var e = 0; e < events.length; e++) {\n        var event = events[e];\n\n        if (event != null) {\n          event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n          this.addEvent(event);\n        }\n      }\n    } else {\n      events = [];\n    }\n\n    if (annotations != null && annotations.length > 0) {\n      for (var a = 0; a < annotations.length; a++) {\n        var annotation = annotations[a];\n\n        if (annotation != null) {\n          annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n          if (annotation.id == null) {\n            // add to local annotation array if this annotation has not been saved to the server before.\n            this.addAnnotation(annotation);\n          }\n        }\n      }\n    } else {\n      annotations = [];\n    }\n\n    if (this.ConfigService.isPreview()) {\n      var savedStudentDataResponse = {\n        studentWorkList: studentWorkList,\n        events: events,\n        annotations: annotations\n      };\n\n      // if we're in preview, don't make any request to the server but pretend we did\n      this.saveToServerSuccess(savedStudentDataResponse);\n      let deferred = this.$q.defer();\n      deferred.resolve(savedStudentDataResponse);\n      return deferred.promise;\n    } else {\n      // set the workgroup id and run id\n      var params = {};\n      params.projectId = this.ConfigService.getProjectId();\n      params.runId = this.ConfigService.getRunId();\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.studentWorkList = angular.toJson(studentWorkList);\n      params.events = angular.toJson(events);\n      params.annotations = angular.toJson(annotations);\n\n      // get the url to POST the student data\n      var httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.data = $.param(params);\n\n      // make the request to post the student data\n      return this.$http(httpParams).then(\n        result => {\n          // get the local references to the component states that were posted and set their id and serverSaveTime\n          if (result != null && result.data != null) {\n            var savedStudentDataResponse = result.data;\n\n            this.saveToServerSuccess(savedStudentDataResponse);\n\n            return savedStudentDataResponse;\n          }\n        }, result => {\n          // a server error occured\n\n          /*\n           * decrement the request count since this request failed\n           * but is now completed\n           */\n          this.saveToServerRequestCount -= 1;\n\n          return null;\n        }\n      );\n    }\n  };\n\n  saveToServerSuccess(savedStudentDataResponse) {\n\n    /*\n     * decrement the request count since we have received a response to\n     * one of our save requests\n     */\n    this.saveToServerRequestCount -= 1;\n\n    if (this.saveToServerRequestCount == 0) {\n      /*\n       * we have received the reponse to all of the saveToServer requests\n       * so we will now update the student status and save it to the\n       * server\n       */\n      this.updateNodeStatuses();\n      this.saveStudentStatus();\n    }\n\n    // set dummy serverSaveTime for use if we're in preview mode\n    let serverSaveTime = Date.parse(new Date());\n\n    // handle saved studentWork\n    if (savedStudentDataResponse.studentWorkList) {\n      let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n      let localStudentWorkList = this.studentData.componentStates;\n      if (this.studentData.nodeStates) {\n        localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n      }\n\n      // set the id and serverSaveTime in the local studentWorkList\n      for (var i = 0; i < savedStudentWorkList.length; i++) {\n        var savedStudentWork = savedStudentWorkList[i];\n\n        /*\n         * loop through all the student work that were posted\n         * to find the one with the matching request token\n         */\n        for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n          var localStudentWork = localStudentWorkList[l];\n          if (localStudentWork.requestToken &&\n            localStudentWork.requestToken === savedStudentWork.requestToken) {\n            localStudentWork.id = savedStudentWork.id;\n            localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n            localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n            if (this.ConfigService.getMode() == \"preview\" && localStudentWork.id == null) {\n              /*\n               * we are in preview mode so we will set a dummy\n               * student work id into the student work\n               */\n              localStudentWork.id = this.dummyStudentWorkId;\n\n              /*\n               * increment the dummy student work id for the next\n               * student work\n               */\n              this.dummyStudentWorkId++;\n            }\n\n            this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n            break;\n          }\n        }\n      }\n    }\n    // handle saved events\n    if (savedStudentDataResponse.events) {\n      var savedEvents = savedStudentDataResponse.events;\n\n      var localEvents = this.studentData.events;\n\n      // set the id and serverSaveTime in the local event\n      for (var i = 0; i < savedEvents.length; i++) {\n        var savedEvent = savedEvents[i];\n\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (var l = localEvents.length - 1; l >= 0; l--) {\n          var localEvent = localEvents[l];\n          if (localEvent.requestToken &&\n            localEvent.requestToken === savedEvent.requestToken) {\n            localEvent.id = savedEvent.id;\n            localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n            localEvent.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n            break;\n          }\n        }\n      }\n    }\n\n    // handle saved annotations\n    if (savedStudentDataResponse.annotations) {\n      var savedAnnotations = savedStudentDataResponse.annotations;\n\n      var localAnnotations = this.studentData.annotations;\n\n      // set the id and serverSaveTime in the local annotation\n      for (var i = 0; i < savedAnnotations.length; i++) {\n        var savedAnnotation = savedAnnotations[i];\n\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (var l = localAnnotations.length - 1; l >= 0; l--) {\n          var localAnnotation = localAnnotations[l];\n          if (localAnnotation.requestToken &&\n            localAnnotation.requestToken === savedAnnotation.requestToken) {\n            localAnnotation.id = savedAnnotation.id;\n            localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n            localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * POSTs student status to server\n   * Returns a promise of the POST request\n   */\n  saveStudentStatus() {\n    if (!this.ConfigService.isPreview()) {\n      // we are in a run\n      var studentStatusURL = this.ConfigService.getStudentStatusURL();\n      if (studentStatusURL != null) {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var workgroupId = this.ConfigService.getWorkgroupId();\n\n        // get the current node id\n        var currentNodeId = this.getCurrentNodeId();\n\n        // get the node statuses\n        var nodeStatuses = this.getNodeStatuses();\n\n        // get the project completion percentage\n        var projectCompletion = this.getProjectCompletion();\n\n        // create the JSON that will be saved to the database\n        var studentStatusJSON = {};\n        studentStatusJSON.runId = runId;\n        studentStatusJSON.periodId = periodId;\n        studentStatusJSON.workgroupId = workgroupId;\n        studentStatusJSON.currentNodeId = currentNodeId;\n        studentStatusJSON.nodeStatuses = nodeStatuses;\n        studentStatusJSON.projectCompletion = projectCompletion;\n\n        // get the student status as a string\n        var status = angular.toJson(studentStatusJSON);\n\n        /*\n         * create the params for the message that will be sent\n         * to the StudentStatusController and saved in the\n         * database\n         */\n        var studentStatusParams = {};\n        studentStatusParams.runId = runId;\n        studentStatusParams.periodId = periodId;\n        studentStatusParams.workgroupId = workgroupId;\n        studentStatusParams.status = status;\n\n        // get the url to POST the student data\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = studentStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(studentStatusParams);\n\n        // make the request to post the student status\n        return this.$http(httpParams).then(\n          result => {\n            return true;\n          }, result => {\n            // a server error occured\n            return false;\n          }\n        );\n      }\n    }\n  };\n\n  retrieveComponentStates(runId, periodId, workgroupId) {\n\n  };\n\n  getLatestComponentState() {\n    var latestComponentState = null;\n\n    var studentData = this.studentData;\n\n    if (studentData != null) {\n      var componentStates = studentData.componentStates;\n\n      if (componentStates != null) {\n        latestComponentState = componentStates[componentStates.length - 1];\n      }\n    }\n\n    return latestComponentState;\n  };\n\n  /**\n   * Check whether the component has unsubmitted work\n   * @return boolean whether or not there is unsubmitted work\n   */\n  isComponentSubmitDirty() {\n    let submitDirty = false;\n\n    let latestComponentState = this.getLatestComponentState();\n    if (latestComponentState && !latestComponentState.isSubmit) {\n      submitDirty = true;\n    }\n\n    return submitDirty;\n  };\n\n  /**\n   * Get the latest NodeState for the specified node id\n   * @param nodeId the node id\n   * @return the latest node state with the matching node id or null if none are found\n   */\n  getLatestNodeStateByNodeId(nodeId) {\n    let latestNodeState = null;\n    let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n    if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n      latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n    }\n    return latestNodeState;\n  };\n\n  /**\n   * Get the latest component state for the given node id and component\n   * id.\n   * @param nodeId the node id\n   * @param componentId the component id (optional)\n   * @return the latest component state with the matching node id and\n   * component id or null if none are found\n   */\n  getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n    var latestComponentState = null;\n\n    if (nodeId) {\n      var studentData = this.studentData;\n\n      if (studentData) {\n        // get the component states\n        var componentStates = studentData.componentStates;\n\n        if (componentStates) {\n          // loop through all the component states from newest to oldest\n          for (var c = componentStates.length - 1; c >= 0; c--) {\n            var componentState = componentStates[c];\n\n            if (componentState) {\n              var componentStateNodeId = componentState.nodeId;\n\n              // compare the node id and component id\n              if (nodeId === componentStateNodeId) {\n                if (componentId) {\n                  var componentStateComponentId = componentState.componentId;\n                  if (componentId === componentStateComponentId) {\n                    latestComponentState = componentState;\n                    break;\n                  }\n                } else {\n                  latestComponentState = componentState;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return latestComponentState;\n  };\n\n  /**\n   * Get the student work by specified student work id, which can be a ComponentState or NodeState\n   * @param studentWorkId the student work id\n   * @return an StudentWork or null\n   */\n  getStudentWorkByStudentWorkId(studentWorkId) {\n    if (studentWorkId != null) {\n      // get the component states\n      var componentStates = this.studentData.componentStates;\n\n      if (componentStates != null) {\n\n        // loop through all the component states\n        for (var c = 0; c < componentStates.length; c++) {\n          var componentState = componentStates[c];\n\n          if (componentState != null && componentState.id === studentWorkId) {\n            return componentState;\n          }\n        }\n      }\n\n      // get the node states\n      var nodeStates = this.studentData.nodeStates;\n\n      if (nodeStates != null) {\n\n        // loop through all the node states\n        for (var n = 0; n < nodeStates.length; n++) {\n          var nodeState = nodeStates[n];\n          if (nodeState != null && nodeState.id === studentWorkId) {\n            return nodeState;\n          }\n        }\n      }\n\n    }\n    return null;\n  };\n\n  /**\n   * Returns all the component states for this workgroup\n   */\n  getComponentStates() {\n    return this.studentData.componentStates;\n  };\n\n  /**\n   * Get the component states for the given node id\n   * @param nodeId the node id\n   * @return an array of component states for the given node id\n   */\n  getComponentStatesByNodeId(nodeId) {\n    var componentStatesByNodeId = [];\n\n    if (nodeId != null) {\n      var studentData = this.studentData;\n\n      if (studentData != null) {\n\n        // get the component states\n        var componentStates = studentData.componentStates;\n\n        if (componentStates != null) {\n\n          // loop through all the component states\n          for (var c = 0; c < componentStates.length; c++) {\n            var componentState = componentStates[c];\n\n            if (componentState != null) {\n              var componentStateNodeId = componentState.nodeId;\n\n              // compare the node id\n              if (nodeId == componentStateNodeId) {\n\n                componentStatesByNodeId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return componentStatesByNodeId;\n  };\n\n  /**\n   * Get the component states for the given node id and component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return an array of component states for the given node id and\n   * component id\n   */\n  getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n    var componentStatesByNodeIdAndComponentId = [];\n\n    if (nodeId != null && componentId != null) {\n      var studentData = this.studentData;\n\n      if (studentData != null) {\n\n        // get the component states\n        var componentStates = studentData.componentStates;\n\n        if (componentStates != null) {\n\n          // loop through all the component states\n          for (var c = 0; c < componentStates.length; c++) {\n            var componentState = componentStates[c];\n\n            if (componentState != null) {\n              var componentStateNodeId = componentState.nodeId;\n              var componentStateComponentId = componentState.componentId;\n\n              // compare the node id and component id\n              if (nodeId == componentStateNodeId &&\n                componentId == componentStateComponentId) {\n\n                componentStatesByNodeIdAndComponentId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return componentStatesByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all events\n   * @returns all events for the student\n   */\n  getEvents() {\n    if (this.studentData != null && this.studentData.events != null) {\n      return this.studentData.events;\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Get the events for a node id\n   * @param nodeId the node id\n   * @returns the events for the node id\n   */\n  getEventsByNodeId(nodeId) {\n    var eventsByNodeId = [];\n\n    if (nodeId != null) {\n\n      if (this.studentData != null && this.studentData.events != null) {\n\n        // get all the events\n        var events = this.studentData.events;\n\n        // loop through all the events\n        for (var e = 0; e < events.length; e++) {\n          var event = events[e];\n\n          if (event != null) {\n            var eventNodeId = event.nodeId;\n\n            if (nodeId === eventNodeId) {\n              // this event is for the node id we are looking for\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n\n    return eventsByNodeId;\n  };\n\n\n  /**\n   * Get the events for a component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns an array of events for the component id\n   */\n  getEventsByNodeIdAndComponentId(nodeId, componentId) {\n    var eventsByNodeId = [];\n\n    if (nodeId != null) {\n\n      if (this.studentData != null && this.studentData.events != null) {\n\n        // get all the events\n        var events = this.studentData.events;\n\n        // loop through all the events\n        for (var e = 0; e < events.length; e++) {\n          var event = events[e];\n\n          if (event != null) {\n            var eventNodeId = event.nodeId;\n            var eventComponentId = event.componentId;\n\n            if (nodeId === eventNodeId && componentId === eventComponentId) {\n              // this events is for the component id we are looking for\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n\n    return eventsByNodeId;\n  };\n\n  /**\n   * Get the node id of the latest node entered event for an active node that\n   * exists in the project. We need to check if the node exists in the project\n   * in case the node has been deleted from the project. We also need to check\n   * that the node is active in case the node has been moved to the inactive\n   * section of the project.\n   * @return the node id of the latest node entered event for an active node\n   * that exists in the project\n   */\n  getLatestNodeEnteredEventNodeIdWithExistingNode() {\n\n    // get all the events\n    var events = this.studentData.events;\n\n    // loop through all the events newest to oldest\n    for (var e = events.length - 1; e >= 0; e--) {\n\n      // get an event\n      var event = events[e];\n\n      if (event != null) {\n\n        // get the event name\n        var eventName = event.event;\n\n        if (eventName == 'nodeEntered') {\n          // we have found a nodeEntered event\n\n          // get the node id of the event\n          var nodeId = event.nodeId;\n\n          // check if the node exists in the project\n          var node = this.ProjectService.getNodeById(nodeId);\n\n          if (node != null) {\n\n            // check if the node is active\n            if (this.ProjectService.isActive(nodeId)) {\n              // the node exists in the project and is active\n              return nodeId;\n            }\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if the student can visit the node\n   * @param nodeId the node id\n   * @returns whether the student can visit the node\n   */\n  canVisitNode(nodeId) {\n\n    var result = false;\n\n    if (nodeId != null) {\n\n      // get the node status for the node\n      var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n      if (nodeStatus != null) {\n        if (nodeStatus.isVisitable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the node status by node id\n   * @param nodeId the node id\n   * @returns the node status object for a node\n   */\n  getNodeStatusByNodeId(nodeId) {\n    var nodeStatuses = this.nodeStatuses;\n    var nodeStatus = null;\n\n    if (nodeId != null) {\n      nodeStatus = nodeStatuses[nodeId];\n    }\n\n    return nodeStatus;\n  };\n\n  /**\n   * Get progress information for a given node\n   * @param nodeId the node id\n   * @returns object with number of completed items (both all and for items\n   * that capture student work), number of visible items (all/with work),\n   * completion % (for all items, items with student work)\n   */\n  getNodeProgressById(nodeId) {\n    let completedItems = 0;\n    let completedItemsWithWork = 0;\n    let totalItems = 0;\n    let totalItemsWithWork = 0;\n    let progress = {};\n\n    if (this.ProjectService.isGroupNode(nodeId)) {\n      let nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n      for (let n=0; n<nodeIds.length; n++) {\n        let id = nodeIds[n];\n        let status = this.nodeStatuses[id];\n        if (this.ProjectService.isGroupNode(id)) {\n          if (status.progress.totalItemsWithWork > -1) {\n            completedItems += status.progress.completedItems;\n            totalItems += status.progress.totalItems;\n            completedItemsWithWork += status.progress.completedItemsWithWork;\n            totalItemsWithWork += status.progress.totalItemsWithWork;\n          } else {\n            // we have a legacy node status so we'll need to calculate manually\n            let groupProgress = this.getNodeProgressById(id);\n            completedItems += groupProgress.completedItems;\n            totalItems += groupProgress.totalItems;\n            completedItemsWithWork += groupProgress.completedItemsWithWork;\n            totalItemsWithWork += groupProgress.totalItemsWithWork;\n          }\n        } else {\n          if (status.isVisible) {\n            totalItems++;\n\n            let hasWork = this.ProjectService.nodeHasWork(id);\n            if (hasWork) {\n              totalItemsWithWork++;\n            }\n\n            if (status.isCompleted) {\n              completedItems++;\n\n              if (hasWork) {\n                completedItemsWithWork++;\n              }\n            }\n          }\n        }\n      }\n\n      let completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n      let completionPctWithWork = totalItemsWithWork ? Math.round(completedItemsWithWork / totalItemsWithWork * 100) : 0;\n\n      progress = {\n        \"completedItems\": completedItems,\n        \"completedItemsWithWork\": completedItemsWithWork,\n        \"totalItems\": totalItems,\n        \"totalItemsWithWork\": totalItemsWithWork,\n        \"completionPct\": completionPct,\n        \"completionPctWithWork\": completionPctWithWork\n      };\n    }\n\n    // TODO: implement for steps (using components instead of child nodes)?\n\n    return progress;\n  };\n\n  /**\n   * Check if the given node or component is completed\n   * @param nodeId the node id\n   * @param componentId (optional) the component id\n   * @returns whether the node or component is completed\n   */\n  isCompleted(nodeId, componentId) {\n\n    var result = false;\n\n    if (nodeId && componentId) {\n      // check that the component is completed\n\n      // get the component states for the component\n      var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the component events\n      var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the node events\n      var nodeEvents = this.getEventsByNodeId(nodeId);\n\n      // get the component object\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      var node = this.ProjectService.getNodeById(nodeId);\n\n      if (component != null) {\n\n        // get the component type\n        var componentType = component.type;\n\n        if (componentType != null) {\n\n          // get the service for the component type\n          var service = this.$injector.get(componentType + 'Service');\n\n          // check if the component is completed\n          if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n            result = true;\n          }\n        }\n      }\n    } else if (nodeId) {\n      // check if node is a group\n      var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n      var node = this.ProjectService.getNodeById(nodeId);\n\n      if (isGroup) {\n        // node is a group\n        var tempResult = true;\n\n        // check that all the nodes in the group are visible and completed\n        var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n        if (nodeIds.length) {\n          for (var n=0; n<nodeIds.length; n++) {\n            var id = nodeIds[n];\n\n            if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n              // the child is not visible or not completed so the group is not completed\n              tempResult = false;\n              break;\n            }\n          }\n        } else {\n          // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n          tempResult = false;\n        }\n\n        result = tempResult;\n      } else {\n        // check that all the components in the node are completed\n\n        // get all the components in the node\n        var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        // we will default to is completed true\n        var tempResult = true;\n\n        /*\n         * All components must be completed in order for the node to be completed\n         * so we will loop through all the components and check if they are\n         * completed\n         */\n        for (var c = 0; c < components.length; c++) {\n          var component = components[c];\n\n          if (component != null) {\n            var componentId = component.id;\n            var componentType = component.type;\n            var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n            var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n            var tempNodeId = nodeId;\n            var tempNode = node;\n            var tempComponentId = componentId;\n            var tempComponent = component;\n\n            if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n              /*\n               * this is a show previous work component so we will check if the\n               * previous component was completed\n               */\n              tempNodeId = showPreviousWorkNodeId;\n              tempComponentId = showPreviousWorkComponentId;\n              tempNode = this.ProjectService.getNodeById(tempNodeId);\n              tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n            }\n\n            if (componentType != null) {\n              try {\n\n                // get the service name\n                var serviceName = componentType + 'Service';\n\n                if (this.$injector.has(serviceName)) {\n\n                  // get the service for the component type\n                  var service = this.$injector.get(serviceName);\n\n                  // get the component states for the component\n                  var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the component events\n                  var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the node events\n                  var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                  // check if the component is completed\n                  var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\n\n                  tempResult = tempResult && isComponentCompleted;\n                }\n              } catch (e) {\n                console.log(this.$translate('ERROR_COULD_NOT_CALCULATE_IS_COMPLETED') + tempComponentId);\n              }\n            }\n          }\n        }\n\n        result = tempResult;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the current node\n   * @returns the current node object\n   */\n  getCurrentNode() {\n    return this.currentNode;\n  };\n\n  /**\n   * Get the current node id\n   * @returns the current node id\n   */\n  getCurrentNodeId() {\n    var currentNodeId = null;\n\n    if (this.currentNode != null) {\n      currentNodeId = this.currentNode.id;\n    }\n\n    return currentNodeId;\n  };\n\n  /**\n   * Set the current node\n   * @param nodeId the node id\n   */\n  setCurrentNodeByNodeId(nodeId) {\n    if (nodeId != null) {\n      var node = this.ProjectService.getNodeById(nodeId);\n\n      this.setCurrentNode(node);\n    }\n  };\n\n  /**\n   * Set the current node\n   * @param node the node object\n   */\n  setCurrentNode(node) {\n    var previousCurrentNode = this.currentNode;\n\n    if (previousCurrentNode !== node) {\n      // the current node is about to change\n\n      if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n        // set the previous node to the current node\n        this.previousStep = previousCurrentNode;\n      }\n\n      // set the current node to the new node\n      this.currentNode = node;\n\n      // broadcast the event that the current node has changed\n      this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n    }\n  };\n\n  /**\n   * End the current node\n   */\n  endCurrentNode() {\n\n    // get the current node\n    var previousCurrentNode = this.currentNode;\n\n    if (previousCurrentNode != null) {\n\n      // tell the node to exit\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n    }\n  };\n\n  /**\n   * End the current node and set the current node\n   * @param nodeId the node id of the new current node\n   */\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n    // check if the node is visitable\n    if (this.nodeStatuses[nodeId].isVisitable) {\n      // the node is visitable\n      // end the current node\n      this.endCurrentNode();\n\n      // set the current node\n      this.setCurrentNodeByNodeId(nodeId);\n    } else {\n      // the node is not visitable\n      this.nodeClickLocked(nodeId);\n    }\n  };\n\n  /**\n   * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n   * @param nodeId\n   */\n  nodeClickLocked(nodeId) {\n    this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n  };\n\n  /**\n   * This will parse a delimited string into an array of\n   * arrays. The default delimiter is the comma, but this\n   * can be overriden in the second argument.\n   * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n   */\n  CSVToArray( strData, strDelimiter ) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = (strDelimiter || \",\");\n\n    // Create a regular expression to parse the CSV values.\n    var objPattern = new RegExp(\n      (\n        // Delimiters.\n        \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n        // Quoted fields.\n        \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n        // Standard fields.\n        \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n      ),\n      \"gi\"\n    );\n\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    var arrData = [[]];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    var arrMatches = null;\n\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (arrMatches = objPattern.exec( strData )) {\n\n      // Get the delimiter that was found.\n      var strMatchedDelimiter = arrMatches[ 1 ];\n\n      // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n      if (\n        strMatchedDelimiter.length &&\n        (strMatchedDelimiter != strDelimiter)\n      ){\n\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push( [] );\n      }\n\n      // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n      if (arrMatches[ 2 ]){\n\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        var strMatchedValue = arrMatches[ 2 ].replace(\n          new RegExp( \"\\\"\\\"\", \"g\" ),\n          \"\\\"\"\n        );\n\n      } else {\n\n        // We found a non-quoted value.\n        var strMatchedValue = arrMatches[ 3 ];\n      }\n\n      // Now that we have our value string, let's add\n      // it to the data array.\n      var finalValue = strMatchedValue;\n      var floatVal = parseFloat(strMatchedValue);\n      if (!isNaN(floatVal)) {\n        finalValue = floatVal;\n      }\n      arrData[ arrData.length - 1 ].push( finalValue );\n    }\n\n    // Return the parsed data.\n    return( arrData );\n  };\n\n  /**\n   * Get the total score for the workgroup\n   * @returns the total score for the workgroup\n   */\n  getTotalScore() {\n    var annotations = this.studentData.annotations;\n    var workgroupId = this.ConfigService.getWorkgroupId();\n    return this.AnnotationService.getTotalScore(annotations, workgroupId);\n  }\n\n  /**\n   * Get the project completion for the signed in student\n   * @returns the project completion percentage for the signed in student\n   */\n  getProjectCompletion() {\n\n    // group0 is always the root node of the whole project\n    var nodeId = 'group0';\n\n    // get the progress including all of the children nodes\n    var progress = this.getNodeProgressById(nodeId);\n\n    return progress;\n  }\n\n  /**\n   * Get the run status\n   */\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  /**\n   * Get the next available planning node instance node id\n   * @returns the next available planning node instance node id\n   */\n  getNextAvailablePlanningNodeId() {\n\n    // used to keep track of the highest planning node number we have found, which is 1-based\n    let currentMaxPlanningNodeNumber = 1;\n\n    let nodeStates = this.getNodeStates();\n\n    if (nodeStates != null) {\n\n      // loop through all the NodeStates\n      for (var ns = 0; ns < nodeStates.length; ns++) {\n        let nodeState = nodeStates[ns];\n\n        if (nodeState != null) {\n          let nodeStateNodeId = nodeState.nodeId;\n          if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n            let nodes = nodeState.studentData.nodes;\n            for (var n = 0; n < nodes.length; n++) {\n              let node = nodes[n];\n              let nodeId = node.id;\n              // regex to match the planning node id e.g. planningNode2\n              let planningNodeIdRegEx = /planningNode(.*)/;\n\n              // run the regex on the node id\n              let result = nodeId.match(planningNodeIdRegEx);\n\n              if (result != null) {\n                // we have found a planning node instance node id\n\n                /*\n                 * get the number part of the planning node instance node id\n                 * e.g. if the nodeId is planningNode2, the number part\n                 * would be 2\n                 */\n                let planningNodeNumber = parseInt(result[1]);\n\n                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                  /*\n                   * update the max number part if we have found a new\n                   * higher number\n                   */\n                  currentMaxPlanningNodeNumber = planningNodeNumber;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n      // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n      this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n    }\n\n    // Increment maxPlanningNodeNumber each time this function is called.\n    this.maxPlanningNodeNumber++;\n\n    // return the next available planning node instance node id\n    return 'planningNode' + this.maxPlanningNodeNumber;\n  }\n\n  /**\n   * Get the annotations\n   * @returns the annotations\n   */\n  getAnnotations() {\n    var annotations = null;\n\n    if (this.studentData != null && this.studentData.annotations != null) {\n      annotations = this.studentData.annotations;\n    }\n\n    return annotations;\n  }\n\n  /**\n   * Get the latest component states for a node\n   * @param nodeId get the component states for the node\n   * @return an array containing the work for the node\n   */\n  getLatestComponentStatesByNodeId(nodeId) {\n\n    var latestComponentStates = [];\n\n    if (nodeId) {\n      var studentData = this.studentData;\n\n      if (studentData) {\n\n        // get the node\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n\n          // get the components in the node\n          var components = node.components;\n\n          if (components != null) {\n\n            // loop through all the components\n            for (var c = 0; c < components.length; c++) {\n              var component = components[c];\n\n              if (component != null) {\n                var componentId = component.id;\n\n                // get the latest component state for the component\n                var componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentState == null) {\n                  /*\n                   * there is no component state for the component so we will\n                   * create an object that just contains the node id and\n                   * component id\n                   */\n                  componentState = {};\n                  componentState.nodeId = nodeId;\n                  componentState.componentId = componentId;\n                }\n\n                latestComponentStates.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return latestComponentStates;\n  }\n\n  /**\n   * Get the latest component state for a node\n   * @param nodeId get the latest component state for the node\n   * @return the latest component state for the node\n   */\n  getLatestComponentStateByNodeId(nodeId) {\n\n    var latestComponentState = null;\n\n    if (nodeId != null) {\n      var studentData = this.studentData;\n\n      if (studentData) {\n\n        // get the component states for the node\n        var componentStates = this.getComponentStatesByNodeId(nodeId);\n\n        // get the latest component state\n        latestComponentState = componentStates[componentStates.length - 1];\n      }\n    }\n\n    return latestComponentState;\n  }\n\n  /**\n   * Check if the completion criteria is satisfied\n   * @param completionCriteria the completion criteria\n   * @return whether the completion criteria was satisfied\n   */\n  isCompletionCriteriaSatisfied(completionCriteria) {\n\n    var result = true;\n\n    if (completionCriteria != null) {\n\n      if (completionCriteria.inOrder) {\n        // the criteria need to be satisfied in order\n\n        var tempTimestamp = 0;\n\n        // get all of the criteria\n        var criteria = completionCriteria.criteria;\n\n        // loop through all the criteria\n        for (var c = 0; c < criteria.length; c++) {\n          var tempResult = true;\n\n          // get a criterion\n          var completionCriterion = criteria[c];\n\n          if (completionCriterion != null) {\n\n            // get the function name e.g. 'isVisited', 'isSaved', 'isSubmitted'\n            var functionName = completionCriterion.name;\n\n            if (functionName == 'isSubmitted') {\n              var nodeId = completionCriterion.nodeId;\n              var componentId = completionCriterion.componentId;\n\n              // get the first submit component state after the timestamp\n              var tempComponentState = this.getComponentStateSubmittedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isSaved') {\n              var nodeId = completionCriterion.nodeId;\n              var componentId = completionCriterion.componentId;\n\n              // get the first save component state after the timestamp\n              var tempComponentState = this.getComponentStateSavedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isVisited') {\n              var nodeId = completionCriterion.nodeId;\n\n              // get the first visit event after the timestamp\n              var tempEvent = this.getVisitEventAfter(nodeId, tempTimestamp);\n\n              if (tempEvent == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempEvent.serverSaveTime;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the first save component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a save component state after this timestamp\n   */\n  getComponentStateSavedAfter(nodeId, componentId, timestamp) {\n    var componentState = null;\n\n    // get all the component states\n    var componentStates = this.studentData.componentStates;\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n\n        // get a component state\n        var tempComponentState = componentStates[c];\n\n        if (tempComponentState != null &&\n          tempComponentState.serverSaveTime > timestamp &&\n          tempComponentState.nodeId === nodeId &&\n          tempComponentState.componentId === componentId) {\n\n          // we have found a save component state after the timestamp\n          componentState = tempComponentState;\n          break;\n        }\n      }\n    }\n\n    return componentState;\n  }\n\n  /**\n   * Get the first submit component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a submit component state after this timestamp\n   */\n  getComponentStateSubmittedAfter(nodeId, componentId, timestamp) {\n    var componentState = null;\n\n    // get all the component states\n    var componentStates = this.studentData.componentStates;\n\n    if (componentStates != null) {\n\n      // loop through all the component states\n      for (var c = 0; c < componentStates.length; c++) {\n        var tempComponentState = componentStates[c];\n\n        if (tempComponentState != null &&\n          tempComponentState.serverSaveTime > timestamp &&\n          tempComponentState.nodeId === nodeId &&\n          tempComponentState.componentId === componentId &&\n          tempComponentState.isSubmit) {\n\n          // we have found a submit component state after the timestamp\n          componentState = tempComponentState;\n          break;\n        }\n      }\n    }\n\n    return componentState;\n  }\n\n  /**\n   * Get the first visit event after the timestamp\n   */\n  getVisitEventAfter(nodeId, timestamp) {\n    var event = null;\n\n    // get all the events\n    var events = this.studentData.events;\n\n    if (events != null) {\n\n      // loop through all the events\n      for (var e = 0; e < events.length; e++) {\n        var tempEvent = events[e];\n\n        if (tempEvent != null &&\n          tempEvent.serverSaveTime > timestamp &&\n          tempEvent.nodeId === nodeId &&\n          tempEvent.event === 'nodeEntered') {\n\n          // we have found a visit event after the timestamp\n          event = tempEvent;\n          break;\n        }\n      }\n    }\n\n    return event;\n  }\n\n  /**\n   * Get classmate student work\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Where to get the work from.\n   * 'period' will get the classmate work only from the period the student is in.\n   * null will get work from the whole class (all periods).\n   *\n   * @return a promise that will return the component states from classmates\n   */\n  getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource) {\n\n    // get the url to get the student data\n    var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n    var httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = studentDataURL;\n\n    // set the workgroup id and run id\n    var params = {};\n    params.runId = this.ConfigService.getRunId();\n    params.nodeId = nodeId;\n    params.componentId = componentId;\n    params.getStudentWork = true;\n    params.getEvents = false;\n    params.getAnnotations = false;\n    params.onlyGetLatest = true;\n\n    if (showClassmateWorkSource == 'period') {\n      // get the period the student is in\n      params.periodId = this.ConfigService.getPeriodId();\n    }\n\n    httpParams.params = params;\n\n    // make the request for the student data\n    return this.$http(httpParams).then((result) => {\n      var componentStates = [];\n      var resultData = result.data;\n\n      if (resultData != null) {\n        componentStates = resultData.studentWorkList;\n      }\n\n      return componentStates;\n    });\n  }\n\n  /**\n   * Get the max possible score for the project\n   * @returns the sum of the max scores for all the nodes in the project visible\n   * to the current workgroup or null if none of the visible components has max scores.\n   */\n  getMaxScore() {\n    let maxScore = null;\n\n    // loop through all the node statuses\n    for (var p in this.nodeStatuses) {\n      if (this.nodeStatuses.hasOwnProperty(p)) {\n        let nodeStatus = this.nodeStatuses[p];\n        let nodeId = nodeStatus.nodeId;\n\n        if (nodeStatus.isVisible && !this.ProjectService.isGroupNode(nodeId)) {\n          // node is visible and is not a group\n          // get node max score\n          let nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n          if (nodeMaxScore) {\n            // there is a max score for the node, so add to total\n            maxScore += nodeMaxScore;\n          }\n        }\n      }\n    }\n\n    return maxScore;\n  }\n}\n\nStudentDataService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'AnnotationService',\n  'ConfigService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default StudentDataService;\n"]}