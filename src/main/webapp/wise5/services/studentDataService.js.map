{"version":3,"sources":["studentDataService.es6"],"names":[],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n        this.runStatus = null;\n\n        this.maxPlanningNodeNumber = 0;\n    }\n\n    retrieveStudentData() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.nodeStates = [];\n            this.studentData.events = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // populate the student history\n            this.populateHistories(this.studentData.events);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then((result) => {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // Check to see if this Project contains any Planning activities\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\n                            if (planningGroupNode.planning) {\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                                if (lastestNodeStateForPlanningGroupNode != null) {\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                                    if (studentModifiedNodes != null) {\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                                            let studentModifiedNodeId = studentModifiedNode.id;\n                                            if (studentModifiedNode.planning) {\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                                                    }\n                                                }\n                                            } else {\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        // Re-parse the project with the modified changes\n                        this.ProjectService.parseProject();\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // populate the student history\n                    this.populateHistories(this.studentData.events);\n\n                    // update the node statuses\n                    this.updateNodeStatuses();\n                }\n\n                return this.studentData;\n            });\n        }\n    };\n\n    /**\n     * Retrieve the run status\n     */\n    retrieveRunStatus() {\n        \n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n            this.runStatus = {};\n        } else {\n            // we are in a run\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            //create the params for the request\n            var params = {\n                runId:runId\n            };\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.url = runStatusURL;\n            httpParams.params = params;\n\n            // make the request for the run status\n            return this.$http(httpParams).then((result) => {\n                if (result != null) {\n                    var data = result.data;\n                    if (data != null) {\n                        // remember the run status\n                        this.runStatus = data;\n                    }\n                }\n            });\n        }\n    }\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        var nodes = this.ProjectService.getNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n            \n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n            }\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    /**\n     * Update the node status for a node\n     * @param node the node to update\n     */\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria in this for loop so we will && the result\n                            result = result && tempResult;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n            //var nodeId = criteria.nodeId;\n            //var componentId = criteria.componentId;\n            var functionName = null;\n            if (criteria.function != null) {\n                functionName = criteria.function.name;\n            }\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n                result = this.evaluateIsVisitedCriteria(criteria);\n            } else if (functionName === 'isComplete') {\n\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === 'isPlanningActivityCompleted') {\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n            } else if (functionName === '') {\n                \n            }\n        }\n\n        return result;\n    };\n    \n    /**\n     * Check if the isPlanningActivityCompleted criteria was satisfied\n     * @param criteria a isPlanningActivityCompleted criteria\n     */\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\n        var result = false;\n        \n        if (criteria != null) {\n            // get the function name\n            //var name = criteria.name;\n            \n            var params = null;\n            \n            // get the params\n            if (criteria.function != null) {\n                params = criteria.function.params;\n            }\n            \n            if (params != null) {\n                \n                // get the group id\n                var nodeId = params.nodeId;\n                \n                // get the number of planning steps the student needs to create\n                var planningStepsCreated = params.planningStepsCreated;\n                \n                // get whether the student needs to complete all the steps in the activity\n                var planningStepsCompleted = params.planningStepsCompleted;\n                \n                var planningStepsCreatedSatisfied = false;\n                var planningStepsCompletedSatisfied = false;\n                \n                var planningNodes = [];\n                \n                if (planningStepsCreated == null) {\n                    // there is no value set so we will regard it as satisfied\n                    planningStepsCreatedSatisfied = true;\n                } else {\n                    /*\n                     * there is a value for number of planning steps that need to be created\n                     * so we will check if the student created enough planning steps\n                     */\n                     \n                    // get the node states for the activity\n                    var nodeStates = this.getNodeStatesByNodeId(nodeId);\n                    \n                    if (nodeStates != null) {\n                        \n                        /*\n                         * loop through all the node states from newest to oldest\n                         * for the sake of efficiency\n                         */\n                        for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n                            \n                            var planningStepCount = 0;\n                            \n                            var nodeState = nodeStates[ns];\n                            \n                            if (nodeState != null) {\n                                \n                                // get the student data\n                                var studentData = nodeState.studentData;\n                                \n                                if (studentData != null) {\n                                    \n                                    // get the nodes\n                                    var nodes = studentData.nodes;\n                                    \n                                    if (nodes != null) {\n                                        \n                                        // loop through the nodes\n                                        for (var n = 0; n < nodes.length; n++) {\n                                            var node = nodes[n];\n                                            \n                                            if (node != null) {\n                                                if (node.type === 'node' && (node.templateId != null || node.planningTemplateId != null)) {\n                                                    // we have found a planning step the student created\n                                                    planningStepCount++;\n                                                }\n                                            }\n                                        }\n                                        \n                                        if (planningStepCount >= planningStepsCreated) {\n                                            // the student has created a sufficient number of planning steps\n                                            planningStepsCreatedSatisfied = true;\n                                            planningNodes = nodes;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                if (planningStepsCompleted == null) {\n                    planningStepsCompletedSatisfied = true;\n                } else {\n                    /*\n                     * check if the activity is completed. this checks if all\n                     * the children of the activity are completed.\n                     */\n                    if (this.isCompleted(nodeId)) {\n                        planningStepsCompletedSatisfied = true;\n                    }\n                }\n                \n                if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n                    result = true;\n                }\n            }\n        }\n        \n        return result;\n    }\n\n    /**\n     * Check if this branchPathTaken criteria was satisfied\n     * @param criteria a branchPathTaken criteria\n     * @returns whether the branchPathTaken criteria was satisfied\n     */\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null) {\n            // get the expected from and to node ids\n            var expectedFromNodeId = criteria.fromNodeId;\n            var expectedToNodeId = criteria.toNodeId;\n\n            // get all the branchPathTaken events from the from node id\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n            if (branchPathTakenEvents != null) {\n                \n                // loop through all the branchPathTaken events\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n                    \n                    if (branchPathTakenEvent != null) {\n                        var data = branchPathTakenEvent.data;\n                        \n                        if (data != null) {\n                            // get the from and to node ids of the event\n                            var fromNodeId = data.fromNodeId;\n                            var toNodeId = data.toNodeId;\n                            \n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                                // the from and to node ids match the ones we are looking for\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n    \n    /**\n     * Check if the isVisited criteria was satisfied\n     * @param criteria the isVisited criteria\n     * @returns whether the node id is visited\n     */\n    evaluateIsVisitedCriteria(criteria) {\n        \n        var isVisited = false;\n        \n        if (criteria != null) {\n            \n            // get the node id we want to check if was visited\n            var nodeId = criteria.nodeId;\n            \n            // get all the events\n            var events = this.studentData.events;\n            \n            if (events != null) {\n                \n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n                    \n                    if (event != null) {\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n                            // the student has entered the node before\n                            isVisited = true;\n                        }\n                    }\n                }\n            }\n        }\n        \n        return isVisited;\n    }\n    \n    /**\n     * Get all the branchPathTaken events by node id\n     * @params fromNodeId the from node id\n     * @returns all the branchPathTaken events from the given node id\n     */\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\n        \n        var branchPathTakenEvents = [];\n        var events = this.studentData.events;\n        \n        if (events != null) {\n            \n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n                \n                if (event != null) {\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n                        // we have found a branchPathTaken event from the from node id\n                        branchPathTakenEvents.push(event);\n                    }\n                }\n            }\n        }\n        \n        return branchPathTakenEvents;\n    }\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolena value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param events the events\n     */\n    populateHistories(events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateStackHistory(event.nodeId);\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    /**\n     * Returns all NodeStates\n     * @returns Array of all NodeStates\n     */\n    getNodeStates() {\n        let nodeStates = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            nodeStates = this.studentData.nodeStates;\n        }\n\n        return nodeStates;\n    };\n\n    /**\n     * Get all NodeStates for a specific node\n     * @param nodeId id of node\n     * @returns Array of NodeStates for the specified node\n     */\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    this.addAnnotation(annotation);\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.isPreview()) {\n            var savedStudentDataResponse = {\n                studentWorkList: studentWorkList,\n                events: events,\n                annotations: annotations\n            };\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            this.saveToServerSuccess(savedStudentDataResponse);\n            let deferred = this.$q.defer();\n            deferred.resolve(savedStudentDataResponse);\n            return deferred.promise;\n        } else {\n            // set the workgroup id and run id\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.studentWorkList = angular.toJson(studentWorkList);\n            params.events = angular.toJson(events);\n            params.annotations = angular.toJson(annotations);\n\n            // get the url to POST the student data\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            // make the request to post the student data\n            return this.$http(httpParams).then(\n                result => {\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\n                    if (result != null && result.data != null) {\n                        var savedStudentDataResponse = result.data;\n\n                        this.saveToServerSuccess(savedStudentDataResponse);\n\n                        return savedStudentDataResponse;\n                    }\n                }, result => {\n                    // a server error occured\n                    return null;\n                }\n            );\n        }\n    };\n\n    saveToServerSuccess(savedStudentDataResponse) {\n        // set dummy serverSaveTime for use if we're in preview mode\n        let serverSaveTime = Date.parse(new Date());\n\n        // handle saved studentWork\n        if (savedStudentDataResponse.studentWorkList) {\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n            let localStudentWorkList = this.studentData.componentStates;\n            if (this.studentData.nodeStates) {\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n            }\n\n            // set the id and serverSaveTime in the local studentWorkList\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\n                var savedStudentWork = savedStudentWorkList[i];\n\n                /*\n                 * loop through all the student work that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                    var localStudentWork = localStudentWorkList[l];\n                    if (localStudentWork.requestToken &&\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\n                        localStudentWork.id = savedStudentWork.id;\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                        break;\n                    }\n                }\n            }\n        }\n        // handle saved events\n        if (savedStudentDataResponse.events) {\n            var savedEvents = savedStudentDataResponse.events;\n\n            var localEvents = this.studentData.events;\n\n            // set the id and serverSaveTime in the local event\n            for (var i = 0; i < savedEvents.length; i++) {\n                var savedEvent = savedEvents[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localEvents.length - 1; l >= 0; l--) {\n                    var localEvent = localEvents[l];\n                    if (localEvent.requestToken &&\n                        localEvent.requestToken === savedEvent.requestToken) {\n                        localEvent.id = savedEvent.id;\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n                        localEvent.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                        break;\n                    }\n                }\n            }\n        }\n\n        // handle saved annotations\n        if (savedStudentDataResponse.annotations) {\n            var savedAnnotations = savedStudentDataResponse.annotations;\n\n            var localAnnotations = this.studentData.annotations;\n\n            // set the id and serverSaveTime in the local annotation\n            for (var i = 0; i < savedAnnotations.length; i++) {\n                var savedAnnotation = savedAnnotations[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                    var localAnnotation = localAnnotations[l];\n                    if (localAnnotation.requestToken &&\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n                        localAnnotation.id = savedAnnotation.id;\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                        break;\n                    }\n                }\n            }\n        }\n        \n        this.updateNodeStatuses();\n        \n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Check whether the component has unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    isComponentSubmitDirty() {\n        let submitDirty = false;\n\n        let latestComponentState = this.getLatestComponentState();\n        if (latestComponentState && !latestComponentState.isSubmit) {\n            submitDirty = true;\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Get the latest NodeState for the specified node id\n     * @param nodeId the node id\n     * @return the latest node state with the matching node id or null if none are found\n     */\n    getLatestNodeStateByNodeId(nodeId) {\n        let latestNodeState = null;\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n        }\n        return latestNodeState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id (optional)\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates) {\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id and component id\n                            if (nodeId === componentStateNodeId) {\n                                if (componentId) {\n                                    var componentStateComponentId = componentState.componentId;\n                                    if (componentId === componentStateComponentId) {\n                                        latestComponentState = componentState;\n                                        break;\n                                    }\n                                } else {\n                                    latestComponentState = componentState;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group are visible and completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n                for (var n=0; n<nodeIds.length; n++) {\n                    var id = nodeIds[n];\n\n                    if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n                        // the child is not visible or not completed so the group is not completed\n                        tempResult = false;\n                        break;\n                    }\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                var tempResult = false;\n                var firstResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, node);\n\n                                    if (firstResult) {\n                                        // this is the first component we have looked at\n                                        tempResult = isComponentCompleted;\n                                        firstResult = false;\n                                    } else {\n                                        // this is not the first component we have looked at\n                                        tempResult = tempResult && isComponentCompleted;\n                                    }\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for component with id ' + tempComponentId);\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ) {\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )) {\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n\n    /**\n     * Get the project completion for the signed in student\n     * @returns the project completion percentage for the signed in student\n     */\n    getProjectCompletion() {\n\n        // group0 is always the root node of the whole project\n        var nodeId = 'group0';\n\n        // get the progress including all of the children nodes\n        var progress = this.getNodeProgressById(nodeId);\n\n        return progress;\n    }\n\n    /**\n     * Get the run status\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Get the next available planning node instance node id\n     * @returns the next available planning node instance node id\n     */\n    getNextAvailablePlanningNodeId() {\n\n        // used to keep track of the highest planning node number we have found, which is 1-based\n        let currentMaxPlanningNodeNumber = 1;\n\n        let nodeStates = this.getNodeStates();\n\n        if (nodeStates != null) {\n\n            // loop through all the NodeStates\n            for (var ns = 0; ns < nodeStates.length; ns++) {\n                let nodeState = nodeStates[ns];\n\n                if (nodeState != null) {\n                    let nodeStateNodeId = nodeState.nodeId;\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n                        let nodes = nodeState.studentData.nodes;\n                        for (var n = 0; n < nodes.length; n++) {\n                            let node = nodes[n];\n                            let nodeId = node.id;\n                            // regex to match the planning node id e.g. planningNode2\n                            let planningNodeIdRegEx = /planningNode(.*)/;\n\n                            // run the regex on the node id\n                            let result = nodeId.match(planningNodeIdRegEx);\n\n                            if (result != null) {\n                                // we have found a planning node instance node id\n\n                                /*\n                                 * get the number part of the planning node instance node id\n                                 * e.g. if the nodeId is planningNode2, the number part\n                                 * would be 2\n                                 */\n                                let planningNodeNumber = parseInt(result[1]);\n\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                                    /*\n                                     * update the max number part if we have found a new\n                                     * higher number\n                                     */\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n        }\n\n        // Increment maxPlanningNodeNumber each time this function is called.\n        this.maxPlanningNodeNumber++;\n\n        // return the next available planning node instance node id\n        return 'planningNode' + this.maxPlanningNodeNumber;\n    }\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;\n"]}