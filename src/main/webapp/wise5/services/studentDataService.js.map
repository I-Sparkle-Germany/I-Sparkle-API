{"version":3,"sources":["studentDataService.es6"],"names":[],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n    }\n\n    retrieveStudentData() {\n\n        // get the mode\n        var mode = this.ConfigService.getConfigParam('mode');\n\n        if (mode === 'preview') {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.events = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // populate the student history\n            this.populateHistories(this.studentData.componentStates);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then(angular.bind(this, function(result) {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // load the student planning nodes\n                    //this.loadStudentNodes();\n\n                    // TODO\n                    // populate the student history\n                    this.populateHistories(this.studentData.componentStates, this.studentData.events);\n\n                    // TODO\n                    // update the node statuses\n\n                    this.updateNodeStatuses();\n                }\n                return this.studentData;\n            }));\n        }\n    };\n\n    loadStudentNodes() {\n        var nodes = this.ProjectService.getApplicationNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    if (node.type === 'Planning') {\n                        var nodeId = node.id;\n\n                        var latestNodeState = this.getLatestNodeStateByNodeId(nodeId);\n\n                        if (latestNodeState != null) {\n                            var latestStateStudentNodes = latestNodeState.studentNodes;\n                            var latestTransitions = latestNodeState.studentTransition;\n\n                            this.ProjectService.loadNodes(latestStateStudentNodes);\n                            this.ProjectService.loadTransitions(latestTransitions);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        //this.nodeStatuses = [];\n\n        var nodes = this.ProjectService.getNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n\n            //var nodeStatuses = [];\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n\n                //var nodeStatusesByNode = this.updateNodeStatusByNode(node);\n                //nodeStatuses.push(nodeStatusesByNode);\n                //console.log(nodeStatusesByNode);\n            }\n\n            //this.nodeStatuses = nodeStatuses;\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        /*\n                         if (firstResult) {\n                         // this is the first constraint in this for loop\n                         result = tempResult;\n                         firstResult = false;\n                         } else {\n                         // this is not the first constraint in this for loop so we will && the result\n                         result = result && tempResult;\n                         }\n                         */\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n            //console.log(angular.toJson(tempNodeStatus));\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria in this for loop so we will && the result\n                            result = result && tempResult;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n            //var nodeId = criteria.nodeId;\n            //var componentId = criteria.componentId;\n            var functionName = criteria.functionName;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n\n            } else if (functionName === 'isComplete') {\n\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null) {\n            var expectedFromNodeId = criteria.fromNodeId;\n            var expectedToNodeId = criteria.toNodeId;\n\n            // get the node states\n            var nodeStates = this.getBranchPathTakenNodeStates(expectedFromNodeId);\n\n            if (nodeStates != null) {\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n\n                    if (nodeState != null) {\n                        var studentData = nodeState.studentData;\n\n                        if (studentData != null) {\n                            var dataType = studentData.dataType;\n\n                            if (dataType != null && dataType === 'branchPathTaken') {\n\n                                var tempFromNodeId = studentData.fromNodeId;\n                                var tempToNodeId = studentData.toNodeId;\n\n                                if (expectedFromNodeId === tempFromNodeId &&\n                                    expectedToNodeId === tempToNodeId) {\n                                    result = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getBranchPathTakenNodeStates(fromNodeId) {\n\n        var branchpathTakenNodeStates = [];\n\n        // get the node states\n        var nodeStatesFromNodeId = this.getNodeStatesByNodeId(fromNodeId);\n\n        if (nodeStatesFromNodeId != null) {\n            for (var n = 0; n < nodeStatesFromNodeId.length; n++) {\n                var nodeState = nodeStatesFromNodeId[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n\n                            branchpathTakenNodeStates.push(nodeState);\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchpathTakenNodeStates;\n    };\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolena value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    updateNodeStatusesByNode0(node) {\n        return $q(angular.bind(this, function(resolve, reject) {\n\n            var nodeStatus = null;\n            var allPromises = [];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                nodeStatus = {};\n                nodeStatus.nodeId = nodeId;\n                nodeStatus.isVisitable = false;\n\n                // get the constraints that affect this node\n                var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n                if (constraintsForNode == null || constraintsForNode.length == 0) {\n                    // this node does not have any constraints so it is clickable\n                    nodeStatus.isVisitable = true;\n                } else {\n\n                    // loop through all the constraints that affect this node\n                    for (var c = 0; c < constraintsForNode.length; c++) {\n                        var constraintForNode = constraintsForNode[c];\n\n                        if (constraintForNode != null) {\n                            var constraintLogic = constraintForNode.constraintLogic;\n\n                            if (constraintLogic == 'guidedNavigation') {\n                                if (this.isNodeVisited(nodeId)) {\n                                    // the node has been visited before so it should be clickable\n                                    nodeStatus.isVisitable = true;\n                                } else {\n                                    /*\n                                     * the node has not been visited before so we will determine\n                                     * if the node is clickable by looking at the transitions\n                                     */\n                                    var currentNode = this.currentNode;\n\n                                    if (currentNode != null) {\n                                        // there is a current node\n                                        var currentNodeId = currentNode.id;\n\n                                        // get the transitions from the current node\n                                        var transitions = this.ProjectService.getTransitionsByFromNodeId(currentNodeId);\n\n                                        if (transitions != null) {\n\n                                            // get the transitions from the current node to the node status node\n                                            var transitionsToNodeId = this.ProjectService.getTransitionsByFromAndToNodeId(currentNodeId, nodeId);\n\n                                            if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                                                // there is a transition between the current node and the node status node\n\n                                                // check if the current node has branches\n\n                                                if (transitions.length > 1) {\n                                                    // the current node has branches so the node status node is not clickable\n                                                    nodeStatus.isVisitable |= false;\n                                                } else {\n                                                    // the current node does not have branches so the node status node is clickable\n                                                    nodeStatus.isVisitable = true;\n                                                }\n                                            } else {\n                                                /*\n                                                 * there is no transition between the current node and the node status node\n                                                 * so the node we will set the node to be not clickable\n                                                 */\n                                                nodeStatus.isVisitable |= false;\n                                            }\n                                        }\n                                    } else {\n                                        // there is no current node because the student has just started the project\n                                    }\n\n                                    if (this.ProjectService.isStartNode(node)) {\n                                        /*\n                                         * the node is the start node of the project or a start node of a group\n                                         * so we will make it clickable\n                                         */\n                                        nodeStatus.isVisitable = true;\n                                    }\n                                }\n                            } else if (constraintLogic === 'transition') {\n                                var criteria = constraintForNode.criteria;\n                                if (criteria != null && criteria.length > 0) {\n                                    var firstCriteria = criteria[0];\n                                    var criteriaNodeId = firstCriteria.nodeId;\n\n                                    var nodeVisits = this.getNodeVisitsByNodeId(criteriaNodeId);\n                                    if (nodeVisits != null && nodeVisits.length > 0) {\n                                        var functionName = firstCriteria.functionName;\n                                        var functionParams = firstCriteria.functionParams;\n                                        functionParams.nodeVisits = nodeVisits;\n\n                                        var result = null;\n\n                                        // get the node type\n                                        var nodeType = node.type;\n\n                                        // get the service for the node type\n                                        var service = this.$injector.get(nodeType + 'Service');\n\n                                        if (service != null) {\n\n                                            // call the function in the service\n                                            result = service.callFunction(functionName, functionParams);\n                                        }\n\n                                        if (result) {\n                                            nodeStatus.isVisitable = true;\n                                        }\n                                    }\n                                }\n                            } else if (constraintLogic === 'lockAfterSubmit') {\n                                var targetId = constraintForNode.targetId;\n                                var nodeVisits = this.getNodeVisitsByNodeId(targetId);\n\n                                if (nodeId === targetId) {\n                                    var isWorkSubmitted = NodeService.isWorkSubmitted(nodeVisits);\n\n                                    if (isWorkSubmitted) {\n\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this.$q.all(allPromises).then(function() {\n                resolve(nodeStatus);\n            })\n        }));\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param componentStates the component states\n     * @param events the events\n     */\n    populateHistories(componentStates, events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component state\n            for (var i = 0; i < componentStates.length; i++) {\n\n\n                var componentState = componentStates[i];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    this.updateStackHistory(componentStateNodeId);\n                    this.updateVisitedNodesHistory(componentStateNodeId);\n                }\n            }\n        }\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getLatestStudentWorkForNodeAsHTML(nodeId) {\n        var studentWorkAsHTML = null;\n\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n            //var nodeType = node.type;\n            //var latestNodeState = this.getLatestNodeStateByNodeId(nodeId);\n\n            // TODO: make this dynamically call the correct {{nodeType}}Service\n            if (nodeType === 'OpenResponse') {\n                //studentWorkAsHTML = OpenResponseService.getStudentWorkAsHTML(latestNodeState);\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    this.addAnnotation(annotation);\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        // get the url to POST the student data\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        // set the workgroup id and run id\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.workgroupId = this.ConfigService.getWorkgroupId();\n        params.studentWorkList = angular.toJson(studentWorkList);\n        params.events = angular.toJson(events);\n        params.annotations = angular.toJson(annotations);\n        httpParams.data = $.param(params);\n\n        // make the request to post the student data\n        return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n            // get the local references to the component states that were posted and set their id and serverSaveTime\n            if (result != null &&\n                result.data != null) {\n\n                var savedStudentDataResponse = result.data;\n\n                // handle saved studentWork\n                if (savedStudentDataResponse.studentWorkList != null) {\n                    var savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n\n                    var localStudentWorkList = this.studentData.componentStates.concat(this.studentData.nodeStates);\n\n                    // set the id and serverSaveTime in the local studentWorkList\n                    for (var i = 0; i < savedStudentWorkList.length; i++) {\n                        var savedStudentWork = savedStudentWorkList[i];\n\n                        /*\n                         * loop through all the student work that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                            var localStudentWork = localStudentWorkList[l];\n                            if (localStudentWork.requestToken != null &&\n                                localStudentWork.requestToken === savedStudentWork.requestToken) {\n                                localStudentWork.id = savedStudentWork.id;\n                                localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime;\n                                localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                                break;\n                            }\n                        }\n                    }\n                }\n                // handle saved events\n                if (savedStudentDataResponse.events != null) {\n                    var savedEvents = savedStudentDataResponse.events;\n\n                    var localEvents = this.studentData.events;\n\n                    // set the id and serverSaveTime in the local event\n                    for (var i = 0; i < savedEvents.length; i++) {\n                        var savedEvent = savedEvents[i];\n\n                        /*\n                         * loop through all the events that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localEvents.length - 1; l >= 0; l--) {\n                            var localEvent = localEvents[l];\n                            if (localEvent.requestToken != null &&\n                                localEvent.requestToken === savedEvent.requestToken) {\n                                localEvent.id = savedEvent.id;\n                                localEvent.serverSaveTime = savedEvent.serverSaveTime;\n                                localEvent.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                // handle saved annotations\n                if (savedStudentDataResponse.annotations != null) {\n                    var savedAnnotations = savedStudentDataResponse.annotations;\n\n                    var localAnnotations = this.studentData.annotations;\n\n                    // set the id and serverSaveTime in the local annotation\n                    for (var i = 0; i < savedAnnotations.length; i++) {\n                        var savedAnnotation = savedAnnotations[i];\n\n                        /*\n                         * loop through all the events that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                            var localAnnotation = localAnnotations[l];\n                            if (localAnnotation.requestToken != null &&\n                                localAnnotation.requestToken === savedAnnotation.requestToken) {\n                                localAnnotation.id = savedAnnotation.id;\n                                localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n                                localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                                break;\n                            }\n                        }\n                    }\n                }\n\n            }\n\n\n            return savedStudentDataResponse;\n        }));\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n                                latestComponentState = componentState;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Create a copy of a JSON object\n     * @param jsonObject the JSON object to get a copy of\n     * @return a copy of the JSON object that was passed in\n     */\n    makeCopyOfJSONObject(jsonObject) {\n        var copyOfJSONObject = null;\n\n        if (jsonObject != null) {\n            // create a JSON string from the JSON object\n            var jsonObjectString = angular.toJson(jsonObject);\n\n            // create a JSON object from the JSON string\n            copyOfJSONObject = angular.fromJson(jsonObjectString);\n        }\n\n        return copyOfJSONObject;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group and visible are completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n                for (var n=0; n<nodeIds.length; n++) {\n                    var id = nodeIds[n];\n                    if (this.nodeStatuses[id].isVisible && !this.nodeStatuses[id].isCompleted) {\n                        tempResult = false;\n                        break;\n                    }\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                var tempResult = false;\n                var firstResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents);\n\n                                    if (firstResult) {\n                                        // this is the first component we have looked at\n                                        tempResult = isComponentCompleted;\n                                        firstResult = false;\n                                    } else {\n                                        // this is not the first component we have looked at\n                                        tempResult = tempResult && isComponentCompleted;\n                                    }\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for a component');\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;"]}