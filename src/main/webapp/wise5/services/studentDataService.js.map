{"version":3,"sources":["studentDataService.es6"],"names":[],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n        this.runStatus = null;\n\n        this.maxPlanningNodeNumber = 0;\n    }\n\n    retrieveStudentData() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.nodeStates = [];\n            this.studentData.events = [];\n            this.studentData.annotations = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // set the annotations into the annotation service\n            this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n            // populate the student history\n            this.populateHistories(this.studentData.events);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then((result) => {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // Check to see if this Project contains any Planning activities\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\n                            if (planningGroupNode.planning) {\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                                if (lastestNodeStateForPlanningGroupNode != null) {\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                                    if (studentModifiedNodes != null) {\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                                            let studentModifiedNodeId = studentModifiedNode.id;\n                                            if (studentModifiedNode.planning) {\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                                                    }\n                                                }\n                                            } else {\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        // Re-parse the project with the modified changes\n                        this.ProjectService.parseProject();\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // populate the student history\n                    this.populateHistories(this.studentData.events);\n\n                    // update the node statuses\n                    this.updateNodeStatuses();\n                }\n\n                return this.studentData;\n            });\n        }\n    };\n\n    /**\n     * Retrieve the run status\n     */\n    retrieveRunStatus() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n            this.runStatus = {};\n        } else {\n            // we are in a run\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            //create the params for the request\n            var params = {\n                runId:runId\n            };\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.url = runStatusURL;\n            httpParams.params = params;\n\n            // make the request for the run status\n            return this.$http(httpParams).then((result) => {\n                if (result != null) {\n                    var data = result.data;\n                    if (data != null) {\n                        // remember the run status\n                        this.runStatus = data;\n                    }\n                }\n            });\n        }\n    }\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        let nodes = this.ProjectService.getNodes();\n        let planningNodes = this.ProjectService.getPlanningNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n            if (planningNodes != null) {\n                nodes = nodes.concat(planningNodes);\n            }\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n            }\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    /**\n     * Update the node status for a node\n     * @param node the node to update\n     */\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (this.ConfigService.getConfigParam('constraints') == false) {\n                /*\n                 * constraints have been disabled, most likely because we are\n                 * in preview without constraints mode\n                 */\n                constraintsForNode = null;\n            }\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n            var removalConditional = constraintForNode.removalConditional;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria\n\n                            if (removalConditional === 'any') {\n                                // any of the criteria can be true to remove the constraint\n                                result = result || tempResult;\n                            } else {\n                                // all the criteria need to be true to remove the constraint\n                                result = result && tempResult;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n\n            var functionName = criteria.name;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n                result = this.evaluateIsVisitedCriteria(criteria);\n            } else if (functionName === 'isCompleted') {\n                result = this.evaluateIsCompletedCriteria(criteria);\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === 'isPlanningActivityCompleted') {\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n            } else if (functionName === 'score') {\n                result = this.evaluateScoreCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isCompleted criteria was satisfied\n     * @param criteria an isCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            var params = criteria.params;\n            var nodeId = params.nodeId;\n\n            result = this.isCompleted(nodeId);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the isPlanningActivityCompleted criteria was satisfied\n     * @param criteria a isPlanningActivityCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            var params = criteria.params;\n\n            // get the group id\n            var nodeId = params.nodeId;\n\n            // get the number of planning steps the student needs to create\n            var planningStepsCreated = params.planningStepsCreated;\n\n            // get whether the student needs to complete all the steps in the activity\n            var planningStepsCompleted = params.planningStepsCompleted;\n\n            var planningStepsCreatedSatisfied = false;\n            var planningStepsCompletedSatisfied = false;\n\n            var planningNodes = [];\n\n            if (planningStepsCreated == null) {\n                // there is no value set so we will regard it as satisfied\n                planningStepsCreatedSatisfied = true;\n            } else {\n                /*\n                 * there is a value for number of planning steps that need to be created\n                 * so we will check if the student created enough planning steps\n                 */\n\n                // get the node states for the activity\n                var nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n                if (nodeStates != null) {\n\n                    /*\n                     * loop through all the node states from newest to oldest\n                     * for the sake of efficiency\n                     */\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n\n                        var planningStepCount = 0;\n\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n\n                            // get the student data\n                            var studentData = nodeState.studentData;\n\n                            if (studentData != null) {\n\n                                // get the nodes\n                                var nodes = studentData.nodes;\n\n                                if (nodes != null) {\n\n                                    // loop through the nodes\n                                    for (var n = 0; n < nodes.length; n++) {\n                                        var node = nodes[n];\n\n                                        if (node != null) {\n                                            if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                                                // we have found a planning step the student created\n                                                planningStepCount++;\n                                            }\n                                        }\n                                    }\n\n                                    if (planningStepCount >= planningStepsCreated) {\n                                        // the student has created a sufficient number of planning steps\n                                        planningStepsCreatedSatisfied = true;\n                                        planningNodes = nodes;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (planningStepsCompleted == null) {\n                planningStepsCompletedSatisfied = true;\n            } else {\n                /*\n                 * check if the activity is completed. this checks if all\n                 * the children of the activity are completed.\n                 */\n                if (this.isCompleted(nodeId)) {\n                    planningStepsCompletedSatisfied = true;\n                }\n            }\n\n            if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if this branchPathTaken criteria was satisfied\n     * @param criteria a branchPathTaken criteria\n     * @returns whether the branchPathTaken criteria was satisfied\n     */\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            // get the expected from and to node ids\n            var expectedFromNodeId = criteria.params.fromNodeId;\n            var expectedToNodeId = criteria.params.toNodeId;\n\n            // get all the branchPathTaken events from the from node id\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n            if (branchPathTakenEvents != null) {\n\n                // loop through all the branchPathTaken events\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n\n                    if (branchPathTakenEvent != null) {\n                        var data = branchPathTakenEvent.data;\n\n                        if (data != null) {\n                            // get the from and to node ids of the event\n                            var fromNodeId = data.fromNodeId;\n                            var toNodeId = data.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                                // the from and to node ids match the ones we are looking for\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isVisited criteria was satisfied\n     * @param criteria the isVisited criteria\n     * @returns whether the node id is visited\n     */\n    evaluateIsVisitedCriteria(criteria) {\n\n        var isVisited = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            var nodeId = criteria.params.nodeId;\n\n            // get all the events\n            var events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n                            // the student has entered the node before\n                            isVisited = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisited;\n    }\n\n    /**\n     * Get all the branchPathTaken events by node id\n     * @params fromNodeId the from node id\n     * @returns all the branchPathTaken events from the given node id\n     */\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\n\n        var branchPathTakenEvents = [];\n        var events = this.studentData.events;\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n                        // we have found a branchPathTaken event from the from node id\n                        branchPathTakenEvents.push(event);\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenEvents;\n    }\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';  // Assume MC component.\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the score criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateScoreCriteria(criteria) {\n\n        var result = false;\n\n        var params = criteria.params;\n\n        if (params != null) {\n\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var scores = params.scores;\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var scoreType = 'any';\n\n            if (nodeId != null && componentId != null && scores != null) {\n\n                // get the latest score annotation\n                var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n                if (latestScoreAnnotation != null) {\n\n                    // get the score value\n                    var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n                    // check if the score value matches what the criteria is looking for\n                    if (scores.indexOf(scoreValue) != -1) {\n                        /*\n                         * the student has received a score that matches a score\n                         * we're looking for\n                         */\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param events the events\n     */\n    populateHistories(events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateStackHistory(event.nodeId);\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    /**\n     * Returns all NodeStates\n     * @returns Array of all NodeStates\n     */\n    getNodeStates() {\n        let nodeStates = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            nodeStates = this.studentData.nodeStates;\n        }\n\n        return nodeStates;\n    };\n\n    /**\n     * Get all NodeStates for a specific node\n     * @param nodeId id of node\n     * @returns Array of NodeStates for the specified node\n     */\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    this.addAnnotation(annotation);\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.isPreview()) {\n            var savedStudentDataResponse = {\n                studentWorkList: studentWorkList,\n                events: events,\n                annotations: annotations\n            };\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            this.saveToServerSuccess(savedStudentDataResponse);\n            let deferred = this.$q.defer();\n            deferred.resolve(savedStudentDataResponse);\n            return deferred.promise;\n        } else {\n            // set the workgroup id and run id\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.studentWorkList = angular.toJson(studentWorkList);\n            params.events = angular.toJson(events);\n            params.annotations = angular.toJson(annotations);\n\n            // get the url to POST the student data\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            // make the request to post the student data\n            return this.$http(httpParams).then(\n                result => {\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\n                    if (result != null && result.data != null) {\n                        var savedStudentDataResponse = result.data;\n\n                        this.saveToServerSuccess(savedStudentDataResponse);\n\n                        return savedStudentDataResponse;\n                    }\n                }, result => {\n                    // a server error occured\n                    return null;\n                }\n            );\n        }\n    };\n\n    saveToServerSuccess(savedStudentDataResponse) {\n        // set dummy serverSaveTime for use if we're in preview mode\n        let serverSaveTime = Date.parse(new Date());\n\n        // handle saved studentWork\n        if (savedStudentDataResponse.studentWorkList) {\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n            let localStudentWorkList = this.studentData.componentStates;\n            if (this.studentData.nodeStates) {\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n            }\n\n            // set the id and serverSaveTime in the local studentWorkList\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\n                var savedStudentWork = savedStudentWorkList[i];\n\n                /*\n                 * loop through all the student work that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                    var localStudentWork = localStudentWorkList[l];\n                    if (localStudentWork.requestToken &&\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\n                        localStudentWork.id = savedStudentWork.id;\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                        break;\n                    }\n                }\n            }\n        }\n        // handle saved events\n        if (savedStudentDataResponse.events) {\n            var savedEvents = savedStudentDataResponse.events;\n\n            var localEvents = this.studentData.events;\n\n            // set the id and serverSaveTime in the local event\n            for (var i = 0; i < savedEvents.length; i++) {\n                var savedEvent = savedEvents[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localEvents.length - 1; l >= 0; l--) {\n                    var localEvent = localEvents[l];\n                    if (localEvent.requestToken &&\n                        localEvent.requestToken === savedEvent.requestToken) {\n                        localEvent.id = savedEvent.id;\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n                        localEvent.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                        break;\n                    }\n                }\n            }\n        }\n\n        // handle saved annotations\n        if (savedStudentDataResponse.annotations) {\n            var savedAnnotations = savedStudentDataResponse.annotations;\n\n            var localAnnotations = this.studentData.annotations;\n\n            // set the id and serverSaveTime in the local annotation\n            for (var i = 0; i < savedAnnotations.length; i++) {\n                var savedAnnotation = savedAnnotations[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                    var localAnnotation = localAnnotations[l];\n                    if (localAnnotation.requestToken &&\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n                        localAnnotation.id = savedAnnotation.id;\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.updateNodeStatuses();\n\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Check whether the component has unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    isComponentSubmitDirty() {\n        let submitDirty = false;\n\n        let latestComponentState = this.getLatestComponentState();\n        if (latestComponentState && !latestComponentState.isSubmit) {\n            submitDirty = true;\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Get the latest NodeState for the specified node id\n     * @param nodeId the node id\n     * @return the latest node state with the matching node id or null if none are found\n     */\n    getLatestNodeStateByNodeId(nodeId) {\n        let latestNodeState = null;\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n        }\n        return latestNodeState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id (optional)\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates) {\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id and component id\n                            if (nodeId === componentStateNodeId) {\n                                if (componentId) {\n                                    var componentStateComponentId = componentState.componentId;\n                                    if (componentId === componentStateComponentId) {\n                                        latestComponentState = componentState;\n                                        break;\n                                    }\n                                } else {\n                                    latestComponentState = componentState;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Returns all the component states for this workgroup\n     */\n    getComponentStates() {\n        return this.studentData.componentStates;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get all events\n     * @returns all events for the student\n     */\n    getEvents() {\n        if (this.studentData != null && this.studentData.events != null) {\n            return this.studentData.events;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group are visible and completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n                if (nodeIds.length) {\n                    for (var n=0; n<nodeIds.length; n++) {\n                        var id = nodeIds[n];\n\n                        if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n                            // the child is not visible or not completed so the group is not completed\n                            tempResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n                    tempResult = false;\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                var tempResult = false;\n                var firstResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, node);\n\n                                    if (firstResult) {\n                                        // this is the first component we have looked at\n                                        tempResult = isComponentCompleted;\n                                        firstResult = false;\n                                    } else {\n                                        // this is not the first component we have looked at\n                                        tempResult = tempResult && isComponentCompleted;\n                                    }\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for component with id ' + tempComponentId);\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ) {\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )) {\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n\n    /**\n     * Get the project completion for the signed in student\n     * @returns the project completion percentage for the signed in student\n     */\n    getProjectCompletion() {\n\n        // group0 is always the root node of the whole project\n        var nodeId = 'group0';\n\n        // get the progress including all of the children nodes\n        var progress = this.getNodeProgressById(nodeId);\n\n        return progress;\n    }\n\n    /**\n     * Get the run status\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Get the next available planning node instance node id\n     * @returns the next available planning node instance node id\n     */\n    getNextAvailablePlanningNodeId() {\n\n        // used to keep track of the highest planning node number we have found, which is 1-based\n        let currentMaxPlanningNodeNumber = 1;\n\n        let nodeStates = this.getNodeStates();\n\n        if (nodeStates != null) {\n\n            // loop through all the NodeStates\n            for (var ns = 0; ns < nodeStates.length; ns++) {\n                let nodeState = nodeStates[ns];\n\n                if (nodeState != null) {\n                    let nodeStateNodeId = nodeState.nodeId;\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n                        let nodes = nodeState.studentData.nodes;\n                        for (var n = 0; n < nodes.length; n++) {\n                            let node = nodes[n];\n                            let nodeId = node.id;\n                            // regex to match the planning node id e.g. planningNode2\n                            let planningNodeIdRegEx = /planningNode(.*)/;\n\n                            // run the regex on the node id\n                            let result = nodeId.match(planningNodeIdRegEx);\n\n                            if (result != null) {\n                                // we have found a planning node instance node id\n\n                                /*\n                                 * get the number part of the planning node instance node id\n                                 * e.g. if the nodeId is planningNode2, the number part\n                                 * would be 2\n                                 */\n                                let planningNodeNumber = parseInt(result[1]);\n\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                                    /*\n                                     * update the max number part if we have found a new\n                                     * higher number\n                                     */\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n        }\n\n        // Increment maxPlanningNodeNumber each time this function is called.\n        this.maxPlanningNodeNumber++;\n\n        // return the next available planning node instance node id\n        return 'planningNode' + this.maxPlanningNodeNumber;\n    }\n\n    /**\n     * Get the annotations\n     * @returns the annotations\n     */\n    getAnnotations() {\n        var annotations = null;\n\n        if (this.studentData != null && this.studentData.annotations != null) {\n            annotations = this.studentData.annotations;\n        }\n\n        return annotations;\n    }\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;\n"]}