{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","ProjectService","UtilService","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxPlanningNodeNumber","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","i","length","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","isPreview","componentStates","nodeStates","events","userName","userId","setAnnotations","populateHistories","updateNodeStatuses","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","s","studentWork","componentId","push","project","nodes","p","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","g","depth","getNodeDepth","sort","a","b","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","isVisible","isVisibleResults","isVisitableResults","firstResult","c","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","progress","getNodeProgressById","icon","getNodeIconByNodeId","removalCriteria","evaluateNodeConstraint","visitedNodes","getVisitedNodesHistory","transitionsToNodeId","v","visitedNodeId","transitions","getTransitionsByFromAndToNodeId","isStartNode","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","e","isVisitedAfter","isVisitedAfterNodeId","criteriaCreatedTimestamp","clientSaveTime","isVisitedAndRevisedAfter","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","indexOf","toString","updateStackHistory","updateVisitedNodesHistory","index","stackHistoryResult","indexOfNodeId","splice","componentState","timestamp","nodeStatesByNodeId","tempNodeId","annotation","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","serverSaveTime","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","latestComponentState","getLatestComponentState","projectCompletion","getProjectCompletion","studentStatusJSON","previousComponentState","status","studentStatusParams","submitDirty","isSubmit","latestNodeState","allNodeStatesByNodeId","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","completedItems","totalItems","nodeIds","getChildNodeIdsById","completedGroupItems","totalGroupItems","completionPct","Math","round","getComponentStatesByNodeIdAndComponentId","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","getNodeById","isGroup","components","getComponentsByNodeId","showPreviousWorkNodeId","showPreviousWorkComponentId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n        this.runStatus = null;\n\n        this.maxPlanningNodeNumber = 0;\n\n        // listen for node status changes\n        this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\n            // calculate active global annotations and group them by group name as needed\n            this.AnnotationService.calculateActiveGlobalAnnotationGroups();\n\n            // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\n            let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\n            globalAnnotationGroups.map((globalAnnotationGroup) => {\n                let globalAnnotations = globalAnnotationGroup.annotations;\n                globalAnnotations.map((globalAnnotation) => {\n                    if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\n                        let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\n                        let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\n                        if (unGlobalizeCriteriaArray != null) {\n                            if (unGlobalizeConditional === \"any\") {\n                                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                                let anySatified = false;\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                                    anySatified = anySatified || unGlobalizeCriteriaResult;\n                                }\n                                if (anySatified) {\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\n                                }\n                            } else if (unGlobalizeConditional === \"all\") {\n                                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                                let allSatisfied = true;\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                                    allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\n                                }\n                                if (allSatisfied) {\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\n                                }\n                            }\n                        }\n                    }\n                });\n            })\n        });\n    }\n\n    retrieveStudentData() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.nodeStates = [];\n            this.studentData.events = [];\n            this.studentData.annotations = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // set the annotations into the annotation service\n            this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n            // populate the student history\n            this.populateHistories(this.studentData.events);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then((result) => {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // Check to see if this Project contains any Planning activities\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\n                            if (planningGroupNode.planning) {\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                                if (lastestNodeStateForPlanningGroupNode != null) {\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                                    if (studentModifiedNodes != null) {\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                                            let studentModifiedNodeId = studentModifiedNode.id;\n                                            if (studentModifiedNode.planning) {\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                                                    }\n                                                }\n                                            } else {\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        // Re-parse the project with the modified changes\n                        this.ProjectService.parseProject();\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // populate the student history\n                    this.populateHistories(this.studentData.events);\n\n                    // update the node statuses\n                    this.updateNodeStatuses();\n                }\n\n                return this.studentData;\n            });\n        }\n    };\n\n    /**\n     * Retrieve the run status\n     */\n    retrieveRunStatus() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n            this.runStatus = {};\n        } else {\n            // we are in a run\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            //create the params for the request\n            var params = {\n                runId:runId\n            };\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.url = runStatusURL;\n            httpParams.params = params;\n\n            // make the request for the run status\n            return this.$http(httpParams).then((result) => {\n                if (result != null) {\n                    var data = result.data;\n                    if (data != null) {\n                        // remember the run status\n                        this.runStatus = data;\n                    }\n                }\n            });\n        }\n    }\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        let nodes = this.ProjectService.getNodes();\n        let planningNodes = this.ProjectService.getPlanningNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n            if (planningNodes != null) {\n                nodes = nodes.concat(planningNodes);\n            }\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n            }\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    /**\n     * Update the node status for a node\n     * @param node the node to update\n     */\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (this.ConfigService.getConfigParam('constraints') == false) {\n                /*\n                 * constraints have been disabled, most likely because we are\n                 * in preview without constraints mode\n                 */\n                constraintsForNode = null;\n            }\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n            var removalConditional = constraintForNode.removalConditional;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria\n\n                            if (removalConditional === 'any') {\n                                // any of the criteria can be true to remove the constraint\n                                result = result || tempResult;\n                            } else {\n                                // all the criteria need to be true to remove the constraint\n                                result = result && tempResult;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n\n            var functionName = criteria.name;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n                result = this.evaluateIsVisitedCriteria(criteria);\n            } else if (functionName === 'isVisitedAfter') {\n                result = this.evaluateIsVisitedAfterCriteria(criteria);\n            } else if (functionName === 'isVisitedAndRevisedAfter') {\n                result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\n            } else if (functionName === 'isCompleted') {\n                result = this.evaluateIsCompletedCriteria(criteria);\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === 'isPlanningActivityCompleted') {\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n            } else if (functionName === 'score') {\n                result = this.evaluateScoreCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isCompleted criteria was satisfied\n     * @param criteria an isCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            var params = criteria.params;\n            var nodeId = params.nodeId;\n\n            result = this.isCompleted(nodeId);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the isPlanningActivityCompleted criteria was satisfied\n     * @param criteria a isPlanningActivityCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            var params = criteria.params;\n\n            // get the group id\n            var nodeId = params.nodeId;\n\n            // get the number of planning steps the student needs to create\n            var planningStepsCreated = params.planningStepsCreated;\n\n            // get whether the student needs to complete all the steps in the activity\n            var planningStepsCompleted = params.planningStepsCompleted;\n\n            var planningStepsCreatedSatisfied = false;\n            var planningStepsCompletedSatisfied = false;\n\n            var planningNodes = [];\n\n            if (planningStepsCreated == null) {\n                // there is no value set so we will regard it as satisfied\n                planningStepsCreatedSatisfied = true;\n            } else {\n                /*\n                 * there is a value for number of planning steps that need to be created\n                 * so we will check if the student created enough planning steps\n                 */\n\n                // get the node states for the activity\n                var nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n                if (nodeStates != null) {\n\n                    /*\n                     * loop through all the node states from newest to oldest\n                     * for the sake of efficiency\n                     */\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n\n                        var planningStepCount = 0;\n\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n\n                            // get the student data\n                            var studentData = nodeState.studentData;\n\n                            if (studentData != null) {\n\n                                // get the nodes\n                                var nodes = studentData.nodes;\n\n                                if (nodes != null) {\n\n                                    // loop through the nodes\n                                    for (var n = 0; n < nodes.length; n++) {\n                                        var node = nodes[n];\n\n                                        if (node != null) {\n                                            if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                                                // we have found a planning step the student created\n                                                planningStepCount++;\n                                            }\n                                        }\n                                    }\n\n                                    if (planningStepCount >= planningStepsCreated) {\n                                        // the student has created a sufficient number of planning steps\n                                        planningStepsCreatedSatisfied = true;\n                                        planningNodes = nodes;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (planningStepsCompleted == null) {\n                planningStepsCompletedSatisfied = true;\n            } else {\n                /*\n                 * check if the activity is completed. this checks if all\n                 * the children of the activity are completed.\n                 */\n                if (this.isCompleted(nodeId)) {\n                    planningStepsCompletedSatisfied = true;\n                }\n            }\n\n            if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if this branchPathTaken criteria was satisfied\n     * @param criteria a branchPathTaken criteria\n     * @returns whether the branchPathTaken criteria was satisfied\n     */\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            // get the expected from and to node ids\n            var expectedFromNodeId = criteria.params.fromNodeId;\n            var expectedToNodeId = criteria.params.toNodeId;\n\n            // get all the branchPathTaken events from the from node id\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n            if (branchPathTakenEvents != null) {\n\n                // loop through all the branchPathTaken events\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n\n                    if (branchPathTakenEvent != null) {\n                        var data = branchPathTakenEvent.data;\n\n                        if (data != null) {\n                            // get the from and to node ids of the event\n                            var fromNodeId = data.fromNodeId;\n                            var toNodeId = data.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                                // the from and to node ids match the ones we are looking for\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isVisited criteria was satisfied\n     * @param criteria the isVisited criteria\n     * @returns whether the node id is visited\n     */\n    evaluateIsVisitedCriteria(criteria) {\n\n        var isVisited = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            var nodeId = criteria.params.nodeId;\n\n            // get all the events\n            var events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n                            // the student has entered the node before\n                            isVisited = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisited;\n    }\n\n    /**\n     * Check if the isVisitedAfter criteria was satisfied\n     * @param criteria the isVisitedAfter criteria\n     * @returns whether the node id is visited after the criteriaCreatedTimestamp\n     */\n    evaluateIsVisitedAfterCriteria(criteria) {\n\n        let isVisitedAfter = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n            // get all the events\n            let events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (let e = 0; e < events.length; e++) {\n                    let event = events[e];\n\n                    if (event != null) {\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n                            // the student has entered the node after the criteriaCreatedTimestamp\n                            isVisitedAfter = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisitedAfter;\n    }\n\n    /**\n     * Check if the isVisitedAndRevisedAfter criteria was satisfied\n     * @param criteria the isVisitedAndRevisedAfter criteria\n     * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\n     */\n    evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\n\n        let isVisitedAndRevisedAfter = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n            let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n            let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n            // get all the events\n            let events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (let e = 0; e < events.length; e++) {\n                    let event = events[e];\n\n                    if (event != null) {\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n                            // the student has entered the node after the criteriaCreatedTimestamp.\n                            // now check if student has revised the work after this event\n                            let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n                            if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\n                                isVisitedAndRevisedAfter = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisitedAndRevisedAfter;\n    }\n\n    /**\n     * Get all the branchPathTaken events by node id\n     * @params fromNodeId the from node id\n     * @returns all the branchPathTaken events from the given node id\n     */\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\n\n        var branchPathTakenEvents = [];\n        var events = this.studentData.events;\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n                        // we have found a branchPathTaken event from the from node id\n                        branchPathTakenEvents.push(event);\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenEvents;\n    }\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';  // Assume MC component.\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the score criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateScoreCriteria(criteria) {\n\n        var result = false;\n\n        var params = criteria.params;\n\n        if (params != null) {\n\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var scores = params.scores;\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var scoreType = 'any';\n\n            if (nodeId != null && componentId != null && scores != null) {\n\n                // get the latest score annotation\n                var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n                if (latestScoreAnnotation != null) {\n\n                    // get the score value\n                    var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n                    // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\n                    if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\n                        /*\n                         * the student has received a score that matches a score\n                         * we're looking for\n                         */\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param events the events\n     */\n    populateHistories(events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateStackHistory(event.nodeId);\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    /**\n     * Returns all NodeStates\n     * @returns Array of all NodeStates\n     */\n    getNodeStates() {\n        let nodeStates = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            nodeStates = this.studentData.nodeStates;\n        }\n\n        return nodeStates;\n    };\n\n    /**\n     * Get all NodeStates for a specific node\n     * @param nodeId id of node\n     * @returns Array of NodeStates for the specified node\n     */\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    if (annotation.id == null) {\n                        // add to local annotation array if this annotation has not been saved to the server before.\n                        this.addAnnotation(annotation);\n                    }\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.isPreview()) {\n            var savedStudentDataResponse = {\n                studentWorkList: studentWorkList,\n                events: events,\n                annotations: annotations\n            };\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            this.saveToServerSuccess(savedStudentDataResponse);\n            let deferred = this.$q.defer();\n            deferred.resolve(savedStudentDataResponse);\n            return deferred.promise;\n        } else {\n            // set the workgroup id and run id\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.studentWorkList = angular.toJson(studentWorkList);\n            params.events = angular.toJson(events);\n            params.annotations = angular.toJson(annotations);\n\n            // get the url to POST the student data\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            // make the request to post the student data\n            return this.$http(httpParams).then(\n                result => {\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\n                    if (result != null && result.data != null) {\n                        var savedStudentDataResponse = result.data;\n\n                        this.saveToServerSuccess(savedStudentDataResponse);\n\n                        return savedStudentDataResponse;\n                    }\n                }, result => {\n                    // a server error occured\n                    return null;\n                }\n            );\n        }\n    };\n\n    saveToServerSuccess(savedStudentDataResponse) {\n        // set dummy serverSaveTime for use if we're in preview mode\n        let serverSaveTime = Date.parse(new Date());\n\n        // handle saved studentWork\n        if (savedStudentDataResponse.studentWorkList) {\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n            let localStudentWorkList = this.studentData.componentStates;\n            if (this.studentData.nodeStates) {\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n            }\n\n            // set the id and serverSaveTime in the local studentWorkList\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\n                var savedStudentWork = savedStudentWorkList[i];\n\n                /*\n                 * loop through all the student work that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                    var localStudentWork = localStudentWorkList[l];\n                    if (localStudentWork.requestToken &&\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\n                        localStudentWork.id = savedStudentWork.id;\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                        break;\n                    }\n                }\n            }\n        }\n        // handle saved events\n        if (savedStudentDataResponse.events) {\n            var savedEvents = savedStudentDataResponse.events;\n\n            var localEvents = this.studentData.events;\n\n            // set the id and serverSaveTime in the local event\n            for (var i = 0; i < savedEvents.length; i++) {\n                var savedEvent = savedEvents[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localEvents.length - 1; l >= 0; l--) {\n                    var localEvent = localEvents[l];\n                    if (localEvent.requestToken &&\n                        localEvent.requestToken === savedEvent.requestToken) {\n                        localEvent.id = savedEvent.id;\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n                        localEvent.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                        break;\n                    }\n                }\n            }\n        }\n\n        // handle saved annotations\n        if (savedStudentDataResponse.annotations) {\n            var savedAnnotations = savedStudentDataResponse.annotations;\n\n            var localAnnotations = this.studentData.annotations;\n\n            // set the id and serverSaveTime in the local annotation\n            for (var i = 0; i < savedAnnotations.length; i++) {\n                var savedAnnotation = savedAnnotations[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                    var localAnnotation = localAnnotations[l];\n                    if (localAnnotation.requestToken &&\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n                        localAnnotation.id = savedAnnotation.id;\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.updateNodeStatuses();\n\n    };\n\n    /**\n     * POSTs student status to server\n     * Returns a promise of the POST request\n     */\n    saveStudentStatus() {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n            var studentStatusURL = this.ConfigService.getStudentStatusURL();\n            if (studentStatusURL != null) {\n                var runId = this.ConfigService.getRunId();\n                var periodId = this.ConfigService.getPeriodId();\n                var workgroupId = this.ConfigService.getWorkgroupId();\n\n                // get the current node id\n                var currentNodeId = this.getCurrentNodeId();\n\n                // get the node statuses\n                var nodeStatuses = this.getNodeStatuses();\n\n                // get the latest component state\n                var latestComponentState = this.getLatestComponentState();\n\n                // get the project completion percentage\n                var projectCompletion = this.getProjectCompletion();\n\n                // create the JSON that will be saved to the database\n                var studentStatusJSON = {};\n                studentStatusJSON.runId = runId;\n                studentStatusJSON.periodId = periodId;\n                studentStatusJSON.workgroupId = workgroupId;\n                studentStatusJSON.currentNodeId = currentNodeId;\n                studentStatusJSON.previousComponentState = latestComponentState;\n                studentStatusJSON.nodeStatuses = nodeStatuses;\n                studentStatusJSON.projectCompletion = projectCompletion;\n\n                // get the student status as a string\n                var status = angular.toJson(studentStatusJSON);\n\n                /*\n                 * create the params for the message that will be sent\n                 * to the StudentStatusController and saved in the\n                 * database\n                 */\n                var studentStatusParams = {};\n                studentStatusParams.runId = runId;\n                studentStatusParams.periodId = periodId;\n                studentStatusParams.workgroupId = workgroupId;\n                studentStatusParams.status = status;\n\n                // get the url to POST the student data\n                var httpParams = {};\n                httpParams.method = 'POST';\n                httpParams.url = studentStatusURL;\n                httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n                httpParams.data = $.param(studentStatusParams);\n\n                // make the request to post the student status\n                return this.$http(httpParams).then(\n                    result => {\n                        return true;\n                    }, result => {\n                        // a server error occured\n                        return false;\n                    }\n                );\n            }\n        }\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Check whether the component has unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    isComponentSubmitDirty() {\n        let submitDirty = false;\n\n        let latestComponentState = this.getLatestComponentState();\n        if (latestComponentState && !latestComponentState.isSubmit) {\n            submitDirty = true;\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Get the latest NodeState for the specified node id\n     * @param nodeId the node id\n     * @return the latest node state with the matching node id or null if none are found\n     */\n    getLatestNodeStateByNodeId(nodeId) {\n        let latestNodeState = null;\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n        }\n        return latestNodeState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id (optional)\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates) {\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id and component id\n                            if (nodeId === componentStateNodeId) {\n                                if (componentId) {\n                                    var componentStateComponentId = componentState.componentId;\n                                    if (componentId === componentStateComponentId) {\n                                        latestComponentState = componentState;\n                                        break;\n                                    }\n                                } else {\n                                    latestComponentState = componentState;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Returns all the component states for this workgroup\n     */\n    getComponentStates() {\n        return this.studentData.componentStates;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get all events\n     * @returns all events for the student\n     */\n    getEvents() {\n        if (this.studentData != null && this.studentData.events != null) {\n            return this.studentData.events;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group are visible and completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n                if (nodeIds.length) {\n                    for (var n=0; n<nodeIds.length; n++) {\n                        var id = nodeIds[n];\n\n                        if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n                            // the child is not visible or not completed so the group is not completed\n                            tempResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n                    tempResult = false;\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                // we will default to is completed true\n                var tempResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempNode = node;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempNode = this.ProjectService.getNodeById(tempNodeId);\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\n\n                                    tempResult = tempResult && isComponentCompleted;\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for component with id ' + tempComponentId);\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ) {\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )) {\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n\n    /**\n     * Get the project completion for the signed in student\n     * @returns the project completion percentage for the signed in student\n     */\n    getProjectCompletion() {\n\n        // group0 is always the root node of the whole project\n        var nodeId = 'group0';\n\n        // get the progress including all of the children nodes\n        var progress = this.getNodeProgressById(nodeId);\n\n        return progress;\n    }\n\n    /**\n     * Get the run status\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Get the next available planning node instance node id\n     * @returns the next available planning node instance node id\n     */\n    getNextAvailablePlanningNodeId() {\n\n        // used to keep track of the highest planning node number we have found, which is 1-based\n        let currentMaxPlanningNodeNumber = 1;\n\n        let nodeStates = this.getNodeStates();\n\n        if (nodeStates != null) {\n\n            // loop through all the NodeStates\n            for (var ns = 0; ns < nodeStates.length; ns++) {\n                let nodeState = nodeStates[ns];\n\n                if (nodeState != null) {\n                    let nodeStateNodeId = nodeState.nodeId;\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n                        let nodes = nodeState.studentData.nodes;\n                        for (var n = 0; n < nodes.length; n++) {\n                            let node = nodes[n];\n                            let nodeId = node.id;\n                            // regex to match the planning node id e.g. planningNode2\n                            let planningNodeIdRegEx = /planningNode(.*)/;\n\n                            // run the regex on the node id\n                            let result = nodeId.match(planningNodeIdRegEx);\n\n                            if (result != null) {\n                                // we have found a planning node instance node id\n\n                                /*\n                                 * get the number part of the planning node instance node id\n                                 * e.g. if the nodeId is planningNode2, the number part\n                                 * would be 2\n                                 */\n                                let planningNodeNumber = parseInt(result[1]);\n\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                                    /*\n                                     * update the max number part if we have found a new\n                                     * higher number\n                                     */\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n        }\n\n        // Increment maxPlanningNodeNumber each time this function is called.\n        this.maxPlanningNodeNumber++;\n\n        // return the next available planning node instance node id\n        return 'planningNode' + this.maxPlanningNodeNumber;\n    }\n\n    /**\n     * Get the annotations\n     * @returns the annotations\n     */\n    getAnnotations() {\n        var annotations = null;\n\n        if (this.studentData != null && this.studentData.annotations != null) {\n            annotations = this.studentData.annotations;\n        }\n\n        return annotations;\n    }\n\n    /**\n     * Get the latest component states for a node\n     * @param nodeId get the component states for the node i\n     * @return an array containing the work for the node\n     */\n    getLatestComponentStatesByNodeId(nodeId) {\n\n        var latestComponentStates = [];\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n\n                // get the node\n                var node = this.ProjectService.getNodeById(nodeId);\n\n                if (node != null) {\n\n                    // get the components in the node\n                    var components = node.components;\n\n                    if (components != null) {\n\n                        // loop through all the components\n                        for (var c = 0; c < components.length; c++) {\n                            var component = components[c];\n\n                            if (component != null) {\n                                var componentId = component.id;\n\n                                // get the latest component state for the component\n                                var componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                                if (componentState == null) {\n                                    /*\n                                     * there is no component state for the component so we will\n                                     * create an object that just contains the node id and\n                                     * component id\n                                     */\n                                    componentState = {};\n                                    componentState.nodeId = nodeId;\n                                    componentState.componentId = componentId;\n                                }\n\n                                latestComponentStates.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentStates;\n    }\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;\n"]}