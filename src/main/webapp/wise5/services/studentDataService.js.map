{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","ProjectService","UtilService","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxPlanningNodeNumber","isPreview","componentStates","nodeStates","events","annotations","userName","userId","setAnnotations","populateHistories","updateNodeStatuses","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","data","studentWorkList","s","length","studentWork","componentId","push","project","nodes","p","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","g","depth","getNodeDepth","sort","a","b","i","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","isVisible","isVisibleResults","isVisitableResults","firstResult","c","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","progress","getNodeProgressById","icon","getNodeIconByNodeId","removalCriteria","evaluateNodeConstraint","visitedNodes","getVisitedNodesHistory","transitionsToNodeId","v","visitedNodeId","transitions","getTransitionsByFromAndToNodeId","isStartNode","removalConditional","tempCriteria","evaluateCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsCompletedCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","e","event","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","indexOf","updateStackHistory","updateVisitedNodesHistory","index","stackHistoryResult","indexOfNodeId","splice","componentState","timestamp","Date","parse","nodeStatesByNodeId","tempNodeId","annotation","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","periodId","getPeriodId","clientSaveTime","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","serverSaveTime","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","latestComponentState","submitDirty","getLatestComponentState","isSubmit","latestNodeState","allNodeStatesByNodeId","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","completedItems","totalItems","nodeIds","getChildNodeIdsById","status","completedGroupItems","totalGroupItems","completionPct","Math","round","getComponentStatesByNodeIdAndComponentId","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","getNodeById","isGroup","components","getComponentsByNodeId","showPreviousWorkNodeId","showPreviousWorkComponentId","tempComponentId","tempComponent","isComponentCompleted","console","log","currentNodeId","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n        this.runStatus = null;\n\n        this.maxPlanningNodeNumber = 0;\n    }\n\n    retrieveStudentData() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.nodeStates = [];\n            this.studentData.events = [];\n            this.studentData.annotations = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // set the annotations into the annotation service\n            this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n            // populate the student history\n            this.populateHistories(this.studentData.events);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then((result) => {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // Check to see if this Project contains any Planning activities\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\n                            if (planningGroupNode.planning) {\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                                if (lastestNodeStateForPlanningGroupNode != null) {\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                                    if (studentModifiedNodes != null) {\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                                            let studentModifiedNodeId = studentModifiedNode.id;\n                                            if (studentModifiedNode.planning) {\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                                                    }\n                                                }\n                                            } else {\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        // Re-parse the project with the modified changes\n                        this.ProjectService.parseProject();\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // populate the student history\n                    this.populateHistories(this.studentData.events);\n\n                    // update the node statuses\n                    this.updateNodeStatuses();\n                }\n\n                return this.studentData;\n            });\n        }\n    };\n\n    /**\n     * Retrieve the run status\n     */\n    retrieveRunStatus() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n            this.runStatus = {};\n        } else {\n            // we are in a run\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            //create the params for the request\n            var params = {\n                runId:runId\n            };\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.url = runStatusURL;\n            httpParams.params = params;\n\n            // make the request for the run status\n            return this.$http(httpParams).then((result) => {\n                if (result != null) {\n                    var data = result.data;\n                    if (data != null) {\n                        // remember the run status\n                        this.runStatus = data;\n                    }\n                }\n            });\n        }\n    }\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        let nodes = this.ProjectService.getNodes();\n        let planningNodes = this.ProjectService.getPlanningNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n            if (planningNodes != null) {\n                nodes = nodes.concat(planningNodes);\n            }\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n            }\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    /**\n     * Update the node status for a node\n     * @param node the node to update\n     */\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (this.ConfigService.getConfigParam('constraints') == false) {\n                /*\n                 * constraints have been disabled, most likely because we are\n                 * in preview without constraints mode\n                 */\n                constraintsForNode = null;\n            }\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n            var removalConditional = constraintForNode.removalConditional;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria\n\n                            if (removalConditional === 'any') {\n                                // any of the criteria can be true to remove the constraint\n                                result = result || tempResult;\n                            } else {\n                                // all the criteria need to be true to remove the constraint\n                                result = result && tempResult;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n\n            var functionName = criteria.name;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n                result = this.evaluateIsVisitedCriteria(criteria);\n            } else if (functionName === 'isCompleted') {\n                result = this.evaluateIsCompletedCriteria(criteria);\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === 'isPlanningActivityCompleted') {\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n            } else if (functionName === 'score') {\n                result = this.evaluateScoreCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isCompleted criteria was satisfied\n     * @param criteria an isCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            var params = criteria.params;\n            var nodeId = params.nodeId;\n\n            result = this.isCompleted(nodeId);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the isPlanningActivityCompleted criteria was satisfied\n     * @param criteria a isPlanningActivityCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            var params = criteria.params;\n\n            // get the group id\n            var nodeId = params.nodeId;\n\n            // get the number of planning steps the student needs to create\n            var planningStepsCreated = params.planningStepsCreated;\n\n            // get whether the student needs to complete all the steps in the activity\n            var planningStepsCompleted = params.planningStepsCompleted;\n\n            var planningStepsCreatedSatisfied = false;\n            var planningStepsCompletedSatisfied = false;\n\n            var planningNodes = [];\n\n            if (planningStepsCreated == null) {\n                // there is no value set so we will regard it as satisfied\n                planningStepsCreatedSatisfied = true;\n            } else {\n                /*\n                 * there is a value for number of planning steps that need to be created\n                 * so we will check if the student created enough planning steps\n                 */\n\n                // get the node states for the activity\n                var nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n                if (nodeStates != null) {\n\n                    /*\n                     * loop through all the node states from newest to oldest\n                     * for the sake of efficiency\n                     */\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n\n                        var planningStepCount = 0;\n\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n\n                            // get the student data\n                            var studentData = nodeState.studentData;\n\n                            if (studentData != null) {\n\n                                // get the nodes\n                                var nodes = studentData.nodes;\n\n                                if (nodes != null) {\n\n                                    // loop through the nodes\n                                    for (var n = 0; n < nodes.length; n++) {\n                                        var node = nodes[n];\n\n                                        if (node != null) {\n                                            if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                                                // we have found a planning step the student created\n                                                planningStepCount++;\n                                            }\n                                        }\n                                    }\n\n                                    if (planningStepCount >= planningStepsCreated) {\n                                        // the student has created a sufficient number of planning steps\n                                        planningStepsCreatedSatisfied = true;\n                                        planningNodes = nodes;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (planningStepsCompleted == null) {\n                planningStepsCompletedSatisfied = true;\n            } else {\n                /*\n                 * check if the activity is completed. this checks if all\n                 * the children of the activity are completed.\n                 */\n                if (this.isCompleted(nodeId)) {\n                    planningStepsCompletedSatisfied = true;\n                }\n            }\n\n            if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if this branchPathTaken criteria was satisfied\n     * @param criteria a branchPathTaken criteria\n     * @returns whether the branchPathTaken criteria was satisfied\n     */\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            // get the expected from and to node ids\n            var expectedFromNodeId = criteria.params.fromNodeId;\n            var expectedToNodeId = criteria.params.toNodeId;\n\n            // get all the branchPathTaken events from the from node id\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n            if (branchPathTakenEvents != null) {\n\n                // loop through all the branchPathTaken events\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n\n                    if (branchPathTakenEvent != null) {\n                        var data = branchPathTakenEvent.data;\n\n                        if (data != null) {\n                            // get the from and to node ids of the event\n                            var fromNodeId = data.fromNodeId;\n                            var toNodeId = data.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                                // the from and to node ids match the ones we are looking for\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isVisited criteria was satisfied\n     * @param criteria the isVisited criteria\n     * @returns whether the node id is visited\n     */\n    evaluateIsVisitedCriteria(criteria) {\n\n        var isVisited = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            var nodeId = criteria.params.nodeId;\n\n            // get all the events\n            var events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n                            // the student has entered the node before\n                            isVisited = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisited;\n    }\n\n    /**\n     * Get all the branchPathTaken events by node id\n     * @params fromNodeId the from node id\n     * @returns all the branchPathTaken events from the given node id\n     */\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\n\n        var branchPathTakenEvents = [];\n        var events = this.studentData.events;\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n                        // we have found a branchPathTaken event from the from node id\n                        branchPathTakenEvents.push(event);\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenEvents;\n    }\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';  // Assume MC component.\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the score criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateScoreCriteria(criteria) {\n\n        var result = false;\n\n        var params = criteria.params;\n\n        if (params != null) {\n\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var scores = params.scores;\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var scoreType = 'any';\n\n            if (nodeId != null && componentId != null && scores != null) {\n\n                // get the latest score annotation\n                var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n                if (latestScoreAnnotation != null) {\n\n                    // get the score value\n                    var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n                    // check if the score value matches what the criteria is looking for\n                    if (scores.indexOf(scoreValue) != -1) {\n                        /*\n                         * the student has received a score that matches a score\n                         * we're looking for\n                         */\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param events the events\n     */\n    populateHistories(events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateStackHistory(event.nodeId);\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    /**\n     * Returns all NodeStates\n     * @returns Array of all NodeStates\n     */\n    getNodeStates() {\n        let nodeStates = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            nodeStates = this.studentData.nodeStates;\n        }\n\n        return nodeStates;\n    };\n\n    /**\n     * Get all NodeStates for a specific node\n     * @param nodeId id of node\n     * @returns Array of NodeStates for the specified node\n     */\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    this.addAnnotation(annotation);\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.isPreview()) {\n            var savedStudentDataResponse = {\n                studentWorkList: studentWorkList,\n                events: events,\n                annotations: annotations\n            };\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            this.saveToServerSuccess(savedStudentDataResponse);\n            let deferred = this.$q.defer();\n            deferred.resolve(savedStudentDataResponse);\n            return deferred.promise;\n        } else {\n            // set the workgroup id and run id\n            var params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.studentWorkList = angular.toJson(studentWorkList);\n            params.events = angular.toJson(events);\n            params.annotations = angular.toJson(annotations);\n\n            // get the url to POST the student data\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            // make the request to post the student data\n            return this.$http(httpParams).then(\n                result => {\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\n                    if (result != null && result.data != null) {\n                        var savedStudentDataResponse = result.data;\n\n                        this.saveToServerSuccess(savedStudentDataResponse);\n\n                        return savedStudentDataResponse;\n                    }\n                }, result => {\n                    // a server error occured\n                    return null;\n                }\n            );\n        }\n    };\n\n    saveToServerSuccess(savedStudentDataResponse) {\n        // set dummy serverSaveTime for use if we're in preview mode\n        let serverSaveTime = Date.parse(new Date());\n\n        // handle saved studentWork\n        if (savedStudentDataResponse.studentWorkList) {\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n            let localStudentWorkList = this.studentData.componentStates;\n            if (this.studentData.nodeStates) {\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n            }\n\n            // set the id and serverSaveTime in the local studentWorkList\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\n                var savedStudentWork = savedStudentWorkList[i];\n\n                /*\n                 * loop through all the student work that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                    var localStudentWork = localStudentWorkList[l];\n                    if (localStudentWork.requestToken &&\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\n                        localStudentWork.id = savedStudentWork.id;\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                        break;\n                    }\n                }\n            }\n        }\n        // handle saved events\n        if (savedStudentDataResponse.events) {\n            var savedEvents = savedStudentDataResponse.events;\n\n            var localEvents = this.studentData.events;\n\n            // set the id and serverSaveTime in the local event\n            for (var i = 0; i < savedEvents.length; i++) {\n                var savedEvent = savedEvents[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localEvents.length - 1; l >= 0; l--) {\n                    var localEvent = localEvents[l];\n                    if (localEvent.requestToken &&\n                        localEvent.requestToken === savedEvent.requestToken) {\n                        localEvent.id = savedEvent.id;\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n                        localEvent.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                        break;\n                    }\n                }\n            }\n        }\n\n        // handle saved annotations\n        if (savedStudentDataResponse.annotations) {\n            var savedAnnotations = savedStudentDataResponse.annotations;\n\n            var localAnnotations = this.studentData.annotations;\n\n            // set the id and serverSaveTime in the local annotation\n            for (var i = 0; i < savedAnnotations.length; i++) {\n                var savedAnnotation = savedAnnotations[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                    var localAnnotation = localAnnotations[l];\n                    if (localAnnotation.requestToken &&\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n                        localAnnotation.id = savedAnnotation.id;\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.updateNodeStatuses();\n\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Check whether the component has unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    isComponentSubmitDirty() {\n        let submitDirty = false;\n\n        let latestComponentState = this.getLatestComponentState();\n        if (latestComponentState && !latestComponentState.isSubmit) {\n            submitDirty = true;\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Get the latest NodeState for the specified node id\n     * @param nodeId the node id\n     * @return the latest node state with the matching node id or null if none are found\n     */\n    getLatestNodeStateByNodeId(nodeId) {\n        let latestNodeState = null;\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n        }\n        return latestNodeState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id (optional)\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates) {\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id and component id\n                            if (nodeId === componentStateNodeId) {\n                                if (componentId) {\n                                    var componentStateComponentId = componentState.componentId;\n                                    if (componentId === componentStateComponentId) {\n                                        latestComponentState = componentState;\n                                        break;\n                                    }\n                                } else {\n                                    latestComponentState = componentState;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Returns all the component states for this workgroup\n     */\n    getComponentStates() {\n        return this.studentData.componentStates;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get all events\n     * @returns all events for the student\n     */\n    getEvents() {\n        if (this.studentData != null && this.studentData.events != null) {\n            return this.studentData.events;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group are visible and completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n                if (nodeIds.length) {\n                    for (var n=0; n<nodeIds.length; n++) {\n                        var id = nodeIds[n];\n\n                        if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n                            // the child is not visible or not completed so the group is not completed\n                            tempResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n                    tempResult = false;\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                var tempResult = false;\n                var firstResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, node);\n\n                                    if (firstResult) {\n                                        // this is the first component we have looked at\n                                        tempResult = isComponentCompleted;\n                                        firstResult = false;\n                                    } else {\n                                        // this is not the first component we have looked at\n                                        tempResult = tempResult && isComponentCompleted;\n                                    }\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for component with id ' + tempComponentId);\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ) {\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )) {\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n\n    /**\n     * Get the project completion for the signed in student\n     * @returns the project completion percentage for the signed in student\n     */\n    getProjectCompletion() {\n\n        // group0 is always the root node of the whole project\n        var nodeId = 'group0';\n\n        // get the progress including all of the children nodes\n        var progress = this.getNodeProgressById(nodeId);\n\n        return progress;\n    }\n\n    /**\n     * Get the run status\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Get the next available planning node instance node id\n     * @returns the next available planning node instance node id\n     */\n    getNextAvailablePlanningNodeId() {\n\n        // used to keep track of the highest planning node number we have found, which is 1-based\n        let currentMaxPlanningNodeNumber = 1;\n\n        let nodeStates = this.getNodeStates();\n\n        if (nodeStates != null) {\n\n            // loop through all the NodeStates\n            for (var ns = 0; ns < nodeStates.length; ns++) {\n                let nodeState = nodeStates[ns];\n\n                if (nodeState != null) {\n                    let nodeStateNodeId = nodeState.nodeId;\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n                        let nodes = nodeState.studentData.nodes;\n                        for (var n = 0; n < nodes.length; n++) {\n                            let node = nodes[n];\n                            let nodeId = node.id;\n                            // regex to match the planning node id e.g. planningNode2\n                            let planningNodeIdRegEx = /planningNode(.*)/;\n\n                            // run the regex on the node id\n                            let result = nodeId.match(planningNodeIdRegEx);\n\n                            if (result != null) {\n                                // we have found a planning node instance node id\n\n                                /*\n                                 * get the number part of the planning node instance node id\n                                 * e.g. if the nodeId is planningNode2, the number part\n                                 * would be 2\n                                 */\n                                let planningNodeNumber = parseInt(result[1]);\n\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                                    /*\n                                     * update the max number part if we have found a new\n                                     * higher number\n                                     */\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n        }\n\n        // Increment maxPlanningNodeNumber each time this function is called.\n        this.maxPlanningNodeNumber++;\n\n        // return the next available planning node instance node id\n        return 'planningNode' + this.maxPlanningNodeNumber;\n    }\n\n    /**\n     * Get the annotations\n     * @returns the annotations\n     */\n    getAnnotations() {\n        var annotations = null;\n\n        if (this.studentData != null && this.studentData.annotations != null) {\n            annotations = this.studentData.annotations;\n        }\n\n        return annotations;\n    }\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;\n"]}