{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$filter","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","ProjectService","UtilService","$translate","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxPlanningNodeNumber","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","i","length","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","annotation","handleAnnotationReceived","isPreview","componentStates","nodeStates","events","userName","userId","setAnnotations","populateHistories","updateNodeStatuses","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","s","studentWork","componentId","push","project","nodes","p","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","g","depth","getNodeDepth","sort","a","b","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","isVisible","isVisibleResults","isVisitableResults","firstResult","c","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","progress","getNodeProgressById","icon","getNodeIconByNodeId","removalCriteria","evaluateNodeConstraint","visitedNodes","getVisitedNodesHistory","transitionsToNodeId","v","visitedNodeId","transitions","getTransitionsByFromAndToNodeId","isStartNode","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsRevisedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateIsCorrectCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","evaluateUsedXSubmitsCriteria","getComponentStatesByNodeIdAndComponentId","componentState","isCorrect","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","e","isVisitedAfter","isVisitedAfterNodeId","criteriaCreatedTimestamp","clientSaveTime","isRevisedAfter","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","isVisitedAndRevisedAfter","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","indexOf","toString","requiredSubmitCount","manualSubmitCounter","highestSubmitCounter","isSubmit","submitCounter","updateStackHistory","updateVisitedNodesHistory","index","stackHistoryResult","indexOfNodeId","splice","timestamp","nodeStatesByNodeId","tempNodeId","notebookItemId","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","serverSaveTime","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","latestComponentState","getLatestComponentState","projectCompletion","getProjectCompletion","studentStatusJSON","previousComponentState","status","studentStatusParams","submitDirty","latestNodeState","allNodeStatesByNodeId","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","eventName","getNodeById","isActive","completedItems","totalItems","nodeIds","getChildNodeIdsById","completedGroupItems","totalGroupItems","completionPct","Math","round","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","isGroup","components","getComponentsByNodeId","showPreviousWorkNodeId","showPreviousWorkComponentId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","completionCriteria","inOrder","tempTimestamp","completionCriterion","tempComponentState","getComponentStateSubmittedAfter","getComponentStateSavedAfter","tempEvent","getVisitEventAfter","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["\r\nclass StudentDataService {\r\n    constructor($filter,\r\n                $http,\r\n                $injector,\r\n                $q,\r\n                $rootScope,\r\n                AnnotationService,\r\n                ConfigService,\r\n                ProjectService,\r\n                UtilService) {\r\n\r\n        this.$filter = $filter;\r\n        this.$http = $http;\r\n        this.$injector = $injector;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.currentNode = null;\r\n        this.previousStep = null;\r\n        this.studentData = null;\r\n        this.stackHistory = [];  // array of node id's\r\n        this.visitedNodesHistory = [];\r\n        this.nodeStatuses = {};\r\n        this.runStatus = null;\r\n\r\n        this.maxPlanningNodeNumber = 0;\r\n\r\n        // listen for node status changes\r\n        this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\r\n            // calculate active global annotations and group them by group name as needed\r\n            this.AnnotationService.calculateActiveGlobalAnnotationGroups();\r\n\r\n            // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\r\n            let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\r\n            globalAnnotationGroups.map((globalAnnotationGroup) => {\r\n                let globalAnnotations = globalAnnotationGroup.annotations;\r\n                globalAnnotations.map((globalAnnotation) => {\r\n                    if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\r\n                        let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\r\n                        let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\r\n                        if (unGlobalizeCriteriaArray != null) {\r\n                            if (unGlobalizeConditional === \"any\") {\r\n                                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\r\n                                let anySatified = false;\r\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\r\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\r\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\r\n                                    anySatified = anySatified || unGlobalizeCriteriaResult;\r\n                                }\r\n                                if (anySatified) {\r\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\r\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\r\n                                }\r\n                            } else if (unGlobalizeConditional === \"all\") {\r\n                                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\r\n                                let allSatisfied = true;\r\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\r\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\r\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\r\n                                    allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\r\n                                }\r\n                                if (allSatisfied) {\r\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\r\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'newAnnotationReceived' event which is fired when\r\n         * student receives a new annotation from the server\r\n         */\r\n        this.$rootScope.$on('newAnnotationReceived', (event, args) => {\r\n            if (args) {\r\n                // get the annotation that was saved to the server\r\n                let annotation = args.annotation;\r\n                this.handleAnnotationReceived(annotation);\r\n            }\r\n        });\r\n    }\r\n\r\n    retrieveStudentData() {\r\n\r\n        if (this.ConfigService.isPreview()) {\r\n            // we are previewing the project\r\n\r\n            // initialize dummy student data\r\n            this.studentData = {};\r\n            this.studentData.componentStates = [];\r\n            this.studentData.nodeStates = [];\r\n            this.studentData.events = [];\r\n            this.studentData.annotations = [];\r\n            this.studentData.userName = this.$translate('PREVIEW_STUDENT');\r\n            this.studentData.userId = '0';\r\n\r\n            // set the annotations into the annotation service\r\n            this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n\r\n            // populate the student history\r\n            this.populateHistories(this.studentData.events);\r\n\r\n            // update the node statuses\r\n            this.updateNodeStatuses();\r\n        } else {\r\n            // we are in a run\r\n\r\n            // get the url to get the student data\r\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\r\n\r\n            var httpParams = {};\r\n            httpParams.method = 'GET';\r\n            httpParams.url = studentDataURL;\r\n\r\n            // set the workgroup id and run id\r\n            var params = {};\r\n            params.workgroupId = this.ConfigService.getWorkgroupId();\r\n            params.runId = this.ConfigService.getRunId();\r\n            params.getStudentWork = true;\r\n            params.getEvents = true;\r\n            params.getAnnotations = true;\r\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n            httpParams.params = params;\r\n\r\n            // make the request for the student data\r\n            return this.$http(httpParams).then((result) => {\r\n                var resultData = result.data;\r\n                if (resultData != null) {\r\n\r\n                    this.studentData = {};\r\n\r\n                    // get student work\r\n                    this.studentData.componentStates = [];\r\n                    this.studentData.nodeStates = [];\r\n                    var studentWorkList = resultData.studentWorkList;\r\n                    for (var s = 0; s < studentWorkList.length; s++) {\r\n                        var studentWork = studentWorkList[s];\r\n                        if (studentWork.componentId != null) {\r\n                            this.studentData.componentStates.push(studentWork);\r\n                        } else {\r\n                            this.studentData.nodeStates.push(studentWork);\r\n                        }\r\n                    }\r\n\r\n                    // Check to see if this Project contains any Planning activities\r\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\r\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\r\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\r\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\r\n                            if (planningGroupNode.planning) {\r\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\r\n                                if (lastestNodeStateForPlanningGroupNode != null) {\r\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\r\n                                    if (studentModifiedNodes != null) {\r\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\r\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\r\n                                            let studentModifiedNodeId = studentModifiedNode.id;\r\n                                            if (studentModifiedNode.planning) {\r\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\r\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\r\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\r\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\r\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\r\n                                                    }\r\n                                                }\r\n                                            } else {\r\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\r\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        // Re-parse the project with the modified changes\r\n                        this.ProjectService.parseProject();\r\n                    }\r\n\r\n                    // get events\r\n                    this.studentData.events = resultData.events;\r\n\r\n                    // get annotations\r\n                    this.studentData.annotations = resultData.annotations;\r\n\r\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n\r\n                    // populate the student history\r\n                    this.populateHistories(this.studentData.events);\r\n\r\n                    // update the node statuses\r\n                    this.updateNodeStatuses();\r\n                }\r\n\r\n                return this.studentData;\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieve the run status\r\n     */\r\n    retrieveRunStatus() {\r\n\r\n        if (this.ConfigService.isPreview()) {\r\n            // we are previewing the project\r\n            this.runStatus = {};\r\n        } else {\r\n            // we are in a run\r\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\r\n            var runId = this.ConfigService.getConfigParam('runId');\r\n\r\n            //create the params for the request\r\n            var params = {\r\n                runId:runId\r\n            };\r\n\r\n            var httpParams = {};\r\n            httpParams.method = 'GET';\r\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n            httpParams.url = runStatusURL;\r\n            httpParams.params = params;\r\n\r\n            // make the request for the run status\r\n            return this.$http(httpParams).then((result) => {\r\n                if (result != null) {\r\n                    var data = result.data;\r\n                    if (data != null) {\r\n                        // remember the run status\r\n                        this.runStatus = data;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getNodeStatuses() {\r\n        return this.nodeStatuses;\r\n    };\r\n\r\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\r\n\r\n        if (nodeId != null && nodeStatus != null) {\r\n            var nodeStatuses = this.nodeStatuses;\r\n\r\n            if (nodeStatuses != null) {\r\n                nodeStatuses[nodeId] = nodeStatus;\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeStatusByNodeId(nodeId) {\r\n        var nodeStatus = null;\r\n\r\n        var nodeStatuses = this.nodeStatuses;\r\n\r\n        if (nodeId != null && nodeStatuses != null) {\r\n            nodeStatus = nodeStatuses[nodeId];\r\n        }\r\n\r\n        return nodeStatus;\r\n    };\r\n\r\n    updateNodeStatuses() {\r\n        let nodes = this.ProjectService.getNodes();\r\n        let planningNodes = this.ProjectService.getPlanningNodes();\r\n        var groups = this.ProjectService.getGroups();\r\n\r\n        if (nodes != null) {\r\n            if (planningNodes != null) {\r\n                nodes = nodes.concat(planningNodes);\r\n            }\r\n\r\n            for (var n = 0; n < nodes.length; n++) {\r\n                var node = nodes[n];\r\n                if (!this.ProjectService.isGroupNode(node.id)) {\r\n                    this.updateNodeStatusByNode(node);\r\n                }\r\n            }\r\n        }\r\n\r\n        var group;\r\n        if (groups != null) {\r\n            for (var g = 0; g < groups.length; g++) {\r\n                group = groups[g];\r\n                group.depth = this.ProjectService.getNodeDepth(group.id);\r\n            }\r\n\r\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\r\n            groups.sort(function(a, b) {\r\n                return b.depth - a.depth;\r\n            });\r\n\r\n            for (var i = 0; i < groups.length; i++) {\r\n                group = groups[i];\r\n                this.updateNodeStatusByNode(group);\r\n            }\r\n        }\r\n\r\n        this.$rootScope.$broadcast('nodeStatusesChanged');\r\n    };\r\n\r\n    /**\r\n     * Update the node status for a node\r\n     * @param node the node to update\r\n     */\r\n    updateNodeStatusByNode(node) {\r\n\r\n        if (node != null) {\r\n            var nodeId = node.id;\r\n\r\n            var tempNodeStatus = {};\r\n            tempNodeStatus.nodeId = nodeId;\r\n            tempNodeStatus.isVisitable = true;\r\n            tempNodeStatus.isCompleted = true;\r\n\r\n            // get the constraints that affect this node\r\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\r\n\r\n            if (this.ConfigService.getConfigParam('constraints') == false) {\r\n                /*\r\n                 * constraints have been disabled, most likely because we are\r\n                 * in preview without constraints mode\r\n                 */\r\n                constraintsForNode = null;\r\n            }\r\n\r\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\r\n                // this node does not have any constraints so it is clickable\r\n                tempNodeStatus.isVisible = true;\r\n                tempNodeStatus.isVisitable = true;\r\n            } else {\r\n\r\n                var isVisibleResults = [];\r\n                var isVisitableResults = [];\r\n\r\n                var result = false;\r\n                var firstResult = true;\r\n\r\n                // loop through all the constraints that affect this node\r\n                for (var c = 0; c < constraintsForNode.length; c++) {\r\n                    var constraintForNode = constraintsForNode[c];\r\n\r\n                    if (constraintForNode != null) {\r\n\r\n                        // evaluate the constraint to see if the node can be visited\r\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\r\n\r\n                        var action = constraintForNode.action;\r\n\r\n                        if (action != null) {\r\n                            if (action === 'makeThisNodeNotVisible') {\r\n                                isVisibleResults.push(tempResult);\r\n                            } else if (action === 'makeThisNodeNotVisitable') {\r\n                                isVisitableResults.push(tempResult);\r\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\r\n                                isVisibleResults.push(tempResult);\r\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\r\n                                isVisitableResults.push(tempResult);\r\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\r\n                                isVisibleResults.push(tempResult);\r\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\r\n                                isVisitableResults.push(tempResult);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var isVisible = true;\r\n                var isVisitable = true;\r\n\r\n                for (var a = 0; a < isVisibleResults.length; a++) {\r\n                    var isVisibleResult = isVisibleResults[a];\r\n\r\n                    isVisible = isVisible && isVisibleResult;\r\n                }\r\n\r\n                for (var b = 0; b < isVisitableResults.length; b++) {\r\n                    var isVisitableResult = isVisitableResults[b];\r\n\r\n                    isVisitable = isVisitable && isVisitableResult;\r\n                }\r\n\r\n                tempNodeStatus.isVisible = isVisible;\r\n                tempNodeStatus.isVisitable = isVisitable;\r\n            }\r\n\r\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\r\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\r\n\r\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\r\n\r\n            if (nodeStatus == null) {\r\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\r\n            } else {\r\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\r\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\r\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\r\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\r\n            }\r\n\r\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\r\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\r\n        }\r\n\r\n        //return nodeStatus;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the constraint\r\n     * @param node the node\r\n     * @param constraintForNode the constraint object\r\n     * @returns whether the node has satisfied the constraint\r\n     */\r\n    evaluateConstraint(node, constraintForNode) {\r\n        var result = false;\r\n\r\n        if (constraintForNode != null) {\r\n\r\n            var removalCriteria = constraintForNode.removalCriteria;\r\n\r\n            if (removalCriteria != null) {\r\n                result = this.evaluateNodeConstraint(node, constraintForNode);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the guided navigation constraint\r\n     * @param node the node\r\n     * @param constraintForNode the constraint object\r\n     * @returns whether the node can be visited or not\r\n     */\r\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\r\n\r\n        var result = false;\r\n\r\n        if (node != null) {\r\n            var nodeId = node.id;\r\n\r\n            if (this.isNodeVisited(nodeId)) {\r\n                // the node has been visited before so it should be clickable\r\n                result = true;\r\n            } else {\r\n\r\n                // get all the nodes that have been visited\r\n                var visitedNodes = this.getVisitedNodesHistory();\r\n\r\n                var transitionsToNodeId = [];\r\n\r\n                // loop through all the ndoes that have been visited\r\n                for (var v = 0; v < visitedNodes.length; v++) {\r\n                    var visitedNodeId = visitedNodes[v];\r\n\r\n                    // get the transitions from the visited node to the node status node\r\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\r\n\r\n                    // TODO: check if the transition can be used by the student\r\n\r\n                    // concat the node ids\r\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\r\n                }\r\n\r\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\r\n                    // there is a transition between the current node and the node status node\r\n\r\n                    /*\r\n                     * there are transitions from the current node to the node status node so\r\n                     * the node status node is clickable\r\n                     */\r\n                    result = true;\r\n                } else {\r\n                    /*\r\n                     * there is no transition between the visited nodes and the node status node\r\n                     * so we will set the node to be not clickable\r\n                     */\r\n                    result = false;\r\n                }\r\n\r\n                if (this.ProjectService.isStartNode(node)) {\r\n                    /*\r\n                     * the node is the start node of the project or a start node of a group\r\n                     * so we will make it clickable\r\n                     */\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the node constraint\r\n     * @param node the node\r\n     * @param constraintForNode the constraint object\r\n     * @returns whether the node satisifies the constraint\r\n     */\r\n    evaluateNodeConstraint(node, constraintForNode) {\r\n        var result = false;\r\n\r\n        if (constraintForNode != null) {\r\n            var removalCriteria = constraintForNode.removalCriteria;\r\n            var removalConditional = constraintForNode.removalConditional;\r\n\r\n            if (removalCriteria == null) {\r\n                result = true;\r\n            } else {\r\n                var firstResult = true;\r\n\r\n                // loop through all the criteria that need to be satisifed\r\n                for (var c = 0; c < removalCriteria.length; c++) {\r\n\r\n                    // get a criteria\r\n                    var tempCriteria = removalCriteria[c];\r\n\r\n                    if (tempCriteria != null) {\r\n\r\n                        // evaluate the criteria\r\n                        var tempResult = this.evaluateCriteria(tempCriteria);\r\n\r\n                        if (firstResult) {\r\n                            // this is the first criteria in this for loop\r\n                            result = tempResult;\r\n                            firstResult = false;\r\n                        } else {\r\n                            // this is not the first criteria\r\n\r\n                            if (removalConditional === 'any') {\r\n                                // any of the criteria can be true to remove the constraint\r\n                                result = result || tempResult;\r\n                            } else {\r\n                                // all the criteria need to be true to remove the constraint\r\n                                result = result && tempResult;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n    /**\r\n     * Evaluate the criteria\r\n     * @param criteria the criteria\r\n     * @returns whether the criteria is satisfied or not\r\n     */\r\n    evaluateCriteria(criteria) {\r\n\r\n        var result = false;\r\n\r\n        if (criteria != null) {\r\n\r\n            var functionName = criteria.name;\r\n\r\n            if (functionName == null) {\r\n\r\n            } else if (functionName === 'branchPathTaken') {\r\n                result = this.evaluateBranchPathTakenCriteria(criteria);\r\n            } else if (functionName === 'isVisible') {\r\n\r\n            } else if (functionName === 'isVisitable') {\r\n\r\n            } else if (functionName === 'isVisited') {\r\n                result = this.evaluateIsVisitedCriteria(criteria);\r\n            } else if (functionName === 'isVisitedAfter') {\r\n                result = this.evaluateIsVisitedAfterCriteria(criteria);\r\n            } else if (functionName === 'isRevisedAfter') {\r\n                result = this.evaluateIsRevisedAfterCriteria(criteria);\r\n            } else if (functionName === 'isVisitedAndRevisedAfter') {\r\n                result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\r\n            } else if (functionName === 'isCompleted') {\r\n                result = this.evaluateIsCompletedCriteria(criteria);\r\n            } else if (functionName === 'isCorrect') {\r\n                result = this.evaluateIsCorrectCriteria(criteria);\r\n            } else if (functionName === 'choiceChosen') {\r\n                result = this.evaluateChoiceChosenCriteria(criteria);\r\n            } else if (functionName === 'isPlanningActivityCompleted') {\r\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\r\n            } else if (functionName === 'score') {\r\n                result = this.evaluateScoreCriteria(criteria);\r\n            } else if (functionName === 'usedXSubmits') {\r\n                result = this.evaluateUsedXSubmitsCriteria(criteria);\r\n            } else if (functionName === '') {\r\n\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the isCompleted criteria was satisfied\r\n     * @param criteria an isCompleted criteria\r\n     * @returns whether the criteria was satisfied or not\r\n     */\r\n    evaluateIsCompletedCriteria(criteria) {\r\n        var result = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n            var params = criteria.params;\r\n            var nodeId = params.nodeId;\r\n\r\n            result = this.isCompleted(nodeId);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if the isCorrect criteria was satisfied\r\n     * @param criteria an isCorrect criteria\r\n     * @returns whether the criteria was satisfied or not\r\n     */\r\n    evaluateIsCorrectCriteria(criteria) {\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            // get the criteria params\r\n            var params = criteria.params;\r\n            var nodeId = params.nodeId;\r\n            var componentId = params.componentId;\r\n\r\n            if (nodeId != null && componentId != null) {\r\n\r\n                // get the component states for the component\r\n                var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n                if (componentStates != null) {\r\n\r\n                    // loop through all the component states\r\n                    for (var c = 0; c < componentStates.length; c++) {\r\n\r\n                        var componentState = componentStates[c];\r\n\r\n                        if (componentState != null) {\r\n\r\n                            var studentData = componentState.studentData;\r\n\r\n                            if (studentData != null) {\r\n                                if (studentData.isCorrect) {\r\n                                    // the student answered correctly\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check if the isPlanningActivityCompleted criteria was satisfied\r\n     * @param criteria a isPlanningActivityCompleted criteria\r\n     * @returns whether the criteria was satisfied or not\r\n     */\r\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\r\n        var result = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            var params = criteria.params;\r\n\r\n            // get the group id\r\n            var nodeId = params.nodeId;\r\n\r\n            // get the number of planning steps the student needs to create\r\n            var planningStepsCreated = params.planningStepsCreated;\r\n\r\n            // get whether the student needs to complete all the steps in the activity\r\n            var planningStepsCompleted = params.planningStepsCompleted;\r\n\r\n            var planningStepsCreatedSatisfied = false;\r\n            var planningStepsCompletedSatisfied = false;\r\n\r\n            var planningNodes = [];\r\n\r\n            if (planningStepsCreated == null) {\r\n                // there is no value set so we will regard it as satisfied\r\n                planningStepsCreatedSatisfied = true;\r\n            } else {\r\n                /*\r\n                 * there is a value for number of planning steps that need to be created\r\n                 * so we will check if the student created enough planning steps\r\n                 */\r\n\r\n                // get the node states for the activity\r\n                var nodeStates = this.getNodeStatesByNodeId(nodeId);\r\n\r\n                if (nodeStates != null) {\r\n\r\n                    /*\r\n                     * loop through all the node states from newest to oldest\r\n                     * for the sake of efficiency\r\n                     */\r\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\r\n\r\n                        var planningStepCount = 0;\r\n\r\n                        var nodeState = nodeStates[ns];\r\n\r\n                        if (nodeState != null) {\r\n\r\n                            // get the student data\r\n                            var studentData = nodeState.studentData;\r\n\r\n                            if (studentData != null) {\r\n\r\n                                // get the nodes\r\n                                var nodes = studentData.nodes;\r\n\r\n                                if (nodes != null) {\r\n\r\n                                    // loop through the nodes\r\n                                    for (var n = 0; n < nodes.length; n++) {\r\n                                        var node = nodes[n];\r\n\r\n                                        if (node != null) {\r\n                                            if (node.type === 'node' && node.planningNodeTemplateId != null) {\r\n                                                // we have found a planning step the student created\r\n                                                planningStepCount++;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    if (planningStepCount >= planningStepsCreated) {\r\n                                        // the student has created a sufficient number of planning steps\r\n                                        planningStepsCreatedSatisfied = true;\r\n                                        planningNodes = nodes;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (planningStepsCompleted == null) {\r\n                planningStepsCompletedSatisfied = true;\r\n            } else {\r\n                /*\r\n                 * check if the activity is completed. this checks if all\r\n                 * the children of the activity are completed.\r\n                 */\r\n                if (this.isCompleted(nodeId)) {\r\n                    planningStepsCompletedSatisfied = true;\r\n                }\r\n            }\r\n\r\n            if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if this branchPathTaken criteria was satisfied\r\n     * @param criteria a branchPathTaken criteria\r\n     * @returns whether the branchPathTaken criteria was satisfied\r\n     */\r\n    evaluateBranchPathTakenCriteria(criteria) {\r\n        var result = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n            // get the expected from and to node ids\r\n            var expectedFromNodeId = criteria.params.fromNodeId;\r\n            var expectedToNodeId = criteria.params.toNodeId;\r\n\r\n            // get all the branchPathTaken events from the from node id\r\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\r\n\r\n            if (branchPathTakenEvents != null) {\r\n\r\n                // loop through all the branchPathTaken events\r\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\r\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\r\n\r\n                    if (branchPathTakenEvent != null) {\r\n                        var data = branchPathTakenEvent.data;\r\n\r\n                        if (data != null) {\r\n                            // get the from and to node ids of the event\r\n                            var fromNodeId = data.fromNodeId;\r\n                            var toNodeId = data.toNodeId;\r\n\r\n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\r\n                                // the from and to node ids match the ones we are looking for\r\n                                result = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the isVisited criteria was satisfied\r\n     * @param criteria the isVisited criteria\r\n     * @returns whether the node id is visited\r\n     */\r\n    evaluateIsVisitedCriteria(criteria) {\r\n\r\n        var isVisited = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            // get the node id we want to check if was visited\r\n            var nodeId = criteria.params.nodeId;\r\n\r\n            // get all the events\r\n            var events = this.studentData.events;\r\n\r\n            if (events != null) {\r\n\r\n                // loop through all the events\r\n                for (var e = 0; e < events.length; e++) {\r\n                    var event = events[e];\r\n\r\n                    if (event != null) {\r\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\r\n                            // the student has entered the node before\r\n                            isVisited = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return isVisited;\r\n    }\r\n\r\n    /**\r\n     * Check if the isVisitedAfter criteria was satisfied\r\n     * @param criteria the isVisitedAfter criteria\r\n     * @returns whether the node id is visited after the criteriaCreatedTimestamp\r\n     */\r\n    evaluateIsVisitedAfterCriteria(criteria) {\r\n\r\n        let isVisitedAfter = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            // get the node id we want to check if was visited\r\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\r\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\r\n\r\n            // get all the events\r\n            let events = this.studentData.events;\r\n\r\n            if (events != null) {\r\n\r\n                // loop through all the events\r\n                for (let e = 0; e < events.length; e++) {\r\n                    let event = events[e];\r\n\r\n                    if (event != null) {\r\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\r\n                            // the student has entered the node after the criteriaCreatedTimestamp\r\n                            isVisitedAfter = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return isVisitedAfter;\r\n    }\r\n\r\n    /**\r\n     * Check if the isRevisedAfter criteria was satisfied\r\n     * @param criteria the isRevisedAfter criteria\r\n     * @returns whether the specified node&component was revisted after the criteriaCreatedTimestamp\r\n     */\r\n    evaluateIsRevisedAfterCriteria(criteria) {\r\n\r\n        let isRevisedAfter = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            // get the node id we want to check if was visited\r\n            let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\r\n            let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\r\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\r\n\r\n            // the student has entered the node after the criteriaCreatedTimestamp.\r\n            // now check if student has revised the work after this event\r\n            let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\r\n            if (latestComponentStateForRevisedComponent.clientSaveTime > criteriaCreatedTimestamp) {\r\n                isRevisedAfter = true;\r\n            }\r\n        }\r\n\r\n        return isRevisedAfter;\r\n    }\r\n\r\n    /**\r\n     * Check if the isVisitedAndRevisedAfter criteria was satisfied\r\n     * @param criteria the isVisitedAndRevisedAfter criteria\r\n     * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\r\n     */\r\n    evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\r\n\r\n        let isVisitedAndRevisedAfter = false;\r\n\r\n        if (criteria != null && criteria.params != null) {\r\n\r\n            // get the node id we want to check if was visited\r\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\r\n            let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\r\n            let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\r\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\r\n\r\n            // get all the events\r\n            let events = this.studentData.events;\r\n\r\n            if (events != null) {\r\n\r\n                // loop through all the events\r\n                for (let e = 0; e < events.length; e++) {\r\n                    let event = events[e];\r\n\r\n                    if (event != null) {\r\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\r\n                            // the student has entered the node after the criteriaCreatedTimestamp.\r\n                            // now check if student has revised the work after this event\r\n                            let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\r\n                            if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\r\n                                isVisitedAndRevisedAfter = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return isVisitedAndRevisedAfter;\r\n    }\r\n\r\n    /**\r\n     * Get all the branchPathTaken events by node id\r\n     * @params fromNodeId the from node id\r\n     * @returns all the branchPathTaken events from the given node id\r\n     */\r\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\r\n\r\n        var branchPathTakenEvents = [];\r\n        var events = this.studentData.events;\r\n\r\n        if (events != null) {\r\n\r\n            // loop through all the events\r\n            for (var e = 0; e < events.length; e++) {\r\n                var event = events[e];\r\n\r\n                if (event != null) {\r\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\r\n                        // we have found a branchPathTaken event from the from node id\r\n                        branchPathTakenEvents.push(event);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return branchPathTakenEvents;\r\n    }\r\n\r\n    /**\r\n     * Evaluate the choice chosen criteria\r\n     * @param criteria the criteria to evaluate\r\n     * @returns a boolean value whether the criteria was satisfied or not\r\n     */\r\n    evaluateChoiceChosenCriteria(criteria) {\r\n\r\n        var result = false;\r\n\r\n        var serviceName = 'MultipleChoiceService';  // Assume MC component.\r\n\r\n        if (this.$injector.has(serviceName)) {\r\n\r\n            // get the MultipleChoiceService\r\n            var service = this.$injector.get(serviceName);\r\n\r\n            // check if the criteria was satisfied\r\n            result = service.choiceChosen(criteria);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the score criteria\r\n     * @param criteria the criteria to evaluate\r\n     * @returns a boolean value whether the criteria was satisfied or not\r\n     */\r\n    evaluateScoreCriteria(criteria) {\r\n\r\n        var result = false;\r\n\r\n        var params = criteria.params;\r\n\r\n        if (params != null) {\r\n\r\n            var nodeId = params.nodeId;\r\n            var componentId = params.componentId;\r\n            var scores = params.scores;\r\n            var workgroupId = this.ConfigService.getWorkgroupId();\r\n            var scoreType = 'any';\r\n\r\n            if (nodeId != null && componentId != null && scores != null) {\r\n\r\n                // get the latest score annotation\r\n                var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\r\n\r\n                if (latestScoreAnnotation != null) {\r\n\r\n                    // get the score value\r\n                    var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\r\n\r\n                    // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\r\n                    if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\r\n                        /*\r\n                         * the student has received a score that matches a score\r\n                         * we're looking for\r\n                         */\r\n                        result = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Evaluate the used x submits criteria which requires the student to submit\r\n     * at least x number of times.\r\n     * @param criteria the criteria to evaluate\r\n     * @returns a boolean value whether the student submitted at least x number\r\n     * of times\r\n     */\r\n    evaluateUsedXSubmitsCriteria(criteria) {\r\n        var result = false;\r\n\r\n        var params = criteria.params;\r\n\r\n        if (params != null) {\r\n\r\n            // get the node id and component id to check the submit counter for\r\n            var nodeId = params.nodeId;\r\n            var componentId = params.componentId;\r\n\r\n            // get the number of submits required\r\n            var requiredSubmitCount = params.requiredSubmitCount;\r\n\r\n            if (nodeId != null && componentId != null) {\r\n\r\n                // get the component states for the component\r\n                var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n                if (componentStates != null) {\r\n\r\n                    // counter for manually counting the component states with isSubmit=true\r\n                    var manualSubmitCounter = 0;\r\n\r\n                    // counter for remembering the highest submitCounter value found in studentData objects\r\n                    var highestSubmitCounter = 0;\r\n\r\n                    /*\r\n                     * We are counting with two submit counters for backwards compatibility.\r\n                     * Some componentStates only have isSubmit=true and do not keep an\r\n                     * updated submitCounter for the number of submits.\r\n                     */\r\n\r\n                    // loop through all the component states\r\n                    for (var c = 0; c < componentStates.length; c++) {\r\n\r\n                        var componentState = componentStates[c];\r\n\r\n                        if (componentState != null) {\r\n\r\n                            if (componentState.isSubmit) {\r\n                                // this is a submit component state\r\n                                manualSubmitCounter++;\r\n                            }\r\n\r\n                            var studentData = componentState.studentData;\r\n\r\n                            if (studentData != null) {\r\n\r\n                                if (studentData.submitCounter != null) {\r\n                                    if (studentData.submitCounter > highestSubmitCounter) {\r\n                                        /*\r\n                                         * the submit counter in the student data is higher\r\n                                         * than we have previously seen\r\n                                         */\r\n                                        highestSubmitCounter = studentData.submitCounter;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (manualSubmitCounter >= requiredSubmitCount || highestSubmitCounter >= requiredSubmitCount) {\r\n                        // the student submitted the required number of times\r\n                        result = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Populate the stack history and visited nodes history\r\n     * @param events the events\r\n     */\r\n    populateHistories(events) {\r\n        this.stackHistory = [];\r\n        this.visitedNodesHistory = [];\r\n\r\n        if (events != null) {\r\n\r\n            // loop through all the events\r\n            for (var e = 0; e < events.length; e++) {\r\n                var event = events[e];\r\n\r\n                if (event != null) {\r\n\r\n                    // look for the nodeEntered event\r\n                    if (event.event === 'nodeEntered') {\r\n\r\n                        // the student has visited this node id before\r\n                        this.updateStackHistory(event.nodeId);\r\n                        this.updateVisitedNodesHistory(event.nodeId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    getStackHistoryAtIndex(index) {\r\n        if (index < 0) {\r\n            index = this.stackHistory.length + index;\r\n        }\r\n        var stackHistoryResult = null;\r\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\r\n            stackHistoryResult = this.stackHistory[index];\r\n        }\r\n        return stackHistoryResult;\r\n    };\r\n\r\n    getStackHistory() {\r\n        return this.stackHistory;\r\n    };\r\n\r\n    updateStackHistory(nodeId) {\r\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\r\n        if (indexOfNodeId === -1) {\r\n            this.stackHistory.push(nodeId);\r\n        } else {\r\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\r\n        }\r\n    };\r\n\r\n    updateVisitedNodesHistory(nodeId) {\r\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\r\n        if (indexOfNodeId === -1) {\r\n            this.visitedNodesHistory.push(nodeId);\r\n        }\r\n    };\r\n\r\n    getVisitedNodesHistory() {\r\n        return this.visitedNodesHistory;\r\n    };\r\n\r\n    isNodeVisited(nodeId) {\r\n        var result = false;\r\n        var visitedNodesHistory = this.visitedNodesHistory;\r\n\r\n        if (visitedNodesHistory != null) {\r\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\r\n\r\n            if (indexOfNodeId !== -1) {\r\n                result = true;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    createComponentState() {\r\n        var componentState = {};\r\n\r\n        componentState.timestamp = Date.parse(new Date());\r\n\r\n        return componentState;\r\n    };\r\n\r\n    addComponentState(componentState) {\r\n        if (this.studentData != null && this.studentData.componentStates != null) {\r\n            this.studentData.componentStates.push(componentState);\r\n\r\n            this.updateNodeStatuses();\r\n        }\r\n    };\r\n\r\n    addNodeState(nodeState) {\r\n        if (this.studentData != null && this.studentData.nodeStates != null) {\r\n            this.studentData.nodeStates.push(nodeState);\r\n\r\n            this.updateNodeStatuses();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns all NodeStates\r\n     * @returns Array of all NodeStates\r\n     */\r\n    getNodeStates() {\r\n        let nodeStates = [];\r\n\r\n        if (this.studentData != null && this.studentData.nodeStates != null) {\r\n            nodeStates = this.studentData.nodeStates;\r\n        }\r\n\r\n        return nodeStates;\r\n    };\r\n\r\n    /**\r\n     * Get all NodeStates for a specific node\r\n     * @param nodeId id of node\r\n     * @returns Array of NodeStates for the specified node\r\n     */\r\n    getNodeStatesByNodeId(nodeId) {\r\n        var nodeStatesByNodeId = [];\r\n\r\n        if (this.studentData != null && this.studentData.nodeStates != null) {\r\n            var nodeStates = this.studentData.nodeStates;\r\n\r\n            for (var n = 0; n < nodeStates.length; n++) {\r\n                var nodeState = nodeStates[n];\r\n\r\n                if (nodeState != null) {\r\n                    var tempNodeId = nodeState.nodeId;\r\n\r\n                    if (nodeId === tempNodeId) {\r\n                        nodeStatesByNodeId.push(nodeState);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return nodeStatesByNodeId;\r\n    };\r\n\r\n    addEvent(event) {\r\n        if (this.studentData != null && this.studentData.events != null) {\r\n            this.studentData.events.push(event);\r\n        }\r\n    };\r\n\r\n    addAnnotation(annotation) {\r\n        if (this.studentData != null && this.studentData.annotations != null) {\r\n            this.studentData.annotations.push(annotation);\r\n        }\r\n    };\r\n\r\n    handleAnnotationReceived(annotation) {\r\n        // add the annotation to the local annotations array\r\n        this.studentData.annotations.push(annotation);\r\n\r\n        if (annotation.notebookItemId) {\r\n            // broadcast the event that a new notebook item annotation has been received\r\n            this.$rootScope.$broadcast('notebookItemAnnotationReceived', {annotation: annotation});\r\n        } else {\r\n            // broadcast the event that a new annotation has been received\r\n            this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\r\n        }\r\n    }\r\n\r\n    saveComponentEvent(component, category, event, data) {\r\n        if (component == null || category == null || event == null) {\r\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_COMPONENT_CATEGORY_EVENT_ERROR'));\r\n            return;\r\n        }\r\n        var context = \"Component\";\r\n        var nodeId = component.nodeId;\r\n        var componentId = component.componentId;\r\n        var componentType = component.componentType;\r\n        if (nodeId == null || componentId == null || componentType == null) {\r\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_NODE_ID_COMPONENT_ID_COMPONENT_TYPE_ERROR'));\r\n            return;\r\n        }\r\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    };\r\n\r\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\r\n        if (category == null || event == null) {\r\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_VLE_EVENT_CATEGORY_EVENT_ERROR'));\r\n            return;\r\n        }\r\n        var context = \"VLE\";\r\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    };\r\n\r\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\r\n        var events = [];\r\n        var newEvent = this.createNewEvent();\r\n        newEvent.context = context;\r\n        newEvent.nodeId = nodeId;\r\n        newEvent.componentId = componentId;\r\n        newEvent.type = componentType;\r\n        newEvent.category = category;\r\n        newEvent.event = event;\r\n        newEvent.data = data;\r\n        events.push(newEvent);\r\n        var componentStates = null;\r\n        var nodeStates = null;\r\n        var annotations = null;\r\n        this.saveToServer(componentStates, nodeStates, events, annotations);\r\n    };\r\n\r\n    /**\r\n     * Create a new empty event\r\n     * @return a new empty event\r\n     */\r\n    createNewEvent() {\r\n        var event = {};\r\n\r\n        event.runId = this.ConfigService.getRunId();\r\n        event.periodId = this.ConfigService.getPeriodId();\r\n        event.workgroupId = this.ConfigService.getWorkgroupId();\r\n        event.clientSaveTime = Date.parse(new Date());\r\n\r\n        return event;\r\n    };\r\n\r\n    saveNodeStates(nodeStates) {\r\n        var componentStates = null;\r\n        var events = null;\r\n        var annotations = null;\r\n        this.saveToServer(componentStates, nodeStates, events, annotations);\r\n    };\r\n\r\n\r\n    saveAnnotations(annotations) {\r\n        var componentStates = null;\r\n        var nodeStates = null;\r\n        var events = null;\r\n        this.saveToServer(componentStates, nodeStates, events, annotations);\r\n    };\r\n\r\n    saveToServer(componentStates, nodeStates, events, annotations) {\r\n\r\n        // merge componentStates and nodeStates into StudentWork before posting\r\n        var studentWorkList = [];\r\n        if (componentStates != null && componentStates.length > 0) {\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\r\n                    this.addComponentState(componentState);\r\n                    studentWorkList.push(componentState);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nodeStates != null && nodeStates.length > 0) {\r\n            for (var n = 0; n < nodeStates.length; n++) {\r\n                var nodeState = nodeStates[n];\r\n\r\n                if (nodeState != null) {\r\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\r\n                    this.addNodeState(nodeState);\r\n                    studentWorkList.push(nodeState);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (events != null && events.length > 0) {\r\n            for (var e = 0; e < events.length; e++) {\r\n                var event = events[e];\r\n\r\n                if (event != null) {\r\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\r\n                    this.addEvent(event);\r\n                }\r\n            }\r\n        } else {\r\n            events = [];\r\n        }\r\n\r\n        if (annotations != null && annotations.length > 0) {\r\n            for (var a = 0; a < annotations.length; a++) {\r\n                var annotation = annotations[a];\r\n\r\n                if (annotation != null) {\r\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\r\n                    if (annotation.id == null) {\r\n                        // add to local annotation array if this annotation has not been saved to the server before.\r\n                        this.addAnnotation(annotation);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            annotations = [];\r\n        }\r\n\r\n        if (this.ConfigService.isPreview()) {\r\n            var savedStudentDataResponse = {\r\n                studentWorkList: studentWorkList,\r\n                events: events,\r\n                annotations: annotations\r\n            };\r\n\r\n            // if we're in preview, don't make any request to the server but pretend we did\r\n            this.saveToServerSuccess(savedStudentDataResponse);\r\n            let deferred = this.$q.defer();\r\n            deferred.resolve(savedStudentDataResponse);\r\n            return deferred.promise;\r\n        } else {\r\n            // set the workgroup id and run id\r\n            var params = {};\r\n            params.runId = this.ConfigService.getRunId();\r\n            params.workgroupId = this.ConfigService.getWorkgroupId();\r\n            params.studentWorkList = angular.toJson(studentWorkList);\r\n            params.events = angular.toJson(events);\r\n            params.annotations = angular.toJson(annotations);\r\n\r\n            // get the url to POST the student data\r\n            var httpParams = {};\r\n            httpParams.method = 'POST';\r\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\r\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n            httpParams.data = $.param(params);\r\n\r\n            // make the request to post the student data\r\n            return this.$http(httpParams).then(\r\n                result => {\r\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\r\n                    if (result != null && result.data != null) {\r\n                        var savedStudentDataResponse = result.data;\r\n\r\n                        this.saveToServerSuccess(savedStudentDataResponse);\r\n\r\n                        return savedStudentDataResponse;\r\n                    }\r\n                }, result => {\r\n                    // a server error occured\r\n                    return null;\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    saveToServerSuccess(savedStudentDataResponse) {\r\n        // set dummy serverSaveTime for use if we're in preview mode\r\n        let serverSaveTime = Date.parse(new Date());\r\n\r\n        // handle saved studentWork\r\n        if (savedStudentDataResponse.studentWorkList) {\r\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\r\n            let localStudentWorkList = this.studentData.componentStates;\r\n            if (this.studentData.nodeStates) {\r\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\r\n            }\r\n\r\n            // set the id and serverSaveTime in the local studentWorkList\r\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\r\n                var savedStudentWork = savedStudentWorkList[i];\r\n\r\n                /*\r\n                 * loop through all the student work that were posted\r\n                 * to find the one with the matching request token\r\n                 */\r\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\r\n                    var localStudentWork = localStudentWorkList[l];\r\n                    if (localStudentWork.requestToken &&\r\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\r\n                        localStudentWork.id = savedStudentWork.id;\r\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\r\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\r\n\r\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // handle saved events\r\n        if (savedStudentDataResponse.events) {\r\n            var savedEvents = savedStudentDataResponse.events;\r\n\r\n            var localEvents = this.studentData.events;\r\n\r\n            // set the id and serverSaveTime in the local event\r\n            for (var i = 0; i < savedEvents.length; i++) {\r\n                var savedEvent = savedEvents[i];\r\n\r\n                /*\r\n                 * loop through all the events that were posted\r\n                 * to find the one with the matching request token\r\n                 */\r\n                for (var l = localEvents.length - 1; l >= 0; l--) {\r\n                    var localEvent = localEvents[l];\r\n                    if (localEvent.requestToken &&\r\n                        localEvent.requestToken === savedEvent.requestToken) {\r\n                        localEvent.id = savedEvent.id;\r\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\r\n                        localEvent.requestToken = null; // requestToken is no longer needed.\r\n\r\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // handle saved annotations\r\n        if (savedStudentDataResponse.annotations) {\r\n            var savedAnnotations = savedStudentDataResponse.annotations;\r\n\r\n            var localAnnotations = this.studentData.annotations;\r\n\r\n            // set the id and serverSaveTime in the local annotation\r\n            for (var i = 0; i < savedAnnotations.length; i++) {\r\n                var savedAnnotation = savedAnnotations[i];\r\n\r\n                /*\r\n                 * loop through all the events that were posted\r\n                 * to find the one with the matching request token\r\n                 */\r\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\r\n                    var localAnnotation = localAnnotations[l];\r\n                    if (localAnnotation.requestToken &&\r\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\r\n                        localAnnotation.id = savedAnnotation.id;\r\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\r\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\r\n\r\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateNodeStatuses();\r\n\r\n    };\r\n\r\n    /**\r\n     * POSTs student status to server\r\n     * Returns a promise of the POST request\r\n     */\r\n    saveStudentStatus() {\r\n\r\n        if (!this.ConfigService.isPreview()) {\r\n            // we are in a run\r\n            var studentStatusURL = this.ConfigService.getStudentStatusURL();\r\n            if (studentStatusURL != null) {\r\n                var runId = this.ConfigService.getRunId();\r\n                var periodId = this.ConfigService.getPeriodId();\r\n                var workgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n                // get the current node id\r\n                var currentNodeId = this.getCurrentNodeId();\r\n\r\n                // get the node statuses\r\n                var nodeStatuses = this.getNodeStatuses();\r\n\r\n                // get the latest component state\r\n                var latestComponentState = this.getLatestComponentState();\r\n\r\n                // get the project completion percentage\r\n                var projectCompletion = this.getProjectCompletion();\r\n\r\n                // create the JSON that will be saved to the database\r\n                var studentStatusJSON = {};\r\n                studentStatusJSON.runId = runId;\r\n                studentStatusJSON.periodId = periodId;\r\n                studentStatusJSON.workgroupId = workgroupId;\r\n                studentStatusJSON.currentNodeId = currentNodeId;\r\n                studentStatusJSON.previousComponentState = latestComponentState;\r\n                studentStatusJSON.nodeStatuses = nodeStatuses;\r\n                studentStatusJSON.projectCompletion = projectCompletion;\r\n\r\n                // get the student status as a string\r\n                var status = angular.toJson(studentStatusJSON);\r\n\r\n                /*\r\n                 * create the params for the message that will be sent\r\n                 * to the StudentStatusController and saved in the\r\n                 * database\r\n                 */\r\n                var studentStatusParams = {};\r\n                studentStatusParams.runId = runId;\r\n                studentStatusParams.periodId = periodId;\r\n                studentStatusParams.workgroupId = workgroupId;\r\n                studentStatusParams.status = status;\r\n\r\n                // get the url to POST the student data\r\n                var httpParams = {};\r\n                httpParams.method = 'POST';\r\n                httpParams.url = studentStatusURL;\r\n                httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n                httpParams.data = $.param(studentStatusParams);\r\n\r\n                // make the request to post the student status\r\n                return this.$http(httpParams).then(\r\n                    result => {\r\n                        return true;\r\n                    }, result => {\r\n                        // a server error occured\r\n                        return false;\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    retrieveComponentStates(runId, periodId, workgroupId) {\r\n\r\n    };\r\n\r\n    getLatestComponentState() {\r\n        var latestComponentState = null;\r\n\r\n        var studentData = this.studentData;\r\n\r\n        if (studentData != null) {\r\n            var componentStates = studentData.componentStates;\r\n\r\n            if (componentStates != null) {\r\n                latestComponentState = componentStates[componentStates.length - 1];\r\n            }\r\n        }\r\n\r\n        return latestComponentState;\r\n    };\r\n\r\n    /**\r\n     * Check whether the component has unsubmitted work\r\n     * @return boolean whether or not there is unsubmitted work\r\n     */\r\n    isComponentSubmitDirty() {\r\n        let submitDirty = false;\r\n\r\n        let latestComponentState = this.getLatestComponentState();\r\n        if (latestComponentState && !latestComponentState.isSubmit) {\r\n            submitDirty = true;\r\n        }\r\n\r\n        return submitDirty;\r\n    };\r\n\r\n    /**\r\n     * Get the latest NodeState for the specified node id\r\n     * @param nodeId the node id\r\n     * @return the latest node state with the matching node id or null if none are found\r\n     */\r\n    getLatestNodeStateByNodeId(nodeId) {\r\n        let latestNodeState = null;\r\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\r\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\r\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\r\n        }\r\n        return latestNodeState;\r\n    };\r\n\r\n    /**\r\n     * Get the latest component state for the given node id and component\r\n     * id.\r\n     * @param nodeId the node id\r\n     * @param componentId the component id (optional)\r\n     * @return the latest component state with the matching node id and\r\n     * component id or null if none are found\r\n     */\r\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\r\n        var latestComponentState = null;\r\n\r\n        if (nodeId) {\r\n            var studentData = this.studentData;\r\n\r\n            if (studentData) {\r\n                // get the component states\r\n                var componentStates = studentData.componentStates;\r\n\r\n                if (componentStates) {\r\n                    // loop through all the component states from newest to oldest\r\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\r\n                        var componentState = componentStates[c];\r\n\r\n                        if (componentState) {\r\n                            var componentStateNodeId = componentState.nodeId;\r\n\r\n                            // compare the node id and component id\r\n                            if (nodeId === componentStateNodeId) {\r\n                                if (componentId) {\r\n                                    var componentStateComponentId = componentState.componentId;\r\n                                    if (componentId === componentStateComponentId) {\r\n                                        latestComponentState = componentState;\r\n                                        break;\r\n                                    }\r\n                                } else {\r\n                                    latestComponentState = componentState;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return latestComponentState;\r\n    };\r\n\r\n    /**\r\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\r\n     * @param studentWorkId the student work id\r\n     * @return an StudentWork or null\r\n     */\r\n    getStudentWorkByStudentWorkId(studentWorkId) {\r\n        if (studentWorkId != null) {\r\n            // get the component states\r\n            var componentStates = this.studentData.componentStates;\r\n\r\n            if (componentStates != null) {\r\n\r\n                // loop through all the component states\r\n                for (var c = 0; c < componentStates.length; c++) {\r\n                    var componentState = componentStates[c];\r\n\r\n                    if (componentState != null && componentState.id === studentWorkId) {\r\n                        return componentState;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // get the node states\r\n            var nodeStates = this.studentData.nodeStates;\r\n\r\n            if (nodeStates != null) {\r\n\r\n                // loop through all the node states\r\n                for (var n = 0; n < nodeStates.length; n++) {\r\n                    var nodeState = nodeStates[n];\r\n                    if (nodeState != null && nodeState.id === studentWorkId) {\r\n                        return nodeState;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns all the component states for this workgroup\r\n     */\r\n    getComponentStates() {\r\n        return this.studentData.componentStates;\r\n    };\r\n\r\n    /**\r\n     * Get the component states for the given node id\r\n     * @param nodeId the node id\r\n     * @return an array of component states for the given node id\r\n     */\r\n    getComponentStatesByNodeId(nodeId) {\r\n        var componentStatesByNodeId = [];\r\n\r\n        if (nodeId != null) {\r\n            var studentData = this.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                // get the component states\r\n                var componentStates = studentData.componentStates;\r\n\r\n                if (componentStates != null) {\r\n\r\n                    // loop through all the component states\r\n                    for (var c = 0; c < componentStates.length; c++) {\r\n                        var componentState = componentStates[c];\r\n\r\n                        if (componentState != null) {\r\n                            var componentStateNodeId = componentState.nodeId;\r\n\r\n                            // compare the node id\r\n                            if (nodeId == componentStateNodeId) {\r\n\r\n                                componentStatesByNodeId.push(componentState);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentStatesByNodeId;\r\n    };\r\n\r\n    /**\r\n     * Get the component states for the given node id and component id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @return an array of component states for the given node id and\r\n     * component id\r\n     */\r\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\r\n        var componentStatesByNodeIdAndComponentId = [];\r\n\r\n        if (nodeId != null && componentId != null) {\r\n            var studentData = this.studentData;\r\n\r\n            if (studentData != null) {\r\n\r\n                // get the component states\r\n                var componentStates = studentData.componentStates;\r\n\r\n                if (componentStates != null) {\r\n\r\n                    // loop through all the component states\r\n                    for (var c = 0; c < componentStates.length; c++) {\r\n                        var componentState = componentStates[c];\r\n\r\n                        if (componentState != null) {\r\n                            var componentStateNodeId = componentState.nodeId;\r\n                            var componentStateComponentId = componentState.componentId;\r\n\r\n                            // compare the node id and component id\r\n                            if (nodeId == componentStateNodeId &&\r\n                                componentId == componentStateComponentId) {\r\n\r\n                                componentStatesByNodeIdAndComponentId.push(componentState);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentStatesByNodeIdAndComponentId;\r\n    };\r\n\r\n    /**\r\n     * Get all events\r\n     * @returns all events for the student\r\n     */\r\n    getEvents() {\r\n        if (this.studentData != null && this.studentData.events != null) {\r\n            return this.studentData.events;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the events for a node id\r\n     * @param nodeId the node id\r\n     * @returns the events for the node id\r\n     */\r\n    getEventsByNodeId(nodeId) {\r\n        var eventsByNodeId = [];\r\n\r\n        if (nodeId != null) {\r\n\r\n            if (this.studentData != null && this.studentData.events != null) {\r\n\r\n                // get all the events\r\n                var events = this.studentData.events;\r\n\r\n                // loop through all the events\r\n                for (var e = 0; e < events.length; e++) {\r\n                    var event = events[e];\r\n\r\n                    if (event != null) {\r\n                        var eventNodeId = event.nodeId;\r\n\r\n                        if (nodeId === eventNodeId) {\r\n                            // this event is for the node id we are looking for\r\n                            eventsByNodeId.push(event);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return eventsByNodeId;\r\n    };\r\n\r\n\r\n    /**\r\n     * Get the events for a component id\r\n     * @param nodeId the node id\r\n     * @param componentId the component id\r\n     * @returns an array of events for the component id\r\n     */\r\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\r\n        var eventsByNodeId = [];\r\n\r\n        if (nodeId != null) {\r\n\r\n            if (this.studentData != null && this.studentData.events != null) {\r\n\r\n                // get all the events\r\n                var events = this.studentData.events;\r\n\r\n                // loop through all the events\r\n                for (var e = 0; e < events.length; e++) {\r\n                    var event = events[e];\r\n\r\n                    if (event != null) {\r\n                        var eventNodeId = event.nodeId;\r\n                        var eventComponentId = event.componentId;\r\n\r\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\r\n                            // this events is for the component id we are looking for\r\n                            eventsByNodeId.push(event);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return eventsByNodeId;\r\n    };\r\n\r\n    /**\r\n     * Get the node id of the latest node entered event for an active node that\r\n     * exists in the project. We need to check if the node exists in the project\r\n     * in case the node has been deleted from the project. We also need to check\r\n     * that the node is active in case the node has been moved to the inactive\r\n     * section of the project.\r\n     * @return the node id of the latest node entered event for an active node\r\n     * that exists in the project\r\n     */\r\n    getLatestNodeEnteredEventNodeIdWithExistingNode() {\r\n\r\n        // get all the events\r\n        var events = this.studentData.events;\r\n\r\n        // loop through all the events newest to oldest\r\n        for (var e = events.length - 1; e >= 0; e--) {\r\n\r\n            // get an event\r\n            var event = events[e];\r\n\r\n            if (event != null) {\r\n\r\n                // get the event name\r\n                var eventName = event.event;\r\n\r\n                if (eventName == 'nodeEntered') {\r\n                    // we have found a nodeEntered event\r\n\r\n                    // get the node id of the event\r\n                    var nodeId = event.nodeId;\r\n\r\n                    // check if the node exists in the project\r\n                    var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n                    if (node != null) {\r\n\r\n                        // check if the node is active\r\n                        if (this.ProjectService.isActive(nodeId)) {\r\n                            // the node exists in the project and is active\r\n                            return nodeId;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Check if the student can visit the node\r\n     * @param nodeId the node id\r\n     * @returns whether the student can visit the node\r\n     */\r\n    canVisitNode(nodeId) {\r\n\r\n        var result = false;\r\n\r\n        if (nodeId != null) {\r\n\r\n            // get the node status for the node\r\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\r\n\r\n            if (nodeStatus != null) {\r\n                if (nodeStatus.isVisitable) {\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the node status by node id\r\n     * @param nodeId the node id\r\n     * @returns the node status object for a node\r\n     */\r\n    getNodeStatusByNodeId(nodeId) {\r\n        var nodeStatuses = this.nodeStatuses;\r\n        var nodeStatus = null;\r\n\r\n        if (nodeId != null) {\r\n            nodeStatus = nodeStatuses[nodeId];\r\n        }\r\n\r\n        return nodeStatus;\r\n    };\r\n\r\n    /**\r\n     * Get completed items, total number of visible items, completion % for a node\r\n     * @param nodeId the node id\r\n     * @returns object with number of completed items and number of visible items\r\n     */\r\n    getNodeProgressById(nodeId) {\r\n        var completedItems = 0;\r\n        var totalItems = 0;\r\n\r\n        if (this.ProjectService.isGroupNode(nodeId)) {\r\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\r\n            for (var n=0; n<nodeIds.length; n++) {\r\n                var id = nodeIds[n];\r\n                var status = this.nodeStatuses[id];\r\n                if (this.ProjectService.isGroupNode(id)) {\r\n                    var completedGroupItems = status.progress.completedItems;\r\n                    var totalGroupItems = status.progress.totalItems;\r\n                    completedItems += completedGroupItems;\r\n                    totalItems += totalGroupItems;\r\n                } else {\r\n                    if (status.isVisible) {\r\n                        totalItems++;\r\n                        if (status.isCompleted) {\r\n                            completedItems++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO: implement for steps (using components instead of child nodes)\r\n\r\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\r\n        var progress = {\r\n            \"completedItems\": completedItems,\r\n            \"totalItems\": totalItems,\r\n            \"completionPct\": completionPct\r\n        };\r\n        return progress;\r\n    };\r\n\r\n    /**\r\n     * Check if the given node or component is completed\r\n     * @param nodeId the node id\r\n     * @param componentId (optional) the component id\r\n     * @returns whether the node or component is completed\r\n     */\r\n    isCompleted(nodeId, componentId) {\r\n\r\n        var result = false;\r\n\r\n        if (nodeId && componentId) {\r\n            // check that the component is completed\r\n\r\n            // get the component states for the component\r\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n            // get the component events\r\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n            // get the node events\r\n            var nodeEvents = this.getEventsByNodeId(nodeId);\r\n\r\n            // get the component object\r\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n            var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n            if (component != null) {\r\n\r\n                // get the component type\r\n                var componentType = component.type;\r\n\r\n                if (componentType != null) {\r\n\r\n                    // get the service for the component type\r\n                    var service = this.$injector.get(componentType + 'Service');\r\n\r\n                    // check if the component is completed\r\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\r\n                        result = true;\r\n                    }\r\n                }\r\n            }\r\n        } else if (nodeId) {\r\n            // check if node is a group\r\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\r\n\r\n            var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n            if (isGroup) {\r\n                // node is a group\r\n                var tempResult = true;\r\n\r\n                // check that all the nodes in the group are visible and completed\r\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\r\n\r\n                if (nodeIds.length) {\r\n                    for (var n=0; n<nodeIds.length; n++) {\r\n                        var id = nodeIds[n];\r\n\r\n                        if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\r\n                            // the child is not visible or not completed so the group is not completed\r\n                            tempResult = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\r\n                    tempResult = false;\r\n                }\r\n\r\n                result = tempResult;\r\n            } else {\r\n                // check that all the components in the node are completed\r\n\r\n                // get all the components in the node\r\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\r\n\r\n                // we will default to is completed true\r\n                var tempResult = true;\r\n\r\n                /*\r\n                 * All components must be completed in order for the node to be completed\r\n                 * so we will loop through all the components and check if they are\r\n                 * completed\r\n                 */\r\n                for (var c = 0; c < components.length; c++) {\r\n                    var component = components[c];\r\n\r\n                    if (component != null) {\r\n                        var componentId = component.id;\r\n                        var componentType = component.type;\r\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\r\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\r\n\r\n                        var tempNodeId = nodeId;\r\n                        var tempNode = node;\r\n                        var tempComponentId = componentId;\r\n                        var tempComponent = component;\r\n\r\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\r\n                            /*\r\n                             * this is a show previous work component so we will check if the\r\n                             * previous component was completed\r\n                             */\r\n                            tempNodeId = showPreviousWorkNodeId;\r\n                            tempComponentId = showPreviousWorkComponentId;\r\n                            tempNode = this.ProjectService.getNodeById(tempNodeId);\r\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\r\n                        }\r\n\r\n                        if (componentType != null) {\r\n                            try {\r\n\r\n                                // get the service name\r\n                                var serviceName = componentType + 'Service';\r\n\r\n                                if (this.$injector.has(serviceName)) {\r\n\r\n                                    // get the service for the component type\r\n                                    var service = this.$injector.get(serviceName);\r\n\r\n                                    // get the component states for the component\r\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\r\n\r\n                                    // get the component events\r\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\r\n\r\n                                    // get the node events\r\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\r\n\r\n                                    // check if the component is completed\r\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\r\n\r\n                                    tempResult = tempResult && isComponentCompleted;\r\n                                }\r\n                            } catch (e) {\r\n                                console.log(this.$translate('ERROR_COULD_NOT_CALCULATE_IS_COMPLETED') + tempComponentId);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = tempResult;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Get the current node\r\n     * @returns the current node object\r\n     */\r\n    getCurrentNode() {\r\n        return this.currentNode;\r\n    };\r\n\r\n    /**\r\n     * Get the current node id\r\n     * @returns the current node id\r\n     */\r\n    getCurrentNodeId() {\r\n        var currentNodeId = null;\r\n\r\n        if (this.currentNode != null) {\r\n            currentNodeId = this.currentNode.id;\r\n        }\r\n\r\n        return currentNodeId;\r\n    };\r\n\r\n    /**\r\n     * Set the current node\r\n     * @param nodeId the node id\r\n     */\r\n    setCurrentNodeByNodeId(nodeId) {\r\n        if (nodeId != null) {\r\n            var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n            this.setCurrentNode(node);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the current node\r\n     * @param node the node object\r\n     */\r\n    setCurrentNode(node) {\r\n        var previousCurrentNode = this.currentNode;\r\n\r\n        if (previousCurrentNode !== node) {\r\n            // the current node is about to change\r\n\r\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\r\n                // set the previous node to the current node\r\n                this.previousStep = previousCurrentNode;\r\n            }\r\n\r\n            // set the current node to the new node\r\n            this.currentNode = node;\r\n\r\n            // broadcast the event that the current node has changed\r\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * End the current node\r\n     */\r\n    endCurrentNode() {\r\n\r\n        // get the current node\r\n        var previousCurrentNode = this.currentNode;\r\n\r\n        if (previousCurrentNode != null) {\r\n\r\n            // tell the node to exit\r\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\r\n        }\r\n    };\r\n\r\n    /**\r\n     * End the current node and set the current node\r\n     * @param nodeId the node id of the new current node\r\n     */\r\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\r\n\r\n        // check if the node is visitable\r\n        if (this.nodeStatuses[nodeId].isVisitable) {\r\n            // the node is visitable\r\n            // end the current node\r\n            this.endCurrentNode();\r\n\r\n            // set the current node\r\n            this.setCurrentNodeByNodeId(nodeId);\r\n        } else {\r\n            // the node is not visitable\r\n            this.nodeClickLocked(nodeId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\r\n     * @param nodeId\r\n     */\r\n    nodeClickLocked(nodeId) {\r\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\r\n    };\r\n\r\n    /**\r\n     * This will parse a delimited string into an array of\r\n     * arrays. The default delimiter is the comma, but this\r\n     * can be overriden in the second argument.\r\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n     */\r\n    CSVToArray( strData, strDelimiter ) {\r\n        // Check to see if the delimiter is defined. If not,\r\n        // then default to comma.\r\n        strDelimiter = (strDelimiter || \",\");\r\n\r\n        // Create a regular expression to parse the CSV values.\r\n        var objPattern = new RegExp(\r\n            (\r\n                // Delimiters.\r\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n                    // Quoted fields.\r\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n                    // Standard fields.\r\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n            ),\r\n            \"gi\"\r\n        );\r\n\r\n        // Create an array to hold our data. Give the array\r\n        // a default empty first row.\r\n        var arrData = [[]];\r\n\r\n        // Create an array to hold our individual pattern\r\n        // matching groups.\r\n        var arrMatches = null;\r\n\r\n\r\n        // Keep looping over the regular expression matches\r\n        // until we can no longer find a match.\r\n        while (arrMatches = objPattern.exec( strData )) {\r\n\r\n            // Get the delimiter that was found.\r\n            var strMatchedDelimiter = arrMatches[ 1 ];\r\n\r\n            // Check to see if the given delimiter has a length\r\n            // (is not the start of string) and if it matches\r\n            // field delimiter. If id does not, then we know\r\n            // that this delimiter is a row delimiter.\r\n            if (\r\n                strMatchedDelimiter.length &&\r\n                (strMatchedDelimiter != strDelimiter)\r\n            ){\r\n\r\n                // Since we have reached a new row of data,\r\n                // add an empty row to our data array.\r\n                arrData.push( [] );\r\n            }\r\n\r\n            // Now that we have our delimiter out of the way,\r\n            // let's check to see which kind of value we\r\n            // captured (quoted or unquoted).\r\n            if (arrMatches[ 2 ]){\r\n\r\n                // We found a quoted value. When we capture\r\n                // this value, unescape any double quotes.\r\n                var strMatchedValue = arrMatches[ 2 ].replace(\r\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\r\n                    \"\\\"\"\r\n                );\r\n\r\n            } else {\r\n\r\n                // We found a non-quoted value.\r\n                var strMatchedValue = arrMatches[ 3 ];\r\n            }\r\n\r\n            // Now that we have our value string, let's add\r\n            // it to the data array.\r\n            var finalValue = strMatchedValue;\r\n            var floatVal = parseFloat(strMatchedValue);\r\n            if (!isNaN(floatVal)) {\r\n                finalValue = floatVal;\r\n            }\r\n            arrData[ arrData.length - 1 ].push( finalValue );\r\n        }\r\n\r\n        // Return the parsed data.\r\n        return( arrData );\r\n    };\r\n\r\n    /**\r\n     * Get the total score for the workgroup\r\n     * @returns the total score for the workgroup\r\n     */\r\n    getTotalScore() {\r\n        var annotations = this.studentData.annotations;\r\n        var workgroupId = this.ConfigService.getWorkgroupId();\r\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\r\n    }\r\n\r\n    /**\r\n     * Get the project completion for the signed in student\r\n     * @returns the project completion percentage for the signed in student\r\n     */\r\n    getProjectCompletion() {\r\n\r\n        // group0 is always the root node of the whole project\r\n        var nodeId = 'group0';\r\n\r\n        // get the progress including all of the children nodes\r\n        var progress = this.getNodeProgressById(nodeId);\r\n\r\n        return progress;\r\n    }\r\n\r\n    /**\r\n     * Get the run status\r\n     */\r\n    getRunStatus() {\r\n        return this.runStatus;\r\n    }\r\n\r\n    /**\r\n     * Get the next available planning node instance node id\r\n     * @returns the next available planning node instance node id\r\n     */\r\n    getNextAvailablePlanningNodeId() {\r\n\r\n        // used to keep track of the highest planning node number we have found, which is 1-based\r\n        let currentMaxPlanningNodeNumber = 1;\r\n\r\n        let nodeStates = this.getNodeStates();\r\n\r\n        if (nodeStates != null) {\r\n\r\n            // loop through all the NodeStates\r\n            for (var ns = 0; ns < nodeStates.length; ns++) {\r\n                let nodeState = nodeStates[ns];\r\n\r\n                if (nodeState != null) {\r\n                    let nodeStateNodeId = nodeState.nodeId;\r\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\r\n                        let nodes = nodeState.studentData.nodes;\r\n                        for (var n = 0; n < nodes.length; n++) {\r\n                            let node = nodes[n];\r\n                            let nodeId = node.id;\r\n                            // regex to match the planning node id e.g. planningNode2\r\n                            let planningNodeIdRegEx = /planningNode(.*)/;\r\n\r\n                            // run the regex on the node id\r\n                            let result = nodeId.match(planningNodeIdRegEx);\r\n\r\n                            if (result != null) {\r\n                                // we have found a planning node instance node id\r\n\r\n                                /*\r\n                                 * get the number part of the planning node instance node id\r\n                                 * e.g. if the nodeId is planningNode2, the number part\r\n                                 * would be 2\r\n                                 */\r\n                                let planningNodeNumber = parseInt(result[1]);\r\n\r\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\r\n                                    /*\r\n                                     * update the max number part if we have found a new\r\n                                     * higher number\r\n                                     */\r\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\r\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\r\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\r\n        }\r\n\r\n        // Increment maxPlanningNodeNumber each time this function is called.\r\n        this.maxPlanningNodeNumber++;\r\n\r\n        // return the next available planning node instance node id\r\n        return 'planningNode' + this.maxPlanningNodeNumber;\r\n    }\r\n\r\n    /**\r\n     * Get the annotations\r\n     * @returns the annotations\r\n     */\r\n    getAnnotations() {\r\n        var annotations = null;\r\n\r\n        if (this.studentData != null && this.studentData.annotations != null) {\r\n            annotations = this.studentData.annotations;\r\n        }\r\n\r\n        return annotations;\r\n    }\r\n\r\n    /**\r\n     * Get the latest component states for a node\r\n     * @param nodeId get the component states for the node i\r\n     * @return an array containing the work for the node\r\n     */\r\n    getLatestComponentStatesByNodeId(nodeId) {\r\n\r\n        var latestComponentStates = [];\r\n\r\n        if (nodeId) {\r\n            var studentData = this.studentData;\r\n\r\n            if (studentData) {\r\n\r\n                // get the node\r\n                var node = this.ProjectService.getNodeById(nodeId);\r\n\r\n                if (node != null) {\r\n\r\n                    // get the components in the node\r\n                    var components = node.components;\r\n\r\n                    if (components != null) {\r\n\r\n                        // loop through all the components\r\n                        for (var c = 0; c < components.length; c++) {\r\n                            var component = components[c];\r\n\r\n                            if (component != null) {\r\n                                var componentId = component.id;\r\n\r\n                                // get the latest component state for the component\r\n                                var componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\r\n\r\n                                if (componentState == null) {\r\n                                    /*\r\n                                     * there is no component state for the component so we will\r\n                                     * create an object that just contains the node id and\r\n                                     * component id\r\n                                     */\r\n                                    componentState = {};\r\n                                    componentState.nodeId = nodeId;\r\n                                    componentState.componentId = componentId;\r\n                                }\r\n\r\n                                latestComponentStates.push(componentState);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return latestComponentStates;\r\n    }\r\n\r\n    /**\r\n     * Check if the completion criteria is satisfied\r\n     * @param completionCriteria the completion criteria\r\n     * @return whether the completion criteria was satisfied\r\n     */\r\n    isCompletionCriteriaSatisfied(completionCriteria) {\r\n\r\n        var result = true;\r\n\r\n        if (completionCriteria != null) {\r\n\r\n            if (completionCriteria.inOrder) {\r\n                // the criteria need to be satisfied in order\r\n\r\n                var tempTimestamp = 0;\r\n\r\n                // get all of the criteria\r\n                var criteria = completionCriteria.criteria;\r\n\r\n                // loop through all the criteria\r\n                for (var c = 0; c < criteria.length; c++) {\r\n                    var tempResult = true;\r\n\r\n                    // get a criterion\r\n                    var completionCriterion = criteria[c];\r\n\r\n                    if (completionCriterion != null) {\r\n\r\n                        // get the function name e.g. 'isVisited', 'isSaved', 'isSubmitted'\r\n                        var functionName = completionCriterion.name;\r\n\r\n                        if (functionName == 'isSubmitted') {\r\n                            var nodeId = completionCriterion.nodeId;\r\n                            var componentId = completionCriterion.componentId;\r\n\r\n                            // get the first submit component state after the timestamp\r\n                            var tempComponentState = this.getComponentStateSubmittedAfter(nodeId, componentId, tempTimestamp);\r\n\r\n                            if (tempComponentState == null) {\r\n                                // we did not find a component state\r\n                                result = false;\r\n                                break;\r\n                            } else {\r\n                                // we found a component state so we will update timestamp\r\n                                tempTimestamp = tempComponentState.serverSaveTime;\r\n                            }\r\n                        } else if (functionName == 'isSaved') {\r\n                            var nodeId = completionCriterion.nodeId;\r\n                            var componentId = completionCriterion.componentId;\r\n\r\n                            // get the first save component state after the timestamp\r\n                            var tempComponentState = this.getComponentStateSavedAfter(nodeId, componentId, tempTimestamp);\r\n\r\n                            if (tempComponentState == null) {\r\n                                // we did not find a component state\r\n                                result = false;\r\n                                break;\r\n                            } else {\r\n                                // we found a component state so we will update timestamp\r\n                                tempTimestamp = tempComponentState.serverSaveTime;\r\n                            }\r\n                        } else if (functionName == 'isVisited') {\r\n                            var nodeId = completionCriterion.nodeId;\r\n\r\n                            // get the first visit event after the timestamp\r\n                            var tempEvent = this.getVisitEventAfter(nodeId, tempTimestamp);\r\n\r\n                            if (tempEvent == null) {\r\n                                // we did not find a component state\r\n                                result = false;\r\n                                break;\r\n                            } else {\r\n                                // we found a component state so we will update timestamp\r\n                                tempTimestamp = tempEvent.serverSaveTime;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the first save component state after the given timestamp\r\n     * @param nodeId the node id of the component state\r\n     * @param componentId the component id of the component state\r\n     * @param timestamp look for a save component state after this timestamp\r\n     */\r\n    getComponentStateSavedAfter(nodeId, componentId, timestamp) {\r\n        var componentState = null;\r\n\r\n        // get all the component states\r\n        var componentStates = this.studentData.componentStates;\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n\r\n                // get a component state\r\n                var tempComponentState = componentStates[c];\r\n\r\n                if (tempComponentState != null &&\r\n                    tempComponentState.serverSaveTime > timestamp &&\r\n                    tempComponentState.nodeId === nodeId &&\r\n                    tempComponentState.componentId === componentId) {\r\n\r\n                    // we have found a save component state after the timestamp\r\n                    componentState = tempComponentState;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    /**\r\n     * Get the first submit component state after the given timestamp\r\n     * @param nodeId the node id of the component state\r\n     * @param componentId the component id of the component state\r\n     * @param timestamp look for a submit component state after this timestamp\r\n     */\r\n    getComponentStateSubmittedAfter(nodeId, componentId, timestamp) {\r\n        var componentState = null;\r\n\r\n        // get all the component states\r\n        var componentStates = this.studentData.componentStates;\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states\r\n            for (var c = 0; c < componentStates.length; c++) {\r\n                var tempComponentState = componentStates[c];\r\n\r\n                if (tempComponentState != null &&\r\n                    tempComponentState.serverSaveTime > timestamp &&\r\n                    tempComponentState.nodeId === nodeId &&\r\n                    tempComponentState.componentId === componentId &&\r\n                    tempComponentState.isSubmit) {\r\n\r\n                    // we have found a submit component state after the timestamp\r\n                    componentState = tempComponentState;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return componentState;\r\n    }\r\n\r\n    /**\r\n     * Get the first visit event after the timestamp\r\n     */\r\n    getVisitEventAfter(nodeId, timestamp) {\r\n        var event = null;\r\n\r\n        // get all the events\r\n        var events = this.studentData.events;\r\n\r\n        if (events != null) {\r\n\r\n            // loop through all the events\r\n            for (var e = 0; e < events.length; e++) {\r\n                var tempEvent = events[e];\r\n\r\n                if (tempEvent != null &&\r\n                    tempEvent.serverSaveTime > timestamp &&\r\n                    tempEvent.nodeId === nodeId &&\r\n                    tempEvent.event === 'nodeEntered') {\r\n\r\n                    // we have found a visit event after the timestamp\r\n                    event = tempEvent;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return event;\r\n    }\r\n}\r\n\r\nStudentDataService.$inject = [\r\n    '$filter',\r\n    '$http',\r\n    '$injector',\r\n    '$q',\r\n    '$rootScope',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'ProjectService',\r\n    'UtilService'\r\n];\r\n\r\nexport default StudentDataService;\r\n"]}