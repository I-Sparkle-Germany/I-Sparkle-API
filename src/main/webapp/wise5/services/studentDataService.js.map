{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$filter","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","ProjectService","UtilService","$translate","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxScore","maxPlanningNodeNumber","saveToServerRequestCount","dummyStudentWorkId","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","i","length","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","annotation","handleAnnotationReceived","isPreview","componentStates","nodeStates","events","userName","userId","setAnnotations","populateHistories","updateNodeStatuses","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","s","studentWork","componentId","push","project","nodes","p","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","g","depth","getNodeDepth","sort","a","b","getMaxScore","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","getFlattenedProjectAsNodeIds","indexOf","isVisible","isVisibleResults","isVisitableResults","firstResult","c","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","previousIsCompletedValue","progress","getNodeProgressById","icon","getNodeIconByNodeId","latestComponentStatesForNode","getLatestComponentStateByNodeId","latestComponentStateClientSaveTime","clientSaveTime","latestComponentStateServerSaveTime","serverSaveTime","removalCriteria","evaluateNodeConstraint","visitedNodes","getVisitedNodesHistory","transitionsToNodeId","v","visitedNodeId","transitions","getTransitionsByFromAndToNodeId","isStartNode","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsRevisedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateIsCorrectCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","evaluateUsedXSubmitsCriteria","getComponentStatesByNodeIdAndComponentId","componentState","isCorrect","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","e","isVisitedAfter","isVisitedAfterNodeId","criteriaCreatedTimestamp","isRevisedAfter","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","isVisitedAndRevisedAfter","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","toString","requiredSubmitCount","manualSubmitCounter","highestSubmitCounter","isSubmit","submitCounter","updateStackHistory","updateVisitedNodesHistory","index","stackHistoryResult","indexOfNodeId","splice","timestamp","nodeStatesByNodeId","tempNodeId","notebookItemId","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","projectId","getProjectId","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","angular","toJson","$","param","saveStudentStatus","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","getMode","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","projectCompletion","getProjectCompletion","studentStatusJSON","status","studentStatusParams","latestComponentState","submitDirty","getLatestComponentState","latestNodeState","allNodeStatesByNodeId","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","eventName","getNodeById","isActive","completedItems","completedItemsWithWork","totalItems","totalItemsWithWork","nodeIds","getChildNodeIdsById","groupProgress","hasWork","nodeHasWork","completionPct","Math","round","completionPctWithWork","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","isGroup","components","getComponentsByNodeId","showPreviousWorkNodeId","showPreviousWorkComponentId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","getComponentStatesByNodeId","completionCriteria","inOrder","tempTimestamp","completionCriterion","tempComponentState","getComponentStateSubmittedAfter","getComponentStateSavedAfter","tempEvent","getVisitEventAfter","showClassmateWorkSource","onlyGetLatest","hasOwnProperty","nodeMaxScore","getMaxScoreForNode","$inject"],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($filter,\n                $http,\n                $injector,\n                $q,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                UtilService) {\n\n        this.$filter = $filter;\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n        this.runStatus = null;\n        this.maxScore = null;\n\n        this.maxPlanningNodeNumber = 0;\n\n        /*\n         * A counter to keep track of how many saveToServer requests we have\n         * made that we haven't received a response for yet. When this value\n         * goes back down to 0, we will send update the student status and then\n         * save it to the server.\n         */\n        this.saveToServerRequestCount = 0;\n\n        /*\n         * A dummy student work id that is used in preview mode when we simulate\n         * saving of student data.\n         */\n        this.dummyStudentWorkId = 1;\n\n        // listen for node status changes\n        this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\n            // calculate active global annotations and group them by group name as needed\n            this.AnnotationService.calculateActiveGlobalAnnotationGroups();\n\n            // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\n            let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\n            globalAnnotationGroups.map((globalAnnotationGroup) => {\n                let globalAnnotations = globalAnnotationGroup.annotations;\n                globalAnnotations.map((globalAnnotation) => {\n                    if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\n                        let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\n                        let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\n                        if (unGlobalizeCriteriaArray != null) {\n                            if (unGlobalizeConditional === \"any\") {\n                                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                                let anySatified = false;\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                                    anySatified = anySatified || unGlobalizeCriteriaResult;\n                                }\n                                if (anySatified) {\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\n                                }\n                            } else if (unGlobalizeConditional === \"all\") {\n                                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                                let allSatisfied = true;\n                                for (let i = 0; i < unGlobalizeCriteriaArray.length; i++) {\n                                    let unGlobalizeCriteria = unGlobalizeCriteriaArray[i];\n                                    let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                                    allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\n                                }\n                                if (allSatisfied) {\n                                    globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                                    this.saveAnnotations([globalAnnotation]);  // save changes to server\n                                }\n                            }\n                        }\n                    }\n                });\n            })\n        });\n\n        /**\n         * Listen for the 'newAnnotationReceived' event which is fired when\n         * student receives a new annotation from the server\n         */\n        this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n            if (args) {\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n                this.handleAnnotationReceived(annotation);\n            }\n        });\n    }\n\n    retrieveStudentData() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.nodeStates = [];\n            this.studentData.events = [];\n            this.studentData.annotations = [];\n            this.studentData.userName = this.$translate('PREVIEW_STUDENT');\n            this.studentData.userId = '0';\n\n            // set the annotations into the annotation service\n            this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n            // populate the student history\n            this.populateHistories(this.studentData.events);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then((result) => {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // Check to see if this Project contains any Planning activities\n                    if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n                        // Overload/add new nodes based on student's work in the NodeState for the planning group.\n                        for (let p = 0; p < this.ProjectService.project.nodes.length; p++) {\n                            let planningGroupNode = this.ProjectService.project.nodes[p];\n                            if (planningGroupNode.planning) {\n                                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                                if (lastestNodeStateForPlanningGroupNode != null) {\n                                    let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                                    if (studentModifiedNodes != null) {\n                                        for (let s = 0; s < studentModifiedNodes.length; s++) {\n                                            let studentModifiedNode = studentModifiedNodes[s];  // Planning Node that student modified or new instances.\n                                            let studentModifiedNodeId = studentModifiedNode.id;\n                                            if (studentModifiedNode.planning) {\n                                                // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                                                for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                                                    if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                                                        // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                                                        this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                                                    }\n                                                }\n                                            } else {\n                                                // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                                                this.ProjectService.project.nodes.push(studentModifiedNode);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        // Re-parse the project with the modified changes\n                        this.ProjectService.parseProject();\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // populate the student history\n                    this.populateHistories(this.studentData.events);\n\n                    // update the node statuses\n                    this.updateNodeStatuses();\n                }\n\n                return this.studentData;\n            });\n        }\n    };\n\n    /**\n     * Retrieve the run status\n     */\n    retrieveRunStatus() {\n\n        if (this.ConfigService.isPreview()) {\n            // we are previewing the project\n            this.runStatus = {};\n        } else {\n            // we are in a run\n            var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            //create the params for the request\n            var params = {\n                runId:runId\n            };\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.url = runStatusURL;\n            httpParams.params = params;\n\n            // make the request for the run status\n            return this.$http(httpParams).then((result) => {\n                if (result != null) {\n                    var data = result.data;\n                    if (data != null) {\n                        // remember the run status\n                        this.runStatus = data;\n                    }\n                }\n            });\n        }\n    }\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        let nodes = this.ProjectService.getNodes();\n        let planningNodes = this.ProjectService.getPlanningNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n            if (planningNodes != null) {\n                nodes = nodes.concat(planningNodes);\n            }\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n            }\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        // update max score\n        this.maxScore = this.getMaxScore();\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    /**\n     * Update the node status for a node\n     * @param node the node to update\n     */\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (this.ConfigService.getConfigParam('constraints') == false) {\n                /*\n                 * constraints have been disabled, most likely because we are\n                 * in preview without constraints mode\n                 */\n                constraintsForNode = null;\n            }\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                if (this.ProjectService.getFlattenedProjectAsNodeIds().indexOf(nodeId) == -1 &&\n                        !this.ProjectService.isGroupNode(nodeId)) {\n                    // there are no transitions to this node so it is not visible\n                    tempNodeStatus.isVisible = false;\n                    tempNodeStatus.isVisitable = true;\n                } else {\n                    // this node does not have any constraints so it is clickable\n                    tempNodeStatus.isVisible = true;\n                    tempNodeStatus.isVisitable = true;\n                }\n            } else {\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n\n                /*\n                 * get the previous isCompleted value so that we can later check\n                 * if it has changed\n                 */\n                var previousIsCompletedValue = this.nodeStatuses[nodeId].isCompleted;\n\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n\n                if (previousIsCompletedValue == false && tempNodeStatus.isCompleted) {\n                    /*\n                     * the node status just changed from false to true so we\n                     * will fire an event\n                     */\n\n                    this.$rootScope.$broadcast('nodeCompleted', { nodeId: nodeId });\n                }\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n            // get the latest component state for the node\n            var latestComponentStatesForNode = this.getLatestComponentStateByNodeId(nodeId);\n\n            if (latestComponentStatesForNode != null) {\n                // set the latest component state timestamp into the node status\n                this.nodeStatuses[nodeId].latestComponentStateClientSaveTime = latestComponentStatesForNode.clientSaveTime;\n                this.nodeStatuses[nodeId].latestComponentStateServerSaveTime = latestComponentStatesForNode.serverSaveTime;\n            }\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n            var removalConditional = constraintForNode.removalConditional;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria\n\n                            if (removalConditional === 'any') {\n                                // any of the criteria can be true to remove the constraint\n                                result = result || tempResult;\n                            } else {\n                                // all the criteria need to be true to remove the constraint\n                                result = result && tempResult;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n\n            var functionName = criteria.name;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n                result = this.evaluateIsVisitedCriteria(criteria);\n            } else if (functionName === 'isVisitedAfter') {\n                result = this.evaluateIsVisitedAfterCriteria(criteria);\n            } else if (functionName === 'isRevisedAfter') {\n                result = this.evaluateIsRevisedAfterCriteria(criteria);\n            } else if (functionName === 'isVisitedAndRevisedAfter') {\n                result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\n            } else if (functionName === 'isCompleted') {\n                result = this.evaluateIsCompletedCriteria(criteria);\n            } else if (functionName === 'isCorrect') {\n                result = this.evaluateIsCorrectCriteria(criteria);\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === 'isPlanningActivityCompleted') {\n                result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n            } else if (functionName === 'score') {\n                result = this.evaluateScoreCriteria(criteria);\n            } else if (functionName === 'usedXSubmits') {\n                result = this.evaluateUsedXSubmitsCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isCompleted criteria was satisfied\n     * @param criteria an isCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            var params = criteria.params;\n            var nodeId = params.nodeId;\n\n            result = this.isCompleted(nodeId);\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the isCorrect criteria was satisfied\n     * @param criteria an isCorrect criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsCorrectCriteria(criteria) {\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the criteria params\n            var params = criteria.params;\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states for the component\n                var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n\n                            var studentData = componentState.studentData;\n\n                            if (studentData != null) {\n                                if (studentData.isCorrect) {\n                                    // the student answered correctly\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if the isPlanningActivityCompleted criteria was satisfied\n     * @param criteria a isPlanningActivityCompleted criteria\n     * @returns whether the criteria was satisfied or not\n     */\n    evaluateIsPlanningActivityCompletedCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            var params = criteria.params;\n\n            // get the group id\n            var nodeId = params.nodeId;\n\n            // get the number of planning steps the student needs to create\n            var planningStepsCreated = params.planningStepsCreated;\n\n            // get whether the student needs to complete all the steps in the activity\n            var planningStepsCompleted = params.planningStepsCompleted;\n\n            var planningStepsCreatedSatisfied = false;\n            var planningStepsCompletedSatisfied = false;\n\n            var planningNodes = [];\n\n            if (planningStepsCreated == null) {\n                // there is no value set so we will regard it as satisfied\n                planningStepsCreatedSatisfied = true;\n            } else {\n                /*\n                 * there is a value for number of planning steps that need to be created\n                 * so we will check if the student created enough planning steps\n                 */\n\n                // get the node states for the activity\n                var nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n                if (nodeStates != null) {\n\n                    /*\n                     * loop through all the node states from newest to oldest\n                     * for the sake of efficiency\n                     */\n                    for (var ns = nodeStates.length - 1; ns >= 0; ns--) {\n\n                        var planningStepCount = 0;\n\n                        var nodeState = nodeStates[ns];\n\n                        if (nodeState != null) {\n\n                            // get the student data\n                            var studentData = nodeState.studentData;\n\n                            if (studentData != null) {\n\n                                // get the nodes\n                                var nodes = studentData.nodes;\n\n                                if (nodes != null) {\n\n                                    // loop through the nodes\n                                    for (var n = 0; n < nodes.length; n++) {\n                                        var node = nodes[n];\n\n                                        if (node != null) {\n                                            if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                                                // we have found a planning step the student created\n                                                planningStepCount++;\n                                            }\n                                        }\n                                    }\n\n                                    if (planningStepCount >= planningStepsCreated) {\n                                        // the student has created a sufficient number of planning steps\n                                        planningStepsCreatedSatisfied = true;\n                                        planningNodes = nodes;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (planningStepsCompleted == null) {\n                planningStepsCompletedSatisfied = true;\n            } else {\n                /*\n                 * check if the activity is completed. this checks if all\n                 * the children of the activity are completed.\n                 */\n                if (this.isCompleted(nodeId)) {\n                    planningStepsCompletedSatisfied = true;\n                }\n            }\n\n            if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if this branchPathTaken criteria was satisfied\n     * @param criteria a branchPathTaken criteria\n     * @returns whether the branchPathTaken criteria was satisfied\n     */\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null && criteria.params != null) {\n            // get the expected from and to node ids\n            var expectedFromNodeId = criteria.params.fromNodeId;\n            var expectedToNodeId = criteria.params.toNodeId;\n\n            // get all the branchPathTaken events from the from node id\n            var branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n            if (branchPathTakenEvents != null) {\n\n                // loop through all the branchPathTaken events\n                for (var b = 0; b < branchPathTakenEvents.length; b++) {\n                    var branchPathTakenEvent = branchPathTakenEvents[b];\n\n                    if (branchPathTakenEvent != null) {\n                        var data = branchPathTakenEvent.data;\n\n                        if (data != null) {\n                            // get the from and to node ids of the event\n                            var fromNodeId = data.fromNodeId;\n                            var toNodeId = data.toNodeId;\n\n                            if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                                // the from and to node ids match the ones we are looking for\n                                result = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Check if the isVisited criteria was satisfied\n     * @param criteria the isVisited criteria\n     * @returns whether the node id is visited\n     */\n    evaluateIsVisitedCriteria(criteria) {\n\n        var isVisited = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            var nodeId = criteria.params.nodeId;\n\n            // get all the events\n            var events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n                            // the student has entered the node before\n                            isVisited = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisited;\n    }\n\n    /**\n     * Check if the isVisitedAfter criteria was satisfied\n     * @param criteria the isVisitedAfter criteria\n     * @returns whether the node id is visited after the criteriaCreatedTimestamp\n     */\n    evaluateIsVisitedAfterCriteria(criteria) {\n\n        let isVisitedAfter = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n            // get all the events\n            let events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (let e = 0; e < events.length; e++) {\n                    let event = events[e];\n\n                    if (event != null) {\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n                            // the student has entered the node after the criteriaCreatedTimestamp\n                            isVisitedAfter = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisitedAfter;\n    }\n\n    /**\n     * Check if the isRevisedAfter criteria was satisfied\n     * @param criteria the isRevisedAfter criteria\n     * @returns whether the specified node&component was revisted after the criteriaCreatedTimestamp\n     */\n    evaluateIsRevisedAfterCriteria(criteria) {\n\n        let isRevisedAfter = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n            let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n            // the student has entered the node after the criteriaCreatedTimestamp.\n            // now check if student has revised the work after this event\n            let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n            if (latestComponentStateForRevisedComponent.clientSaveTime > criteriaCreatedTimestamp) {\n                isRevisedAfter = true;\n            }\n        }\n\n        return isRevisedAfter;\n    }\n\n    /**\n     * Check if the isVisitedAndRevisedAfter criteria was satisfied\n     * @param criteria the isVisitedAndRevisedAfter criteria\n     * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\n     */\n    evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\n\n        let isVisitedAndRevisedAfter = false;\n\n        if (criteria != null && criteria.params != null) {\n\n            // get the node id we want to check if was visited\n            let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n            let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n            let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n            let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n            // get all the events\n            let events = this.studentData.events;\n\n            if (events != null) {\n\n                // loop through all the events\n                for (let e = 0; e < events.length; e++) {\n                    let event = events[e];\n\n                    if (event != null) {\n                        if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n                            // the student has entered the node after the criteriaCreatedTimestamp.\n                            // now check if student has revised the work after this event\n                            let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n                            if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\n                                isVisitedAndRevisedAfter = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return isVisitedAndRevisedAfter;\n    }\n\n    /**\n     * Get all the branchPathTaken events by node id\n     * @params fromNodeId the from node id\n     * @returns all the branchPathTaken events from the given node id\n     */\n    getBranchPathTakenEventsByNodeId(fromNodeId) {\n\n        var branchPathTakenEvents = [];\n        var events = this.studentData.events;\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n                        // we have found a branchPathTaken event from the from node id\n                        branchPathTakenEvents.push(event);\n                    }\n                }\n            }\n        }\n\n        return branchPathTakenEvents;\n    }\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';  // Assume MC component.\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the score criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the criteria was satisfied or not\n     */\n    evaluateScoreCriteria(criteria) {\n\n        var result = false;\n\n        var params = criteria.params;\n\n        if (params != null) {\n\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n            var scores = params.scores;\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var scoreType = 'any';\n\n            if (nodeId != null && componentId != null && scores != null) {\n\n                // get the latest score annotation\n                var latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n\n                if (latestScoreAnnotation != null) {\n\n                    // get the score value\n                    var scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n                    // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\n                    if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\n                        /*\n                         * the student has received a score that matches a score\n                         * we're looking for\n                         */\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the used x submits criteria which requires the student to submit\n     * at least x number of times.\n     * @param criteria the criteria to evaluate\n     * @returns a boolean value whether the student submitted at least x number\n     * of times\n     */\n    evaluateUsedXSubmitsCriteria(criteria) {\n        var result = false;\n\n        var params = criteria.params;\n\n        if (params != null) {\n\n            // get the node id and component id to check the submit counter for\n            var nodeId = params.nodeId;\n            var componentId = params.componentId;\n\n            // get the number of submits required\n            var requiredSubmitCount = params.requiredSubmitCount;\n\n            if (nodeId != null && componentId != null) {\n\n                // get the component states for the component\n                var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n                if (componentStates != null) {\n\n                    // counter for manually counting the component states with isSubmit=true\n                    var manualSubmitCounter = 0;\n\n                    // counter for remembering the highest submitCounter value found in studentData objects\n                    var highestSubmitCounter = 0;\n\n                    /*\n                     * We are counting with two submit counters for backwards compatibility.\n                     * Some componentStates only have isSubmit=true and do not keep an\n                     * updated submitCounter for the number of submits.\n                     */\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n\n                            if (componentState.isSubmit) {\n                                // this is a submit component state\n                                manualSubmitCounter++;\n                            }\n\n                            var studentData = componentState.studentData;\n\n                            if (studentData != null) {\n\n                                if (studentData.submitCounter != null) {\n                                    if (studentData.submitCounter > highestSubmitCounter) {\n                                        /*\n                                         * the submit counter in the student data is higher\n                                         * than we have previously seen\n                                         */\n                                        highestSubmitCounter = studentData.submitCounter;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (manualSubmitCounter >= requiredSubmitCount || highestSubmitCounter >= requiredSubmitCount) {\n                        // the student submitted the required number of times\n                        result = true;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param events the events\n     */\n    populateHistories(events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateStackHistory(event.nodeId);\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    /**\n     * Returns all NodeStates\n     * @returns Array of all NodeStates\n     */\n    getNodeStates() {\n        let nodeStates = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            nodeStates = this.studentData.nodeStates;\n        }\n\n        return nodeStates;\n    };\n\n    /**\n     * Get all NodeStates for a specific node\n     * @param nodeId id of node\n     * @returns Array of NodeStates for the specified node\n     */\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    handleAnnotationReceived(annotation) {\n        // add the annotation to the local annotations array\n        this.studentData.annotations.push(annotation);\n\n        if (annotation.notebookItemId) {\n            // broadcast the event that a new notebook item annotation has been received\n            this.$rootScope.$broadcast('notebookItemAnnotationReceived', {annotation: annotation});\n        } else {\n            // broadcast the event that a new annotation has been received\n            this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n        }\n    }\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_COMPONENT_CATEGORY_EVENT_ERROR'));\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_NODE_ID_COMPONENT_ID_COMPONENT_TYPE_ERROR'));\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_VLE_EVENT_CATEGORY_EVENT_ERROR'));\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.projectId = this.ConfigService.getProjectId();\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        /*\n         * increment the request count since we are about to save data\n         * to the server\n         */\n        this.saveToServerRequestCount += 1;\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    if (annotation.id == null) {\n                        // add to local annotation array if this annotation has not been saved to the server before.\n                        this.addAnnotation(annotation);\n                    }\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.isPreview()) {\n            var savedStudentDataResponse = {\n                studentWorkList: studentWorkList,\n                events: events,\n                annotations: annotations\n            };\n\n            // if we're in preview, don't make any request to the server but pretend we did\n            this.saveToServerSuccess(savedStudentDataResponse);\n            let deferred = this.$q.defer();\n            deferred.resolve(savedStudentDataResponse);\n            return deferred.promise;\n        } else {\n            // set the workgroup id and run id\n            var params = {};\n            params.projectId = this.ConfigService.getProjectId();\n            params.runId = this.ConfigService.getRunId();\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.studentWorkList = angular.toJson(studentWorkList);\n            params.events = angular.toJson(events);\n            params.annotations = angular.toJson(annotations);\n\n            // get the url to POST the student data\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(params);\n\n            // make the request to post the student data\n            return this.$http(httpParams).then(\n                result => {\n                    // get the local references to the component states that were posted and set their id and serverSaveTime\n                    if (result != null && result.data != null) {\n                        var savedStudentDataResponse = result.data;\n\n                        this.saveToServerSuccess(savedStudentDataResponse);\n\n                        return savedStudentDataResponse;\n                    }\n                }, result => {\n                    // a server error occured\n\n                    /*\n                     * decrement the request count since this request failed\n                     * but is now completed\n                     */\n                    this.saveToServerRequestCount -= 1;\n\n                    return null;\n                }\n            );\n        }\n    };\n\n    saveToServerSuccess(savedStudentDataResponse) {\n\n        /*\n         * decrement the request count since we have received a response to\n         * one of our save requests\n         */\n        this.saveToServerRequestCount -= 1;\n\n        if (this.saveToServerRequestCount == 0) {\n            /*\n             * we have received the reponse to all of the saveToServer requests\n             * so we will now update the student status and save it to the\n             * server\n             */\n            this.updateNodeStatuses();\n            this.saveStudentStatus();\n        }\n\n        // set dummy serverSaveTime for use if we're in preview mode\n        let serverSaveTime = Date.parse(new Date());\n\n        // handle saved studentWork\n        if (savedStudentDataResponse.studentWorkList) {\n            let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n            let localStudentWorkList = this.studentData.componentStates;\n            if (this.studentData.nodeStates) {\n                localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n            }\n\n            // set the id and serverSaveTime in the local studentWorkList\n            for (var i = 0; i < savedStudentWorkList.length; i++) {\n                var savedStudentWork = savedStudentWorkList[i];\n\n                /*\n                 * loop through all the student work that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                    var localStudentWork = localStudentWorkList[l];\n                    if (localStudentWork.requestToken &&\n                        localStudentWork.requestToken === savedStudentWork.requestToken) {\n                        localStudentWork.id = savedStudentWork.id;\n                        localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n                        localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                        if (this.ConfigService.getMode() == \"preview\" && localStudentWork.id == null) {\n                            /*\n                             * we are in preview mode so we will set a dummy\n                             * student work id into the student work\n                             */\n                            localStudentWork.id = this.dummyStudentWorkId;\n\n                            /*\n                             * increment the dummy student work id for the next\n                             * student work\n                             */\n                            this.dummyStudentWorkId++;\n                        }\n\n                        this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                        break;\n                    }\n                }\n            }\n        }\n        // handle saved events\n        if (savedStudentDataResponse.events) {\n            var savedEvents = savedStudentDataResponse.events;\n\n            var localEvents = this.studentData.events;\n\n            // set the id and serverSaveTime in the local event\n            for (var i = 0; i < savedEvents.length; i++) {\n                var savedEvent = savedEvents[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localEvents.length - 1; l >= 0; l--) {\n                    var localEvent = localEvents[l];\n                    if (localEvent.requestToken &&\n                        localEvent.requestToken === savedEvent.requestToken) {\n                        localEvent.id = savedEvent.id;\n                        localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n                        localEvent.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                        break;\n                    }\n                }\n            }\n        }\n\n        // handle saved annotations\n        if (savedStudentDataResponse.annotations) {\n            var savedAnnotations = savedStudentDataResponse.annotations;\n\n            var localAnnotations = this.studentData.annotations;\n\n            // set the id and serverSaveTime in the local annotation\n            for (var i = 0; i < savedAnnotations.length; i++) {\n                var savedAnnotation = savedAnnotations[i];\n\n                /*\n                 * loop through all the events that were posted\n                 * to find the one with the matching request token\n                 */\n                for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                    var localAnnotation = localAnnotations[l];\n                    if (localAnnotation.requestToken &&\n                        localAnnotation.requestToken === savedAnnotation.requestToken) {\n                        localAnnotation.id = savedAnnotation.id;\n                        localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n                        localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                        this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.updateNodeStatuses();\n\n    };\n\n    /**\n     * POSTs student status to server\n     * Returns a promise of the POST request\n     */\n    saveStudentStatus() {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n            var studentStatusURL = this.ConfigService.getStudentStatusURL();\n            if (studentStatusURL != null) {\n                var runId = this.ConfigService.getRunId();\n                var periodId = this.ConfigService.getPeriodId();\n                var workgroupId = this.ConfigService.getWorkgroupId();\n\n                // get the current node id\n                var currentNodeId = this.getCurrentNodeId();\n\n                // get the node statuses\n                var nodeStatuses = this.getNodeStatuses();\n\n                // get the project completion percentage\n                var projectCompletion = this.getProjectCompletion();\n\n                // create the JSON that will be saved to the database\n                var studentStatusJSON = {};\n                studentStatusJSON.runId = runId;\n                studentStatusJSON.periodId = periodId;\n                studentStatusJSON.workgroupId = workgroupId;\n                studentStatusJSON.currentNodeId = currentNodeId;\n                studentStatusJSON.nodeStatuses = nodeStatuses;\n                studentStatusJSON.projectCompletion = projectCompletion;\n\n                // get the student status as a string\n                var status = angular.toJson(studentStatusJSON);\n\n                /*\n                 * create the params for the message that will be sent\n                 * to the StudentStatusController and saved in the\n                 * database\n                 */\n                var studentStatusParams = {};\n                studentStatusParams.runId = runId;\n                studentStatusParams.periodId = periodId;\n                studentStatusParams.workgroupId = workgroupId;\n                studentStatusParams.status = status;\n\n                // get the url to POST the student data\n                var httpParams = {};\n                httpParams.method = 'POST';\n                httpParams.url = studentStatusURL;\n                httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n                httpParams.data = $.param(studentStatusParams);\n\n                // make the request to post the student status\n                return this.$http(httpParams).then(\n                    result => {\n                        return true;\n                    }, result => {\n                        // a server error occured\n                        return false;\n                    }\n                );\n            }\n        }\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Check whether the component has unsubmitted work\n     * @return boolean whether or not there is unsubmitted work\n     */\n    isComponentSubmitDirty() {\n        let submitDirty = false;\n\n        let latestComponentState = this.getLatestComponentState();\n        if (latestComponentState && !latestComponentState.isSubmit) {\n            submitDirty = true;\n        }\n\n        return submitDirty;\n    };\n\n    /**\n     * Get the latest NodeState for the specified node id\n     * @param nodeId the node id\n     * @return the latest node state with the matching node id or null if none are found\n     */\n    getLatestNodeStateByNodeId(nodeId) {\n        let latestNodeState = null;\n        let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n        if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n            latestNodeState = allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n        }\n        return latestNodeState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id (optional)\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates) {\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id and component id\n                            if (nodeId === componentStateNodeId) {\n                                if (componentId) {\n                                    var componentStateComponentId = componentState.componentId;\n                                    if (componentId === componentStateComponentId) {\n                                        latestComponentState = componentState;\n                                        break;\n                                    }\n                                } else {\n                                    latestComponentState = componentState;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Returns all the component states for this workgroup\n     */\n    getComponentStates() {\n        return this.studentData.componentStates;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get all events\n     * @returns all events for the student\n     */\n    getEvents() {\n        if (this.studentData != null && this.studentData.events != null) {\n            return this.studentData.events;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Get the node id of the latest node entered event for an active node that\n     * exists in the project. We need to check if the node exists in the project\n     * in case the node has been deleted from the project. We also need to check\n     * that the node is active in case the node has been moved to the inactive\n     * section of the project.\n     * @return the node id of the latest node entered event for an active node\n     * that exists in the project\n     */\n    getLatestNodeEnteredEventNodeIdWithExistingNode() {\n\n        // get all the events\n        var events = this.studentData.events;\n\n        // loop through all the events newest to oldest\n        for (var e = events.length - 1; e >= 0; e--) {\n\n            // get an event\n            var event = events[e];\n\n            if (event != null) {\n\n                // get the event name\n                var eventName = event.event;\n\n                if (eventName == 'nodeEntered') {\n                    // we have found a nodeEntered event\n\n                    // get the node id of the event\n                    var nodeId = event.nodeId;\n\n                    // check if the node exists in the project\n                    var node = this.ProjectService.getNodeById(nodeId);\n\n                    if (node != null) {\n\n                        // check if the node is active\n                        if (this.ProjectService.isActive(nodeId)) {\n                            // the node exists in the project and is active\n                            return nodeId;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get progress information for a given node\n     * @param nodeId the node id\n     * @returns object with number of completed items (both all and for items\n     * that capture student work), number of visible items (all/with work),\n     * completion % (for all items, items with student work)\n     */\n    getNodeProgressById(nodeId) {\n        let completedItems = 0;\n        let completedItemsWithWork = 0;\n        let totalItems = 0;\n        let totalItemsWithWork = 0;\n        let progress = {};\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            let nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (let n=0; n<nodeIds.length; n++) {\n                let id = nodeIds[n];\n                let status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    if (status.progress.totalItemsWithWork > -1) {\n                      completedItems += status.progress.completedItems;\n                      totalItems += status.progress.totalItems;\n                      completedItemsWithWork += status.progress.completedItemsWithWork;\n                      totalItemsWithWork += status.progress.totalItemsWithWork;\n                    } else {\n                        // we have a legacy node status so we'll need to calculate manually\n                        let groupProgress = this.getNodeProgressById(id);\n                        completedItems += groupProgress.completedItems;\n                        totalItems += groupProgress.totalItems;\n                        completedItemsWithWork += groupProgress.completedItemsWithWork;\n                        totalItemsWithWork += groupProgress.totalItemsWithWork;\n                    }\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n\n                        let hasWork = this.ProjectService.nodeHasWork(id);\n                        if (hasWork) {\n                            totalItemsWithWork++;\n                        }\n\n                        if (status.isCompleted) {\n                            completedItems++;\n\n                            if (hasWork) {\n                              completedItemsWithWork++;\n                            }\n                        }\n                    }\n                }\n            }\n\n            let completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n            let completionPctWithWork = totalItemsWithWork ? Math.round(completedItemsWithWork / totalItemsWithWork * 100) : 0;\n\n            progress = {\n                \"completedItems\": completedItems,\n                \"completedItemsWithWork\": completedItemsWithWork,\n                \"totalItems\": totalItems,\n                \"totalItemsWithWork\": totalItemsWithWork,\n                \"completionPct\": completionPct,\n                \"completionPctWithWork\": completionPctWithWork\n            };\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)?\n\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group are visible and completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n                if (nodeIds.length) {\n                    for (var n=0; n<nodeIds.length; n++) {\n                        var id = nodeIds[n];\n\n                        if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n                            // the child is not visible or not completed so the group is not completed\n                            tempResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n                    tempResult = false;\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                // we will default to is completed true\n                var tempResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempNode = node;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempNode = this.ProjectService.getNodeById(tempNodeId);\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\n\n                                    tempResult = tempResult && isComponentCompleted;\n                                }\n                            } catch (e) {\n                                console.log(this.$translate('ERROR_COULD_NOT_CALCULATE_IS_COMPLETED') + tempComponentId);\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ) {\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )) {\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n\n    /**\n     * Get the project completion for the signed in student\n     * @returns the project completion percentage for the signed in student\n     */\n    getProjectCompletion() {\n\n        // group0 is always the root node of the whole project\n        var nodeId = 'group0';\n\n        // get the progress including all of the children nodes\n        var progress = this.getNodeProgressById(nodeId);\n\n        return progress;\n    }\n\n    /**\n     * Get the run status\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Get the next available planning node instance node id\n     * @returns the next available planning node instance node id\n     */\n    getNextAvailablePlanningNodeId() {\n\n        // used to keep track of the highest planning node number we have found, which is 1-based\n        let currentMaxPlanningNodeNumber = 1;\n\n        let nodeStates = this.getNodeStates();\n\n        if (nodeStates != null) {\n\n            // loop through all the NodeStates\n            for (var ns = 0; ns < nodeStates.length; ns++) {\n                let nodeState = nodeStates[ns];\n\n                if (nodeState != null) {\n                    let nodeStateNodeId = nodeState.nodeId;\n                    if (this.ProjectService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n                        let nodes = nodeState.studentData.nodes;\n                        for (var n = 0; n < nodes.length; n++) {\n                            let node = nodes[n];\n                            let nodeId = node.id;\n                            // regex to match the planning node id e.g. planningNode2\n                            let planningNodeIdRegEx = /planningNode(.*)/;\n\n                            // run the regex on the node id\n                            let result = nodeId.match(planningNodeIdRegEx);\n\n                            if (result != null) {\n                                // we have found a planning node instance node id\n\n                                /*\n                                 * get the number part of the planning node instance node id\n                                 * e.g. if the nodeId is planningNode2, the number part\n                                 * would be 2\n                                 */\n                                let planningNodeNumber = parseInt(result[1]);\n\n                                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                                    /*\n                                     * update the max number part if we have found a new\n                                     * higher number\n                                     */\n                                    currentMaxPlanningNodeNumber = planningNodeNumber;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n            // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n            this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n        }\n\n        // Increment maxPlanningNodeNumber each time this function is called.\n        this.maxPlanningNodeNumber++;\n\n        // return the next available planning node instance node id\n        return 'planningNode' + this.maxPlanningNodeNumber;\n    }\n\n    /**\n     * Get the annotations\n     * @returns the annotations\n     */\n    getAnnotations() {\n        var annotations = null;\n\n        if (this.studentData != null && this.studentData.annotations != null) {\n            annotations = this.studentData.annotations;\n        }\n\n        return annotations;\n    }\n\n    /**\n     * Get the latest component states for a node\n     * @param nodeId get the component states for the node\n     * @return an array containing the work for the node\n     */\n    getLatestComponentStatesByNodeId(nodeId) {\n\n        var latestComponentStates = [];\n\n        if (nodeId) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n\n                // get the node\n                var node = this.ProjectService.getNodeById(nodeId);\n\n                if (node != null) {\n\n                    // get the components in the node\n                    var components = node.components;\n\n                    if (components != null) {\n\n                        // loop through all the components\n                        for (var c = 0; c < components.length; c++) {\n                            var component = components[c];\n\n                            if (component != null) {\n                                var componentId = component.id;\n\n                                // get the latest component state for the component\n                                var componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n\n                                if (componentState == null) {\n                                    /*\n                                     * there is no component state for the component so we will\n                                     * create an object that just contains the node id and\n                                     * component id\n                                     */\n                                    componentState = {};\n                                    componentState.nodeId = nodeId;\n                                    componentState.componentId = componentId;\n                                }\n\n                                latestComponentStates.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentStates;\n    }\n\n    /**\n     * Get the latest component state for a node\n     * @param nodeId get the latest component state for the node\n     * @return the latest component state for the node\n     */\n    getLatestComponentStateByNodeId(nodeId) {\n\n        var latestComponentState = null;\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData) {\n\n                // get the component states for the node\n                var componentStates = this.getComponentStatesByNodeId(nodeId);\n\n                // get the latest component state\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    /**\n     * Check if the completion criteria is satisfied\n     * @param completionCriteria the completion criteria\n     * @return whether the completion criteria was satisfied\n     */\n    isCompletionCriteriaSatisfied(completionCriteria) {\n\n        var result = true;\n\n        if (completionCriteria != null) {\n\n            if (completionCriteria.inOrder) {\n                // the criteria need to be satisfied in order\n\n                var tempTimestamp = 0;\n\n                // get all of the criteria\n                var criteria = completionCriteria.criteria;\n\n                // loop through all the criteria\n                for (var c = 0; c < criteria.length; c++) {\n                    var tempResult = true;\n\n                    // get a criterion\n                    var completionCriterion = criteria[c];\n\n                    if (completionCriterion != null) {\n\n                        // get the function name e.g. 'isVisited', 'isSaved', 'isSubmitted'\n                        var functionName = completionCriterion.name;\n\n                        if (functionName == 'isSubmitted') {\n                            var nodeId = completionCriterion.nodeId;\n                            var componentId = completionCriterion.componentId;\n\n                            // get the first submit component state after the timestamp\n                            var tempComponentState = this.getComponentStateSubmittedAfter(nodeId, componentId, tempTimestamp);\n\n                            if (tempComponentState == null) {\n                                // we did not find a component state\n                                result = false;\n                                break;\n                            } else {\n                                // we found a component state so we will update timestamp\n                                tempTimestamp = tempComponentState.serverSaveTime;\n                            }\n                        } else if (functionName == 'isSaved') {\n                            var nodeId = completionCriterion.nodeId;\n                            var componentId = completionCriterion.componentId;\n\n                            // get the first save component state after the timestamp\n                            var tempComponentState = this.getComponentStateSavedAfter(nodeId, componentId, tempTimestamp);\n\n                            if (tempComponentState == null) {\n                                // we did not find a component state\n                                result = false;\n                                break;\n                            } else {\n                                // we found a component state so we will update timestamp\n                                tempTimestamp = tempComponentState.serverSaveTime;\n                            }\n                        } else if (functionName == 'isVisited') {\n                            var nodeId = completionCriterion.nodeId;\n\n                            // get the first visit event after the timestamp\n                            var tempEvent = this.getVisitEventAfter(nodeId, tempTimestamp);\n\n                            if (tempEvent == null) {\n                                // we did not find a component state\n                                result = false;\n                                break;\n                            } else {\n                                // we found a component state so we will update timestamp\n                                tempTimestamp = tempEvent.serverSaveTime;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the first save component state after the given timestamp\n     * @param nodeId the node id of the component state\n     * @param componentId the component id of the component state\n     * @param timestamp look for a save component state after this timestamp\n     */\n    getComponentStateSavedAfter(nodeId, componentId, timestamp) {\n        var componentState = null;\n\n        // get all the component states\n        var componentStates = this.studentData.componentStates;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n\n                // get a component state\n                var tempComponentState = componentStates[c];\n\n                if (tempComponentState != null &&\n                    tempComponentState.serverSaveTime > timestamp &&\n                    tempComponentState.nodeId === nodeId &&\n                    tempComponentState.componentId === componentId) {\n\n                    // we have found a save component state after the timestamp\n                    componentState = tempComponentState;\n                    break;\n                }\n            }\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the first submit component state after the given timestamp\n     * @param nodeId the node id of the component state\n     * @param componentId the component id of the component state\n     * @param timestamp look for a submit component state after this timestamp\n     */\n    getComponentStateSubmittedAfter(nodeId, componentId, timestamp) {\n        var componentState = null;\n\n        // get all the component states\n        var componentStates = this.studentData.componentStates;\n\n        if (componentStates != null) {\n\n            // loop through all the component states\n            for (var c = 0; c < componentStates.length; c++) {\n                var tempComponentState = componentStates[c];\n\n                if (tempComponentState != null &&\n                    tempComponentState.serverSaveTime > timestamp &&\n                    tempComponentState.nodeId === nodeId &&\n                    tempComponentState.componentId === componentId &&\n                    tempComponentState.isSubmit) {\n\n                    // we have found a submit component state after the timestamp\n                    componentState = tempComponentState;\n                    break;\n                }\n            }\n        }\n\n        return componentState;\n    }\n\n    /**\n     * Get the first visit event after the timestamp\n     */\n    getVisitEventAfter(nodeId, timestamp) {\n        var event = null;\n\n        // get all the events\n        var events = this.studentData.events;\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var tempEvent = events[e];\n\n                if (tempEvent != null &&\n                    tempEvent.serverSaveTime > timestamp &&\n                    tempEvent.nodeId === nodeId &&\n                    tempEvent.event === 'nodeEntered') {\n\n                    // we have found a visit event after the timestamp\n                    event = tempEvent;\n                    break;\n                }\n            }\n        }\n\n        return event;\n    }\n\n    /**\n     * Get classmate student work\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @param showClassmateWorkSource Where to get the work from.\n     * 'period' will get the classmate work only from the period the student is in.\n     * null will get work from the whole class (all periods).\n     *\n     * @return a promise that will return the component states from classmates\n     */\n    getClassmateStudentWork(nodeId, componentId, showClassmateWorkSource) {\n\n        // get the url to get the student data\n        var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n\n        // set the workgroup id and run id\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.nodeId = nodeId;\n        params.componentId = componentId;\n        params.getStudentWork = true;\n        params.getEvents = false;\n        params.getAnnotations = false;\n        params.onlyGetLatest = true;\n\n        if (showClassmateWorkSource == 'period') {\n            // get the period the student is in\n            params.periodId = this.ConfigService.getPeriodId();\n        }\n\n        httpParams.params = params;\n\n        // make the request for the student data\n        return this.$http(httpParams).then((result) => {\n            var componentStates = [];\n            var resultData = result.data;\n\n            if (resultData != null) {\n                componentStates = resultData.studentWorkList;\n            }\n\n            return componentStates;\n        });\n    }\n\n    /**\n     * Get the max possible score for the project\n     * @returns the sum of the max scores for all the nodes in the project visible\n     * to the current workgroup or null if none of the visible components has max scores.\n     */\n    getMaxScore() {\n        let maxScore = null;\n\n        // loop through all the node statuses\n        for (var p in this.nodeStatuses) {\n            if (this.nodeStatuses.hasOwnProperty(p)) {\n                let nodeStatus = this.nodeStatuses[p];\n                let nodeId = nodeStatus.nodeId;\n\n                if (nodeStatus.isVisible && !this.ProjectService.isGroupNode(nodeId)) {\n                    // node is visible and is not a group\n                    // get node max score\n                    let nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n                    if (nodeMaxScore) {\n                        // there is a max score for the node, so add to total\n                        maxScore += nodeMaxScore;\n                    }\n                }\n            }\n        }\n\n        return maxScore;\n    }\n}\n\nStudentDataService.$inject = [\n    '$filter',\n    '$http',\n    '$injector',\n    '$q',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'UtilService'\n];\n\nexport default StudentDataService;\n"]}