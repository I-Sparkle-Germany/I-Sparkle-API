{"version":3,"sources":["studentDataService.es6"],"names":[],"mappings":"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","file":"studentDataService.js","sourcesContent":["\nclass StudentDataService {\n    constructor($http, $injector, $q, $rootScope, AnnotationService, ConfigService, ProjectService, UtilService) {\n        this.$http = $http;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.previousStep = null;\n        this.studentData = null;\n        this.stackHistory = [];  // array of node id's\n        this.visitedNodesHistory = [];\n        this.nodeStatuses = {};\n    }\n\n    retrieveStudentData() {\n\n        // get the mode\n        var mode = this.ConfigService.getConfigParam('mode');\n\n        if (mode === 'preview') {\n            // we are previewing the project\n\n            // initialize dummy student data\n            this.studentData = {};\n            this.studentData.componentStates = [];\n            this.studentData.events = [];\n            this.studentData.userName = 'Preview Student';\n            this.studentData.userId = '0';\n\n            // populate the student history\n            this.populateHistories(this.studentData.componentStates);\n\n            // update the node statuses\n            this.updateNodeStatuses();\n        } else {\n            // we are in a run\n\n            // get the url to get the student data\n            var studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n            var httpParams = {};\n            httpParams.method = 'GET';\n            httpParams.url = studentDataURL;\n\n            // set the workgroup id and run id\n            var params = {};\n            params.workgroupId = this.ConfigService.getWorkgroupId();\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getEvents = true;\n            params.getAnnotations = true;\n            params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n            httpParams.params = params;\n\n            // make the request for the student data\n            return this.$http(httpParams).then(angular.bind(this, function(result) {\n                var resultData = result.data;\n                if (resultData != null) {\n\n                    this.studentData = {};\n\n                    // get student work\n                    this.studentData.componentStates = [];\n                    this.studentData.nodeStates = [];\n                    var studentWorkList = resultData.studentWorkList;\n                    for (var s = 0; s < studentWorkList.length; s++) {\n                        var studentWork = studentWorkList[s];\n                        if (studentWork.componentId != null) {\n                            this.studentData.componentStates.push(studentWork);\n                        } else {\n                            this.studentData.nodeStates.push(studentWork);\n                        }\n                    }\n\n                    // get events\n                    this.studentData.events = resultData.events;\n\n                    // get annotations\n                    this.studentData.annotations = resultData.annotations;\n\n                    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                    // load the student planning nodes\n                    //this.loadStudentNodes();\n\n                    // TODO\n                    // populate the student history\n                    this.populateHistories(this.studentData.componentStates, this.studentData.events);\n\n                    // TODO\n                    // update the node statuses\n\n                    this.updateNodeStatuses();\n                }\n                return this.studentData;\n            }));\n        }\n    };\n\n    loadStudentNodes() {\n        var nodes = this.ProjectService.getApplicationNodes();\n\n        if (nodes != null) {\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n\n                if (node != null) {\n                    if (node.type === 'Planning') {\n                        var nodeId = node.id;\n\n                        var latestNodeState = this.getLatestNodeStateByNodeId(nodeId);\n\n                        if (latestNodeState != null) {\n                            var latestStateStudentNodes = latestNodeState.studentNodes;\n                            var latestTransitions = latestNodeState.studentTransition;\n\n                            this.ProjectService.loadNodes(latestStateStudentNodes);\n                            this.ProjectService.loadTransitions(latestTransitions);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    getNodeStatuses() {\n        return this.nodeStatuses;\n    };\n\n    setNodeStatusByNodeId(nodeId, nodeStatus) {\n\n        if (nodeId != null && nodeStatus != null) {\n            var nodeStatuses = this.nodeStatuses;\n\n            if (nodeStatuses != null) {\n                nodeStatuses[nodeId] = nodeStatus;\n            }\n        }\n    }\n\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatus = null;\n\n        var nodeStatuses = this.nodeStatuses;\n\n        if (nodeId != null && nodeStatuses != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    updateNodeStatuses() {\n        //this.nodeStatuses = [];\n\n        var nodes = this.ProjectService.getNodes();\n        var groups = this.ProjectService.getGroups();\n\n        if (nodes != null) {\n\n            //var nodeStatuses = [];\n\n            for (var n = 0; n < nodes.length; n++) {\n                var node = nodes[n];\n                if (!this.ProjectService.isGroupNode(node.id)) {\n                    this.updateNodeStatusByNode(node);\n                }\n\n                //var nodeStatusesByNode = this.updateNodeStatusByNode(node);\n                //nodeStatuses.push(nodeStatusesByNode);\n                //console.log(nodeStatusesByNode);\n            }\n\n            //this.nodeStatuses = nodeStatuses;\n        }\n\n        var group;\n        if (groups != null) {\n            for (var g = 0; g < groups.length; g++) {\n                group = groups[g];\n                group.depth = this.ProjectService.getNodeDepth(group.id);\n            }\n\n            // sort by descending depth order (need to calculate completion for lowest level groups first)\n            groups.sort(function(a, b) {\n                return b.depth - a.depth;\n            });\n\n            for (var i = 0; i < groups.length; i++) {\n                group = groups[i];\n                this.updateNodeStatusByNode(group);\n            }\n        }\n\n        this.$rootScope.$broadcast('nodeStatusesChanged');\n    };\n\n    updateNodeStatusByNode(node) {\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            var tempNodeStatus = {};\n            tempNodeStatus.nodeId = nodeId;\n            tempNodeStatus.isVisitable = true;\n            tempNodeStatus.isCompleted = true;\n\n\n            // get the constraints that affect this node\n            var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n            if (constraintsForNode == null || constraintsForNode.length == 0) {\n                // this node does not have any constraints so it is clickable\n                tempNodeStatus.isVisible = true;\n                tempNodeStatus.isVisitable = true;\n            } else {\n\n                var isVisibleResults = [];\n                var isVisitableResults = [];\n\n                var result = false;\n                var firstResult = true;\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraintsForNode.length; c++) {\n                    var constraintForNode = constraintsForNode[c];\n\n                    if (constraintForNode != null) {\n\n                        // evaluate the constraint to see if the node can be visited\n                        var tempResult = this.evaluateConstraint(node, constraintForNode);\n\n                        /*\n                         if (firstResult) {\n                         // this is the first constraint in this for loop\n                         result = tempResult;\n                         firstResult = false;\n                         } else {\n                         // this is not the first constraint in this for loop so we will && the result\n                         result = result && tempResult;\n                         }\n                         */\n\n                        var action = constraintForNode.action;\n\n                        if (action != null) {\n                            if (action === 'makeThisNodeNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeThisNodeNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisible') {\n                                isVisibleResults.push(tempResult);\n                            } else if (action === 'makeAllOtherNodesNotVisitable') {\n                                isVisitableResults.push(tempResult);\n                            }\n                        }\n                    }\n                }\n\n                var isVisible = true;\n                var isVisitable = true;\n\n                for (var a = 0; a < isVisibleResults.length; a++) {\n                    var isVisibleResult = isVisibleResults[a];\n\n                    isVisible = isVisible && isVisibleResult;\n                }\n\n                for (var b = 0; b < isVisitableResults.length; b++) {\n                    var isVisitableResult = isVisitableResults[b];\n\n                    isVisitable = isVisitable && isVisitableResult;\n                }\n\n                tempNodeStatus.isVisible = isVisible;\n                tempNodeStatus.isVisitable = isVisitable;\n            }\n\n            tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n            tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus == null) {\n                this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n            } else {\n                this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n                this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n                this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n                this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n            }\n\n            this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n            this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n            //console.log(angular.toJson(tempNodeStatus));\n        }\n\n        //return nodeStatus;\n    };\n\n    /**\n     * Evaluate the constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node has satisfied the constraint\n     */\n    evaluateConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria != null) {\n                result = this.evaluateNodeConstraint(node, constraintForNode);\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the guided navigation constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node can be visited or not\n     */\n    evaluateGuidedNavigationConstraint(node, constraintForNode) {\n\n        var result = false;\n\n        if (node != null) {\n            var nodeId = node.id;\n\n            if (this.isNodeVisited(nodeId)) {\n                // the node has been visited before so it should be clickable\n                result = true;\n            } else {\n\n                // get all the nodes that have been visited\n                var visitedNodes = this.getVisitedNodesHistory();\n\n                var transitionsToNodeId = [];\n\n                // loop through all the ndoes that have been visited\n                for (var v = 0; v < visitedNodes.length; v++) {\n                    var visitedNodeId = visitedNodes[v];\n\n                    // get the transitions from the visited node to the node status node\n                    var transitions = this.ProjectService.getTransitionsByFromAndToNodeId(visitedNodeId, nodeId);\n\n                    // TODO: check if the transition can be used by the student\n\n                    // concat the node ids\n                    transitionsToNodeId = transitionsToNodeId.concat(transitions);\n                }\n\n                if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                    // there is a transition between the current node and the node status node\n\n                    /*\n                     * there are transitions from the current node to the node status node so\n                     * the node status node is clickable\n                     */\n                    result = true;\n                } else {\n                    /*\n                     * there is no transition between the visited nodes and the node status node\n                     * so we will set the node to be not clickable\n                     */\n                    result = false;\n                }\n\n                if (this.ProjectService.isStartNode(node)) {\n                    /*\n                     * the node is the start node of the project or a start node of a group\n                     * so we will make it clickable\n                     */\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Evaluate the node constraint\n     * @param node the node\n     * @param constraintForNode the constraint object\n     * @returns whether the node satisifies the constraint\n     */\n    evaluateNodeConstraint(node, constraintForNode) {\n        var result = false;\n\n        if (constraintForNode != null) {\n            var removalCriteria = constraintForNode.removalCriteria;\n\n            if (removalCriteria == null) {\n                result = true;\n            } else {\n                var firstResult = true;\n\n                // loop through all the criteria that need to be satisifed\n                for (var c = 0; c < removalCriteria.length; c++) {\n\n                    // get a criteria\n                    var tempCriteria = removalCriteria[c];\n\n                    if (tempCriteria != null) {\n\n                        // evaluate the criteria\n                        var tempResult = this.evaluateCriteria(tempCriteria);\n\n                        if (firstResult) {\n                            // this is the first criteria in this for loop\n                            result = tempResult;\n                            firstResult = false;\n                        } else {\n                            // this is not the first criteria in this for loop so we will && the result\n                            result = result && tempResult;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n\n    /**\n     * Evaluate the criteria\n     * @param criteria the criteria\n     * @returns whether the criteria is satisfied or not\n     */\n    evaluateCriteria(criteria) {\n\n        var result = false;\n\n        if (criteria != null) {\n            //var nodeId = criteria.nodeId;\n            //var componentId = criteria.componentId;\n            var functionName = criteria.functionName;\n\n            if (functionName == null) {\n\n            } else if (functionName === 'branchPathTaken') {\n                result = this.evaluateBranchPathTakenCriteria(criteria);\n            } else if (functionName === 'isVisible') {\n\n            } else if (functionName === 'isVisitable') {\n\n            } else if (functionName === 'isVisited') {\n\n            } else if (functionName === 'isComplete') {\n\n            } else if (functionName === 'isCorrect') {\n\n            } else if (functionName === 'choiceChosen') {\n                result = this.evaluateChoiceChosenCriteria(criteria);\n            } else if (functionName === '') {\n\n            }\n        }\n\n        return result;\n    };\n\n    evaluateBranchPathTakenCriteria(criteria) {\n        var result = false;\n\n        if (criteria != null) {\n            var expectedFromNodeId = criteria.fromNodeId;\n            var expectedToNodeId = criteria.toNodeId;\n\n            // get the node states\n            var nodeStates = this.getBranchPathTakenNodeStates(expectedFromNodeId);\n\n            if (nodeStates != null) {\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n\n                    if (nodeState != null) {\n                        var studentData = nodeState.studentData;\n\n                        if (studentData != null) {\n                            var dataType = studentData.dataType;\n\n                            if (dataType != null && dataType === 'branchPathTaken') {\n\n                                var tempFromNodeId = studentData.fromNodeId;\n                                var tempToNodeId = studentData.toNodeId;\n\n                                if (expectedFromNodeId === tempFromNodeId &&\n                                    expectedToNodeId === tempToNodeId) {\n                                    result = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    getBranchPathTakenNodeStates(fromNodeId) {\n\n        var branchpathTakenNodeStates = [];\n\n        // get the node states\n        var nodeStatesFromNodeId = this.getNodeStatesByNodeId(fromNodeId);\n\n        if (nodeStatesFromNodeId != null) {\n            for (var n = 0; n < nodeStatesFromNodeId.length; n++) {\n                var nodeState = nodeStatesFromNodeId[n];\n\n                if (nodeState != null) {\n                    var studentData = nodeState.studentData;\n\n                    if (studentData != null) {\n                        var dataType = studentData.dataType;\n\n                        if (dataType != null && dataType === 'branchPathTaken') {\n\n                            branchpathTakenNodeStates.push(nodeState);\n                        }\n                    }\n                }\n            }\n        }\n\n        return branchpathTakenNodeStates;\n    };\n\n    /**\n     * Evaluate the choice chosen criteria\n     * @param criteria the criteria to evaluate\n     * @returns a boolena value whether the criteria was satisfied or not\n     */\n    evaluateChoiceChosenCriteria(criteria) {\n\n        var result = false;\n\n        var serviceName = 'MultipleChoiceService';\n\n        if (this.$injector.has(serviceName)) {\n\n            // get the MultipleChoiceService\n            var service = this.$injector.get(serviceName);\n\n            // check if the criteria was satisfied\n            result = service.choiceChosen(criteria);\n        }\n\n        return result;\n    };\n\n    updateNodeStatusesByNode0(node) {\n        return $q(angular.bind(this, function(resolve, reject) {\n\n            var nodeStatus = null;\n            var allPromises = [];\n\n            if (node != null) {\n                var nodeId = node.id;\n\n                nodeStatus = {};\n                nodeStatus.nodeId = nodeId;\n                nodeStatus.isVisitable = false;\n\n                // get the constraints that affect this node\n                var constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n                if (constraintsForNode == null || constraintsForNode.length == 0) {\n                    // this node does not have any constraints so it is clickable\n                    nodeStatus.isVisitable = true;\n                } else {\n\n                    // loop through all the constraints that affect this node\n                    for (var c = 0; c < constraintsForNode.length; c++) {\n                        var constraintForNode = constraintsForNode[c];\n\n                        if (constraintForNode != null) {\n                            var constraintLogic = constraintForNode.constraintLogic;\n\n                            if (constraintLogic == 'guidedNavigation') {\n                                if (this.isNodeVisited(nodeId)) {\n                                    // the node has been visited before so it should be clickable\n                                    nodeStatus.isVisitable = true;\n                                } else {\n                                    /*\n                                     * the node has not been visited before so we will determine\n                                     * if the node is clickable by looking at the transitions\n                                     */\n                                    var currentNode = this.currentNode;\n\n                                    if (currentNode != null) {\n                                        // there is a current node\n                                        var currentNodeId = currentNode.id;\n\n                                        // get the transitions from the current node\n                                        var transitions = this.ProjectService.getTransitionsByFromNodeId(currentNodeId);\n\n                                        if (transitions != null) {\n\n                                            // get the transitions from the current node to the node status node\n                                            var transitionsToNodeId = this.ProjectService.getTransitionsByFromAndToNodeId(currentNodeId, nodeId);\n\n                                            if (transitionsToNodeId != null && transitionsToNodeId.length > 0) {\n                                                // there is a transition between the current node and the node status node\n\n                                                // check if the current node has branches\n\n                                                if (transitions.length > 1) {\n                                                    // the current node has branches so the node status node is not clickable\n                                                    nodeStatus.isVisitable |= false;\n                                                } else {\n                                                    // the current node does not have branches so the node status node is clickable\n                                                    nodeStatus.isVisitable = true;\n                                                }\n                                            } else {\n                                                /*\n                                                 * there is no transition between the current node and the node status node\n                                                 * so the node we will set the node to be not clickable\n                                                 */\n                                                nodeStatus.isVisitable |= false;\n                                            }\n                                        }\n                                    } else {\n                                        // there is no current node because the student has just started the project\n                                    }\n\n                                    if (this.ProjectService.isStartNode(node)) {\n                                        /*\n                                         * the node is the start node of the project or a start node of a group\n                                         * so we will make it clickable\n                                         */\n                                        nodeStatus.isVisitable = true;\n                                    }\n                                }\n                            } else if (constraintLogic === 'transition') {\n                                var criteria = constraintForNode.criteria;\n                                if (criteria != null && criteria.length > 0) {\n                                    var firstCriteria = criteria[0];\n                                    var criteriaNodeId = firstCriteria.nodeId;\n\n                                    var nodeVisits = this.getNodeVisitsByNodeId(criteriaNodeId);\n                                    if (nodeVisits != null && nodeVisits.length > 0) {\n                                        var functionName = firstCriteria.functionName;\n                                        var functionParams = firstCriteria.functionParams;\n                                        functionParams.nodeVisits = nodeVisits;\n\n                                        var result = null;\n\n                                        // get the node type\n                                        var nodeType = node.type;\n\n                                        // get the service for the node type\n                                        var service = this.$injector.get(nodeType + 'Service');\n\n                                        if (service != null) {\n\n                                            // call the function in the service\n                                            result = service.callFunction(functionName, functionParams);\n                                        }\n\n                                        if (result) {\n                                            nodeStatus.isVisitable = true;\n                                        }\n                                    }\n                                }\n                            } else if (constraintLogic === 'lockAfterSubmit') {\n                                var targetId = constraintForNode.targetId;\n                                var nodeVisits = this.getNodeVisitsByNodeId(targetId);\n\n                                if (nodeId === targetId) {\n                                    var isWorkSubmitted = NodeService.isWorkSubmitted(nodeVisits);\n\n                                    if (isWorkSubmitted) {\n\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            this.$q.all(allPromises).then(function() {\n                resolve(nodeStatus);\n            })\n        }));\n    };\n\n    /**\n     * Populate the stack history and visited nodes history\n     * @param componentStates the component states\n     * @param events the events\n     */\n    populateHistories(componentStates, events) {\n        this.stackHistory = [];\n        this.visitedNodesHistory = [];\n\n        if (componentStates != null) {\n\n            // loop through all the component state\n            for (var i = 0; i < componentStates.length; i++) {\n\n\n                var componentState = componentStates[i];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    this.updateStackHistory(componentStateNodeId);\n                    this.updateVisitedNodesHistory(componentStateNodeId);\n                }\n            }\n        }\n\n        if (events != null) {\n\n            // loop through all the events\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n\n                    // look for the nodeEntered event\n                    if (event.event === 'nodeEntered') {\n\n                        // the student has visited this node id before\n                        this.updateVisitedNodesHistory(event.nodeId);\n                    }\n                }\n            }\n        }\n    };\n\n    getStackHistoryAtIndex(index) {\n        if (index < 0) {\n            index = this.stackHistory.length + index;\n        }\n        var stackHistoryResult = null;\n        if (this.stackHistory != null && this.stackHistory.length > 0) {\n            stackHistoryResult = this.stackHistory[index];\n        }\n        return stackHistoryResult;\n    };\n\n    getStackHistory() {\n        return this.stackHistory;\n    };\n\n    updateStackHistory(nodeId) {\n        var indexOfNodeId = this.stackHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.stackHistory.push(nodeId);\n        } else {\n            this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n        }\n    };\n\n    updateVisitedNodesHistory(nodeId) {\n        var indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n        if (indexOfNodeId === -1) {\n            this.visitedNodesHistory.push(nodeId);\n        }\n    };\n\n    getVisitedNodesHistory() {\n        return this.visitedNodesHistory;\n    };\n\n    isNodeVisited(nodeId) {\n        var result = false;\n        var visitedNodesHistory = this.visitedNodesHistory;\n\n        if (visitedNodesHistory != null) {\n            var indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n\n            if (indexOfNodeId !== -1) {\n                result = true;\n            }\n        }\n\n        return result;\n    };\n\n    getLatestStudentWorkForNodeAsHTML(nodeId) {\n        var studentWorkAsHTML = null;\n\n        var node = this.ProjectService.getNodeById(nodeId);\n\n        if (node != null) {\n            //var nodeType = node.type;\n            //var latestNodeState = this.getLatestNodeStateByNodeId(nodeId);\n\n            // TODO: make this dynamically call the correct {{nodeType}}Service\n            if (nodeType === 'OpenResponse') {\n                //studentWorkAsHTML = OpenResponseService.getStudentWorkAsHTML(latestNodeState);\n            }\n        }\n\n        return studentWorkAsHTML;\n    };\n\n    createComponentState() {\n        var componentState = {};\n\n        componentState.timestamp = Date.parse(new Date());\n\n        return componentState;\n    };\n\n    addComponentState(componentState) {\n        if (this.studentData != null && this.studentData.componentStates != null) {\n            this.studentData.componentStates.push(componentState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n    addNodeState(nodeState) {\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            this.studentData.nodeStates.push(nodeState);\n\n            this.updateNodeStatuses();\n        }\n    };\n\n\n    getNodeStatesByNodeId(nodeId) {\n        var nodeStatesByNodeId = [];\n\n        if (this.studentData != null && this.studentData.nodeStates != null) {\n            var nodeStates = this.studentData.nodeStates;\n\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    var tempNodeId = nodeState.nodeId;\n\n                    if (nodeId === tempNodeId) {\n                        nodeStatesByNodeId.push(nodeState);\n                    }\n                }\n            }\n        }\n\n        return nodeStatesByNodeId;\n    };\n\n    addEvent(event) {\n        if (this.studentData != null && this.studentData.events != null) {\n            this.studentData.events.push(event);\n        }\n    };\n\n    addAnnotation(annotation) {\n        if (this.studentData != null && this.studentData.annotations != null) {\n            this.studentData.annotations.push(annotation);\n        }\n    };\n\n    saveComponentEvent(component, category, event, data) {\n        if (component == null || category == null || event == null) {\n            alert(\"StudentDataService.saveComponentEvent: component, category, event args must not be null\");\n            return;\n        }\n        var context = \"Component\";\n        var nodeId = component.nodeId;\n        var componentId = component.componentId;\n        var componentType = component.componentType;\n        if (nodeId == null || componentId == null || componentType == null) {\n            alert(\"StudentDataService.saveComponentEvent: nodeId, componentId, componentType must not be null\");\n            return;\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n        if (category == null || event == null) {\n            alert(\"StudentDataService.saveVLEEvent: category and event args must not be null\");\n            return;\n        }\n        var context = \"VLE\";\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    };\n\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        var events = [];\n        var newEvent = this.createNewEvent();\n        newEvent.context = context;\n        newEvent.nodeId = nodeId;\n        newEvent.componentId = componentId;\n        newEvent.type = componentType;\n        newEvent.category = category;\n        newEvent.event = event;\n        newEvent.data = data;\n        events.push(newEvent);\n        var componentStates = null;\n        var nodeStates = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    /**\n     * Create a new empty event\n     * @return a new empty event\n     */\n    createNewEvent() {\n        var event = {};\n\n        event.runId = this.ConfigService.getRunId();\n        event.periodId = this.ConfigService.getPeriodId();\n        event.workgroupId = this.ConfigService.getWorkgroupId();\n        event.clientSaveTime = Date.parse(new Date());\n\n        return event;\n    };\n\n    saveNodeStates(nodeStates) {\n        var componentStates = null;\n        var events = null;\n        var annotations = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n\n    saveAnnotations(annotations) {\n        var componentStates = null;\n        var nodeStates = null;\n        var events = null;\n        this.saveToServer(componentStates, nodeStates, events, annotations);\n    };\n\n    saveToServer(componentStates, nodeStates, events, annotations) {\n\n        // merge componentStates and nodeStates into StudentWork before posting\n        var studentWorkList = [];\n        if (componentStates != null && componentStates.length > 0) {\n            for (var c = 0; c < componentStates.length; c++) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addComponentState(componentState);\n                    studentWorkList.push(componentState);\n                }\n            }\n        }\n\n        if (nodeStates != null && nodeStates.length > 0) {\n            for (var n = 0; n < nodeStates.length; n++) {\n                var nodeState = nodeStates[n];\n\n                if (nodeState != null) {\n                    nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n                    this.addNodeState(nodeState);\n                    studentWorkList.push(nodeState);\n                }\n            }\n        }\n\n        if (events != null && events.length > 0) {\n            for (var e = 0; e < events.length; e++) {\n                var event = events[e];\n\n                if (event != null) {\n                    event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n                    this.addEvent(event);\n                }\n            }\n        } else {\n            events = [];\n        }\n\n        if (annotations != null && annotations.length > 0) {\n            for (var a = 0; a < annotations.length; a++) {\n                var annotation = annotations[a];\n\n                if (annotation != null) {\n                    annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n                    this.addAnnotation(annotation);\n                }\n            }\n        } else {\n            annotations = [];\n        }\n\n        if (this.ConfigService.getConfigParam('mode') === 'preview') {\n            // if we're in preview mode, don't make any request to the server\n            return;\n        }\n\n        // get the url to POST the student data\n        var httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        // set the workgroup id and run id\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.workgroupId = this.ConfigService.getWorkgroupId();\n        params.studentWorkList = angular.toJson(studentWorkList);\n        params.events = angular.toJson(events);\n        params.annotations = angular.toJson(annotations);\n        httpParams.data = $.param(params);\n\n        // make the request to post the student data\n        return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n            // get the local references to the component states that were posted and set their id and serverSaveTime\n            if (result != null &&\n                result.data != null) {\n\n                var savedStudentDataResponse = result.data;\n\n                // handle saved studentWork\n                if (savedStudentDataResponse.studentWorkList != null) {\n                    var savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n\n                    var localStudentWorkList = this.studentData.componentStates.concat(this.studentData.nodeStates);\n\n                    // set the id and serverSaveTime in the local studentWorkList\n                    for (var i = 0; i < savedStudentWorkList.length; i++) {\n                        var savedStudentWork = savedStudentWorkList[i];\n\n                        /*\n                         * loop through all the student work that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localStudentWorkList.length - 1; l >= 0; l--) {\n                            var localStudentWork = localStudentWorkList[l];\n                            if (localStudentWork.requestToken != null &&\n                                localStudentWork.requestToken === savedStudentWork.requestToken) {\n                                localStudentWork.id = savedStudentWork.id;\n                                localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime;\n                                localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n                                break;\n                            }\n                        }\n                    }\n                }\n                // handle saved events\n                if (savedStudentDataResponse.events != null) {\n                    var savedEvents = savedStudentDataResponse.events;\n\n                    var localEvents = this.studentData.events;\n\n                    // set the id and serverSaveTime in the local event\n                    for (var i = 0; i < savedEvents.length; i++) {\n                        var savedEvent = savedEvents[i];\n\n                        /*\n                         * loop through all the events that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localEvents.length - 1; l >= 0; l--) {\n                            var localEvent = localEvents[l];\n                            if (localEvent.requestToken != null &&\n                                localEvent.requestToken === savedEvent.requestToken) {\n                                localEvent.id = savedEvent.id;\n                                localEvent.serverSaveTime = savedEvent.serverSaveTime;\n                                localEvent.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                // handle saved annotations\n                if (savedStudentDataResponse.annotations != null) {\n                    var savedAnnotations = savedStudentDataResponse.annotations;\n\n                    var localAnnotations = this.studentData.annotations;\n\n                    // set the id and serverSaveTime in the local annotation\n                    for (var i = 0; i < savedAnnotations.length; i++) {\n                        var savedAnnotation = savedAnnotations[i];\n\n                        /*\n                         * loop through all the events that were posted\n                         * to find the one with the matching request token\n                         */\n                        for (var l = localAnnotations.length - 1; l >= 0; l--) {\n                            var localAnnotation = localAnnotations[l];\n                            if (localAnnotation.requestToken != null &&\n                                localAnnotation.requestToken === savedAnnotation.requestToken) {\n                                localAnnotation.id = savedAnnotation.id;\n                                localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n                                localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n                                this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n                                break;\n                            }\n                        }\n                    }\n                }\n\n            }\n\n\n            return savedStudentDataResponse;\n        }));\n    };\n\n    retrieveComponentStates(runId, periodId, workgroupId) {\n\n    };\n\n    getLatestComponentState() {\n        var latestComponentState = null;\n\n        var studentData = this.studentData;\n\n        if (studentData != null) {\n            var componentStates = studentData.componentStates;\n\n            if (componentStates != null) {\n                latestComponentState = componentStates[componentStates.length - 1];\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the latest component state for the given node id and component\n     * id.\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return the latest component state with the matching node id and\n     * component id or null if none are found\n     */\n    getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n        var latestComponentState = null;\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states from newest to oldest\n                    for (var c = componentStates.length - 1; c >= 0; c--) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n                                latestComponentState = componentState;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    /**\n     * Get the student work by specified student work id, which can be a ComponentState or NodeState\n     * @param studentWorkId the student work id\n     * @return an StudentWork or null\n     */\n    getStudentWorkByStudentWorkId(studentWorkId) {\n        if (studentWorkId != null) {\n            // get the component states\n            var componentStates = this.studentData.componentStates;\n\n            if (componentStates != null) {\n\n                // loop through all the component states\n                for (var c = 0; c < componentStates.length; c++) {\n                    var componentState = componentStates[c];\n\n                    if (componentState != null && componentState.id === studentWorkId) {\n                        return componentState;\n                    }\n                }\n            }\n\n            // get the node states\n            var nodeStates = this.studentData.nodeStates;\n\n            if (nodeStates != null) {\n\n                // loop through all the node states\n                for (var n = 0; n < nodeStates.length; n++) {\n                    var nodeState = nodeStates[n];\n                    if (nodeState != null && nodeState.id === studentWorkId) {\n                        return nodeState;\n                    }\n                }\n            }\n\n        }\n        return null;\n    };\n\n    /**\n     * Get the component states for the given node id\n     * @param nodeId the node id\n     * @return an array of component states for the given node id\n     */\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = [];\n\n        if (nodeId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n\n                            // compare the node id\n                            if (nodeId == componentStateNodeId) {\n\n                                componentStatesByNodeId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeId;\n    };\n\n    /**\n     * Get the component states for the given node id and component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @return an array of component states for the given node id and\n     * component id\n     */\n    getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n        var componentStatesByNodeIdAndComponentId = [];\n\n        if (nodeId != null && componentId != null) {\n            var studentData = this.studentData;\n\n            if (studentData != null) {\n\n                // get the component states\n                var componentStates = studentData.componentStates;\n\n                if (componentStates != null) {\n\n                    // loop through all the component states\n                    for (var c = 0; c < componentStates.length; c++) {\n                        var componentState = componentStates[c];\n\n                        if (componentState != null) {\n                            var componentStateNodeId = componentState.nodeId;\n                            var componentStateComponentId = componentState.componentId;\n\n                            // compare the node id and component id\n                            if (nodeId == componentStateNodeId &&\n                                componentId == componentStateComponentId) {\n\n                                componentStatesByNodeIdAndComponentId.push(componentState);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return componentStatesByNodeIdAndComponentId;\n    };\n\n    /**\n     * Get the events for a node id\n     * @param nodeId the node id\n     * @returns the events for the node id\n     */\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n\n                        if (nodeId === eventNodeId) {\n                            // this event is for the node id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n\n    /**\n     * Get the events for a component id\n     * @param nodeId the node id\n     * @param componentId the component id\n     * @returns an array of events for the component id\n     */\n    getEventsByNodeIdAndComponentId(nodeId, componentId) {\n        var eventsByNodeId = [];\n\n        if (nodeId != null) {\n\n            if (this.studentData != null && this.studentData.events != null) {\n\n                // get all the events\n                var events = this.studentData.events;\n\n                // loop through all the events\n                for (var e = 0; e < events.length; e++) {\n                    var event = events[e];\n\n                    if (event != null) {\n                        var eventNodeId = event.nodeId;\n                        var eventComponentId = event.componentId;\n\n                        if (nodeId === eventNodeId && componentId === eventComponentId) {\n                            // this events is for the component id we are looking for\n                            eventsByNodeId.push(event);\n                        }\n                    }\n                }\n            }\n        }\n\n        return eventsByNodeId;\n    };\n\n    /**\n     * Create a copy of a JSON object\n     * @param jsonObject the JSON object to get a copy of\n     * @return a copy of the JSON object that was passed in\n     */\n    makeCopyOfJSONObject(jsonObject) {\n        var copyOfJSONObject = null;\n\n        if (jsonObject != null) {\n            // create a JSON string from the JSON object\n            var jsonObjectString = angular.toJson(jsonObject);\n\n            // create a JSON object from the JSON string\n            copyOfJSONObject = angular.fromJson(jsonObjectString);\n        }\n\n        return copyOfJSONObject;\n    };\n\n    /**\n     * Check if the student can visit the node\n     * @param nodeId the node id\n     * @returns whether the student can visit the node\n     */\n    canVisitNode(nodeId) {\n\n        var result = false;\n\n        if (nodeId != null) {\n\n            // get the node status for the node\n            var nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n            if (nodeStatus != null) {\n                if (nodeStatus.isVisitable) {\n                    result = true;\n                }\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the node status by node id\n     * @param nodeId the node id\n     * @returns the node status object for a node\n     */\n    getNodeStatusByNodeId(nodeId) {\n        var nodeStatuses = this.nodeStatuses;\n        var nodeStatus = null;\n\n        if (nodeId != null) {\n            nodeStatus = nodeStatuses[nodeId];\n        }\n\n        return nodeStatus;\n    };\n\n    /**\n     * Get completed items, total number of visible items, completion % for a node\n     * @param nodeId the node id\n     * @returns object with number of completed items and number of visible items\n     */\n    getNodeProgressById(nodeId) {\n        var completedItems = 0;\n        var totalItems = 0;\n\n        if (this.ProjectService.isGroupNode(nodeId)) {\n            var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n            for (var n=0; n<nodeIds.length; n++) {\n                var id = nodeIds[n];\n                var status = this.nodeStatuses[id];\n                if (this.ProjectService.isGroupNode(id)) {\n                    var completedGroupItems = status.progress.completedItems;\n                    var totalGroupItems = status.progress.totalItems;\n                    completedItems += completedGroupItems;\n                    totalItems += totalGroupItems;\n                } else {\n                    if (status.isVisible) {\n                        totalItems++;\n                        if (status.isCompleted) {\n                            completedItems++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // TODO: implement for steps (using components instead of child nodes)\n\n        var completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n        var progress = {\n            \"completedItems\": completedItems,\n            \"totalItems\": totalItems,\n            \"completionPct\": completionPct\n        };\n        return progress;\n    };\n\n    /**\n     * Check if the given node or component is completed\n     * @param nodeId the node id\n     * @param componentId (optional) the component id\n     * @returns whether the node or component is completed\n     */\n    isCompleted(nodeId, componentId) {\n\n        var result = false;\n\n        if (nodeId && componentId) {\n            // check that the component is completed\n\n            // get the component states for the component\n            var componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the component events\n            var componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n            // get the node events\n            var nodeEvents = this.getEventsByNodeId(nodeId);\n\n            // get the component object\n            var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n            if (component != null) {\n\n                // get the component type\n                var componentType = component.type;\n\n                if (componentType != null) {\n\n                    // get the service for the component type\n                    var service = this.$injector.get(componentType + 'Service');\n\n                    // check if the component is completed\n                    if (service.isCompleted(component, componentStates, componentEvents, nodeEvents)) {\n                        result = true;\n                    }\n                }\n            }\n        } else if (nodeId) {\n            // check if node is a group\n            var isGroup = this.ProjectService.isGroupNode(nodeId);\n\n            if (isGroup) {\n                // node is a group\n                var tempResult = true;\n\n                // check that all the nodes in the group and visible are completed\n                var nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n                for (var n=0; n<nodeIds.length; n++) {\n                    var id = nodeIds[n];\n                    if (this.nodeStatuses[id].isVisible && !this.nodeStatuses[id].isCompleted) {\n                        tempResult = false;\n                        break;\n                    }\n                }\n\n                result = tempResult;\n            } else {\n                // check that all the components in the node are completed\n\n                // get all the components in the node\n                var components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n                var tempResult = false;\n                var firstResult = true;\n\n                /*\n                 * All components must be completed in order for the node to be completed\n                 * so we will loop through all the components and check if they are\n                 * completed\n                 */\n                for (var c = 0; c < components.length; c++) {\n                    var component = components[c];\n\n                    if (component != null) {\n                        var componentId = component.id;\n                        var componentType = component.type;\n                        var showPreviousWorkNodeId = component.showPreviousWorkNodeId;\n                        var showPreviousWorkComponentId = component.showPreviousWorkComponentId;\n\n                        var tempNodeId = nodeId;\n                        var tempComponentId = componentId;\n                        var tempComponent = component;\n\n                        if (showPreviousWorkNodeId != null && showPreviousWorkComponentId != null) {\n                            /*\n                             * this is a show previous work component so we will check if the\n                             * previous component was completed\n                             */\n                            tempNodeId = showPreviousWorkNodeId;\n                            tempComponentId = showPreviousWorkComponentId;\n                            tempComponent = this.ProjectService.getComponentByNodeIdAndComponentId(tempNodeId, tempComponentId);\n                        }\n\n                        if (componentType != null) {\n                            try {\n\n                                // get the service name\n                                var serviceName = componentType + 'Service';\n\n                                if (this.$injector.has(serviceName)) {\n\n                                    // get the service for the component type\n                                    var service = this.$injector.get(serviceName);\n\n                                    // get the component states for the component\n                                    var componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the component events\n                                    var componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                                    // get the node events\n                                    var nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                                    // check if the component is completed\n                                    var isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents);\n\n                                    if (firstResult) {\n                                        // this is the first component we have looked at\n                                        tempResult = isComponentCompleted;\n                                        firstResult = false;\n                                    } else {\n                                        // this is not the first component we have looked at\n                                        tempResult = tempResult && isComponentCompleted;\n                                    }\n                                }\n                            } catch (e) {\n                                console.log('Error: Could not calculate isCompleted() for a component');\n                            }\n                        }\n                    }\n                }\n\n                result = tempResult;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    };\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    };\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    };\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if(previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    };\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    };\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n\n        // check if the node is visitable\n        if (this.nodeStatuses[nodeId].isVisitable) {\n            // the node is visitable\n            // end the current node\n            this.endCurrentNode();\n\n            // set the current node\n            this.setCurrentNodeByNodeId(nodeId);\n        } else {\n            // the node is not visitable\n            this.nodeClickLocked(nodeId);\n        }\n    };\n\n    /**\n     * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n     * @param nodeId\n     */\n    nodeClickLocked(nodeId) {\n        this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n    };\n\n    /**\n     * This will parse a delimited string into an array of\n     * arrays. The default delimiter is the comma, but this\n     * can be overriden in the second argument.\n     * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n     */\n    CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                    // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                    // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n        );\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n            ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n            }\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n            }\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            var finalValue = strMatchedValue;\n            var floatVal = parseFloat(strMatchedValue);\n            if (!isNaN(floatVal)) {\n                finalValue = floatVal;\n            }\n            arrData[ arrData.length - 1 ].push( finalValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    };\n\n    /**\n     * Get the total score for the workgroup\n     * @returns the total score for the workgroup\n     */\n    getTotalScore() {\n        var annotations = this.studentData.annotations;\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n}\n\nStudentDataService.$inject = ['$http', '$injector', '$q', '$rootScope', 'AnnotationService', 'ConfigService', 'ProjectService', 'UtilService'];\n\nexport default StudentDataService;"]}