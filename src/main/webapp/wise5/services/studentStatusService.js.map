{"version":3,"sources":["studentStatusService.es6"],"names":["StudentStatusService","$http","AnnotationService","ConfigService","ProjectService","studentStatuses","config","studentStatusURL","getStudentStatusURL","runId","getRunId","requestConfig","params","get","then","result","data","workgroupId","nodePositionAndTitle","studentStatus","getStudentStatusForWorkgroupId","currentNodeId","getNodePositionAndTitleByNodeId","getStudentStatuses","x","length","tempStudentStatus","tempWorkgroupId","splice","completionPercentage","projectCompletion","completionPct","nodeId","periodId","workgroupIds","ss","push","isGroupNode","currentNode","getNodeById","group","isNodeDescendentOfGroup","numCompleted","numTotal","nodeStatuses","nodeStatus","progress","totalItems","completedItems","isVisible","isCompleted","Math","floor","workgroupsOnline","workgroupsOnlineInPeriod","n","i","workgroup","pId","workgroupsOnNode","getWorkgroupIdsOnNode","some","indexOf","w","studentScoreSum","numStudentsWithScore","score","getScore","averageScore","$inject"],"mappings":"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","file":"studentStatusService.js","sourcesContent":["class StudentStatusService {\n    constructor($http,\n                AnnotationService,\n                ConfigService,\n                ProjectService) {\n        this.$http = $http;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.studentStatuses = null;\n    }\n\n    retrieveStudentStatuses(config) {\n        var studentStatusURL = this.ConfigService.getStudentStatusURL();\n        var runId = this.ConfigService.getRunId();\n\n        var requestConfig = {\n            params: {\n                runId: runId\n            }\n        };\n\n        return this.$http.get(studentStatusURL, requestConfig).then((result) => {\n            var studentStatuses = result.data;\n\n            this.studentStatuses = studentStatuses;\n\n            return studentStatuses;\n        });\n    };\n\n    getStudentStatuses() {\n        return this.studentStatuses;\n    };\n\n    /**\n     * Get the current node position and title for a workgroup\n     * e.g. 2.2: Newton Scooter Concepts\n     * @param workgroupId the workgroup id\n     * @returns the node position and title\n     */\n    getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId) {\n        var nodePositionAndTitle = null;\n\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if(studentStatus != null) {\n            var currentNodeId = studentStatus.currentNodeId;\n            nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(currentNodeId);\n        }\n\n        return nodePositionAndTitle;\n    };\n\n    getStudentStatusForWorkgroupId(workgroupId) {\n\n        var studentStatus = null;\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId == tempWorkgroupId) {\n                    studentStatus = tempStudentStatus;\n                    break;\n                }\n            }\n        }\n\n        return studentStatus;\n    };\n\n    setStudentStatusForWorkgroupId(workgroupId, studentStatus) {\n\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId === tempWorkgroupId) {\n                    studentStatuses.splice(x, 1, studentStatus);\n                    break;\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the student project completion by workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the project completion percentage for the given workgroup\n     */\n    getStudentProjectCompletion(workgroupId) {\n\n        var completionPercentage = null;\n\n        // get the student status for the workgroup\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if (studentStatus != null) {\n\n            if (studentStatus != null) {\n\n                // get the project completion object\n                var projectCompletion = studentStatus.projectCompletion;\n\n                if (projectCompletion != null) {\n                    // get the project completion percentage\n                    completionPercentage = projectCompletion.completionPct;\n                }\n            }\n        }\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the workgroups on a node in the given period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns an array of workgroup ids on a node in a period\n     */\n    getWorkgroupIdsOnNode(nodeId, periodId) {\n        let workgroupIds = [];\n        let studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    let currentNodeId = studentStatus.currentNodeId;\n                    if (nodeId === currentNodeId) {\n                        // the node id matches the one we are looking for\n                        workgroupIds.push(studentStatus.workgroupId);\n                    } else if (this.ProjectService.isGroupNode(nodeId)) {\n                        let currentNode = this.ProjectService.getNodeById(currentNodeId);\n                        let group = this.ProjectService.getNodeById(nodeId);\n\n                        if (this.ProjectService.isNodeDescendentOfGroup(currentNode, group)) {\n                            // the node id is a descendent of the group we're looking for\n                            workgroupIds.push(studentStatus.workgroupId);\n                        }\n                    }\n                }\n            }\n        }\n\n        return workgroupIds;\n    }\n\n    /**\n     * Get the percentage of the period that has completed the node\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the percentage of the period that has completed the node.\n     * this value will be an integer between 0-100.\n     */\n    getNodeCompletion(nodeId, periodId) {\n        let numCompleted = 0;\n        let numTotal = 0;\n        let isGroupNode = this.ProjectService.isGroupNode(nodeId);\n\n        let studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (let ss = 0; ss < studentStatuses.length; ss++) {\n            let studentStatus = studentStatuses[ss];\n\n            if (studentStatus) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n\n                    let nodeStatuses = studentStatus.nodeStatuses;\n\n                    if (nodeStatuses) {\n                        // get the node status for the node\n                        let nodeStatus = nodeStatuses[nodeId];\n\n                        if (nodeStatus != null) {\n                            if (isGroupNode) {\n                                let progress = nodeStatus.progress;\n                                if (progress) {\n                                    numTotal += progress.totalItems;\n                                    numCompleted += progress.completedItems;\n                                }\n                            } else {\n                                if (nodeStatus.isVisible) {\n                                    /*\n                                     * the student can see the step. we need this check\n                                     * for cases when a project has branching. this way\n                                     * we only calculate the step completion percentage\n                                     * based on the students that can actually go to\n                                     * the step.\n                                     */\n                                    numTotal++;\n                                }\n\n                                if (nodeStatus.isCompleted) {\n                                    // the student has completed the node\n                                    numCompleted++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * generate the percentage number rounded down to the nearest integer.\n         * the value will be between 0-100\n         */\n        let completionPercentage = (numTotal > 0 ? Math.floor(100 * numCompleted / numTotal) : 0);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the total number of steps that are descendants of a given node\n     * @param nodeId the node id\n     * @returns the total number of step (application node) descendants; returns\n     * @param periodId the period id. pass in -1 to select all periods.\n     * an average for all students in the selected period if the group is a\n     * planning activity\n     */\n    /*getTotalApplicationNodeDescendents(nodeId, periodId) {\n        let numTotal = 0;\n        let numWorkgroups = 0;\n\n        let isGroupNode = this.ProjectService.isGroupNode(nodeId);\n\n        if (isGroupNode) {\n            let isPlanning = this.ProjectService.isPlanning(nodeId);\n            let studentStatuses = this.studentStatuses;\n\n            // loop through all the student statuses\n            for (let ss = 0; ss < studentStatuses.length; ss++) {\n                let studentStatus = studentStatuses[ss];\n\n                if (studentStatus) {\n\n                    if (periodId == -1 || periodId == studentStatus.periodId) {\n                        // the period matches the one we are looking for\n\n                        let nodeStatuses = studentStatus.nodeStatuses;\n\n                        if (nodeStatuses) {\n                            // get the node status for the node\n                            let nodeStatus = nodeStatuses[nodeId];\n\n                            if (nodeStatus) {\n                                let progress = nodeStatus.progress;\n                                if (progress) {\n                                    let totalItems = progress.totalItems;\n                                    if (totalItems) {\n                                        numWorkgroups++;\n\n                                        if (isPlanning) {\n                                            numTotal += progress.totalItems;\n                                        } else {\n                                            // this is not a planning activity, so we can assume the total number of items is the same for all students\n                                            numTotal = progress.totalItems;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return (numWorkgroups > 0 ? numTotal/numWorkgroups : 0);\n    };*/\n\n    /**\n     * Check if there is a workgroup that is online and on the node\n     * @param workgroupsOnline the workgroup ids that are online\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns whether there is a workgroup that is online and on the node\n     */\n    isWorkgroupOnlineOnNode(workgroupsOnline, nodeId, periodId) {\n        let result = false;\n\n        // find workgroups online in the given period\n        let workgroupsOnlineInPeriod = [];\n        let n = workgroupsOnline.length;\n        for (let i = 0; i < n; i++) {\n            let workgroup = workgroupsOnline[i];\n            let studentStatus = this.getStudentStatusForWorkgroupId(workgroup);\n            if (studentStatus) {\n                let pId = studentStatus.periodId;\n                if (periodId == -1 || pId == periodId) {\n                    workgroupsOnlineInPeriod.push(workgroup);\n                }\n            }\n        }\n\n        if (workgroupsOnlineInPeriod.length) {\n            // get workgroups on the given node\n            let workgroupsOnNode = this.getWorkgroupIdsOnNode(nodeId, periodId);\n\n            // check if any online workgroups in the current period are on this node\n            result = workgroupsOnNode.some(w => {\n                return workgroupsOnlineInPeriod.indexOf(w) > -1;\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the average score for a node for a period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the average score for the node for the period\n     */\n    getNodeAverageScore(nodeId, periodId) {\n        var studentScoreSum = 0;\n        var numStudentsWithScore = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n\n                    var workgroupId = studentStatus.workgroupId;\n\n                    // get the workgroups score on the node\n                    var score = this.AnnotationService.getScore(workgroupId, nodeId);\n\n                    if (score != null) {\n                        // increment the counter of students with a score for this node\n                        numStudentsWithScore++;\n\n                        // accumulate the sum of the scores for this node\n                        studentScoreSum += score;\n                    }\n                }\n            }\n        }\n\n        var averageScore = null;\n\n        if (numStudentsWithScore != 0) {\n            // calculate the average score for this node rounded down to the nearest hundredth\n            averageScore = Math.floor(100 * studentScoreSum / numStudentsWithScore) / 100;\n        }\n\n        return averageScore;\n    }\n}\n\nStudentStatusService.$inject = [\n    '$http',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default StudentStatusService;\n"]}