{"version":3,"sources":["studentStatusService.es6"],"names":["StudentStatusService","$http","AnnotationService","ConfigService","ProjectService","studentStatuses","config","studentStatusURL","getStudentStatusURL","runId","getRunId","requestConfig","params","get","then","result","data","workgroupId","nodePositionAndTitle","studentStatus","getStudentStatusForWorkgroupId","currentNodeId","getNodePositionAndTitleByNodeId","getStudentStatuses","x","length","tempStudentStatus","tempWorkgroupId","splice","completionPercentage","projectCompletion","completionPct","nodeId","periodId","workgroupIds","ss","push","isGroupNode","currentNode","getNodeById","group","isNodeDescendentOfGroup","excludeNonWorkNodes","numCompleted","numTotal","nodeStatuses","nodeStatus","descendants","getDescendentsOfGroup","l","i","descendantId","descendantStatus","isVisible","nodeHasWork","isCompleted","progress","totalItems","completedItems","includeNode","Math","floor","workgroupsOnline","workgroupsOnlineInPeriod","n","workgroup","pId","workgroupsOnNode","getWorkgroupIdsOnNode","some","indexOf","w","studentScoreSum","numStudentsWithScore","score","getScore","averageScore","$inject"],"mappings":"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","file":"studentStatusService.js","sourcesContent":["class StudentStatusService {\r\n    constructor($http,\r\n                AnnotationService,\r\n                ConfigService,\r\n                ProjectService) {\r\n        this.$http = $http;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.ProjectService = ProjectService;\r\n        this.studentStatuses = null;\r\n    }\r\n\r\n    retrieveStudentStatuses(config) {\r\n        var studentStatusURL = this.ConfigService.getStudentStatusURL();\r\n        var runId = this.ConfigService.getRunId();\r\n\r\n        var requestConfig = {\r\n            params: {\r\n                runId: runId\r\n            }\r\n        };\r\n\r\n        return this.$http.get(studentStatusURL, requestConfig).then((result) => {\r\n            var studentStatuses = result.data;\r\n\r\n            this.studentStatuses = studentStatuses;\r\n\r\n            return studentStatuses;\r\n        });\r\n    };\r\n\r\n    getStudentStatuses() {\r\n        return this.studentStatuses;\r\n    };\r\n\r\n    /**\r\n     * Get the current node position and title for a workgroup\r\n     * e.g. 2.2: Newton Scooter Concepts\r\n     * @param workgroupId the workgroup id\r\n     * @returns the node position and title\r\n     */\r\n    getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId) {\r\n        var nodePositionAndTitle = null;\r\n\r\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\r\n\r\n        if(studentStatus != null) {\r\n            var currentNodeId = studentStatus.currentNodeId;\r\n            nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(currentNodeId);\r\n        }\r\n\r\n        return nodePositionAndTitle;\r\n    };\r\n\r\n    getStudentStatusForWorkgroupId(workgroupId) {\r\n\r\n        var studentStatus = null;\r\n        var studentStatuses = this.getStudentStatuses();\r\n\r\n        for (var x = 0; x < studentStatuses.length; x++) {\r\n            var tempStudentStatus = studentStatuses[x];\r\n\r\n            if (tempStudentStatus != null) {\r\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\r\n\r\n                if (workgroupId == tempWorkgroupId) {\r\n                    studentStatus = tempStudentStatus;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return studentStatus;\r\n    };\r\n\r\n    setStudentStatusForWorkgroupId(workgroupId, studentStatus) {\r\n\r\n        var studentStatuses = this.getStudentStatuses();\r\n\r\n        for (var x = 0; x < studentStatuses.length; x++) {\r\n            var tempStudentStatus = studentStatuses[x];\r\n\r\n            if (tempStudentStatus != null) {\r\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\r\n\r\n                if (workgroupId === tempWorkgroupId) {\r\n                    studentStatuses.splice(x, 1, studentStatus);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the student project completion by workgroup id\r\n     * @param workgroupId the workgroup id\r\n     * @returns the project completion percentage for the given workgroup\r\n     */\r\n    getStudentProjectCompletion(workgroupId) {\r\n\r\n        var completionPercentage = null;\r\n\r\n        // get the student status for the workgroup\r\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\r\n\r\n        if (studentStatus != null) {\r\n\r\n            if (studentStatus != null) {\r\n\r\n                // get the project completion object\r\n                var projectCompletion = studentStatus.projectCompletion;\r\n\r\n                if (projectCompletion != null) {\r\n                    // get the project completion percentage\r\n                    completionPercentage = projectCompletion.completionPct;\r\n                }\r\n            }\r\n        }\r\n\r\n        return completionPercentage;\r\n    }\r\n\r\n    /**\r\n     * Get the workgroups on a node in the given period\r\n     * @param nodeId the node id\r\n     * @param periodId the period id. pass in -1 to select all periods.\r\n     * @returns an array of workgroup ids on a node in a period\r\n     */\r\n    getWorkgroupIdsOnNode(nodeId, periodId) {\r\n        let workgroupIds = [];\r\n        let studentStatuses = this.studentStatuses;\r\n\r\n        // loop through all the student statuses\r\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\r\n            var studentStatus = studentStatuses[ss];\r\n\r\n            if (studentStatus != null) {\r\n\r\n                if (periodId == -1 || periodId == studentStatus.periodId) {\r\n                    // the period matches the one we are looking for\r\n                    let currentNodeId = studentStatus.currentNodeId;\r\n                    if (nodeId === currentNodeId) {\r\n                        // the node id matches the one we are looking for\r\n                        workgroupIds.push(studentStatus.workgroupId);\r\n                    } else if (this.ProjectService.isGroupNode(nodeId)) {\r\n                        let currentNode = this.ProjectService.getNodeById(currentNodeId);\r\n                        let group = this.ProjectService.getNodeById(nodeId);\r\n\r\n                        if (this.ProjectService.isNodeDescendentOfGroup(currentNode, group)) {\r\n                            // the node id is a descendent of the group we're looking for\r\n                            workgroupIds.push(studentStatus.workgroupId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return workgroupIds;\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the period that has completed the node\r\n     * @param nodeId the node id\r\n     * @param periodId the period id. pass in -1 to select all periods.\r\n     * @param workgroupId the workgroup id to limit results to (optional)\r\n     * @param excludeNonWorkNodes boolean whether to exclude nodes without student work or not (optional)\r\n     * @returns the percentage of the period that has completed the node.\r\n     * this value will be an integer between 0-100.\r\n     */\r\n    getNodeCompletion(nodeId, periodId, workgroupId, excludeNonWorkNodes) {\r\n        let numCompleted = 0;\r\n        let numTotal = 0;\r\n        let isGroupNode = this.ProjectService.isGroupNode(nodeId);\r\n\r\n        let studentStatuses = this.studentStatuses;\r\n\r\n        // loop through all the student statuses\r\n        for (let ss = 0; ss < studentStatuses.length; ss++) {\r\n            let studentStatus = studentStatuses[ss];\r\n\r\n            if (studentStatus) {\r\n\r\n                if (periodId == -1 || periodId == studentStatus.periodId) {\r\n                    // the period matches the one we are looking for\r\n\r\n                    if (!workgroupId || workgroupId === studentStatus.workgroupId) {\r\n                        // either no workgroupId was specified or the workgroupId matches the one we're looking for\r\n\r\n                        let nodeStatuses = studentStatus.nodeStatuses;\r\n\r\n                        if (nodeStatuses) {\r\n                            // get the node status for the node\r\n                            let nodeStatus = nodeStatuses[nodeId];\r\n\r\n                            if (nodeStatus != null) {\r\n                                if (isGroupNode) {\r\n                                    if (excludeNonWorkNodes) {\r\n                                        /* nodeStatus.progress includes completion information for all nodes;\r\n                                         * we want only nodes that capture student work, so we need to do a custom calculation\r\n                                         */\r\n                                        let group = this.ProjectService.getNodeById(nodeId);\r\n\r\n                                        // get all the descendants of the group\r\n                                        let descendants = this.ProjectService.getDescendentsOfGroup(group);\r\n                                        let l = descendants.length;\r\n\r\n                                        // loop through all the descendants to check for completion\r\n                                        for (let i = 0; i < l; i++) {\r\n                                            let descendantId = descendants[i];\r\n\r\n                                            if (!this.ProjectService.isGroupNode(descendantId)) {\r\n                                                // node is not a group, so add to totals if visible and has student work\r\n                                                let descendantStatus = nodeStatuses[descendantId];\r\n\r\n                                                if (descendantStatus && descendantStatus.isVisible && this.ProjectService.nodeHasWork(descendantId)) {\r\n                                                    numTotal++;\r\n\r\n                                                    if (descendantStatus.isCompleted) {\r\n                                                        numCompleted++;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        // we're looking for completion percentage of all nodes, so we can use nodeStatus.progress\r\n                                        let progress = nodeStatus.progress;\r\n                                        if (progress) {\r\n                                            numTotal += progress.totalItems;\r\n                                            numCompleted += progress.completedItems;\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    if (nodeStatus.isVisible) {\r\n                                        /*\r\n                                         * the student can see the step. we need this check\r\n                                         * for cases when a project has branching. this way\r\n                                         * we only calculate the step completion percentage\r\n                                         * based on the students that can actually go to\r\n                                         * the step.\r\n                                         */\r\n\r\n                                        // check whether we should include the node in the calculation\r\n                                        // i.e. either includeNonWorkNodes is true or the node has student work\r\n                                        let includeNode = !excludeNonWorkNodes || this.ProjectService.nodeHasWork(nodeId);\r\n\r\n                                        if (includeNode) {\r\n                                            numTotal++;\r\n\r\n                                            if (nodeStatus.isCompleted) {\r\n                                                // the student has completed the node\r\n                                                numCompleted++;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * generate the percentage number rounded down to the nearest integer.\r\n         * the value will be between 0-100\r\n         */\r\n        let completionPercentage = (numTotal > 0 ? Math.floor(100 * numCompleted / numTotal) : 0);\r\n\r\n        return completionPercentage;\r\n    }\r\n\r\n    /**\r\n     * Get the total number of steps that are descendants of a given node\r\n     * @param nodeId the node id\r\n     * @returns the total number of step (application node) descendants; returns\r\n     * @param periodId the period id. pass in -1 to select all periods.\r\n     * an average for all students in the selected period if the group is a\r\n     * planning activity\r\n     */\r\n    /*getTotalApplicationNodeDescendents(nodeId, periodId) {\r\n        let numTotal = 0;\r\n        let numWorkgroups = 0;\r\n\r\n        let isGroupNode = this.ProjectService.isGroupNode(nodeId);\r\n\r\n        if (isGroupNode) {\r\n            let isPlanning = this.ProjectService.isPlanning(nodeId);\r\n            let studentStatuses = this.studentStatuses;\r\n\r\n            // loop through all the student statuses\r\n            for (let ss = 0; ss < studentStatuses.length; ss++) {\r\n                let studentStatus = studentStatuses[ss];\r\n\r\n                if (studentStatus) {\r\n\r\n                    if (periodId == -1 || periodId == studentStatus.periodId) {\r\n                        // the period matches the one we are looking for\r\n\r\n                        let nodeStatuses = studentStatus.nodeStatuses;\r\n\r\n                        if (nodeStatuses) {\r\n                            // get the node status for the node\r\n                            let nodeStatus = nodeStatuses[nodeId];\r\n\r\n                            if (nodeStatus) {\r\n                                let progress = nodeStatus.progress;\r\n                                if (progress) {\r\n                                    let totalItems = progress.totalItems;\r\n                                    if (totalItems) {\r\n                                        numWorkgroups++;\r\n\r\n                                        if (isPlanning) {\r\n                                            numTotal += progress.totalItems;\r\n                                        } else {\r\n                                            // this is not a planning activity, so we can assume the total number of items is the same for all students\r\n                                            numTotal = progress.totalItems;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return (numWorkgroups > 0 ? numTotal/numWorkgroups : 0);\r\n    };*/\r\n\r\n    /**\r\n     * Check if there is a workgroup that is online and on the node\r\n     * @param workgroupsOnline the workgroup ids that are online\r\n     * @param nodeId the node id\r\n     * @param periodId the period id. pass in -1 to select all periods.\r\n     * @returns whether there is a workgroup that is online and on the node\r\n     */\r\n    isWorkgroupOnlineOnNode(workgroupsOnline, nodeId, periodId) {\r\n        let result = false;\r\n\r\n        // find workgroups online in the given period\r\n        let workgroupsOnlineInPeriod = [];\r\n        let n = workgroupsOnline.length;\r\n        for (let i = 0; i < n; i++) {\r\n            let workgroup = workgroupsOnline[i];\r\n            let studentStatus = this.getStudentStatusForWorkgroupId(workgroup);\r\n            if (studentStatus) {\r\n                let pId = studentStatus.periodId;\r\n                if (periodId == -1 || pId == periodId) {\r\n                    workgroupsOnlineInPeriod.push(workgroup);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (workgroupsOnlineInPeriod.length) {\r\n            // get workgroups on the given node\r\n            let workgroupsOnNode = this.getWorkgroupIdsOnNode(nodeId, periodId);\r\n\r\n            // check if any online workgroups in the current period are on this node\r\n            result = workgroupsOnNode.some(w => {\r\n                return workgroupsOnlineInPeriod.indexOf(w) > -1;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the average score for a node for a period\r\n     * @param nodeId the node id\r\n     * @param periodId the period id. pass in -1 to select all periods.\r\n     * @returns the average score for the node for the period\r\n     */\r\n    getNodeAverageScore(nodeId, periodId) {\r\n        var studentScoreSum = 0;\r\n        var numStudentsWithScore = 0;\r\n\r\n        var studentStatuses = this.studentStatuses;\r\n\r\n        // loop through all the student statuses\r\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\r\n            var studentStatus = studentStatuses[ss];\r\n\r\n            if (studentStatus != null) {\r\n\r\n                if (periodId == -1 || periodId == studentStatus.periodId) {\r\n                    // the period matches the one we are looking for\r\n\r\n                    var workgroupId = studentStatus.workgroupId;\r\n\r\n                    // get the workgroups score on the node\r\n                    var score = this.AnnotationService.getScore(workgroupId, nodeId);\r\n\r\n                    if (score != null) {\r\n                        // increment the counter of students with a score for this node\r\n                        numStudentsWithScore++;\r\n\r\n                        // accumulate the sum of the scores for this node\r\n                        studentScoreSum += score;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var averageScore = null;\r\n\r\n        if (numStudentsWithScore != 0) {\r\n            // calculate the average score for this node rounded down to the nearest hundredth\r\n            averageScore = Math.floor(100 * studentScoreSum / numStudentsWithScore) / 100;\r\n        }\r\n\r\n        return averageScore;\r\n    }\r\n}\r\n\r\nStudentStatusService.$inject = [\r\n    '$http',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'ProjectService'\r\n];\r\n\r\nexport default StudentStatusService;\r\n"]}