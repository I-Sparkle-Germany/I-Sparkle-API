{"version":3,"sources":["studentStatusService.es6"],"names":[],"mappings":"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","file":"studentStatusService.js","sourcesContent":["class StudentStatusService {\n    constructor($http,\n                AnnotationService,\n                ConfigService,\n                ProjectService) {\n        this.$http = $http;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.studentStatuses = null;\n    }\n\n    retrieveStudentStatuses(config) {\n        var studentStatusURL = this.ConfigService.getStudentStatusURL();\n        var runId = this.ConfigService.getRunId();\n\n        var requestConfig = {\n            params: {\n                runId: runId\n            }\n        };\n\n        return this.$http.get(studentStatusURL, requestConfig).then((result) => {\n            var studentStatuses = result.data;\n\n            this.studentStatuses = studentStatuses;\n\n            return studentStatuses;\n        });\n    };\n\n    getStudentStatuses() {\n        return this.studentStatuses;\n    };\n\n    /**\n     * Get the current node position and title for a workgroup\n     * e.g. 2.2: Newton Scooter Concepts\n     * @param workgroupId the workgroup id\n     * @returns the node position and title\n     */\n    getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId) {\n        var nodePositionAndTitle = null;\n\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if(studentStatus != null) {\n            var currentNodeId = studentStatus.currentNodeId;\n            nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(currentNodeId);\n        }\n\n        return nodePositionAndTitle;\n    };\n\n    getStudentStatusForWorkgroupId(workgroupId) {\n\n        var studentStatus = null;\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId == tempWorkgroupId) {\n                    studentStatus = tempStudentStatus;\n                    break;\n                }\n            }\n        }\n\n        return studentStatus;\n    };\n\n    setStudentStatusForWorkgroupId(workgroupId, studentStatus) {\n\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId === tempWorkgroupId) {\n                    studentStatuses.splice(x, 1, studentStatus);\n                    break;\n                }\n            }\n        }\n    };\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        var avatarColors = ['#E91E63', '#9C27B0', '#CDDC39', '#2196F3', '#FDD835', '#43A047', '#795548', '#EF6C00', '#C62828', '#607D8B'];\n        var modulo = workgroupId % 10;\n        return avatarColors[modulo];\n    };\n\n    /**\n     * Get the student project completion by workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the project completion percentage for the given workgroup\n     */\n    getStudentProjectCompletion(workgroupId) {\n\n        var completionPercentage = null;\n\n        // get the student status for the workgroup\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if (studentStatus != null) {\n\n            if (studentStatus != null) {\n\n                // get the project completion object\n                var projectCompletion = studentStatus.projectCompletion;\n\n                if (projectCompletion != null) {\n                    // get the project completion percentage\n                    completionPercentage = projectCompletion.completionPct;\n                }\n            }\n        }\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the number of students on a node in the given period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the number of students on a node in a period\n     */\n    getNumberOfStudentsOnNode(nodeId, periodId) {\n\n        var count = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    if (nodeId === studentStatus.currentNodeId) {\n                        // the node id matches the one we are looking for\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the period that has completed the node\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the percentage of the period that has completed the node.\n     * this value will be an integer between 0-100.\n     */\n    getNodeCompletion(nodeId, periodId) {\n        var numStudentsCompleted = 0;\n        var numStudentsInPeriod = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    numStudentsInPeriod++;\n\n                    var nodeStatuses = studentStatus.nodeStatuses;\n\n                    if (nodeStatuses != null) {\n                        // get the node status for the node\n                        var nodeStatus = nodeStatuses[nodeId];\n\n                        if (nodeStatus != null) {\n                            if (nodeStatus.isCompleted) {\n                                // the student has completed the node\n                                numStudentsCompleted++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * generate the percentage number rounded down to the nearest integer.\n         * the value will be between 0-100\n         */\n        var completionPercentage = Math.floor(100 * numStudentsCompleted / numStudentsInPeriod);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there is a workgroup that is online and on the node\n     * @param studentsOnline the workgroup ids that are online\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns whether there is a workgroup that is online and on the node\n     */\n    isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId) {\n\n        if (studentsOnline != null) {\n\n            // loop through all the students that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n\n                    var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n                    if (studentStatus != null) {\n\n                        if (periodId == -1 || periodId == studentStatus.periodId) {\n                            // the period matches the one we are looking for\n                            if (nodeId === studentStatus.currentNodeId) {\n                                // the student is on the node we are looking for\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the average score for a node for a period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the average score for the node for the period\n     */\n    getNodeAverageScore(nodeId, periodId) {\n        var studentScoreSum = 0;\n        var numStudentsWithScore = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n\n                    var workgroupId = studentStatus.workgroupId;\n\n                    // get the workgroups score on the node\n                    var score = this.AnnotationService.getScore(workgroupId, nodeId);\n\n                    if (score != null) {\n                        // increment the counter of students with a score for this node\n                        numStudentsWithScore++;\n\n                        // accumulate the sum of the scores for this node\n                        studentScoreSum += score;\n                    }\n                }\n            }\n        }\n\n        var averageScore = null;\n\n        if (numStudentsWithScore != 0) {\n            // calculate the average score for this node rounded down to the nearest hundredth\n            averageScore = Math.floor(100 * studentScoreSum / numStudentsWithScore) / 100;\n        }\n\n        return averageScore;\n    }\n}\n\nStudentStatusService.$inject = [\n    '$http',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default StudentStatusService;\n"]}