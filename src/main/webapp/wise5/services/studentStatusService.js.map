{"version":3,"sources":["studentStatusService.es6"],"names":[],"mappings":"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","file":"studentStatusService.js","sourcesContent":["class StudentStatusService {\n    constructor($http,\n                AnnotationService,\n                ConfigService,\n                ProjectService) {\n        this.$http = $http;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.studentStatuses = null;\n\n        this.newNodeVisits = [];\n    }\n\n    retrieveStudentStatuses(config) {\n        var studentStatusURL = this.ConfigService.getStudentStatusURL();\n        var runId = this.ConfigService.getRunId();\n\n        var requestConfig = {\n            params: {\n                runId: runId\n            }\n        };\n\n        return this.$http.get(studentStatusURL, requestConfig).then((result) => {\n            var studentStatuses = result.data;\n\n            this.studentStatuses = studentStatuses;\n\n            return studentStatuses;\n        });\n    };\n\n    getStudentStatuses() {\n        return this.studentStatuses;\n    };\n\n    /**\n     * Get the current node position and title for a workgroup\n     * e.g. 2.2: Newton Scooter Concepts\n     * @param workgroupId the workgroup id\n     * @returns the node position and title\n     */\n    getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId) {\n        var nodePositionAndTitle = null;\n\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if(studentStatus != null) {\n            var currentNodeId = studentStatus.currentNodeId;\n            nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(currentNodeId);\n        }\n\n        return nodePositionAndTitle;\n    };\n\n    getNewNodeVisits() {\n        return this.newNodeVisits;\n    };\n\n    addNewNodeVisit(nodeVisit) {\n        this.newNodeVisits.push(nodeVisit);\n    };\n\n    getStudentStatusForWorkgroupId(workgroupId) {\n\n        var studentStatus = null;\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId == tempWorkgroupId) {\n                    studentStatus = tempStudentStatus;\n                    break;\n                }\n            }\n        }\n\n        return studentStatus;\n    };\n\n    setStudentStatusForWorkgroupId(workgroupId, studentStatus) {\n\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId === tempWorkgroupId) {\n                    studentStatuses.splice(x, 1, studentStatus);\n                    break;\n                }\n            }\n        }\n    };\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        var avatarColors = ['#E91E63', '#9C27B0', '#CDDC39', '#2196F3', '#FDD835', '#43A047', '#795548', '#EF6C00', '#C62828', '#607D8B'];\n        var modulo = workgroupId % 10;\n        return avatarColors[modulo];\n    };\n\n    /**\n     * Get the student project completion by workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the project completion percentage for the given workgroup\n     */\n    getStudentProjectCompletion(workgroupId) {\n\n        var completionPercentage = null;\n\n        // get the student status for the workgroup\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if (studentStatus != null) {\n\n            if (studentStatus != null) {\n\n                // get the project completion object\n                var projectCompletion = studentStatus.projectCompletion;\n\n                if (projectCompletion != null) {\n                    // get the project completion percentage\n                    completionPercentage = projectCompletion.completionPct;\n                }\n            }\n        }\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the number of students on a node in the given period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the number of students on a node in a period\n     */\n    getNumberOfStudentsOnNode(nodeId, periodId) {\n\n        var count = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    if (nodeId === studentStatus.currentNodeId) {\n                        // the node id matches the one we are looking for\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the period that has completed the node\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the percentage of the period that has completed the node.\n     * this value will be an integer between 0-100.\n     */\n    getNodeCompletion(nodeId, periodId) {\n        var numStudentsCompleted = 0;\n        var numStudentsInPeriod = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    numStudentsInPeriod++;\n\n                    var nodeStatuses = studentStatus.nodeStatuses;\n\n                    if (nodeStatuses != null) {\n                        // get the node status for the node\n                        var nodeStatus = nodeStatuses[nodeId];\n\n                        if (nodeStatus != null) {\n                            if (nodeStatus.isCompleted) {\n                                // the student has completed the node\n                                numStudentsCompleted++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * generate the percentage number rounded down to the nearest integer.\n         * the value will be between 0-100\n         */\n        var completionPercentage = Math.floor(100 * numStudentsCompleted / numStudentsInPeriod);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there is a workgroup that is online and on the node\n     * @param studentsOnline the workgroup ids that are online\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns whether there is a workgroup that is online and on the node\n     */\n    isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId) {\n\n        if (studentsOnline != null) {\n\n            // loop through all the students that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n\n                    var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n                    if (studentStatus != null) {\n\n                        if (periodId == -1 || periodId == studentStatus.periodId) {\n                            // the period matches the one we are looking for\n                            if (nodeId === studentStatus.currentNodeId) {\n                                // the student is on the node we are looking for\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the average score for a node for a period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the average score for the node for the period\n     */\n    getNodeAverageScore(nodeId, periodId) {\n        var studentScoreSum = 0;\n        var numStudentsWithScore = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n\n                    var workgroupId = studentStatus.workgroupId;\n\n                    // get the workgroups score on the node\n                    var score = this.AnnotationService.getScore(workgroupId, nodeId);\n\n                    if (score != null) {\n                        // increment the counter of students with a score for this node\n                        numStudentsWithScore++;\n\n                        // accumulate the sum of the scores for this node\n                        studentScoreSum += score;\n                    }\n                }\n            }\n        }\n\n        var averageScore = null;\n\n        if (numStudentsWithScore != 0) {\n            // calculate the average score for this node rounded down to the nearest hundredth\n            averageScore = Math.floor(100 * studentScoreSum / numStudentsWithScore) / 100;\n        }\n\n        return averageScore;\n    }\n}\n\nStudentStatusService.$inject = [\n    '$http',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default StudentStatusService;\n"]}