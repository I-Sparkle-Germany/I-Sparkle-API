{"version":3,"sources":["studentStatusService.es6"],"names":["StudentStatusService","$http","AnnotationService","ConfigService","ProjectService","studentStatuses","config","studentStatusURL","getStudentStatusURL","runId","getRunId","requestConfig","params","get","then","result","data","workgroupId","nodePositionAndTitle","studentStatus","getStudentStatusForWorkgroupId","currentNodeId","getNodePositionAndTitleByNodeId","getStudentStatuses","x","length","tempStudentStatus","tempWorkgroupId","splice","avatarColors","modulo","completionPercentage","projectCompletion","completionPct","nodeId","periodId","count","ss","numStudentsCompleted","numStudentsInPeriod","nodeStatuses","nodeStatus","isCompleted","Math","floor","studentsOnline","s","studentScoreSum","numStudentsWithScore","score","getScore","averageScore","$inject"],"mappings":"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","file":"studentStatusService.js","sourcesContent":["class StudentStatusService {\n    constructor($http,\n                AnnotationService,\n                ConfigService,\n                ProjectService) {\n        this.$http = $http;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.studentStatuses = null;\n    }\n\n    retrieveStudentStatuses(config) {\n        var studentStatusURL = this.ConfigService.getStudentStatusURL();\n        var runId = this.ConfigService.getRunId();\n\n        var requestConfig = {\n            params: {\n                runId: runId\n            }\n        };\n\n        return this.$http.get(studentStatusURL, requestConfig).then((result) => {\n            var studentStatuses = result.data;\n\n            this.studentStatuses = studentStatuses;\n\n            return studentStatuses;\n        });\n    };\n\n    getStudentStatuses() {\n        return this.studentStatuses;\n    };\n\n    /**\n     * Get the current node position and title for a workgroup\n     * e.g. 2.2: Newton Scooter Concepts\n     * @param workgroupId the workgroup id\n     * @returns the node position and title\n     */\n    getCurrentNodePositionAndNodeTitleForWorkgroupId(workgroupId) {\n        var nodePositionAndTitle = null;\n\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if(studentStatus != null) {\n            var currentNodeId = studentStatus.currentNodeId;\n            nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(currentNodeId);\n        }\n\n        return nodePositionAndTitle;\n    };\n\n    getStudentStatusForWorkgroupId(workgroupId) {\n\n        var studentStatus = null;\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId == tempWorkgroupId) {\n                    studentStatus = tempStudentStatus;\n                    break;\n                }\n            }\n        }\n\n        return studentStatus;\n    };\n\n    setStudentStatusForWorkgroupId(workgroupId, studentStatus) {\n\n        var studentStatuses = this.getStudentStatuses();\n\n        for (var x = 0; x < studentStatuses.length; x++) {\n            var tempStudentStatus = studentStatuses[x];\n\n            if (tempStudentStatus != null) {\n                var tempWorkgroupId = tempStudentStatus.workgroupId;\n\n                if (workgroupId === tempWorkgroupId) {\n                    studentStatuses.splice(x, 1, studentStatus);\n                    break;\n                }\n            }\n        }\n    };\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        var avatarColors = ['#E91E63', '#9C27B0', '#CDDC39', '#2196F3', '#FDD835', '#43A047', '#795548', '#EF6C00', '#C62828', '#607D8B'];\n        var modulo = workgroupId % 10;\n        return avatarColors[modulo];\n    };\n\n    /**\n     * Get the student project completion by workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the project completion percentage for the given workgroup\n     */\n    getStudentProjectCompletion(workgroupId) {\n\n        var completionPercentage = null;\n\n        // get the student status for the workgroup\n        var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n        if (studentStatus != null) {\n\n            if (studentStatus != null) {\n\n                // get the project completion object\n                var projectCompletion = studentStatus.projectCompletion;\n\n                if (projectCompletion != null) {\n                    // get the project completion percentage\n                    completionPercentage = projectCompletion.completionPct;\n                }\n            }\n        }\n\n        return completionPercentage;\n    }\n\n    /**\n     * Get the number of students on a node in the given period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the number of students on a node in a period\n     */\n    getNumberOfStudentsOnNode(nodeId, periodId) {\n\n        var count = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    if (nodeId === studentStatus.currentNodeId) {\n                        // the node id matches the one we are looking for\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * Get the percentage of the period that has completed the node\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the percentage of the period that has completed the node.\n     * this value will be an integer between 0-100.\n     */\n    getNodeCompletion(nodeId, periodId) {\n        var numStudentsCompleted = 0;\n        var numStudentsInPeriod = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n                    numStudentsInPeriod++;\n\n                    var nodeStatuses = studentStatus.nodeStatuses;\n\n                    if (nodeStatuses != null) {\n                        // get the node status for the node\n                        var nodeStatus = nodeStatuses[nodeId];\n\n                        if (nodeStatus != null) {\n                            if (nodeStatus.isCompleted) {\n                                // the student has completed the node\n                                numStudentsCompleted++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        /*\n         * generate the percentage number rounded down to the nearest integer.\n         * the value will be between 0-100\n         */\n        var completionPercentage = Math.floor(100 * numStudentsCompleted / numStudentsInPeriod);\n\n        return completionPercentage;\n    }\n\n    /**\n     * Check if there is a workgroup that is online and on the node\n     * @param studentsOnline the workgroup ids that are online\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns whether there is a workgroup that is online and on the node\n     */\n    isWorkgroupOnlineOnNode(studentsOnline, nodeId, periodId) {\n\n        if (studentsOnline != null) {\n\n            // loop through all the students that are online\n            for (var s = 0; s < studentsOnline.length; s++) {\n                var workgroupId = studentsOnline[s];\n\n                if (workgroupId != null) {\n\n                    var studentStatus = this.getStudentStatusForWorkgroupId(workgroupId);\n\n                    if (studentStatus != null) {\n\n                        if (periodId == -1 || periodId == studentStatus.periodId) {\n                            // the period matches the one we are looking for\n                            if (nodeId === studentStatus.currentNodeId) {\n                                // the student is on the node we are looking for\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the average score for a node for a period\n     * @param nodeId the node id\n     * @param periodId the period id. pass in -1 to select all periods.\n     * @returns the average score for the node for the period\n     */\n    getNodeAverageScore(nodeId, periodId) {\n        var studentScoreSum = 0;\n        var numStudentsWithScore = 0;\n\n        var studentStatuses = this.studentStatuses;\n\n        // loop through all the student statuses\n        for (var ss = 0; ss < studentStatuses.length; ss++) {\n            var studentStatus = studentStatuses[ss];\n\n            if (studentStatus != null) {\n\n                if (periodId == -1 || periodId == studentStatus.periodId) {\n                    // the period matches the one we are looking for\n\n                    var workgroupId = studentStatus.workgroupId;\n\n                    // get the workgroups score on the node\n                    var score = this.AnnotationService.getScore(workgroupId, nodeId);\n\n                    if (score != null) {\n                        // increment the counter of students with a score for this node\n                        numStudentsWithScore++;\n\n                        // accumulate the sum of the scores for this node\n                        studentScoreSum += score;\n                    }\n                }\n            }\n        }\n\n        var averageScore = null;\n\n        if (numStudentsWithScore != 0) {\n            // calculate the average score for this node rounded down to the nearest hundredth\n            averageScore = Math.floor(100 * studentScoreSum / numStudentsWithScore) / 100;\n        }\n\n        return averageScore;\n    }\n}\n\nStudentStatusService.$inject = [\n    '$http',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default StudentStatusService;\n"]}