{"version":3,"sources":["studentWebSocketService.es6"],"names":[],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["class StudentWebSocketService {\n    constructor($rootScope,\n                $websocket,\n                ConfigService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentDataService = StudentDataService;\n\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize() {\n\n        // get the mode\n        var mode = this.ConfigService.getConfigParam('mode');\n\n        if (mode === 'preview') {\n            // we are previewing the project\n        } else {\n            // we are in a run\n\n            // get the parameters for initializing the websocket connection\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var webSocketURL = this.ConfigService.getWebSocketURL();\n            webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n            // start the websocket connection\n            this.dataStream = this.$websocket(webSocketURL);\n\n            // this is the function that handles messages we receive from web sockets\n            this.dataStream.onMessage(angular.bind(this, function(message) {\n\n                if (message != null && message.data != null) {\n\n                    var data = message.data;\n\n                    try {\n                        data = angular.fromJson(data);\n\n                        this.handleWebSocketMessageReceived(data);\n                    } catch(e) {\n\n                    }\n                }\n            }));\n        }\n    };\n\n    /**\n     * Handle the message we have received\n     * @param data the data from the message\n     */\n    handleWebSocketMessageReceived(data) {\n\n        // broadcast the data to all listeners\n        this.$rootScope.$broadcast('webSocketMessageRecieved', {data: data});\n    };\n\n    /**\n     * Send the student status to the server through websockets\n     */\n    sendStudentStatus() {\n\n        var mode = this.ConfigService.getConfigParam('mode');\n\n        if (mode !== 'preview') {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // get the node statuses\n            var nodeStatuses = this.StudentDataService.getNodeStatuses();\n\n            // get the latest node visit\n            //var latestCompletedNodeVisit = this.StudentDataService.getLatestCompletedNodeVisit();\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentStatus';\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            //messageJSON.previousNodeVisit = latestCompletedNodeVisit;\n            messageJSON.previousComponentState = latestComponentState;\n            messageJSON.nodeStatuses = nodeStatuses;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to classmates in the period\n     * @param data the data to send to the classmates\n     */\n    sendStudentToClassmatesInPeriodMessage(data) {\n        var mode = this.ConfigService.getConfigParam('mode');\n\n        if (mode !== 'preview') {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentData';\n            messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n}\n\nStudentWebSocketService.$inject = [\n    '$rootScope',\n    '$websocket',\n    'ConfigService',\n    'StudentDataService'\n];\n\nexport default StudentWebSocketService;"]}