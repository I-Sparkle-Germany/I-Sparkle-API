{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$stomp","ConfigService","StudentDataService","dataStream","isPreview","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","connect","getWebSocketURL","then","frame","console","log","greetingSubscription","subscribe","payload","headers","res","classroomSubscription","message","type","$broadcast","data","content","studentWork","studentData","JSON","parse","notificationSubscription","annotationData","AnnotationService","addOrUpdateAnnotation","annotation","annotationNotification","notificationData","teacherSubscription","send","stringify","e","messageType","handleWebSocketMessageReceived","currentNodeId","getCurrentNodeId","messageJSON","messageParticipants","$inject"],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      ConfigService,\n      StudentDataService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.ConfigService = ConfigService;\n    this.StudentDataService = StudentDataService;\n    this.dataStream = null;\n  }\n\n  initialize() {\n    if (!this.ConfigService.isPreview()) {\n      this.runId = this.ConfigService.getRunId();\n      this.periodId = this.ConfigService.getPeriodId();\n      this.workgroupId = this.ConfigService.getWorkgroupId();\n      try {\n        this.$stomp.connect(this.ConfigService.getWebSocketURL()).then((frame) => {\n          console.log(`connected! runId: ${this.runId}`);\n          const greetingSubscription = this.$stomp.subscribe(`/topic/greetings/${this.runId}`, (payload, headers, res) => {\n            console.log(`Greeting: ${payload}`);\n          }, {});\n\n          const classroomSubscription = this.$stomp.subscribe(`/topic/classroom/${this.runId}/${this.periodId}`, (message, headers, res) => {\n            if (message.type === 'pause') {\n              this.$rootScope.$broadcast('pauseScreen', {data: message.content});\n            } else if (message.type === 'unpause') {\n              this.$rootScope.$broadcast('unPauseScreen', {data: message.content});\n            } else if (message.type === 'studentWork') {\n              const studentWork = message.content;\n              studentWork.studentData = JSON.parse(studentWork.studentData);\n              this.$rootScope.$broadcast('studentWorkReceived', studentWork);\n            }\n          });\n\n          const notificationSubscription = this.$stomp.subscribe(`/topic/workgroup/${this.workgroupId}`, (message, headers, res) => {\n            if (message.type === 'notification') {\n              this.$rootScope.$broadcast('newNotification', message.content);\n            } else if (message.type === 'annotation') {\n              const annotationData = message.content;\n              this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n              this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n            } else if (message.type === 'annotationNotification') {\n              const annotationNotification = message.content;\n              const annotationData = annotationNotification.annotationData;\n              this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n              this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n              this.$rootScope.$broadcast('newNotification', annotationNotification.notificationData);\n            }\n          }, {});\n\n          const teacherSubscription = this.$stomp.subscribe(`/topic/teacher/${this.runId}/${this.periodId}`, (payload, headers, res) => {\n\n          });\n\n          /*\n          const pauseSubscription = this.$stomp.subscribe(`/topic/pause/${this.runId}/${this.periodId}`, (payload, headers, res) => {\n            console.log(`Pause: ${payload}`);\n            this.$rootScope.$broadcast('pauseScreen', {data: payload});\n          }, {});\n\n          const unPauseSubscription = this.$stomp.subscribe(`/topic/unpause/${this.runId}/${this.periodId}`, (payload, headers, res) => {\n            console.log(`UnPause: ${payload}`);\n            this.$rootScope.$broadcast('unPauseScreen', {data: payload});\n          }, {});\n\n          const studentWorkSubscription = this.$stomp.subscribe(`/topic/student-work/${this.runId}/${this.periodId}`, (studentWork, headers, res) => {\n            studentWork.studentData = JSON.parse(studentWork.studentData);\n            this.$rootScope.$broadcast('studentWorkReceived', studentWork);\n          }, {});\n\n          const notificationSubscription = this.$stomp.subscribe(`/topic/notification/${this.runId}/${this.periodId}/${this.workgroupId}`, (notification, headers, res) => {\n            this.$rootScope.$broadcast('newNotification', notification);\n          }, {});\n          */\n\n          this.$stomp.send(`/app/hello/${this.runId}`, JSON.stringify({'name': `workgroup ${this.workgroupId}`}), {});\n        });\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  }\n\n  handleWebSocketMessageReceived(data) {\n    this.$rootScope.$broadcast('webSocketMessageReceived', {data: data});\n  }\n\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n    if (messageType === 'pauseScreen') {\n      this.$rootScope.$broadcast('pauseScreen', {data: data});\n    } else if (messageType === 'unPauseScreen') {\n      this.$rootScope.$broadcast('unPauseScreen', {data: data});\n    } else if (messageType === 'notification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'annotationNotification') {\n      // a new annotation + notification combo object was sent over websocket\n\n      // save the new annotation locally\n      let annotationData = data.annotationData;\n      this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n\n      // fire the new notification\n      let notificationData = data.notificationData;\n      this.$rootScope.$broadcast('newNotification', notificationData);\n    }\n    this.handleWebSocketMessageReceived(data);\n  }\n\n  sendStudentToTeacherMessage(messageType, data) {\n    if (!this.ConfigService.isPreview()) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToTeachers';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n      this.dataStream.send(messageJSON);\n    }\n  }\n}\n\nStudentWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  'ConfigService',\n  'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}