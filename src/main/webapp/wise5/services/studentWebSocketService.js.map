{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$websocket","ConfigService","StudentDataService","dataStream","isPreview","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","onMessage","message","handleMessage","e","console","log","data","$broadcast","JSON","parse","messageType","annotationData","AnnotationService","addOrUpdateAnnotation","annotation","notificationData","handleWebSocketMessageReceived","currentNodeId","getCurrentNodeId","messageJSON","messageParticipants","send","$inject"],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n\n  constructor($rootScope,\n              $websocket,\n              ConfigService,\n              StudentDataService) {\n\n    this.$rootScope = $rootScope;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentDataService = StudentDataService;\n\n    this.dataStream = null;\n  }\n\n  /**\n   * Initialize the websocket connection\n   */\n  initialize() {\n\n    if (this.ConfigService.isPreview()) {\n      // We are previewing the project. Don't initialize websocket.\n    } else {\n      // We are in a run. Get the parameters for initializing the websocket connection\n      const runId = this.ConfigService.getRunId();\n      const periodId = this.ConfigService.getPeriodId();\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const webSocketURL = this.ConfigService.getWebSocketURL() +\n          \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n      try {\n        // start the websocket connection\n        this.dataStream = this.$websocket(webSocketURL);\n\n        // this is the function that handles messages we receive from web sockets\n        this.dataStream.onMessage((message) => {\n          this.handleMessage(message);\n        });\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  };\n\n  /**\n   * Handle the message we have received\n   * @param data the data from the message\n   */\n  handleWebSocketMessageReceived(data) {\n\n    // broadcast the data to all listeners\n    this.$rootScope.$broadcast('webSocketMessageRecieved', {data: data});\n  };\n\n  /**\n   * Handle receiving a websocket message\n   * @param message the websocket message\n   */\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n\n    if (messageType === 'pauseScreen') {\n      this.$rootScope.$broadcast('pauseScreen', {data: data});\n    } else if (messageType === 'unPauseScreen') {\n      this.$rootScope.$broadcast('unPauseScreen', {data: data});\n    } else if (messageType === 'notification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'annotationNotification') {\n      // a new annotation + notification combo object was sent over websocket\n\n      // save the new annotation locally\n      let annotationData = data.annotationData;\n      this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n\n      // fire the new notification\n      let notificationData = data.notificationData;\n      this.$rootScope.$broadcast('newNotification', notificationData);\n    }\n\n    this.handleWebSocketMessageReceived(data);\n  }\n\n  /**\n   * Send a message to teacher\n   * @param data the data to send to the teacher\n   */\n  sendStudentToTeacherMessage(messageType, data) {\n\n    if (!this.ConfigService.isPreview()) {\n      // we are in a run\n\n      // get the current node id\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n      // make the websocket message\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToTeachers';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n\n      // send the websocket message\n      this.dataStream.send(messageJSON);\n    }\n  };\n\n  /**\n   * Send a message to classmates in the period\n   * @param data the data to send to the classmates\n   */\n  sendStudentToClassmatesInPeriodMessage(messageType, data) {\n\n    if (!this.ConfigService.isPreview()) {\n      // we are in a run\n\n      // get the current node id\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n      // make the websocket message\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n\n      // send the websocket message\n      this.dataStream.send(messageJSON);\n    }\n  };\n}\n\nStudentWebSocketService.$inject = [\n  '$rootScope',\n  '$websocket',\n  'ConfigService',\n  'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}