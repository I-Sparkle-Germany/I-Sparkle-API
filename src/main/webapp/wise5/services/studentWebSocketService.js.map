{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$stomp","$websocket","ConfigService","StudentDataService","dataStream","payload","isPreview","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","connect","then","frame","subscription","subscribe","headers","res","e","console","log","data","$broadcast","message","JSON","parse","messageType","annotationData","AnnotationService","addOrUpdateAnnotation","annotation","notificationData","handleWebSocketMessageReceived","currentNodeId","getCurrentNodeId","messageJSON","messageParticipants","send","$inject"],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      $websocket,\n      ConfigService,\n      StudentDataService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentDataService = StudentDataService;\n    this.dataStream = null;\n    this.payload = null;\n  }\n\n  /**\n   * Initialize the websocket connection and listen for messages\n   */\n  initialize() {\n    if (this.ConfigService.isPreview()) {\n      // We are previewing the project. Don't initialize websocket.\n    } else {\n      const runId = this.ConfigService.getRunId();\n      const periodId = this.ConfigService.getPeriodId();\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const webSocketURL = this.ConfigService.getWebSocketURL() + '/hello';\n          //\"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n\n      try {\n        this.$stomp.connect(webSocketURL).then((frame) => {\n          const subscription = this.$stomp.subscribe('/dest', function (payload, headers, res) {\n            this.payload = payload;\n          }, {\n            'headers': 'are awesome'\n          });\n        });\n        //this.dataStream = this.$websocket(webSocketURL);\n        //this.dataStream.onMessage((message) => {\n        //  this.handleMessage(message);\n        //});\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  };\n\n  /**\n   * Handle the message we have received\n   * @param data the data from the message\n   */\n  handleWebSocketMessageReceived(data) {\n    this.$rootScope.$broadcast('webSocketMessageReceived', {data: data});\n  };\n\n  /**\n   * Handle receiving a websocket message\n   * @param message the websocket message\n   */\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n\n    if (messageType === 'pauseScreen') {\n      this.$rootScope.$broadcast('pauseScreen', {data: data});\n    } else if (messageType === 'unPauseScreen') {\n      this.$rootScope.$broadcast('unPauseScreen', {data: data});\n    } else if (messageType === 'notification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'annotationNotification') {\n      // a new annotation + notification combo object was sent over websocket\n\n      // save the new annotation locally\n      let annotationData = data.annotationData;\n      this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n\n      // fire the new notification\n      let notificationData = data.notificationData;\n      this.$rootScope.$broadcast('newNotification', notificationData);\n    }\n    this.handleWebSocketMessageReceived(data);\n  }\n\n  /**\n   * Send a message to teacher\n   * @param data the data to send to the teacher\n   */\n  sendStudentToTeacherMessage(messageType, data) {\n    if (!this.ConfigService.isPreview()) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToTeachers';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n      this.dataStream.send(messageJSON);\n    }\n  };\n\n  /**\n   * Send a message to classmates in the period\n   * @param data the data to send to the classmates\n   */\n  sendStudentToClassmatesInPeriodMessage(messageType, data) {\n    if (!this.ConfigService.isPreview()) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n      this.dataStream.send(messageJSON);\n    }\n  };\n}\n\nStudentWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService',\n  'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}