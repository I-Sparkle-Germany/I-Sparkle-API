{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$stomp","$websocket","ConfigService","StudentDataService","dataStream","isPreview","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","connect","then","frame","console","log","greetingSubscription","subscribe","payload","headers","res","pauseSubscription","$broadcast","data","unPauseSubscription","send","JSON","stringify","priority","custom","e","message","parse","messageType","annotationData","AnnotationService","addOrUpdateAnnotation","annotation","notificationData","handleWebSocketMessageReceived","currentNodeId","getCurrentNodeId","messageJSON","messageParticipants","$inject"],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      $websocket,\n      ConfigService,\n      StudentDataService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentDataService = StudentDataService;\n    this.dataStream = null;\n  }\n\n  initialize() {\n    if (!this.ConfigService.isPreview()) {\n      const runId = this.ConfigService.getRunId();\n      const periodId = this.ConfigService.getPeriodId();\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const webSocketURL = this.ConfigService.getWebSocketURL();\n      try {\n        this.$stomp.connect(webSocketURL).then((frame) => {\n          console.log(`connected! runId: ${runId}`);\n          const greetingSubscription = this.$stomp.subscribe(`/topic/greetings/${runId}`, (payload, headers, res) => {\n            console.log(`Greeting: ${payload}`);\n          }, {\n          });\n\n          const pauseSubscription = this.$stomp.subscribe(`/topic/pause/${runId}/${periodId}`, (payload, headers, res) => {\n            console.log(`Pause: ${payload}`);\n            this.$rootScope.$broadcast('pauseScreen', {data: payload});\n          }, {\n          });\n\n          const unPauseSubscription = this.$stomp.subscribe(`/topic/unpause/${runId}/${periodId}`, (payload, headers, res) => {\n            console.log(`UnPause: ${payload}`);\n            this.$rootScope.$broadcast('unPauseScreen', {data: payload});\n          }, {\n          });\n\n          this.$stomp.send(`/app/hello/${runId}`, JSON.stringify({'name': `workgroup ${workgroupId}`}), { priority: 9, custom: 42 });\n\n        });\n        //this.dataStream = this.$websocket(webSocketURL);\n        //this.dataStream.onMessage((message) => {\n        //  this.handleMessage(message);\n        //});\n      } catch(e) {\n        console.log(e);\n      }\n    }\n  }\n\n  /**\n   * Handle the message we have received\n   * @param data the data from the message\n   */\n  handleWebSocketMessageReceived(data) {\n    this.$rootScope.$broadcast('webSocketMessageReceived', {data: data});\n  }\n\n  /**\n   * Handle receiving a websocket message\n   * @param message the websocket message\n   */\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n    if (messageType === 'pauseScreen') {\n      this.$rootScope.$broadcast('pauseScreen', {data: data});\n    } else if (messageType === 'unPauseScreen') {\n      this.$rootScope.$broadcast('unPauseScreen', {data: data});\n    } else if (messageType === 'notification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'annotationNotification') {\n      // a new annotation + notification combo object was sent over websocket\n\n      // save the new annotation locally\n      let annotationData = data.annotationData;\n      this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n\n      // fire the new notification\n      let notificationData = data.notificationData;\n      this.$rootScope.$broadcast('newNotification', notificationData);\n    }\n    this.handleWebSocketMessageReceived(data);\n  }\n\n  /**\n   * Send a message to teacher\n   * @param data the data to send to the teacher\n   */\n  sendStudentToTeacherMessage(messageType, data) {\n    if (!this.ConfigService.isPreview()) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToTeachers';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n      this.dataStream.send(messageJSON);\n    }\n  }\n\n  /**\n   * Send a message to classmates in the period\n   * @param data the data to send to the classmates\n   */\n  sendStudentToClassmatesInPeriodMessage(messageType, data) {\n    if (!this.ConfigService.isPreview()) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const messageJSON = {};\n      messageJSON.messageType = messageType;\n      messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n      messageJSON.currentNodeId = currentNodeId;\n      messageJSON.data = data;\n      this.dataStream.send(messageJSON);\n    }\n  }\n}\n\nStudentWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService',\n  'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}