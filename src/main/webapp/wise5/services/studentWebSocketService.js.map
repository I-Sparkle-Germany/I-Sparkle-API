{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$websocket","ConfigService","StudentDataService","dataStream","isPreview","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","onMessage","message","handleMessage","e","console","log","data","$broadcast","JSON","parse","messageType","annotationData","AnnotationService","addOrUpdateAnnotation","notificationData","handleWebSocketMessageReceived","currentNodeId","getCurrentNodeId","nodeStatuses","getNodeStatuses","latestComponentState","getLatestComponentState","projectCompletion","getProjectCompletion","messageJSON","messageParticipants","previousComponentState","send","$inject"],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n\n    constructor($rootScope,\n                $websocket,\n                ConfigService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentDataService = StudentDataService;\n\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize() {\n\n        if (this.ConfigService.isPreview()) {\n            // We are previewing the project. Don't initialize websocket.\n        } else {\n            // We are in a run. Get the parameters for initializing the websocket connection\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var webSocketURL = this.ConfigService.getWebSocketURL();\n            webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n            try {\n                // start the websocket connection\n                this.dataStream = this.$websocket(webSocketURL);\n\n                // this is the function that handles messages we receive from web sockets\n                this.dataStream.onMessage((message) => {\n                    this.handleMessage(message);\n                });\n            } catch(e) {\n                console.log(e);\n            }\n        }\n    };\n\n    /**\n     * Handle the message we have received\n     * @param data the data from the message\n     */\n    handleWebSocketMessageReceived(data) {\n\n        // broadcast the data to all listeners\n        this.$rootScope.$broadcast('webSocketMessageRecieved', {data: data});\n    };\n\n    /**\n     * Handle receiving a websocket message\n     * @param message the websocket message\n     */\n    handleMessage(message) {\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'pauseScreen') {\n            this.$rootScope.$broadcast('pauseScreen', {data: data});\n        } else if (messageType === 'unPauseScreen') {\n            this.$rootScope.$broadcast('unPauseScreen', {data: data});\n        } else if (messageType === 'notification') {\n            this.$rootScope.$broadcast('newNotification', data.data);\n        } else if (messageType === 'annotationNotification') {\n            // a new annotation + notification combo object was sent over websocket\n            \n            // save the new annotation locally\n            let annotationData = data.annotationData;\n            this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n\n            // fire the new notification\n            let notificationData = data.notificationData;\n            this.$rootScope.$broadcast('newNotification', notificationData);\n        }\n\n        this.handleWebSocketMessageReceived(data);\n    }\n\n    /**\n     * Send the student status to the server through websockets\n     */\n    sendStudentStatus() {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // get the node statuses\n            var nodeStatuses = this.StudentDataService.getNodeStatuses();\n\n            // get the latest component state\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            // get the project completion percentage\n            var projectCompletion = this.StudentDataService.getProjectCompletion();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentStatus';\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.previousComponentState = latestComponentState;\n            messageJSON.nodeStatuses = nodeStatuses;\n            messageJSON.projectCompletion = projectCompletion;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to teacher\n     * @param data the data to send to the teacher\n     */\n    sendStudentToTeacherMessage(messageType, data) {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = messageType;\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to classmates in the period\n     * @param data the data to send to the classmates\n     */\n    sendStudentToClassmatesInPeriodMessage(messageType, data) {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = messageType;\n            messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n}\n\nStudentWebSocketService.$inject = [\n    '$rootScope',\n    '$websocket',\n    'ConfigService',\n    'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}