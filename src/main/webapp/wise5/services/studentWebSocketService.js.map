{"version":3,"sources":["studentWebSocketService.es6"],"names":["StudentWebSocketService","$rootScope","$stomp","AnnotationService","ConfigService","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","connect","getWebSocketURL","then","frame","subscribeToClassroomTopic","subscribeToWorkgroupTopic","e","console","log","subscribe","message","headers","res","type","$broadcast","data","content","studentWork","studentData","JSON","parse","notification","annotationData","addOrUpdateAnnotation","annotation","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,uB;AACJ,mCACIC,UADJ,EAEIC,MAFJ,EAGIC,iBAHJ,EAIIC,aAJJ,EAImB;AAAA;;AACjB,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACD;;;;iCAEY;AAAA;;AACX,WAAKC,KAAL,GAAa,KAAKD,aAAL,CAAmBE,QAAnB,EAAb;AACA,WAAKC,QAAL,GAAgB,KAAKH,aAAL,CAAmBI,WAAnB,EAAhB;AACA,WAAKC,WAAL,GAAmB,KAAKL,aAAL,CAAmBM,cAAnB,EAAnB;AACA,UAAI;AACF,aAAKR,MAAL,CAAYS,OAAZ,CAAoB,KAAKP,aAAL,CAAmBQ,eAAnB,EAApB,EAA0DC,IAA1D,CAA+D,UAACC,KAAD,EAAW;AACxE,gBAAKC,yBAAL;AACA,gBAAKC,yBAAL;AACD,SAHD;AAID,OALD,CAKE,OAAMC,CAAN,EAAS;AACTC,gBAAQC,GAAR,CAAYF,CAAZ;AACD;AACF;;;gDAE2B;AAAA;;AAC1B,WAAKf,MAAL,CAAYkB,SAAZ,uBAA0C,KAAKf,KAA/C,SAAwD,KAAKE,QAA7D,EAAyE,UAACc,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AAClG,YAAIF,QAAQG,IAAR,KAAiB,OAArB,EAA8B;AAC5B,iBAAKvB,UAAL,CAAgBwB,UAAhB,CAA2B,aAA3B,EAA0C,EAACC,MAAML,QAAQM,OAAf,EAA1C;AACD,SAFD,MAEO,IAAIN,QAAQG,IAAR,KAAiB,SAArB,EAAgC;AACrC,iBAAKvB,UAAL,CAAgBwB,UAAhB,CAA2B,eAA3B,EAA4C,EAACC,MAAML,QAAQM,OAAf,EAA5C;AACD,SAFM,MAEA,IAAIN,QAAQG,IAAR,KAAiB,aAArB,EAAoC;AACzC,cAAMI,cAAcP,QAAQM,OAA5B;AACAC,sBAAYC,WAAZ,GAA0BC,KAAKC,KAAL,CAAWH,YAAYC,WAAvB,CAA1B;AACA,iBAAK5B,UAAL,CAAgBwB,UAAhB,CAA2B,qBAA3B,EAAkDG,WAAlD;AACD;AACF,OAVD;AAWD;;;gDAE2B;AAAA;;AAC1B,WAAK1B,MAAL,CAAYkB,SAAZ,uBAA0C,KAAKX,WAA/C,EAA8D,UAACY,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AACvF,YAAIF,QAAQG,IAAR,KAAiB,cAArB,EAAqC;AACnC,cAAMQ,eAAeX,QAAQM,OAA7B;AACAK,uBAAaN,IAAb,GAAoBI,KAAKC,KAAL,CAAWC,aAAaN,IAAxB,CAApB;AACA,iBAAKzB,UAAL,CAAgBwB,UAAhB,CAA2B,yBAA3B,EAAsDO,YAAtD;AACD,SAJD,MAIO,IAAIX,QAAQG,IAAR,KAAiB,YAArB,EAAmC;AACxC,cAAMS,iBAAiBZ,QAAQM,OAA/B;AACAM,yBAAeP,IAAf,GAAsBI,KAAKC,KAAL,CAAWE,eAAeP,IAA1B,CAAtB;AACA,iBAAKvB,iBAAL,CAAuB+B,qBAAvB,CAA6CD,cAA7C;AACA,iBAAKhC,UAAL,CAAgBwB,UAAhB,CAA2B,uBAA3B,EAAoD,EAACU,YAAYF,cAAb,EAApD;AACD;AACF,OAXD;AAYD;;;;;;AAGHjC,wBAAwBoC,OAAxB,GAAkC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,mBAHgC,EAIhC,eAJgC,CAAlC;;kBAOepC,uB","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      AnnotationService,\n      ConfigService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n  }\n\n  initialize() {\n    this.runId = this.ConfigService.getRunId();\n    this.periodId = this.ConfigService.getPeriodId();\n    this.workgroupId = this.ConfigService.getWorkgroupId();\n    try {\n      this.$stomp.connect(this.ConfigService.getWebSocketURL()).then((frame) => {\n        this.subscribeToClassroomTopic();\n        this.subscribeToWorkgroupTopic();\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  subscribeToClassroomTopic() {\n    this.$stomp.subscribe(`/topic/classroom/${this.runId}/${this.periodId}`, (message, headers, res) => {\n      if (message.type === 'pause') {\n        this.$rootScope.$broadcast('pauseScreen', {data: message.content});\n      } else if (message.type === 'unpause') {\n        this.$rootScope.$broadcast('unPauseScreen', {data: message.content});\n      } else if (message.type === 'studentWork') {\n        const studentWork = message.content;\n        studentWork.studentData = JSON.parse(studentWork.studentData);\n        this.$rootScope.$broadcast('studentWorkReceived', studentWork);\n      }\n    });\n  }\n\n  subscribeToWorkgroupTopic() {\n    this.$stomp.subscribe(`/topic/workgroup/${this.workgroupId}`, (message, headers, res) => {\n      if (message.type === 'notification') {\n        const notification = message.content;\n        notification.data = JSON.parse(notification.data);\n        this.$rootScope.$broadcast('newNotificationReceived', notification);\n      } else if (message.type === 'annotation') {\n        const annotationData = message.content;\n        annotationData.data = JSON.parse(annotationData.data);\n        this.AnnotationService.addOrUpdateAnnotation(annotationData);\n        this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n      }\n    });\n  }\n}\n\nStudentWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  'AnnotationService',\n  'ConfigService'\n];\n\nexport default StudentWebSocketService;\n"]}