{"version":3,"sources":["studentWebSocketService.es6"],"names":[],"mappings":"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","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n\n    constructor($rootScope,\n                $websocket,\n                ConfigService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentDataService = StudentDataService;\n\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize() {\n\n        if (this.ConfigService.isPreview()) {\n            // We are previewing the project. Don't initialize websocket.\n        } else {\n            // We are in a run. Get the parameters for initializing the websocket connection\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var webSocketURL = this.ConfigService.getWebSocketURL();\n            webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n            // start the websocket connection\n            this.dataStream = this.$websocket(webSocketURL);\n\n            // this is the function that handles messages we receive from web sockets\n            this.dataStream.onMessage(angular.bind(this, function(message) {\n                this.handleMessage(message);\n            }));\n        }\n    };\n\n    /**\n     * Handle the message we have received\n     * @param data the data from the message\n     */\n    handleWebSocketMessageReceived(data) {\n\n        // broadcast the data to all listeners\n        this.$rootScope.$broadcast('webSocketMessageRecieved', {data: data});\n    };\n\n    /**\n     * Handle receiving a websocket message\n     * @param message the websocket message\n     */\n    handleMessage(message) {\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'pauseScreen') {\n            this.$rootScope.$broadcast('pauseScreen', {data: data});\n        } else if (messageType === 'unPauseScreen') {\n            this.$rootScope.$broadcast('unPauseScreen', {data: data});\n        }\n\n        this.handleWebSocketMessageReceived(data);\n    }\n\n    /**\n     * Send the student status to the server through websockets\n     */\n    sendStudentStatus() {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // get the node statuses\n            var nodeStatuses = this.StudentDataService.getNodeStatuses();\n\n            // get the latest component state\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            // get the project completion percentage\n            var projectCompletion = this.StudentDataService.getProjectCompletion();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentStatus';\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.previousComponentState = latestComponentState;\n            messageJSON.nodeStatuses = nodeStatuses;\n            messageJSON.projectCompletion = projectCompletion;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to classmates in the period\n     * @param data the data to send to the classmates\n     */\n    sendStudentToClassmatesInPeriodMessage(data) {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentData';\n            messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n}\n\nStudentWebSocketService.$inject = [\n    '$rootScope',\n    '$websocket',\n    'ConfigService',\n    'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}