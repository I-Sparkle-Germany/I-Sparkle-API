{"version":3,"sources":["studentWebSocketService.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,uB;AAEF,qCAAY,UAAZ,EACY,UADZ,EAEY,aAFZ,EAGY,kBAHZ,EAGgC;AAAA;;AAE5B,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,kBAAL,GAA0B,kBAA1B;;AAEA,aAAK,UAAL,GAAkB,IAAlB;AACH;;AAED;;;;;;;qCAGa;AAAA;;AAET,gBAAI,KAAK,aAAL,CAAmB,SAAnB,EAAJ,EAAoC;AAChC;AACH,aAFD,MAEO;AACH;AACA,oBAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,EAAZ;AACA,oBAAI,WAAW,KAAK,aAAL,CAAmB,WAAnB,EAAf;AACA,oBAAI,cAAc,KAAK,aAAL,CAAmB,cAAnB,EAAlB;AACA,oBAAI,eAAe,KAAK,aAAL,CAAmB,eAAnB,EAAnB;AACA,gCAAgB,YAAY,KAAZ,GAAoB,YAApB,GAAmC,QAAnC,GAA8C,eAA9C,GAAgE,WAAhF;;AAEA,oBAAI;AACA;AACA,yBAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,YAAhB,CAAlB;;AAEA;AACA,yBAAK,UAAL,CAAgB,SAAhB,CAA0B,UAAC,OAAD,EAAa;AACnC,8BAAK,aAAL,CAAmB,OAAnB;AACH,qBAFD;AAGH,iBARD,CAQE,OAAM,CAAN,EAAS;AACP,4BAAQ,GAAR,CAAY,CAAZ;AACH;AACJ;AACJ;;;;;AAED;;;;uDAI+B,I,EAAM;;AAEjC;AACA,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,0BAA3B,EAAuD,EAAC,MAAM,IAAP,EAAvD;AACH;;;;;AAED;;;;sCAIc,O,EAAS;AACnB,gBAAI,OAAO,KAAK,KAAL,CAAW,QAAQ,IAAnB,CAAX;AACA,gBAAI,cAAc,KAAK,WAAvB;;AAEA,gBAAI,gBAAgB,aAApB,EAAmC;AAC/B,qBAAK,UAAL,CAAgB,UAAhB,CAA2B,aAA3B,EAA0C,EAAC,MAAM,IAAP,EAA1C;AACH,aAFD,MAEO,IAAI,gBAAgB,eAApB,EAAqC;AACxC,qBAAK,UAAL,CAAgB,UAAhB,CAA2B,eAA3B,EAA4C,EAAC,MAAM,IAAP,EAA5C;AACH,aAFM,MAEA,IAAI,gBAAgB,cAApB,EAAoC;AACvC,qBAAK,UAAL,CAAgB,UAAhB,CAA2B,iBAA3B,EAA8C,KAAK,IAAnD;AACH,aAFM,MAEA,IAAI,gBAAgB,wBAApB,EAA8C;AACjD;;AAEA;AACA,oBAAI,iBAAiB,KAAK,cAA1B;AACA,qBAAK,kBAAL,CAAwB,iBAAxB,CAA0C,qBAA1C,CAAgE,cAAhE;;AAEA;AACA,oBAAI,mBAAmB,KAAK,gBAA5B;AACA,qBAAK,UAAL,CAAgB,UAAhB,CAA2B,iBAA3B,EAA8C,gBAA9C;AACH;;AAED,iBAAK,8BAAL,CAAoC,IAApC;AACH;;AAED;;;;;;4CAGoB;;AAEhB,gBAAI,CAAC,KAAK,aAAL,CAAmB,SAAnB,EAAL,EAAqC;AACjC;;AAEA;AACA,oBAAI,gBAAgB,KAAK,kBAAL,CAAwB,gBAAxB,EAApB;;AAEA;AACA,oBAAI,eAAe,KAAK,kBAAL,CAAwB,eAAxB,EAAnB;;AAEA;AACA,oBAAI,uBAAuB,KAAK,kBAAL,CAAwB,uBAAxB,EAA3B;;AAEA;AACA,oBAAI,oBAAoB,KAAK,kBAAL,CAAwB,oBAAxB,EAAxB;;AAEA;AACA,oBAAI,cAAc,EAAlB;AACA,4BAAY,WAAZ,GAA0B,eAA1B;AACA,4BAAY,mBAAZ,GAAkC,mBAAlC;AACA,4BAAY,aAAZ,GAA4B,aAA5B;AACA,4BAAY,sBAAZ,GAAqC,oBAArC;AACA,4BAAY,YAAZ,GAA2B,YAA3B;AACA,4BAAY,iBAAZ,GAAgC,iBAAhC;;AAEA;AACA,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,WAArB;AACH;AACJ;;;;;AAED;;;;oDAI4B,W,EAAa,I,EAAM;;AAE3C,gBAAI,CAAC,KAAK,aAAL,CAAmB,SAAnB,EAAL,EAAqC;AACjC;;AAEA;AACA,oBAAI,gBAAgB,KAAK,kBAAL,CAAwB,gBAAxB,EAApB;;AAEA;AACA,oBAAI,cAAc,EAAlB;AACA,4BAAY,WAAZ,GAA0B,WAA1B;AACA,4BAAY,mBAAZ,GAAkC,mBAAlC;AACA,4BAAY,aAAZ,GAA4B,aAA5B;AACA,4BAAY,IAAZ,GAAmB,IAAnB;;AAEA;AACA,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,WAArB;AACH;AACJ;;;;;AAED;;;;+DAIuC,W,EAAa,I,EAAM;;AAEtD,gBAAI,CAAC,KAAK,aAAL,CAAmB,SAAnB,EAAL,EAAqC;AACjC;;AAEA;AACA,oBAAI,gBAAgB,KAAK,kBAAL,CAAwB,gBAAxB,EAApB;;AAEA;AACA,oBAAI,cAAc,EAAlB;AACA,4BAAY,WAAZ,GAA0B,WAA1B;AACA,4BAAY,mBAAZ,GAAkC,6BAAlC;AACA,4BAAY,aAAZ,GAA4B,aAA5B;AACA,4BAAY,IAAZ,GAAmB,IAAnB;;AAEA;AACA,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,WAArB;AACH;AACJ;;;;;;AAGL,wBAAwB,OAAxB,GAAkC,CAC9B,YAD8B,EAE9B,YAF8B,EAG9B,eAH8B,EAI9B,oBAJ8B,CAAlC;;kBAOe,uB","file":"studentWebSocketService.js","sourcesContent":["'use strict';\n\nclass StudentWebSocketService {\n\n    constructor($rootScope,\n                $websocket,\n                ConfigService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentDataService = StudentDataService;\n\n        this.dataStream = null;\n    }\n\n    /**\n     * Initialize the websocket connection\n     */\n    initialize() {\n\n        if (this.ConfigService.isPreview()) {\n            // We are previewing the project. Don't initialize websocket.\n        } else {\n            // We are in a run. Get the parameters for initializing the websocket connection\n            var runId = this.ConfigService.getRunId();\n            var periodId = this.ConfigService.getPeriodId();\n            var workgroupId = this.ConfigService.getWorkgroupId();\n            var webSocketURL = this.ConfigService.getWebSocketURL();\n            webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n\n            try {\n                // start the websocket connection\n                this.dataStream = this.$websocket(webSocketURL);\n\n                // this is the function that handles messages we receive from web sockets\n                this.dataStream.onMessage((message) => {\n                    this.handleMessage(message);\n                });\n            } catch(e) {\n                console.log(e);\n            }\n        }\n    };\n\n    /**\n     * Handle the message we have received\n     * @param data the data from the message\n     */\n    handleWebSocketMessageReceived(data) {\n\n        // broadcast the data to all listeners\n        this.$rootScope.$broadcast('webSocketMessageRecieved', {data: data});\n    };\n\n    /**\n     * Handle receiving a websocket message\n     * @param message the websocket message\n     */\n    handleMessage(message) {\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'pauseScreen') {\n            this.$rootScope.$broadcast('pauseScreen', {data: data});\n        } else if (messageType === 'unPauseScreen') {\n            this.$rootScope.$broadcast('unPauseScreen', {data: data});\n        } else if (messageType === 'notification') {\n            this.$rootScope.$broadcast('newNotification', data.data);\n        } else if (messageType === 'annotationNotification') {\n            // a new annotation + notification combo object was sent over websocket\n            \n            // save the new annotation locally\n            let annotationData = data.annotationData;\n            this.StudentDataService.AnnotationService.addOrUpdateAnnotation(annotationData);\n\n            // fire the new notification\n            let notificationData = data.notificationData;\n            this.$rootScope.$broadcast('newNotification', notificationData);\n        }\n\n        this.handleWebSocketMessageReceived(data);\n    }\n\n    /**\n     * Send the student status to the server through websockets\n     */\n    sendStudentStatus() {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // get the node statuses\n            var nodeStatuses = this.StudentDataService.getNodeStatuses();\n\n            // get the latest component state\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            // get the project completion percentage\n            var projectCompletion = this.StudentDataService.getProjectCompletion();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = 'studentStatus';\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.previousComponentState = latestComponentState;\n            messageJSON.nodeStatuses = nodeStatuses;\n            messageJSON.projectCompletion = projectCompletion;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to teacher\n     * @param data the data to send to the teacher\n     */\n    sendStudentToTeacherMessage(messageType, data) {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = messageType;\n            messageJSON.messageParticipants = 'studentToTeachers';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n\n    /**\n     * Send a message to classmates in the period\n     * @param data the data to send to the classmates\n     */\n    sendStudentToClassmatesInPeriodMessage(messageType, data) {\n\n        if (!this.ConfigService.isPreview()) {\n            // we are in a run\n\n            // get the current node id\n            var currentNodeId = this.StudentDataService.getCurrentNodeId();\n\n            // make the websocket message\n            var messageJSON = {};\n            messageJSON.messageType = messageType;\n            messageJSON.messageParticipants = 'studentToClassmatesInPeriod';\n            messageJSON.currentNodeId = currentNodeId;\n            messageJSON.data = data;\n\n            // send the websocket message\n            this.dataStream.send(messageJSON);\n        }\n    };\n}\n\nStudentWebSocketService.$inject = [\n    '$rootScope',\n    '$websocket',\n    'ConfigService',\n    'StudentDataService'\n];\n\nexport default StudentWebSocketService;\n"]}