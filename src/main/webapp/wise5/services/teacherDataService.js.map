{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$filter","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","UtilService","$translate","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentWorkgroup","currentStep","currentNode","previousStep","runStatus","periods","nodeGradingSort","studentGradingSort","studentProgressSort","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","selectedNodes","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getAnnotations","getEvents","components","retrieveStudentData","httpParams","method","url","then","result","data","window","location","href","deferred","defer","promise","resolve","context","componentId","componentType","category","projectId","newEvent","getProjectId","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","concat","periodId","studentDataURL","resultData","studentWorkList","componentStates","componentState","sort","sortByServerSaveTime","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","length","cs","id","componentStateNodeId","n","c","runStatusURL","initializePeriods","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","componentStatesForWorkgroup","getComponentStatesByWorkgroupId","componentRevisionCounter","componentsFound","key","revisionCounter","csb","reverse","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","eventType","e","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","mergedPeriods","runStatusPeriods","period","runStatusPeriod","tempRunStatusPeriod","setCurrentPeriod","previousPeriod","getCurrentWorkgroup","workgroupPeriod","setCurrentWorkgroup","workgroup","step","currentNodeId","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","saveEvent","value","createRunStatus","allPeriodsPaused","l","x","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n  constructor(\n      $http,\n      $filter,\n      $q,\n      $rootScope,\n      AnnotationService,\n      ConfigService,\n      NotificationService,\n      ProjectService,\n      TeacherWebSocketService,\n      UtilService) {\n    this.$http = $http;\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NotificationService = NotificationService;\n    this.ProjectService = ProjectService;\n    this.TeacherWebSocketService = TeacherWebSocketService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.studentData = {\n      componentStatesByWorkgroupId: {},\n      componentStatesByNodeId: {},\n      componentStatesByComponentId: {}\n    };\n\n    this.currentPeriod = null;\n    this.currentWorkgroup = null;\n    this.currentStep = null;\n    this.currentNode = null;\n    this.previousStep = null;\n    this.runStatus = null;\n    this.periods = [];\n    this.nodeGradingSort = 'team';\n    this.studentGradingSort = 'step';\n    this.studentProgressSort = 'team';\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n      if (args) {\n        // get the annotation that was saved to the server\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    /**\n     * Listen for the 'newAnnotationReceived' event which is fired when\n     * teacher receives a new annotation (usually on a student work) from the server\n     */\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n      if (args) {\n        // get the annotation that was saved to the server\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    /**\n     * Listen for the 'newStudentWorkReceived' event which is fired when\n     * teacher receives a new student work from the server\n     */\n    this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\n      if (args) {\n        // get the student work (component state) that was saved to the server\n        let studentWork = args.studentWork;\n        this.addOrUpdateComponentState(studentWork);\n        // broadcast the event that a new work has been received\n        this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\n      }\n    });\n  }\n\n  handleAnnotationReceived(annotation) {\n    // add the annotation to the local annotations array\n    this.studentData.annotations.push(annotation);\n\n    let toWorkgroupId = annotation.toWorkgroupId;\n    if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n      this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n    }\n    this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n    let nodeId = annotation.nodeId;\n    if (this.studentData.annotationsByNodeId[nodeId] == null) {\n      this.studentData.annotationsByNodeId[nodeId] = new Array();\n    }\n    this.studentData.annotationsByNodeId[nodeId].push(annotation);\n\n    this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n    // broadcast the event that a new annotation has been received\n    this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n  }\n\n  /**\n   * Get the data for the export and generate the csv file that will be downloaded\n   * @param exportType the type of export\n   */\n  getExport(exportType, selectedNodes) {\n    let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n    let runId = this.ConfigService.getRunId();\n    exportURL += \"/\" + runId + \"/\" + exportType;\n\n    if (exportType === \"allStudentWork\" || exportType === \"latestStudentWork\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = false;\n      params.components = selectedNodes;\n\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"events\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = false;\n      params.getAnnotations = false;\n      params.getEvents = true;\n      params.components = selectedNodes;\n\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n      let httpParams = {\n        method : 'GET',\n        url : exportURL,\n        params : {}\n      };\n\n      return this.$http(httpParams).then((result) => {\n        return result.data;\n      });\n    } else if (exportType === \"notifications\") {\n      let httpParams = {\n        method : 'GET',\n        url : exportURL,\n        params : {}\n      };\n\n      return this.$http(httpParams).then((result) => {\n        return result.data;\n      });\n    } else if (exportType === \"studentAssets\") {\n      window.location.href = exportURL;\n      let deferred = this.$q.defer();\n      let promise = deferred.promise;\n      deferred.resolve([]);\n      return promise;\n    } else if (exportType === \"oneWorkgroupPerRow\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = true;\n      params.components = selectedNodes;\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"rawData\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = true;\n      params.components = selectedNodes;\n      return this.retrieveStudentData(params);\n    }\n  }\n\n  /**\n   * Retrieves the export given the export Type\n   * @param exportType\n   */\n  getExport0(exportType) {\n    let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n    let runId = this.ConfigService.getRunId();\n    exportURL += \"/\" + runId + \"/\" + exportType;\n\n    if (exportType === \"studentAssets\") {\n      window.location.href = exportURL;\n      let deferred = this.$q.defer();\n      let promise = deferred.promise;\n      deferred.resolve([]);\n      return promise;\n    } else {\n      let httpParams = {\n        method : 'GET',\n        url : exportURL,\n        params : {}\n      };\n\n      return this.$http(httpParams).then((result) => {\n        return result.data;\n      });\n    }\n  };\n\n  /**\n   * Save events that occur in the Classroom Monitor to the server\n   * @param event the event object\n   * @returns a promise\n   */\n  saveEvent(context, nodeId, componentId, componentType, category, event, data, projectId) {\n    let newEvent = {\n      projectId : this.ConfigService.getProjectId(),\n      runId : this.ConfigService.getRunId(),\n      workgroupId : this.ConfigService.getWorkgroupId(),\n      clientSaveTime : Date.parse(new Date()),\n      context : context,\n      nodeId : nodeId,\n      componentId : componentId,\n      type : componentType,\n      category : category,\n      event : event,\n      data : data\n    };\n\n    if (newEvent.projectId == null) {\n      newEvent.projectId = projectId;\n    }\n\n    let events = [newEvent];\n\n    let params = {\n      projectId : this.ConfigService.getProjectId(),\n      runId : this.ConfigService.getRunId(),\n      workgroupId : this.ConfigService.getWorkgroupId(),\n      events : angular.toJson(events)\n    };\n\n    if (params.projectId == null) {\n      params.projectId = projectId;\n    }\n\n    let httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      let savedEvents = null;\n      if (result != null && result.data != null) {\n        let data = result.data;\n        if (data != null) {\n          // get the saved events\n          savedEvents = data.events;\n        }\n      }\n      return savedEvents;\n    });\n  };\n\n  /**\n   * Retrieve the student data for a node id\n   * @param nodeId the node id\n   * @returns the student data for the node id\n   */\n  retrieveStudentDataByNodeId(nodeId) {\n    // get the node ids and component ids in the node\n    const nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n    // get the show previous work node ids and component ids in the node\n    const showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n    let components = [];\n    components = components.concat(nodeIdsAndComponentIds);\n    components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n    const params = {};\n    //params.periodId = periodId;\n    params.periodId = null;\n    params.workgroupId = null;\n    params.components = components;\n    params.getAnnotations = false;\n    params.getEvents = false;\n    //params.event = 'nodeEntered';\n\n    return this.retrieveStudentData(params);\n  };\n\n  /**\n   * Retrieve the student data for the workgroup id\n   * @param workgroupId the workgroup id\n   * @returns the student data for the workgroup id\n   */\n  retrieveStudentDataByWorkgroupId(workgroupId) {\n    const params = {};\n    params.periodId = null;\n    params.nodeId = null;\n    params.workgroupId = workgroupId;\n    params.toWorkgroupId = workgroupId;\n    params.getAnnotations = false;\n    return this.retrieveStudentData(params);\n  };\n\n  /**\n   * Retrieve the annotations for the run\n   * @returns the annotations for the run\n   */\n  retrieveAnnotations() {\n    let params = {};\n    params.periodId = null;\n    params.nodeId = null;\n    params.workgroupId = null;\n    params.toWorkgroupId = null;\n    params.getStudentWork = false;\n    params.getEvents = false;\n    params.getAnnotations = true;\n    return this.retrieveStudentData(params);\n  };\n\n  /**\n   * Retrieve the student data\n   * @param params the params that specify what student data we want\n   * @returns a promise\n   */\n  retrieveStudentData(params) {\n    let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n    params.runId = this.ConfigService.getRunId();\n\n    if (params.getStudentWork == null) {\n      params.getStudentWork = true;\n    }\n\n    if (params.getEvents == null) {\n      params.getEvents = false;\n    }\n\n    if (params.getAnnotations == null) {\n      params.getAnnotations = true;\n    }\n\n    let httpParams = {\n      \"method\": \"GET\",\n      \"url\": studentDataURL,\n      \"params\": params\n    };\n\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null) {\n        if (resultData.studentWorkList != null) {\n          const componentStates = resultData.studentWorkList;\n\n          // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\n          for (let componentState of componentStates) {\n            this.addOrUpdateComponentState(componentState);\n          }\n        }\n\n        if (resultData.events != null) {\n          // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n\n          // sort the events by server save time\n          resultData.events.sort(this.UtilService.sortByServerSaveTime);\n\n          this.studentData.allEvents = resultData.events;\n          this.studentData.eventsByWorkgroupId = {};\n          this.studentData.eventsByNodeId = {};\n          for (let event of resultData.events) {\n            const eventWorkgroupId = event.workgroupId;\n            if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n              this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n            }\n            this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n            const eventNodeId = event.nodeId;\n            if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n              this.studentData.eventsByNodeId[eventNodeId] = new Array();\n            }\n            this.studentData.eventsByNodeId[eventNodeId].push(event);\n          }\n        }\n\n        if (resultData.annotations != null) {\n          // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n          this.studentData.annotations = resultData.annotations;\n          this.studentData.annotationsToWorkgroupId = {};\n          this.studentData.annotationsByNodeId = {};\n          for (let annotation of resultData.annotations) {\n            const annotationWorkgroupId = annotation.toWorkgroupId;\n            if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n              this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n            }\n            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n            const annotationNodeId = annotation.nodeId;\n            if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n              this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n            }\n            this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n          }\n        }\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\n      }\n      return resultData;\n    });\n  };\n\n  /**\n   * Add ComponentState to local bookkeeping\n   * @param componentState the ComponentState to add\n   */\n  addOrUpdateComponentState(componentState) {\n    const componentStateWorkgroupId = componentState.workgroupId;\n    if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n    }\n    let found = false;\n    for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\n      let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\n        found = true;  // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n    }\n\n    const componentStateNodeId = componentState.nodeId;\n    if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n      this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n    }\n    found = false;  // reset\n    for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\n      let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\n        found = true; // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n    }\n\n    const componentId = componentState.componentId;\n    if (this.studentData.componentStatesByComponentId[componentId] == null) {\n      this.studentData.componentStatesByComponentId[componentId] = new Array();\n    }\n    found = false;  // reset\n    for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\n      let cs = this.studentData.componentStatesByComponentId[componentId][c];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByComponentId[componentId][c] = componentState;\n        found = true; // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByComponentId[componentId].push(componentState);\n    }\n  };\n\n  /**\n   * Retrieve the run status from the server\n   */\n  retrieveRunStatus() {\n    const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n    const runId = this.ConfigService.getConfigParam('runId');\n\n    //create the params for the request\n    const params = {\n      runId:runId\n    };\n\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = runStatusURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    httpParams.params = params;\n\n    // make the request\n    return this.$http(httpParams).then((result) => {\n      if (result != null) {\n        const data = result.data;\n        if (data != null) {\n          // save the run status\n          this.runStatus = data;\n          this.initializePeriods();\n        }\n      }\n    });\n  }\n\n  getComponentStatesByWorkgroupId(workgroupId) {\n    if (this.studentData.componentStatesByWorkgroupId == null) {\n      //debugger;\n    }\n    const componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n    if (componentStatesByWorkgroupId != null) {\n      return componentStatesByWorkgroupId;\n    } else {\n      return [];\n    }\n  }\n\n  getComponentStatesByNodeId(nodeId) {\n    const componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n    if (componentStatesByNodeId != null) {\n      return componentStatesByNodeId;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the component stats for a component id\n   * @param componentId the component id\n   * @returns an array containing component states for a component id\n   */\n  getComponentStatesByComponentId(componentId) {\n    let componentStates = [];\n    const componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n    if (componentStatesByComponentId != null) {\n      componentStates = componentStatesByComponentId;\n    }\n    return componentStates;\n  }\n\n  getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n    let latestComponentState = null;\n    const componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    if (componentStates != null) {\n      // loop through all the component states from newest to oldest\n      for (let c = componentStates.length - 1; c >= 0; c--) {\n        const componentState = componentStates[c];\n        if (componentState != null) {\n          const componentStateNodeId = componentState.nodeId;\n          const componentStateComponentId = componentState.componentId;\n\n          // compare the node id and component id\n          if (nodeId == componentStateNodeId &&\n            componentId == componentStateComponentId) {\n            latestComponentState = componentState;\n            break;\n          }\n        }\n      }\n    }\n    return latestComponentState;\n  }\n\n  getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n    let latestComponentState = null;\n    const componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    if (componentStates != null) {\n      // loop through all the component states from newest to oldest\n      for (let c = componentStates.length - 1; c >= 0; c--) {\n        const componentState = componentStates[c];\n        if (componentState != null) {\n          const componentStateNodeId = componentState.nodeId;\n\n          // compare the node id and component id\n          if (nodeId == componentStateNodeId) {\n            latestComponentState = componentState;\n            break;\n          }\n        }\n      }\n    }\n    return latestComponentState;\n  }\n\n  /**\n   * Get the latest component states for a workgroup. Each component state\n   * will be the latest component state for a component.\n   * @param workgroupId the workgroup id\n   * @return an array of latest component states\n   */\n  getLatestComponentStatesByWorkgroupId(workgroupId) {\n    const componentStates = [];\n    if (workgroupId != null) {\n      // get all the component states for a workgroup\n      const componentStatesForWorkgroup = this.getComponentStatesByWorkgroupId(workgroupId);\n\n      if (componentStatesForWorkgroup != null) {\n        // mapping of component to revision counter\n        const componentRevisionCounter = {};\n\n        /*\n         * used to keep track of the components we have found component\n         * states for already\n         */\n        const componentsFound = {};\n\n        // loop through the component states forwards\n        for (let componentState of componentStatesForWorkgroup) {\n          if (componentState != null) {\n            // get the node id and component id of the component state\n            const nodeId = componentState.nodeId;\n            const componentId = componentState.componentId;\n\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\n            const key = nodeId + \"-\" + componentId;\n\n            if (componentRevisionCounter[key] == null) {\n              // initialize the component revision counter for this component to 1 if there is no entry\n              componentRevisionCounter[key] = 1;\n            }\n\n            // get the revision counter\n            const revisionCounter = componentRevisionCounter[key];\n\n            // set the revision counter into the component state\n            componentState.revisionCounter = revisionCounter;\n\n            // increment the revision counter for the component\n            componentRevisionCounter[key] = revisionCounter + 1;\n          }\n        }\n\n        // loop through the component states backwards\n        for (let csb = componentStatesForWorkgroup.length - 1; csb >= 0; csb--) {\n          // get a component state\n          const componentState = componentStatesForWorkgroup[csb];\n\n          if (componentState != null) {\n            // get the node id and component id of the component state\n            const nodeId = componentState.nodeId;\n            const componentId = componentState.componentId;\n\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\n            const key = nodeId + \"-\" + componentId;\n\n            if (componentsFound[key] == null) {\n              /*\n               * we have not found a component state for this\n               * component yet so we will add it to the array\n               * of component states\n               */\n              componentStates.push(componentState);\n\n              /*\n               * add an entry into the components found so that\n               * don't add any more component states from this\n               * component\n               */\n              componentsFound[key] = true;\n            }\n          }\n        }\n\n        /*\n         * reverse the component states array since we have been adding\n         * component states from newest to oldest order but we want them\n         * in oldest to newest order\n         */\n        componentStates.reverse();\n      }\n    }\n    return componentStates;\n  }\n\n  getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n    const componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n    // find the intersect and return it\n    return componentStatesByWorkgroupId.filter((n) => {\n      return componentStatesByNodeId.indexOf(n) != -1;\n    });\n  }\n\n  /**\n   * Get component states for a workgroup id and component id\n   * @param workgroupId the workgroup id\n   * @param componentId the component id\n   * @returns an array of component states\n   */\n  getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n    const componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n    // find the intersect and return it\n    return componentStatesByWorkgroupId.filter((n) => {\n      return componentStatesByComponentId.indexOf(n) != -1;\n    });\n  }\n\n  getEventsByWorkgroupId(workgroupId) {\n    const eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n    if (eventsByWorkgroupId != null) {\n      return eventsByWorkgroupId;\n    } else {\n      return [];\n    }\n  };\n\n  getEventsByNodeId(nodeId) {\n    const eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n    if (eventsByNodeId != null) {\n      return eventsByNodeId;\n    } else {\n      return [];\n    }\n  };\n\n  getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n    const eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n    // find the intersect and return it\n    return eventsByWorkgroupId.filter((n) => {\n      return eventsByNodeId.indexOf(n) != -1;\n    });\n  };\n\n  /**\n   * Get the latest event by workgroup id, node id, and event type\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @param eventType the event type\n   * @return the latest event with the matching parameters or null if\n   * no event is found with the matching parameters\n   */\n  getLatestEventByWorkgroupIdAndNodeIdAndType(workgroupId, nodeId, eventType) {\n    // get all the events for a workgroup id\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n\n    if (eventsByWorkgroupId != null) {\n      /*\n       * loop through all the events for the workgroup from newest to\n       * oldest\n       */\n      for (let e = eventsByWorkgroupId.length - 1; e >= 0; e--) {\n        // get an event\n        const event = eventsByWorkgroupId[e];\n\n        if (event != null) {\n          if (event.nodeId == nodeId && event.event == eventType) {\n            /*\n             * the event parameters match the ones we are looking\n             * for\n             */\n            return event;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  getAnnotationsToWorkgroupId(workgroupId) {\n    const annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n    if (annotationsToWorkgroupId != null) {\n      return annotationsToWorkgroupId;\n    } else {\n      return [];\n    }\n  }\n\n  getAnnotationsByNodeId(nodeId) {\n    const annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n    if (annotationsByNodeId != null) {\n      return annotationsByNodeId;\n    } else {\n      return [];\n    }\n  }\n\n  getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n    const annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n    // find the intersect and return it\n    return annotationsToWorkgroupId.filter((n) => {\n      return annotationsByNodeId.indexOf(n) != -1;\n    });\n  }\n\n  /**\n   * Initialize the periods\n   */\n  initializePeriods() {\n    // get the periods from the config\n    let periods = this.ConfigService.getPeriods();\n    let currentPeriod = null;\n\n    if (periods.length > 1) {\n      // create an option for all periods\n      let allPeriodsOption = {\n        periodId: -1,\n        periodName: this.$translate('allPeriods')\n      };\n\n      periods.unshift(allPeriodsOption);\n      currentPeriod = periods[0];\n    } else if (periods.length == 1) {\n      currentPeriod = periods[0];\n    }\n\n    // an array to gather all the periods\n    let mergedPeriods = [];\n\n    /*\n     * Get the periods from the run status. These periods may not be up to\n     * date so we need to compare them with the periods from the config.\n     */\n    let runStatusPeriods = this.runStatus.periods;\n\n    // loop through all the periods in the config\n    for (let period of periods) {\n      if (period != null) {\n        // check if the period object is in the run status periods\n        let runStatusPeriod = null;\n        if (runStatusPeriods != null) {\n          // loop through all the periods in the run status\n          for (let tempRunStatusPeriod of runStatusPeriods) {\n            if (tempRunStatusPeriod != null) {\n              if (period.periodId == tempRunStatusPeriod.periodId) {\n                /*\n                 * We have found a period that is in the config and\n                 * the run status.\n                 */\n                runStatusPeriod = tempRunStatusPeriod;\n              }\n            }\n          }\n        }\n\n        if (runStatusPeriod == null) {\n          /*\n           * we did not find the period object in the run status so\n           * we will use the period object from the config\n           */\n          mergedPeriods.push(period);\n        } else {\n          // we found the period object in the run status so we will use it\n          mergedPeriods.push(runStatusPeriod);\n        }\n      }\n    }\n\n    this.periods = mergedPeriods;\n    this.runStatus.periods = mergedPeriods;\n\n    // set the current period\n    if (currentPeriod) {\n      this.setCurrentPeriod(currentPeriod);\n    }\n  }\n\n  setCurrentPeriod(period) {\n    let previousPeriod = this.currentPeriod;\n    this.currentPeriod = period;\n    let periodId = this.currentPeriod.periodId;\n\n    /*\n     * if currently selected workgroup is in a different period, clear the\n     * currently selected workgroup\n     */\n    let currentWorkgroup = this.getCurrentWorkgroup();\n    if (currentWorkgroup) {\n      let workgroupPeriod = currentWorkgroup.periodId;\n      if (periodId !== -1 && workgroupPeriod !== periodId) {\n        this.setCurrentWorkgroup(null);\n      }\n    }\n\n    // broadcast the event that the current period has changed\n    this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n  }\n\n  getCurrentPeriod() {\n    return this.currentPeriod;\n  }\n\n  getPeriods() {\n    return this.periods;\n  }\n\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  setCurrentWorkgroup(workgroup) {\n    this.currentWorkgroup = workgroup;\n\n    // broadcast the event that the current workgroup has changed\n    this.$rootScope.$broadcast('currentWorkgroupChanged', {currentWorkgroup: this.currentWorkgroup});\n  }\n\n  getCurrentWorkgroup() {\n    return this.currentWorkgroup;\n  }\n\n  setCurrentStep(step) {\n    this.currentStep = step;\n\n    // broadcast the event that the current step has changed\n    this.$rootScope.$broadcast('currentStepChanged', {currentStep: this.currentStep});\n  }\n\n  getCurrentStep() {\n    return this.currentStep;\n  }\n\n  /**\n   * Get the current node\n   * @returns the current node object\n   */\n  getCurrentNode() {\n    return this.currentNode;\n  }\n\n  /**\n   * Get the current node id\n   * @returns the current node id\n   */\n  getCurrentNodeId() {\n    let currentNodeId = null;\n    if (this.currentNode != null) {\n      currentNodeId = this.currentNode.id;\n    }\n    return currentNodeId;\n  }\n\n  /**\n   * Set the current node\n   * @param nodeId the node id\n   */\n  setCurrentNodeByNodeId(nodeId) {\n    if (nodeId != null) {\n      let node = this.ProjectService.getNodeById(nodeId);\n      this.setCurrentNode(node);\n    }\n  }\n\n  /**\n   * Set the current node\n   * @param node the node object\n   */\n  setCurrentNode(node) {\n    let previousCurrentNode = this.currentNode;\n    if (previousCurrentNode !== node) {\n      // the current node is about to change\n\n      if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n        // set the previous node to the current node\n        this.previousStep = previousCurrentNode;\n      }\n\n      // set the current node to the new node\n      this.currentNode = node;\n\n      // broadcast the event that the current node has changed\n      this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n    }\n  }\n\n  /**\n   * End the current node\n   */\n  endCurrentNode() {\n    // get the current node\n    const previousCurrentNode = this.currentNode;\n\n    if (previousCurrentNode != null) {\n      // tell the node to exit\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n    }\n  }\n\n  /**\n   * End the current node and set the current node\n   * @param nodeId the node id of the new current node\n   */\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n    // end the current node\n    this.endCurrentNode();\n\n    // set the current node\n    this.setCurrentNodeByNodeId(nodeId);\n  }\n\n  /**\n   * Get the total score for a workgroup\n   * @param workgroupId the workgroup id\n   * @returns the total score for the workgroup\n   */\n  getTotalScoreByWorkgroupId(workgroupId) {\n    let totalScore = null;\n    if (this.studentData.annotationsToWorkgroupId != null) {\n      // get all the annotations for a workgroup\n      const annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n      // get the total score for the workgroup\n      totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n    return totalScore;\n  }\n\n  /**\n   * Get the run status\n   * @returns the run status object\n   */\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  /**\n   * Check if any period in the run is paused\n   * @returns Boolean whether any periods are paused\n   */\n  isAnyPeriodPaused(periodId) {\n    let isPaused = false;\n\n    // get the run status\n    let runStatus = this.runStatus;\n\n    if (runStatus && runStatus.periods) {\n      let periods = runStatus.periods;\n      let nPeriods = periods.length;\n      let nPeriodsPaused = 0;\n\n      // loop through all the periods\n      for (let period of periods) {\n        if (period != null) {\n          if (period.paused) {\n            isPaused = true;\n            break;\n          }\n        }\n      }\n    }\n    return isPaused;\n  }\n\n  /**\n   * Check if the given period is paused\n   * @param periodId the id for a period\n   * @returns Boolean whether the period is paused or not\n   */\n  isPeriodPaused(periodId) {\n    let isPaused = false;\n\n    // get the run status\n    let runStatus = this.runStatus;\n\n    if (runStatus && runStatus.periods) {\n      let periods = runStatus.periods;\n      let nPeriods = periods.length;\n      let nPeriodsPaused = 0;\n\n      // loop through all the periods\n      for (let period of periods) {\n        if (period != null) {\n          isPaused = period.paused;\n          if (periodId == period.periodId) {\n            // we have found the period we are looking for\n            break;\n          } else {\n            if (isPaused) {\n              nPeriodsPaused++;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n\n      if (periodId === -1 && nPeriods === nPeriodsPaused) {\n        isPaused = true;\n      }\n    }\n    return isPaused;\n  }\n\n  /**\n   * The pause screen status was changed for the given periodId. Update period accordingly.\n   * @param periodId the id of the period to toggle\n   * @param isPaused Boolean whether the period should be paused or not\n   */\n  pauseScreensChanged(periodId, isPaused) {\n    if (periodId) {\n      // update the run status\n      this.updatePausedRunStatusValue(periodId, isPaused);\n\n      if (isPaused) {\n        // pause the student screens\n        this.TeacherWebSocketService.pauseScreens(periodId);\n      } else {\n        // unpause the student screens\n        this.TeacherWebSocketService.unPauseScreens(periodId);\n      }\n\n      // save the run status to the server\n      this.sendRunStatus();\n\n      // save pause/unpause screen event\n      let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n        category = \"TeacherAction\", data = { periodId: periodId };\n      let event = \"pauseScreen\";\n      if (!isPaused) {\n        event = \"unPauseScreen\";\n      }\n      this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n      this.$rootScope.$broadcast('pauseScreensChanged', {periods: this.runStatus.periods});\n    }\n  }\n\n  /**\n   * Create a local run status object to keep track of the run status\n   * @returns the run status object\n   */\n  createRunStatus() {\n    const runStatus = {};\n\n    // get the run id\n    runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n    // get all the periods objects\n    const periods = this.ConfigService.getPeriods();\n\n    //loop through all the periods\n    for (let period of periods) {\n      //set this to default to not paused\n      period.paused = false;\n    }\n\n    // set the periods into the run status\n    runStatus.periods = periods;\n\n    // set the run status into the view so we can access it later\n    this.runStatus = runStatus;\n\n    return this.runStatus;\n  }\n\n  /**\n   * Update the paused value for a period in our run status\n   * @param periodId the period id\n   * @param value whether the period is paused or not\n   */\n  updatePausedRunStatusValue(periodId, value) {\n    //create the local run status object if necessary\n    if (this.runStatus == null) {\n      this.createRunStatus();\n    }\n\n    //get the local run status object\n    let runStatus = this.runStatus;\n    let periods = runStatus.periods;\n\n    let allPeriodsPaused = true;\n\n    if (periods) {\n      let l = periods.length, x = l - 1;\n      //loop through all the periods\n      for (; x > -1; x--) {\n        //get a period\n        let tempPeriod = periods[x];\n\n        //get the period id\n        let tempPeriodId = tempPeriod.periodId;\n\n        //check if the period id matches the one we need to update or if all periods has been selected\n        if (periodId === tempPeriodId || periodId === -1) {\n          //we have found the period we want to update\n          tempPeriod.paused = value;\n        }\n\n        if (tempPeriodId !== -1 && !tempPeriod.paused) {\n          allPeriodsPaused = false;\n        }\n\n        if (tempPeriodId === -1) {\n          // set the paused status for the all periods option\n          tempPeriod.paused = allPeriodsPaused;\n        }\n      }\n    }\n  }\n\n  /**\n   * Send the run status back to the server to be saved in the db\n   * @param customPauseMessage the custom pause message text to send to the students\n   */\n  sendRunStatus(customPauseMessage) {\n    //get the run status url we will use to make the request\n    const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n    if (runStatusURL != null) {\n      //make the request to the server for the student statuses\n\n      //get the run id\n      const runId = this.ConfigService.getConfigParam('runId');\n\n      if (customPauseMessage != null) {\n        //set the pause message if one was provided\n        this.runStatus.pauseMessage = customPauseMessage;\n      }\n\n      //get the run status as a string\n      const runStatus = angular.toJson(this.runStatus);\n\n      //create the params for the request\n      const runStatusParams = {\n        runId:runId,\n        status:runStatus\n      };\n\n      const httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = runStatusURL;\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.data = $.param(runStatusParams);\n\n      // make the request\n      this.$http(httpParams);\n    }\n  };\n}\n\nTeacherDataService.$inject = [\n  '$http',\n  '$filter',\n  '$q',\n  '$rootScope',\n  'AnnotationService',\n  'ConfigService',\n  'NotificationService',\n  'ProjectService',\n  'TeacherWebSocketService',\n  'UtilService'\n];\n\nexport default TeacherDataService;\n"]}