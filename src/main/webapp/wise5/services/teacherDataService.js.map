{"version":3,"sources":["teacherDataService.es6"],"names":[],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $rootScope,\n                AnnotationService,\n                ConfigService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n\n        this.studentData = {};\n        this.currentPeriod = null;\n        this.runStatus == null;\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        var exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        var runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        var params = {};\n        params.getStudentWork = true;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = exportURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        var periodId = null;\n\n        if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            periodId = this.currentPeriod.periodId;\n        }\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = periodId;\n        params.nodeId = nodeId;\n        params.workgroupId = null;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        var studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (this.studentData == null) {\n                    this.studentData = {};\n                }\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId arrays\n                    this.studentData.componentStates = componentStates;\n                    this.studentData.componentStatesByWorkgroupId = {};\n                    this.studentData.componentStatesByNodeId = {};\n                    this.studentData.componentStatesByComponentId = {};\n\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n\n                        var componentStateWorkgroupId = componentState.workgroupId;\n                        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n                            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n                        }\n                        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n\n                        var componentStateNodeId = componentState.nodeId;\n                        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n                            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n                        }\n                        this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n\n                        var componentId = componentState.componentId;\n                        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n                            this.studentData.componentStatesByComponentId[componentId] = new Array();\n                        }\n                        this.studentData.componentStatesByComponentId[componentId].push(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] == null) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (this.studentData.annotationsByNodeId[annotationNodeId] == null) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    };\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    setCurrentPeriod(period) {\n        this.currentPeriod = period;\n    };\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    };\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        var isPaused = false;\n\n        // get the run status\n        var runStatus = this.runStatus;\n\n        if (runStatus != null) {\n            if (periodId == -1) {\n                // -1 represents all periods\n                isPaused = runStatus.allPeriodsPaused;\n            } else {\n                var periods = runStatus.periods;\n\n                // loop through all the periods\n                for (var p = 0; p < periods.length; p++) {\n                    var period = periods[p];\n\n                    if (period != null) {\n                        if (periodId == period.periodId) {\n                            // we have found the period we are looking for\n                            isPaused = period.paused;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        //get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        //set this to default to not paused\n        runStatus.allPeriodsPaused = false;\n\n        //get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for(var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        //set the periods into the run status\n        runStatus.periods = periods;\n\n        //set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if(this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        var runStatus = this.runStatus;\n\n        if(periodId == null || periodId == -1) {\n            //we are updating the all periods value\n            runStatus.allPeriodsPaused = value;\n\n            //set all the periods to the value as well\n            //this.setAllPeriodsPaused(value);\n        } else {\n            //we are updating a specific period\n\n            //get all the periods\n            var periods = runStatus.periods;\n\n            if(periods != null) {\n                //loop through all the periods\n                for(var x = 0; x < periods.length; x++) {\n                    //get a period\n                    var tempPeriod = periods[x];\n\n                    //get the period id\n                    var tempPeriodId = tempPeriod.periodId;\n\n                    //check if the period id matches the one we need to update\n                    if(periodId == tempPeriodId) {\n                        //we have found the period we want to update\n                        tempPeriod.paused = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if(runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if(customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            }\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = ['$http',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService'];\n\nexport default TeacherDataService;\n"]}