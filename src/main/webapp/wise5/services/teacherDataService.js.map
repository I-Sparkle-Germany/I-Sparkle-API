{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentWorkgroup","currentNode","previousStep","runStatus","periods","nodeGradingSort","initializePeriods","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getAnnotations","getEvents","retrieveStudentData","httpParams","method","url","then","result","data","window","location","href","deferred","defer","promise","resolve","context","componentId","componentType","category","newEvent","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","components","concat","periodId","studentDataURL","resultData","studentWorkList","componentStates","i","length","componentState","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","cs","id","componentStateNodeId","n","c","runStatusURL","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","componentStatesForWorkgroup","getComponentStatesByWorkgroupId","componentRevisionCounter","componentsFound","csf","key","revisionCounter","csb","reverse","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","setCurrentPeriod","period","previousPeriod","setCurrentWorkgroup","workgroup","currentNodeId","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","p","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","saveEvent","x","value","createRunStatus","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\r\n\r\nclass TeacherDataService {\r\n\r\n    constructor($http,\r\n                $q,\r\n                $rootScope,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NotificationService,\r\n                ProjectService,\r\n                TeacherWebSocketService) {\r\n        this.$http = $http;\r\n        this.$q = $q;\r\n        this.$rootScope = $rootScope;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NotificationService = NotificationService;\r\n        this.ProjectService = ProjectService;\r\n        this.TeacherWebSocketService = TeacherWebSocketService;\r\n\r\n        this.studentData = {\r\n            componentStatesByWorkgroupId: {},\r\n            componentStatesByNodeId: {},\r\n            componentStatesByComponentId: {}\r\n        };\r\n\r\n        this.currentPeriod = null;\r\n        this.currentWorkgroup = null;\r\n        this.currentNode = null;\r\n        this.previousStep = null;\r\n        this.runStatus = null;\r\n        this.periods = [];\r\n        this.nodeGradingSort = 'team';\r\n\r\n        this.initializePeriods();\r\n\r\n        /**\r\n         * Listen for the 'annotationSavedToServer' event which is fired when\r\n         * we receive the response from saving an annotation to the server\r\n         */\r\n        this.$rootScope.$on('annotationSavedToServer', (event, args) => {\r\n\r\n            if (args) {\r\n                // get the annotation that was saved to the server\r\n                let annotation = args.annotation;\r\n                this.handleAnnotationReceived(annotation);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'newAnnotationReceived' event which is fired when\r\n         * teacher receives a new annotation (usually on a student work) from the server\r\n         */\r\n        this.$rootScope.$on('newAnnotationReceived', (event, args) => {\r\n\r\n            if (args) {\r\n                // get the annotation that was saved to the server\r\n                let annotation = args.annotation;\r\n                this.handleAnnotationReceived(annotation);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Listen for the 'newStudentWorkReceived' event which is fired when\r\n         * teacher receives a new student work from the server\r\n         */\r\n        this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\r\n\r\n            if (args) {\r\n                // get the student work (component state) that was saved to the server\r\n                let studentWork = args.studentWork;\r\n                this.addOrUpdateComponentState(studentWork);\r\n                // broadcast the event that a new work has been received\r\n                this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\r\n            }\r\n        });\r\n    }\r\n\r\n    handleAnnotationReceived(annotation) {\r\n        // add the annotation to the local annotations array\r\n        this.studentData.annotations.push(annotation);\r\n\r\n        let toWorkgroupId = annotation.toWorkgroupId;\r\n        if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\r\n            this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\r\n        }\r\n        this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\r\n\r\n        let nodeId = annotation.nodeId;\r\n        if (this.studentData.annotationsByNodeId[nodeId] == null) {\r\n            this.studentData.annotationsByNodeId[nodeId] = new Array();\r\n        }\r\n        this.studentData.annotationsByNodeId[nodeId].push(annotation);\r\n\r\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n\r\n        // broadcast the event that a new annotation has been received\r\n        this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\r\n    }\r\n\r\n    /**\r\n     * Get the data for the export and generate the csv file that will be downloaded\r\n     * @param exportType the type of export\r\n     */\r\n    getExport(exportType) {\r\n        let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\r\n        let runId = this.ConfigService.getRunId();\r\n        exportURL += \"/\" + runId + \"/\" + exportType;\r\n\r\n        if (exportType === \"allStudentWork\" || exportType === \"latestStudentWork\") {\r\n            let params = {};\r\n            params.runId = this.ConfigService.getRunId();\r\n            params.getStudentWork = true;\r\n            params.getAnnotations = true;\r\n            params.getEvents = false;\r\n\r\n            return this.retrieveStudentData(params);\r\n        } else if (exportType === \"events\") {\r\n            let params = {};\r\n            params.runId = this.ConfigService.getRunId();\r\n            params.getStudentWork = false;\r\n            params.getAnnotations = false;\r\n            params.getEvents = true;\r\n\r\n            return this.retrieveStudentData(params);\r\n        } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\r\n            let httpParams = {\r\n                method : 'GET',\r\n                url : exportURL,\r\n                params : {}\r\n            };\r\n\r\n            return this.$http(httpParams).then((result) => {\r\n                return result.data;\r\n            });\r\n        } else if (exportType === \"notifications\") {\r\n            let httpParams = {\r\n                method : 'GET',\r\n                url : exportURL,\r\n                params : {}\r\n            };\r\n\r\n            return this.$http(httpParams).then((result) => {\r\n                return result.data;\r\n            });\r\n        } else if (exportType === \"studentAssets\") {\r\n            window.location.href = exportURL;\r\n            let deferred = this.$q.defer();\r\n            let promise = deferred.promise;\r\n            deferred.resolve([]);\r\n            return promise;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the export given the export Type\r\n     * @param exportType\r\n     */\r\n    getExport0(exportType) {\r\n        let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\r\n        let runId = this.ConfigService.getRunId();\r\n        exportURL += \"/\" + runId + \"/\" + exportType;\r\n\r\n        if (exportType === \"studentAssets\") {\r\n            window.location.href = exportURL;\r\n            let deferred = this.$q.defer();\r\n            let promise = deferred.promise;\r\n            deferred.resolve([]);\r\n            return promise;\r\n        } else {\r\n            let httpParams = {\r\n                method : 'GET',\r\n                url : exportURL,\r\n                params : {}\r\n            };\r\n\r\n            return this.$http(httpParams).then((result) => {\r\n                return result.data;\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Save events that occur in the Classroom Monitor to the server\r\n     * @param event the event object\r\n     * @returns a promise\r\n     */\r\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\r\n        let newEvent = {\r\n            runId : this.ConfigService.getRunId(),\r\n            workgroupId : this.ConfigService.getWorkgroupId(),\r\n            clientSaveTime : Date.parse(new Date()),\r\n            context : context,\r\n            nodeId : nodeId,\r\n            componentId : componentId,\r\n            type : componentType,\r\n            category : category,\r\n            event : event,\r\n            data : data\r\n        };\r\n\r\n        let events = [newEvent];\r\n\r\n        let params = {\r\n             runId : this.ConfigService.getRunId(),\r\n             workgroupId : this.ConfigService.getWorkgroupId(),\r\n             events : angular.toJson(events)\r\n        };\r\n\r\n        let httpParams = {};\r\n        httpParams.method = 'POST';\r\n        httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\r\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n        httpParams.data = $.param(params);\r\n\r\n        return this.$http(httpParams).then((result) => {\r\n\r\n            var savedEvents = null;\r\n\r\n            if (result != null && result.data != null) {\r\n                let data = result.data;\r\n\r\n                if (data != null) {\r\n\r\n                    // get the saved events\r\n                    savedEvents = data.events;\r\n                }\r\n            }\r\n\r\n            return savedEvents;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Retrieve the student data for a node id\r\n     * @param nodeId the node id\r\n     * @returns the student data for the node id\r\n     */\r\n    retrieveStudentDataByNodeId(nodeId) {\r\n\r\n        //var periodId = null;\r\n\r\n        //if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\r\n            //periodId = this.currentPeriod.periodId;\r\n        //}\r\n\r\n        // get the node ids and component ids in the node\r\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\r\n\r\n        // get the show previous work node ids and component ids in the node\r\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\r\n\r\n        var components = [];\r\n        components = components.concat(nodeIdsAndComponentIds);\r\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\r\n\r\n        var params = {};\r\n        params.runId = this.ConfigService.getRunId();\r\n        //params.periodId = periodId;\r\n        params.periodId = null;\r\n        params.workgroupId = null;\r\n        params.components = components;\r\n\r\n        return this.retrieveStudentData(params);\r\n    };\r\n\r\n    /**\r\n     * Retrieve the student data for the workgroup id\r\n     * @param workgroupId the workgroup id\r\n     * @returns the student data for the workgroup id\r\n     */\r\n    retrieveStudentDataByWorkgroupId(workgroupId) {\r\n\r\n        var params = {};\r\n        params.runId = this.ConfigService.getRunId();\r\n        params.periodId = null;\r\n        params.nodeId = null;\r\n        params.workgroupId = workgroupId;\r\n        params.toWorkgroupId = workgroupId;\r\n\r\n        return this.retrieveStudentData(params);\r\n    };\r\n\r\n    /**\r\n     * Retrieve the annotations for the run\r\n     * @returns the annotations for the run\r\n     */\r\n    retrieveAnnotations() {\r\n        var params = {};\r\n        params.runId = this.ConfigService.getRunId();\r\n        params.periodId = null;\r\n        params.nodeId = null;\r\n        params.workgroupId = null;\r\n        params.toWorkgroupId = null;\r\n        params.getStudentWork = false;\r\n        params.getEvents = false;\r\n        params.getAnnotations = true;\r\n\r\n        return this.retrieveStudentData(params);\r\n    };\r\n\r\n    /**\r\n     * Retrieve the student data\r\n     * @param params the params that specify what student data we want\r\n     * @returns a promise\r\n     */\r\n    retrieveStudentData(params) {\r\n        let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\r\n\r\n        if (params.getStudentWork == null) {\r\n            params.getStudentWork = true;\r\n        }\r\n\r\n        if (params.getEvents == null) {\r\n            params.getEvents = true;\r\n        }\r\n\r\n        if (params.getAnnotations == null) {\r\n            params.getAnnotations = true;\r\n        }\r\n\r\n        let httpParams = {\r\n            \"method\": \"GET\",\r\n            \"url\": studentDataURL,\r\n            \"params\": params\r\n        };\r\n\r\n        return this.$http(httpParams).then((result) => {\r\n            var resultData = result.data;\r\n            if (resultData != null) {\r\n\r\n                if (resultData.studentWorkList != null) {\r\n                    var componentStates = resultData.studentWorkList;\r\n\r\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\r\n                    for (var i = 0; i < componentStates.length; i++) {\r\n                        var componentState = componentStates[i];\r\n                        this.addOrUpdateComponentState(componentState);\r\n                    }\r\n                }\r\n\r\n                if (resultData.events != null) {\r\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\r\n                    this.studentData.allEvents = resultData.events;\r\n                    this.studentData.eventsByWorkgroupId = {};\r\n                    this.studentData.eventsByNodeId = {};\r\n                    for (var i = 0; i < resultData.events.length; i++) {\r\n                        var event = resultData.events[i];\r\n                        var eventWorkgroupId = event.workgroupId;\r\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\r\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\r\n                        }\r\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\r\n\r\n                        var eventNodeId = event.nodeId;\r\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\r\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\r\n                        }\r\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\r\n                    }\r\n                }\r\n\r\n                if (resultData.annotations != null) {\r\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\r\n                    this.studentData.annotations = resultData.annotations;\r\n                    this.studentData.annotationsToWorkgroupId = {};\r\n                    this.studentData.annotationsByNodeId = {};\r\n                    for (var i = 0; i < resultData.annotations.length; i++) {\r\n                        var annotation = resultData.annotations[i];\r\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\r\n                        if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\r\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\r\n                        }\r\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\r\n\r\n                        var annotationNodeId = annotation.nodeId;\r\n                        if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\r\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\r\n                        }\r\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\r\n                    }\r\n                }\r\n\r\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Add ComponentState to local bookkeeping\r\n     * @param componentState the ComponentState to add\r\n     */\r\n    addOrUpdateComponentState(componentState) {\r\n        var componentStateWorkgroupId = componentState.workgroupId;\r\n        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\r\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\r\n        }\r\n        let found = false;\r\n        for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\r\n            let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\r\n            if (cs.id != null && cs.id === componentState.id) {\r\n                // found the same component id, so just update it in place.\r\n                this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\r\n                found = true;  // remember this so we don't insert later.\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\r\n        }\r\n\r\n        var componentStateNodeId = componentState.nodeId;\r\n        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\r\n            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\r\n        }\r\n        found = false;  // reset\r\n        for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\r\n            let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\r\n            if (cs.id != null && cs.id === componentState.id) {\r\n                // found the same component id, so just update it in place.\r\n                this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\r\n                found = true; // remember this so we don't insert later.\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\r\n        }\r\n\r\n        var componentId = componentState.componentId;\r\n        if (this.studentData.componentStatesByComponentId[componentId] == null) {\r\n            this.studentData.componentStatesByComponentId[componentId] = new Array();\r\n        }\r\n        found = false;  // reset\r\n        for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\r\n            let cs = this.studentData.componentStatesByComponentId[componentId][c];\r\n            if (cs.id != null && cs.id === componentState.id) {\r\n                // found the same component id, so just update it in place.\r\n                this.studentData.componentStatesByComponentId[componentId][c] = componentState\r\n                found = true; // remember this so we don't insert later.\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            this.studentData.componentStatesByComponentId[componentId].push(componentState);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieve the run status from the server\r\n     */\r\n    retrieveRunStatus() {\r\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\r\n        var runId = this.ConfigService.getConfigParam('runId');\r\n\r\n        //create the params for the request\r\n        var params = {\r\n            runId:runId\r\n        };\r\n\r\n        var httpParams = {};\r\n        httpParams.method = 'GET';\r\n        httpParams.url = runStatusURL;\r\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n        httpParams.params = params;\r\n\r\n        // make the request\r\n        return this.$http(httpParams).then((result) => {\r\n            if (result != null) {\r\n                var data = result.data;\r\n                if (data != null) {\r\n                    // save the run status\r\n                    this.runStatus = data;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getComponentStatesByWorkgroupId(workgroupId) {\r\n        if (this.studentData.componentStatesByWorkgroupId == null) {\r\n            //debugger;\r\n        }\r\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\r\n        if (componentStatesByWorkgroupId != null) {\r\n            return componentStatesByWorkgroupId;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getComponentStatesByNodeId(nodeId) {\r\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\r\n        if (componentStatesByNodeId != null) {\r\n            return componentStatesByNodeId;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the component stats for a component id\r\n     * @param componentId the component id\r\n     * @returns an array containing component states for a component id\r\n     */\r\n    getComponentStatesByComponentId(componentId) {\r\n        var componentStates = [];\r\n\r\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\r\n\r\n        if (componentStatesByComponentId != null) {\r\n            componentStates = componentStatesByComponentId;\r\n        }\r\n\r\n        return componentStates;\r\n    }\r\n\r\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\r\n        var latestComponentState = null;\r\n\r\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states from newest to oldest\r\n            for (var c = componentStates.length - 1; c >= 0; c--) {\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n                    var componentStateNodeId = componentState.nodeId;\r\n                    var componentStateComponentId = componentState.componentId;\r\n\r\n                    // compare the node id and component id\r\n                    if (nodeId == componentStateNodeId &&\r\n                        componentId == componentStateComponentId) {\r\n                        latestComponentState = componentState;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return latestComponentState;\r\n    }\r\n\r\n    getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\r\n        var latestComponentState = null;\r\n\r\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n\r\n        if (componentStates != null) {\r\n\r\n            // loop through all the component states from newest to oldest\r\n            for (var c = componentStates.length - 1; c >= 0; c--) {\r\n                var componentState = componentStates[c];\r\n\r\n                if (componentState != null) {\r\n                    var componentStateNodeId = componentState.nodeId;\r\n\r\n                    // compare the node id and component id\r\n                    if (nodeId == componentStateNodeId) {\r\n                        latestComponentState = componentState;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return latestComponentState;\r\n    }\r\n\r\n    /**\r\n     * Get the latest component states for a workgroup. Each component state\r\n     * will be the latest component state for a component.\r\n     * @param workgroupId the workgroup id\r\n     * @return an array of latest component states\r\n     */\r\n    getLatestComponentStatesByWorkgroupId(workgroupId) {\r\n        var componentStates = [];\r\n\r\n        if (workgroupId != null) {\r\n\r\n            // get all the component states for a workgroup\r\n            var componentStatesForWorkgroup = this.getComponentStatesByWorkgroupId(workgroupId);\r\n\r\n            if (componentStatesForWorkgroup != null) {\r\n\r\n                // mapping of component to revision counter\r\n                var componentRevisionCounter = {};\r\n\r\n                /*\r\n                 * used to keep track of the components we have found component\r\n                 * states for already\r\n                 */\r\n                var componentsFound = {};\r\n\r\n                // loop through the component states forwards\r\n                for (var csf = 0; csf < componentStatesForWorkgroup.length; csf++) {\r\n\r\n                    // get a component state\r\n                    var componentState = componentStatesForWorkgroup[csf];\r\n\r\n                    if (componentState != null) {\r\n\r\n                        // get the node id and component id of the component state\r\n                        var nodeId = componentState.nodeId;\r\n                        var componentId = componentState.componentId;\r\n\r\n                        // generate the component key e.g. \"node2_bb83hs0sd8\"\r\n                        var key = nodeId + \"-\" + componentId;\r\n\r\n                        if (componentRevisionCounter[key] == null) {\r\n                            // initialize the component revision counter for this component to 1 if there is no entry\r\n                            componentRevisionCounter[key] = 1;\r\n                        }\r\n\r\n                        // get the revision counter\r\n                        var revisionCounter = componentRevisionCounter[key];\r\n\r\n                        // set the revision counter into the component state\r\n                        componentState.revisionCounter = revisionCounter;\r\n\r\n                        // increment the revision counter for the component\r\n                        componentRevisionCounter[key] = revisionCounter + 1;\r\n                    }\r\n                }\r\n\r\n                // loop through the component states backwards\r\n                for(var csb = componentStatesForWorkgroup.length - 1; csb >= 0; csb--) {\r\n\r\n                    // get a component state\r\n                    var componentState = componentStatesForWorkgroup[csb];\r\n\r\n                    if (componentState != null) {\r\n\r\n                        // get the node id and component id of the component state\r\n                        var nodeId = componentState.nodeId;\r\n                        var componentId = componentState.componentId;\r\n\r\n                        // generate the component key e.g. \"node2_bb83hs0sd8\"\r\n                        var key = nodeId + \"-\" + componentId;\r\n\r\n                        if (componentsFound[key] == null) {\r\n                            /*\r\n                             * we have not found a component state for this\r\n                             * component yet so we will add it to the array\r\n                             * of component states\r\n                             */\r\n                            componentStates.push(componentState);\r\n\r\n                            /*\r\n                             * add an entry into the components found so that\r\n                             * don't add any more component states from this\r\n                             * component\r\n                             */\r\n                            componentsFound[key] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /*\r\n                 * reverse the component states array since we have been adding\r\n                 * component states from newest to oldest order but we want them\r\n                 * in oldest to newest order\r\n                 */\r\n                componentStates.reverse();\r\n            }\r\n        }\r\n\r\n        return componentStates;\r\n    }\r\n\r\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n\r\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\r\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\r\n\r\n        // find the intersect and return it\r\n        return componentStatesByWorkgroupId.filter((n) => {\r\n            return componentStatesByNodeId.indexOf(n) != -1;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get component states for a workgroup id and component id\r\n     * @param workgroupId the workgroup id\r\n     * @param componentId the component id\r\n     * @returns an array of component states\r\n     */\r\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\r\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\r\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\r\n\r\n        // find the intersect and return it\r\n        return componentStatesByWorkgroupId.filter((n) => {\r\n            return componentStatesByComponentId.indexOf(n) != -1;\r\n        });\r\n    }\r\n\r\n    getEventsByWorkgroupId(workgroupId) {\r\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\r\n        if (eventsByWorkgroupId != null) {\r\n            return eventsByWorkgroupId;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    getEventsByNodeId(nodeId) {\r\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\r\n        if (eventsByNodeId != null) {\r\n            return eventsByNodeId;\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\r\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\r\n\r\n        // find the intersect and return it\r\n        return eventsByWorkgroupId.filter((n) => {\r\n            return eventsByNodeId.indexOf(n) != -1;\r\n        });\r\n    };\r\n\r\n    getAnnotationsToWorkgroupId(workgroupId) {\r\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\r\n        if (annotationsToWorkgroupId != null) {\r\n            return annotationsToWorkgroupId;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getAnnotationsByNodeId(nodeId) {\r\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\r\n        if (annotationsByNodeId != null) {\r\n            return annotationsByNodeId;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\r\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\r\n\r\n        // find the intersect and return it\r\n        return annotationsToWorkgroupId.filter((n) => {\r\n            return annotationsByNodeId.indexOf(n) != -1;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize the periods\r\n     */\r\n    initializePeriods() {\r\n        let periods = this.ConfigService.getPeriods();\r\n        let currentPeriod = null;\r\n\r\n        if (periods.length > 1) {\r\n            // create an option for all periods\r\n            let allPeriodsOption = {\r\n                periodId: -1,\r\n                periodName: 'All'\r\n            };\r\n\r\n            periods.unshift(allPeriodsOption);\r\n            currentPeriod = periods[0];\r\n        } else if (periods.length == 1) {\r\n            currentPeriod = periods[0];\r\n        }\r\n\r\n        this.periods = periods;\r\n\r\n        // set the current period\r\n        if (currentPeriod) {\r\n            this.setCurrentPeriod(currentPeriod);\r\n        }\r\n    }\r\n\r\n    setCurrentPeriod(period) {\r\n        let previousPeriod = this.currentPeriod;\r\n        this.currentPeriod = period;\r\n\r\n        // whenever the current period is set, clear the currently selected workgroup\r\n        this.setCurrentWorkgroup(null);\r\n\r\n        // broadcast the event that the current period has changed\r\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\r\n    }\r\n\r\n    getCurrentPeriod() {\r\n        return this.currentPeriod;\r\n    }\r\n\r\n    getPeriods() {\r\n        return this.periods;\r\n    }\r\n\r\n    setCurrentWorkgroup(workgroup) {\r\n        this.currentWorkgroup = workgroup;\r\n\r\n        // broadcast the event that the current workgroup has changed\r\n        this.$rootScope.$broadcast('currentWorkgroupChanged', {currentWorkgroup: this.currentWorkgroup});\r\n    }\r\n\r\n    getCurrentWorkgroup() {\r\n        return this.currentWorkgroup;\r\n    }\r\n\r\n    /**\r\n     * Get the current node\r\n     * @returns the current node object\r\n     */\r\n    getCurrentNode() {\r\n        return this.currentNode;\r\n    }\r\n\r\n    /**\r\n     * Get the current node id\r\n     * @returns the current node id\r\n     */\r\n    getCurrentNodeId() {\r\n        var currentNodeId = null;\r\n\r\n        if (this.currentNode != null) {\r\n            currentNodeId = this.currentNode.id;\r\n        }\r\n\r\n        return currentNodeId;\r\n    }\r\n\r\n    /**\r\n     * Set the current node\r\n     * @param nodeId the node id\r\n     */\r\n    setCurrentNodeByNodeId(nodeId) {\r\n        if (nodeId != null) {\r\n            let node = this.ProjectService.getNodeById(nodeId);\r\n\r\n            this.setCurrentNode(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the current node\r\n     * @param node the node object\r\n     */\r\n    setCurrentNode(node) {\r\n        let previousCurrentNode = this.currentNode;\r\n\r\n        if (previousCurrentNode !== node) {\r\n            // the current node is about to change\r\n\r\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\r\n                // set the previous node to the current node\r\n                this.previousStep = previousCurrentNode;\r\n            }\r\n\r\n            // set the current node to the new node\r\n            this.currentNode = node;\r\n\r\n            // broadcast the event that the current node has changed\r\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * End the current node\r\n     */\r\n    endCurrentNode() {\r\n\r\n        // get the current node\r\n        var previousCurrentNode = this.currentNode;\r\n\r\n        if (previousCurrentNode != null) {\r\n\r\n            // tell the node to exit\r\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * End the current node and set the current node\r\n     * @param nodeId the node id of the new current node\r\n     */\r\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\r\n        // end the current node\r\n        this.endCurrentNode();\r\n\r\n        // set the current node\r\n        this.setCurrentNodeByNodeId(nodeId);\r\n    }\r\n\r\n    /**\r\n     * Get the total score for a workgroup\r\n     * @param workgroupId the workgroup id\r\n     * @returns the total score for the workgroup\r\n     */\r\n    getTotalScoreByWorkgroupId(workgroupId) {\r\n\r\n        var totalScore = null;\r\n\r\n        if (this.studentData.annotationsToWorkgroupId != null) {\r\n\r\n            // get all the annotations for a workgroup\r\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\r\n\r\n            // get the total score for the workgroup\r\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\r\n        }\r\n\r\n        return totalScore;\r\n    }\r\n\r\n    /**\r\n     * Get the run status\r\n     * @returns the run status object\r\n     */\r\n    getRunStatus() {\r\n        return this.runStatus;\r\n    }\r\n\r\n    /**\r\n     * Check if a period is paused\r\n     * @returns whether the period is paused or not\r\n     */\r\n    isPeriodPaused(periodId) {\r\n\r\n        let isPaused = false;\r\n\r\n        // get the run status\r\n        let runStatus = this.runStatus;\r\n\r\n        if (runStatus && runStatus.periods) {\r\n            let periods = runStatus.periods;\r\n            let nPeriods = periods.length;\r\n            let nPeriodsPaused = 0;\r\n\r\n            // loop through all the periods\r\n            for (let p = 0; p < periods.length; p++) {\r\n                let period = periods[p];\r\n\r\n                if (period != null) {\r\n                    isPaused = period.paused;\r\n                    if (periodId == period.periodId) {\r\n                        // we have found the period we are looking for\r\n                        break;\r\n                    } else {\r\n                        if (isPaused) {\r\n                            nPeriodsPaused++;\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\r\n                isPaused = true;\r\n            }\r\n        }\r\n\r\n        return isPaused;\r\n    }\r\n\r\n    /**\r\n     * The pause screen status was changed. update period(s) accordingly.\r\n     */\r\n    pauseScreensChanged(isPaused) {\r\n\r\n        // get the currently selected period Id\r\n        let periodId = this.currentPeriod.periodId;\r\n\r\n        // update the run status\r\n        this.updatePausedRunStatusValue(periodId, isPaused);\r\n\r\n        if (isPaused) {\r\n            // pause the student screens\r\n            this.TeacherWebSocketService.pauseScreens(periodId);\r\n        } else {\r\n            // unpause the student screens\r\n            this.TeacherWebSocketService.unPauseScreens(periodId);\r\n        }\r\n\r\n        // save the run status to the server\r\n        this.sendRunStatus();\r\n\r\n        // save pause/unpause screen event\r\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n            category = \"TeacherAction\", data = {};\r\n        let event = \"pauseScreen\";\r\n        if (!isPaused) {\r\n            event = \"unPauseScreen\";\r\n        }\r\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n    }\r\n\r\n    /**\r\n     * Create a local run status object to keep track of the run status\r\n     * @returns the run status object\r\n     */\r\n    createRunStatus() {\r\n        var runStatus = {};\r\n\r\n        // get the run id\r\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\r\n\r\n        // get all the periods objects\r\n        var periods = this.ConfigService.getPeriods();\r\n\r\n        //loop through all the periods\r\n        for (var x = 0; x < periods.length; x++) {\r\n            //get a period\r\n            var period = periods[x];\r\n\r\n            //set this to default to not paused\r\n            period.paused = false;\r\n        }\r\n\r\n        // set the periods into the run status\r\n        runStatus.periods = periods;\r\n\r\n        // set the run status into the view so we can access it later\r\n        this.runStatus = runStatus;\r\n\r\n        return this.runStatus;\r\n    }\r\n\r\n    /**\r\n     * Update the paused value for a period in our run status\r\n     * @param periodId the period id\r\n     * @param value whether the period is paused or not\r\n     */\r\n    updatePausedRunStatusValue(periodId, value) {\r\n        //create the local run status object if necessary\r\n        if (this.runStatus == null) {\r\n            this.createRunStatus();\r\n        }\r\n\r\n        //get the local run status object\r\n        let runStatus = this.runStatus;\r\n\r\n        let periods = runStatus.periods;\r\n\r\n        if (periods) {\r\n            //loop through all the periods\r\n            for (let x = 0; x < periods.length; x++) {\r\n                //get a period\r\n                let tempPeriod = periods[x];\r\n\r\n                //get the period id\r\n                let tempPeriodId = tempPeriod.periodId;\r\n\r\n                //check if the period id matches the one we need to update or if all periods has been selected\r\n                if (periodId === tempPeriodId || periodId === -1) {\r\n                    //we have found the period we want to update\r\n                    tempPeriod.paused = value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the run status back to the server to be saved in the db\r\n     * @param customPauseMessage the custom pause message text to send to the students\r\n     */\r\n    sendRunStatus(customPauseMessage) {\r\n        //get the run status url we will use to make the request\r\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\r\n\r\n        if (runStatusURL != null) {\r\n            //make the request to the server for the student statuses\r\n\r\n            //get the run id\r\n            var runId = this.ConfigService.getConfigParam('runId');\r\n\r\n            if (customPauseMessage != null) {\r\n                //set the pause message if one was provided\r\n                this.runStatus.pauseMessage = customPauseMessage;\r\n            }\r\n\r\n            //get the run status as a string\r\n            var runStatus = angular.toJson(this.runStatus);\r\n\r\n            //create the params for the request\r\n            var runStatusParams = {\r\n                runId:runId,\r\n                status:runStatus\r\n            };\r\n\r\n            var httpParams = {};\r\n            httpParams.method = 'POST';\r\n            httpParams.url = runStatusURL;\r\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n            httpParams.data = $.param(runStatusParams);\r\n\r\n            // make the request\r\n            this.$http(httpParams);\r\n        }\r\n    };\r\n}\r\n\r\nTeacherDataService.$inject = [\r\n    '$http',\r\n    '$q',\r\n    '$rootScope',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NotificationService',\r\n    'ProjectService',\r\n    'TeacherWebSocketService'\r\n];\r\n\r\nexport default TeacherDataService;\r\n"]}