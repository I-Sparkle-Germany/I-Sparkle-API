{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","studentData","currentPeriod","currentNode","previousStep","runStatus","periods","initializePeriods","$on","event","args","annotation","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","$broadcast","exportType","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getEvents","getAnnotations","httpParams","method","url","then","result","data","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","components","concat","periodId","workgroupId","retrieveStudentData","studentDataURL","resultData","studentWorkList","componentStates","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","i","length","componentState","componentStateWorkgroupId","componentStateNodeId","componentId","events","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","runStatusURL","headers","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","c","componentStateComponentId","getComponentStatesByWorkgroupId","getComponentStatesByNodeId","filter","n","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","setCurrentPeriod","period","previousPeriod","currentNodeId","id","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","p","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","x","value","createRunStatus","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","angular","toJson","runStatusParams","status","$","param","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                TeacherWebSocketService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.studentData = {};\n        this.currentPeriod = null;\n        this.currentNode = null;\n        this.previousStep = null;\n        this.runStatus = null;\n        this.periods = [];\n\n        this.initializePeriods();\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                // add the annotation to the local annotations array\n                this.studentData.annotations.push(annotation);\n\n                let toWorkgroupId = annotation.toWorkgroupId;\n                if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n                    this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n                }\n                this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n                let nodeId = annotation.nodeId;\n                if (this.studentData.annotationsByNodeId[nodeId] == null) {\n                    this.studentData.annotationsByNodeId[nodeId] = new Array();\n                }\n                this.studentData.annotationsByNodeId[nodeId].push(annotation);\n                \n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n\n                // broadcast the event that a new annotation has been received\n                this.$rootScope.$broadcast('annotationReceived', {annotation, annotation});\n            }\n        });\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        var exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        var runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        var params = {};\n        params.getStudentWork = true;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = exportURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        //var periodId = null;\n\n        //if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            //periodId = this.currentPeriod.periodId;\n        //}\n\n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        //params.periodId = periodId;\n        params.periodId = null;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        var studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (this.studentData == null) {\n                    this.studentData = {};\n                }\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId arrays\n                    this.studentData.componentStates = componentStates;\n                    this.studentData.componentStatesByWorkgroupId = {};\n                    this.studentData.componentStatesByNodeId = {};\n                    this.studentData.componentStatesByComponentId = {};\n\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n\n                        var componentStateWorkgroupId = componentState.workgroupId;\n                        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n                            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n                        }\n                        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n\n                        var componentStateNodeId = componentState.nodeId;\n                        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n                            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n                        }\n                        this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n\n                        var componentId = componentState.componentId;\n                        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n                            this.studentData.componentStatesByComponentId[componentId] = new Array();\n                        }\n                        this.studentData.componentStatesByComponentId[componentId].push(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n        let periods = this.ConfigService.getPeriods();\n        let currentPeriod = null;\n\n        if (periods.length > 1) {\n            // create an option for all periods\n            let allPeriodsOption = {\n                periodId: -1,\n                periodName: 'All'\n            };\n\n            periods.unshift(allPeriodsOption);\n            currentPeriod = periods[0];\n        }\n\n        this.periods = periods;\n\n        // set the current period\n        if (currentPeriod) {\n            this.setCurrentPeriod(currentPeriod);\n        }\n    }\n\n    setCurrentPeriod(period) {\n        let previousPeriod = this.currentPeriod;\n        this.currentPeriod = period;\n\n        // broadcast the event that the current period has changed\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n    }\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    }\n\n    getPeriods() {\n        return this.periods;\n    }\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    }\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    }\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            let node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    }\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        let previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    }\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    }\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n        // end the current node\n        this.endCurrentNode();\n\n        // set the current node\n        this.setCurrentNodeByNodeId(nodeId);\n    }\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    isPaused = period.paused;\n                    if (periodId == period.periodId) {\n                        // we have found the period we are looking for\n                        break;\n                    } else {\n                        if (isPaused) {\n                            nPeriodsPaused++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\n                isPaused = true;\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * The pause screen status was changed. update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n\n        // get the currently selected period Id\n        let periodId = this.currentPeriod.periodId;\n\n        // update the run status\n        this.updatePausedRunStatusValue(periodId, isPaused);\n\n        if (isPaused) {\n            // pause the student screens\n            this.TeacherWebSocketService.pauseScreens(periodId);\n        } else {\n            // unpause the student screens\n            this.TeacherWebSocketService.unPauseScreens(periodId);\n        }\n\n        // save the run status to the server\n        this.sendRunStatus();\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        // get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        // get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for (var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        // set the periods into the run status\n        runStatus.periods = periods;\n\n        // set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if (this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        let runStatus = this.runStatus;\n\n        let periods = runStatus.periods;\n\n        if (periods) {\n            //loop through all the periods\n            for (let x = 0; x < periods.length; x++) {\n                //get a period\n                let tempPeriod = periods[x];\n\n                //get the period id\n                let tempPeriodId = tempPeriod.periodId;\n\n                //check if the period id matches the one we need to update or if all periods has been selected\n                if (periodId === tempPeriodId || periodId === -1) {\n                    //we have found the period we want to update\n                    tempPeriod.paused = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if(runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if(customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            }\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = ['$http',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'TeacherWebSocketService'\n];\n\nexport default TeacherDataService;\n"]}