{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","studentData","currentPeriod","currentNode","previousStep","runStatus","periods","initializePeriods","$on","event","args","annotation","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","$broadcast","exportType","exportURL","getConfigParam","runId","getRunId","params","httpParams","method","url","then","result","data","context","componentId","componentType","category","newEvent","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","components","concat","periodId","retrieveStudentData","getStudentWork","getEvents","getAnnotations","studentDataURL","resultData","studentWorkList","componentStates","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","i","length","componentState","componentStateWorkgroupId","componentStateNodeId","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","runStatusURL","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","c","componentStateComponentId","getComponentStatesByWorkgroupId","getComponentStatesByNodeId","filter","n","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","setCurrentPeriod","period","previousPeriod","currentNodeId","id","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","p","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","x","value","createRunStatus","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                TeacherWebSocketService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.studentData = {};\n        this.currentPeriod = null;\n        this.currentNode = null;\n        this.previousStep = null;\n        this.runStatus = null;\n        this.periods = [];\n\n        this.initializePeriods();\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args) {\n\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n\n                // add the annotation to the local annotations array\n                this.studentData.annotations.push(annotation);\n\n                let toWorkgroupId = annotation.toWorkgroupId;\n                if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n                    this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n                }\n                this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n                let nodeId = annotation.nodeId;\n                if (this.studentData.annotationsByNodeId[nodeId] == null) {\n                    this.studentData.annotationsByNodeId[nodeId] = new Array();\n                }\n                this.studentData.annotationsByNodeId[nodeId].push(annotation);\n                \n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n                // broadcast the event that a new annotation has been received\n                this.$rootScope.$broadcast('annotationReceived', {annotation, annotation});\n            }\n        });\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        var exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        var runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        var params = {};\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = exportURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Save events that occur in the Classroom Monitor to the server\n     * @param event the event object\n     * @returns a promise\n     */\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        let newEvent = {\n            runId : this.ConfigService.getRunId(),\n            workgroupId : this.ConfigService.getWorkgroupId(),\n            clientSaveTime : Date.parse(new Date()),\n            context : context,\n            nodeId : nodeId,\n            componentId : componentId,\n            type : componentType,\n            category : category,\n            event : event,\n            data : data\n        };\n\n        let events = [newEvent];\n\n        let params = {\n             runId : this.ConfigService.getRunId(),\n             workgroupId : this.ConfigService.getWorkgroupId(),\n             events : angular.toJson(events)\n        };\n\n        let httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n\n            var savedEvents = null;\n\n            if (result != null && result.data != null) {\n                let data = result.data;\n\n                if (data != null) {\n\n                    // get the saved events\n                    savedEvents = data.events;\n                }\n            }\n\n            return savedEvents;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        //var periodId = null;\n\n        //if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            //periodId = this.currentPeriod.periodId;\n        //}\n\n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        //params.periodId = periodId;\n        params.periodId = null;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        var studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (this.studentData == null) {\n                    this.studentData = {};\n                }\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId arrays\n                    this.studentData.componentStates = componentStates;\n                    this.studentData.componentStatesByWorkgroupId = {};\n                    this.studentData.componentStatesByNodeId = {};\n                    this.studentData.componentStatesByComponentId = {};\n\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n\n                        var componentStateWorkgroupId = componentState.workgroupId;\n                        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n                            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n                        }\n                        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n\n                        var componentStateNodeId = componentState.nodeId;\n                        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n                            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n                        }\n                        this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n\n                        var componentId = componentState.componentId;\n                        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n                            this.studentData.componentStatesByComponentId[componentId] = new Array();\n                        }\n                        this.studentData.componentStatesByComponentId[componentId].push(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        };\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n        let periods = this.ConfigService.getPeriods();\n        let currentPeriod = null;\n\n        if (periods.length > 1) {\n            // create an option for all periods\n            let allPeriodsOption = {\n                periodId: -1,\n                periodName: 'All'\n            };\n\n            periods.unshift(allPeriodsOption);\n            currentPeriod = periods[0];\n        }\n\n        this.periods = periods;\n\n        // set the current period\n        if (currentPeriod) {\n            this.setCurrentPeriod(currentPeriod);\n        }\n    }\n\n    setCurrentPeriod(period) {\n        let previousPeriod = this.currentPeriod;\n        this.currentPeriod = period;\n\n        // broadcast the event that the current period has changed\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n    }\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    }\n\n    getPeriods() {\n        return this.periods;\n    }\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    }\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    }\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            let node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    }\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        let previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    }\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    }\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n        // end the current node\n        this.endCurrentNode();\n\n        // set the current node\n        this.setCurrentNodeByNodeId(nodeId);\n    }\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    isPaused = period.paused;\n                    if (periodId == period.periodId) {\n                        // we have found the period we are looking for\n                        break;\n                    } else {\n                        if (isPaused) {\n                            nPeriodsPaused++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\n                isPaused = true;\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * The pause screen status was changed. update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n\n        // get the currently selected period Id\n        let periodId = this.currentPeriod.periodId;\n\n        // update the run status\n        this.updatePausedRunStatusValue(periodId, isPaused);\n\n        if (isPaused) {\n            // pause the student screens\n            this.TeacherWebSocketService.pauseScreens(periodId);\n        } else {\n            // unpause the student screens\n            this.TeacherWebSocketService.unPauseScreens(periodId);\n        }\n\n        // save the run status to the server\n        this.sendRunStatus();\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        // get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        // get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for (var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        // set the periods into the run status\n        runStatus.periods = periods;\n\n        // set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if (this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        let runStatus = this.runStatus;\n\n        let periods = runStatus.periods;\n\n        if (periods) {\n            //loop through all the periods\n            for (let x = 0; x < periods.length; x++) {\n                //get a period\n                let tempPeriod = periods[x];\n\n                //get the period id\n                let tempPeriodId = tempPeriod.periodId;\n\n                //check if the period id matches the one we need to update or if all periods has been selected\n                if (periodId === tempPeriodId || periodId === -1) {\n                    //we have found the period we want to update\n                    tempPeriod.paused = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if (runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if (customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            };\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = ['$http',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'TeacherWebSocketService'\n];\n\nexport default TeacherDataService;\n"]}