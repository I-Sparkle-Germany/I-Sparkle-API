{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$rootScope","AnnotationService","ConfigService","ProjectService","StudentDataService","TeacherWebSocketService","studentData","currentPeriod","currentNode","previousStep","runStatus","periods","initializePeriods","exportType","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getEvents","getAnnotations","httpParams","method","url","then","result","data","nodeId","periodId","periodName","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","components","concat","workgroupId","retrieveStudentData","toWorkgroupId","studentDataURL","resultData","studentWorkList","componentStates","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","i","length","componentState","componentStateWorkgroupId","Array","push","componentStateNodeId","componentId","events","allEvents","eventsByWorkgroupId","eventsByNodeId","event","eventWorkgroupId","eventNodeId","annotations","annotationsToWorkgroupId","annotationsByNodeId","annotation","annotationWorkgroupId","annotationNodeId","setAnnotations","runStatusURL","headers","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","c","componentStateComponentId","getComponentStatesByWorkgroupId","getComponentStatesByNodeId","filter","n","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","unshift","setCurrentPeriod","period","previousPeriod","$broadcast","currentNodeId","id","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","p","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","x","value","createRunStatus","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","angular","toJson","runStatusParams","status","$","param","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,kB;AAEF,gCAAYC,KAAZ,EACYC,UADZ,EAEYC,iBAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,kBALZ,EAMYC,uBANZ,EAMqC;AAAA;;AACjC,aAAKN,KAAL,GAAaA,KAAb;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,iBAAL,GAAyBA,iBAAzB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,uBAAL,GAA+BA,uBAA/B;;AAEA,aAAKC,WAAL,GAAmB,EAAnB;AACA,aAAKC,aAAL,GAAqB,IAArB;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKC,YAAL,GAAoB,IAApB;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACA,aAAKC,OAAL,GAAe,EAAf;;AAEA,aAAKC,iBAAL;AACH;;AAED;;;;;;;;kCAIUC,U,EAAY;AAClB,gBAAIC,YAAY,KAAKZ,aAAL,CAAmBa,cAAnB,CAAkC,kBAAlC,CAAhB;AACA,gBAAIC,QAAQ,KAAKd,aAAL,CAAmBe,QAAnB,EAAZ;AACAH,yBAAa,MAAME,KAAN,GAAc,GAAd,GAAoBH,UAAjC;;AAEA,gBAAIK,SAAS,EAAb;AACAA,mBAAOC,cAAP,GAAwB,IAAxB;AACAD,mBAAOE,SAAP,GAAmB,KAAnB;AACAF,mBAAOG,cAAP,GAAwB,IAAxB;;AAEA,gBAAIC,aAAa,EAAjB;AACAA,uBAAWC,MAAX,GAAoB,KAApB;AACAD,uBAAWE,GAAX,GAAiBV,SAAjB;AACAQ,uBAAWJ,MAAX,GAAoBA,MAApB;;AAEA,mBAAO,KAAKnB,KAAL,CAAWuB,UAAX,EAAuBG,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC3C,uBAAOA,OAAOC,IAAd;AACH,aAFM,CAAP;AAGH;;;;;AAED;;;;;oDAK4BC,M,EAAQ;;AAEhC,gBAAIC,WAAW,IAAf;;AAEA,gBAAI,KAAKtB,aAAL,IAAsB,IAAtB,IAA8B,KAAKA,aAAL,CAAmBuB,UAAnB,IAAiC,KAAnE,EAA0E;AACtED,2BAAW,KAAKtB,aAAL,CAAmBsB,QAA9B;AACH;;AAED;AACA,gBAAIE,yBAAyB,KAAK5B,cAAL,CAAoB6B,yBAApB,CAA8CJ,MAA9C,CAA7B;;AAEA;AACA,gBAAIK,yCAAyC,KAAK9B,cAAL,CAAoB+B,yCAApB,CAA8DN,MAA9D,CAA7C;;AAEA,gBAAIO,aAAa,EAAjB;AACAA,yBAAaA,WAAWC,MAAX,CAAkBL,sBAAlB,CAAb;AACAI,yBAAaA,WAAWC,MAAX,CAAkBH,sCAAlB,CAAb;;AAEA,gBAAIf,SAAS,EAAb;AACAA,mBAAOF,KAAP,GAAe,KAAKd,aAAL,CAAmBe,QAAnB,EAAf;AACAC,mBAAOW,QAAP,GAAkBA,QAAlB;AACAX,mBAAOmB,WAAP,GAAqB,IAArB;AACAnB,mBAAOiB,UAAP,GAAoBA,UAApB;;AAEA,mBAAO,KAAKG,mBAAL,CAAyBpB,MAAzB,CAAP;AACH;;;;;AAED;;;;;yDAKiCmB,W,EAAa;;AAE1C,gBAAInB,SAAS,EAAb;AACAA,mBAAOF,KAAP,GAAe,KAAKd,aAAL,CAAmBe,QAAnB,EAAf;AACAC,mBAAOW,QAAP,GAAkB,IAAlB;AACAX,mBAAOU,MAAP,GAAgB,IAAhB;AACAV,mBAAOmB,WAAP,GAAqBA,WAArB;AACAnB,mBAAOqB,aAAP,GAAuBF,WAAvB;;AAEA,mBAAO,KAAKC,mBAAL,CAAyBpB,MAAzB,CAAP;AACH;;;;;AAED;;;;8CAIsB;AAClB,gBAAIA,SAAS,EAAb;AACAA,mBAAOF,KAAP,GAAe,KAAKd,aAAL,CAAmBe,QAAnB,EAAf;AACAC,mBAAOW,QAAP,GAAkB,IAAlB;AACAX,mBAAOU,MAAP,GAAgB,IAAhB;AACAV,mBAAOmB,WAAP,GAAqB,IAArB;AACAnB,mBAAOqB,aAAP,GAAuB,IAAvB;AACArB,mBAAOC,cAAP,GAAwB,KAAxB;AACAD,mBAAOE,SAAP,GAAmB,KAAnB;AACAF,mBAAOG,cAAP,GAAwB,IAAxB;;AAEA,mBAAO,KAAKiB,mBAAL,CAAyBpB,MAAzB,CAAP;AACH;;;;;AAED;;;;;4CAKoBA,M,EAAQ;AAAA;;AACxB,gBAAIsB,iBAAiB,KAAKtC,aAAL,CAAmBa,cAAnB,CAAkC,gBAAlC,CAArB;;AAEA,gBAAIG,OAAOC,cAAP,IAAyB,IAA7B,EAAmC;AAC/BD,uBAAOC,cAAP,GAAwB,IAAxB;AACH;;AAED,gBAAID,OAAOE,SAAP,IAAoB,IAAxB,EAA8B;AAC1BF,uBAAOE,SAAP,GAAmB,KAAnB;AACH;;AAED,gBAAIF,OAAOG,cAAP,IAAyB,IAA7B,EAAmC;AAC/BH,uBAAOG,cAAP,GAAwB,IAAxB;AACH;;AAED,gBAAIC,aAAa,EAAjB;AACAA,uBAAWC,MAAX,GAAoB,KAApB;AACAD,uBAAWE,GAAX,GAAiBgB,cAAjB;AACAlB,uBAAWJ,MAAX,GAAoBA,MAApB;;AAEA,mBAAO,KAAKnB,KAAL,CAAWuB,UAAX,EAAuBG,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC3C,oBAAIe,aAAaf,OAAOC,IAAxB;AACA,oBAAIc,cAAc,IAAlB,EAAwB;;AAEpB,wBAAI,MAAKnC,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,8BAAKA,WAAL,GAAmB,EAAnB;AACH;;AAED,wBAAImC,WAAWC,eAAX,IAA8B,IAAlC,EAAwC;AACpC,4BAAIC,kBAAkBF,WAAWC,eAAjC;;AAEA;AACA,8BAAKpC,WAAL,CAAiBqC,eAAjB,GAAmCA,eAAnC;AACA,8BAAKrC,WAAL,CAAiBsC,4BAAjB,GAAgD,EAAhD;AACA,8BAAKtC,WAAL,CAAiBuC,uBAAjB,GAA2C,EAA3C;AACA,8BAAKvC,WAAL,CAAiBwC,4BAAjB,GAAgD,EAAhD;;AAEA,6BAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,gBAAgBK,MAApC,EAA4CD,GAA5C,EAAiD;AAC7C,gCAAIE,iBAAiBN,gBAAgBI,CAAhB,CAArB;;AAEA,gCAAIG,4BAA4BD,eAAeZ,WAA/C;AACA,gCAAI,MAAK/B,WAAL,CAAiBsC,4BAAjB,CAA8CM,yBAA9C,KAA4E,IAAhF,EAAsF;AAClF,sCAAK5C,WAAL,CAAiBsC,4BAAjB,CAA8CM,yBAA9C,IAA2E,IAAIC,KAAJ,EAA3E;AACH;AACD,kCAAK7C,WAAL,CAAiBsC,4BAAjB,CAA8CM,yBAA9C,EAAyEE,IAAzE,CAA8EH,cAA9E;;AAEA,gCAAII,uBAAuBJ,eAAerB,MAA1C;AACA,gCAAI,MAAKtB,WAAL,CAAiBuC,uBAAjB,CAAyCQ,oBAAzC,KAAkE,IAAtE,EAA4E;AACxE,sCAAK/C,WAAL,CAAiBuC,uBAAjB,CAAyCQ,oBAAzC,IAAiE,IAAIF,KAAJ,EAAjE;AACH;AACD,kCAAK7C,WAAL,CAAiBuC,uBAAjB,CAAyCQ,oBAAzC,EAA+DD,IAA/D,CAAoEH,cAApE;;AAEA,gCAAIK,cAAcL,eAAeK,WAAjC;AACA,gCAAI,MAAKhD,WAAL,CAAiBwC,4BAAjB,CAA8CQ,WAA9C,KAA8D,IAAlE,EAAwE;AACpE,sCAAKhD,WAAL,CAAiBwC,4BAAjB,CAA8CQ,WAA9C,IAA6D,IAAIH,KAAJ,EAA7D;AACH;AACD,kCAAK7C,WAAL,CAAiBwC,4BAAjB,CAA8CQ,WAA9C,EAA2DF,IAA3D,CAAgEH,cAAhE;AACH;AACJ;;AAED,wBAAIR,WAAWc,MAAX,IAAqB,IAAzB,EAA+B;AAC3B;AACA,8BAAKjD,WAAL,CAAiBkD,SAAjB,GAA6Bf,WAAWc,MAAxC;AACA,8BAAKjD,WAAL,CAAiBmD,mBAAjB,GAAuC,EAAvC;AACA,8BAAKnD,WAAL,CAAiBoD,cAAjB,GAAkC,EAAlC;AACA,6BAAK,IAAIX,IAAI,CAAb,EAAgBA,IAAIN,WAAWc,MAAX,CAAkBP,MAAtC,EAA8CD,GAA9C,EAAmD;AAC/C,gCAAIY,QAAQlB,WAAWc,MAAX,CAAkBR,CAAlB,CAAZ;AACA,gCAAIa,mBAAmBD,MAAMtB,WAA7B;AACA,gCAAI,MAAK/B,WAAL,CAAiBmD,mBAAjB,CAAqCG,gBAArC,KAA0D,IAA9D,EAAoE;AAChE,sCAAKtD,WAAL,CAAiBmD,mBAAjB,CAAqCG,gBAArC,IAAyD,IAAIT,KAAJ,EAAzD;AACH;AACD,kCAAK7C,WAAL,CAAiBmD,mBAAjB,CAAqCG,gBAArC,EAAuDR,IAAvD,CAA4DO,KAA5D;;AAEA,gCAAIE,cAAcF,MAAM/B,MAAxB;AACA,gCAAI,MAAKtB,WAAL,CAAiBoD,cAAjB,CAAgCG,WAAhC,KAAgD,IAApD,EAA0D;AACtD,sCAAKvD,WAAL,CAAiBoD,cAAjB,CAAgCG,WAAhC,IAA+C,IAAIV,KAAJ,EAA/C;AACH;AACD,kCAAK7C,WAAL,CAAiBoD,cAAjB,CAAgCG,WAAhC,EAA6CT,IAA7C,CAAkDO,KAAlD;AACH;AACJ;;AAED,wBAAIlB,WAAWqB,WAAX,IAA0B,IAA9B,EAAoC;AAChC;AACA,8BAAKxD,WAAL,CAAiBwD,WAAjB,GAA+BrB,WAAWqB,WAA1C;AACA,8BAAKxD,WAAL,CAAiByD,wBAAjB,GAA4C,EAA5C;AACA,8BAAKzD,WAAL,CAAiB0D,mBAAjB,GAAuC,EAAvC;AACA,6BAAK,IAAIjB,IAAI,CAAb,EAAgBA,IAAIN,WAAWqB,WAAX,CAAuBd,MAA3C,EAAmDD,GAAnD,EAAwD;AACpD,gCAAIkB,aAAaxB,WAAWqB,WAAX,CAAuBf,CAAvB,CAAjB;AACA,gCAAImB,wBAAwBD,WAAW1B,aAAvC;AACA,gCAAI,MAAKjC,WAAL,CAAiByD,wBAAjB,CAA0CG,qBAA1C,KAAoE,IAAxE,EAA8E;AAC1E,sCAAK5D,WAAL,CAAiByD,wBAAjB,CAA0CG,qBAA1C,IAAmE,IAAIf,KAAJ,EAAnE;AACH;AACD,kCAAK7C,WAAL,CAAiByD,wBAAjB,CAA0CG,qBAA1C,EAAiEd,IAAjE,CAAsEa,UAAtE;;AAEA,gCAAIE,mBAAmBF,WAAWrC,MAAlC;AACA,gCAAI,MAAKtB,WAAL,CAAiB0D,mBAAjB,CAAqCG,gBAArC,KAA0D,IAA9D,EAAoE;AAChE,sCAAK7D,WAAL,CAAiB0D,mBAAjB,CAAqCG,gBAArC,IAAyD,IAAIhB,KAAJ,EAAzD;AACH;AACD,kCAAK7C,WAAL,CAAiB0D,mBAAjB,CAAqCG,gBAArC,EAAuDf,IAAvD,CAA4Da,UAA5D;AACH;AACJ;;AAED,0BAAKhE,iBAAL,CAAuBmE,cAAvB,CAAsC,MAAK9D,WAAL,CAAiBwD,WAAvD;AACH;AACJ,aApFM,CAAP;AAqFH;;;;;AAED;;;4CAGoB;AAAA;;AAChB,gBAAIO,eAAe,KAAKnE,aAAL,CAAmBa,cAAnB,CAAkC,cAAlC,CAAnB;AACA,gBAAIC,QAAQ,KAAKd,aAAL,CAAmBa,cAAnB,CAAkC,OAAlC,CAAZ;;AAEA;AACA,gBAAIG,SAAS;AACTF,uBAAMA;AADG,aAAb;;AAIA,gBAAIM,aAAa,EAAjB;AACAA,uBAAWC,MAAX,GAAoB,KAApB;AACAD,uBAAWE,GAAX,GAAiB6C,YAAjB;AACA/C,uBAAWgD,OAAX,GAAqB,EAAC,gBAAgB,mCAAjB,EAArB;AACAhD,uBAAWJ,MAAX,GAAoBA,MAApB;;AAEA;AACA,mBAAO,KAAKnB,KAAL,CAAWuB,UAAX,EAAuBG,IAAvB,CAA4B,UAACC,MAAD,EAAY;AAC3C,oBAAIA,UAAU,IAAd,EAAoB;AAChB,wBAAIC,OAAOD,OAAOC,IAAlB;AACA,wBAAIA,QAAQ,IAAZ,EAAkB;AACd;AACA,+BAAKjB,SAAL,GAAiBiB,IAAjB;AACH;AACJ;AACJ,aARM,CAAP;AASH;;;wDAE+BU,W,EAAa;AACzC,gBAAI,KAAK/B,WAAL,CAAiBsC,4BAAjB,IAAiD,IAArD,EAA2D;AACvD;AACH;AACD,gBAAIA,+BAA+B,KAAKtC,WAAL,CAAiBsC,4BAAjB,CAA8CP,WAA9C,CAAnC;AACA,gBAAIO,gCAAgC,IAApC,EAA0C;AACtC,uBAAOA,4BAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;mDAE0BhB,M,EAAQ;AAC/B,gBAAIiB,0BAA0B,KAAKvC,WAAL,CAAiBuC,uBAAjB,CAAyCjB,MAAzC,CAA9B;AACA,gBAAIiB,2BAA2B,IAA/B,EAAqC;AACjC,uBAAOA,uBAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;AAED;;;;;;;;wDAKgCS,W,EAAa;AACzC,gBAAIX,kBAAkB,EAAtB;;AAEA,gBAAIG,+BAA+B,KAAKxC,WAAL,CAAiBwC,4BAAjB,CAA8CQ,WAA9C,CAAnC;;AAEA,gBAAIR,gCAAgC,IAApC,EAA0C;AACtCH,kCAAkBG,4BAAlB;AACH;;AAED,mBAAOH,eAAP;AACH;;;iFAEwDN,W,EAAaT,M,EAAQ0B,W,EAAa;AACvF,gBAAIiB,uBAAuB,IAA3B;;AAEA,gBAAI5B,kBAAkB,KAAK6B,wCAAL,CAA8CnC,WAA9C,EAA2DT,MAA3D,CAAtB;;AAEA,gBAAIe,mBAAmB,IAAvB,EAA6B;;AAEzB;AACA,qBAAK,IAAI8B,IAAI9B,gBAAgBK,MAAhB,GAAyB,CAAtC,EAAyCyB,KAAK,CAA9C,EAAiDA,GAAjD,EAAsD;AAClD,wBAAIxB,iBAAiBN,gBAAgB8B,CAAhB,CAArB;;AAEA,wBAAIxB,kBAAkB,IAAtB,EAA4B;AACxB,4BAAII,uBAAuBJ,eAAerB,MAA1C;AACA,4BAAI8C,4BAA4BzB,eAAeK,WAA/C;;AAEA;AACA,4BAAI1B,UAAUyB,oBAAV,IACAC,eAAeoB,yBADnB,EAC8C;AAC1CH,mDAAuBtB,cAAvB;AACA;AACH;AACJ;AACJ;AACJ;;AAED,mBAAOsB,oBAAP;AACH;;;iEAEwClC,W,EAAaT,M,EAAQ;;AAE1D,gBAAIgB,+BAA+B,KAAK+B,+BAAL,CAAqCtC,WAArC,CAAnC;AACA,gBAAIQ,0BAA0B,KAAK+B,0BAAL,CAAgChD,MAAhC,CAA9B;;AAEA;AACA,mBAAOgB,6BAA6BiC,MAA7B,CAAoC,UAACC,CAAD,EAAO;AAC9C,uBAAOjC,wBAAwBkC,OAAxB,CAAgCD,CAAhC,KAAsC,CAAC,CAA9C;AACH,aAFM,CAAP;AAGH;;AAED;;;;;;;;;sEAM8CzC,W,EAAaiB,W,EAAa;AACpE,gBAAIV,+BAA+B,KAAK+B,+BAAL,CAAqCtC,WAArC,CAAnC;AACA,gBAAIS,+BAA+B,KAAKkC,+BAAL,CAAqC1B,WAArC,CAAnC;;AAEA;AACA,mBAAOV,6BAA6BiC,MAA7B,CAAoC,UAACC,CAAD,EAAO;AAC9C,uBAAOhC,6BAA6BiC,OAA7B,CAAqCD,CAArC,KAA2C,CAAC,CAAnD;AACH,aAFM,CAAP;AAGH;;;+CAEsBzC,W,EAAa;AAChC,gBAAIoB,sBAAsB,KAAKnD,WAAL,CAAiBmD,mBAAjB,CAAqCpB,WAArC,CAA1B;AACA,gBAAIoB,uBAAuB,IAA3B,EAAiC;AAC7B,uBAAOA,mBAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;0CAEiB7B,M,EAAQ;AACtB,gBAAI8B,iBAAiB,KAAKpD,WAAL,CAAiBoD,cAAjB,CAAgC9B,MAAhC,CAArB;AACA,gBAAI8B,kBAAkB,IAAtB,EAA4B;AACxB,uBAAOA,cAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;wDAE+BrB,W,EAAaT,M,EAAQ;AACjD,gBAAI6B,sBAAsB,KAAKwB,sBAAL,CAA4B5C,WAA5B,CAA1B;AACA,gBAAIqB,iBAAiB,KAAKwB,iBAAL,CAAuBtD,MAAvB,CAArB;;AAEA;AACA,mBAAO6B,oBAAoBoB,MAApB,CAA2B,UAACC,CAAD,EAAO;AACrC,uBAAOpB,eAAeqB,OAAf,CAAuBD,CAAvB,KAA6B,CAAC,CAArC;AACH,aAFM,CAAP;AAGH;;;oDAE2BzC,W,EAAa;AACrC,gBAAI0B,2BAA2B,KAAKzD,WAAL,CAAiByD,wBAAjB,CAA0C1B,WAA1C,CAA/B;AACA,gBAAI0B,4BAA4B,IAAhC,EAAsC;AAClC,uBAAOA,wBAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;+CAEsBnC,M,EAAQ;AAC3B,gBAAIoC,sBAAsB,KAAK1D,WAAL,CAAiB0D,mBAAjB,CAAqCpC,MAArC,CAA1B;AACA,gBAAIoC,uBAAuB,IAA3B,EAAiC;AAC7B,uBAAOA,mBAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;;;6DAEoC3B,W,EAAaT,M,EAAQ;AACtD,gBAAImC,2BAA2B,KAAKoB,2BAAL,CAAiC9C,WAAjC,CAA/B;AACA,gBAAI2B,sBAAsB,KAAKoB,sBAAL,CAA4BxD,MAA5B,CAA1B;;AAEA;AACA,mBAAOmC,yBAAyBc,MAAzB,CAAgC,UAACC,CAAD,EAAO;AAC1C,uBAAOd,oBAAoBe,OAApB,CAA4BD,CAA5B,KAAkC,CAAC,CAA1C;AACH,aAFM,CAAP;AAGH;;AAED;;;;;;4CAGoB;AAChB,gBAAInE,UAAU,KAAKT,aAAL,CAAmBmF,UAAnB,EAAd;AACA,gBAAI9E,gBAAgB,IAApB;;AAEA,gBAAII,QAAQqC,MAAZ,EAAoB;AAChBzC,gCAAgBI,QAAQ,CAAR,CAAhB;AACH;;AAED,gBAAIA,QAAQqC,MAAR,GAAiB,CAArB,EAAwB;AACpB;AACA,oBAAIsC,mBAAmB;AACnBzD,8BAAU,CAAC,CADQ;AAEnBC,gCAAY;AAFO,iBAAvB;;AAKAnB,wBAAQ4E,OAAR,CAAgBD,gBAAhB;AACH;;AAED,iBAAK3E,OAAL,GAAeA,OAAf;;AAEA;AACA,gBAAIJ,aAAJ,EAAmB;AACf,qBAAKiF,gBAAL,CAAsBjF,aAAtB;AACH;AACJ;;;yCAEgBkF,M,EAAQ;AACrB,gBAAIC,iBAAiB,KAAKnF,aAA1B;AACA,iBAAKA,aAAL,GAAqBkF,MAArB;;AAEA;AACA,iBAAKzF,UAAL,CAAgB2F,UAAhB,CAA2B,sBAA3B,EAAmD,EAACD,gBAAgBA,cAAjB,EAAiCnF,eAAe,KAAKA,aAArD,EAAnD;AACH;;;2CAEkB;AACf,mBAAO,KAAKA,aAAZ;AACH;;;qCAEY;AACT,mBAAO,KAAKI,OAAZ;AACH;;AAED;;;;;;;yCAIiB;AACb,mBAAO,KAAKH,WAAZ;AACH;;AAED;;;;;;;2CAImB;AACf,gBAAIoF,gBAAgB,IAApB;;AAEA,gBAAI,KAAKpF,WAAL,IAAoB,IAAxB,EAA8B;AAC1BoF,gCAAgB,KAAKpF,WAAL,CAAiBqF,EAAjC;AACH;;AAED,mBAAOD,aAAP;AACH;;AAED;;;;;;;+CAIuBhE,M,EAAQ;AAC3B,gBAAIA,UAAU,IAAd,EAAoB;AAChB,oBAAIkE,OAAO,KAAK3F,cAAL,CAAoB4F,WAApB,CAAgCnE,MAAhC,CAAX;;AAEA,qBAAKoE,cAAL,CAAoBF,IAApB;AACH;AACJ;;AAED;;;;;;;uCAIeA,I,EAAM;AACjB,gBAAIG,sBAAsB,KAAKzF,WAA/B;;AAEA,gBAAIyF,wBAAwBH,IAA5B,EAAkC;AAC9B;;AAEA,oBAAIG,uBAAuB,CAAC,KAAK9F,cAAL,CAAoB+F,WAApB,CAAgCD,oBAAoBJ,EAApD,CAA5B,EAAoF;AAChF;AACA,yBAAKpF,YAAL,GAAoBwF,mBAApB;AACH;;AAED;AACA,qBAAKzF,WAAL,GAAmBsF,IAAnB;;AAEA;AACA,qBAAK9F,UAAL,CAAgB2F,UAAhB,CAA2B,oBAA3B,EAAiD,EAACQ,cAAcF,mBAAf,EAAoCzF,aAAa,KAAKA,WAAtD,EAAjD;AACH;AACJ;;AAED;;;;;;yCAGiB;;AAEb;AACA,gBAAIyF,sBAAsB,KAAKzF,WAA/B;;AAEA,gBAAIyF,uBAAuB,IAA3B,EAAiC;;AAE7B;AACA,qBAAKjG,UAAL,CAAgB2F,UAAhB,CAA2B,UAA3B,EAAuC,EAACS,YAAYH,mBAAb,EAAvC;AACH;AACJ;;AAED;;;;;;;gEAIwCrE,M,EAAQ;AAC5C;AACA,iBAAKyE,cAAL;;AAEA;AACA,iBAAKC,sBAAL,CAA4B1E,MAA5B;AACH;;AAED;;;;;;;;mDAK2BS,W,EAAa;;AAEpC,gBAAIkE,aAAa,IAAjB;;AAEA,gBAAI,KAAKjG,WAAL,CAAiByD,wBAAjB,IAA6C,IAAjD,EAAuD;;AAEnD;AACA,oBAAID,cAAc,KAAKxD,WAAL,CAAiByD,wBAAjB,CAA0C1B,WAA1C,CAAlB;;AAEA;AACAkE,6BAAa,KAAKtG,iBAAL,CAAuBuG,aAAvB,CAAqC1C,WAArC,EAAkDzB,WAAlD,CAAb;AACH;;AAED,mBAAOkE,UAAP;AACH;;AAED;;;;;;;uCAIe;AACX,mBAAO,KAAK7F,SAAZ;AACH;;AAED;;;;;;;uCAIemB,Q,EAAU;;AAErB,gBAAI4E,WAAW,KAAf;;AAEA;AACA,gBAAI/F,YAAY,KAAKA,SAArB;;AAEA,gBAAIA,aAAaA,UAAUC,OAA3B,EAAoC;AAChC,oBAAIA,UAAUD,UAAUC,OAAxB;AACA,oBAAI+F,WAAW/F,QAAQqC,MAAvB;AACA,oBAAI2D,iBAAiB,CAArB;;AAEA;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIjG,QAAQqC,MAA5B,EAAoC4D,GAApC,EAAyC;AACrC,wBAAInB,SAAS9E,QAAQiG,CAAR,CAAb;;AAEA,wBAAInB,UAAU,IAAd,EAAoB;AAChBgB,mCAAWhB,OAAOoB,MAAlB;AACA,4BAAIhF,YAAY4D,OAAO5D,QAAvB,EAAiC;AAC7B;AACA;AACH,yBAHD,MAGO;AACH,gCAAI4E,QAAJ,EAAc;AACVE;AACH,6BAFD,MAEO;AACH;AACH;AACJ;AACJ;AACJ;;AAED,oBAAI9E,aAAa,CAAC,CAAd,IAAmB6E,aAAaC,cAApC,EAAoD;AAChDF,+BAAW,IAAX;AACH;AACJ;;AAED,mBAAOA,QAAP;AACH;;AAED;;;;;;4CAGoBA,Q,EAAU;;AAE1B;AACA,gBAAI5E,WAAW,KAAKtB,aAAL,CAAmBsB,QAAlC;;AAEA;AACA,iBAAKiF,0BAAL,CAAgCjF,QAAhC,EAA0C4E,QAA1C;;AAEA,gBAAIA,QAAJ,EAAc;AACV;AACA,qBAAKpG,uBAAL,CAA6B0G,YAA7B,CAA0ClF,QAA1C;AACH,aAHD,MAGO;AACH;AACA,qBAAKxB,uBAAL,CAA6B2G,cAA7B,CAA4CnF,QAA5C;AACH;;AAED;AACA,iBAAKoF,aAAL;AACH;;AAED;;;;;;;0CAIkB;AACd,gBAAIvG,YAAY,EAAhB;;AAEA;AACAA,sBAAUM,KAAV,GAAkB,KAAKd,aAAL,CAAmBa,cAAnB,CAAkC,OAAlC,CAAlB;;AAEA;AACA,gBAAIJ,UAAU,KAAKT,aAAL,CAAmBmF,UAAnB,EAAd;;AAEA;AACA,iBAAK,IAAI6B,IAAI,CAAb,EAAgBA,IAAIvG,QAAQqC,MAA5B,EAAoCkE,GAApC,EAAyC;AACrC;AACA,oBAAIzB,SAAS9E,QAAQuG,CAAR,CAAb;;AAEA;AACAzB,uBAAOoB,MAAP,GAAgB,KAAhB;AACH;;AAED;AACAnG,sBAAUC,OAAV,GAAoBA,OAApB;;AAEA;AACA,iBAAKD,SAAL,GAAiBA,SAAjB;;AAEA,mBAAO,KAAKA,SAAZ;AACH;;AAED;;;;;;;;mDAK2BmB,Q,EAAUsF,K,EAAO;AACxC;AACA,gBAAI,KAAKzG,SAAL,IAAkB,IAAtB,EAA4B;AACxB,qBAAK0G,eAAL;AACH;;AAED;AACA,gBAAI1G,YAAY,KAAKA,SAArB;;AAEA,gBAAIC,UAAUD,UAAUC,OAAxB;;AAEA,gBAAIA,OAAJ,EAAa;AACT;AACA,qBAAK,IAAIuG,IAAI,CAAb,EAAgBA,IAAIvG,QAAQqC,MAA5B,EAAoCkE,GAApC,EAAyC;AACrC;AACA,wBAAIG,aAAa1G,QAAQuG,CAAR,CAAjB;;AAEA;AACA,wBAAII,eAAeD,WAAWxF,QAA9B;;AAEA;AACA,wBAAIA,aAAayF,YAAb,IAA6BzF,aAAa,CAAC,CAA/C,EAAkD;AAC9C;AACAwF,mCAAWR,MAAX,GAAoBM,KAApB;AACH;AACJ;AACJ;AACJ;;AAED;;;;;;;sCAIcI,kB,EAAoB;AAC9B;AACA,gBAAIlD,eAAe,KAAKnE,aAAL,CAAmBa,cAAnB,CAAkC,cAAlC,CAAnB;;AAEA,gBAAGsD,gBAAgB,IAAnB,EAAyB;AACrB;;AAEA;AACA,oBAAIrD,QAAQ,KAAKd,aAAL,CAAmBa,cAAnB,CAAkC,OAAlC,CAAZ;;AAEA,oBAAGwG,sBAAsB,IAAzB,EAA+B;AAC3B;AACA,yBAAK7G,SAAL,CAAe8G,YAAf,GAA8BD,kBAA9B;AACH;;AAED;AACA,oBAAI7G,YAAY+G,QAAQC,MAAR,CAAe,KAAKhH,SAApB,CAAhB;;AAEA;AACA,oBAAIiH,kBAAkB;AAClB3G,2BAAMA,KADY;AAElB4G,4BAAOlH;AAFW,iBAAtB;;AAKA,oBAAIY,aAAa,EAAjB;AACAA,2BAAWC,MAAX,GAAoB,MAApB;AACAD,2BAAWE,GAAX,GAAiB6C,YAAjB;AACA/C,2BAAWgD,OAAX,GAAqB,EAAC,gBAAgB,mCAAjB,EAArB;AACAhD,2BAAWK,IAAX,GAAkBkG,EAAEC,KAAF,CAAQH,eAAR,CAAlB;;AAEA;AACA,qBAAK5H,KAAL,CAAWuB,UAAX;AACH;AACJ;;;;;;AAGLxB,mBAAmBiI,OAAnB,GAA6B,CAAC,OAAD,EACzB,YADyB,EAEzB,mBAFyB,EAGzB,eAHyB,EAIzB,gBAJyB,EAKzB,oBALyB,EAMzB,yBANyB,CAA7B;;kBASejI,kB","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                ProjectService,\n                StudentDataService,\n                TeacherWebSocketService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.studentData = {};\n        this.currentPeriod = null;\n        this.currentNode = null;\n        this.previousStep = null;\n        this.runStatus = null;\n        this.periods = [];\n\n        this.initializePeriods();\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        var exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        var runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        var params = {};\n        params.getStudentWork = true;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = exportURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        var periodId = null;\n\n        if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            periodId = this.currentPeriod.periodId;\n        }\n\n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = periodId;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        var studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (this.studentData == null) {\n                    this.studentData = {};\n                }\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId arrays\n                    this.studentData.componentStates = componentStates;\n                    this.studentData.componentStatesByWorkgroupId = {};\n                    this.studentData.componentStatesByNodeId = {};\n                    this.studentData.componentStatesByComponentId = {};\n\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n\n                        var componentStateWorkgroupId = componentState.workgroupId;\n                        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n                            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n                        }\n                        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n\n                        var componentStateNodeId = componentState.nodeId;\n                        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n                            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n                        }\n                        this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n\n                        var componentId = componentState.componentId;\n                        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n                            this.studentData.componentStatesByComponentId[componentId] = new Array();\n                        }\n                        this.studentData.componentStatesByComponentId[componentId].push(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] == null) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (this.studentData.annotationsByNodeId[annotationNodeId] == null) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n        let periods = this.ConfigService.getPeriods();\n        let currentPeriod = null;\n\n        if (periods.length) {\n            currentPeriod = periods[0];\n        }\n\n        if (periods.length > 1) {\n            // create an option for all periods\n            let allPeriodsOption = {\n                periodId: -1,\n                periodName: 'All'\n            };\n\n            periods.unshift(allPeriodsOption);\n        }\n\n        this.periods = periods;\n\n        // set the current period\n        if (currentPeriod) {\n            this.setCurrentPeriod(currentPeriod);\n        }\n    }\n\n    setCurrentPeriod(period) {\n        let previousPeriod = this.currentPeriod;\n        this.currentPeriod = period;\n\n        // broadcast the event that the current period has changed\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n    }\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    }\n\n    getPeriods() {\n        return this.periods;\n    }\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    }\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    }\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            let node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    }\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        let previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    }\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    }\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n        // end the current node\n        this.endCurrentNode();\n\n        // set the current node\n        this.setCurrentNodeByNodeId(nodeId);\n    }\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    isPaused = period.paused;\n                    if (periodId == period.periodId) {\n                        // we have found the period we are looking for\n                        break;\n                    } else {\n                        if (isPaused) {\n                            nPeriodsPaused++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\n                isPaused = true;\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * The pause screen status was changed. update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n\n        // get the currently selected period Id\n        let periodId = this.currentPeriod.periodId;\n\n        // update the run status\n        this.updatePausedRunStatusValue(periodId, isPaused);\n\n        if (isPaused) {\n            // pause the student screens\n            this.TeacherWebSocketService.pauseScreens(periodId);\n        } else {\n            // unpause the student screens\n            this.TeacherWebSocketService.unPauseScreens(periodId);\n        }\n\n        // save the run status to the server\n        this.sendRunStatus();\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        // get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        // get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for (var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        // set the periods into the run status\n        runStatus.periods = periods;\n\n        // set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if (this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        let runStatus = this.runStatus;\n\n        let periods = runStatus.periods;\n\n        if (periods) {\n            //loop through all the periods\n            for (let x = 0; x < periods.length; x++) {\n                //get a period\n                let tempPeriod = periods[x];\n\n                //get the period id\n                let tempPeriodId = tempPeriod.periodId;\n\n                //check if the period id matches the one we need to update or if all periods has been selected\n                if (periodId === tempPeriodId || periodId === -1) {\n                    //we have found the period we want to update\n                    tempPeriod.paused = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if(runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if(customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            }\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = ['$http',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'TeacherWebSocketService'\n];\n\nexport default TeacherDataService;\n"]}