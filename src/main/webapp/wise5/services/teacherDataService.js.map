{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentNode","previousStep","runStatus","periods","nodeGradingSort","initializePeriods","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","exportURL","getConfigParam","runId","getRunId","window","location","href","deferred","defer","promise","resolve","httpParams","method","url","params","then","result","data","context","componentId","componentType","category","newEvent","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","components","concat","periodId","retrieveStudentData","getStudentWork","getEvents","getAnnotations","studentDataURL","resultData","studentWorkList","componentStates","i","length","componentState","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","cs","id","componentStateNodeId","n","c","runStatusURL","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","getComponentStatesByWorkgroupId","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","setCurrentPeriod","period","previousPeriod","currentNodeId","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","p","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","saveEvent","x","value","createRunStatus","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $q,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                TeacherWebSocketService) {\n        this.$http = $http;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n\n        this.studentData = {\n            componentStatesByWorkgroupId: {},\n            componentStatesByNodeId: {},\n            componentStatesByComponentId: {}\n        };\n\n        this.currentPeriod = null;\n        this.currentNode = null;\n        this.previousStep = null;\n        this.runStatus = null;\n        this.periods = [];\n        this.nodeGradingSort = 'team';\n\n        this.initializePeriods();\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args) {\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n                this.handleAnnotationReceived(annotation);\n            }\n        });\n\n        /**\n         * Listen for the 'newAnnotationReceived' event which is fired when\n         * teacher receives a new annotation (usually on a student work) from the server\n         */\n        this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n\n            if (args) {\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n                this.handleAnnotationReceived(annotation);\n            }\n        });\n\n        /**\n         * Listen for the 'newStudentWorkReceived' event which is fired when\n         * teacher receives a new student work from the server\n         */\n        this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\n\n            if (args) {\n                // get the student work (component state) that was saved to the server\n                let studentWork = args.studentWork;\n                this.addOrUpdateComponentState(studentWork);\n                // broadcast the event that a new work has been received\n                this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\n            }\n        });\n    }\n\n    handleAnnotationReceived(annotation) {\n        // add the annotation to the local annotations array\n        this.studentData.annotations.push(annotation);\n\n        let toWorkgroupId = annotation.toWorkgroupId;\n        if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n            this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n        }\n        this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n        let nodeId = annotation.nodeId;\n        if (this.studentData.annotationsByNodeId[nodeId] == null) {\n            this.studentData.annotationsByNodeId[nodeId] = new Array();\n        }\n        this.studentData.annotationsByNodeId[nodeId].push(annotation);\n\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n        // broadcast the event that a new annotation has been received\n        this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        let runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        if (exportType === \"studentAssets\") {\n            window.location.href = exportURL;\n            let deferred = this.$q.defer();\n            let promise = deferred.promise;\n            deferred.resolve([]);\n            return promise;\n        } else {\n            let httpParams = {\n                method : 'GET',\n                url : exportURL,\n                params : {}\n            };\n\n            return this.$http(httpParams).then((result) => {\n                return result.data;\n            });\n        }\n    };\n\n    /**\n     * Save events that occur in the Classroom Monitor to the server\n     * @param event the event object\n     * @returns a promise\n     */\n    saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n        let newEvent = {\n            runId : this.ConfigService.getRunId(),\n            workgroupId : this.ConfigService.getWorkgroupId(),\n            clientSaveTime : Date.parse(new Date()),\n            context : context,\n            nodeId : nodeId,\n            componentId : componentId,\n            type : componentType,\n            category : category,\n            event : event,\n            data : data\n        };\n\n        let events = [newEvent];\n\n        let params = {\n             runId : this.ConfigService.getRunId(),\n             workgroupId : this.ConfigService.getWorkgroupId(),\n             events : angular.toJson(events)\n        };\n\n        let httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n\n            var savedEvents = null;\n\n            if (result != null && result.data != null) {\n                let data = result.data;\n\n                if (data != null) {\n\n                    // get the saved events\n                    savedEvents = data.events;\n                }\n            }\n\n            return savedEvents;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        //var periodId = null;\n\n        //if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            //periodId = this.currentPeriod.periodId;\n        //}\n\n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        //params.periodId = periodId;\n        params.periodId = null;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        let httpParams = {\n            \"method\": \"GET\",\n            \"url\": studentDataURL,\n            \"params\": params\n        };\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n                        this.addOrUpdateComponentState(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Add ComponentState to local bookkeeping\n     * @param componentState the ComponentState to add\n     */\n    addOrUpdateComponentState(componentState) {\n        var componentStateWorkgroupId = componentState.workgroupId;\n        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n        }\n        let found = false;\n        for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\n            let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\n                found = true;  // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n        }\n\n        var componentStateNodeId = componentState.nodeId;\n        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n        }\n        found = false;  // reset\n        for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\n            let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\n                found = true; // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n        }\n\n        var componentId = componentState.componentId;\n        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n            this.studentData.componentStatesByComponentId[componentId] = new Array();\n        }\n        found = false;  // reset\n        for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\n            let cs = this.studentData.componentStatesByComponentId[componentId][c];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByComponentId[componentId][c] = componentState\n                found = true; // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByComponentId[componentId].push(componentState);\n        }\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        };\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n        let periods = this.ConfigService.getPeriods();\n        let currentPeriod = null;\n\n        if (periods.length > 1) {\n            // create an option for all periods\n            let allPeriodsOption = {\n                periodId: -1,\n                periodName: 'All'\n            };\n\n            periods.unshift(allPeriodsOption);\n            currentPeriod = periods[0];\n        } else if (periods.length == 1) {\n            currentPeriod = periods[0];\n        }\n\n        this.periods = periods;\n\n        // set the current period\n        if (currentPeriod) {\n            this.setCurrentPeriod(currentPeriod);\n        }\n    }\n\n    setCurrentPeriod(period) {\n        let previousPeriod = this.currentPeriod;\n        this.currentPeriod = period;\n\n        // broadcast the event that the current period has changed\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n    }\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    }\n\n    getPeriods() {\n        return this.periods;\n    }\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    }\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    }\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            let node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    }\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        let previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    }\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    }\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n        // end the current node\n        this.endCurrentNode();\n\n        // set the current node\n        this.setCurrentNodeByNodeId(nodeId);\n    }\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    isPaused = period.paused;\n                    if (periodId == period.periodId) {\n                        // we have found the period we are looking for\n                        break;\n                    } else {\n                        if (isPaused) {\n                            nPeriodsPaused++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\n                isPaused = true;\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * The pause screen status was changed. update period(s) accordingly.\n     */\n    pauseScreensChanged(isPaused) {\n\n        // get the currently selected period Id\n        let periodId = this.currentPeriod.periodId;\n\n        // update the run status\n        this.updatePausedRunStatusValue(periodId, isPaused);\n\n        if (isPaused) {\n            // pause the student screens\n            this.TeacherWebSocketService.pauseScreens(periodId);\n        } else {\n            // unpause the student screens\n            this.TeacherWebSocketService.unPauseScreens(periodId);\n        }\n\n        // save the run status to the server\n        this.sendRunStatus();\n\n        // save pause/unpause screen event\n        let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n            category = \"TeacherAction\", data = {};\n        let event = \"pauseScreen\";\n        if (!isPaused) {\n            event = \"unPauseScreen\";\n        }\n        this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        // get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        // get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for (var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        // set the periods into the run status\n        runStatus.periods = periods;\n\n        // set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if (this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        let runStatus = this.runStatus;\n\n        let periods = runStatus.periods;\n\n        if (periods) {\n            //loop through all the periods\n            for (let x = 0; x < periods.length; x++) {\n                //get a period\n                let tempPeriod = periods[x];\n\n                //get the period id\n                let tempPeriodId = tempPeriod.periodId;\n\n                //check if the period id matches the one we need to update or if all periods has been selected\n                if (periodId === tempPeriodId || periodId === -1) {\n                    //we have found the period we want to update\n                    tempPeriod.paused = value;\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if (runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if (customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            };\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = [\n    '$http',\n    '$q',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'TeacherWebSocketService'\n];\n\nexport default TeacherDataService;\n"]}