{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$filter","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","UtilService","$translate","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentWorkgroup","currentNode","previousStep","runStatus","periods","nodeGradingSort","studentProgressSort","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","selectedNodes","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getAnnotations","getEvents","components","retrieveStudentData","httpParams","method","url","then","result","data","window","location","href","deferred","defer","promise","resolve","context","componentId","componentType","category","projectId","newEvent","getProjectId","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","showPreviousWorkNodeIdsAndComponentIds","getShowPreviousWorkNodeIdsAndComponentIds","concat","periodId","studentDataURL","resultData","studentWorkList","componentStates","i","length","componentState","sort","sortByServerSaveTime","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","cs","id","componentStateNodeId","n","c","runStatusURL","initializePeriods","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","componentStatesForWorkgroup","getComponentStatesByWorkgroupId","componentRevisionCounter","componentsFound","csf","key","revisionCounter","csb","reverse","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","eventType","e","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","mergedPeriods","runStatusPeriods","p","period","runStatusPeriod","r","tempRunStatusPeriod","setCurrentPeriod","previousPeriod","setCurrentWorkgroup","workgroup","currentNodeId","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","totalScore","getTotalScore","isPaused","nPeriods","nPeriodsPaused","paused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","saveEvent","x","value","createRunStatus","allPeriodsPaused","l","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $filter,\n                $q,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                NotificationService,\n                ProjectService,\n                TeacherWebSocketService,\n                UtilService) {\n        this.$http = $http;\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.TeacherWebSocketService = TeacherWebSocketService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.studentData = {\n            componentStatesByWorkgroupId: {},\n            componentStatesByNodeId: {},\n            componentStatesByComponentId: {}\n        };\n\n        this.currentPeriod = null;\n        this.currentWorkgroup = null;\n        this.currentNode = null;\n        this.previousStep = null;\n        this.runStatus = null;\n        this.periods = [];\n        this.nodeGradingSort = 'team';\n        this.studentProgressSort = 'team student';\n\n        /**\n         * Listen for the 'annotationSavedToServer' event which is fired when\n         * we receive the response from saving an annotation to the server\n         */\n        this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n\n            if (args) {\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n                this.handleAnnotationReceived(annotation);\n            }\n        });\n\n        /**\n         * Listen for the 'newAnnotationReceived' event which is fired when\n         * teacher receives a new annotation (usually on a student work) from the server\n         */\n        this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n\n            if (args) {\n                // get the annotation that was saved to the server\n                let annotation = args.annotation;\n                this.handleAnnotationReceived(annotation);\n            }\n        });\n\n        /**\n         * Listen for the 'newStudentWorkReceived' event which is fired when\n         * teacher receives a new student work from the server\n         */\n        this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\n\n            if (args) {\n                // get the student work (component state) that was saved to the server\n                let studentWork = args.studentWork;\n                this.addOrUpdateComponentState(studentWork);\n                // broadcast the event that a new work has been received\n                this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\n            }\n        });\n    }\n\n    handleAnnotationReceived(annotation) {\n        // add the annotation to the local annotations array\n        this.studentData.annotations.push(annotation);\n\n        let toWorkgroupId = annotation.toWorkgroupId;\n        if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n            this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n        }\n        this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n        let nodeId = annotation.nodeId;\n        if (this.studentData.annotationsByNodeId[nodeId] == null) {\n            this.studentData.annotationsByNodeId[nodeId] = new Array();\n        }\n        this.studentData.annotationsByNodeId[nodeId].push(annotation);\n\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n        // broadcast the event that a new annotation has been received\n        this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n    }\n\n    /**\n     * Get the data for the export and generate the csv file that will be downloaded\n     * @param exportType the type of export\n     */\n    getExport(exportType, selectedNodes) {\n        let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        let runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        if (exportType === \"allStudentWork\" || exportType === \"latestStudentWork\") {\n            let params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getAnnotations = true;\n            params.getEvents = false;\n            params.components = selectedNodes;\n\n            return this.retrieveStudentData(params);\n        } else if (exportType === \"events\") {\n            let params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = false;\n            params.getAnnotations = false;\n            params.getEvents = true;\n            params.components = selectedNodes;\n\n            return this.retrieveStudentData(params);\n        } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n            let httpParams = {\n                method : 'GET',\n                url : exportURL,\n                params : {}\n            };\n\n            return this.$http(httpParams).then((result) => {\n                return result.data;\n            });\n        } else if (exportType === \"notifications\") {\n            let httpParams = {\n                method : 'GET',\n                url : exportURL,\n                params : {}\n            };\n\n            return this.$http(httpParams).then((result) => {\n                return result.data;\n            });\n        } else if (exportType === \"studentAssets\") {\n            window.location.href = exportURL;\n            let deferred = this.$q.defer();\n            let promise = deferred.promise;\n            deferred.resolve([]);\n            return promise;\n        } else if (exportType === \"oneWorkgroupPerRow\") {\n            let params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getAnnotations = true;\n            params.getEvents = true;\n            params.components = selectedNodes;\n\n            return this.retrieveStudentData(params);\n        } else if (exportType === \"rawData\") {\n            let params = {};\n            params.runId = this.ConfigService.getRunId();\n            params.getStudentWork = true;\n            params.getAnnotations = true;\n            params.getEvents = true;\n            params.components = selectedNodes;\n\n            return this.retrieveStudentData(params);\n        }\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport0(exportType) {\n        let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        let runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        if (exportType === \"studentAssets\") {\n            window.location.href = exportURL;\n            let deferred = this.$q.defer();\n            let promise = deferred.promise;\n            deferred.resolve([]);\n            return promise;\n        } else {\n            let httpParams = {\n                method : 'GET',\n                url : exportURL,\n                params : {}\n            };\n\n            return this.$http(httpParams).then((result) => {\n                return result.data;\n            });\n        }\n    };\n\n    /**\n     * Save events that occur in the Classroom Monitor to the server\n     * @param event the event object\n     * @returns a promise\n     */\n    saveEvent(context, nodeId, componentId, componentType, category, event, data, projectId) {\n        let newEvent = {\n            projectId : this.ConfigService.getProjectId(),\n            runId : this.ConfigService.getRunId(),\n            workgroupId : this.ConfigService.getWorkgroupId(),\n            clientSaveTime : Date.parse(new Date()),\n            context : context,\n            nodeId : nodeId,\n            componentId : componentId,\n            type : componentType,\n            category : category,\n            event : event,\n            data : data\n        };\n\n        if (newEvent.projectId == null) {\n            newEvent.projectId = projectId;\n        }\n\n        let events = [newEvent];\n\n        let params = {\n            projectId : this.ConfigService.getProjectId(),\n            runId : this.ConfigService.getRunId(),\n            workgroupId : this.ConfigService.getWorkgroupId(),\n            events : angular.toJson(events)\n        };\n\n        if (params.projectId == null) {\n            params.projectId = projectId;\n        }\n\n        let httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(params);\n\n        return this.$http(httpParams).then((result) => {\n\n            let savedEvents = null;\n\n            if (result != null && result.data != null) {\n                let data = result.data;\n\n                if (data != null) {\n\n                    // get the saved events\n                    savedEvents = data.events;\n                }\n            }\n\n            return savedEvents;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        //var periodId = null;\n\n        //if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            //periodId = this.currentPeriod.periodId;\n        //}\n\n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n\n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        //params.periodId = periodId;\n        params.periodId = null;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        let httpParams = {\n            \"method\": \"GET\",\n            \"url\": studentDataURL,\n            \"params\": params\n        };\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n                        this.addOrUpdateComponentState(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n\n                    // sort the events by server save time\n                    resultData.events.sort(this.UtilService.sortByServerSaveTime);\n\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Add ComponentState to local bookkeeping\n     * @param componentState the ComponentState to add\n     */\n    addOrUpdateComponentState(componentState) {\n        var componentStateWorkgroupId = componentState.workgroupId;\n        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n        }\n        let found = false;\n        for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\n            let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\n                found = true;  // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n        }\n\n        var componentStateNodeId = componentState.nodeId;\n        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n        }\n        found = false;  // reset\n        for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\n            let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\n                found = true; // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n        }\n\n        var componentId = componentState.componentId;\n        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n            this.studentData.componentStatesByComponentId[componentId] = new Array();\n        }\n        found = false;  // reset\n        for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\n            let cs = this.studentData.componentStatesByComponentId[componentId][c];\n            if (cs.id != null && cs.id === componentState.id) {\n                // found the same component id, so just update it in place.\n                this.studentData.componentStatesByComponentId[componentId][c] = componentState\n                found = true; // remember this so we don't insert later.\n                break;\n            }\n        }\n        if (!found) {\n            this.studentData.componentStatesByComponentId[componentId].push(componentState);\n        }\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        };\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                    this.initializePeriods();\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    }\n\n    /**\n     * Get the latest component states for a workgroup. Each component state\n     * will be the latest component state for a component.\n     * @param workgroupId the workgroup id\n     * @return an array of latest component states\n     */\n    getLatestComponentStatesByWorkgroupId(workgroupId) {\n        var componentStates = [];\n\n        if (workgroupId != null) {\n\n            // get all the component states for a workgroup\n            var componentStatesForWorkgroup = this.getComponentStatesByWorkgroupId(workgroupId);\n\n            if (componentStatesForWorkgroup != null) {\n\n                // mapping of component to revision counter\n                var componentRevisionCounter = {};\n\n                /*\n                 * used to keep track of the components we have found component\n                 * states for already\n                 */\n                var componentsFound = {};\n\n                // loop through the component states forwards\n                for (var csf = 0; csf < componentStatesForWorkgroup.length; csf++) {\n\n                    // get a component state\n                    var componentState = componentStatesForWorkgroup[csf];\n\n                    if (componentState != null) {\n\n                        // get the node id and component id of the component state\n                        var nodeId = componentState.nodeId;\n                        var componentId = componentState.componentId;\n\n                        // generate the component key e.g. \"node2_bb83hs0sd8\"\n                        var key = nodeId + \"-\" + componentId;\n\n                        if (componentRevisionCounter[key] == null) {\n                            // initialize the component revision counter for this component to 1 if there is no entry\n                            componentRevisionCounter[key] = 1;\n                        }\n\n                        // get the revision counter\n                        var revisionCounter = componentRevisionCounter[key];\n\n                        // set the revision counter into the component state\n                        componentState.revisionCounter = revisionCounter;\n\n                        // increment the revision counter for the component\n                        componentRevisionCounter[key] = revisionCounter + 1;\n                    }\n                }\n\n                // loop through the component states backwards\n                for(var csb = componentStatesForWorkgroup.length - 1; csb >= 0; csb--) {\n\n                    // get a component state\n                    var componentState = componentStatesForWorkgroup[csb];\n\n                    if (componentState != null) {\n\n                        // get the node id and component id of the component state\n                        var nodeId = componentState.nodeId;\n                        var componentId = componentState.componentId;\n\n                        // generate the component key e.g. \"node2_bb83hs0sd8\"\n                        var key = nodeId + \"-\" + componentId;\n\n                        if (componentsFound[key] == null) {\n                            /*\n                             * we have not found a component state for this\n                             * component yet so we will add it to the array\n                             * of component states\n                             */\n                            componentStates.push(componentState);\n\n                            /*\n                             * add an entry into the components found so that\n                             * don't add any more component states from this\n                             * component\n                             */\n                            componentsFound[key] = true;\n                        }\n                    }\n                }\n\n                /*\n                 * reverse the component states array since we have been adding\n                 * component states from newest to oldest order but we want them\n                 * in oldest to newest order\n                 */\n                componentStates.reverse();\n            }\n        }\n\n        return componentStates;\n    }\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    /**\n     * Get the latest event by workgroup id, node id, and event type\n     * @param workgroupId the workgroup id\n     * @param nodeId the node id\n     * @param eventType the event type\n     * @return the latest event with the matching parameters or null if\n     * no event is found with the matching parameters\n     */\n    getLatestEventByWorkgroupIdAndNodeIdAndType(workgroupId, nodeId, eventType) {\n\n        // get all the events for a workgroup id\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n\n        if (eventsByWorkgroupId != null) {\n\n            /*\n             * loop through all the events for the workgroup from newest to\n             * oldest\n             */\n            for (var e = eventsByWorkgroupId.length - 1; e >= 0; e--) {\n\n                // get an event\n                var event = eventsByWorkgroupId[e];\n\n                if (event != null) {\n                    if (event.nodeId == nodeId && event.event == eventType) {\n                        /*\n                         * the event parameters match the ones we are looking\n                         * for\n                         */\n                        return event;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    }\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    }\n\n    /**\n     * Initialize the periods\n     */\n    initializePeriods() {\n\n        // get the periods from the config\n        let periods = this.ConfigService.getPeriods();\n        let currentPeriod = null;\n\n        if (periods.length > 1) {\n            // create an option for all periods\n            let allPeriodsOption = {\n                periodId: -1,\n                periodName: this.$translate('allPeriods')\n            };\n\n            periods.unshift(allPeriodsOption);\n            currentPeriod = periods[0];\n        } else if (periods.length == 1) {\n            currentPeriod = periods[0];\n        }\n\n        // an array to gather all the periods\n        let mergedPeriods = [];\n\n        /*\n         * Get the periods from the run status. These periods may not be up to\n         * date so we need to compare them with the periods from the config.\n         */\n        let runStatusPeriods = this.runStatus.periods;\n\n        // loop through all the periods in the config\n        for (let p = 0; p < periods.length; p++) {\n            let period = periods[p];\n\n            if (period != null) {\n                // check if the period object is in the run status periods\n\n                let runStatusPeriod = null;\n\n                if (runStatusPeriods != null) {\n                    // loop through all the periods in the run status\n                    for (let r = 0; r < runStatusPeriods.length; r++) {\n                        let tempRunStatusPeriod = runStatusPeriods[r];\n\n                        if (tempRunStatusPeriod != null) {\n                            if (period.periodId == tempRunStatusPeriod.periodId) {\n                                /*\n                                 * We have found a period that is in the config and\n                                 * the run status.\n                                 */\n                                runStatusPeriod = tempRunStatusPeriod;\n                            }\n                        }\n                    }\n                }\n\n                if (runStatusPeriod == null) {\n                    /*\n                     * we did not find the period object in the run status so\n                     * we will use the period object from the config\n                     */\n                    mergedPeriods.push(period);\n                } else {\n                    // we found the period object in the run status so we will use it\n                    mergedPeriods.push(runStatusPeriod);\n                }\n            }\n        }\n\n        this.periods = mergedPeriods;\n        this.runStatus.periods = mergedPeriods;\n\n        // set the current period\n        if (currentPeriod) {\n            this.setCurrentPeriod(currentPeriod);\n        }\n    }\n\n    setCurrentPeriod(period) {\n        let previousPeriod = this.currentPeriod;\n        this.currentPeriod = period;\n\n        // whenever the current period is set, clear the currently selected workgroup\n        this.setCurrentWorkgroup(null);\n\n        // broadcast the event that the current period has changed\n        this.$rootScope.$broadcast('currentPeriodChanged', {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n    }\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    }\n\n    getPeriods() {\n        return this.periods;\n    }\n\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    setCurrentWorkgroup(workgroup) {\n        this.currentWorkgroup = workgroup;\n\n        // broadcast the event that the current workgroup has changed\n        this.$rootScope.$broadcast('currentWorkgroupChanged', {currentWorkgroup: this.currentWorkgroup});\n    }\n\n    getCurrentWorkgroup() {\n        return this.currentWorkgroup;\n    }\n\n    /**\n     * Get the current node\n     * @returns the current node object\n     */\n    getCurrentNode() {\n        return this.currentNode;\n    }\n\n    /**\n     * Get the current node id\n     * @returns the current node id\n     */\n    getCurrentNodeId() {\n        var currentNodeId = null;\n\n        if (this.currentNode != null) {\n            currentNodeId = this.currentNode.id;\n        }\n\n        return currentNodeId;\n    }\n\n    /**\n     * Set the current node\n     * @param nodeId the node id\n     */\n    setCurrentNodeByNodeId(nodeId) {\n        if (nodeId != null) {\n            let node = this.ProjectService.getNodeById(nodeId);\n\n            this.setCurrentNode(node);\n        }\n    }\n\n    /**\n     * Set the current node\n     * @param node the node object\n     */\n    setCurrentNode(node) {\n        let previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode !== node) {\n            // the current node is about to change\n\n            if (previousCurrentNode && !this.ProjectService.isGroupNode(previousCurrentNode.id)){\n                // set the previous node to the current node\n                this.previousStep = previousCurrentNode;\n            }\n\n            // set the current node to the new node\n            this.currentNode = node;\n\n            // broadcast the event that the current node has changed\n            this.$rootScope.$broadcast('currentNodeChanged', {previousNode: previousCurrentNode, currentNode: this.currentNode});\n        }\n    }\n\n    /**\n     * End the current node\n     */\n    endCurrentNode() {\n\n        // get the current node\n        var previousCurrentNode = this.currentNode;\n\n        if (previousCurrentNode != null) {\n\n            // tell the node to exit\n            this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n        }\n    }\n\n    /**\n     * End the current node and set the current node\n     * @param nodeId the node id of the new current node\n     */\n    endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n        // end the current node\n        this.endCurrentNode();\n\n        // set the current node\n        this.setCurrentNodeByNodeId(nodeId);\n    }\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if any period in the run is paused\n     * @returns Boolean whether any periods are paused\n     */\n    isAnyPeriodPaused(periodId) {\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    if (period.paused) {\n                        isPaused = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * Check if the given period is paused\n     * @param periodId the id for a period\n     * @returns Boolean whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        let isPaused = false;\n\n        // get the run status\n        let runStatus = this.runStatus;\n\n        if (runStatus && runStatus.periods) {\n            let periods = runStatus.periods;\n            let nPeriods = periods.length;\n            let nPeriodsPaused = 0;\n\n            // loop through all the periods\n            for (let p = 0; p < periods.length; p++) {\n                let period = periods[p];\n\n                if (period != null) {\n                    isPaused = period.paused;\n                    if (periodId == period.periodId) {\n                        // we have found the period we are looking for\n                        break;\n                    } else {\n                        if (isPaused) {\n                            nPeriodsPaused++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (periodId === -1 && nPeriods === nPeriodsPaused) {\n                isPaused = true;\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * The pause screen status was changed for the given periodId. Update period accordingly.\n     * @param periodId the id of the period to toggle\n     * @param isPaused Boolean whether the period should be paused or not\n     */\n    pauseScreensChanged(periodId, isPaused) {\n        if (periodId) {\n            // update the run status\n            this.updatePausedRunStatusValue(periodId, isPaused);\n\n            if (isPaused) {\n                // pause the student screens\n                this.TeacherWebSocketService.pauseScreens(periodId);\n            } else {\n                // unpause the student screens\n                this.TeacherWebSocketService.unPauseScreens(periodId);\n            }\n\n            // save the run status to the server\n            this.sendRunStatus();\n\n            // save pause/unpause screen event\n            let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n                category = \"TeacherAction\", data = { periodId: periodId };\n            let event = \"pauseScreen\";\n            if (!isPaused) {\n                event = \"unPauseScreen\";\n            }\n            this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n\n            this.$rootScope.$broadcast('pauseScreensChanged', {periods: this.runStatus.periods});\n        }\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        // get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        // get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for (var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        // set the periods into the run status\n        runStatus.periods = periods;\n\n        // set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if (this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        let runStatus = this.runStatus;\n        let periods = runStatus.periods;\n\n        let allPeriodsPaused = true;\n\n        if (periods) {\n            let l = periods.length, x = l - 1;\n            //loop through all the periods\n            for (; x > -1; x--) {\n                //get a period\n                let tempPeriod = periods[x];\n\n                //get the period id\n                let tempPeriodId = tempPeriod.periodId;\n\n                //check if the period id matches the one we need to update or if all periods has been selected\n                if (periodId === tempPeriodId || periodId === -1) {\n                    //we have found the period we want to update\n                    tempPeriod.paused = value;\n                }\n\n                if (tempPeriodId !== -1 && !tempPeriod.paused) {\n                    allPeriodsPaused = false;\n                }\n\n                if (tempPeriodId === -1) {\n                    // set the paused status for the all periods option\n                    tempPeriod.paused = allPeriodsPaused;\n                }\n             }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if (runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if (customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            };\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = [\n    '$http',\n    '$filter',\n    '$q',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'NotificationService',\n    'ProjectService',\n    'TeacherWebSocketService',\n    'UtilService'\n];\n\nexport default TeacherDataService;\n"]}