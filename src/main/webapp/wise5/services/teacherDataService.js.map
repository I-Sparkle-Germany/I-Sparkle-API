{"version":3,"sources":["src/main/webapp/wise5/services/teacherDataService.es6"],"names":["TeacherDataService","$http","$filter","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","UtilService","$translate","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentWorkgroup","currentStep","currentNode","previousStep","runStatus","periods","nodeGradingSort","studentGradingSort","studentProgressSort","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","selectedNodes","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getAnnotations","getEvents","components","retrieveStudentData","httpParams","method","url","then","result","data","window","location","href","deferred","defer","promise","resolve","context","componentId","componentType","category","projectId","newEvent","getProjectId","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","nodeIdsAndComponentIds","getNodeIdsAndComponentIds","concat","periodId","studentDataURL","resultData","studentWorkList","componentStates","componentState","sort","sortByServerSaveTime","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","length","cs","id","componentStateNodeId","n","c","runStatusURL","initializePeriods","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","componentStatesForWorkgroup","getComponentStatesByWorkgroupId","componentRevisionCounter","componentsFound","key","revisionCounter","csb","reverse","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","eventType","e","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","mergedPeriods","runStatusPeriods","period","runStatusPeriod","tempRunStatusPeriod","setCurrentPeriod","previousPeriod","getCurrentWorkgroup","workgroupPeriod","setCurrentWorkgroup","workgroup","step","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","getTotalScore","nPeriods","nPeriodsPaused","paused","isPaused","updatePausedRunStatusValue","pauseScreens","unPauseScreens","sendRunStatus","saveEvent","value","createRunStatus","allPeriodsPaused","l","x","tempPeriod","tempPeriodId","customPauseMessage","pauseMessage","runStatusParams","status","$inject"],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\r\n\r\nclass TeacherDataService {\r\n  constructor(\r\n      $http,\r\n      $filter,\r\n      $q,\r\n      $rootScope,\r\n      AnnotationService,\r\n      ConfigService,\r\n      NotificationService,\r\n      ProjectService,\r\n      TeacherWebSocketService,\r\n      UtilService) {\r\n    this.$http = $http;\r\n    this.$filter = $filter;\r\n    this.$q = $q;\r\n    this.$rootScope = $rootScope;\r\n    this.AnnotationService = AnnotationService;\r\n    this.ConfigService = ConfigService;\r\n    this.NotificationService = NotificationService;\r\n    this.ProjectService = ProjectService;\r\n    this.TeacherWebSocketService = TeacherWebSocketService;\r\n    this.UtilService = UtilService;\r\n    this.$translate = this.$filter('translate');\r\n\r\n    this.studentData = {\r\n      componentStatesByWorkgroupId: {},\r\n      componentStatesByNodeId: {},\r\n      componentStatesByComponentId: {}\r\n    };\r\n\r\n    this.currentPeriod = null;\r\n    this.currentWorkgroup = null;\r\n    this.currentStep = null;\r\n    this.currentNode = null;\r\n    this.previousStep = null;\r\n    this.runStatus = null;\r\n    this.periods = [];\r\n    this.nodeGradingSort = 'team';\r\n    this.studentGradingSort = 'step';\r\n    this.studentProgressSort = 'team';\r\n\r\n    /**\r\n     * Listen for the 'annotationSavedToServer' event which is fired when\r\n     * we receive the response from saving an annotation to the server\r\n     */\r\n    this.$rootScope.$on('annotationSavedToServer', (event, args) => {\r\n      if (args) {\r\n        let annotation = args.annotation;\r\n        this.handleAnnotationReceived(annotation);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Listen for the 'newAnnotationReceived' event which is fired when\r\n     * teacher receives a new annotation (usually on a student work) from the server\r\n     */\r\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\r\n      if (args) {\r\n        let annotation = args.annotation;\r\n        this.handleAnnotationReceived(annotation);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Listen for the 'newStudentWorkReceived' event which is fired when\r\n     * teacher receives a new student work from the server\r\n     */\r\n    this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\r\n      if (args) {\r\n        let studentWork = args.studentWork;\r\n        this.addOrUpdateComponentState(studentWork);\r\n        this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\r\n      }\r\n    });\r\n  }\r\n\r\n  handleAnnotationReceived(annotation) {\r\n    this.studentData.annotations.push(annotation);\r\n\r\n    let toWorkgroupId = annotation.toWorkgroupId;\r\n    if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\r\n      this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\r\n    }\r\n    this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\r\n\r\n    let nodeId = annotation.nodeId;\r\n    if (this.studentData.annotationsByNodeId[nodeId] == null) {\r\n      this.studentData.annotationsByNodeId[nodeId] = new Array();\r\n    }\r\n    this.studentData.annotationsByNodeId[nodeId].push(annotation);\r\n    this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n    this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\r\n  }\r\n\r\n  /**\r\n   * Get the data for the export and generate the csv file that will be downloaded\r\n   * @param exportType the type of export\r\n   */\r\n  getExport(exportType, selectedNodes) {\r\n    let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\r\n    let runId = this.ConfigService.getRunId();\r\n    exportURL += \"/\" + runId + \"/\" + exportType;\r\n\r\n    if (exportType === \"allStudentWork\" || exportType === \"latestStudentWork\") {\r\n      let params = {};\r\n      params.runId = this.ConfigService.getRunId();\r\n      params.getStudentWork = true;\r\n      params.getAnnotations = true;\r\n      params.getEvents = false;\r\n      params.components = selectedNodes;\r\n\r\n      return this.retrieveStudentData(params);\r\n    } else if (exportType === \"events\") {\r\n      let params = {};\r\n      params.runId = this.ConfigService.getRunId();\r\n      params.getStudentWork = false;\r\n      params.getAnnotations = false;\r\n      params.getEvents = true;\r\n      params.components = selectedNodes;\r\n\r\n      return this.retrieveStudentData(params);\r\n    } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\r\n      let httpParams = {\r\n        method : 'GET',\r\n        url : exportURL,\r\n        params : {}\r\n      };\r\n\r\n      return this.$http(httpParams).then((result) => {\r\n        return result.data;\r\n      });\r\n    } else if (exportType === \"notifications\") {\r\n      let httpParams = {\r\n        method : 'GET',\r\n        url : exportURL,\r\n        params : {}\r\n      };\r\n\r\n      return this.$http(httpParams).then((result) => {\r\n        return result.data;\r\n      });\r\n    } else if (exportType === \"studentAssets\") {\r\n      window.location.href = exportURL;\r\n      let deferred = this.$q.defer();\r\n      let promise = deferred.promise;\r\n      deferred.resolve([]);\r\n      return promise;\r\n    } else if (exportType === \"oneWorkgroupPerRow\") {\r\n      let params = {};\r\n      params.runId = this.ConfigService.getRunId();\r\n      params.getStudentWork = true;\r\n      params.getAnnotations = true;\r\n      params.getEvents = true;\r\n      params.components = selectedNodes;\r\n      return this.retrieveStudentData(params);\r\n    } else if (exportType === \"rawData\") {\r\n      let params = {};\r\n      params.runId = this.ConfigService.getRunId();\r\n      params.getStudentWork = true;\r\n      params.getAnnotations = true;\r\n      params.getEvents = true;\r\n      params.components = selectedNodes;\r\n      return this.retrieveStudentData(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save events that occur in the Classroom Monitor to the server\r\n   * @param event the event object\r\n   * @returns a promise\r\n   */\r\n  saveEvent(context, nodeId, componentId, componentType, category, event, data, projectId) {\r\n    let newEvent = {\r\n      projectId : this.ConfigService.getProjectId(),\r\n      runId : this.ConfigService.getRunId(),\r\n      workgroupId : this.ConfigService.getWorkgroupId(),\r\n      clientSaveTime : Date.parse(new Date()),\r\n      context : context,\r\n      nodeId : nodeId,\r\n      componentId : componentId,\r\n      type : componentType,\r\n      category : category,\r\n      event : event,\r\n      data : data\r\n    };\r\n\r\n    if (newEvent.projectId == null) {\r\n      newEvent.projectId = projectId;\r\n    }\r\n\r\n    let events = [newEvent];\r\n\r\n    let params = {\r\n      projectId : this.ConfigService.getProjectId(),\r\n      runId : this.ConfigService.getRunId(),\r\n      workgroupId : this.ConfigService.getWorkgroupId(),\r\n      events : angular.toJson(events)\r\n    };\r\n\r\n    if (params.projectId == null) {\r\n      params.projectId = projectId;\r\n    }\r\n\r\n    let httpParams = {};\r\n    httpParams.method = 'POST';\r\n    httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\r\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n    httpParams.data = $.param(params);\r\n\r\n    return this.$http(httpParams).then((result) => {\r\n      let savedEvents = null;\r\n      if (result != null && result.data != null) {\r\n        let data = result.data;\r\n        if (data != null) {\r\n          // get the saved events\r\n          savedEvents = data.events;\r\n        }\r\n      }\r\n      return savedEvents;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Retrieve the student data for a node id\r\n   * @param nodeId the node id\r\n   * @returns the student data for the node id\r\n   */\r\n  retrieveStudentDataByNodeId(nodeId) {\r\n    const nodeIdsAndComponentIds =\r\n        this.ProjectService.getNodeIdsAndComponentIds(nodeId);\r\n\r\n    let components = [];\r\n    components = components.concat(nodeIdsAndComponentIds);\r\n\r\n    const params = {};\r\n    params.periodId = null;\r\n    params.workgroupId = null;\r\n    params.components = components;\r\n    params.getAnnotations = false;\r\n    params.getEvents = false;\r\n\r\n    return this.retrieveStudentData(params);\r\n  };\r\n\r\n  /**\r\n   * Retrieve the student data for the workgroup id\r\n   * @param workgroupId the workgroup id\r\n   * @returns the student data for the workgroup id\r\n   */\r\n  retrieveStudentDataByWorkgroupId(workgroupId) {\r\n    const params = {};\r\n    params.periodId = null;\r\n    params.nodeId = null;\r\n    params.workgroupId = workgroupId;\r\n    params.toWorkgroupId = workgroupId;\r\n    params.getAnnotations = false;\r\n    return this.retrieveStudentData(params);\r\n  };\r\n\r\n  /**\r\n   * Retrieve the annotations for the run\r\n   * @returns the annotations for the run\r\n   */\r\n  retrieveAnnotations() {\r\n    let params = {};\r\n    params.periodId = null;\r\n    params.nodeId = null;\r\n    params.workgroupId = null;\r\n    params.toWorkgroupId = null;\r\n    params.getStudentWork = false;\r\n    params.getEvents = false;\r\n    params.getAnnotations = true;\r\n    return this.retrieveStudentData(params);\r\n  };\r\n\r\n  /**\r\n   * Retrieve the student data\r\n   * @param params the params that specify what student data we want\r\n   * @returns a promise\r\n   */\r\n  retrieveStudentData(params) {\r\n    let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\r\n    params.runId = this.ConfigService.getRunId();\r\n\r\n    if (params.getStudentWork == null) {\r\n      params.getStudentWork = true;\r\n    }\r\n\r\n    if (params.getEvents == null) {\r\n      params.getEvents = false;\r\n    }\r\n\r\n    if (params.getAnnotations == null) {\r\n      params.getAnnotations = true;\r\n    }\r\n\r\n    let httpParams = {\r\n      \"method\": \"GET\",\r\n      \"url\": studentDataURL,\r\n      \"params\": params\r\n    };\r\n\r\n    return this.$http(httpParams).then((result) => {\r\n      const resultData = result.data;\r\n      if (resultData != null) {\r\n        if (resultData.studentWorkList != null) {\r\n          const componentStates = resultData.studentWorkList;\r\n\r\n          // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\r\n          for (let componentState of componentStates) {\r\n            this.addOrUpdateComponentState(componentState);\r\n          }\r\n        }\r\n\r\n        if (resultData.events != null) {\r\n          // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\r\n\r\n          // sort the events by server save time\r\n          resultData.events.sort(this.UtilService.sortByServerSaveTime);\r\n\r\n          this.studentData.allEvents = resultData.events;\r\n          this.studentData.eventsByWorkgroupId = {};\r\n          this.studentData.eventsByNodeId = {};\r\n          for (let event of resultData.events) {\r\n            const eventWorkgroupId = event.workgroupId;\r\n            if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\r\n              this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\r\n            }\r\n            this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\r\n            const eventNodeId = event.nodeId;\r\n            if (this.studentData.eventsByNodeId[eventNodeId] == null) {\r\n              this.studentData.eventsByNodeId[eventNodeId] = new Array();\r\n            }\r\n            this.studentData.eventsByNodeId[eventNodeId].push(event);\r\n          }\r\n        }\r\n\r\n        if (resultData.annotations != null) {\r\n          // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\r\n          this.studentData.annotations = resultData.annotations;\r\n          this.studentData.annotationsToWorkgroupId = {};\r\n          this.studentData.annotationsByNodeId = {};\r\n          for (let annotation of resultData.annotations) {\r\n            const annotationWorkgroupId = annotation.toWorkgroupId;\r\n            if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\r\n              this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\r\n            }\r\n            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\r\n            const annotationNodeId = annotation.nodeId;\r\n            if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\r\n              this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\r\n            }\r\n            this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\r\n          }\r\n        }\r\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\r\n      }\r\n      return resultData;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Add ComponentState to local bookkeeping\r\n   * @param componentState the ComponentState to add\r\n   */\r\n  addOrUpdateComponentState(componentState) {\r\n    const componentStateWorkgroupId = componentState.workgroupId;\r\n    if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\r\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\r\n    }\r\n    let found = false;\r\n    for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\r\n      let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\r\n      if (cs.id != null && cs.id === componentState.id) {\r\n        // found the same component id, so just update it in place.\r\n        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\r\n        found = true;  // remember this so we don't insert later.\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\r\n    }\r\n\r\n    const componentStateNodeId = componentState.nodeId;\r\n    if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\r\n      this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\r\n    }\r\n    found = false;  // reset\r\n    for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\r\n      let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\r\n      if (cs.id != null && cs.id === componentState.id) {\r\n        // found the same component id, so just update it in place.\r\n        this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\r\n        found = true; // remember this so we don't insert later.\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\r\n    }\r\n\r\n    const componentId = componentState.componentId;\r\n    if (this.studentData.componentStatesByComponentId[componentId] == null) {\r\n      this.studentData.componentStatesByComponentId[componentId] = new Array();\r\n    }\r\n    found = false;  // reset\r\n    for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\r\n      let cs = this.studentData.componentStatesByComponentId[componentId][c];\r\n      if (cs.id != null && cs.id === componentState.id) {\r\n        // found the same component id, so just update it in place.\r\n        this.studentData.componentStatesByComponentId[componentId][c] = componentState;\r\n        found = true; // remember this so we don't insert later.\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      this.studentData.componentStatesByComponentId[componentId].push(componentState);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve the run status from the server\r\n   */\r\n  retrieveRunStatus() {\r\n    const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\r\n    const runId = this.ConfigService.getConfigParam('runId');\r\n\r\n    const params = {\r\n      runId:runId\r\n    };\r\n\r\n    const httpParams = {};\r\n    httpParams.method = 'GET';\r\n    httpParams.url = runStatusURL;\r\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n    httpParams.params = params;\r\n\r\n    return this.$http(httpParams).then((result) => {\r\n      if (result != null) {\r\n        const data = result.data;\r\n        if (data != null) {\r\n          this.runStatus = data;\r\n          this.initializePeriods();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getComponentStatesByWorkgroupId(workgroupId) {\r\n    const componentStatesByWorkgroupId =\r\n        this.studentData.componentStatesByWorkgroupId[workgroupId];\r\n    if (componentStatesByWorkgroupId != null) {\r\n      return componentStatesByWorkgroupId;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getComponentStatesByNodeId(nodeId) {\r\n    const componentStatesByNodeId =\r\n        this.studentData.componentStatesByNodeId[nodeId];\r\n    if (componentStatesByNodeId != null) {\r\n      return componentStatesByNodeId;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the component stats for a component id\r\n   * @param componentId the component id\r\n   * @returns an array containing component states for a component id\r\n   */\r\n  getComponentStatesByComponentId(componentId) {\r\n    const componentStatesByComponentId =\r\n        this.studentData.componentStatesByComponentId[componentId];\r\n    if (componentStatesByComponentId != null) {\r\n      return componentStatesByComponentId;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(\r\n      workgroupId, nodeId, componentId) {\r\n    let latestComponentState = null;\r\n    const componentStates = this\r\n        .getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n    if (componentStates != null) {\r\n      for (let c = componentStates.length - 1; c >= 0; c--) {\r\n        const componentState = componentStates[c];\r\n        if (componentState != null) {\r\n          const componentStateNodeId = componentState.nodeId;\r\n          const componentStateComponentId = componentState.componentId;\r\n          if (nodeId == componentStateNodeId &&\r\n              componentId == componentStateComponentId) {\r\n            latestComponentState = componentState;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return latestComponentState;\r\n  }\r\n\r\n  getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\r\n    let latestComponentState = null;\r\n    const componentStates =\r\n        this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\r\n    if (componentStates != null) {\r\n      for (let c = componentStates.length - 1; c >= 0; c--) {\r\n        const componentState = componentStates[c];\r\n        if (componentState != null) {\r\n          const componentStateNodeId = componentState.nodeId;\r\n          if (nodeId == componentStateNodeId) {\r\n            return componentState;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the latest component states for a workgroup. Each component state\r\n   * will be the latest component state for a component.\r\n   * @param workgroupId the workgroup id\r\n   * @return an array of latest component states\r\n   */\r\n  getLatestComponentStatesByWorkgroupId(workgroupId) {\r\n    const componentStates = [];\r\n    if (workgroupId != null) {\r\n      const componentStatesForWorkgroup =\r\n          this.getComponentStatesByWorkgroupId(workgroupId);\r\n      if (componentStatesForWorkgroup != null) {\r\n        // mapping of component to revision counter\r\n        const componentRevisionCounter = {};\r\n\r\n        /*\r\n         * used to keep track of the components we have found component\r\n         * states for already\r\n         */\r\n        const componentsFound = {};\r\n        for (let componentState of componentStatesForWorkgroup) {\r\n          if (componentState != null) {\r\n            // get the node id and component id of the component state\r\n            const nodeId = componentState.nodeId;\r\n            const componentId = componentState.componentId;\r\n\r\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\r\n            const key = nodeId + \"-\" + componentId;\r\n\r\n            if (componentRevisionCounter[key] == null) {\r\n              // initialize the component revision counter for this component to 1 if there is no entry\r\n              componentRevisionCounter[key] = 1;\r\n            }\r\n\r\n            const revisionCounter = componentRevisionCounter[key];\r\n\r\n            // set the revision counter into the component state\r\n            componentState.revisionCounter = revisionCounter;\r\n\r\n            // increment the revision counter for the component\r\n            componentRevisionCounter[key] = revisionCounter + 1;\r\n          }\r\n        }\r\n\r\n        for (let csb = componentStatesForWorkgroup.length - 1; csb >= 0; csb--) {\r\n          const componentState = componentStatesForWorkgroup[csb];\r\n\r\n          if (componentState != null) {\r\n            // get the node id and component id of the component state\r\n            const nodeId = componentState.nodeId;\r\n            const componentId = componentState.componentId;\r\n\r\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\r\n            const key = nodeId + \"-\" + componentId;\r\n\r\n            if (componentsFound[key] == null) {\r\n              /*\r\n               * we have not found a component state for this\r\n               * component yet so we will add it to the array\r\n               * of component states\r\n               */\r\n              componentStates.push(componentState);\r\n\r\n              /*\r\n               * add an entry into the components found so that\r\n               * don't add any more component states from this\r\n               * component\r\n               */\r\n              componentsFound[key] = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        /*\r\n         * reverse the component states array since we have been adding\r\n         * component states from newest to oldest order but we want them\r\n         * in oldest to newest order\r\n         */\r\n        componentStates.reverse();\r\n      }\r\n    }\r\n    return componentStates;\r\n  }\r\n\r\n  getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\r\n    const componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\r\n\r\n    // find the intersect and return it\r\n    return componentStatesByWorkgroupId.filter((n) => {\r\n      return componentStatesByNodeId.indexOf(n) != -1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get component states for a workgroup id and component id\r\n   * @param workgroupId the workgroup id\r\n   * @param componentId the component id\r\n   * @returns an array of component states\r\n   */\r\n  getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\r\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\r\n    const componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\r\n\r\n    // find the intersect and return it\r\n    return componentStatesByWorkgroupId.filter((n) => {\r\n      return componentStatesByComponentId.indexOf(n) != -1;\r\n    });\r\n  }\r\n\r\n  getEventsByWorkgroupId(workgroupId) {\r\n    const eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\r\n    if (eventsByWorkgroupId != null) {\r\n      return eventsByWorkgroupId;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  getEventsByNodeId(nodeId) {\r\n    const eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\r\n    if (eventsByNodeId != null) {\r\n      return eventsByNodeId;\r\n    } else {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\r\n    const eventsByNodeId = this.getEventsByNodeId(nodeId);\r\n\r\n    // find the intersect and return it\r\n    return eventsByWorkgroupId.filter((n) => {\r\n      return eventsByNodeId.indexOf(n) != -1;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get the latest event by workgroup id, node id, and event type\r\n   * @param workgroupId the workgroup id\r\n   * @param nodeId the node id\r\n   * @param eventType the event type\r\n   * @return the latest event with the matching parameters or null if\r\n   * no event is found with the matching parameters\r\n   */\r\n  getLatestEventByWorkgroupIdAndNodeIdAndType(workgroupId, nodeId, eventType) {\r\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\r\n    if (eventsByWorkgroupId != null) {\r\n      for (let e = eventsByWorkgroupId.length - 1; e >= 0; e--) {\r\n        const event = eventsByWorkgroupId[e];\r\n        if (event != null) {\r\n          if (event.nodeId == nodeId && event.event == eventType) {\r\n            return event;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getAnnotationsToWorkgroupId(workgroupId) {\r\n    const annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\r\n    if (annotationsToWorkgroupId != null) {\r\n      return annotationsToWorkgroupId;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getAnnotationsByNodeId(nodeId) {\r\n    const annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\r\n    if (annotationsByNodeId != null) {\r\n      return annotationsByNodeId;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\r\n    const annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\r\n    const annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\r\n\r\n    // find the intersect and return it\r\n    return annotationsToWorkgroupId.filter((n) => {\r\n      return annotationsByNodeId.indexOf(n) != -1;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the periods\r\n   */\r\n  initializePeriods() {\r\n    let periods = this.ConfigService.getPeriods();\r\n    let currentPeriod = null;\r\n\r\n    if (periods.length > 1) {\r\n      let allPeriodsOption = {\r\n        periodId: -1,\r\n        periodName: this.$translate('allPeriods')\r\n      };\r\n\r\n      periods.unshift(allPeriodsOption);\r\n      currentPeriod = periods[1];\r\n    } else if (periods.length == 1) {\r\n      currentPeriod = periods[0];\r\n    }\r\n\r\n    let mergedPeriods = [];\r\n\r\n    /*\r\n     * Get the periods from the run status. These periods may not be up to\r\n     * date so we need to compare them with the periods from the config.\r\n     */\r\n    let runStatusPeriods = this.runStatus.periods;\r\n\r\n    for (let period of periods) {\r\n      if (period != null) {\r\n        let runStatusPeriod = null;\r\n        if (runStatusPeriods != null) {\r\n          for (let tempRunStatusPeriod of runStatusPeriods) {\r\n            if (tempRunStatusPeriod != null) {\r\n              if (period.periodId == tempRunStatusPeriod.periodId) {\r\n                runStatusPeriod = tempRunStatusPeriod;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (runStatusPeriod == null) {\r\n          /*\r\n           * we did not find the period object in the run status so\r\n           * we will use the period object from the config\r\n           */\r\n          mergedPeriods.push(period);\r\n        } else {\r\n          mergedPeriods.push(runStatusPeriod);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.periods = mergedPeriods;\r\n    this.runStatus.periods = mergedPeriods;\r\n\r\n    if (currentPeriod) {\r\n      this.setCurrentPeriod(currentPeriod);\r\n    }\r\n  }\r\n\r\n  setCurrentPeriod(period) {\r\n    let previousPeriod = this.currentPeriod;\r\n    this.currentPeriod = period;\r\n    let periodId = this.currentPeriod.periodId;\r\n\r\n    /*\r\n     * if currently selected workgroup is in a different period, clear the\r\n     * currently selected workgroup\r\n     */\r\n    let currentWorkgroup = this.getCurrentWorkgroup();\r\n    if (currentWorkgroup) {\r\n      let workgroupPeriod = currentWorkgroup.periodId;\r\n      if (periodId !== -1 && workgroupPeriod !== periodId) {\r\n        this.setCurrentWorkgroup(null);\r\n      }\r\n    }\r\n\r\n    this.$rootScope.$broadcast('currentPeriodChanged',\r\n        {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\r\n  }\r\n\r\n  getCurrentPeriod() {\r\n    return this.currentPeriod;\r\n  }\r\n\r\n  getPeriods() {\r\n    return this.periods;\r\n  }\r\n\r\n  getRunStatus() {\r\n    return this.runStatus;\r\n  }\r\n\r\n  setCurrentWorkgroup(workgroup) {\r\n    this.currentWorkgroup = workgroup;\r\n    this.$rootScope.$broadcast('currentWorkgroupChanged',\r\n        {currentWorkgroup: this.currentWorkgroup});\r\n  }\r\n\r\n  getCurrentWorkgroup() {\r\n    return this.currentWorkgroup;\r\n  }\r\n\r\n  setCurrentStep(step) {\r\n    this.currentStep = step;\r\n    this.$rootScope.$broadcast('currentStepChanged',\r\n        {currentStep: this.currentStep});\r\n  }\r\n\r\n  getCurrentStep() {\r\n    return this.currentStep;\r\n  }\r\n\r\n  /**\r\n   * Get the current node\r\n   * @returns the current node object\r\n   */\r\n  getCurrentNode() {\r\n    return this.currentNode;\r\n  }\r\n\r\n  /**\r\n   * Get the current node id\r\n   * @returns the current node id\r\n   */\r\n  getCurrentNodeId() {\r\n    if (this.currentNode != null) {\r\n      return this.currentNode.id;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Set the current node\r\n   * @param nodeId the node id\r\n   */\r\n  setCurrentNodeByNodeId(nodeId) {\r\n    if (nodeId != null) {\r\n      let node = this.ProjectService.getNodeById(nodeId);\r\n      this.setCurrentNode(node);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current node\r\n   * @param node the node object\r\n   */\r\n  setCurrentNode(node) {\r\n    let previousCurrentNode = this.currentNode;\r\n    if (previousCurrentNode !== node) {\r\n      if (previousCurrentNode &&\r\n          !this.ProjectService.isGroupNode(previousCurrentNode.id)) {\r\n        this.previousStep = previousCurrentNode;\r\n      }\r\n\r\n      this.currentNode = node;\r\n      this.$rootScope.$broadcast('currentNodeChanged',\r\n          {previousNode: previousCurrentNode, currentNode: this.currentNode});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * End the current node\r\n   */\r\n  endCurrentNode() {\r\n    const previousCurrentNode = this.currentNode;\r\n    if (previousCurrentNode != null) {\r\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * End the current node and set the current node\r\n   * @param nodeId the node id of the new current node\r\n   */\r\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\r\n    this.endCurrentNode();\r\n    this.setCurrentNodeByNodeId(nodeId);\r\n  }\r\n\r\n  /**\r\n   * Get the total score for a workgroup\r\n   * @param workgroupId the workgroup id\r\n   * @returns the total score for the workgroup\r\n   */\r\n  getTotalScoreByWorkgroupId(workgroupId) {\r\n    if (this.studentData.annotationsToWorkgroupId != null) {\r\n      const annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\r\n      return this.AnnotationService.getTotalScore(annotations, workgroupId);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the run status\r\n   * @returns the run status object\r\n   */\r\n  getRunStatus() {\r\n    return this.runStatus;\r\n  }\r\n\r\n  /**\r\n   * Check if any period in the run is paused\r\n   * @returns Boolean whether any periods are paused\r\n   */\r\n  isAnyPeriodPaused(periodId) {\r\n    let runStatus = this.runStatus;\r\n\r\n    if (runStatus && runStatus.periods) {\r\n      let periods = runStatus.periods;\r\n      let nPeriods = periods.length;\r\n      let nPeriodsPaused = 0;\r\n      for (let period of periods) {\r\n        if (period != null) {\r\n          if (period.paused) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check if the given period is paused\r\n   * @param periodId the id for a period\r\n   * @returns Boolean whether the period is paused or not\r\n   */\r\n  isPeriodPaused(periodId) {\r\n    let isPaused = false;\r\n    let runStatus = this.runStatus;\r\n\r\n    if (runStatus && runStatus.periods) {\r\n      let periods = runStatus.periods;\r\n      let nPeriods = periods.length;\r\n      let nPeriodsPaused = 0;\r\n\r\n      for (let period of periods) {\r\n        if (period != null) {\r\n          isPaused = period.paused;\r\n          if (periodId == period.periodId) {\r\n            // we have found the period we are looking for\r\n            break;\r\n          } else {\r\n            if (isPaused) {\r\n              nPeriodsPaused++;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (periodId === -1 && nPeriods === nPeriodsPaused) {\r\n        isPaused = true;\r\n      }\r\n    }\r\n    return isPaused;\r\n  }\r\n\r\n  /**\r\n   * The pause screen status was changed for the given periodId. Update period accordingly.\r\n   * @param periodId the id of the period to toggle\r\n   * @param isPaused Boolean whether the period should be paused or not\r\n   */\r\n  pauseScreensChanged(periodId, isPaused) {\r\n    if (periodId) {\r\n      this.updatePausedRunStatusValue(periodId, isPaused);\r\n\r\n      if (isPaused) {\r\n        this.TeacherWebSocketService.pauseScreens(periodId);\r\n      } else {\r\n        this.TeacherWebSocketService.unPauseScreens(periodId);\r\n      }\r\n\r\n      this.sendRunStatus();\r\n      let context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\r\n        category = \"TeacherAction\", data = { periodId: periodId };\r\n      let event = \"pauseScreen\";\r\n      if (!isPaused) {\r\n        event = \"unPauseScreen\";\r\n      }\r\n      this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\r\n      this.$rootScope.$broadcast('pauseScreensChanged', {periods: this.runStatus.periods});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a local run status object to keep track of the run status\r\n   * @returns the run status object\r\n   */\r\n  createRunStatus() {\r\n    const runStatus = {};\r\n    runStatus.runId = this.ConfigService.getConfigParam('runId');\r\n    const periods = this.ConfigService.getPeriods();\r\n    for (let period of periods) {\r\n      period.paused = false;\r\n    }\r\n    runStatus.periods = periods;\r\n    this.runStatus = runStatus;\r\n    return this.runStatus;\r\n  }\r\n\r\n  /**\r\n   * Update the paused value for a period in our run status\r\n   * @param periodId the period id\r\n   * @param value whether the period is paused or not\r\n   */\r\n  updatePausedRunStatusValue(periodId, value) {\r\n    if (this.runStatus == null) {\r\n      this.createRunStatus();\r\n    }\r\n\r\n    let runStatus = this.runStatus;\r\n    let periods = runStatus.periods;\r\n    let allPeriodsPaused = true;\r\n\r\n    if (periods) {\r\n      let l = periods.length, x = l - 1;\r\n      for (; x > -1; x--) {\r\n        let tempPeriod = periods[x];\r\n        let tempPeriodId = tempPeriod.periodId;\r\n\r\n        //check if the period id matches the one we need to update or if all periods has been selected\r\n        if (periodId === tempPeriodId || periodId === -1) {\r\n          tempPeriod.paused = value;\r\n        }\r\n\r\n        if (tempPeriodId !== -1 && !tempPeriod.paused) {\r\n          allPeriodsPaused = false;\r\n        }\r\n\r\n        if (tempPeriodId === -1) {\r\n          tempPeriod.paused = allPeriodsPaused;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send the run status back to the server to be saved in the db\r\n   * @param customPauseMessage the custom pause message text to send to the students\r\n   */\r\n  sendRunStatus(customPauseMessage) {\r\n    const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\r\n    if (runStatusURL != null) {\r\n      const runId = this.ConfigService.getConfigParam('runId');\r\n      if (customPauseMessage != null) {\r\n        this.runStatus.pauseMessage = customPauseMessage;\r\n      }\r\n\r\n      const runStatus = angular.toJson(this.runStatus);\r\n      const runStatusParams = {\r\n        runId:runId,\r\n        status:runStatus\r\n      };\r\n\r\n      const httpParams = {};\r\n      httpParams.method = 'POST';\r\n      httpParams.url = runStatusURL;\r\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\r\n      httpParams.data = $.param(runStatusParams);\r\n      this.$http(httpParams);\r\n    }\r\n  };\r\n}\r\n\r\nTeacherDataService.$inject = [\r\n  '$http',\r\n  '$filter',\r\n  '$q',\r\n  '$rootScope',\r\n  'AnnotationService',\r\n  'ConfigService',\r\n  'NotificationService',\r\n  'ProjectService',\r\n  'TeacherWebSocketService',\r\n  'UtilService'\r\n];\r\n\r\nexport default TeacherDataService;\r\n"]}