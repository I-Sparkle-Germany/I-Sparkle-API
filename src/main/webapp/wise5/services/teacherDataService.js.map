{"version":3,"sources":["teacherDataService.es6"],"names":[],"mappings":"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","file":"teacherDataService.js","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n\n    constructor($http,\n                $rootScope,\n                AnnotationService,\n                ConfigService,\n                ProjectService) {\n        this.$http = $http;\n        this.$rootScope = $rootScope;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n\n        this.studentData = {};\n        this.currentPeriod = null;\n        this.runStatus == null;\n    }\n\n    /**\n     * Retrieves the export given the export Type\n     * @param exportType\n     */\n    getExport(exportType) {\n        var exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n        var runId = this.ConfigService.getRunId();\n        exportURL += \"/\" + runId + \"/\" + exportType;\n\n        var params = {};\n        params.getStudentWork = true;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = exportURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            return result.data;\n        });\n    };\n\n    /**\n     * Retrieve the student data for a node id\n     * @param nodeId the node id\n     * @returns the student data for the node id\n     */\n    retrieveStudentDataByNodeId(nodeId) {\n\n        var periodId = null;\n\n        if (this.currentPeriod != null && this.currentPeriod.periodName != 'All') {\n            periodId = this.currentPeriod.periodId;\n        }\n        \n        // get the node ids and component ids in the node\n        var nodeIdsAndComponentIds = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n        \n        // get the show previous work node ids and component ids in the node\n        var showPreviousWorkNodeIdsAndComponentIds = this.ProjectService.getShowPreviousWorkNodeIdsAndComponentIds(nodeId);\n\n        var components = [];\n        components = components.concat(nodeIdsAndComponentIds);\n        components = components.concat(showPreviousWorkNodeIdsAndComponentIds);\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = periodId;\n        params.workgroupId = null;\n        params.components = components;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data for the workgroup id\n     * @param workgroupId the workgroup id\n     * @returns the student data for the workgroup id\n     */\n    retrieveStudentDataByWorkgroupId(workgroupId) {\n\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = workgroupId;\n        params.toWorkgroupId = workgroupId;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the annotations for the run\n     * @returns the annotations for the run\n     */\n    retrieveAnnotations() {\n        var params = {};\n        params.runId = this.ConfigService.getRunId();\n        params.periodId = null;\n        params.nodeId = null;\n        params.workgroupId = null;\n        params.toWorkgroupId = null;\n        params.getStudentWork = false;\n        params.getEvents = false;\n        params.getAnnotations = true;\n\n        return this.retrieveStudentData(params);\n    };\n\n    /**\n     * Retrieve the student data\n     * @param params the params that specify what student data we want\n     * @returns a promise\n     */\n    retrieveStudentData(params) {\n        var studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n\n        if (params.getStudentWork == null) {\n            params.getStudentWork = true;\n        }\n\n        if (params.getEvents == null) {\n            params.getEvents = false;\n        }\n\n        if (params.getAnnotations == null) {\n            params.getAnnotations = true;\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = studentDataURL;\n        httpParams.params = params;\n\n        return this.$http(httpParams).then((result) => {\n            var resultData = result.data;\n            if (resultData != null) {\n\n                if (this.studentData == null) {\n                    this.studentData = {};\n                }\n\n                if (resultData.studentWorkList != null) {\n                    var componentStates = resultData.studentWorkList;\n\n                    // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId arrays\n                    this.studentData.componentStates = componentStates;\n                    this.studentData.componentStatesByWorkgroupId = {};\n                    this.studentData.componentStatesByNodeId = {};\n                    this.studentData.componentStatesByComponentId = {};\n\n                    for (var i = 0; i < componentStates.length; i++) {\n                        var componentState = componentStates[i];\n\n                        var componentStateWorkgroupId = componentState.workgroupId;\n                        if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n                            this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n                        }\n                        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n\n                        var componentStateNodeId = componentState.nodeId;\n                        if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n                            this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n                        }\n                        this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n\n                        var componentId = componentState.componentId;\n                        if (this.studentData.componentStatesByComponentId[componentId] == null) {\n                            this.studentData.componentStatesByComponentId[componentId] = new Array();\n                        }\n                        this.studentData.componentStatesByComponentId[componentId].push(componentState);\n                    }\n                }\n\n                if (resultData.events != null) {\n                    // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n                    this.studentData.allEvents = resultData.events;\n                    this.studentData.eventsByWorkgroupId = {};\n                    this.studentData.eventsByNodeId = {};\n                    for (var i = 0; i < resultData.events.length; i++) {\n                        var event = resultData.events[i];\n                        var eventWorkgroupId = event.workgroupId;\n                        if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n                            this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n                        }\n                        this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n\n                        var eventNodeId = event.nodeId;\n                        if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n                            this.studentData.eventsByNodeId[eventNodeId] = new Array();\n                        }\n                        this.studentData.eventsByNodeId[eventNodeId].push(event);\n                    }\n                }\n\n                if (resultData.annotations != null) {\n                    // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n                    this.studentData.annotations = resultData.annotations;\n                    this.studentData.annotationsToWorkgroupId = {};\n                    this.studentData.annotationsByNodeId = {};\n                    for (var i = 0; i < resultData.annotations.length; i++) {\n                        var annotation = resultData.annotations[i];\n                        var annotationWorkgroupId = annotation.toWorkgroupId;\n                        if (this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] == null) {\n                            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n                        }\n                        this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n\n                        var annotationNodeId = annotation.nodeId;\n                        if (this.studentData.annotationsByNodeId[annotationNodeId] == null) {\n                            this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n                        }\n                        this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n                    }\n                }\n\n                this.AnnotationService.setAnnotations(this.studentData.annotations);\n            }\n        });\n    };\n\n    /**\n     * Retrieve the run status from the server\n     */\n    retrieveRunStatus() {\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n        var runId = this.ConfigService.getConfigParam('runId');\n\n        //create the params for the request\n        var params = {\n            runId:runId\n        }\n\n        var httpParams = {};\n        httpParams.method = 'GET';\n        httpParams.url = runStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.params = params;\n\n        // make the request\n        return this.$http(httpParams).then((result) => {\n            if (result != null) {\n                var data = result.data;\n                if (data != null) {\n                    // save the run status\n                    this.runStatus = data;\n                }\n            }\n        });\n    }\n\n    getComponentStatesByWorkgroupId(workgroupId) {\n        if (this.studentData.componentStatesByWorkgroupId == null) {\n            //debugger;\n        }\n        var componentStatesByWorkgroupId = this.studentData.componentStatesByWorkgroupId[workgroupId];\n        if (componentStatesByWorkgroupId != null) {\n            return componentStatesByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getComponentStatesByNodeId(nodeId) {\n        var componentStatesByNodeId = this.studentData.componentStatesByNodeId[nodeId];\n        if (componentStatesByNodeId != null) {\n            return componentStatesByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    /**\n     * Get the component stats for a component id\n     * @param componentId the component id\n     * @returns an array containing component states for a component id\n     */\n    getComponentStatesByComponentId(componentId) {\n        var componentStates = [];\n\n        var componentStatesByComponentId = this.studentData.componentStatesByComponentId[componentId];\n\n        if (componentStatesByComponentId != null) {\n            componentStates = componentStatesByComponentId;\n        }\n\n        return componentStates;\n    };\n\n    getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(workgroupId, nodeId, componentId) {\n        var latestComponentState = null;\n\n        var componentStates = this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n\n        if (componentStates != null) {\n\n            // loop through all the component states from newest to oldest\n            for (var c = componentStates.length - 1; c >= 0; c--) {\n                var componentState = componentStates[c];\n\n                if (componentState != null) {\n                    var componentStateNodeId = componentState.nodeId;\n                    var componentStateComponentId = componentState.componentId;\n\n                    // compare the node id and component id\n                    if (nodeId == componentStateNodeId &&\n                        componentId == componentStateComponentId) {\n                        latestComponentState = componentState;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return latestComponentState;\n    };\n\n    getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    /**\n     * Get component states for a workgroup id and component id\n     * @param workgroupId the workgroup id\n     * @param componentId the component id\n     * @returns an array of component states\n     */\n    getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n        var componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n        var componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n\n        // find the intersect and return it\n        return componentStatesByWorkgroupId.filter((n) => {\n            return componentStatesByComponentId.indexOf(n) != -1;\n        });\n    }\n\n    getEventsByWorkgroupId(workgroupId) {\n        var eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n        if (eventsByWorkgroupId != null) {\n            return eventsByWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByNodeId(nodeId) {\n        var eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n        if (eventsByNodeId != null) {\n            return eventsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n        var eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return eventsByWorkgroupId.filter((n) => {\n            return eventsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    getAnnotationsToWorkgroupId(workgroupId) {\n        var annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n        if (annotationsToWorkgroupId != null) {\n            return annotationsToWorkgroupId;\n        } else {\n            return [];\n        }\n    };\n\n    getAnnotationsByNodeId(nodeId) {\n        var annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n        if (annotationsByNodeId != null) {\n            return annotationsByNodeId;\n        } else {\n            return [];\n        }\n    };\n\n    getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n        var annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n        var annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n        // find the intersect and return it\n        return annotationsToWorkgroupId.filter((n) => {\n            return annotationsByNodeId.indexOf(n) != -1;\n        });\n    };\n\n    setCurrentPeriod(period) {\n        this.currentPeriod = period;\n    };\n\n    getCurrentPeriod() {\n        return this.currentPeriod;\n    };\n\n    /**\n     * Get the total score for a workgroup\n     * @param workgroupId the workgroup id\n     * @returns the total score for the workgroup\n     */\n    getTotalScoreByWorkgroupId(workgroupId) {\n\n        var totalScore = null;\n\n        if (this.studentData.annotationsToWorkgroupId != null) {\n\n            // get all the annotations for a workgroup\n            var annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n\n            // get the total score for the workgroup\n            totalScore = this.AnnotationService.getTotalScore(annotations, workgroupId);\n        }\n\n        return totalScore;\n    }\n\n    /**\n     * Get the run status\n     * @returns the run status object\n     */\n    getRunStatus() {\n        return this.runStatus;\n    }\n\n    /**\n     * Check if a period is paused\n     * @returns whether the period is paused or not\n     */\n    isPeriodPaused(periodId) {\n\n        var isPaused = false;\n\n        // get the run status\n        var runStatus = this.runStatus;\n\n        if (runStatus != null) {\n            if (periodId == -1) {\n                // -1 represents all periods\n                isPaused = runStatus.allPeriodsPaused;\n            } else {\n                var periods = runStatus.periods;\n\n                // loop through all the periods\n                for (var p = 0; p < periods.length; p++) {\n                    var period = periods[p];\n\n                    if (period != null) {\n                        if (periodId == period.periodId) {\n                            // we have found the period we are looking for\n                            isPaused = period.paused;\n                        }\n                    }\n                }\n            }\n        }\n\n        return isPaused;\n    }\n\n    /**\n     * Create a local run status object to keep track of the run status\n     * @returns the run status object\n     */\n    createRunStatus() {\n        var runStatus = {};\n\n        //get the run id\n        runStatus.runId = this.ConfigService.getConfigParam('runId');\n\n        //set this to default to not paused\n        runStatus.allPeriodsPaused = false;\n\n        //get all the periods objects\n        var periods = this.ConfigService.getPeriods();\n\n        //loop through all the periods\n        for(var x = 0; x < periods.length; x++) {\n            //get a period\n            var period = periods[x];\n\n            //set this to default to not paused\n            period.paused = false;\n        }\n\n        //set the periods into the run status\n        runStatus.periods = periods;\n\n        //set the run status into the view so we can access it later\n        this.runStatus = runStatus;\n\n        return this.runStatus;\n    }\n\n    /**\n     * Update the paused value for a period in our run status\n     * @param periodId the period id\n     * @param value whether the period is paused or not\n     */\n    updatePausedRunStatusValue(periodId, value) {\n        //create the local run status object if necessary\n        if(this.runStatus == null) {\n            this.createRunStatus();\n        }\n\n        //get the local run status object\n        var runStatus = this.runStatus;\n\n        if(periodId == null || periodId == -1) {\n            //we are updating the all periods value\n            runStatus.allPeriodsPaused = value;\n\n            //set all the periods to the value as well\n            //this.setAllPeriodsPaused(value);\n        } else {\n            //we are updating a specific period\n\n            //get all the periods\n            var periods = runStatus.periods;\n\n            if(periods != null) {\n                //loop through all the periods\n                for(var x = 0; x < periods.length; x++) {\n                    //get a period\n                    var tempPeriod = periods[x];\n\n                    //get the period id\n                    var tempPeriodId = tempPeriod.periodId;\n\n                    //check if the period id matches the one we need to update\n                    if(periodId == tempPeriodId) {\n                        //we have found the period we want to update\n                        tempPeriod.paused = value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Send the run status back to the server to be saved in the db\n     * @param customPauseMessage the custom pause message text to send to the students\n     */\n    sendRunStatus(customPauseMessage) {\n        //get the run status url we will use to make the request\n        var runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n\n        if(runStatusURL != null) {\n            //make the request to the server for the student statuses\n\n            //get the run id\n            var runId = this.ConfigService.getConfigParam('runId');\n\n            if(customPauseMessage != null) {\n                //set the pause message if one was provided\n                this.runStatus.pauseMessage = customPauseMessage;\n            }\n\n            //get the run status as a string\n            var runStatus = angular.toJson(this.runStatus);\n\n            //create the params for the request\n            var runStatusParams = {\n                runId:runId,\n                status:runStatus\n            }\n\n            var httpParams = {};\n            httpParams.method = 'POST';\n            httpParams.url = runStatusURL;\n            httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n            httpParams.data = $.param(runStatusParams);\n\n            // make the request\n            this.$http(httpParams);\n        }\n    };\n}\n\nTeacherDataService.$inject = ['$http',\n    '$rootScope',\n    'AnnotationService',\n    'ConfigService',\n    'ProjectService'\n];\n\nexport default TeacherDataService;\n"]}