{"version":3,"sources":["teacherWebSocketService.es6"],"names":[],"mappings":";;;;;;;;;;IAAM;AACF,aADE,uBACF,CAAY,UAAZ,EAAwB,UAAxB,EAAoC,aAApC,EAAmD,oBAAnD,EAAyE;8BADvE,yBACuE;;AACrE,aAAK,UAAL,GAAkB,UAAlB,CADqE;AAErE,aAAK,UAAL,GAAkB,UAAlB,CAFqE;AAGrE,aAAK,aAAL,GAAqB,aAArB,CAHqE;AAIrE,aAAK,oBAAL,GAA4B,oBAA5B,CAJqE;AAKrE,aAAK,UAAL,GAAkB,IAAlB,CALqE;KAAzE;;iBADE;;qCASW;AACT,gBAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,EAAR,CADK;AAET,gBAAI,WAAW,KAAK,aAAL,CAAmB,WAAnB,EAAX,CAFK;AAGT,gBAAI,cAAc,KAAK,aAAL,CAAmB,cAAnB,EAAd,CAHK;AAIT,gBAAI,eAAe,KAAK,aAAL,CAAmB,eAAnB,EAAf,CAJK;AAKT,4BAAgB,YAAY,KAAZ,GAAoB,YAApB,GAAmC,QAAnC,GAA8C,eAA9C,GAAgE,WAAhE,CALP;AAMT,iBAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,YAAhB,CAAlB,CANS;;AAQT,iBAAK,UAAL,CAAgB,SAAhB,CAA0B,QAAQ,IAAR,CAAa,IAAb,EAAmB,UAAS,OAAT,EAAkB;AAC3D,qBAAK,aAAL,CAAmB,OAAnB,EAD2D;aAAlB,CAA7C,EARS;;;;sCAaC,SAAS;AACnB,gBAAI,OAAO,KAAK,KAAL,CAAW,QAAQ,IAAR,CAAlB,CADe;AAEnB,gBAAI,cAAc,KAAK,WAAL,CAFC;;AAInB,gBAAI,gBAAgB,eAAhB,EAAiC;AACjC,qBAAK,2BAAL,CAAiC,IAAjC,EADiC;aAArC,MAEO,IAAI,gBAAgB,oBAAhB,EAAsC;AAC7C,qBAAK,4BAAL,CAAkC,IAAlC,EAD6C;aAA1C,MAEA,IAAI,gBAAgB,kBAAhB,EAAoC,EAAxC,MAEA,IAAI,gBAAgB,qBAAhB,EAAuC;AAC9C,qBAAK,yBAAL,CAA+B,IAA/B,EAD8C;aAA3C;;;;qDAKkB,uBAAuB;AAChD,iBAAK,mBAAL,GAA2B,sBAAsB,kBAAtB,CADqB;;AAGhD,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,wBAA3B,EAAqD,EAAC,gBAAgB,KAAK,mBAAL,EAAtE,EAHgD;;;;4CAMhC;AAChB,gBAAI,iBAAiB,EAAjB,CADY;AAEhB,gBAAI,KAAK,mBAAL,IAA4B,IAA5B,EAAkC;AAClC,iCAAiB,KAAK,mBAAL,CADiB;aAAtC;AAGA,mBAAO,cAAP,CALgB;;;;;;;;;;oDAYQ,eAAe;AACvC,gBAAI,cAAc,cAAc,WAAd;;;AADqB,gBAIvC,CAAK,oBAAL,CAA0B,8BAA1B,CAAyD,WAAzD,EAAsE,aAAtE;;;AAJuC,gBAOvC,CAAK,UAAL,CAAgB,KAAhB,CAAsB,uBAAtB,EAA+C,EAAC,eAAe,aAAf,EAAhD,EAPuC;;;;;;;;;kDAajB,4BAA4B;;;AAGlD,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,qBAA3B,EAAkD,EAAC,MAAM,0BAAN,EAAnD,EAHkD;;;;WApEpD;;;AA2EN,wBAAwB,OAAxB,GAAkC,CAAC,YAAD,EAAe,YAAf,EAA6B,eAA7B,EAA8C,sBAA9C,CAAlC;;kBAEe","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n    constructor($rootScope, $websocket, ConfigService, StudentStatusService) {\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentStatusService = StudentStatusService;\n        this.dataStream = null;\n    }\n\n    initialize() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        var webSocketURL = this.ConfigService.getWebSocketURL();\n        webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n        this.dataStream = this.$websocket(webSocketURL);\n\n        this.dataStream.onMessage(angular.bind(this, function(message) {\n            this.handleMessage(message);\n        }));\n    };\n\n    handleMessage(message) {\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'studentStatus') {\n            this.handleStudentStatusReceived(data);\n        } else if (messageType === 'studentsOnlineList') {\n            this.handleStudentsOnlineReceived(data);\n        } else if (messageType === 'studentConnected') {\n            \n        } else if (messageType === 'studentDisconnected') {\n            this.handleStudentDisconnected(data);\n        }\n    };\n\n    handleStudentsOnlineReceived(studentsOnlineMessage) {\n        this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n\n        this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n    };\n\n    getStudentsOnline() {\n        var studentsOnline = [];\n        if (this.studentsOnlineArray != null) {\n            studentsOnline = this.studentsOnlineArray;\n        }\n        return studentsOnline;\n    };\n\n    /**\n     * This function is called when the teacher receives a websocket message\n     * with messageType 'studentStatus'.\n     */\n    handleStudentStatusReceived(studentStatus) {\n        var workgroupId = studentStatus.workgroupId;\n\n        // update the student status for the workgroup\n        this.StudentStatusService.setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n\n        // fire the student status received event\n        this.$rootScope.$emit('studentStatusReceived', {studentStatus: studentStatus});\n    };\n\n    /**\n     * Handle the student disconnected message\n     */\n    handleStudentDisconnected(studentDisconnectedMessage) {\n\n        // fire the student disconnected event\n        this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n    }\n}\n\nTeacherWebSocketService.$inject = ['$rootScope', '$websocket', 'ConfigService', 'StudentStatusService'];\n\nexport default TeacherWebSocketService;\n"]}