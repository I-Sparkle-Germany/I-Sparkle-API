{"version":3,"sources":["teacherWebSocketService.es6"],"names":["TeacherWebSocketService","$rootScope","$stomp","ConfigService","StudentStatusService","dataStream","studentsOnlineArray","runId","getRunId","connect","getWebSocketURL","then","frame","subscribeToTeacherTopic","subscribeToTeacherWorkgroupTopic","e","console","log","subscribe","message","headers","res","type","studentWork","content","studentData","JSON","parse","$broadcast","studentStatus","status","setStudentStatus","$emit","achievement","data","studentAchievement","annotationData","annotation","getWorkgroupId","notification","studentsOnlineMessage","studentsOnlineList","studentsOnline","workgroupId","indexOf","studentDisconnectedMessage","periodId","send","$inject"],"mappings":"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","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      ConfigService,\n      StudentStatusService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.ConfigService = ConfigService;\n    this.StudentStatusService = StudentStatusService;\n    this.dataStream = null;\n    this.studentsOnlineArray = [];\n  }\n\n  initialize() {\n    this.runId = this.ConfigService.getRunId();\n    try {\n      this.$stomp.connect(this.ConfigService.getWebSocketURL()).then((frame) => {\n        this.subscribeToTeacherTopic();\n        this.subscribeToTeacherWorkgroupTopic();\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  subscribeToTeacherTopic() {\n    this.$stomp.subscribe(`/topic/teacher/${this.runId}`, (message, headers, res) => {\n      if (message.type === 'studentWork') {\n        const studentWork = message.content;\n        studentWork.studentData = JSON.parse(studentWork.studentData);\n        this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: studentWork});\n      } else if (message.type === 'studentStatus') {\n        const studentStatus = message.content;\n        const status = JSON.parse(studentStatus.status);\n        this.StudentStatusService.setStudentStatus(status);\n        this.$rootScope.$emit('studentStatusReceived', {studentStatus: status});\n      } else if (message.type === 'newStudentAchievement') {\n        const achievement = message.content;\n        achievement.data = JSON.parse(achievement.data);\n        this.$rootScope.$broadcast('newStudentAchievement', {studentAchievement: achievement});\n      } else if (message.type === 'annotation') {\n        const annotationData = message.content;\n        annotationData.data = JSON.parse(annotationData.data);\n        this.$rootScope.$broadcast('newAnnotationReceived', {annotation: annotationData});\n      }\n    });\n  }\n\n  subscribeToTeacherWorkgroupTopic() {\n    this.$stomp.subscribe(`/topic/workgroup/${this.ConfigService.getWorkgroupId()}`, (message, headers, res) => {\n      if (message.type === 'notification') {\n        const notification = message.content;\n        notification.data = JSON.parse(notification.data);\n        this.$rootScope.$broadcast('newNotificationReceived', notification);\n      }\n    });\n  }\n\n  handleStudentsOnlineReceived(studentsOnlineMessage) {\n    this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n    this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n  }\n\n  getStudentsOnline() {\n    return this.studentsOnlineArray;\n  }\n\n  isStudentOnline(workgroupId) {\n    return this.studentsOnlineArray.indexOf(workgroupId) > -1;\n  }\n\n  handleStudentDisconnected(studentDisconnectedMessage) {\n    this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n  }\n\n  pauseScreens(periodId) {\n    this.$stomp.send(`/app/pause/${this.runId}/${periodId}`, {}, {});\n  }\n\n  unPauseScreens(periodId) {\n    this.$stomp.send(`/app/unpause/${this.runId}/${periodId}`, {}, {});\n  }\n}\n\nTeacherWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  'ConfigService',\n  'StudentStatusService'\n];\n\nexport default TeacherWebSocketService;\n"]}