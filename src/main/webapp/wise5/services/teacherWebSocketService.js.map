{"version":3,"sources":["teacherWebSocketService.es6"],"names":["TeacherWebSocketService","$rootScope","$stomp","$websocket","ConfigService","StudentStatusService","dataStream","studentsOnlineArray","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","connect","then","frame","console","log","subscription","subscribe","payload","headers","res","teacherSubscription","message","type","studentWork","content","studentData","JSON","parse","$broadcast","studentStatus","status","handleStudentStatusReceived","send","stringify","e","studentsOnlineMessage","studentsOnlineList","studentsOnline","indexOf","setStudentStatusForWorkgroupId","$emit","studentDisconnectedMessage","data","$inject"],"mappings":";;;;;;;;;;IAAMA,uB;AACJ,mCACIC,UADJ,EAEIC,MAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,oBALJ,EAK0B;AAAA;;AACxB,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACD;;;;iCAEY;AAAA;;AACX,WAAKC,KAAL,GAAa,KAAKJ,aAAL,CAAmBK,QAAnB,EAAb;AACA,UAAMC,WAAW,KAAKN,aAAL,CAAmBO,WAAnB,EAAjB;AACA,UAAMC,cAAc,KAAKR,aAAL,CAAmBS,cAAnB,EAApB;AACA,UAAMC,eAAe,KAAKV,aAAL,CAAmBW,eAAnB,EAArB;AACA,UAAI;AACF,aAAKb,MAAL,CAAYc,OAAZ,CAAoBF,YAApB,EAAkCG,IAAlC,CAAuC,UAACC,KAAD,EAAW;AAChDC,kBAAQC,GAAR,CAAY,YAAZ;AACA,cAAMC,eAAe,MAAKnB,MAAL,CAAYoB,SAAZ,CAAsB,kBAAtB,EAA0C,UAACC,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AACxF,kBAAKF,OAAL,GAAeA,OAAf;AACAJ,oBAAQC,GAAR,CAAYG,OAAZ;AACD,WAHoB,EAGlB,EAHkB,CAArB;AAIA,cAAMG,sBAAsB,MAAKxB,MAAL,CAAYoB,SAAZ,qBAAwC,MAAKd,KAA7C,EAAsD,UAACmB,OAAD,EAAUH,OAAV,EAAmBC,GAAnB,EAA2B;AAC3G,gBAAIE,QAAQC,IAAR,KAAiB,aAArB,EAAoC;AAClC,kBAAMC,cAAcF,QAAQG,OAA5B;AACAD,0BAAYE,WAAZ,GAA0BC,KAAKC,KAAL,CAAWJ,YAAYE,WAAvB,CAA1B;AACA,oBAAK9B,UAAL,CAAgBiC,UAAhB,CAA2B,wBAA3B,EAAqD,EAACL,aAAaA,WAAd,EAArD;AACD,aAJD,MAIO,IAAIF,QAAQC,IAAR,KAAiB,eAArB,EAAsC;AAC3C,kBAAMO,gBAAgBR,QAAQG,OAA9B;AACA,kBAAMM,SAASJ,KAAKC,KAAL,CAAWE,cAAcC,MAAzB,CAAf;AACA,oBAAKC,2BAAL,CAAiCD,MAAjC;AACD;AACF,WAV2B,EAUzB,EAVyB,CAA5B;AAWA,gBAAKlC,MAAL,CAAYoC,IAAZ,CAAiB,YAAjB,EAA+BN,KAAKO,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAf,CAA/B,EAAoE,EAApE;AACD,SAlBD;AAmBD,OApBD,CAoBE,OAAMC,CAAN,EAAS;AACTrB,gBAAQC,GAAR,CAAYoB,CAAZ;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA2B6BC,qB,EAAuB;AAClD,WAAKlC,mBAAL,GAA2BkC,sBAAsBC,kBAAjD;AACA,WAAKzC,UAAL,CAAgBiC,UAAhB,CAA2B,wBAA3B,EAAqD,EAACS,gBAAgB,KAAKpC,mBAAtB,EAArD;AACD;;;wCAEmB;AAClB,aAAO,KAAKA,mBAAZ;AACD;;;oCAEeK,W,EAAa;AAC3B,aAAO,KAAKL,mBAAL,CAAyBqC,OAAzB,CAAiChC,WAAjC,IAAgD,CAAC,CAAxD;AACD;;;gDAE2BuB,a,EAAe;AACzC,UAAMvB,cAAcuB,cAAcvB,WAAlC;AACA,WAAKP,oBAAL,CACKwC,8BADL,CACoCjC,WADpC,EACiDuB,aADjD;AAEA,WAAKlC,UAAL,CACK6C,KADL,CACW,uBADX,EACoC,EAACX,eAAeA,aAAhB,EADpC;AAED;;;8CAEyBY,0B,EAA4B;AACpD,WAAK9C,UAAL,CAAgBiC,UAAhB,CAA2B,qBAA3B,EAAkD,EAACc,MAAMD,0BAAP,EAAlD;AACD;;;iCAEYrC,Q,EAAU;AACrB,WAAKR,MAAL,CAAYoC,IAAZ,iBAA+B,KAAK9B,KAApC,SAA6CE,QAA7C,EAAyDsB,KAAKO,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAf,CAAzD,EAA8F,EAA9F;AACD;;;mCAEc7B,Q,EAAU;AACvB,WAAKR,MAAL,CAAYoC,IAAZ,mBAAiC,KAAK9B,KAAtC,SAA+CE,QAA/C,EAA2DsB,KAAKO,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAf,CAA3D,EAAgG,EAAhG;AACD;;;;;;AAGHvC,wBAAwBiD,OAAxB,GAAkC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,YAHgC,EAIhC,eAJgC,EAKhC,sBALgC,CAAlC;;kBAQejD,uB","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      $websocket,\n      ConfigService,\n      StudentStatusService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentStatusService = StudentStatusService;\n    this.dataStream = null;\n    this.studentsOnlineArray = [];\n  }\n\n  initialize() {\n    this.runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    const webSocketURL = this.ConfigService.getWebSocketURL();\n    try {\n      this.$stomp.connect(webSocketURL).then((frame) => {\n        console.log('connected!');\n        const subscription = this.$stomp.subscribe('/topic/greetings', (payload, headers, res) => {\n          this.payload = payload;\n          console.log(payload);\n        }, {});\n        const teacherSubscription = this.$stomp.subscribe(`/topic/teacher/${this.runId}`, (message, headers, res) => {\n          if (message.type === 'studentWork') {\n            const studentWork = message.content;\n            studentWork.studentData = JSON.parse(studentWork.studentData);\n            this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: studentWork});\n          } else if (message.type === 'studentStatus') {\n            const studentStatus = message.content;\n            const status = JSON.parse(studentStatus.status);\n            this.handleStudentStatusReceived(status);\n          }\n        }, {});\n        this.$stomp.send('/app/hello', JSON.stringify({'name': 'teacher'}), {});\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  /*\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n    if (messageType === 'studentStatus') {\n      this.handleStudentStatusReceived(data);\n    } else if (messageType === 'studentsOnlineList') {\n      this.handleStudentsOnlineReceived(data);\n    } else if (messageType === 'studentConnected') {\n\n    } else if (messageType === 'studentDisconnected') {\n      this.handleStudentDisconnected(data);\n    } else if (messageType === 'notification' || messageType === 'CRaterResultNotification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'newAnnotation') {\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: data.annotation});\n    } else if (messageType === 'newStudentWork') {\n      this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: data.studentWork});\n    } else if (messageType === 'newStudentAchievement') {\n      this.$rootScope.$broadcast('newStudentAchievement', {studentAchievement: data.studentAchievement});\n    }\n  }\n  sendMessage(messageJSON) {\n    this.dataStream.send(messageJSON);\n  }\n*/\n\n  handleStudentsOnlineReceived(studentsOnlineMessage) {\n    this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n    this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n  }\n\n  getStudentsOnline() {\n    return this.studentsOnlineArray;\n  }\n\n  isStudentOnline(workgroupId) {\n    return this.studentsOnlineArray.indexOf(workgroupId) > -1;\n  }\n\n  handleStudentStatusReceived(studentStatus) {\n    const workgroupId = studentStatus.workgroupId;\n    this.StudentStatusService\n        .setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n    this.$rootScope\n        .$emit('studentStatusReceived', {studentStatus: studentStatus});\n  }\n\n  handleStudentDisconnected(studentDisconnectedMessage) {\n    this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n  }\n\n  pauseScreens(periodId) {\n    this.$stomp.send(`/app/pause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {});\n  }\n\n  unPauseScreens(periodId) {\n    this.$stomp.send(`/app/unpause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {});\n  }\n}\n\nTeacherWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService',\n  'StudentStatusService'\n];\n\nexport default TeacherWebSocketService;\n"]}