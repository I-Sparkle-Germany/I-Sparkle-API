{"version":3,"sources":["teacherWebSocketService.es6"],"names":["TeacherWebSocketService","$rootScope","$stomp","$websocket","ConfigService","StudentStatusService","dataStream","studentsOnlineArray","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","connect","then","frame","console","log","subscription","subscribe","payload","headers","res","send","JSON","stringify","priority","custom","e","message","data","parse","messageType","handleStudentStatusReceived","handleStudentsOnlineReceived","handleStudentDisconnected","$broadcast","annotation","studentWork","studentAchievement","messageJSON","studentsOnlineMessage","studentsOnlineList","studentsOnline","indexOf","studentStatus","setStudentStatusForWorkgroupId","$emit","studentDisconnectedMessage","$inject"],"mappings":"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","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      $websocket,\n      ConfigService,\n      StudentStatusService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentStatusService = StudentStatusService;\n    this.dataStream = null;\n    this.studentsOnlineArray = [];\n  }\n\n  initialize() {\n    this.runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    const webSocketURL = this.ConfigService.getWebSocketURL();\n    try {\n      this.$stomp.connect(webSocketURL).then((frame) => {\n        console.log('connected!');\n        const subscription = this.$stomp.subscribe('/topic/greetings', (payload, headers, res) => {\n          this.payload = payload;\n          console.log(payload);\n        }, {\n          'headers': 'are awesome'\n        });\n\n        this.$stomp.send('/app/hello', JSON.stringify({'name': 'teacher'}), {\n          priority: 9,\n          custom: 42\n        });\n\n      });\n      // this.dataStream = this.$websocket(webSocketURL);\n      // this.dataStream.onMessage((message) => {\n      //   this.handleMessage(message);\n      // });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n    if (messageType === 'studentStatus') {\n      this.handleStudentStatusReceived(data);\n    } else if (messageType === 'studentsOnlineList') {\n      this.handleStudentsOnlineReceived(data);\n    } else if (messageType === 'studentConnected') {\n\n    } else if (messageType === 'studentDisconnected') {\n      this.handleStudentDisconnected(data);\n    } else if (messageType === 'notification' || messageType === 'CRaterResultNotification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'newAnnotation') {\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: data.annotation});\n    } else if (messageType === 'newStudentWork') {\n      this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: data.studentWork});\n    } else if (messageType === 'newStudentAchievement') {\n      this.$rootScope.$broadcast('newStudentAchievement', {studentAchievement: data.studentAchievement});\n    }\n  }\n\n  sendMessage(messageJSON) {\n    this.dataStream.send(messageJSON);\n  }\n\n  handleStudentsOnlineReceived(studentsOnlineMessage) {\n    this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n    this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n  }\n\n  getStudentsOnline() {\n    return this.studentsOnlineArray;\n  }\n\n  /**\n   * Check to see if a given workgroup is currently online\n   * @param workgroupId the workgroup id\n   * @returns boolean whether a workgroup is online\n   */\n  isStudentOnline(workgroupId) {\n    return this.studentsOnlineArray.indexOf(workgroupId) > -1;\n  }\n\n  /**\n   * This function is called when the teacher receives a websocket message\n   * with messageType 'studentStatus'.\n   */\n  handleStudentStatusReceived(studentStatus) {\n    const workgroupId = studentStatus.workgroupId;\n    this.StudentStatusService\n        .setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n    this.$rootScope\n        .$emit('studentStatusReceived', {studentStatus: studentStatus});\n  }\n\n  /**\n   * Handle the student disconnected message\n   */\n  handleStudentDisconnected(studentDisconnectedMessage) {\n    this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n  }\n\n  pauseScreens(periodId) {\n    this.$stomp.send(`/app/pause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {\n      priority: 9,\n      custom: 42\n    });\n\n    /*\n    if (periodId === -1) {\n      this.$stomp.send(`/app/pause/${this.runId}`, JSON.stringify({'name': 'teacher'}), {\n        priority: 9,\n        custom: 42\n      });\n    } else {\n      this.$stomp.send(`/app/pause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {\n        priority: 9,\n        custom: 42\n      });\n    }\n    const messageJSON = {};\n    messageJSON.messageType = 'pauseScreen';\n\n    if (periodId == null || periodId == -1) {\n      messageJSON.messageParticipants = 'teacherToStudentsInRun';\n    } else if(periodId != null) {\n      messageJSON.periodId = periodId;\n      messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n    }\n    this.sendMessage(messageJSON);\n    */\n  }\n\n  unPauseScreens(periodId) {\n    this.$stomp.send(`/app/unpause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {\n      priority: 9,\n      custom: 42\n    });\n    /*\n    if (periodId === -1) {\n      this.$stomp.send(`/app/unpause/${this.runId}`, JSON.stringify({'name': 'teacher'}), {\n        priority: 9,\n        custom: 42\n      });\n    } else {\n      this.$stomp.send(`/app/unpause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {\n        priority: 9,\n        custom: 42\n      });\n\n      const messageJSON = {};\n      messageJSON.messageType = 'unPauseScreen';\n\n      if(periodId == null || periodId == -1) {\n        messageJSON.messageParticipants = 'teacherToStudentsInRun';\n      } else if(periodId != null) {\n        messageJSON.periodId = periodId;\n        messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n      }\n      this.sendMessage(messageJSON);\n    }\n      */\n  }\n}\n\nTeacherWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService',\n  'StudentStatusService'\n];\n\nexport default TeacherWebSocketService;\n"]}