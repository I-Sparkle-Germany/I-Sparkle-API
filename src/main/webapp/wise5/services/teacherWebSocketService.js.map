{"version":3,"sources":["teacherWebSocketService.es6"],"names":["TeacherWebSocketService","$rootScope","$websocket","ConfigService","StudentStatusService","dataStream","studentsOnlineArray","runId","getRunId","periodId","getPeriodId","workgroupId","getWorkgroupId","webSocketURL","getWebSocketURL","onMessage","message","handleMessage","data","JSON","parse","messageType","handleStudentStatusReceived","handleStudentsOnlineReceived","handleStudentDisconnected","$broadcast","annotation","studentWork","studentAchievement","messageJSON","send","studentsOnlineMessage","studentsOnlineList","studentsOnline","indexOf","studentStatus","setStudentStatusForWorkgroupId","$emit","studentDisconnectedMessage","messageParticipants","sendMessage","$inject"],"mappings":"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","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n  constructor($rootScope, $websocket, ConfigService, StudentStatusService) {\n    this.$rootScope = $rootScope;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentStatusService = StudentStatusService;\n    this.dataStream = null;\n    this.studentsOnlineArray = [];\n  }\n\n  initialize() {\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var workgroupId = this.ConfigService.getWorkgroupId();\n    var webSocketURL = this.ConfigService.getWebSocketURL();\n    webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n    this.dataStream = this.$websocket(webSocketURL);\n\n    this.dataStream.onMessage((message) => {\n      this.handleMessage(message);\n    });\n  };\n\n  handleMessage(message) {\n    var data = JSON.parse(message.data);\n    var messageType = data.messageType;\n\n    if (messageType === 'studentStatus') {\n      this.handleStudentStatusReceived(data);\n    } else if (messageType === 'studentsOnlineList') {\n      this.handleStudentsOnlineReceived(data);\n    } else if (messageType === 'studentConnected') {\n\n    } else if (messageType === 'studentDisconnected') {\n      this.handleStudentDisconnected(data);\n    } else if (messageType === 'notification' || messageType === 'CRaterResultNotification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'newAnnotation') {\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: data.annotation});\n    } else if (messageType === 'newStudentWork') {\n      this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: data.studentWork});\n    } else if (messageType === 'newStudentAchievement') {\n      this.$rootScope.$broadcast('newStudentAchievement', {studentAchievement: data.studentAchievement});\n    }\n  };\n\n  sendMessage(messageJSON) {\n    // send the websocket message\n    this.dataStream.send(messageJSON);\n  }\n\n  handleStudentsOnlineReceived(studentsOnlineMessage) {\n    this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n\n    this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n  };\n\n  getStudentsOnline() {\n    return this.studentsOnlineArray;\n  };\n\n  /**\n   * Check to see if a given workgroup is currently online\n   * @param workgroupId the workgroup id\n   * @returns boolean whether a workgroup is online\n   */\n  isStudentOnline(workgroupId) {\n    return (this.studentsOnlineArray.indexOf(workgroupId) > -1);\n  };\n\n  /**\n   * This function is called when the teacher receives a websocket message\n   * with messageType 'studentStatus'.\n   */\n  handleStudentStatusReceived(studentStatus) {\n    var workgroupId = studentStatus.workgroupId;\n\n    // update the student status for the workgroup\n    this.StudentStatusService.setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n\n    // fire the student status received event\n    this.$rootScope.$emit('studentStatusReceived', {studentStatus: studentStatus});\n  };\n\n  /**\n   * Handle the student disconnected message\n   */\n  handleStudentDisconnected(studentDisconnectedMessage) {\n\n    // fire the student disconnected event\n    this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n  }\n\n  /**\n   * Pause the screens in the period\n   * @param periodId the period id. if null or -1 is passed in we will pause\n   * all the periods\n   */\n  pauseScreens(periodId) {\n\n    // create the websocket message\n    var messageJSON = {};\n\n    messageJSON.messageType = 'pauseScreen';\n\n    if(periodId == null || periodId == -1) {\n      //we are going to pause all the students in a run\n      messageJSON.messageParticipants = 'teacherToStudentsInRun';\n    } else if(periodId != null) {\n      //we are going to pause the students in a period\n      messageJSON.periodId = periodId;\n      messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n    }\n\n    // send the websocket message\n    this.sendMessage(messageJSON);\n  }\n\n  /**\n   * Unpause the screens in the period\n   * @param periodId the period id. if null or -1 is passed in we will unpause\n   * all the periods\n   */\n  unPauseScreens(periodId) {\n\n    // create the websocket message\n    var messageJSON = {};\n\n    messageJSON.messageType = 'unPauseScreen';\n\n    if(periodId == null || periodId == -1) {\n      //we are going to unpause all the students in a run\n      messageJSON.messageParticipants = 'teacherToStudentsInRun';\n    } else if(periodId != null) {\n      //we are going to unpause the students in a period\n      messageJSON.periodId = periodId;\n      messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n    }\n\n    // send the websocket message\n    this.sendMessage(messageJSON);\n  }\n}\n\nTeacherWebSocketService.$inject = ['$rootScope', '$websocket', 'ConfigService', 'StudentStatusService'];\n\nexport default TeacherWebSocketService;\n"]}