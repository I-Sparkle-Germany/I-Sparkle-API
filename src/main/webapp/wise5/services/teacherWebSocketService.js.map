{"version":3,"sources":["teacherWebSocketService.es6"],"names":[],"mappings":"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","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n    constructor($rootScope, $websocket, ConfigService, StudentStatusService) {\n        this.$rootScope = $rootScope;\n        this.$websocket = $websocket;\n        this.ConfigService = ConfigService;\n        this.StudentStatusService = StudentStatusService;\n        this.dataStream = null;\n    }\n\n    initialize() {\n        var runId = this.ConfigService.getRunId();\n        var periodId = this.ConfigService.getPeriodId();\n        var workgroupId = this.ConfigService.getWorkgroupId();\n        var webSocketURL = this.ConfigService.getWebSocketURL();\n        webSocketURL += \"?runId=\" + runId + \"&periodId=\" + periodId + \"&workgroupId=\" + workgroupId;\n        this.dataStream = this.$websocket(webSocketURL);\n\n        this.dataStream.onMessage((message) => {\n            this.handleMessage(message);\n        });\n    };\n\n    handleMessage(message) {\n        var data = JSON.parse(message.data);\n        var messageType = data.messageType;\n\n        if (messageType === 'studentStatus') {\n            this.handleStudentStatusReceived(data);\n        } else if (messageType === 'studentsOnlineList') {\n            this.handleStudentsOnlineReceived(data);\n        } else if (messageType === 'studentConnected') {\n\n        } else if (messageType === 'studentDisconnected') {\n            this.handleStudentDisconnected(data);\n        } else if (messageType === 'notification' || messageType === 'CRaterResultNotification') {\n            this.$rootScope.$broadcast('newNotification', data.data);\n        }\n    };\n\n    sendMessage(messageJSON) {\n        // send the websocket message\n        this.dataStream.send(messageJSON);\n    }\n\n    handleStudentsOnlineReceived(studentsOnlineMessage) {\n        this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n\n        this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n    };\n\n    getStudentsOnline() {\n        var studentsOnline = [];\n        if (this.studentsOnlineArray != null) {\n            studentsOnline = this.studentsOnlineArray;\n        }\n        return studentsOnline;\n    };\n\n    /**\n     * This function is called when the teacher receives a websocket message\n     * with messageType 'studentStatus'.\n     */\n    handleStudentStatusReceived(studentStatus) {\n        var workgroupId = studentStatus.workgroupId;\n\n        // update the student status for the workgroup\n        this.StudentStatusService.setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n\n        // fire the student status received event\n        this.$rootScope.$emit('studentStatusReceived', {studentStatus: studentStatus});\n    };\n\n    /**\n     * Handle the student disconnected message\n     */\n    handleStudentDisconnected(studentDisconnectedMessage) {\n\n        // fire the student disconnected event\n        this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n    }\n\n    /**\n     * Pause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will pause\n     * all the periods\n     */\n    pauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'pauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to pause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to pause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n\n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n\n    /**\n     * Unpause the screens in the period\n     * @param periodId the period id. if null or -1 is passed in we will unpause\n     * all the periods\n     */\n    unPauseScreens(periodId) {\n\n        // create the websocket message\n        var messageJSON = {};\n\n        messageJSON.messageType = 'unPauseScreen';\n\n        if(periodId == null || periodId == -1) {\n            //we are going to unpause all the students in a run\n            messageJSON.messageParticipants = 'teacherToStudentsInRun';\n        } else if(periodId != null) {\n            //we are going to unpause the students in a period\n            messageJSON.periodId = periodId;\n            messageJSON.messageParticipants = 'teacherToStudentsInPeriod';\n        }\n        \n        // send the websocket message\n        this.sendMessage(messageJSON);\n    }\n}\n\nTeacherWebSocketService.$inject = ['$rootScope', '$websocket', 'ConfigService', 'StudentStatusService'];\n\nexport default TeacherWebSocketService;\n"]}