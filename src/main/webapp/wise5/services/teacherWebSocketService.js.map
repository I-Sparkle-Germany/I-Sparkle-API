{"version":3,"sources":["teacherWebSocketService.es6"],"names":["TeacherWebSocketService","$rootScope","$stomp","$websocket","ConfigService","StudentStatusService","dataStream","studentsOnlineArray","runId","getRunId","webSocketURL","getWebSocketURL","connect","then","frame","subscribeToTeacherTopic","subscribeToTeacherWorkgroupTopic","e","console","log","subscribe","message","headers","res","type","studentWork","content","studentData","JSON","parse","$broadcast","studentStatus","status","handleStudentStatusReceived","getWorkgroupId","notification","data","studentsOnlineMessage","studentsOnlineList","studentsOnline","workgroupId","indexOf","setStudentStatusForWorkgroupId","$emit","studentDisconnectedMessage","periodId","send","stringify","$inject"],"mappings":";;;;;;;;;;IAAMA,uB;AACJ,mCACIC,UADJ,EAEIC,MAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,oBALJ,EAK0B;AAAA;;AACxB,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACD;;;;iCAEY;AAAA;;AACX,WAAKC,KAAL,GAAa,KAAKJ,aAAL,CAAmBK,QAAnB,EAAb;AACA,UAAMC,eAAe,KAAKN,aAAL,CAAmBO,eAAnB,EAArB;AACA,UAAI;AACF,aAAKT,MAAL,CAAYU,OAAZ,CAAoBF,YAApB,EAAkCG,IAAlC,CAAuC,UAACC,KAAD,EAAW;AAChD,gBAAKC,uBAAL;AACA,gBAAKC,gCAAL;AACD,SAHD;AAID,OALD,CAKE,OAAMC,CAAN,EAAS;AACTC,gBAAQC,GAAR,CAAYF,CAAZ;AACD;AACF;;;8CAEyB;AAAA;;AACxB,WAAKf,MAAL,CAAYkB,SAAZ,qBAAwC,KAAKZ,KAA7C,EAAsD,UAACa,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AAC/E,YAAIF,QAAQG,IAAR,KAAiB,aAArB,EAAoC;AAClC,cAAMC,cAAcJ,QAAQK,OAA5B;AACAD,sBAAYE,WAAZ,GAA0BC,KAAKC,KAAL,CAAWJ,YAAYE,WAAvB,CAA1B;AACA,iBAAK1B,UAAL,CAAgB6B,UAAhB,CAA2B,wBAA3B,EAAqD,EAACL,aAAaA,WAAd,EAArD;AACD,SAJD,MAIO,IAAIJ,QAAQG,IAAR,KAAiB,eAArB,EAAsC;AAC3C,cAAMO,gBAAgBV,QAAQK,OAA9B;AACA,cAAMM,SAASJ,KAAKC,KAAL,CAAWE,cAAcC,MAAzB,CAAf;AACA,iBAAKC,2BAAL,CAAiCD,MAAjC;AACD;AACF,OAVD;AAWD;;;uDAEkC;AAAA;;AACjC,WAAK9B,MAAL,CAAYkB,SAAZ,uBAA0C,KAAKhB,aAAL,CAAmB8B,cAAnB,EAA1C,EAAiF,UAACb,OAAD,EAAUC,OAAV,EAAmBC,GAAnB,EAA2B;AAC1G,YAAIF,QAAQG,IAAR,KAAiB,cAArB,EAAqC;AACnC,cAAMW,eAAed,QAAQK,OAA7B;AACAS,uBAAaC,IAAb,GAAoBR,KAAKC,KAAL,CAAWM,aAAaC,IAAxB,CAApB;AACA,iBAAKnC,UAAL,CAAgB6B,UAAhB,CAA2B,iBAA3B,EAA8CK,YAA9C;AACD;AACF,OAND;AAOD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA2B6BE,qB,EAAuB;AAClD,WAAK9B,mBAAL,GAA2B8B,sBAAsBC,kBAAjD;AACA,WAAKrC,UAAL,CAAgB6B,UAAhB,CAA2B,wBAA3B,EAAqD,EAACS,gBAAgB,KAAKhC,mBAAtB,EAArD;AACD;;;wCAEmB;AAClB,aAAO,KAAKA,mBAAZ;AACD;;;oCAEeiC,W,EAAa;AAC3B,aAAO,KAAKjC,mBAAL,CAAyBkC,OAAzB,CAAiCD,WAAjC,IAAgD,CAAC,CAAxD;AACD;;;gDAE2BT,a,EAAe;AACzC,UAAMS,cAAcT,cAAcS,WAAlC;AACA,WAAKnC,oBAAL,CACKqC,8BADL,CACoCF,WADpC,EACiDT,aADjD;AAEA,WAAK9B,UAAL,CACK0C,KADL,CACW,uBADX,EACoC,EAACZ,eAAeA,aAAhB,EADpC;AAED;;;8CAEyBa,0B,EAA4B;AACpD,WAAK3C,UAAL,CAAgB6B,UAAhB,CAA2B,qBAA3B,EAAkD,EAACM,MAAMQ,0BAAP,EAAlD;AACD;;;iCAEYC,Q,EAAU;AACrB,WAAK3C,MAAL,CAAY4C,IAAZ,iBAA+B,KAAKtC,KAApC,SAA6CqC,QAA7C,EAAyDjB,KAAKmB,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAf,CAAzD,EAA8F,EAA9F;AACD;;;mCAEcF,Q,EAAU;AACvB,WAAK3C,MAAL,CAAY4C,IAAZ,mBAAiC,KAAKtC,KAAtC,SAA+CqC,QAA/C,EAA2DjB,KAAKmB,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAf,CAA3D,EAAgG,EAAhG;AACD;;;;;;AAGH/C,wBAAwBgD,OAAxB,GAAkC,CAChC,YADgC,EAEhC,QAFgC,EAGhC,YAHgC,EAIhC,eAJgC,EAKhC,sBALgC,CAAlC;;kBAQehD,uB","file":"teacherWebSocketService.js","sourcesContent":["class TeacherWebSocketService {\n  constructor(\n      $rootScope,\n      $stomp,\n      $websocket,\n      ConfigService,\n      StudentStatusService) {\n    this.$rootScope = $rootScope;\n    this.$stomp = $stomp;\n    this.$websocket = $websocket;\n    this.ConfigService = ConfigService;\n    this.StudentStatusService = StudentStatusService;\n    this.dataStream = null;\n    this.studentsOnlineArray = [];\n  }\n\n  initialize() {\n    this.runId = this.ConfigService.getRunId();\n    const webSocketURL = this.ConfigService.getWebSocketURL();\n    try {\n      this.$stomp.connect(webSocketURL).then((frame) => {\n        this.subscribeToTeacherTopic();\n        this.subscribeToTeacherWorkgroupTopic();\n      });\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  subscribeToTeacherTopic() {\n    this.$stomp.subscribe(`/topic/teacher/${this.runId}`, (message, headers, res) => {\n      if (message.type === 'studentWork') {\n        const studentWork = message.content;\n        studentWork.studentData = JSON.parse(studentWork.studentData);\n        this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: studentWork});\n      } else if (message.type === 'studentStatus') {\n        const studentStatus = message.content;\n        const status = JSON.parse(studentStatus.status);\n        this.handleStudentStatusReceived(status);\n      }\n    });\n  }\n\n  subscribeToTeacherWorkgroupTopic() {\n    this.$stomp.subscribe(`/topic/workgroup/${this.ConfigService.getWorkgroupId()}`, (message, headers, res) => {\n      if (message.type === 'notification') {\n        const notification = message.content;\n        notification.data = JSON.parse(notification.data);\n        this.$rootScope.$broadcast('newNotification', notification);\n      }\n    });\n  }\n\n  /*\n  handleMessage(message) {\n    const data = JSON.parse(message.data);\n    const messageType = data.messageType;\n    if (messageType === 'studentStatus') {\n      this.handleStudentStatusReceived(data);\n    } else if (messageType === 'studentsOnlineList') {\n      this.handleStudentsOnlineReceived(data);\n    } else if (messageType === 'studentConnected') {\n\n    } else if (messageType === 'studentDisconnected') {\n      this.handleStudentDisconnected(data);\n    } else if (messageType === 'notification' || messageType === 'CRaterResultNotification') {\n      this.$rootScope.$broadcast('newNotification', data.data);\n    } else if (messageType === 'newAnnotation') {\n      this.$rootScope.$broadcast('newAnnotationReceived', {annotation: data.annotation});\n    } else if (messageType === 'newStudentWork') {\n      this.$rootScope.$broadcast('newStudentWorkReceived', {studentWork: data.studentWork});\n    } else if (messageType === 'newStudentAchievement') {\n      this.$rootScope.$broadcast('newStudentAchievement', {studentAchievement: data.studentAchievement});\n    }\n  }\n  sendMessage(messageJSON) {\n    this.dataStream.send(messageJSON);\n  }\n*/\n\n  handleStudentsOnlineReceived(studentsOnlineMessage) {\n    this.studentsOnlineArray = studentsOnlineMessage.studentsOnlineList;\n    this.$rootScope.$broadcast('studentsOnlineReceived', {studentsOnline: this.studentsOnlineArray});\n  }\n\n  getStudentsOnline() {\n    return this.studentsOnlineArray;\n  }\n\n  isStudentOnline(workgroupId) {\n    return this.studentsOnlineArray.indexOf(workgroupId) > -1;\n  }\n\n  handleStudentStatusReceived(studentStatus) {\n    const workgroupId = studentStatus.workgroupId;\n    this.StudentStatusService\n        .setStudentStatusForWorkgroupId(workgroupId, studentStatus);\n    this.$rootScope\n        .$emit('studentStatusReceived', {studentStatus: studentStatus});\n  }\n\n  handleStudentDisconnected(studentDisconnectedMessage) {\n    this.$rootScope.$broadcast('studentDisconnected', {data: studentDisconnectedMessage});\n  }\n\n  pauseScreens(periodId) {\n    this.$stomp.send(`/app/pause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {});\n  }\n\n  unPauseScreens(periodId) {\n    this.$stomp.send(`/app/unpause/${this.runId}/${periodId}`, JSON.stringify({'name': 'teacher'}), {});\n  }\n}\n\nTeacherWebSocketService.$inject = [\n  '$rootScope',\n  '$stomp',\n  '$websocket',\n  'ConfigService',\n  'StudentStatusService'\n];\n\nexport default TeacherWebSocketService;\n"]}