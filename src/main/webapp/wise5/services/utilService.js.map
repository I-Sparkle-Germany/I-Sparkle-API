{"version":3,"sources":["utilService.es6"],"names":["UtilService","$filter","$injector","$rootScope","componentTypeToLabel","$translate","length","CHARS","key","a","Math","floor","random","str","result","isNaN","Number","jsonObject","copyOfJSONObject","jsonObjectString","angular","toJson","fromJson","img_b64","blob","dataURItoBlob","now","Date","getTime","filename","encodeURIComponent","pngFile","File","lastModified","type","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","imageElement","imageObject","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","getImageObjectFromBase64String","iframes","element","iframe","style","display","fileName","lowerCaseFileName","toLowerCase","imageExtensionsRegEx","RegExp","matchResult","match","videoExtensionsRegEx","html","insertWISELinkAnchors","insertWISELinkButtons","wiseLinkRegEx","wiseLinkRegExMatchResult","exec","anchorHTML","anchorText","nodeId","getWISELinkNodeId","componentIdAttr","componentId","getWISELinkComponentId","wiselinkHtml","replace","buttonHTML","buttonText","nodeIdRegEx","nodeIdRegExResult","componentIdRegEx","componentIdRegExResult","typeRegEx","typeRegExResult","linkText","linkTextRegEx","linkTextRegExResult","replaceWISELinksHelper","regex","wiseLinkHTML","componentHTML","getWISELinkType","getWISELinkLinkText","newElement","controller","projectId","target","tooltip","thisRootScope","InsertAssetButton","context","ui","$","summernote","button","contents","click","invoke","params","isPopup","$broadcast","render","InsertWISELinkButton","text","subjectString","searchString","position","isFinite","lastIndex","lastIndexOf","object1","object2","serverSaveTime","milliseconds","dateTimeString","date","toDateString","toLocaleTimeString","componentType","label","componentService","get","getComponentTypeLabel","array1","array2","array1Copy","makeCopyOfJSONObject","sort","array2Copy","componentContent","connectedComponents","connectedComponent","arrayToCheck","Array","prototype","last","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,W;AAEJ,uBAAYC,OAAZ,EACYC,SADZ,EAEYC,UAFZ,EAEwB;AAAA;;AACtB,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;;AAEA,SAAKC,oBAAL,GAA4B,EAA5B;;AAEA,SAAKC,UAAL,GAAkB,KAAKJ,OAAL,CAAa,WAAb,CAAlB;AACD;;AAED;;;;;;;;;gCAKYK,M,EAAQ;AAClB,WAAKC,KAAL,GAAa,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,EAA6D,GAA7D,EAAiE,GAAjE,EAAqE,GAArE,EAA0E,GAA1E,EAA8E,GAA9E,EACX,GADW,EACP,GADO,EACH,GADG,EACC,GADD,EACK,GADL,EACS,GADT,EACa,GADb,EACiB,GADjB,EACqB,GADrB,EACyB,GADzB,EAC6B,GAD7B,EACiC,GADjC,EACqC,GADrC,EACyC,GADzC,EAC6C,GAD7C,EACiD,GADjD,CAAb;;AAGA;AACA,UAAI,CAACD,MAAL,EAAa;AACXA,iBAAS,EAAT;AACD;;AAED;AACA,UAAIE,MAAM,EAAV;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC/BD,eAAO,KAAKD,KAAL,CAAWG,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,KAAKL,KAAL,CAAWD,MAAX,GAAoB,CAArC,CAAX,CAAX,CAAP;AACD;;AAED;AACA;AACA,aAAOE,GAAP;AACD;;;;;AAED;;;;;;0CAMsBK,G,EAAK;AACzB,UAAIC,SAASD,GAAb;;AAEA,UAAIA,OAAO,IAAP,IAAeA,OAAO,EAAtB,IAA4B,CAACE,MAAMC,OAAOH,GAAP,CAAN,CAAjC,EAAqD;AACnDC,iBAASE,OAAOH,GAAP,CAAT;AACD;;AAED,aAAOC,MAAP;AACD;;;;;AAED;;;;;yCAKqBG,U,EAAY;AAC/B,UAAIC,mBAAmB,IAAvB;;AAEA,UAAID,cAAc,IAAlB,EAAwB;AACtB;AACA,YAAIE,mBAAmBC,QAAQC,MAAR,CAAeJ,UAAf,CAAvB;;AAEA;AACAC,2BAAmBE,QAAQE,QAAR,CAAiBH,gBAAjB,CAAnB;AACD;;AAED,aAAOD,gBAAP;AACD;;;;;AAED;;;;;mDAK+BK,O,EAAS;;AAEtC;AACA,UAAIC,OAAO,KAAKC,aAAL,CAAmBF,OAAnB,CAAX;;AAEA,UAAIG,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,UAAIC,WAAWC,mBAAmB,aAAaJ,GAAb,GAAmB,MAAtC,CAAf;AACA,UAAIK,UAAU,IAAIC,IAAJ,CAAS,CAACR,IAAD,CAAT,EAAiBK,QAAjB,EAA2B;AACvCI,sBAAcP,GADyB,EACpB;AACnBQ,cAAM,WAFiC,CAErB;AAFqB,OAA3B,CAAd;;AAKA,aAAOH,OAAP;AACD;;AAED;;;;;;;;kCAKcI,O,EAAS;;AAErB,UAAIC,UAAJ;AACA,UAAID,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBC,OAAtB,CAA8B,QAA9B,KAA2C,CAA/C,EACEF,aAAaG,KAAKJ,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAL,CAAb,CADF,KAGED,aAAaI,SAASL,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAT,CAAb;;AAEF;AACA,UAAII,aAAaN,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAjB;;AAEA;AACA,UAAIK,KAAK,IAAIC,UAAJ,CAAeP,WAAW9B,MAA1B,CAAT;AACA,WAAK,IAAIsC,IAAI,CAAb,EAAgBA,IAAIR,WAAW9B,MAA/B,EAAuCsC,GAAvC,EAA4C;AAC1CF,WAAGE,CAAH,IAAQR,WAAWS,UAAX,CAAsBD,CAAtB,CAAR;AACD;;AAED,aAAO,IAAIE,IAAJ,CAAS,CAACJ,EAAD,CAAT,EAAe,EAACR,MAAKO,UAAN,EAAf,CAAP;AACD;;;;;AAED;;;;;mDAK+BM,Y,EAAc;;AAE3C,UAAIC,cAAc,IAAlB;;AAEA,UAAID,gBAAgB,IAApB,EAA0B;AACxB;AACA,YAAIE,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAb;;AAEA;AACAF,eAAOG,KAAP,GAAeL,aAAaM,YAA5B;AACAJ,eAAOK,MAAP,GAAgBP,aAAaQ,aAA7B;;AAEA;AACA,YAAIC,MAAMP,OAAOQ,UAAP,CAAkB,IAAlB,CAAV;AACAD,YAAIE,SAAJ,CAAcX,YAAd,EAA4B,CAA5B,EAA+B,CAA/B;;AAEA;AACA,YAAIY,UAAUV,OAAOW,SAAP,CAAiB,WAAjB,CAAd;;AAEA;AACAZ,sBAAc,KAAKa,8BAAL,CAAoCF,OAApC,CAAd;AACD;;AAED,aAAOX,WAAP;AACD;;AAED;;;;;;;;;kCAMc;;AAEZ;AACA,UAAIc,UAAU1C,QAAQ2C,OAAR,CAAgB,QAAhB,CAAd;;AAEA;AALY;AAAA;AAAA;;AAAA;AAMZ,6BAAmBD,OAAnB,8HAA4B;AAAA,cAAnBE,MAAmB;;AAC1B,cAAIA,UAAU,IAAd,EAAoB;AAClB;AACAA,mBAAOC,KAAP,CAAaC,OAAb,GAAuB,MAAvB;AACD;AACF;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYb;;AAED;;;;;;;;;kCAMc;;AAEZ;AACA,UAAIJ,UAAU1C,QAAQ2C,OAAR,CAAgB,QAAhB,CAAd;;AAEA;AALY;AAAA;AAAA;;AAAA;AAMZ,8BAAmBD,OAAnB,mIAA4B;AAAA,cAAnBE,MAAmB;;AAC1B,cAAIA,UAAU,IAAd,EAAoB;AAClB;AACAA,mBAAOC,KAAP,CAAaC,OAAb,GAAuB,EAAvB;AACD;AACF;AAXW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYb;;AAED;;;;;;;;4BAKQC,Q,EAAU;AAChB,UAAIrD,SAAS,KAAb;;AAEA,UAAIqD,YAAY,IAAhB,EAAsB;AACpB,YAAIC,oBAAoBD,SAASE,WAAT,EAAxB;;AAEA;AACA,YAAIC,uBAAuB,IAAIC,MAAJ,CAAW,qCAAX,CAA3B;;AAEA,YAAIC,cAAcJ,kBAAkBK,KAAlB,CAAwBH,oBAAxB,CAAlB;;AAEA,YAAIE,eAAe,IAAnB,EAAyB;AACvB;AACA1D,mBAAS,IAAT;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;;4BAKQqD,Q,EAAU;AAChB,UAAIrD,SAAS,KAAb;;AAEA,UAAIqD,YAAY,IAAhB,EAAsB;AACpB,YAAIC,oBAAoBD,SAASE,WAAT,EAAxB;;AAEA;AACA,YAAIK,uBAAuB,IAAIH,MAAJ,CAAW,4CAAX,CAA3B;;AAEA,YAAIC,cAAcJ,kBAAkBK,KAAlB,CAAwBC,oBAAxB,CAAlB;;AAEA,YAAIF,eAAe,IAAnB,EAAyB;AACvB;AACA1D,mBAAS,IAAT;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;AAED;;;;;;;;;oCAMgB6D,I,EAAM;;AAEpB;AACAA,aAAO,KAAKC,qBAAL,CAA2BD,IAA3B,CAAP;;AAEA;AACAA,aAAO,KAAKE,qBAAL,CAA2BF,IAA3B,CAAP;;AAEA,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;0CAOsBA,I,EAAM;;AAE1B;AACA,UAAIG,gBAAgB,IAAIP,MAAJ,CAAW,oCAAX,CAApB;;AAEA;AACA,UAAIQ,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAMI,4BAA4B,IAAlC,EAAwC;;AAEtC;AACA,YAAIE,aAAaF,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAIG,aAAaH,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBH,UAAvB,CAAb;;AAEA,YAAIE,UAAU,IAAd,EAAoB;AAClBA,mBAAS,EAAT;AACD;;AAED,YAAIE,kBAAkB,EAAtB;AACA,YAAIC,cAAc,KAAKC,sBAAL,CAA4BN,UAA5B,CAAlB;AACA,YAAIK,eAAe,IAAnB,EAAyB;AACvBD,4BAAkB,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD;;AAED;AACA,YAAIE,eAAe,sCAAsCN,UAAtC,GAAmD,aAAnD,GAAmEC,MAAnE,GAA4E,IAA5E,GAAmFE,eAAnF,GAAqG,IAAxH;;AAEA;AACAV,eAAOA,KAAKc,OAAL,CAAaV,yBAAyB,CAAzB,CAAb,EAA0CS,YAA1C,CAAP;;AAEA;AACAT,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AAED,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;0CAOsBA,I,EAAM;;AAE1B;AACA,UAAIG,gBAAgB,IAAIP,MAAJ,CAAW,8CAAX,CAApB;;AAEA;AACA,UAAIQ,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAMI,4BAA4B,IAAlC,EAAwC;;AAEtC;AACA,YAAIW,aAAaX,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAIY,aAAaZ,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBM,UAAvB,CAAb;;AAEA,YAAIP,UAAU,IAAd,EAAoB;AAClBA,mBAAS,EAAT;AACD;;AAED,YAAIE,kBAAkB,EAAtB;AACA,YAAIC,cAAc,KAAKC,sBAAL,CAA4BG,UAA5B,CAAlB;AACA,YAAIJ,eAAe,IAAnB,EAAyB;AACvBD,4BAAkB,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD;;AAGD;AACA,YAAIE,eAAe,wCAAwCG,UAAxC,GAAqD,aAArD,GAAqER,MAArE,GAA8E,IAA9E,GAAqFE,eAArF,GAAuG,IAA1H;;AAEA;AACAV,eAAOA,KAAKc,OAAL,CAAaV,yBAAyB,CAAzB,CAAb,EAA0CS,YAA1C,CAAP;;AAEA;AACAT,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AAED,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;;sCAQkBA,I,EAAM;;AAEtB,UAAIQ,SAAS,IAAb;;AAEA,UAAIR,QAAQ,IAAZ,EAAkB;AAChB;AACA,YAAIiB,cAAc,IAAIrB,MAAJ,CAAW,wBAAX,EAAqC,GAArC,CAAlB;;AAEA;AACA,YAAIsB,oBAAoBD,YAAYZ,IAAZ,CAAiBL,IAAjB,CAAxB;;AAEA,YAAIkB,qBAAqB,IAAzB,EAA+B;AAC7B;AACAV,mBAASU,kBAAkB,CAAlB,CAAT;AACD;AACF;;AAED,aAAOV,MAAP;AACD;;AAED;;;;;;;;;;;2CAQuBR,I,EAAM;;AAE3B,UAAIW,cAAc,IAAlB;;AAEA,UAAIX,QAAQ,IAAZ,EAAkB;AAChB;AACA,YAAImB,mBAAmB,IAAIvB,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,CAAvB;;AAEA;AACA,YAAIwB,yBAAyBD,iBAAiBd,IAAjB,CAAsBL,IAAtB,CAA7B;;AAEA,YAAIoB,0BAA0B,IAA9B,EAAoC;AAClC;AACAT,wBAAcS,uBAAuB,CAAvB,CAAd;AACD;AACF;;AAED,aAAOT,WAAP;AACD;;AAED;;;;;;;;;;;oCAQgBX,I,EAAM;AACpB,UAAIzC,OAAO,IAAX;;AAEA,UAAIyC,QAAQ,IAAZ,EAAkB;AAChB;AACA,YAAIqB,YAAY,IAAIzB,MAAJ,CAAW,qBAAX,EAAkC,GAAlC,CAAhB;;AAEA;AACA,YAAI0B,kBAAkBD,UAAUhB,IAAV,CAAeL,IAAf,CAAtB;;AAEA,YAAIsB,mBAAmB,IAAvB,EAA6B;AAC3B;AACA/D,iBAAO+D,gBAAgB,CAAhB,CAAP;AACD;AACF;;AAED,aAAO/D,IAAP;AACD;;AAED;;;;;;;;;;wCAOoByC,I,EAAM;AACxB,UAAIuB,WAAW,IAAf;;AAEA,UAAIvB,QAAQ,IAAZ,EAAkB;AAChB;AACA,YAAIwB,gBAAgB,IAAI5B,MAAJ,CAAW,0BAAX,EAAuC,GAAvC,CAApB;;AAEA;AACA,YAAI6B,sBAAsBD,cAAcnB,IAAd,CAAmBL,IAAnB,CAA1B;;AAEA,YAAIyB,uBAAuB,IAA3B,EAAiC;AAC/B;AACAF,qBAAWE,oBAAoB,CAApB,CAAX;AACD;AACF;;AAED,aAAOF,QAAP;AACD;;AAED;;;;;;;;qCAKiBvB,I,EAAM;;AAErB;AACAA,aAAO,KAAK0B,sBAAL,CAA4B1B,IAA5B,EAAkC,iBAAlC,CAAP;;AAEA;AACAA,aAAO,KAAK0B,sBAAL,CAA4B1B,IAA5B,EAAkC,8BAAlC,CAAP;;AAEA,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;2CAOuBA,I,EAAM2B,K,EAAO;;AAElC;AACA,UAAIxB,gBAAgB,IAAIP,MAAJ,CAAW+B,KAAX,CAApB;;AAEA;AACA,UAAIvB,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAOI,4BAA4B,IAAnC,EAAyC;;AAEvC;;;;AAIA,YAAIwB,eAAexB,yBAAyB,CAAzB,CAAnB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBmB,YAAvB,CAAb;AACA,YAAIjB,cAAc,KAAKC,sBAAL,CAA4BgB,YAA5B,CAAlB;AACA,YAAIC,gBAAgB,EAApB;AACA,YAAIlB,eAAe,IAAf,IAAuBA,eAAe,EAA1C,EAA8C;AAC5CkB,0BAAgB,mBAAmBlB,WAAnB,GAAiC,GAAjD;AACD;AACD,YAAIpD,OAAO,KAAKuE,eAAL,CAAqBF,YAArB,CAAX;AACA,YAAIL,WAAW,KAAKQ,mBAAL,CAAyBH,YAAzB,CAAf;;AAEA,YAAII,aAAa,IAAjB;;AAEA,YAAIzE,QAAQ,MAAZ,EAAoB;AAClB;AACAyE,uBAAa,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDqB,aAAjD,GAAiE,GAAjE,GAAuEN,QAAvE,GAAkF,MAA/F;AACD,SAHD,MAGO,IAAIhE,QAAQ,QAAZ,EAAsB;AAC3B;AACAyE,uBAAa,sCAAsCxB,MAAtC,GAA+C,IAA/C,GAAsDqB,aAAtD,GAAsE,GAAtE,GAA4EN,QAA5E,GAAuF,WAApG;AACD,SAHM,MAGA;AACL;AACAS,uBAAa,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDqB,aAAjD,GAAiE,GAAjE,GAAuEN,QAAvE,GAAkF,MAA/F;AACD;;AAED,YAAIS,cAAc,IAAlB,EAAwB;AACtB;AACAhC,iBAAOA,KAAKc,OAAL,CAAac,YAAb,EAA2BI,UAA3B,CAAP;AACD;;AAED;AACA5B,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AAED,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;;;;;;4CAYwBiC,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;;AAEnF,UAAIC,gBAAgB,KAAK7G,UAAzB;;AAEA;AACA,UAAI8G,oBAAoB,SAApBA,iBAAoB,CAASC,OAAT,EAAkB;AACxC,YAAIC,KAAKC,EAAEC,UAAF,CAAaF,EAAtB;;AAEA;AACA,YAAIG,SAASH,GAAGG,MAAH,CAAU;AACrBC,oBAAU,mCADW;AAErBR,mBAASA,OAFY;AAGrBS,iBAAO,iBAAY;AACjB;AACAN,oBAAQO,MAAR,CAAe,kBAAf;;AAEA;AACA,gBAAIC,SAAS,EAAb;AACAA,mBAAOC,OAAP,GAAiB,IAAjB;;AAEA,gBAAId,aAAa,IAAjB,EAAuB;AACrBa,qBAAOb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,UAAU,IAAd,EAAoB;AAClBuC,qBAAOvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,eAAe,IAAnB,EAAyB;AACvBoC,qBAAOpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,mBAAOZ,MAAP,GAAgBA,MAAhB;;AAEA;AACAE,0BAAcY,UAAd,CAAyB,kBAAzB,EAA6CF,MAA7C;AACD;AA3BoB,SAAV,CAAb;;AA8BA,eAAOJ,OAAOO,MAAP,EAAP,CAlCwC,CAkCd;AAC3B,OAnCD;;AAqCA,aAAOZ,iBAAP;AACD;;AAED;;;;;;;;;;;;;;;+CAY2BL,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;;AAEtF,UAAIC,gBAAgB,KAAK7G,UAAzB;;AAEA;AACA,UAAI2H,uBAAuB,SAAvBA,oBAAuB,CAASZ,OAAT,EAAkB;AAC3C,YAAIC,KAAKC,EAAEC,UAAF,CAAaF,EAAtB;;AAEA;AACA,YAAIG,SAASH,GAAGG,MAAH,CAAU;AACrBC,oBAAU,gCADW;AAErBR,mBAASA,OAFY;AAGrBS,iBAAO,iBAAY;AACjB;AACAN,oBAAQO,MAAR,CAAe,kBAAf;;AAEA;AACA,gBAAIC,SAAS,EAAb;;AAEA,gBAAIb,aAAa,IAAjB,EAAuB;AACrBa,qBAAOb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,UAAU,IAAd,EAAoB;AAClBuC,qBAAOvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,eAAe,IAAnB,EAAyB;AACvBoC,qBAAOpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,mBAAOZ,MAAP,GAAgBA,MAAhB;;AAEA;AACAE,0BAAcY,UAAd,CAAyB,qBAAzB,EAAgDF,MAAhD;AACD;AA1BoB,SAAV,CAAb;;AA6BA,eAAOJ,OAAOO,MAAP,EAAP,CAjC2C,CAiCjB;AAC3B,OAlCD;;AAoCA,aAAOC,oBAAP;AACD;;AAED;;;;;;;;mCAKenD,I,EAAM;;AAEnB,UAAIoD,OAAO,EAAX;;AAEA,UAAIpD,QAAQ,IAAZ,EAAkB;AAChB;AACAoD,eAAOpD,KAAKc,OAAL,CAAa,iBAAb,EAAgC,GAAhC,CAAP;;AAEA;AACAsC,eAAOA,KAAKtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;;AAEA;AACAsC,eAAOA,KAAKtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;;AAED,aAAOsC,IAAP;AACD;;AAED;;;;;;;;;;6BAOSC,a,EAAeC,Y,EAAcC,Q,EAAU;AAC9C,UAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAACC,SAASD,QAAT,CAAjC,IAAuDxH,KAAKC,KAAL,CAAWuH,QAAX,MAAyBA,QAAhF,IAA4FA,WAAWF,cAAc1H,MAAzH,EAAiI;AAC/H4H,mBAAWF,cAAc1H,MAAzB;AACD;AACD4H,kBAAYD,aAAa3H,MAAzB;AACA,UAAI8H,YAAYJ,cAAcK,WAAd,CAA0BJ,YAA1B,EAAwCC,QAAxC,CAAhB;AACA,aAAOE,cAAc,CAAC,CAAf,IAAoBA,cAAcF,QAAzC;AACD;;AAED;;;;;;;;;;;yCAQqBI,O,EAASC,O,EAAS;;AAErC,UAAID,QAAQE,cAAR,GAAyBD,QAAQC,cAArC,EAAqD;AACnD,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,QAAQE,cAAR,GAAyBD,QAAQC,cAArC,EAAqD;AAC1D,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF;;AAED;;;;;;;;;;2DAOuCC,Y,EAAc;;AAEnD,UAAIC,iBAAiB,EAArB;;AAEA;AACA,UAAIC,OAAO,IAAIhH,IAAJ,CAAS8G,YAAT,CAAX;;AAEA,UAAIE,QAAQ,IAAZ,EAAkB;AAChB;AACAD,yBAAiBC,KAAKC,YAAL,KAAsB,GAAtB,GAA4BD,KAAKE,kBAAL,EAA7C;AACD;;AAED,aAAOH,cAAP;AACD;;AAED;;;;;;;;0CAKsBI,a,EAAe;;AAEnC;;;;AAIA,UAAIC,QAAQ,KAAK3I,oBAAL,CAA0B0I,aAA1B,CAAZ;;AAEA,UAAIC,SAAS,IAAb,EAAmB;AACjB;;AAEA;AACA,YAAIC,mBAAmB,KAAK9I,SAAL,CAAe+I,GAAf,CAAmBH,gBAAgB,SAAnC,CAAvB;;AAEA,YAAIE,oBAAoB,IAApB,IAA4BA,iBAAiBE,qBAAjB,IAA0C,IAA1E,EAAgF;;AAE9E;AACAH,kBAAQC,iBAAiBE,qBAAjB,EAAR;;AAEA;AACA,eAAK9I,oBAAL,CAA0B0I,aAA1B,IAA2CC,KAA3C;AACD;AACF;;AAED,UAAIA,SAAS,IAAb,EAAmB;AACjB;;;;AAIAA,gBAAQD,aAAR;AACD;;AAED,aAAOC,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;4CAgBwBI,M,EAAQC,M,EAAQ;;AAEtC,UAAID,UAAU,IAAV,IAAkBC,UAAU,IAAhC,EAAsC;AACpC;AACA,YAAIC,aAAa,KAAKC,oBAAL,CAA0BH,MAA1B,CAAjB;AACAE,mBAAWE,IAAX;;AAEA;AACA,YAAIC,aAAa,KAAKF,oBAAL,CAA0BF,MAA1B,CAAjB;AACAI,mBAAWD,IAAX;;AAEA;AACA,YAAInI,QAAQC,MAAR,CAAegI,UAAf,KAA8BjI,QAAQC,MAAR,CAAemI,UAAf,CAAlC,EAA8D;AAC5D;AACA,iBAAO,IAAP;AACD;AACF;;AAED;AACA,aAAO,KAAP;AACD;;AAED;;;;;;;;0CAKsBC,gB,EAAkB;;AAEtC,UAAIA,oBAAoB,IAAxB,EAA8B;;AAE5B,YAAIC,sBAAsBD,iBAAiBC,mBAA3C;;AAEA,YAAIA,uBAAuB,IAAvB,IAA+BA,oBAAoBpJ,MAApB,GAA6B,CAAhE,EAAmE;AACjE,iBAAO,IAAP;AACD;AACF;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;;;kDAK8BmJ,gB,EAAkB;;AAE9C,UAAIA,oBAAoB,IAAxB,EAA8B;;AAE5B,YAAIC,sBAAsBD,iBAAiBC,mBAA3C;;AAEA,YAAIA,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,sBAAsB,IAA1B,EAAgC;;AAE9B,oBAAIA,mBAAmBzH,IAAnB,IAA2B,UAA/B,EAA2C;AACzC,yBAAO,IAAP;AACD;AACF;AACF;AAR8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShC;AACF;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;;;oDAKgCuH,gB,EAAkB;;AAEhD,UAAIA,oBAAoB,IAAxB,EAA8B;;AAE5B,YAAIC,sBAAsBD,iBAAiBC,mBAA3C;;AAEA,YAAIA,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,sBAAsB,IAA1B,EAAgC;;AAE9B,oBAAIA,mBAAmBzH,IAAnB,IAA2B,YAA/B,EAA6C;AAC3C,yBAAO,IAAP;AACD;AACF;AACF;AAR8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShC;AACF;;AAED,aAAO,KAAP;AACD;;AAED;;;;;;;;;2CAMuB0H,Y,EAAc;AACnC,UAAIA,gBAAgB,IAApB,EAA0B;AAAA;AAAA;AAAA;;AAAA;AACxB,gCAAoBA,YAApB,mIAAkC;AAAA,gBAAzB7F,OAAyB;;AAChC,gBAAIA,WAAW,IAAf,EAAqB;AACnB,qBAAO,IAAP;AACD;AACF;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzB;AACD,aAAO,KAAP;AACD;;;;;;AAGH;;;AACA,IAAI,CAAC8F,MAAMC,SAAN,CAAgBC,IAArB,EAA2B;AACzBF,QAAMC,SAAN,CAAgBC,IAAhB,GAAuB,YAAW;AAChC,WAAO,KAAK,KAAKzJ,MAAL,GAAc,CAAnB,CAAP;AACD,GAFD;AAGD;;AAEDN,YAAYgK,OAAZ,GAAsB,CACpB,SADoB,EAEpB,WAFoB,EAGpB,YAHoB,CAAtB;;kBAMehK,W","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n\n  constructor($filter,\n              $injector,\n              $rootScope) {\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$rootScope = $rootScope;\n\n    this.componentTypeToLabel = {};\n\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Generates and returns a random key of the given length if\n   * specified. If length is not specified, returns a key 10\n   * characters in length.\n   */\n  generateKey(length) {\n    this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n      \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n    /* set default length if not specified */\n    if (!length) {\n      length = 10;\n    }\n\n    /* generate the key */\n    var key = '';\n    for (var a = 0; a < length; a++) {\n      key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n    }\n\n    /* return the generated key */\n    // TODO: check that the new key is unique\n    return key;\n  };\n\n  /**\n   * Try to convert a string to a number\n   * @param str the string to convert\n   * @returns a number if we were able to convert the string to a number.\n   * if we couldn't convert the string to a number we will just return the string.\n   */\n  convertStringToNumber(str) {\n    var result = str;\n\n    if (str != null && str != '' && !isNaN(Number(str))) {\n      result = Number(str);\n    }\n\n    return result;\n  };\n\n  /**\n   * Create a copy of a JSON object\n   * @param jsonObject the JSON object to get a copy of\n   * @return a copy of the JSON object that was passed in\n   */\n  makeCopyOfJSONObject(jsonObject) {\n    var copyOfJSONObject = null;\n\n    if (jsonObject != null) {\n      // create a JSON string from the JSON object\n      var jsonObjectString = angular.toJson(jsonObject);\n\n      // create a JSON object from the JSON string\n      copyOfJSONObject = angular.fromJson(jsonObjectString);\n    }\n\n    return copyOfJSONObject;\n  };\n\n  /**\n   * Get the image object\n   * @params img_b64 the base64 image string\n   * @returns an image object\n   */\n  getImageObjectFromBase64String(img_b64) {\n\n    // create a blob from the base64 image string\n    var blob = this.dataURItoBlob(img_b64);\n\n    var now = new Date().getTime();\n    var filename = encodeURIComponent('picture_' + now + '.png');\n    var pngFile = new File([blob], filename, {\n      lastModified: now, // optional - default = now\n      type: 'image/png' // optional - default = ''\n    });\n\n    return pngFile;\n  }\n\n  /**\n   * Convert base64/URLEncoded data component to raw binary data held in a string\n   * @param dataURI base64/URLEncoded data\n   * @returns a Blob object\n   */\n  dataURItoBlob(dataURI) {\n\n    var byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0)\n      byteString = atob(dataURI.split(',')[1]);\n    else\n      byteString = unescape(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to a typed array\n    var ia = new Uint8Array(byteString.length);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {type:mimeString});\n  };\n\n  /**\n   * Get an image object from an image element\n   * @param imageElement an image element (<img src='abc.jpg'/>)\n   * @returns an image object\n   */\n  getImageObjectFromImageElement(imageElement) {\n\n    var imageObject = null;\n\n    if (imageElement != null) {\n      // create a canvas element that we will use to generate a base64 string\n      var canvas = document.createElement(\"canvas\");\n\n      // set the width and height of the canvas to match the image dimensions\n      canvas.width = imageElement.naturalWidth;\n      canvas.height = imageElement.naturalHeight;\n\n      // draw the image onto the canvas\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(imageElement, 0, 0);\n\n      // create the base64 string representation of the image\n      var dataURL = canvas.toDataURL(\"image/png\");\n\n      // get the image object\n      imageObject = this.getImageObjectFromBase64String(dataURL);\n    }\n\n    return imageObject;\n  }\n\n  /**\n   * Hide all the iframes. This is used before a student snips something\n   * to put into their notebook. Iframes shift the position of elements\n   * below it which causes issues when html2canvas tries to capture\n   * certain elements.\n   */\n  hideIFrames() {\n\n    // get all the iframes\n    var iframes = angular.element('iframe');\n\n    // loop through all the iframes\n    for (var iframe of iframes) {\n      if (iframe != null) {\n        // hide the iframe\n        iframe.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Show all the iframes. This is used after the student snips something\n   * to put into their notebook. Iframes shift the position of elements\n   * below it which causes issues when html2canvas tries to capture\n   * certain elements.\n   */\n  showIFrames() {\n\n    // get all the iframes\n    var iframes = angular.element('iframe');\n\n    // loop through all the iframes\n    for (var iframe of iframes) {\n      if (iframe != null) {\n        // show the iframe\n        iframe.style.display = '';\n      }\n    }\n  }\n\n  /**\n   * Check if the asset is an image\n   * @param fileName the file name of the asset\n   * @return whether the asset is an image or not\n   */\n  isImage(fileName) {\n    var result = false;\n\n    if (fileName != null) {\n      var lowerCaseFileName = fileName.toLowerCase();\n\n      // regex to match image extensions\n      var imageExtensionsRegEx = new RegExp('.*\\.(png|jpg|jpeg|bmp|gif|tiff|svg)');\n\n      var matchResult = lowerCaseFileName.match(imageExtensionsRegEx);\n\n      if (matchResult != null) {\n        // we have found a match so the asset is an image\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if the asset is a video\n   * @param fileName the file name of the asset\n   * @return whether the asset is a video or not\n   */\n  isVideo(fileName) {\n    var result = false;\n\n    if (fileName != null) {\n      var lowerCaseFileName = fileName.toLowerCase();\n\n      // regex to match video extensions\n      var videoExtensionsRegEx = new RegExp('.*\\.(mp4|mpg|mpeg|m4v|m2v|avi|gifv|mov|qt)');\n\n      var matchResult = lowerCaseFileName.match(videoExtensionsRegEx);\n\n      if (matchResult != null) {\n        // we have found a match so the asset is a video\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Replace <a> and <button> elements with <wiselink> elements where\n   * applicable\n   * @param html the html\n   * @return the modified html with <wiselink> elements\n   */\n  insertWISELinks(html) {\n\n    // replace <a> elements with <wiselink> elements\n    html = this.insertWISELinkAnchors(html);\n\n    // replace <button> elements with <wiselink> elements\n    html = this.insertWISELinkButtons(html);\n\n    return html;\n  }\n\n  /**\n   * Replace <a> elements that have the parameter wiselink=true with\n   * <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <a> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkAnchors(html) {\n\n    // find <a> elements with the parameter wiselink=true\n    let wiseLinkRegEx = new RegExp(/<a.*?wiselink=\"true\".*?>(.*?)<\\/a>/);\n\n    // find the first match\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while(wiseLinkRegExMatchResult != null) {\n\n      // get the whole <a> element\n      let anchorHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <a> element\n      let anchorText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <a> element\n      let nodeId = this.getWISELinkNodeId(anchorHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(anchorHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n      // create the <wiselink> element\n      let wiselinkHtml = \"<wiselink type='link' link-text='\" + anchorText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <a> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <a> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n\n    return html;\n  }\n\n  /**\n   * Replace <button> elements that have the parameter wiselink=true\n   * with <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <button> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkButtons(html) {\n\n    // find <button> elements with the parameter wiselink=true\n    var wiseLinkRegEx = new RegExp(/<button.*?wiselink=\"true\".*?>(.*?)<\\/button>/);\n\n    // find the first match\n    var wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while(wiseLinkRegExMatchResult != null) {\n\n      // get the whole <button> element\n      var buttonHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <button> element\n      var buttonText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <button> element\n      var nodeId = this.getWISELinkNodeId(buttonHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(buttonHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n\n      // create the <wiselink> element\n      var wiselinkHtml = \"<wiselink type='button' link-text='\" + buttonText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <button> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <button> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n\n    return html;\n  }\n\n  /**\n   * Get the node id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5'/>\n   * the node id in this case is 'node5'\n   * @param html the html for the element\n   * @return the node id from the node id parameter in the element\n   */\n  getWISELinkNodeId(html) {\n\n    let nodeId = null;\n\n    if (html != null) {\n      // create the regex to find the node id parameter\n      let nodeIdRegEx = new RegExp(/node-id=[\"'b](.*?)[\"']/, 'g');\n\n      // try to find a match\n      let nodeIdRegExResult = nodeIdRegEx.exec(html);\n\n      if (nodeIdRegExResult != null) {\n        // we have found a node id\n        nodeId = nodeIdRegExResult[1];\n      }\n    }\n\n    return nodeId;\n  }\n\n  /**\n   * Get the component id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5' component-id='xyzabc' />\n   * the component id in this case is 'xyzabc'\n   * @param html the html for the element\n   * @return the component id from the component id parameter in the element\n   */\n  getWISELinkComponentId(html) {\n\n    let componentId = null;\n\n    if (html != null) {\n      // create the regex to find the component id parameter\n      let componentIdRegEx = new RegExp(/component-id=[\"'b](.*?)[\"']/, 'g');\n\n      // try to find a match\n      let componentIdRegExResult = componentIdRegEx.exec(html);\n\n      if (componentIdRegExResult != null) {\n        // we have found a node id\n        componentId = componentIdRegExResult[1];\n      }\n    }\n\n    return componentId;\n  }\n\n  /**\n   * Get the link type from the wiselink element\n   * e.g.\n   * <wiselink type='button'/>\n   * the type in this case is 'button'\n   * @param html the html for the element\n   * @return the link type from the type parameter in the element\n   */\n  getWISELinkType(html) {\n    let type = null;\n\n    if (html != null) {\n      // create the regex to find the type\n      let typeRegEx = new RegExp(/type=[\"'b](.*?)[\"']/, 'g');\n\n      // try to find a match\n      let typeRegExResult = typeRegEx.exec(html);\n\n      if (typeRegExResult != null) {\n        // we have found a type\n        type = typeRegExResult[1];\n      }\n    }\n\n    return type;\n  }\n\n  /**\n   * Get the link text from the wiselink element\n   * <wiselink link-text='Go to here'/>\n   * the link text in this case is 'Go to here'\n   * @param html the html for the element\n   * @return the link text from the link text parameter in the element\n   */\n  getWISELinkLinkText(html) {\n    let linkText = null;\n\n    if (html != null) {\n      // create the regex to find the link text\n      let linkTextRegEx = new RegExp(/link-text=[\"'b](.*?)[\"']/, 'g');\n\n      // try to find a match\n      let linkTextRegExResult = linkTextRegEx.exec(html);\n\n      if (linkTextRegExResult != null) {\n        // we have found a link text\n        linkText = linkTextRegExResult[1];\n      }\n    }\n\n    return linkText;\n  }\n\n  /**\n   * Replace <wiselink> elements with <a> and <button> elements\n   * @param html the html\n   * @return the modified html without <wiselink> elements\n   */\n  replaceWISELinks(html) {\n\n    // replace wiselinks that look like <wiselink/>\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?\\/>');\n\n    // replace wiselinks that look like <wiselink></wiselink>\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?>.*?<\\/wiselink>');\n\n    return html;\n  }\n\n  /**\n   * Helper function for replacing <wiselink> elements with <a> and <button>\n   * elements\n   * @param html the html\n   * @param regex the regex string to search for\n   * @return the html without <wiselink> elements\n   */\n  replaceWISELinksHelper(html, regex) {\n\n    // create the regex\n    let wiseLinkRegEx = new RegExp(regex);\n\n    // find the first match\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n\n      /*\n       * get the whole match\n       * e.g. <wiselink type='link' node-id='node5' link-text='Go to here'/>\n       */\n      let wiseLinkHTML = wiseLinkRegExMatchResult[0];\n\n      // get the node id, component id (if exists), type and link text from the match\n      let nodeId = this.getWISELinkNodeId(wiseLinkHTML);\n      let componentId = this.getWISELinkComponentId(wiseLinkHTML);\n      let componentHTML = '';\n      if (componentId != null && componentId != '') {\n        componentHTML = \"component-id='\" + componentId + \"'\";\n      }\n      let type = this.getWISELinkType(wiseLinkHTML);\n      let linkText = this.getWISELinkLinkText(wiseLinkHTML);\n\n      let newElement = null;\n\n      if (type == 'link') {\n        // create a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      } else if (type == 'button') {\n        // create a button that represents the wiselink\n        newElement = \"<button wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</button>\";\n      } else {\n        // default to creating a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      }\n\n      if (newElement != null) {\n        // replace the wiselink with the new element\n        html = html.replace(wiseLinkHTML, newElement);\n      }\n\n      // find the next match\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n\n    return html;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE asset into\n   * summernote\n   * @param controller the controller that is creating the button\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the button\n   * @param componentId the component id of the component that is creating the button\n   * @param target the target element in the component to insert the asset into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertAssetButton(controller, projectId, nodeId, componentId, target, tooltip) {\n\n    var thisRootScope = this.$rootScope;\n\n    // a custom button that opens the asset chooser\n    var InsertAssetButton = function(context) {\n      var ui = $.summernote.ui;\n\n      // create button\n      var button = ui.button({\n        contents: '<i class=\"note-icon-picture\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the asset chooser\n          var params = {};\n          params.isPopup = true;\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the asset chooser\n          thisRootScope.$broadcast('openAssetChooser', params);\n        }\n      });\n\n      return button.render();   // return button as jquery object\n    };\n\n    return InsertAssetButton;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE link into\n   * summernote\n   * @param controller the controller that is creating the WISE link\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the WISE link\n   * @param componentId the component id of the component that is creating the WISE link\n   * @param target the target element in the component to insert the WISE link into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertWISELinkButton(controller, projectId, nodeId, componentId, target, tooltip) {\n\n    var thisRootScope = this.$rootScope;\n\n    // a custom button that opens the WISE Link authoring popup\n    var InsertWISELinkButton = function(context) {\n      var ui = $.summernote.ui;\n\n      // create button\n      var button = ui.button({\n        contents: '<i class=\"note-icon-link\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the WISE Link chooser\n          var params = {};\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the WISE Link authoring popup\n          thisRootScope.$broadcast('openWISELinkChooser', params);\n        }\n      });\n\n      return button.render();   // return button as jquery object\n    }\n\n    return InsertWISELinkButton;\n  }\n\n  /**\n   * Remove html tags from the string. Also remove new lines.\n   * @param html an html string\n   * @return text without html tags\n   */\n  removeHTMLTags(html) {\n\n    var text = '';\n\n    if (html != null) {\n      // remove tags\n      text = html.replace(/<\\/?[^>]+(>|$)/g, \" \");\n\n      // remove new lines\n      text = text.replace(/\\n/g, \" \");\n\n      // remove line returns\n      text = text.replace(/\\r/g, \" \");\n    }\n\n    return text;\n  }\n\n  /**\n   * Check if a string ends with a specific string\n   * @param subjectString the main string\n   * @param searchString the potential end of the string\n   * @param position (optional) the position to start searching\n   * @return whether the subjectString ends with the searchString\n   */\n  endsWith(subjectString, searchString, position) {\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n    var lastIndex = subjectString.lastIndexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  }\n\n  /**\n   * Sort the objects by server save time\n   * @param object1 an object\n   * @param object2 an object\n   * @return -1 if object1 server save time comes before object2 server save time\n   * 1 if object1 server save time comes after object2 server save time\n   * 0 if object1 server save time is equal to object2 server save time\n   */\n  sortByServerSaveTime(object1, object2) {\n\n    if (object1.serverSaveTime < object2.serverSaveTime) {\n      return -1;\n    } else if (object1.serverSaveTime > object2.serverSaveTime) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Convert milliseconds since the epoch to a pretty printed date time\n   * @param milliseconds the milliseconds since the epoch\n   * @return a string containing the pretty printed date time\n   * example\n   * Wed Apr 06 2016 9:05:38 AM\n   */\n  convertMillisecondsToFormattedDateTime(milliseconds) {\n\n    var dateTimeString = \"\";\n\n    // create a Date object with the milliseconds\n    var date = new Date(milliseconds);\n\n    if (date != null) {\n      // get the date time string e.g. Wed Apr 06 2016 9:05:38 AM\n      dateTimeString = date.toDateString() + \" \" + date.toLocaleTimeString();\n    }\n\n    return dateTimeString;\n  }\n\n  /**\n   * Get the label for the given component type\n   * @param componentType string\n   * @return string label for the component type\n   */\n  getComponentTypeLabel(componentType) {\n\n    /*\n     * check if we have already obtained the label for this component type\n     * before\n     */\n    let label = this.componentTypeToLabel[componentType];\n\n    if (label == null) {\n      // we have not obtained the label before\n\n      // get the service for the component type\n      let componentService = this.$injector.get(componentType + 'Service');\n\n      if (componentService != null && componentService.getComponentTypeLabel != null) {\n\n        // get the label for the component type\n        label = componentService.getComponentTypeLabel();\n\n        // add the entry of component type to label for future lookup\n        this.componentTypeToLabel[componentType] = label;\n      }\n    }\n\n    if (label == null) {\n      /*\n       * we were unable to find the label so we will just use the\n       * component type as the label\n       */\n      label = componentType;\n    }\n\n    return label;\n  }\n\n  /**\n   * Check if two arrays contain the same values. This is commonly used to\n   * check if two arrays of ids contain the same values. The order of the\n   * elements is not compared, only the actual values. This means the elements\n   * can be in different orders but still contain the same values.\n   * Example:\n   * array1=['1234567890', 'abcdefghij']\n   * array2=['abcdefghij', '1234567890']\n   * If these two arrays are passed in as the two arguments, this function\n   * will return true.\n   * Note: This may only work if the elements are strings, numbers or\n   * booleans. If the elements are objects, this function may or may not work.\n   * @param array1 an array of strings, numbers, or booleans\n   * @param array2 an array of strings, numbers, or booleans\n   * @return whether the arrays contain the same values\n   */\n  arraysContainSameValues(array1, array2) {\n\n    if (array1 != null && array2 != null) {\n      // make a copy of array 1 and sort it\n      var array1Copy = this.makeCopyOfJSONObject(array1);\n      array1Copy.sort();\n\n      // make a copy of array 2 and sort it\n      var array2Copy = this.makeCopyOfJSONObject(array2);\n      array2Copy.sort();\n\n      // compare the string values of both array\n      if (angular.toJson(array1Copy) == angular.toJson(array2Copy)) {\n        // the arrays are the same\n        return true;\n      }\n    }\n\n    // the arrays are not the same\n    return false;\n  }\n\n  /**\n   * Whether there are any connected components\n   * @param componentContent the component content\n   * @return whether there are any connected components\n   */\n  hasConnectedComponent(componentContent) {\n\n    if (componentContent != null) {\n\n      var connectedComponents = componentContent.connectedComponents;\n\n      if (connectedComponents != null && connectedComponents.length > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Whether this component shows work from a connected component\n   * @param componentContent the component content\n   * @return whether this component shows work from a connected component\n   */\n  hasShowWorkConnectedComponent(componentContent) {\n\n    if (componentContent != null) {\n\n      var connectedComponents = componentContent.connectedComponents;\n\n      if (connectedComponents != null) {\n        for (var connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'showWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Whether this component imports work from a connected component\n   * @param componentContent the component content\n   * @return whether this component imports work from a connected component\n   */\n  hasImportWorkConnectedComponent(componentContent) {\n\n    if (componentContent != null) {\n\n      var connectedComponents = componentContent.connectedComponents;\n\n      if (connectedComponents != null) {\n        for (var connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n\n            if (connectedComponent.type == 'importWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if an array has any non null elements.\n   * @param arrayToCheck An array which may have null and non null elements.\n   * @return True if the array has at least one non null element.\n   * False if the array has all null elements.\n   */\n  arrayHasNonNullElement(arrayToCheck) {\n    if (arrayToCheck != null) {\n      for (let element of arrayToCheck) {\n        if (element != null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Get the last element of the array\nif (!Array.prototype.last) {\n  Array.prototype.last = function() {\n    return this[this.length - 1];\n  };\n};\n\nUtilService.$inject = [\n  '$filter',\n  '$injector',\n  '$rootScope'\n];\n\nexport default UtilService;\n"]}