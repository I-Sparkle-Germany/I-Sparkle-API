{"version":3,"sources":["utilService.es6"],"names":["UtilService","length","CHARS","key","a","Math","floor","random","str","result","isNaN","Number","jsonObject","copyOfJSONObject","jsonObjectString","angular","toJson","fromJson","img_b64","blob","dataURItoBlob","now","Date","getTime","filename","encodeURIComponent","pngFile","File","lastModified","type","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","imageElement","imageObject","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","getImageObjectFromBase64String","iframes","element","iframe","style","display","Array","prototype","last","$inject"],"mappings":"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","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n\n    constructor() {\n    }\n\n    /**\n     * Generates and returns a random key of the given length if\n     * specified. If length is not specified, returns a key 10\n     * characters in length.\n     */\n    generateKey(length) {\n        this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n        /* set default length if not specified */\n        if (!length) {\n            length = 10;\n        }\n\n        /* generate the key */\n        var key = '';\n        for (var a = 0; a < length; a++) {\n            key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n        }\n\n        /* return the generated key */\n        // TODO: check that the new key is unique\n        return key;\n    };\n\n    /**\n     * Try to convert a string to a number\n     * @param str the string to convert\n     * @returns a number if we were able to convert the string to a number.\n     * if we couldn't convert the string to a number we will just return the string.\n     */\n    convertStringToNumber(str) {\n        var result = str;\n\n        if (str != null && str != '' && !isNaN(Number(str))) {\n            result = Number(str);\n        }\n\n        return result;\n    };\n\n    /**\n     * Create a copy of a JSON object\n     * @param jsonObject the JSON object to get a copy of\n     * @return a copy of the JSON object that was passed in\n     */\n    makeCopyOfJSONObject(jsonObject) {\n        var copyOfJSONObject = null;\n\n        if (jsonObject != null) {\n            // create a JSON string from the JSON object\n            var jsonObjectString = angular.toJson(jsonObject);\n\n            // create a JSON object from the JSON string\n            copyOfJSONObject = angular.fromJson(jsonObjectString);\n        }\n\n        return copyOfJSONObject;\n    };\n    \n    /**\n     * Get the image object\n     * @params img_b64 the base64 image string\n     * @returns an image object\n     */\n    getImageObjectFromBase64String(img_b64) {\n        \n        // create a blob from the base64 image string\n        var blob = this.dataURItoBlob(img_b64);\n        \n        var now = new Date().getTime();\n        var filename = encodeURIComponent('picture_' + now + '.png');\n        var pngFile = new File([blob], filename, {\n            lastModified: now, // optional - default = now\n            type: 'image/png' // optional - default = ''\n        });\n        \n        return pngFile;\n    }\n    \n    /**\n     * Convert base64/URLEncoded data component to raw binary data held in a string\n     * @param dataURI base64/URLEncoded data\n     * @returns a Blob object\n     */\n    dataURItoBlob(dataURI) {\n        \n        var byteString;\n        if (dataURI.split(',')[0].indexOf('base64') >= 0)\n            byteString = atob(dataURI.split(',')[1]);\n        else\n            byteString = unescape(dataURI.split(',')[1]);\n\n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n        // write the bytes of the string to a typed array\n        var ia = new Uint8Array(byteString.length);\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n\n        return new Blob([ia], {type:mimeString});\n    };\n    \n    /**\n     * Get an image object from an image element\n     * @param imageElement an image element (<img src='abc.jpg'/>)\n     * @returns an image object\n     */\n    getImageObjectFromImageElement(imageElement) {\n        \n        var imageObject = null;\n        \n        if (imageElement != null) {\n            // create a canvas element that we will use to generate a base64 string\n            var canvas = document.createElement(\"canvas\");\n            \n            // set the width and height of the canvas to match the image dimensions\n            canvas.width = imageElement.naturalWidth;\n            canvas.height = imageElement.naturalHeight;\n            \n            // draw the image onto the canvas\n            var ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(imageElement, 0, 0);\n\n            // create the base64 string representation of the image\n            var dataURL = canvas.toDataURL(\"image/png\");\n\n            // get the image object\n            imageObject = this.getImageObjectFromBase64String(dataURL);\n        }\n        \n        return imageObject;\n    }\n    \n    /**\n     * Hide all the iframes. This is used before a student snips something\n     * to put into their notebook. Iframes shift the position of elements\n     * below it which causes issues when html2canvas tries to capture\n     * certain elements.\n     */\n    hideIFrames() {\n        \n        // get all the iframes\n        var iframes = angular.element('iframe');\n        \n        // loop through all the iframes\n        for (var i = 0; i < iframes.length; i++) {\n            var iframe = iframes[i];\n            \n            if (iframe != null) {\n                // hide the iframe\n                iframe.style.display = 'none';\n            }\n        }\n    }\n    \n    /**\n     * Show all the iframes. This is used after the student snips something\n     * to put into their notebook. Iframes shift the position of elements\n     * below it which causes issues when html2canvas tries to capture\n     * certain elements.\n     */\n    showIFrames() {\n        \n        // get all the iframes\n        var iframes = angular.element('iframe');\n        \n        // loop through all the iframes\n        for (var i = 0; i < iframes.length; i++) {\n            var iframe = iframes[i];\n            \n            if (iframe != null) {\n                // show the iframe\n                iframe.style.display = '';\n            }\n        }\n    }\n}\n\n// Get the last element of the array\nif (!Array.prototype.last) {\n    Array.prototype.last = function() {\n        return this[this.length - 1];\n    };\n};\n\nUtilService.$inject = [];\n\nexport default UtilService;\n"]}