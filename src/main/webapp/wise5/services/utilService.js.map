{"version":3,"sources":["utilService.es6"],"names":[],"mappings":"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","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n\n    constructor() {\n    }\n\n    /**\n     * Generates and returns a random key of the given length if\n     * specified. If length is not specified, returns a key 10\n     * characters in length.\n     */\n    generateKey(length) {\n        this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n        /* set default length if not specified */\n        if (!length) {\n            length = 10;\n        }\n\n        /* generate the key */\n        var key = '';\n        for (var a = 0; a < length; a++) {\n            key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n        }\n\n        /* return the generated key */\n        // TODO: check that the new key is unique\n        return key;\n    };\n\n    /**\n     * Try to convert a string to a number\n     * @param str the string to convert\n     * @returns a number if we were able to convert the string to a number.\n     * if we couldn't convert the string to a number we will just return the string.\n     */\n    convertStringToNumber(str) {\n        var result = str;\n\n        if (str != null && str != '' && !isNaN(Number(str))) {\n            result = Number(str);\n        }\n\n        return result;\n    };\n\n    /**\n     * Create a copy of a JSON object\n     * @param jsonObject the JSON object to get a copy of\n     * @return a copy of the JSON object that was passed in\n     */\n    makeCopyOfJSONObject(jsonObject) {\n        var copyOfJSONObject = null;\n\n        if (jsonObject != null) {\n            // create a JSON string from the JSON object\n            var jsonObjectString = angular.toJson(jsonObject);\n\n            // create a JSON object from the JSON string\n            copyOfJSONObject = angular.fromJson(jsonObjectString);\n        }\n\n        return copyOfJSONObject;\n    };\n    \n    /**\n     * Get the image object\n     * @params img_b64 the base64 image string\n     * @returns an image object\n     */\n    getImageObjectFromBase64String(img_b64) {\n        \n        // create a blob from the base64 image string\n        var blob = this.dataURItoBlob(img_b64);\n        \n        var now = new Date().getTime();\n        var filename = encodeURIComponent('picture_' + now + '.png');\n        var pngFile = new File([blob], filename, {\n            lastModified: now, // optional - default = now\n            type: 'image/png' // optional - default = ''\n        });\n        \n        return pngFile;\n    }\n    \n    /**\n     * Convert base64/URLEncoded data component to raw binary data held in a string\n     * @param dataURI base64/URLEncoded data\n     * @returns a Blob object\n     */\n    dataURItoBlob(dataURI) {\n        \n        var byteString;\n        if (dataURI.split(',')[0].indexOf('base64') >= 0)\n            byteString = atob(dataURI.split(',')[1]);\n        else\n            byteString = unescape(dataURI.split(',')[1]);\n\n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n        // write the bytes of the string to a typed array\n        var ia = new Uint8Array(byteString.length);\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n\n        return new Blob([ia], {type:mimeString});\n    };\n}\n\nUtilService.$inject = [];\n\nexport default UtilService;\n"]}