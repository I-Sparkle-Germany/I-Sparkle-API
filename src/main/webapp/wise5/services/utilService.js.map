{"version":3,"sources":["utilService.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;IAEP,WAAW;AACb,aADE,WAAW,CACD,KAAK,EAAE;8BADjB,WAAW;;AAET,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;;;;;;;AAAA;iBAHC,WAAW;;oCAUD,MAAM,EAAE;AAChB,gBAAI,CAAC,KAAK,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,GAAG,EAC1F,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;;;AAAC,AAGrE,gBAAI,CAAC,MAAM,EAAE;AACT,sBAAM,GAAG,EAAE,CAAC;aACf;;;AAAA,AAGD,gBAAI,GAAG,GAAG,EAAE,CAAC;AACb,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7B,mBAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA,AAAC,CAAC,CAAC,CAAC;aAC1E;;;AAAA,AAGD,mBAAO,GAAG,CAAC;SACd;;;;;;;;;;8CAQqB,GAAG,EAAE;AACvB,gBAAI,MAAM,GAAG,GAAG,CAAC;;AAEjB,gBAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;AACjD,sBAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;aACxB;;AAED,mBAAO,MAAM,CAAC;SACjB;;;WA3CC,WAAW;;;AA+CjB,WAAW,CAAC,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;;kBAEjB,WAAW","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n    constructor($http) {\n        this.$http = $http;\n    }\n\n    /**\n     * Generates and returns a random key of the given length if\n     * specified. If length is not specified, returns a key 10\n     * characters in length.\n     */\n    generateKey(length) {\n        this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n        /* set default length if not specified */\n        if (!length) {\n            length = 10;\n        }\n\n        /* generate the key */\n        var key = '';\n        for (var a = 0; a < length; a++) {\n            key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n        }\n\n        /* return the generated key */\n        return key;\n    };\n\n    /**\n     * Try to convert a string to a number\n     * @param str the string to convert\n     * @returns a number if we were able to convert the string to a number.\n     * if we couldn't convert the string to a number we will just return the string.\n     */\n    convertStringToNumber(str) {\n        var result = str;\n\n        if (str != null && str != '' && !isNaN(Number(str))) {\n            result = Number(str);\n        }\n\n        return result;\n    };\n\n}\n\nUtilService.$inject = ['$http'];\n\nexport default UtilService;\n"]}