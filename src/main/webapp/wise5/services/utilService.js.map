{"version":3,"sources":["utilService.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM;AACF,aADE,WACF,CAAY,KAAZ,EAAmB;8BADjB,aACiB;;AACf,aAAK,KAAL,GAAa,KAAb,CADe;KAAnB;;;;;;;;iBADE;;oCAUU,QAAQ;AAChB,iBAAK,KAAL,GAAa,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,EAA6D,GAA7D,EAAiE,GAAjE,EAAqE,GAArE,EAA0E,GAA1E,EAA8E,GAA9E,EACT,GADS,EACL,GADK,EACD,GADC,EACG,GADH,EACO,GADP,EACW,GADX,EACe,GADf,EACmB,GADnB,EACuB,GADvB,EAC2B,GAD3B,EAC+B,GAD/B,EACmC,GADnC,EACuC,GADvC,EAC2C,GAD3C,EAC+C,GAD/C,EACmD,GADnD,CAAb;;;AADgB,gBAKZ,CAAC,MAAD,EAAS;AACT,yBAAS,EAAT,CADS;aAAb;;;AALgB,gBAUZ,MAAM,EAAN,CAVY;AAWhB,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAJ,EAAY,GAA5B,EAAiC;AAC7B,uBAAO,KAAK,KAAL,CAAW,KAAK,KAAL,CAAW,KAAK,MAAL,MAAiB,KAAK,KAAL,CAAW,MAAX,GAAoB,CAApB,CAAjB,CAAtB,CAAP,CAD6B;aAAjC;;;AAXgB,mBAgBT,GAAP,CAhBgB;;;;;;;;;;;8CAyBE,KAAK;AACvB,gBAAI,SAAS,GAAT,CADmB;;AAGvB,gBAAI,OAAO,IAAP,IAAe,OAAO,EAAP,IAAa,CAAC,MAAM,OAAO,GAAP,CAAN,CAAD,EAAqB;AACjD,yBAAS,OAAO,GAAP,CAAT,CADiD;aAArD;;AAIA,mBAAO,MAAP,CAPuB;;;;WAnCzB;;;AA+CN,YAAY,OAAZ,GAAsB,CAAC,OAAD,CAAtB;;kBAEe","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n    constructor($http) {\n        this.$http = $http;\n    }\n\n    /**\n     * Generates and returns a random key of the given length if\n     * specified. If length is not specified, returns a key 10\n     * characters in length.\n     */\n    generateKey(length) {\n        this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n        /* set default length if not specified */\n        if (!length) {\n            length = 10;\n        }\n\n        /* generate the key */\n        var key = '';\n        for (var a = 0; a < length; a++) {\n            key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n        }\n\n        /* return the generated key */\n        return key;\n    };\n\n    /**\n     * Try to convert a string to a number\n     * @param str the string to convert\n     * @returns a number if we were able to convert the string to a number.\n     * if we couldn't convert the string to a number we will just return the string.\n     */\n    convertStringToNumber(str) {\n        var result = str;\n\n        if (str != null && str != '' && !isNaN(Number(str))) {\n            result = Number(str);\n        }\n\n        return result;\n    };\n\n}\n\nUtilService.$inject = ['$http'];\n\nexport default UtilService;\n"]}