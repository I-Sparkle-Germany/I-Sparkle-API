{"version":3,"sources":["utilService.es6"],"names":["UtilService","$filter","$injector","$rootScope","componentTypeToLabel","$translate","length","CHARS","key","a","Math","floor","random","str","result","isNaN","Number","jsonObject","copyOfJSONObject","jsonObjectString","angular","toJson","fromJson","img_b64","blob","dataURItoBlob","now","Date","getTime","filename","encodeURIComponent","pngFile","File","lastModified","type","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","imageElement","imageObject","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","getImageObjectFromBase64String","iframes","element","iframe","style","display","fileName","lowerCaseFileName","toLowerCase","imageExtensionsRegEx","RegExp","matchResult","match","videoExtensionsRegEx","html","insertWISELinkAnchors","insertWISELinkButtons","wiseLinkRegEx","wiseLinkRegExMatchResult","exec","anchorHTML","anchorText","nodeId","getWISELinkNodeId","componentIdAttr","componentId","getWISELinkComponentId","wiselinkHtml","replace","buttonHTML","buttonText","nodeIdRegEx","nodeIdRegExResult","componentIdRegEx","componentIdRegExResult","typeRegEx","typeRegExResult","linkText","linkTextRegEx","linkTextRegExResult","replaceWISELinksHelper","regex","wiseLinkHTML","componentHTML","getWISELinkType","getWISELinkLinkText","newElement","controller","projectId","target","tooltip","thisRootScope","InsertAssetButton","context","ui","$","summernote","button","contents","click","invoke","params","popup","$broadcast","render","InsertWISELinkButton","text","subjectString","searchString","position","isFinite","lastIndex","lastIndexOf","object1","object2","serverSaveTime","milliseconds","dateTimeString","date","toDateString","toLocaleTimeString","componentType","label","componentService","get","getComponentTypeLabel","array1","array2","array1Copy","makeCopyOfJSONObject","sort","array2Copy","Array","prototype","last","$inject"],"mappings":"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","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n\n    constructor($filter,\n                $injector,\n                $rootScope) {\n        this.$filter = $filter;\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n\n        this.componentTypeToLabel = {};\n\n        this.$translate = this.$filter('translate');\n    }\n\n    /**\n     * Generates and returns a random key of the given length if\n     * specified. If length is not specified, returns a key 10\n     * characters in length.\n     */\n    generateKey(length) {\n        this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\n            \"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n        /* set default length if not specified */\n        if (!length) {\n            length = 10;\n        }\n\n        /* generate the key */\n        var key = '';\n        for (var a = 0; a < length; a++) {\n            key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n        }\n\n        /* return the generated key */\n        // TODO: check that the new key is unique\n        return key;\n    };\n\n    /**\n     * Try to convert a string to a number\n     * @param str the string to convert\n     * @returns a number if we were able to convert the string to a number.\n     * if we couldn't convert the string to a number we will just return the string.\n     */\n    convertStringToNumber(str) {\n        var result = str;\n\n        if (str != null && str != '' && !isNaN(Number(str))) {\n            result = Number(str);\n        }\n\n        return result;\n    };\n\n    /**\n     * Create a copy of a JSON object\n     * @param jsonObject the JSON object to get a copy of\n     * @return a copy of the JSON object that was passed in\n     */\n    makeCopyOfJSONObject(jsonObject) {\n        var copyOfJSONObject = null;\n\n        if (jsonObject != null) {\n            // create a JSON string from the JSON object\n            var jsonObjectString = angular.toJson(jsonObject);\n\n            // create a JSON object from the JSON string\n            copyOfJSONObject = angular.fromJson(jsonObjectString);\n        }\n\n        return copyOfJSONObject;\n    };\n\n    /**\n     * Get the image object\n     * @params img_b64 the base64 image string\n     * @returns an image object\n     */\n    getImageObjectFromBase64String(img_b64) {\n\n        // create a blob from the base64 image string\n        var blob = this.dataURItoBlob(img_b64);\n\n        var now = new Date().getTime();\n        var filename = encodeURIComponent('picture_' + now + '.png');\n        var pngFile = new File([blob], filename, {\n            lastModified: now, // optional - default = now\n            type: 'image/png' // optional - default = ''\n        });\n\n        return pngFile;\n    }\n\n    /**\n     * Convert base64/URLEncoded data component to raw binary data held in a string\n     * @param dataURI base64/URLEncoded data\n     * @returns a Blob object\n     */\n    dataURItoBlob(dataURI) {\n\n        var byteString;\n        if (dataURI.split(',')[0].indexOf('base64') >= 0)\n            byteString = atob(dataURI.split(',')[1]);\n        else\n            byteString = unescape(dataURI.split(',')[1]);\n\n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n        // write the bytes of the string to a typed array\n        var ia = new Uint8Array(byteString.length);\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n\n        return new Blob([ia], {type:mimeString});\n    };\n\n    /**\n     * Get an image object from an image element\n     * @param imageElement an image element (<img src='abc.jpg'/>)\n     * @returns an image object\n     */\n    getImageObjectFromImageElement(imageElement) {\n\n        var imageObject = null;\n\n        if (imageElement != null) {\n            // create a canvas element that we will use to generate a base64 string\n            var canvas = document.createElement(\"canvas\");\n\n            // set the width and height of the canvas to match the image dimensions\n            canvas.width = imageElement.naturalWidth;\n            canvas.height = imageElement.naturalHeight;\n\n            // draw the image onto the canvas\n            var ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(imageElement, 0, 0);\n\n            // create the base64 string representation of the image\n            var dataURL = canvas.toDataURL(\"image/png\");\n\n            // get the image object\n            imageObject = this.getImageObjectFromBase64String(dataURL);\n        }\n\n        return imageObject;\n    }\n\n    /**\n     * Hide all the iframes. This is used before a student snips something\n     * to put into their notebook. Iframes shift the position of elements\n     * below it which causes issues when html2canvas tries to capture\n     * certain elements.\n     */\n    hideIFrames() {\n\n        // get all the iframes\n        var iframes = angular.element('iframe');\n\n        // loop through all the iframes\n        for (var i = 0; i < iframes.length; i++) {\n            var iframe = iframes[i];\n\n            if (iframe != null) {\n                // hide the iframe\n                iframe.style.display = 'none';\n            }\n        }\n    }\n\n    /**\n     * Show all the iframes. This is used after the student snips something\n     * to put into their notebook. Iframes shift the position of elements\n     * below it which causes issues when html2canvas tries to capture\n     * certain elements.\n     */\n    showIFrames() {\n\n        // get all the iframes\n        var iframes = angular.element('iframe');\n\n        // loop through all the iframes\n        for (var i = 0; i < iframes.length; i++) {\n            var iframe = iframes[i];\n\n            if (iframe != null) {\n                // show the iframe\n                iframe.style.display = '';\n            }\n        }\n    }\n\n    /**\n     * Check if the asset is an image\n     * @param fileName the file name of the asset\n     * @return whether the asset is an image or not\n     */\n    isImage(fileName) {\n        var result = false;\n\n        if (fileName != null) {\n            var lowerCaseFileName = fileName.toLowerCase();\n\n            // regex to match image extensions\n            var imageExtensionsRegEx = new RegExp('.*\\.(png|jpg|jpeg|bmp|gif|tiff|svg)');\n\n            var matchResult = lowerCaseFileName.match(imageExtensionsRegEx);\n\n            if (matchResult != null) {\n                // we have found a match so the asset is an image\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if the asset is a video\n     * @param fileName the file name of the asset\n     * @return whether the asset is a video or not\n     */\n    isVideo(fileName) {\n        var result = false;\n\n        if (fileName != null) {\n            var lowerCaseFileName = fileName.toLowerCase();\n\n            // regex to match video extensions\n            var videoExtensionsRegEx = new RegExp('.*\\.(mp4|mpg|mpeg|m4v|m2v|avi|gifv|mov|qt)');\n\n            var matchResult = lowerCaseFileName.match(videoExtensionsRegEx);\n\n            if (matchResult != null) {\n                // we have found a match so the asset is a video\n                result = true;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Replace <a> and <button> elements with <wiselink> elements where\n     * applicable\n     * @param html the html\n     * @return the modified html with <wiselink> elements\n     */\n    insertWISELinks(html) {\n\n        // replace <a> elements with <wiselink> elements\n        html = this.insertWISELinkAnchors(html);\n\n        // replace <button> elements with <wiselink> elements\n        html = this.insertWISELinkButtons(html);\n\n        return html;\n    }\n\n    /**\n     * Replace <a> elements that have the parameter wiselink=true with\n     * <wiselink> elements\n     * @param html the html\n     * @return the modified html with certain <a> elements replaced with\n     * <wiselink> elements\n     */\n    insertWISELinkAnchors(html) {\n\n        // find <a> elements with the parameter wiselink=true\n        let wiseLinkRegEx = new RegExp(/<a.*?wiselink=\"true\".*?>(.*?)<\\/a>/);\n\n        // find the first match\n        let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n        // loop until we have replaced all the matches\n        while(wiseLinkRegExMatchResult != null) {\n\n            // get the whole <a> element\n            let anchorHTML = wiseLinkRegExMatchResult[0];\n\n            // get the inner html of the <a> element\n            let anchorText = wiseLinkRegExMatchResult[1];\n\n            // get the node id parameter of the <a> element\n            let nodeId = this.getWISELinkNodeId(anchorHTML);\n\n            if (nodeId == null) {\n                nodeId = '';\n            }\n\n            let componentIdAttr = \"\";\n            let componentId = this.getWISELinkComponentId(anchorHTML);\n            if (componentId != null) {\n                componentIdAttr = \"component-id='\" + componentId + \"'\";\n            }\n\n            // create the <wiselink> element\n            let wiselinkHtml = \"<wiselink type='link' link-text='\" + anchorText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n            // replace the <a> element with the <wiselink> element\n            html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n            // search for the next <a> element with the parameter wiselink=true\n            wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n        }\n\n        return html;\n    }\n\n    /**\n     * Replace <button> elements that have the parameter wiselink=true\n     * with <wiselink> elements\n     * @param html the html\n     * @return the modified html with certain <button> elements replaced with\n     * <wiselink> elements\n     */\n    insertWISELinkButtons(html) {\n\n        // find <button> elements with the parameter wiselink=true\n        var wiseLinkRegEx = new RegExp(/<button.*?wiselink=\"true\".*?>(.*?)<\\/button>/);\n\n        // find the first match\n        var wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n        // loop until we have replaced all the matches\n        while(wiseLinkRegExMatchResult != null) {\n\n            // get the whole <button> element\n            var buttonHTML = wiseLinkRegExMatchResult[0];\n\n            // get the inner html of the <button> element\n            var buttonText = wiseLinkRegExMatchResult[1];\n\n            // get the node id parameter of the <button> element\n            var nodeId = this.getWISELinkNodeId(buttonHTML);\n\n            if (nodeId == null) {\n                nodeId = '';\n            }\n\n            let componentIdAttr = \"\";\n            let componentId = this.getWISELinkComponentId(buttonHTML);\n            if (componentId != null) {\n                componentIdAttr = \"component-id='\" + componentId + \"'\";\n            }\n\n\n            // create the <wiselink> element\n            var wiselinkHtml = \"<wiselink type='button' link-text='\" + buttonText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n            // replace the <button> element with the <wiselink> element\n            html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n            // search for the next <button> element with the parameter wiselink=true\n            wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n        }\n\n        return html;\n    }\n\n    /**\n     * Get the node id from the wiselink element\n     * e.g.\n     * <wiselink node-id='node5'/>\n     * the node id in this case is 'node5'\n     * @param html the html for the element\n     * @return the node id from the node id parameter in the element\n     */\n    getWISELinkNodeId(html) {\n\n        let nodeId = null;\n\n        if (html != null) {\n            // create the regex to find the node id parameter\n            let nodeIdRegEx = new RegExp(/node-id=[\"'b](.*?)[\"']/, 'g');\n\n            // try to find a match\n            let nodeIdRegExResult = nodeIdRegEx.exec(html);\n\n            if (nodeIdRegExResult != null) {\n                // we have found a node id\n                nodeId = nodeIdRegExResult[1];\n            }\n        }\n\n        return nodeId;\n    }\n\n    /**\n     * Get the component id from the wiselink element\n     * e.g.\n     * <wiselink node-id='node5' component-id='xyzabc' />\n     * the component id in this case is 'xyzabc'\n     * @param html the html for the element\n     * @return the component id from the component id parameter in the element\n     */\n    getWISELinkComponentId(html) {\n\n        let componentId = null;\n\n        if (html != null) {\n            // create the regex to find the component id parameter\n            let componentIdRegEx = new RegExp(/component-id=[\"'b](.*?)[\"']/, 'g');\n\n            // try to find a match\n            let componentIdRegExResult = componentIdRegEx.exec(html);\n\n            if (componentIdRegExResult != null) {\n                // we have found a node id\n                componentId = componentIdRegExResult[1];\n            }\n        }\n\n        return componentId;\n    }\n\n    /**\n     * Get the link type from the wiselink element\n     * e.g.\n     * <wiselink type='button'/>\n     * the type in this case is 'button'\n     * @param html the html for the element\n     * @return the link type from the type parameter in the element\n     */\n    getWISELinkType(html) {\n        let type = null;\n\n        if (html != null) {\n            // create the regex to find the type\n            let typeRegEx = new RegExp(/type=[\"'b](.*?)[\"']/, 'g');\n\n            // try to find a match\n            let typeRegExResult = typeRegEx.exec(html);\n\n            if (typeRegExResult != null) {\n                // we have found a type\n                type = typeRegExResult[1];\n            }\n        }\n\n        return type;\n    }\n\n    /**\n     * Get the link text from the wiselink element\n     * <wiselink link-text='Go to here'/>\n     * the link text in this case is 'Go to here'\n     * @param html the html for the element\n     * @return the link text from the link text parameter in the element\n     */\n    getWISELinkLinkText(html) {\n        let linkText = null;\n\n        if (html != null) {\n            // create the regex to find the link text\n            let linkTextRegEx = new RegExp(/link-text=[\"'b](.*?)[\"']/, 'g');\n\n            // try to find a match\n            let linkTextRegExResult = linkTextRegEx.exec(html);\n\n            if (linkTextRegExResult != null) {\n                // we have found a link text\n                linkText = linkTextRegExResult[1];\n            }\n        }\n\n        return linkText;\n    }\n\n    /**\n     * Replace <wiselink> elements with <a> and <button> elements\n     * @param html the html\n     * @return the modified html without <wiselink> elements\n     */\n    replaceWISELinks(html) {\n\n        // replace wiselinks that look like <wiselink/>\n        html = this.replaceWISELinksHelper(html, '<wiselink.*?\\/>');\n\n        // replace wiselinks that look like <wiselink></wiselink>\n        html = this.replaceWISELinksHelper(html, '<wiselink.*?>.*?<\\/wiselink>');\n\n        return html;\n    }\n\n    /**\n     * Helper function for replacing <wiselink> elements with <a> and <button>\n     * elements\n     * @param html the html\n     * @param regex the regex string to search for\n     * @return the html without <wiselink> elements\n     */\n    replaceWISELinksHelper(html, regex) {\n\n        // create the regex\n        let wiseLinkRegEx = new RegExp(regex);\n\n        // find the first match\n        let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n        // loop until we have replaced all the matches\n        while (wiseLinkRegExMatchResult != null) {\n\n            /*\n             * get the whole match\n             * e.g. <wiselink type='link' node-id='node5' link-text='Go to here'/>\n             */\n            let wiseLinkHTML = wiseLinkRegExMatchResult[0];\n\n            // get the node id, component id (if exists), type and link text from the match\n            let nodeId = this.getWISELinkNodeId(wiseLinkHTML);\n            let componentId = this.getWISELinkComponentId(wiseLinkHTML);\n            let componentHTML = '';\n            if (componentId != null && componentId != '') {\n                componentHTML = \"component-id='\" + componentId + \"'\";\n            }\n            let type = this.getWISELinkType(wiseLinkHTML);\n            let linkText = this.getWISELinkLinkText(wiseLinkHTML);\n\n            let newElement = null;\n\n            if (type == 'link') {\n                // create a link that represents the wiselink\n                newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n            } else if (type == 'button') {\n                // create a button that represents the wiselink\n                newElement = \"<button wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</button>\";\n            } else {\n                // default to creating a link that represents the wiselink\n                newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n            }\n\n            if (newElement != null) {\n                // replace the wiselink with the new element\n                html = html.replace(wiseLinkHTML, newElement);\n            }\n\n            // find the next match\n            wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n        }\n\n        return html;\n    }\n\n    /**\n     * Create a custom summernote button that inserts a WISE asset into\n     * summernote\n     * @param controller the controller that is creating the button\n     * e.g. openResponseController\n     * @param nodeId the node id of the component that is creating the button\n     * @param componentId the component id of the component that is creating the button\n     * @param target the target element in the component to insert the asset into\n     * e.g. 'prompt' or 'rubricSummernoteId'\n     * @param tooltip the tooltip text for the custom button\n     * @return custom summernote button\n     */\n    createInsertAssetButton(controller, projectId, nodeId, componentId, target, tooltip) {\n\n        var thisRootScope = this.$rootScope;\n\n        // a custom button that opens the asset chooser\n        var InsertAssetButton = function(context) {\n            var ui = $.summernote.ui;\n\n            // create button\n            var button = ui.button({\n                contents: '<i class=\"note-icon-picture\"></i>',\n                tooltip: tooltip,\n                click: function () {\n                    // remember the position of the cursor\n                    context.invoke('editor.saveRange');\n\n                    // create the params for opening the asset chooser\n                    var params = {};\n                    params.popup = true;\n\n                    if (projectId != null) {\n                        params.projectId = projectId;\n                    }\n\n                    if (nodeId != null) {\n                        params.nodeId = nodeId;\n                    }\n\n                    if (componentId != null) {\n                        params.componentId = componentId;\n                    }\n\n                    params.target = target;\n\n                    // display the asset chooser\n                    thisRootScope.$broadcast('openAssetChooser', params);\n                }\n            });\n\n            return button.render();   // return button as jquery object\n        };\n\n        return InsertAssetButton;\n    }\n\n    /**\n     * Create a custom summernote button that inserts a WISE link into\n     * summernote\n     * @param controller the controller that is creating the WISE link\n     * e.g. openResponseController\n     * @param nodeId the node id of the component that is creating the WISE link\n     * @param componentId the component id of the component that is creating the WISE link\n     * @param target the target element in the component to insert the WISE link into\n     * e.g. 'prompt' or 'rubricSummernoteId'\n     * @param tooltip the tooltip text for the custom button\n     * @return custom summernote button\n     */\n    createInsertWISELinkButton(controller, projectId, nodeId, componentId, target, tooltip) {\n\n        var thisRootScope = this.$rootScope;\n\n        // a custom button that opens the WISE Link authoring popup\n        var InsertWISELinkButton = function(context) {\n            var ui = $.summernote.ui;\n\n            // create button\n            var button = ui.button({\n                contents: '<i class=\"note-icon-link\"></i>',\n                tooltip: tooltip,\n                click: function () {\n                    // remember the position of the cursor\n                    context.invoke('editor.saveRange');\n\n                    // create the params for opening the WISE Link chooser\n                    var params = {};\n\n                    if (projectId != null) {\n                        params.projectId = projectId;\n                    }\n\n                    if (nodeId != null) {\n                        params.nodeId = nodeId;\n                    }\n\n                    if (componentId != null) {\n                        params.componentId = componentId;\n                    }\n\n                    params.target = target;\n\n                    // display the WISE Link authoring popup\n                    thisRootScope.$broadcast('openWISELinkChooser', params);\n                }\n            });\n\n            return button.render();   // return button as jquery object\n        }\n\n        return InsertWISELinkButton;\n    }\n\n    /**\n     * Remove html tags from the string. Also remove new lines.\n     * @param html an html string\n     * @return text without html tags\n     */\n    removeHTMLTags(html) {\n\n        var text = '';\n\n        if (html != null) {\n            // remove tags\n            text = html.replace(/<\\/?[^>]+(>|$)/g, \" \");\n\n            // remove new lines\n            text = text.replace(/\\n/g, \" \");\n\n            // remove line returns\n            text = text.replace(/\\r/g, \" \");\n        }\n\n        return text;\n    }\n\n    /**\n     * Check if a string ends with a specific string\n     * @param subjectString the main string\n     * @param searchString the potential end of the string\n     * @param position (optional) the position to start searching\n     * @return whether the subjectString ends with the searchString\n     */\n    endsWith(subjectString, searchString, position) {\n        if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n            position = subjectString.length;\n        }\n        position -= searchString.length;\n        var lastIndex = subjectString.lastIndexOf(searchString, position);\n        return lastIndex !== -1 && lastIndex === position;\n    }\n\n    /**\n     * Sort the objects by server save time\n     * @param object1 an object\n     * @param object2 an object\n     * @return -1 if object1 server save time comes before object2 server save time\n     * 1 if object1 server save time comes after object2 server save time\n     * 0 if object1 server save time is equal to object2 server save time\n     */\n    sortByServerSaveTime(object1, object2) {\n\n        if (object1.serverSaveTime < object2.serverSaveTime) {\n            return -1;\n        } else if (object1.serverSaveTime > object2.serverSaveTime) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Convert milliseconds since the epoch to a pretty printed date time\n     * @param milliseconds the milliseconds since the epoch\n     * @return a string containing the pretty printed date time\n     * example\n     * Wed Apr 06 2016 9:05:38 AM\n     */\n    convertMillisecondsToFormattedDateTime(milliseconds) {\n\n        var dateTimeString = \"\";\n\n        // create a Date object with the milliseconds\n        var date = new Date(milliseconds);\n\n        if (date != null) {\n            // get the date time string e.g. Wed Apr 06 2016 9:05:38 AM\n            dateTimeString = date.toDateString() + \" \" + date.toLocaleTimeString();\n        }\n\n        return dateTimeString;\n    }\n\n    /**\n     * Get the label for the given component type\n     * @param componentType string\n     * @return string label for the component type\n     */\n    getComponentTypeLabel(componentType) {\n\n        /*\n         * check if we have already obtained the label for this component type\n         * before\n         */\n        let label = this.componentTypeToLabel[componentType];\n\n        if (label == null) {\n            // we have not obtained the label before\n\n            // get the service for the component type\n            let componentService = this.$injector.get(componentType + 'Service');\n\n            if (componentService != null && componentService.getComponentTypeLabel != null) {\n\n                // get the label for the component type\n                label = componentService.getComponentTypeLabel();\n\n                // add the entry of component type to label for future lookup\n                this.componentTypeToLabel[componentType] = label;\n            }\n        }\n\n        if (label == null) {\n            /*\n             * we were unable to find the label so we will just use the\n             * component type as the label\n             */\n            label = componentType;\n        }\n\n        return label;\n    }\n\n    /**\n     * Check if two arrays contain the same values. This is commonly used to\n     * check if two arrays of ids contain the same values. The order of the\n     * elements is not compared, only the actual values. This means the elements\n     * can be in different orders but still contain the same values.\n     * Example:\n     * array1=['1234567890', 'abcdefghij']\n     * array2=['abcdefghij', '1234567890']\n     * If these two arrays are passed in as the two arguments, this function\n     * will return true.\n     * Note: This may only work if the elements are strings, numbers or\n     * booleans. If the elements are objects, this function may or may not work.\n     * @param array1 an array of strings, numbers, or booleans\n     * @param array2 an array of strings, numbers, or booleans\n     * @return whether the arrays contain the same values\n     */\n    arraysContainSameValues(array1, array2) {\n\n        if (array1 != null && array2 != null) {\n            // make a copy of array 1 and sort it\n            var array1Copy = this.makeCopyOfJSONObject(array1);\n            array1Copy.sort();\n\n            // make a copy of array 2 and sort it\n            var array2Copy = this.makeCopyOfJSONObject(array2);\n            array2Copy.sort();\n\n            // compare the string values of both array\n            if (angular.toJson(array1Copy) == angular.toJson(array2Copy)) {\n                // the arrays are the same\n                return true;\n            }\n        }\n\n        // the arrays are not the same\n        return false;\n    }\n}\n\n// Get the last element of the array\nif (!Array.prototype.last) {\n    Array.prototype.last = function() {\n        return this[this.length - 1];\n    };\n};\n\nUtilService.$inject = [\n    '$filter',\n    '$injector',\n    '$rootScope'\n];\n\nexport default UtilService;\n"]}