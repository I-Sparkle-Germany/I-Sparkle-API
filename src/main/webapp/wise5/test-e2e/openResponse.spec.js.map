{"version":3,"sources":["openResponse.spec.es6"],"names":["describe","hasClass","element","cls","getAttribute","then","classes","split","indexOf","saveButton","by","xpath","saveMessage","submitButton","textarea","it","browser","get","nodeDropDownMenu","model","wait","isPresent","expect","getTitle","toEqual","getText","toBe","nodeContent","cssContainingText","toBeTruthy","firstSentence","secondSentence","sendKeys","click","toContain"],"mappings":";;AAAA;AACAA,SAAS,qBAAT,EAAgC,YAAM;;AAElC,QAAIC,WAAW,SAAXA,QAAW,CAACC,OAAD,EAAUC,GAAV,EAAkB;AAC7B,eAAOD,QAAQE,YAAR,CAAqB,OAArB,EAA8BC,IAA9B,CAAmC,UAACC,OAAD,EAAa;AACnD,mBAAOA,QAAQC,KAAR,CAAc,GAAd,EAAmBC,OAAnB,CAA2BL,GAA3B,MAAoC,CAAC,CAA5C;AACH,SAFM,CAAP;AAGH,KAJD;;AAMA,QAAIM,aAAaP,QAAQQ,GAAGC,KAAH,CAAS,6BAAT,CAAR,CAAjB;AACA,QAAIC,cAAcV,QAAQQ,GAAGC,KAAH,CAAS,4DAAT,CAAR,CAAlB;AACA,QAAIE,eAAeX,QAAQQ,GAAGC,KAAH,CAAS,+BAAT,CAAR,CAAnB;AACA,QAAIG,WAAWZ,QAAQQ,GAAGC,KAAH,CAAS,sEAAT,CAAR,CAAf;;AAEAI,OAAG,sCAAH,EAA2C,YAAM;AAC7CC,gBAAQC,GAAR,CAAY,oDAAZ;AACA,YAAIC,mBAAmBhB,QAAQQ,GAAGS,KAAH,CAAS,wBAAT,CAAR,CAAvB;AACAH,gBAAQI,IAAR,CAAcF,gBAAD,CAAmBG,SAAnB,EAAb,EAA6C,IAA7C,EAH6C,CAGQ;AACrDC,eAAON,QAAQO,QAAR,EAAP,EAA2BC,OAA3B,CAAmC,MAAnC;AACAF,eAAOJ,iBAAiBO,OAAjB,EAAP,EAAmCC,IAAnC,CAAwC,yBAAxC;;AAEA,YAAIC,cAAczB,QAAQQ,GAAGkB,iBAAH,CAAqB,eAArB,EAAqC,2CAArC,CAAR,CAAlB;AACAN,eAAOK,YAAYN,SAAZ,EAAP,EAAgCQ,UAAhC;AACAP,eAAOR,SAASO,SAAT,EAAP,EAA6BQ,UAA7B;;AAEA;AACAP,eAAOb,WAAWY,SAAX,EAAP,EAA+BQ,UAA/B;AACAP,eAAOrB,SAASQ,UAAT,EAAqB,UAArB,CAAP;AACAa,eAAOT,aAAaQ,SAAb,EAAP,EAAiCQ,UAAjC;AACAP,eAAOrB,SAASY,YAAT,EAAuB,UAAvB,CAAP;AACAS,eAAOV,YAAYa,OAAZ,EAAP,EAA8BC,IAA9B,CAAmC,EAAnC,EAhB6C,CAgBJ;AAC5C,KAjBD;;AAmBAX,OAAG,6CAAH,EAAkD,YAAM;AACpD,YAAIe,gBAAgB,6BAApB;AACA,YAAIC,iBAAiB,6BAArB;AACAjB,iBAASkB,QAAT,CAAkBF,aAAlB;;AAEA;AACAR,eAAO,CAACrB,SAASQ,UAAT,EAAqB,UAArB,CAAR;AACAa,eAAO,CAACrB,SAASY,YAAT,EAAuB,UAAvB,CAAR;;AAEA;AACAJ,mBAAWwB,KAAX;AACAX,eAAOV,YAAYa,OAAZ,EAAP,EAA8BS,SAA9B,CAAwC,OAAxC,EAXoD,CAWD;;AAEnD;AACAZ,eAAOrB,SAASQ,UAAT,EAAqB,UAArB,CAAP;AACAa,eAAO,CAACrB,SAASY,YAAT,EAAuB,UAAvB,CAAR;;AAEA;AACAA,qBAAaoB,KAAb;AACAX,eAAOV,YAAYa,OAAZ,EAAP,EAA8BS,SAA9B,CAAwC,WAAxC,EAnBoD,CAmBG;;AAEvD;AACAZ,eAAO,CAACrB,SAASQ,UAAT,EAAqB,UAArB,CAAR;AACAa,eAAO,CAACrB,SAASY,YAAT,EAAuB,UAAvB,CAAR;;AAEA;AACAC,iBAASkB,QAAT,CAAkBD,cAAlB;AACAT,eAAOR,SAASV,YAAT,CAAsB,OAAtB,CAAP,EAAuCoB,OAAvC,CAA+CM,gBAAgBC,cAA/D,EA3BoD,CA2B4B;AACnF,KA5BD;AA6BH,CA7DD","file":"openResponse.spec.js","sourcesContent":["// E2E test for Open Response component in preview mode\ndescribe('WISE5 Open Response', () => {\n\n    let hasClass = (element, cls) => {\n        return element.getAttribute('class').then((classes) => {\n            return classes.split(' ').indexOf(cls) !== -1;\n        });\n    };\n\n    let saveButton = element(by.xpath('//button[@translate=\"SAVE\"]'));\n    let saveMessage = element(by.xpath('//span[@ng-show=\"openResponseController.saveMessage.text\"]'));\n    let submitButton = element(by.xpath('//button[@translate=\"SUBMIT\"]'));\n    let textarea = element(by.xpath('//textarea[@ng-change=\"openResponseController.studentDataChanged()\"]'));\n\n    it('should load the vle and go to node 2', () => {\n        browser.get('http://localhost:8080/wise/project/demo#/vle/node2');\n        let nodeDropDownMenu = element(by.model(\"stepToolsCtrl.toNodeId\"));\n        browser.wait((nodeDropDownMenu).isPresent(), 5000);  // give it at most 5 seconds to load.\n        expect(browser.getTitle()).toEqual('WISE');\n        expect(nodeDropDownMenu.getText()).toBe('1.2: Open Response Step');\n\n        let nodeContent = element(by.cssContainingText('.node-content','This is a step where students enter text.'));\n        expect(nodeContent.isPresent()).toBeTruthy();\n        expect(textarea.isPresent()).toBeTruthy();\n\n        // save and submit buttons should be displayed but disabled\n        expect(saveButton.isPresent()).toBeTruthy();\n        expect(hasClass(saveButton, \"disabled\"));\n        expect(submitButton.isPresent()).toBeTruthy();\n        expect(hasClass(submitButton, \"disabled\"));\n        expect(saveMessage.getText()).toBe(\"\");  // there should be nothing in the save message\n    });\n\n    it('should allow students to type text and save', () => {\n        let firstSentence = 'Here is my first sentence. ';\n        let secondSentence = 'Here is my second sentence.';\n        textarea.sendKeys(firstSentence);\n\n        // save and submit buttons should now be enabled\n        expect(!hasClass(saveButton, \"disabled\"));\n        expect(!hasClass(submitButton, \"disabled\"));\n\n        // click on save button\n        saveButton.click();\n        expect(saveMessage.getText()).toContain(\"Saved\");  // save message should show the last saved time\n\n        // save buttons should be displayed but disabled, but the submit button should still be enabled.\n        expect(hasClass(saveButton, \"disabled\"));\n        expect(!hasClass(submitButton, \"disabled\"));\n\n        // click on submit button\n        submitButton.click();\n        expect(saveMessage.getText()).toContain(\"Submitted\");  // save message should show the last submitted time\n\n        // save buttons and submit buttons should both be disabled.\n        expect(!hasClass(saveButton, \"disabled\"));\n        expect(!hasClass(submitButton, \"disabled\"));\n\n        // you should be able to edit your text\n        textarea.sendKeys(secondSentence);\n        expect(textarea.getAttribute('value')).toEqual(firstSentence + secondSentence); // check the value in the textarea\n    });\n});\n"]}