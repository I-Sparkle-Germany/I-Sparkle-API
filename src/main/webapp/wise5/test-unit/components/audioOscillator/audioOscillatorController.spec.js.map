{"version":3,"sources":["audioOscillatorController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","audioOscillatorController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","window","AudioContext","nodeId","it","expect","frequency","toEqual","startingFrequency","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","oscillatorTypes","length","addFrequencyPlayed","frequenciesPlayed","playSpy","spyOn","togglePlay","toHaveBeenCalled","componentState","studentData","setStudentWork"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,2BAAT,EAAsC,YAAM;;AAE1C,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,kCAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAAiC;AACjDb,kBAAcY,aAAd;AACAX,iBAAaY,YAAb;AACAT,gBAAY;AACV,YAAM,YADI;AAEV,cAAQ,iBAFE;AAGV,gBAAU,EAHA;AAIV,wBAAkB,KAJR;AAKV,0BAAoB,IALV;AAMV,yBAAmB,CACjB,MADiB,EAEjB,UAFiB,EAGjB,UAHiB,CANT;AAWV,2BAAqB,GAXX;AAYV,2BAAqB,GAZX;AAaV,4BAAsB,GAbZ;AAcV,sBAAgB,EAdN;AAeV,2BAAqB,KAfX;AAgBV,iCAA2B;AAhBjB,KAAZ;;AAmBAF,aAASD,WAAWa,IAAX,EAAT;AACAZ,WAAOa,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,SAAf,CAAX,CAA1B;AACAe,WAAOC,YAAP,GAAsB,YAAW,CAAE,CAAnC;AACAjB,gCAA4BH,YAAY,2BAAZ,EAAyC,EAAEE,QAAQA,MAAV,EAAzC,CAA5B;AACAC,8BAA0BkB,MAA1B,GAAmC,OAAnC;AACD,GA3BU,CAAX;;AA6BAC,KAAG,sDAAH,EAA2D,YAAM;AAC/DC,WAAOpB,0BAA0BqB,SAAjC,EAA4CC,OAA5C,CAAoDrB,UAAUsB,iBAA9D;AACAH,WAAOpB,0BAA0BwB,iBAAjC,EAAoDF,OAApD,CAA4DrB,UAAUuB,iBAAtE;AACAJ,WAAOpB,0BAA0ByB,kBAAjC,EAAqDH,OAArD,CAA6DrB,UAAUwB,kBAAvE;AACAL,WAAOpB,0BAA0B0B,YAAjC,EAA+CJ,OAA/C,CAAuDrB,UAAUyB,YAAjE;AACAN,WAAOpB,0BAA0B2B,eAA1B,CAA0CC,MAAjD,EAAyDN,OAAzD,CAAiE,CAAjE;AACD,GAND;;AAQAH,KAAG,mDAAH,EAAwD,YAAM;AAC5DnB,8BAA0B6B,kBAA1B,CAA6C,GAA7C;AACAT,WAAOpB,0BAA0B8B,iBAA1B,CAA4CF,MAAnD,EAA2DN,OAA3D,CAAmE,CAAnE;AACAF,WAAOpB,0BAA0B8B,iBAA1B,CAA4C,CAA5C,CAAP,EAAuDR,OAAvD,CAA+D,GAA/D;AACD,GAJD;;AAMAH,KAAG,iDAAH,EAAsD,YAAM;AAC1D,QAAMY,UAAUC,MAAMhC,yBAAN,EAAiC,MAAjC,CAAhB;AACAA,8BAA0BiC,UAA1B;AACAb,WAAOW,OAAP,EAAgBG,gBAAhB;AACD,GAJD;;AAMAf,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMgB,iBAAiB;AACrBC,mBAAa;AACXN,2BAAmB,CAAC,GAAD,EAAM,GAAN;AADR;AADQ,KAAvB;AAKA9B,8BAA0BqC,cAA1B,CAAyCF,cAAzC;AACAf,WAAOpB,0BAA0B8B,iBAA1B,CAA4CF,MAAnD,EAA2DN,OAA3D,CAAmE,CAAnE;AACAF,WAAOpB,0BAA0B8B,iBAA1B,CAA4C,CAA5C,CAAP,EAAuDR,OAAvD,CAA+D,GAA/D;AACAF,WAAOpB,0BAA0B8B,iBAA1B,CAA4C,CAA5C,CAAP,EAAuDR,OAAvD,CAA+D,GAA/D;AACD,GAVD;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA/ED","file":"audioOscillatorController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('AudioOscillatorController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let audioOscillatorController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      \"id\": \"q4024mds8j\",\n      \"type\": \"AudioOscillator\",\n      \"prompt\": \"\",\n      \"showSaveButton\": false,\n      \"showSubmitButton\": true,\n      \"oscillatorTypes\": [\n        \"sine\",\n        \"triangle\",\n        \"sawtooth\"\n      ],\n      \"startingFrequency\": 440,\n      \"oscilloscopeWidth\": 800,\n      \"oscilloscopeHeight\": 400,\n      \"gridCellSize\": 50,\n      \"stopAfterGoodDraw\": false,\n      \"showAddToNotebookButton\": true\n    };\n\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    window.AudioContext = function() {};\n    audioOscillatorController = $controller('AudioOscillatorController', { $scope: $scope });\n    audioOscillatorController.nodeId = 'node1';\n  }));\n\n  it('should set the parameters from the component content', () => {\n    expect(audioOscillatorController.frequency).toEqual(component.startingFrequency);\n    expect(audioOscillatorController.oscilloscopeWidth).toEqual(component.oscilloscopeWidth);\n    expect(audioOscillatorController.oscilloscopeHeight).toEqual(component.oscilloscopeHeight);\n    expect(audioOscillatorController.gridCellSize).toEqual(component.gridCellSize);\n    expect(audioOscillatorController.oscillatorTypes.length).toEqual(3);\n  });\n\n  it('should add a frequency played to the student data', () => {\n    audioOscillatorController.addFrequencyPlayed(440);\n    expect(audioOscillatorController.frequenciesPlayed.length).toEqual(1);\n    expect(audioOscillatorController.frequenciesPlayed[0]).toEqual(440);\n  });\n\n  it('should call play when the toggle play is called', () => {\n    const playSpy = spyOn(audioOscillatorController, 'play');\n    audioOscillatorController.togglePlay();\n    expect(playSpy).toHaveBeenCalled();\n  });\n\n  it('should repopulate student work', () => {\n    const componentState = {\n      studentData: {\n        frequenciesPlayed: [440, 880]\n      }\n    };\n    audioOscillatorController.setStudentWork(componentState);\n    expect(audioOscillatorController.frequenciesPlayed.length).toEqual(2);\n    expect(audioOscillatorController.frequenciesPlayed[0]).toEqual(440);\n    expect(audioOscillatorController.frequenciesPlayed[1]).toEqual(880);\n  });\n\n  // it('should create a component state', () => {\n  //   console.log('hello1');\n  //   audioOscillatorController.createComponentState().then((componentState) => {\n  //     console.log('hello2');\n  //     expect(componentState.studentData).not.toBeNull();\n  //     console.log('hello3');\n  //   });\n  // });\n});\n"]}