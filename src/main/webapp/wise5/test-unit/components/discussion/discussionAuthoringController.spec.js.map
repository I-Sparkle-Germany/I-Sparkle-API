{"version":3,"sources":["discussionAuthoringController.spec.es6"],"names":["mockProjectService","getComponentByNodeIdAndComponentId","nodeId","componentId","describe","$controller","$rootScope","$scope","discussionAuthoringController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","authoringComponentContent","ProjectService","it","connectedComponents","type","authoringViewComponentChangedSpy","spyOn","getComponentByNodeIdAndComponentIdSpy","and","returnValue","firstConnectedComponent","secondConnectedComponent","authoringConnectedComponentTypeChanged","expect","toEqual"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,qBAAqB;AACzBC,sCAAoC,4CAASC,MAAT,EAAiBC,WAAjB,EAA8B;AAChE,WAAO,EAAED,QAAQA,MAAV,EAAkBC,aAAaA,WAA/B,EAAP;AACD;AAHwB,CAA3B;;AAMAC,SAAS,+BAAT,EAA0C,YAAM;;AAE9C,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,sCAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAAiC;AACjDb,kBAAcY,aAAd;AACAX,iBAAaY,YAAb;AACAT,gBAAY;AACV,YAAM,YADI;AAEV,cAAQ,YAFE;AAGV,gBAAU,yCAHA;AAIV,wBAAkB,KAJR;AAKV,0BAAoB,KALV;AAMV,oCAA8B,IANpB;AAOV,gCAA0B,IAPhB;AAQV,iCAA2B;AARjB,KAAZ;AAUAF,aAASD,WAAWa,IAAX,EAAT;AACAZ,WAAOa,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,SAAf,CAAX,CAA1B;AACAF,WAAOiB,yBAAP,GAAmCH,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,SAAf,CAAX,CAAnC;AACAD,oCAAgCH,YAAY,+BAAZ,EAC5B,EAAEE,QAAQA,MAAV,EAAkBkB,gBAAgBzB,kBAAlC,EAD4B,CAAhC;AAEAQ,kCAA8BN,MAA9B,GAAuC,QAAvC;AACD,GAnBU,CAAX;;AAqBAwB,KAAG,wDAAH,EAA6D,YAAM;AACjElB,kCAA8BgB,yBAA9B,CAAwDG,mBAAxD,GAA8E,CAC5E,EAAEzB,QAAQ,OAAV,EAAmBC,aAAa,YAAhC,EAA8CyB,MAAM,UAApD,EAD4E,EAE5E,EAAE1B,QAAQ,OAAV,EAAmBC,aAAa,YAAhC,EAA8CyB,MAAM,UAApD,EAF4E,CAA9E;AAIA,QAAMC,mCACFC,MAAMtB,6BAAN,EAAqC,+BAArC,CADJ;AAEA,QAAMuB,wCACFD,MAAM9B,kBAAN,EAA0B,oCAA1B,EAAgEgC,GAAhE,CAAoEC,WAApE,CACE,EAAE/B,QAAQ,OAAV,EAAmBC,aAAa,YAAhC,EAA8CyB,MAAM,YAApD,EADF,CADJ;AAIA,QAAMM,0BACF1B,8BAA8BgB,yBAA9B,CAAwDG,mBAAxD,CAA4E,CAA5E,CADJ;AAEA,QAAMQ,2BACJ3B,8BAA8BgB,yBAA9B,CAAwDG,mBAAxD,CAA4E,CAA5E,CADF;AAEAO,4BAAwBN,IAAxB,GAA+B,YAA/B;AACApB,kCAA8B4B,sCAA9B,CAAqEF,uBAArE;AACAG,WAAOH,wBAAwBN,IAA/B,EAAqCU,OAArC,CAA6C,YAA7C;AACAD,WAAOF,yBAAyBP,IAAhC,EAAsCU,OAAtC,CAA8C,YAA9C;AACD,GAnBD;AAoBD,CAnDD","file":"discussionAuthoringController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'authoringTool/main';\nimport 'angular-mocks';\n\nconst mockProjectService = {\n  getComponentByNodeIdAndComponentId: function(nodeId, componentId) {\n    return { nodeId: nodeId, componentId: componentId };\n  }\n};\n\ndescribe('DiscussionAuthoringController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let discussionAuthoringController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '1sc05cn75f',\n      'type': 'Discussion',\n      'prompt': 'What is your favorite ice cream flavor?',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'isStudentAttachmentEnabled': true,\n      'gateClassmateResponses': true,\n      'showAddToNotebookButton': true\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    $scope.authoringComponentContent = JSON.parse(JSON.stringify(component));\n    discussionAuthoringController = $controller('DiscussionAuthoringController',\n        { $scope: $scope, ProjectService: mockProjectService });\n    discussionAuthoringController.nodeId = 'node10';\n  }));\n\n  it('should change all discussion connected component types', () => {\n    discussionAuthoringController.authoringComponentContent.connectedComponents = [\n      { nodeId: 'node1', componentId: '1111111111', type: 'showWork'},\n      { nodeId: 'node2', componentId: '2222222222', type: 'showWork'}\n    ];\n    const authoringViewComponentChangedSpy =\n        spyOn(discussionAuthoringController, 'authoringViewComponentChanged');\n    const getComponentByNodeIdAndComponentIdSpy =\n        spyOn(mockProjectService, 'getComponentByNodeIdAndComponentId').and.returnValue(\n          { nodeId: 'node1', componentId: '1111111111', type: 'Discussion' }\n        );\n    const firstConnectedComponent =\n        discussionAuthoringController.authoringComponentContent.connectedComponents[0];\n    const secondConnectedComponent =\n      discussionAuthoringController.authoringComponentContent.connectedComponents[1];\n    firstConnectedComponent.type = 'importWork';\n    discussionAuthoringController.authoringConnectedComponentTypeChanged(firstConnectedComponent);\n    expect(firstConnectedComponent.type).toEqual('importWork');\n    expect(secondConnectedComponent.type).toEqual('importWork');\n  });\n});\n"]}