{"version":3,"sources":["discussionController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","discussionController","component","createComponentState","componentStateId","nodeId","componentId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","it","classResponses","level1Responses","getLevel1Responses","expect","length","toEqual","componentId1","gradingComponentIds1","getGradingComponentIds","componentId2","connectedComponents","gradingComponentIds2","componentId3","gradingComponentIds3","componentState1","serverSaveTime","componentState2","componentState3","componentStates","sortedComponentStates","sort","sortByServerSaveTime","workgroupId1","workgroupId2","workgroupId","replies","threadHasPostFromThisComponentAndWorkgroupId"],"mappings":"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","file":"discussionController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('DiscussionController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let discussionController;\n  let component;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo,\n        response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '1sc05cn75f',\n      'type': 'Discussion',\n      'prompt': 'What is your favorite ice cream flavor?',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'isStudentAttachmentEnabled': true,\n      'gateClassmateResponses': true,\n      'showAddToNotebookButton': true\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    discussionController = $controller('DiscussionController', { $scope: $scope });\n    discussionController.nodeId = 'node1';\n  }));\n\n  it('should get the level 1 responses', () => {\n    const nodeId = 'node1';\n    const componentId = 'component1';\n    discussionController.classResponses = [\n      createComponentState(1, nodeId, componentId, null, 'Alice Thread'),\n      createComponentState(2, nodeId, componentId, 1, 'Alice reply in Alice Thread'),\n      createComponentState(3, nodeId, componentId, null, 'Bob Thread'),\n      createComponentState(4, nodeId, componentId, 3, 'Alice reply in Bob Thread')\n    ];\n    const level1Responses = discussionController.getLevel1Responses();\n    expect(level1Responses.length).toEqual(2);\n  });\n\n  it('should get grading component ids', () => {\n    const componentId1 = 'component1';\n    discussionController.componentId = componentId1;\n    discussionController.componentContent = {\n      id: componentId1\n    };\n    const gradingComponentIds1 = discussionController.getGradingComponentIds();\n    expect(gradingComponentIds1.length).toEqual(1);\n    const componentId2 = 'component2';\n    discussionController.componentContent = {\n      id: componentId2,\n      connectedComponents: [\n        {\n          nodeId: 'node1', componentId: 'component1'\n        }\n      ]\n    };\n    const gradingComponentIds2 = discussionController.getGradingComponentIds();\n    expect(gradingComponentIds2.length).toEqual(2);\n    const componentId3 = 'component2';\n    discussionController.componentContent = {\n      id: componentId3,\n      connectedComponents: [\n        {\n          nodeId: 'node1', componentId: 'component1'\n        },\n        {\n          nodeId: 'node2', componentId: 'component2'\n        }\n      ]\n    };\n    const gradingComponentIds3 = discussionController.getGradingComponentIds();\n    expect(gradingComponentIds3.length).toEqual(3);\n  });\n\n  it('should sort component states by server save time', () => {\n    const componentState1 = {\n      id: 1,\n      serverSaveTime: 1\n    };\n    const componentState2 = {\n      id: 2,\n      serverSaveTime: 2\n    };\n    const componentState3 = {\n      id: 3,\n      serverSaveTime: 3\n    };\n    const componentStates = [componentState1, componentState3, componentState2];\n    const sortedComponentStates = componentStates.sort(discussionController.sortByServerSaveTime);\n    expect(sortedComponentStates[0]).toEqual(componentState1);\n    expect(sortedComponentStates[1]).toEqual(componentState2);\n    expect(sortedComponentStates[2]).toEqual(componentState3);\n  });\n\n  it('should check if a thread has a post from this component and workgroup id', () => {\n    const componentId1 = 'component1';\n    const componentId2 = 'component2';\n    const workgroupId1 = 1;\n    const workgroupId2 = 2;\n    const componentState1 = {\n      id: 1,\n      componentId: componentId1,\n      workgroupId: workgroupId1,\n      replies: []\n    };\n    const componentState2 = {\n      id: 2,\n      componentId: componentId2,\n      workgroupId: workgroupId2,\n      replies: [\n        {\n          id: 3,\n          componentId: componentId2,\n          workgroupId: workgroupId1\n        }\n      ]\n    };\n    discussionController.componentId = componentId1;\n    discussionController.workgroupId = workgroupId2;\n    expect(discussionController.threadHasPostFromThisComponentAndWorkgroupId()(componentState1))\n        .toEqual(false);\n    discussionController.workgroupId = workgroupId1;\n    expect(discussionController.threadHasPostFromThisComponentAndWorkgroupId()(componentState1))\n        .toEqual(true);\n    discussionController.componentId = componentId2;\n    discussionController.workgroupId = workgroupId2;\n    expect(discussionController.threadHasPostFromThisComponentAndWorkgroupId()(componentState2))\n        .toEqual(true);\n    discussionController.workgroupId = workgroupId1;\n    expect(discussionController.threadHasPostFromThisComponentAndWorkgroupId()(componentState2))\n        .toEqual(true);\n  });\n\n});\n"]}