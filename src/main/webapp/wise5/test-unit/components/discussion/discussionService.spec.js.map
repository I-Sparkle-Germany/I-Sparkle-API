{"version":3,"sources":["discussionService.spec.es6"],"names":["MockTeacherDataService","workgroupId","componentId","componentIds","describe","DiscussionService","TeacherDataService","createComponentState","componentStateId","nodeId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_DiscussionService_","it","componentState","attachments","componentContent","starterSentence","hasStudentWork","componentStateHasStudentWork","expect","toEqual","componentState2","hasStudentWork2","spyOn","and","callFake","componentStates","postAndAllReplies","getPostAndAllRepliesByComponentIds","length","alicePost1","alicePost2","bobPost1","alicePost3","getPostsAssociatedWithComponentIdsAndWorkgroupId"],"mappings":"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","file":"discussionService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\nclass MockTeacherDataService {\n  constructor() {\n\n  }\n  getComponentStatesByWorkgroupIdAndComponentIds(workgroupId, componentId) {\n    return [];\n  }\n  getComponentStatesByComponentIds(componentIds) {\n    return [];\n  }\n}\n\ndescribe('DiscussionService', () => {\n\n  let DiscussionService;\n  let TeacherDataService;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo, response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_DiscussionService_) => {\n    DiscussionService = _DiscussionService_;\n    TeacherDataService = new MockTeacherDataService();\n  }));\n\n  it('should check that a component state has student work when student only attached a file', () => {\n    const componentState = {\n      studentData: {\n        attachments: ['somefile.png']\n      }\n    };\n    const componentContent = {\n      starterSentence: 'starter sentence'\n    };\n    const hasStudentWork = DiscussionService.componentStateHasStudentWork(componentState, componentContent);\n    expect(hasStudentWork).toEqual(true);\n  });\n\n  it('should check that a component state does not have student work', () => {\n    const componentState = {\n      studentData: {\n        response: ''\n      }\n    };\n    const componentContent = {\n      starterSentence: 'starter sentence'\n    };\n    const hasStudentWork = DiscussionService.componentStateHasStudentWork(componentState, componentContent);\n    expect(hasStudentWork).toEqual(false);\n    const componentState2 = {\n      studentData: {\n        response: 'starter sentence'\n      }\n    };\n    const hasStudentWork2 = DiscussionService.componentStateHasStudentWork(componentState2, componentContent);\n    expect(hasStudentWork2).toEqual(false);\n  });\n\n  it('should check that a component state has student work', () => {\n    const componentState = {\n      studentData: {\n        response: 'The sun generates heat.'\n      }\n    };\n    const componentContent = {\n      starterSentence: 'starter sentence'\n    };\n    const hasStudentWork = DiscussionService.componentStateHasStudentWork(componentState, componentContent);\n    expect(hasStudentWork).toEqual(true);\n  });\n\n  it('should get post and all replies with component id and component state id', () => {\n    const nodeId = 'node1';\n    const componentId = 'component1';\n    const componentStateId = 1;\n    DiscussionService.TeacherDataService = TeacherDataService;\n    spyOn(DiscussionService.TeacherDataService, 'getComponentStatesByComponentIds')\n        .and.callFake(() => {\n      const componentStates = [\n        createComponentState(1, nodeId, componentId, null, 'Hello'),\n        createComponentState(2, nodeId, componentId, 1, 'World'),\n        createComponentState(3, nodeId, componentId, null, 'OK')\n      ];\n      return componentStates;\n    });\n    const postAndAllReplies =\n        DiscussionService.getPostAndAllRepliesByComponentIds([componentId], componentStateId);\n    expect(postAndAllReplies.length).toEqual(2);\n  });\n\n  it('should get posts associated with component ids and workgroup id', () => {\n    const nodeId = 'node1';\n    const componentId = 'component1';\n    const workgroupId = 1;\n    const alicePost1 = createComponentState(1, nodeId, componentId, null, 'Alice Thread');\n    const alicePost2 = createComponentState(2, nodeId, componentId, 1, 'Alice reply in Alice Thread');\n    const bobPost1 = createComponentState(3, nodeId, componentId, null, 'Bob Thread');\n    const alicePost3 = createComponentState(4, nodeId, componentId, 3, 'Alice reply in Bob Thread');\n    DiscussionService.TeacherDataService = TeacherDataService;\n    spyOn(DiscussionService.TeacherDataService, 'getComponentStatesByWorkgroupIdAndComponentIds')\n        .and.callFake(() => {\n      const componentStates = [\n        alicePost1,\n        alicePost2,\n        alicePost3\n      ];\n      return componentStates;\n    });\n    spyOn(DiscussionService.TeacherDataService, 'getComponentStatesByComponentIds')\n        .and.callFake(() => {\n      const componentStates = [\n        alicePost1,\n        alicePost2,\n        bobPost1,\n        alicePost3\n      ];\n      return componentStates;\n    });\n    const postAndAllReplies = DiscussionService.getPostsAssociatedWithComponentIdsAndWorkgroupId([componentId], workgroupId);\n    expect(postAndAllReplies.length).toEqual(4);\n  });\n\n});\n"]}