{"version":3,"sources":["embeddedAuthoringController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","embeddedAuthoringController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","authoringComponentContent","nodeId","it","componentId","expect","url","toEqual","spyOn","and","callFake","event","args","target","assetItem","fileName","assetSelected","height","width","setWidthAndHeight"],"mappings":"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","sourcesContent":["import angular from 'angular';\nimport mainModule from 'authoringTool/main';\nimport 'angular-mocks';\n\ndescribe('EmbeddedAuthoringController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let embeddedAuthoringController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '86fel4wjm4',\n      'type': 'Embedded',\n      'prompt': '',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'url': 'glucose.html',\n      'showAddToNotebookButton': true,\n      'width': null\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    $scope.authoringComponentContent = JSON.parse(JSON.stringify(component));\n    embeddedAuthoringController = $controller('EmbeddedAuthoringController', { $scope: $scope });\n    embeddedAuthoringController.nodeId = 'node1';\n  }));\n\n  it('should select the model file', () => {\n    embeddedAuthoringController.nodeId = 'node1';\n    embeddedAuthoringController.componentId = 'component1';\n    expect(embeddedAuthoringController.authoringComponentContent.url).toEqual('glucose.html');\n    spyOn(embeddedAuthoringController, 'authoringViewComponentChanged').and.callFake(() => {});\n    const event = {};\n    const args = {\n      nodeId: 'node1',\n      componentId: 'component1',\n      target: 'modelFile',\n      assetItem: {\n        fileName: 'thermo.html'\n      }\n    };\n    embeddedAuthoringController.assetSelected(event, args);\n    expect(embeddedAuthoringController.authoringComponentContent.url).toEqual('thermo.html');\n  });\n\n  it('should have a default height', () => {\n    expect(embeddedAuthoringController.height).toEqual('600px');\n  });\n\n  it('should set the width and height', () => {\n    expect(embeddedAuthoringController.width).toEqual('none');\n    expect(embeddedAuthoringController.height).toEqual('600px');\n    embeddedAuthoringController.setWidthAndHeight(400, 300);\n    expect(embeddedAuthoringController.width).toEqual('400px');\n    expect(embeddedAuthoringController.height).toEqual('300px');\n  });\n\n});\n"],"file":"embeddedAuthoringController.spec.js"}