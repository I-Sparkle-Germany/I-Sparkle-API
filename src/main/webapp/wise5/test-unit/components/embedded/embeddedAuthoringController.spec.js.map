{"version":3,"sources":["embeddedAuthoringController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","embeddedAuthoringController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","authoringComponentContent","nodeId","it","componentId","expect","url","toEqual","spyOn","and","callFake","event","args","target","assetItem","fileName","assetSelected"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,6BAAT,EAAwC,YAAM;;AAE5C,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,oCAAJ;AACA,MAAIC,kBAAJ;;AAEAC,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAAiC;AACjDb,kBAAcY,aAAd;AACAX,iBAAaY,YAAb;AACAT,gBAAY;AACV,YAAM,YADI;AAEV,cAAQ,UAFE;AAGV,gBAAU,EAHA;AAIV,wBAAkB,KAJR;AAKV,0BAAoB,KALV;AAMV,aAAO,cANG;AAOV,iCAA2B,IAPjB;AAQV,eAAS;AARC,KAAZ;AAUAF,aAASD,WAAWa,IAAX,EAAT;AACAZ,WAAOa,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,SAAf,CAAX,CAA1B;AACAF,WAAOiB,yBAAP,GAAmCH,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAed,SAAf,CAAX,CAAnC;AACAD,kCAA8BH,YAAY,6BAAZ,EAA2C,EAAEE,QAAQA,MAAV,EAA3C,CAA9B;AACAC,gCAA4BiB,MAA5B,GAAqC,OAArC;AACD,GAlBU,CAAX;;AAoBAC,KAAG,8BAAH,EAAmC,YAAM;AACvClB,gCAA4BiB,MAA5B,GAAqC,OAArC;AACAjB,gCAA4BmB,WAA5B,GAA0C,YAA1C;AACAC,WAAOpB,4BAA4BgB,yBAA5B,CAAsDK,GAA7D,EAAkEC,OAAlE,CAA0E,cAA1E;AACAC,UAAMvB,2BAAN,EAAmC,+BAAnC,EAAoEwB,GAApE,CAAwEC,QAAxE,CAAiF,YAAM,CAAE,CAAzF;AACA,QAAMC,QAAQ,EAAd;AACA,QAAMC,OAAO;AACXV,cAAQ,OADG;AAEXE,mBAAa,YAFF;AAGXS,cAAQ,WAHG;AAIXC,iBAAW;AACTC,kBAAU;AADD;AAJA,KAAb;AAQA9B,gCAA4B+B,aAA5B,CAA0CL,KAA1C,EAAiDC,IAAjD;AACAP,WAAOpB,4BAA4BgB,yBAA5B,CAAsDK,GAA7D,EAAkEC,OAAlE,CAA0E,aAA1E;AACD,GAhBD;AAkBD,CAhDD","file":"embeddedAuthoringController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'authoringTool/main';\nimport 'angular-mocks';\n\ndescribe('EmbeddedAuthoringController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let embeddedAuthoringController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    component = {\n      'id': '86fel4wjm4',\n      'type': 'Embedded',\n      'prompt': '',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'url': 'glucose.html',\n      'showAddToNotebookButton': true,\n      'width': null\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    $scope.authoringComponentContent = JSON.parse(JSON.stringify(component));\n    embeddedAuthoringController = $controller('EmbeddedAuthoringController', { $scope: $scope });\n    embeddedAuthoringController.nodeId = 'node1';\n  }));\n\n  it('should select the model file', () => {\n    embeddedAuthoringController.nodeId = 'node1';\n    embeddedAuthoringController.componentId = 'component1';\n    expect(embeddedAuthoringController.authoringComponentContent.url).toEqual('glucose.html');\n    spyOn(embeddedAuthoringController, 'authoringViewComponentChanged').and.callFake(() => {});\n    const event = {};\n    const args = {\n      nodeId: 'node1',\n      componentId: 'component1',\n      target: 'modelFile',\n      assetItem: {\n        fileName: 'thermo.html'\n      }\n    };\n    embeddedAuthoringController.assetSelected(event, args);\n    expect(embeddedAuthoringController.authoringComponentContent.url).toEqual('thermo.html');\n  });\n\n});\n"]}