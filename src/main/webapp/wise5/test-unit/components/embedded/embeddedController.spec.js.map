{"version":3,"sources":["embeddedController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","$httpBackend","embeddedController","component","createComponentState","componentStateId","nodeId","componentId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","_$httpBackend_","$new","componentContent","JSON","parse","stringify","it","toComponentState","componentType","modelScore","fromComponentState","mergedComponentState","mergeComponentState","expect","toEqual","modelText","mergeFields","when","action"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,oBAAT,EAA+B,YAAM;;AAEnC,MAAIC,oBAAJ;AACA,MAAIC,mBAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,qBAAJ;AACA,MAAIC,2BAAJ;AACA,MAAIC,kBAAJ;AACA,MAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,0BAAxC,EAAoEC,QAApE,EAAiF;AAC5G,WAAO;AACLC,UAAIL,gBADC;AAELC,cAAQA,MAFH;AAGLC,mBAAaA,WAHR;AAILI,mBAAa;AACXF,kBAAUA,QADC;AAEXD,oCAA4BA;AAFjB;AAJR,KAAP;AASD,GAVD;;AAYAI,aAAWC,kBAAQC,IAAR,CAAaC,MAAb,CAAoBC,eAAWC,IAA/B,CAAX;;AAEAL,aAAWM,OAAO,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,cAA9B,EAAiD;AACjEvB,kBAAcqB,aAAd;AACApB,iBAAaqB,YAAb;AACAnB,mBAAeoB,cAAf;AACAlB,gBAAY;AACV,YAAM,YADI;AAEV,cAAQ,UAFE;AAGV,gBAAU,gCAHA;AAIV,wBAAkB,KAJR;AAKV,0BAAoB,KALV;AAMV,oCAA8B,IANpB;AAOV,gCAA0B,IAPhB;AAQV,iCAA2B;AARjB,KAAZ;AAUAH,aAASD,WAAWuB,IAAX,EAAT;AACAtB,WAAOuB,gBAAP,GAA0BC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAevB,SAAf,CAAX,CAA1B;AACAD,yBAAqBJ,YAAY,oBAAZ,EAAkC,EAAEE,QAAQA,MAAV,EAAlC,CAArB;AACAE,uBAAmBI,MAAnB,GAA4B,OAA5B;AACD,GAlBU,CAAX;;AAoBAqB,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMC,mBAAmB;AACvBC,qBAAe,UADQ;AAEvBlB,mBAAa;AACXmB,oBAAY;AADD;AAFU,KAAzB;AAMA,QAAMC,qBAAqB;AACzBF,qBAAe,UADU;AAEzBlB,mBAAa;AACXmB,oBAAY;AADD;AAFY,KAA3B;AAMA,QAAME,uBACJ9B,mBAAmB+B,mBAAnB,CAAuCL,gBAAvC,EAAyDG,kBAAzD,CADF;AAEAG,WAAOF,qBAAqBrB,WAArB,CAAiCmB,UAAxC,EAAoDK,OAApD,CAA4D,CAA5D;AACD,GAhBD;;AAkBAR,KAAG,oDAAH,EAAyD,YAAM;AAC7D,QAAMC,mBAAmB;AACvBC,qBAAe,UADQ;AAEvBlB,mBAAa;AACXmB,oBAAY,CADD;AAEXM,mBAAW;AAFA;AAFU,KAAzB;AAOA,QAAML,qBAAqB;AACzBF,qBAAe,UADU;AAEzBlB,mBAAa;AACXmB,oBAAY,CADD;AAEXM,mBAAW;AAFA;AAFY,KAA3B;AAOA,QAAMC,cAAc,CAClB;AACEpB,YAAM,WADR;AAEEqB,YAAM,QAFR;AAGEC,cAAQ;AAHV,KADkB,CAApB;AAOA,QAAMP,uBACJ9B,mBAAmB+B,mBAAnB,CAAuCL,gBAAvC,EAAyDG,kBAAzD,EAA6EM,WAA7E,CADF;AAEAH,WAAOF,qBAAqBrB,WAArB,CAAiCmB,UAAxC,EAAoDK,OAApD,CAA4D,CAA5D;AACAD,WAAOF,qBAAqBrB,WAArB,CAAiCyB,SAAxC,EAAmDD,OAAnD,CAA2D,UAA3D;AACD,GA1BD;AA4BD,CAxFD","file":"embeddedController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('EmbeddedController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let $httpBackend;\n  let embeddedController;\n  let component;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo, response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_, _$httpBackend_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n    component = {\n      'id': '1sc05cn75f',\n      'type': 'Embedded',\n      'prompt': 'Use the model and learn stuff.',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'isStudentAttachmentEnabled': true,\n      'gateClassmateResponses': true,\n      'showAddToNotebookButton': true\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    embeddedController = $controller('EmbeddedController', { $scope: $scope });\n    embeddedController.nodeId = 'node1';\n  }));\n\n  it('should merge a component state', () => {\n    const toComponentState = {\n      componentType: 'Embedded',\n      studentData: {\n        modelScore: 1\n      }\n    };\n    const fromComponentState = {\n      componentType: 'Embedded',\n      studentData: {\n        modelScore: 2\n      }\n    };\n    const mergedComponentState =\n      embeddedController.mergeComponentState(toComponentState, fromComponentState);\n    expect(mergedComponentState.studentData.modelScore).toEqual(2);\n  });\n\n  it('should merge a specific field in a component state', () => {\n    const toComponentState = {\n      componentType: 'Embedded',\n      studentData: {\n        modelScore: 1,\n        modelText: 'Try Again'\n      }\n    };\n    const fromComponentState = {\n      componentType: 'Embedded',\n      studentData: {\n        modelScore: 2,\n        modelText: 'Good Job'\n      }\n    };\n    const mergeFields = [\n      {\n        name: 'modelText',\n        when: 'always',\n        action: 'write'\n      }\n    ];\n    const mergedComponentState =\n      embeddedController.mergeComponentState(toComponentState, fromComponentState, mergeFields);\n    expect(mergedComponentState.studentData.modelScore).toEqual(1);\n    expect(mergedComponentState.studentData.modelText).toEqual('Good Job');\n  });\n\n});\n"]}