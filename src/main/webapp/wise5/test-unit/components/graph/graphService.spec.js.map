{"version":3,"sources":["graphService.spec.es6"],"names":["describe","beforeEach","angular","mock","module","mainModule","name","GraphService","inject","_GraphService_","it","studentData","expect","hasSeriesData","toBeFalsy","series","data","toBeTruthy","studentDataWithTrial","trials","hasTrialData","trial","componentState","componentContent","componentStateHasStudentWork","xAxis","min","max","yAxis","isStudentChangedAxisLimit"],"mappings":"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","file":"graphService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('GraphService', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let GraphService;\n\n  beforeEach(inject((_GraphService_) => {\n    GraphService = _GraphService_;\n  }));\n\n  describe('hasSeriesData()', () => {\n    it('should return false when series is null', () => {\n      const studentData = {};\n      expect(GraphService.hasSeriesData(studentData)).toBeFalsy();\n    });\n\n    it('should return false when series data is empty', () => {\n      const studentData = {\n        series: [{}]\n      };\n      expect(GraphService.hasSeriesData(studentData)).toBeFalsy();\n    });\n\n    it('should return true when series has data', () => {\n      const studentData = {\n        series: [\n          {\n            data: [ [0, 10] ]\n          }\n        ]\n      };\n      expect(GraphService.hasSeriesData(studentData)).toBeTruthy();\n    });\n  });\n\n  describe('hasTrialData()', () => {\n    let studentDataWithTrial = {};\n    beforeEach(() => {\n      studentDataWithTrial = {\n        trials: [\n          {\n            series: [\n              {\n                data: [ [1,5], [2,10] ]\n              }\n            ]\n          }\n        ]\n      };\n    });\n\n    it('should return false when trials is null', () => {\n      studentDataWithTrial.trials = null;\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeFalsy();\n    });\n\n    it('should return false when there is no series in any trial', () => {\n      for (let trial of studentDataWithTrial.trials) {\n        trial.series = [];\n      }\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeFalsy();\n    });\n\n    it('should return true when there is a series in a trial with data', () => {\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeTruthy();\n    });\n  });\n\n  describe('componentStateHasStudentWork()', () => {\n    it('should return false when the component state does not have student work', () => {\n      const componentState = {\n        studentData: {\n          trials: [\n            {\n              series: [\n                {\n                  data: []\n                }\n              ]\n            }\n          ]\n        }\n      };\n      const componentContent = {};\n      expect(GraphService.componentStateHasStudentWork(componentState, componentContent)).toBeFalsy();\n    });\n\n    it('should return true when the component state has student work', () => {\n      const componentState = {\n        studentData: {\n          trials: [\n            {\n              series: [\n                {\n                  data: [ [0, 10] ]\n                }\n              ]\n            }\n          ]\n        }\n      };\n      const componentContent = {};\n      expect(GraphService.componentStateHasStudentWork(componentState, componentContent)).toBeTruthy();\n    });\n  });\n\n  describe('isStudentChangedAxisLimit()', () => {\n    it('should return false when the student has not changed the axis limit', () => {\n      const componentState = {\n        studentData: {\n          xAxis: { min: 0, max: 10 },\n          yAxis: { min: 0, max: 10 }\n        }\n      };\n      const componentContent = {\n        xAxis: { min: 0, max: 10 },\n        yAxis: { min: 0, max: 10 }\n      };\n      expect(GraphService.isStudentChangedAxisLimit(componentState, componentContent)).toBeFalsy();\n    });\n\n    it('should return true when the student has changed the axis limit', () => {\n      const componentState = {\n        studentData: {\n          xAxis: { min: 0, max: 20 },\n          yAxis: { min: 0, max: 20 }\n        }\n      };\n      const componentContent = {\n        xAxis: { min: 0, max: 10 },\n        yAxis: { min: 0, max: 10 }\n      };\n      expect(GraphService.isStudentChangedAxisLimit(componentState, componentContent)).toBeTruthy();\n    });\n  });\n});\n"]}