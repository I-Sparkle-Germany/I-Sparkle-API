{"version":3,"sources":["graphService.spec.es6"],"names":["describe","beforeEach","mock","module","name","GraphService","inject","_GraphService_","studentDataWithTrial","trials","series","data","it","expect","hasTrialData","toBeFalsy","trial","toBeTruthy"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,cAAT,EAAyB,YAAM;;AAE7BC,aAAW,kBAAQC,IAAR,CAAaC,MAAb,CAAoB,eAAWC,IAA/B,CAAX;;AAEA,MAAIC,qBAAJ;;AAEAJ,aAAWK,OAAO,UAACC,cAAD,EAAoB;AACpCF,mBAAeE,cAAf;AACD,GAFU,CAAX;;AAIAP,WAAS,gBAAT,EAA2B,YAAM;AAC/B,QAAIQ,uBAAuB,EAA3B;AACAP,eAAW,YAAM;AACfO,6BAAuB;AACrBC,gBAAQ,CACN;AACEC,kBAAQ,CACN;AACEC,kBAAM,CAAE,CAAC,CAAD,EAAG,CAAH,CAAF,EAAS,CAAC,CAAD,EAAG,EAAH,CAAT;AADR,WADM;AADV,SADM;AADa,OAAvB;AAWD,KAZD;;AAcAC,OAAG,yCAAH,EAA8C,YAAM;AAClDJ,2BAAqBC,MAArB,GAA8B,IAA9B;AACAI,aAAOR,aAAaS,YAAb,CAA0BN,oBAA1B,CAAP,EAAwDO,SAAxD;AACD,KAHD;;AAKAH,OAAG,0DAAH,EAA+D,YAAM;AAAA;AAAA;AAAA;;AAAA;AACnE,6BAAkBJ,qBAAqBC,MAAvC,8HAA+C;AAAA,cAAtCO,KAAsC;;AAC7CA,gBAAMN,MAAN,GAAe,EAAf;AACD;AAHkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAInEG,aAAOR,aAAaS,YAAb,CAA0BN,oBAA1B,CAAP,EAAwDO,SAAxD;AACD,KALD;;AAOAH,OAAG,gEAAH,EAAqE,YAAM;AACzEC,aAAOR,aAAaS,YAAb,CAA0BN,oBAA1B,CAAP,EAAwDS,UAAxD;AACD,KAFD;AAGD,GA/BD;AAgCD,CA1CD","file":"graphService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('GraphService', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let GraphService;\n\n  beforeEach(inject((_GraphService_) => {\n    GraphService = _GraphService_;\n  }));\n\n  describe('hasTrialData()', () => {\n    let studentDataWithTrial = {};\n    beforeEach(() => {\n      studentDataWithTrial = {\n        trials: [\n          {\n            series: [\n              {\n                data: [ [1,5], [2,10] ]\n              }\n            ]\n          }\n        ]\n      };\n    });\n\n    it('should return false when trials is null', () => {\n      studentDataWithTrial.trials = null;\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeFalsy();\n    });\n\n    it('should return false when there is no series in any trial', () => {\n      for (let trial of studentDataWithTrial.trials) {\n        trial.series = [];\n      }\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeFalsy();\n    });\n\n    it('should return true when there is a series in a trial with data', () => {\n      expect(GraphService.hasTrialData(studentDataWithTrial)).toBeTruthy();\n    });\n  });\n});\n"]}