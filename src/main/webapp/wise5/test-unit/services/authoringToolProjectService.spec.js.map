{"version":3,"sources":["authoringToolProjectService.spec.es6"],"names":["describe","beforeEach","mock","module","name","demoProjectJSONOriginal","window","mocks","scootersProjectJSONOriginal","ConfigService","ProjectService","$rootScope","$httpBackend","demoProjectJSON","scootersProjectJSON","inject","_ConfigService_","_ProjectService_","_$rootScope_","_$httpBackend_","JSON","parse","stringify","scootersProjectJSONString","invalidProjectJSONString","projectIdDefault","projectBaseURL","projectURL","registerNewProjectURL","saveProjectURL","commitMessageDefault","defaultCommitHistory","wiseBaseURL","i18nURL_common_en","i18nURL_vle_en","sampleI18N_common_en","sampleI18N_vle_en","createNormalSpy","spyOn","and","callFake","param","it","returnValue","newProjectIdExpected","when","respond","newProjectIdActualPromise","registerNewProject","expectPOST","expect","getConfigParam","toHaveBeenCalledWith","toBeNull","toEqual","e","message","setProject","isNodeIdUsed"],"mappings":"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","file":"authoringToolProjectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'authoringTool/main';\nimport 'angular-mocks';\n\ndescribe('AuthoringToolProjectService Unit Test', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  const demoProjectJSONOriginal = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n  const scootersProjectJSONOriginal = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n\n  let ConfigService, ProjectService, $rootScope, $httpBackend,  demoProjectJSON, scootersProjectJSON;\n  beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n    ConfigService = _ConfigService_;\n    ProjectService = _ProjectService_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n    demoProjectJSON = JSON.parse(JSON.stringify(demoProjectJSONOriginal));\n    scootersProjectJSON = JSON.parse(JSON.stringify(scootersProjectJSONOriginal));\n  }));\n\n  describe('AuthoringToolProjectService', () => {\n    const scootersProjectJSONString = JSON.stringify(scootersProjectJSONOriginal);\n    const invalidProjectJSONString = \"{'a':1\";\n    const projectIdDefault = 1;\n    const projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n    const projectURL = projectBaseURL + \"project.json\";\n    const registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n    const saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n    const commitMessageDefault = \"Made simple changes\";\n    const defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n    const wiseBaseURL = \"/wise\";\n    const i18nURL_common_en = \"wise5/i18n/i18n_en.json\";\n    const i18nURL_vle_en = \"wise5/vle/i18n/i18n_en.json\";\n    const sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    const sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n    function createNormalSpy() {\n      spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n        if (param === \"projectBaseURL\") {\n          return projectBaseURL;\n        } else if (param === \"projectURL\") {\n          return projectURL;\n        } else if (param === \"registerNewProjectURL\") {\n          return registerNewProjectURL;\n        } else if (param === \"saveProjectURL\") {\n          return saveProjectURL;\n        } else if (param === \"wiseBaseURL\") {\n          return wiseBaseURL;\n        }\n      });\n    }\n\n    it('should register new project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n      const newProjectIdExpected = projectIdDefault;\n      $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      $httpBackend.expectPOST(registerNewProjectURL);\n    });\n\n    it('should not register new project when Config.registerNewProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not register new project when projectJSON is invalid JSON', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n      try {\n        const newProjectIdActualPromise = ProjectService.registerNewProject(invalidProjectJSONString, commitMessageDefault);\n        expect(1).toEqual(2);   // This line should not get called because the above line will throw an error\n      } catch (e) {\n        expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n        expect(e.message).toEqual(\"Invalid projectJSONString.\")\n      }\n    });\n\n    it('should find used node id in active nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"node1\")).toEqual(true);\n    });\n\n    it('should find used node id in inactive nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"node789\")).toEqual(true);\n    });\n\n    it('should not find used node id in active or inactive nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"nodedoesnotexist\")).toEqual(false);\n    });\n  });\n});\n"]}