{"version":3,"sources":["configService.spec.es6"],"names":["describe","beforeEach","angular","mock","module","mainModule","name","ConfigService","$httpBackend","inject","_ConfigService_","_$httpBackend_","configURL","sampleConfig1","sampleConfig2","window","mocks","sampleI18N_common_en","sampleI18N_vle_en","i18nURL_common_en","i18nURL_vle_en","xit","spyOn","and","callThrough","when","respond","expectGET","configPromise","retrieveConfig","flush","expect","setConfig","toHaveBeenCalled","sortClassmateUserInfosAlphabeticallyByName","it","config","userInfo","myUserInfo","myClassInfo","classmateUserInfos","periodId","workgroupId","userIds","periodName","username","toEqual","sortClassmateUserInfosAlphabeticallyByNameHelper","locale","getLocale","locale2","mode","getMode","isPreview","mode2","isPreview2","config1PeriodId","getPeriodId","config2PeriodId","config1Periods","getPeriods","config2Periods","nonExistingWorkgroupId","studentFirstNames","getStudentFirstNamesByWorkgroupId","length","existingWorkgroupId","studentFirstNamesExisting","teacherWorkgroupIdDoesNotExist","getTeacherWorkgroupId","toBeNull","expectedTeacherWorkgroupId","teacherWorkgroupIdExist","nullWorkgroupPeriodId","getPeriodIdByWorkgroupId","nonExistingWorkgroupPeriodId","getUserInfoByWorkgroupId","toHaveBeenCalledWith","existingWorkgroupPeriodId","jasmine","clock","install","configJSON","startTime","Date","getTime","timestampDiff","mockDate","calculateIsRunActive","toBeFalsy","toBeTruthy","uninstall","endTime"],"mappings":"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","file":"configService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ConfigService Unit Test', () => {\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let ConfigService, $httpBackend;\n  beforeEach(inject((_ConfigService_, _$httpBackend_) => {\n    ConfigService = _ConfigService_;\n    $httpBackend = _$httpBackend_;\n  }));\n\n  describe('ConfigService', () => {\n    const configURL = 'http://localhost:8080/wise/config/1';\n\n    // Load sample configs\n    let sampleConfig1;\n    const sampleConfig2 = window.mocks['test-unit/sampleData/config/config2'];\n\n    beforeEach(() => {\n      sampleConfig1 = window.mocks['test-unit/sampleData/config/config1'];\n    });\n\n    // i18n\n    const sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    const sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n    const i18nURL_common_en = 'wise5/i18n/common/i18n_en.json';\n    const i18nURL_vle_en = 'wise5/i18n/vle/i18n_en.json';\n\n    xit('should retrieve config', () => {\n      spyOn(ConfigService, 'setConfig').and.callThrough();\n      spyOn(ConfigService, 'sortClassmateUserInfosAlphabeticallyByName');\n      $httpBackend.when('GET', configURL).respond(sampleConfig1);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      $httpBackend.expectGET(configURL);\n      const configPromise = ConfigService.retrieveConfig(configURL);\n      $httpBackend.flush();\n      // TODO: when replacing this line below with expect(ConfigService.setConfig).toHaveBeenCalled(sampleConfig1);, it fails.\n      // it shouldn't fail, so find out why.\n      expect(ConfigService.setConfig).toHaveBeenCalled();\n      expect(ConfigService.sortClassmateUserInfosAlphabeticallyByName).toHaveBeenCalled();\n    });\n\n    it('should sort the classmates alphabetically by name when setting config', () => {\n      const config = {\n        userInfo: {\n          myUserInfo: {\n            myClassInfo: {\n              classmateUserInfos: [{\n                periodId: 1,\n                workgroupId: 3,\n                userIds: [6],\n                periodName: '1',\n                username: 't t (tt0101)'\n              }, {\n                periodId: 1,\n                workgroupId: 8,\n                userIds: [8],\n                periodName: '1',\n                username: 'k t (kt0101)'\n              }]\n            }\n          }\n        }\n      };\n      const classmateUserInfos = config.userInfo.myUserInfo.myClassInfo.classmateUserInfos;\n      expect(classmateUserInfos[0].workgroupId).toEqual(3);\n      expect(classmateUserInfos[1].workgroupId).toEqual(8);\n      spyOn(ConfigService, 'sortClassmateUserInfosAlphabeticallyByNameHelper').and.callThrough();\n      ConfigService.setConfig(config);\n      expect(ConfigService.sortClassmateUserInfosAlphabeticallyByNameHelper).toHaveBeenCalled();\n      expect(classmateUserInfos[0].workgroupId).toEqual(8);\n      expect(classmateUserInfos[1].workgroupId).toEqual(3);\n    });\n\n    // Test getLocale()\n    it('should get the locale', () => {\n      // Sample config 1 doesn't have locale set, so it should default to 'en'\n      ConfigService.setConfig(sampleConfig1);\n      const locale = ConfigService.getLocale();\n      expect(locale).toEqual('en');\n\n      // Sample config 2 should have 'ja' locale.\n      ConfigService.setConfig(sampleConfig2);\n      const locale2 = ConfigService.getLocale();\n      expect(locale2).toEqual('ja');\n    });\n\n    // Test getMode and isPreview()\n    it('should get the modes', () => {\n      ConfigService.setConfig(sampleConfig1);\n      const mode = ConfigService.getMode();\n      const isPreview = ConfigService.isPreview();\n      expect(mode).toEqual('run');\n      expect(isPreview).toEqual(false);\n\n      ConfigService.setConfig(sampleConfig2);\n      const mode2 = ConfigService.getMode();\n      const isPreview2 = ConfigService.isPreview();\n      expect(mode2).toEqual('preview');\n      expect(isPreview2).toEqual(true);\n    });\n\n    // Test getPeriodId()\n    it('should get the period id of the student', () => {\n      ConfigService.setConfig(sampleConfig1);\n      const config1PeriodId = ConfigService.getPeriodId();\n      expect(config1PeriodId).toEqual(1);\n\n      ConfigService.setConfig(sampleConfig2);\n      const config2PeriodId = ConfigService.getPeriodId();\n      expect(config2PeriodId).toEqual(2);\n    });\n\n    // Test getPeriods()\n    it('should get the periods in the run', () => {\n      ConfigService.setConfig(sampleConfig1);\n      const config1Periods = ConfigService.getPeriods();\n      expect(config1Periods).toEqual([{periodId:1,periodName:'1'},{periodId:2,periodName:'2'},{periodId:3,periodName:'newperiod'}]);\n\n      ConfigService.setConfig(sampleConfig2);\n      const config2Periods = ConfigService.getPeriods();\n      expect(config2Periods).toEqual([{periodId:1,periodName:'one'},{periodId:2,periodName:'two'}]);\n    });\n\n    // Test getStudentFirstNamesByWorkgroupId()\n    it('should get the username by workgroup id', () => {\n      // If specified workgroup doesn't exist, it should return empty array\n      const nonExistingWorkgroupId = 9999;\n      ConfigService.setConfig(sampleConfig1);\n      const studentFirstNames = ConfigService.getStudentFirstNamesByWorkgroupId(nonExistingWorkgroupId);\n      expect(studentFirstNames.length).toEqual(0);\n\n      // Otherwise it should get the first names from the config\n      const existingWorkgroupId = 8;\n      const studentFirstNamesExisting = ConfigService.getStudentFirstNamesByWorkgroupId(existingWorkgroupId);\n      expect(studentFirstNamesExisting).toEqual(['k']);\n    });\n\n    // Test getTeacherWorkgroupId()\n    it('should get the teacher workgroup id', () => {\n      // If teacher workgroup doesn't exist, it should return null\n      ConfigService.setConfig(sampleConfig2);\n      const teacherWorkgroupIdDoesNotExist = ConfigService.getTeacherWorkgroupId();\n      expect(teacherWorkgroupIdDoesNotExist).toBeNull();\n\n      // Otherwise it should get the teacher's workgroup id from the config\n      const expectedTeacherWorkgroupId = 1;\n      ConfigService.setConfig(sampleConfig1);\n      const teacherWorkgroupIdExist = ConfigService.getTeacherWorkgroupId();\n      expect(teacherWorkgroupIdExist).toEqual(expectedTeacherWorkgroupId);\n    });\n\n    // Test getPeriodIdByWorkgroupId()\n    it('should get the period id given the workgroup id', () => {\n\n      ConfigService.setConfig(sampleConfig1);\n      spyOn(ConfigService, 'getUserInfoByWorkgroupId').and.callThrough();\n\n      // If workgroupId is null, period should be null\n      const nullWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(null);\n      expect(nullWorkgroupPeriodId).toBeNull();\n\n      // If specified workgroup doesn't exist, it should null\n      const nonExistingWorkgroupId = 9999;\n      const nonExistingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(nonExistingWorkgroupId);\n      expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(nonExistingWorkgroupId);\n      expect(nonExistingWorkgroupPeriodId).toBeNull();\n\n      // Otherwise it should get workgroup's period id\n      const existingWorkgroupId = 8;\n      const existingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(existingWorkgroupId);\n      expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(existingWorkgroupId);\n      expect(existingWorkgroupPeriodId).toEqual(1);\n    });\n\n    it('should calculate if a run is active when a run only has a start time', () => {\n      jasmine.clock().install();\n      const configJSON = {\n        startTime: new Date(2019, 5, 10).getTime(),\n        timestampDiff: 0\n      };\n      jasmine.clock().mockDate(new Date(2019, 5, 9));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeFalsy();\n      jasmine.clock().mockDate(new Date(2019, 5, 10));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().mockDate(new Date(2019, 5, 11));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().uninstall();\n    });\n\n    it('should calculate if a run is active when it has a start time and end time', () => {\n      jasmine.clock().install();\n      const configJSON = {\n        startTime: new Date(2019, 5, 10).getTime(),\n        endTime: new Date(2019, 5, 20).getTime(),\n        timestampDiff: 0\n      };\n      jasmine.clock().mockDate(new Date(2019, 5, 9));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeFalsy();\n      jasmine.clock().mockDate(new Date(2019, 5, 10));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().mockDate(new Date(2019, 5, 11));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().mockDate(new Date(2019, 5, 19));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().mockDate(new Date(2019, 5, 20));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeTruthy();\n      jasmine.clock().mockDate(new Date(2019, 5, 21));\n      expect(ConfigService.calculateIsRunActive(configJSON)).toBeFalsy();\n      jasmine.clock().uninstall();\n    });\n  });\n});\n"]}