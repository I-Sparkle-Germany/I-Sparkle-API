{"version":3,"sources":["configService.spec.es6"],"names":["describe","beforeEach","mock","module","name","ConfigService","$httpBackend","inject","_ConfigService_","_$httpBackend_","configURL","sampleConfig1","window","mocks","sampleConfig2","sampleI18N_common_en","sampleI18N_vle_en","i18nURL_common_en","i18nURL_vle_en","xit","spyOn","and","callThrough","when","respond","expectGET","configPromise","retrieveConfig","flush","expect","setConfig","toHaveBeenCalled","sortClassmateUserInfosAlphabeticallyByName","it","classmateUserInfosBefore","userInfo","myUserInfo","myClassInfo","classmateUserInfos","workgroupId","toEqual","sortClassmateUserInfosAlphabeticallyByNameHelper","classmateUserInfosAfter","getClassmateUserInfos","locale","getLocale","locale2","mode","getMode","isPreview","mode2","isPreview2","config1PeriodId","getPeriodId","config2PeriodId","config1Periods","getPeriods","periodId","periodName","config2Periods","nonExistingWorkgroupId","studentFirstNames","getStudentFirstNamesByWorkgroupId","length","existingWorkgroupId","studentFirstNamesExisting","teacherWorkgroupIdDoesNotExist","getTeacherWorkgroupId","toBeNull","expectedTeacherWorkgroupId","teacherWorkgroupIdExist","nullWorkgroupPeriodId","getPeriodIdByWorkgroupId","nonExistingWorkgroupPeriodId","getUserInfoByWorkgroupId","toHaveBeenCalledWith","existingWorkgroupPeriodId"],"mappings":"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","file":"configService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ConfigService Unit Test', () => {\n\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, $httpBackend;\n\n    beforeEach(inject((_ConfigService_, _$httpBackend_) => {\n        ConfigService = _ConfigService_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ConfigService', () => {\n\n        var configURL = \"http://localhost:8080/wise/config/1\";\n\n        // Load sample configs\n        let sampleConfig1 = window.mocks['test-unit/sampleData/config/config1'];\n        let sampleConfig2 = window.mocks['test-unit/sampleData/config/config2'];\n\n        // i18n\n        let sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n        let sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n        var i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n        var i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n\n        xit('should retrieve config', () => {\n            spyOn(ConfigService, \"setConfig\").and.callThrough();\n            spyOn(ConfigService, \"sortClassmateUserInfosAlphabeticallyByName\");\n            $httpBackend.when('GET', configURL).respond(sampleConfig1);\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            $httpBackend.expectGET(configURL);\n            let configPromise = ConfigService.retrieveConfig(configURL);\n            $httpBackend.flush();\n            // TODO: when replacing this line below with expect(ConfigService.setConfig).toHaveBeenCalled(sampleConfig1);, it fails.\n            // it shouldn't fail, so find out why.\n            expect(ConfigService.setConfig).toHaveBeenCalled();\n            expect(ConfigService.sortClassmateUserInfosAlphabeticallyByName).toHaveBeenCalled();\n        });\n\n        it('should sort the classmates alphabetically by name when setting config', () => {\n            spyOn(ConfigService, \"sortClassmateUserInfosAlphabeticallyByNameHelper\").and.callThrough(); // actually call through the function\n            let classmateUserInfosBefore = sampleConfig1.userInfo.myUserInfo.myClassInfo.classmateUserInfos;\n            expect(classmateUserInfosBefore[0].workgroupId).toEqual(3);\n            expect(classmateUserInfosBefore[1].workgroupId).toEqual(8);\n            ConfigService.setConfig(sampleConfig1);  // setting the config should sort the classmates alphabetically by name\n            expect(ConfigService.sortClassmateUserInfosAlphabeticallyByNameHelper).toHaveBeenCalled();\n            let classmateUserInfosAfter = ConfigService.getClassmateUserInfos();\n            expect(classmateUserInfosAfter[0].workgroupId).toEqual(8);\n            expect(classmateUserInfosAfter[1].workgroupId).toEqual(3);\n        });\n\n        // Test getLocale()\n        it('should get the locale', () => {\n            // Sample config 1 doesn't have locale set, so it should default to \"en\"\n            ConfigService.setConfig(sampleConfig1);\n            let locale = ConfigService.getLocale();\n            expect(locale).toEqual(\"en\");\n\n            // Sample config 2 should have \"ja\" locale.\n            ConfigService.setConfig(sampleConfig2);\n            let locale2 = ConfigService.getLocale();\n            expect(locale2).toEqual(\"ja\");\n        });\n\n        // Test getMode and isPreview()\n        it('should get the modes', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let mode = ConfigService.getMode();\n            let isPreview = ConfigService.isPreview();\n            expect(mode).toEqual(\"run\");\n            expect(isPreview).toEqual(false);\n\n            ConfigService.setConfig(sampleConfig2);\n            let mode2 = ConfigService.getMode();\n            let isPreview2 = ConfigService.isPreview();\n            expect(mode2).toEqual(\"preview\");\n            expect(isPreview2).toEqual(true);\n        });\n\n        // Test getPeriodId()\n        it('should get the period id of the student', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let config1PeriodId = ConfigService.getPeriodId();\n            expect(config1PeriodId).toEqual(1);\n\n            ConfigService.setConfig(sampleConfig2);\n            let config2PeriodId = ConfigService.getPeriodId();\n            expect(config2PeriodId).toEqual(2);\n        });\n\n        // Test getPeriods()\n        it('should get the periods in the run', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let config1Periods = ConfigService.getPeriods();\n            expect(config1Periods).toEqual([{periodId:1,periodName:'1'},{periodId:2,periodName:'2'},{periodId:3,periodName:'newperiod'}]);\n\n            ConfigService.setConfig(sampleConfig2);\n            let config2Periods = ConfigService.getPeriods();\n            expect(config2Periods).toEqual([{periodId:1,periodName:'one'},{periodId:2,periodName:'two'}]);\n        });\n\n        // Test getStudentFirstNamesByWorkgroupId()\n        it('should get the username by workgroup id', () => {\n            // If specified workgroup doesn't exist, it should return empty array\n            let nonExistingWorkgroupId = 9999;\n            ConfigService.setConfig(sampleConfig1);\n            let studentFirstNames = ConfigService.getStudentFirstNamesByWorkgroupId(nonExistingWorkgroupId);\n            expect(studentFirstNames.length).toEqual(0);\n\n            // Otherwise it should get the first names from the config\n            let existingWorkgroupId = 8;\n            let studentFirstNamesExisting = ConfigService.getStudentFirstNamesByWorkgroupId(existingWorkgroupId);\n            expect(studentFirstNamesExisting).toEqual(['k']);\n        });\n\n        // Test getTeacherWorkgroupId()\n        it('should get the teacher workgroup id', () => {\n            // If teacher workgroup doesn't exist, it should return null\n            ConfigService.setConfig(sampleConfig2);\n            let teacherWorkgroupIdDoesNotExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdDoesNotExist).toBeNull();\n\n            // Otherwise it should get the teacher's workgroup id from the config\n            let expectedTeacherWorkgroupId = 1;\n            ConfigService.setConfig(sampleConfig1);\n            let teacherWorkgroupIdExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdExist).toEqual(expectedTeacherWorkgroupId);\n        });\n\n        // Test getPeriodIdByWorkgroupId()\n        it('should get the period id given the workgroup id', () => {\n\n            ConfigService.setConfig(sampleConfig1);\n            spyOn(ConfigService, \"getUserInfoByWorkgroupId\").and.callThrough(); // actually call through the function\n\n            // If workgroupId is null, period should be null\n            let nullWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(null);\n            expect(nullWorkgroupPeriodId).toBeNull();\n\n            // If specified workgroup doesn't exist, it should null\n            let nonExistingWorkgroupId = 9999;\n            let nonExistingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(nonExistingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(nonExistingWorkgroupId);\n            expect(nonExistingWorkgroupPeriodId).toBeNull();\n\n            // Otherwise it should get workgroup's period id\n            let existingWorkgroupId = 8;\n            let existingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(existingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(existingWorkgroupId);\n            expect(existingWorkgroupPeriodId).toEqual(1);\n        })\n\n    });\n});"]}