{"version":3,"sources":["configService.spec.es6"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,SAAS,yBAAT,EAAoC,YAAY;AAC5C,eAAW,kBAAQ,IAAR,CAAa,MAAb,CAAoB,eAAW,IAAX,CAA/B,EAD4C;;AAG5C,QAAI,aAAJ,EAAmB,YAAnB,CAH4C;;AAK5C,eAAW,OAAO,UAAS,eAAT,EAA0B,cAA1B,EAA0C;AACxD,wBAAgB,eAAhB,CADwD;AAExD,uBAAe,cAAf,CAFwD;KAA1C,CAAlB,EAL4C;;AAU5C,aAAS,eAAT,EAA0B,YAAY;;;AAGlC,YAAI,gBAAgB,OAAO,KAAP,CAAa,qCAAb,CAAhB,CAH8B;AAIlC,YAAI,gBAAgB,OAAO,KAAP,CAAa,qCAAb,CAAhB,CAJ8B;;AAMlC,WAAG,mDAAH,EAAwD,YAAY;AAChE,gBAAI,2BAA2B,cAAc,QAAd,CAAuB,UAAvB,CAAkC,WAAlC,CAA8C,kBAA9C,CADiC;AAEhE,mBAAO,yBAAyB,CAAzB,EAA4B,WAA5B,CAAP,CAAgD,OAAhD,CAAwD,CAAxD,EAFgE;AAGhE,mBAAO,yBAAyB,CAAzB,EAA4B,WAA5B,CAAP,CAAgD,OAAhD,CAAwD,CAAxD,EAHgE;AAIhE,0BAAc,SAAd,CAAwB,aAAxB;AAJgE,gBAK5D,0BAA0B,cAAc,qBAAd,EAA1B,CAL4D;AAMhE,mBAAO,wBAAwB,CAAxB,EAA2B,WAA3B,CAAP,CAA+C,OAA/C,CAAuD,CAAvD,EANgE;AAOhE,mBAAO,wBAAwB,CAAxB,EAA2B,WAA3B,CAAP,CAA+C,OAA/C,CAAuD,CAAvD,EAPgE;SAAZ,CAAxD;;;AANkC,UAiBlC,CAAG,sBAAH,EAA2B,YAAY;AACnC,0BAAc,SAAd,CAAwB,aAAxB,EADmC;AAEnC,gBAAI,OAAO,cAAc,OAAd,EAAP,CAF+B;AAGnC,gBAAI,YAAY,cAAc,SAAd,EAAZ,CAH+B;AAInC,mBAAO,IAAP,EAAa,OAAb,CAAqB,KAArB,EAJmC;AAKnC,mBAAO,SAAP,EAAkB,OAAlB,CAA0B,KAA1B,EALmC;;AAOnC,0BAAc,SAAd,CAAwB,aAAxB,EAPmC;AAQnC,gBAAI,QAAQ,cAAc,OAAd,EAAR,CAR+B;AASnC,gBAAI,aAAa,cAAc,SAAd,EAAb,CAT+B;AAUnC,mBAAO,KAAP,EAAc,OAAd,CAAsB,SAAtB,EAVmC;AAWnC,mBAAO,UAAP,EAAmB,OAAnB,CAA2B,IAA3B,EAXmC;SAAZ,CAA3B;;;AAjBkC,UAgClC,CAAG,yCAAH,EAA8C,YAAW;;AAErD,gBAAI,yBAAyB,IAAzB,CAFiD;AAGrD,0BAAc,SAAd,CAAwB,aAAxB,EAHqD;AAIrD,gBAAI,oBAAoB,cAAc,iCAAd,CAAgD,sBAAhD,CAApB,CAJiD;AAKrD,mBAAO,kBAAkB,MAAlB,CAAP,CAAiC,OAAjC,CAAyC,CAAzC;;;AALqD,gBAQjD,sBAAsB,CAAtB,CARiD;AASrD,gBAAI,4BAA4B,cAAc,iCAAd,CAAgD,mBAAhD,CAA5B,CATiD;AAUrD,mBAAO,yBAAP,EAAkC,OAAlC,CAA0C,CAAC,GAAD,CAA1C,EAVqD;SAAX,CAA9C;;;AAhCkC,UA8ClC,CAAG,qCAAH,EAA0C,YAAW;;AAEjD,0BAAc,SAAd,CAAwB,aAAxB,EAFiD;AAGjD,gBAAI,iCAAiC,cAAc,qBAAd,EAAjC,CAH6C;AAIjD,mBAAO,8BAAP,EAAuC,QAAvC;;;AAJiD,gBAO7C,6BAA6B,CAA7B,CAP6C;AAQjD,0BAAc,SAAd,CAAwB,aAAxB,EARiD;AASjD,gBAAI,0BAA0B,cAAc,qBAAd,EAA1B,CAT6C;AAUjD,mBAAO,uBAAP,EAAgC,OAAhC,CAAwC,0BAAxC,EAViD;SAAX,CAA1C;;;KA9CsB,CAA1B,CAV4C;AAUN,CAVN,CAApC","file":"configService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ConfigService Unit Test', function () {\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, $httpBackend;\n\n    beforeEach(inject(function(_ConfigService_, _$httpBackend_) {\n        ConfigService = _ConfigService_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ConfigService', function () {\n\n        // Load sample configs\n        let sampleConfig1 = window.mocks['test-unit/sampleData/config/config1'];\n        let sampleConfig2 = window.mocks['test-unit/sampleData/config/config2'];\n\n        it('should sort the classmates alphabetically by name', function () {\n            let classmateUserInfosBefore = sampleConfig1.userInfo.myUserInfo.myClassInfo.classmateUserInfos;\n            expect(classmateUserInfosBefore[0].workgroupId).toEqual(3);\n            expect(classmateUserInfosBefore[1].workgroupId).toEqual(8);\n            ConfigService.setConfig(sampleConfig1);  // setting the config should sort the classmates alphabetically by name\n            let classmateUserInfosAfter = ConfigService.getClassmateUserInfos();\n            expect(classmateUserInfosAfter[0].workgroupId).toEqual(8);\n            expect(classmateUserInfosAfter[1].workgroupId).toEqual(3);\n        });\n\n        // Test getMode and isPreview()\n        it('should get the modes', function () {\n            ConfigService.setConfig(sampleConfig1);\n            let mode = ConfigService.getMode();\n            let isPreview = ConfigService.isPreview();\n            expect(mode).toEqual(\"run\");\n            expect(isPreview).toEqual(false);\n\n            ConfigService.setConfig(sampleConfig2);\n            let mode2 = ConfigService.getMode();\n            let isPreview2 = ConfigService.isPreview();\n            expect(mode2).toEqual(\"preview\");\n            expect(isPreview2).toEqual(true);\n        });\n\n        // Test getStudentFirstNamesByWorkgroupId()\n        it('should get the username by workgroup id', function() {\n            // If specified workgroup doesn't exist, it should return empty array\n            let nonExistingWorkgroupId = 9999;\n            ConfigService.setConfig(sampleConfig1);\n            let studentFirstNames = ConfigService.getStudentFirstNamesByWorkgroupId(nonExistingWorkgroupId);\n            expect(studentFirstNames.length).toEqual(0);\n\n            // Otherwise it should get the first names from the config\n            let existingWorkgroupId = 8;\n            let studentFirstNamesExisting = ConfigService.getStudentFirstNamesByWorkgroupId(existingWorkgroupId);\n            expect(studentFirstNamesExisting).toEqual(['k']);\n        });\n\n        // Test getTeacherWorkgroupId()\n        it('should get the teacher workgroup id', function() {\n            // If teacher workgroup doesn't exist, it should return null\n            ConfigService.setConfig(sampleConfig2);\n            let teacherWorkgroupIdDoesNotExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdDoesNotExist).toBeNull();\n\n            // Otherwise it should get the teacher's workgroup id from the config\n            let expectedTeacherWorkgroupId = 1;\n            ConfigService.setConfig(sampleConfig1);\n            let teacherWorkgroupIdExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdExist).toEqual(expectedTeacherWorkgroupId);\n        });\n\n        // TODO: test getPeriodIdByWorkgroupId()\n\n    });\n});"]}