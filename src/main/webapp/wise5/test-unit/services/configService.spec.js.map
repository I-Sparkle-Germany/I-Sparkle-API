{"version":3,"sources":["configService.spec.es6"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA,SAAS,yBAAT,EAAoC,YAAM;;AAEtC,eAAW,kBAAQ,IAAR,CAAa,MAAb,CAAoB,eAAW,IAA/B,CAAX;;AAEA,QAAI,aAAJ,EAAmB,YAAnB;;AAEA,eAAW,OAAO,UAAC,eAAD,EAAkB,cAAlB,EAAqC;AACnD,wBAAgB,eAAhB;AACA,uBAAe,cAAf;AACH,KAHU,CAAX;;AAKA,aAAS,eAAT,EAA0B,YAAM;;AAE5B,YAAI,YAAY,qCAAhB;;AAEA;AACA,YAAI,gBAAgB,OAAO,KAAP,CAAa,qCAAb,CAApB;AACA,YAAI,gBAAgB,OAAO,KAAP,CAAa,qCAAb,CAApB;;AAEA;AACA,YAAI,uBAAuB,OAAO,KAAP,CAAa,0CAAb,CAA3B;AACA,YAAI,oBAAoB,OAAO,KAAP,CAAa,uCAAb,CAAxB;AACA,YAAI,oBAAoB,gCAAxB;AACA,YAAI,iBAAiB,6BAArB;;AAEA,YAAI,wBAAJ,EAA8B,YAAM;AAChC,kBAAM,aAAN,EAAqB,WAArB,EAAkC,GAAlC,CAAsC,WAAtC;AACA,kBAAM,aAAN,EAAqB,4CAArB;AACA,yBAAa,IAAb,CAAkB,KAAlB,EAAyB,SAAzB,EAAoC,OAApC,CAA4C,aAA5C;AACA,yBAAa,IAAb,CAAkB,KAAlB,EAAyB,iBAAzB,EAA4C,OAA5C,CAAoD,oBAApD;AACA,yBAAa,IAAb,CAAkB,KAAlB,EAAyB,cAAzB,EAAyC,OAAzC,CAAiD,iBAAjD;AACA,yBAAa,SAAb,CAAuB,SAAvB;AACA,gBAAI,gBAAgB,cAAc,cAAd,CAA6B,SAA7B,CAApB;AACA,yBAAa,KAAb;AACA;AACA;AACA,mBAAO,cAAc,SAArB,EAAgC,gBAAhC;AACA,mBAAO,cAAc,0CAArB,EAAiE,gBAAjE;AACH,SAbD;;AAeA,WAAG,uEAAH,EAA4E,YAAM;AAC9E,kBAAM,aAAN,EAAqB,kDAArB,EAAyE,GAAzE,CAA6E,WAA7E,GAD8E,CACc;AAC5F,gBAAI,2BAA2B,cAAc,QAAd,CAAuB,UAAvB,CAAkC,WAAlC,CAA8C,kBAA7E;AACA,mBAAO,yBAAyB,CAAzB,EAA4B,WAAnC,EAAgD,OAAhD,CAAwD,CAAxD;AACA,mBAAO,yBAAyB,CAAzB,EAA4B,WAAnC,EAAgD,OAAhD,CAAwD,CAAxD;AACA,0BAAc,SAAd,CAAwB,aAAxB,EAL8E,CAKrC;AACzC,mBAAO,cAAc,gDAArB,EAAuE,gBAAvE;AACA,gBAAI,0BAA0B,cAAc,qBAAd,EAA9B;AACA,mBAAO,wBAAwB,CAAxB,EAA2B,WAAlC,EAA+C,OAA/C,CAAuD,CAAvD;AACA,mBAAO,wBAAwB,CAAxB,EAA2B,WAAlC,EAA+C,OAA/C,CAAuD,CAAvD;AACH,SAVD;;AAYA;AACA,WAAG,uBAAH,EAA4B,YAAM;AAC9B;AACA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,SAAS,cAAc,SAAd,EAAb;AACA,mBAAO,MAAP,EAAe,OAAf,CAAuB,IAAvB;;AAEA;AACA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,UAAU,cAAc,SAAd,EAAd;AACA,mBAAO,OAAP,EAAgB,OAAhB,CAAwB,IAAxB;AACH,SAVD;;AAYA;AACA,WAAG,sBAAH,EAA2B,YAAM;AAC7B,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,OAAO,cAAc,OAAd,EAAX;AACA,gBAAI,YAAY,cAAc,SAAd,EAAhB;AACA,mBAAO,IAAP,EAAa,OAAb,CAAqB,KAArB;AACA,mBAAO,SAAP,EAAkB,OAAlB,CAA0B,KAA1B;;AAEA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,QAAQ,cAAc,OAAd,EAAZ;AACA,gBAAI,aAAa,cAAc,SAAd,EAAjB;AACA,mBAAO,KAAP,EAAc,OAAd,CAAsB,SAAtB;AACA,mBAAO,UAAP,EAAmB,OAAnB,CAA2B,IAA3B;AACH,SAZD;;AAcA;AACA,WAAG,yCAAH,EAA8C,YAAM;AAChD,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,kBAAkB,cAAc,WAAd,EAAtB;AACA,mBAAO,eAAP,EAAwB,OAAxB,CAAgC,CAAhC;;AAEA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,kBAAkB,cAAc,WAAd,EAAtB;AACA,mBAAO,eAAP,EAAwB,OAAxB,CAAgC,CAAhC;AACH,SARD;;AAUA;AACA,WAAG,mCAAH,EAAwC,YAAM;AAC1C,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,iBAAiB,cAAc,UAAd,EAArB;AACA,mBAAO,cAAP,EAAuB,OAAvB,CAA+B,CAAC,EAAC,UAAS,CAAV,EAAY,YAAW,GAAvB,EAAD,EAA6B,EAAC,UAAS,CAAV,EAAY,YAAW,GAAvB,EAA7B,EAAyD,EAAC,UAAS,CAAV,EAAY,YAAW,WAAvB,EAAzD,CAA/B;;AAEA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,iBAAiB,cAAc,UAAd,EAArB;AACA,mBAAO,cAAP,EAAuB,OAAvB,CAA+B,CAAC,EAAC,UAAS,CAAV,EAAY,YAAW,KAAvB,EAAD,EAA+B,EAAC,UAAS,CAAV,EAAY,YAAW,KAAvB,EAA/B,CAA/B;AACH,SARD;;AAUA;AACA,WAAG,yCAAH,EAA8C,YAAM;AAChD;AACA,gBAAI,yBAAyB,IAA7B;AACA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,oBAAoB,cAAc,iCAAd,CAAgD,sBAAhD,CAAxB;AACA,mBAAO,kBAAkB,MAAzB,EAAiC,OAAjC,CAAyC,CAAzC;;AAEA;AACA,gBAAI,sBAAsB,CAA1B;AACA,gBAAI,4BAA4B,cAAc,iCAAd,CAAgD,mBAAhD,CAAhC;AACA,mBAAO,yBAAP,EAAkC,OAAlC,CAA0C,CAAC,GAAD,CAA1C;AACH,SAXD;;AAaA;AACA,WAAG,qCAAH,EAA0C,YAAM;AAC5C;AACA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,iCAAiC,cAAc,qBAAd,EAArC;AACA,mBAAO,8BAAP,EAAuC,QAAvC;;AAEA;AACA,gBAAI,6BAA6B,CAAjC;AACA,0BAAc,SAAd,CAAwB,aAAxB;AACA,gBAAI,0BAA0B,cAAc,qBAAd,EAA9B;AACA,mBAAO,uBAAP,EAAgC,OAAhC,CAAwC,0BAAxC;AACH,SAXD;;AAaA;AACA,WAAG,iDAAH,EAAsD,YAAM;;AAExD,0BAAc,SAAd,CAAwB,aAAxB;AACA,kBAAM,aAAN,EAAqB,0BAArB,EAAiD,GAAjD,CAAqD,WAArD,GAHwD,CAGY;;AAEpE;AACA,gBAAI,wBAAwB,cAAc,wBAAd,CAAuC,IAAvC,CAA5B;AACA,mBAAO,qBAAP,EAA8B,QAA9B;;AAEA;AACA,gBAAI,yBAAyB,IAA7B;AACA,gBAAI,+BAA+B,cAAc,wBAAd,CAAuC,sBAAvC,CAAnC;AACA,mBAAO,cAAc,wBAArB,EAA+C,oBAA/C,CAAoE,sBAApE;AACA,mBAAO,4BAAP,EAAqC,QAArC;;AAEA;AACA,gBAAI,sBAAsB,CAA1B;AACA,gBAAI,4BAA4B,cAAc,wBAAd,CAAuC,mBAAvC,CAAhC;AACA,mBAAO,cAAc,wBAArB,EAA+C,oBAA/C,CAAoE,mBAApE;AACA,mBAAO,yBAAP,EAAkC,OAAlC,CAA0C,CAA1C;AACH,SApBD;AAsBH,KA9ID;AA+IH,CA1JD","file":"configService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ConfigService Unit Test', () => {\n\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, $httpBackend;\n\n    beforeEach(inject((_ConfigService_, _$httpBackend_) => {\n        ConfigService = _ConfigService_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ConfigService', () => {\n\n        var configURL = \"http://localhost:8080/wise/config/1\";\n\n        // Load sample configs\n        let sampleConfig1 = window.mocks['test-unit/sampleData/config/config1'];\n        let sampleConfig2 = window.mocks['test-unit/sampleData/config/config2'];\n\n        // i18n\n        let sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n        let sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n        var i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n        var i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n\n        xit('should retrieve config', () => {\n            spyOn(ConfigService, \"setConfig\").and.callThrough();\n            spyOn(ConfigService, \"sortClassmateUserInfosAlphabeticallyByName\");\n            $httpBackend.when('GET', configURL).respond(sampleConfig1);\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            $httpBackend.expectGET(configURL);\n            let configPromise = ConfigService.retrieveConfig(configURL);\n            $httpBackend.flush();\n            // TODO: when replacing this line below with expect(ConfigService.setConfig).toHaveBeenCalled(sampleConfig1);, it fails.\n            // it shouldn't fail, so find out why.\n            expect(ConfigService.setConfig).toHaveBeenCalled();\n            expect(ConfigService.sortClassmateUserInfosAlphabeticallyByName).toHaveBeenCalled();\n        });\n\n        it('should sort the classmates alphabetically by name when setting config', () => {\n            spyOn(ConfigService, \"sortClassmateUserInfosAlphabeticallyByNameHelper\").and.callThrough(); // actually call through the function\n            let classmateUserInfosBefore = sampleConfig1.userInfo.myUserInfo.myClassInfo.classmateUserInfos;\n            expect(classmateUserInfosBefore[0].workgroupId).toEqual(3);\n            expect(classmateUserInfosBefore[1].workgroupId).toEqual(8);\n            ConfigService.setConfig(sampleConfig1);  // setting the config should sort the classmates alphabetically by name\n            expect(ConfigService.sortClassmateUserInfosAlphabeticallyByNameHelper).toHaveBeenCalled();\n            let classmateUserInfosAfter = ConfigService.getClassmateUserInfos();\n            expect(classmateUserInfosAfter[0].workgroupId).toEqual(8);\n            expect(classmateUserInfosAfter[1].workgroupId).toEqual(3);\n        });\n\n        // Test getLocale()\n        it('should get the locale', () => {\n            // Sample config 1 doesn't have locale set, so it should default to \"en\"\n            ConfigService.setConfig(sampleConfig1);\n            let locale = ConfigService.getLocale();\n            expect(locale).toEqual(\"en\");\n\n            // Sample config 2 should have \"ja\" locale.\n            ConfigService.setConfig(sampleConfig2);\n            let locale2 = ConfigService.getLocale();\n            expect(locale2).toEqual(\"ja\");\n        });\n\n        // Test getMode and isPreview()\n        it('should get the modes', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let mode = ConfigService.getMode();\n            let isPreview = ConfigService.isPreview();\n            expect(mode).toEqual(\"run\");\n            expect(isPreview).toEqual(false);\n\n            ConfigService.setConfig(sampleConfig2);\n            let mode2 = ConfigService.getMode();\n            let isPreview2 = ConfigService.isPreview();\n            expect(mode2).toEqual(\"preview\");\n            expect(isPreview2).toEqual(true);\n        });\n\n        // Test getPeriodId()\n        it('should get the period id of the student', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let config1PeriodId = ConfigService.getPeriodId();\n            expect(config1PeriodId).toEqual(1);\n\n            ConfigService.setConfig(sampleConfig2);\n            let config2PeriodId = ConfigService.getPeriodId();\n            expect(config2PeriodId).toEqual(2);\n        });\n\n        // Test getPeriods()\n        it('should get the periods in the run', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let config1Periods = ConfigService.getPeriods();\n            expect(config1Periods).toEqual([{periodId:1,periodName:'1'},{periodId:2,periodName:'2'},{periodId:3,periodName:'newperiod'}]);\n\n            ConfigService.setConfig(sampleConfig2);\n            let config2Periods = ConfigService.getPeriods();\n            expect(config2Periods).toEqual([{periodId:1,periodName:'one'},{periodId:2,periodName:'two'}]);\n        });\n\n        // Test getStudentFirstNamesByWorkgroupId()\n        it('should get the username by workgroup id', () => {\n            // If specified workgroup doesn't exist, it should return empty array\n            let nonExistingWorkgroupId = 9999;\n            ConfigService.setConfig(sampleConfig1);\n            let studentFirstNames = ConfigService.getStudentFirstNamesByWorkgroupId(nonExistingWorkgroupId);\n            expect(studentFirstNames.length).toEqual(0);\n\n            // Otherwise it should get the first names from the config\n            let existingWorkgroupId = 8;\n            let studentFirstNamesExisting = ConfigService.getStudentFirstNamesByWorkgroupId(existingWorkgroupId);\n            expect(studentFirstNamesExisting).toEqual(['k']);\n        });\n\n        // Test getTeacherWorkgroupId()\n        it('should get the teacher workgroup id', () => {\n            // If teacher workgroup doesn't exist, it should return null\n            ConfigService.setConfig(sampleConfig2);\n            let teacherWorkgroupIdDoesNotExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdDoesNotExist).toBeNull();\n\n            // Otherwise it should get the teacher's workgroup id from the config\n            let expectedTeacherWorkgroupId = 1;\n            ConfigService.setConfig(sampleConfig1);\n            let teacherWorkgroupIdExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdExist).toEqual(expectedTeacherWorkgroupId);\n        });\n\n        // Test getPeriodIdByWorkgroupId()\n        it('should get the period id given the workgroup id', () => {\n\n            ConfigService.setConfig(sampleConfig1);\n            spyOn(ConfigService, \"getUserInfoByWorkgroupId\").and.callThrough(); // actually call through the function\n\n            // If workgroupId is null, period should be null\n            let nullWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(null);\n            expect(nullWorkgroupPeriodId).toBeNull();\n\n            // If specified workgroup doesn't exist, it should null\n            let nonExistingWorkgroupId = 9999;\n            let nonExistingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(nonExistingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(nonExistingWorkgroupId);\n            expect(nonExistingWorkgroupPeriodId).toBeNull();\n\n            // Otherwise it should get workgroup's period id\n            let existingWorkgroupId = 8;\n            let existingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(existingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(existingWorkgroupId);\n            expect(existingWorkgroupPeriodId).toEqual(1);\n        })\n\n    });\n});"]}