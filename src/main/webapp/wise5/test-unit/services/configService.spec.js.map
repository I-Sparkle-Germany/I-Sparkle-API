{"version":3,"sources":["configService.spec.es6"],"names":[],"mappings":"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","file":"configService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ConfigService Unit Test', () => {\n\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, $httpBackend;\n\n    beforeEach(inject((_ConfigService_, _$httpBackend_) => {\n        ConfigService = _ConfigService_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ConfigService', () => {\n\n        // Load sample configs\n        let sampleConfig1 = window.mocks['test-unit/sampleData/config/config1'];\n        let sampleConfig2 = window.mocks['test-unit/sampleData/config/config2'];\n\n        it('should sort the classmates alphabetically by name when setting config', () => {\n            spyOn(ConfigService, \"sortClassmateUserInfosAlphabeticallyByNameHelper\").and.callThrough(); // actually call through the function\n            let classmateUserInfosBefore = sampleConfig1.userInfo.myUserInfo.myClassInfo.classmateUserInfos;\n            expect(classmateUserInfosBefore[0].workgroupId).toEqual(3);\n            expect(classmateUserInfosBefore[1].workgroupId).toEqual(8);\n            ConfigService.setConfig(sampleConfig1);  // setting the config should sort the classmates alphabetically by name\n            expect(ConfigService.sortClassmateUserInfosAlphabeticallyByNameHelper).toHaveBeenCalled();\n            let classmateUserInfosAfter = ConfigService.getClassmateUserInfos();\n            expect(classmateUserInfosAfter[0].workgroupId).toEqual(8);\n            expect(classmateUserInfosAfter[1].workgroupId).toEqual(3);\n        });\n\n        // Test getMode and isPreview()\n        it('should get the modes', () => {\n            ConfigService.setConfig(sampleConfig1);\n            let mode = ConfigService.getMode();\n            let isPreview = ConfigService.isPreview();\n            expect(mode).toEqual(\"run\");\n            expect(isPreview).toEqual(false);\n\n            ConfigService.setConfig(sampleConfig2);\n            let mode2 = ConfigService.getMode();\n            let isPreview2 = ConfigService.isPreview();\n            expect(mode2).toEqual(\"preview\");\n            expect(isPreview2).toEqual(true);\n        });\n\n        // Test getStudentFirstNamesByWorkgroupId()\n        it('should get the username by workgroup id', () => {\n            // If specified workgroup doesn't exist, it should return empty array\n            let nonExistingWorkgroupId = 9999;\n            ConfigService.setConfig(sampleConfig1);\n            let studentFirstNames = ConfigService.getStudentFirstNamesByWorkgroupId(nonExistingWorkgroupId);\n            expect(studentFirstNames.length).toEqual(0);\n\n            // Otherwise it should get the first names from the config\n            let existingWorkgroupId = 8;\n            let studentFirstNamesExisting = ConfigService.getStudentFirstNamesByWorkgroupId(existingWorkgroupId);\n            expect(studentFirstNamesExisting).toEqual(['k']);\n        });\n\n        // Test getTeacherWorkgroupId()\n        it('should get the teacher workgroup id', () => {\n            // If teacher workgroup doesn't exist, it should return null\n            ConfigService.setConfig(sampleConfig2);\n            let teacherWorkgroupIdDoesNotExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdDoesNotExist).toBeNull();\n\n            // Otherwise it should get the teacher's workgroup id from the config\n            let expectedTeacherWorkgroupId = 1;\n            ConfigService.setConfig(sampleConfig1);\n            let teacherWorkgroupIdExist = ConfigService.getTeacherWorkgroupId();\n            expect(teacherWorkgroupIdExist).toEqual(expectedTeacherWorkgroupId);\n        });\n\n        // Test getPeriodIdByWorkgroupId()\n        it('should get the period id given the workgroup id', () => {\n\n            ConfigService.setConfig(sampleConfig1);\n            spyOn(ConfigService, \"getUserInfoByWorkgroupId\").and.callThrough(); // actually call through the function\n\n            // If workgroupId is null, period should be null\n            let nullWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(null);\n            expect(nullWorkgroupPeriodId).toBeNull();\n\n            // If specified workgroup doesn't exist, it should null\n            let nonExistingWorkgroupId = 9999;\n            let nonExistingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(nonExistingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(nonExistingWorkgroupId);\n            expect(nonExistingWorkgroupPeriodId).toBeNull();\n\n            // Otherwise it should get workgroup's period id\n            let existingWorkgroupId = 8;\n            let existingWorkgroupPeriodId = ConfigService.getPeriodIdByWorkgroupId(existingWorkgroupId);\n            expect(ConfigService.getUserInfoByWorkgroupId).toHaveBeenCalledWith(existingWorkgroupId);\n            expect(existingWorkgroupPeriodId).toEqual(1);\n        })\n\n    });\n});"]}