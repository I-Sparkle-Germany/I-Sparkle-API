{"version":3,"sources":["projectService.spec.es6"],"names":[],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', function () {\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, ProjectService, $rootScope, $httpBackend;\n\n    beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n        ConfigService = _ConfigService_;\n        ProjectService = _ProjectService_;\n        $rootScope = _$rootScope_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ProjectService', function () {\n\n        // Load sample projects\n        var demoProjectJSON = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n        var demoProjectJSONString = JSON.stringify(demoProjectJSON);\n        var scootersProjectJSON = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n        var scootersProjectJSONString = JSON.stringify(scootersProjectJSON);\n        var invalidProjectJSONString = \"{'a':1\";\n\n        var projectIdDefault = 1;\n        var projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n        var projectURL = projectBaseURL + \"project.json\";\n        var registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n        var saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n        var commitMessageDefault = \"Made simple changes\";\n        var defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n        var wiseBaseURL = \"/wise\";\n\n        function createNormalSpy() {\n            spyOn(ConfigService, \"getConfigParam\").and.callFake(function(param) {\n                if (param === \"projectBaseURL\") {\n                    return projectBaseURL;\n                } else if (param === \"projectURL\") {\n                    return projectURL;\n                } else if (param === \"registerNewProjectURL\") {\n                    return registerNewProjectURL;\n                } else if (param === \"saveProjectURL\") {\n                    return saveProjectURL;\n                } else if (param === \"wiseBaseURL\") {\n                    return wiseBaseURL;\n                }\n            });\n        };\n\n        beforeEach(function() {\n        });\n\n        it('should replace asset paths in non-html component content', function () {\n            createNormalSpy();\n            let contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should replace asset paths in html component content', function () {\n            createNormalSpy();\n            let contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should retrieve project when Config.projectURL is valid', function() {\n            createNormalSpy();\n            spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n            spyOn(ProjectService, \"parseProject\");\n            $httpBackend.when('GET', projectURL).respond(scootersProjectJSON);\n            $httpBackend.expectGET(projectURL);\n            let projectPromise = ProjectService.retrieveProject();\n            $httpBackend.flush();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n            expect(ProjectService.parseProject).toHaveBeenCalled();\n            expect(ProjectService.project).toEqual(scootersProjectJSON);\n        });\n\n        it('should not retrieve project when Config.projectURL is undefined', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            let project = ProjectService.retrieveProject();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(project).toBeNull();\n        });\n\n        // MARK: Register Project\n        it('should register new project', function() {\n            createNormalSpy();\n            var newProjectIdExpected = projectIdDefault; // Id of new project created on the server\n            $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n            $httpBackend.flush();\n            $httpBackend.expectPOST(registerNewProjectURL);\n        });\n\n        it('should not register new project when Config.registerNewProjectURL is undefined', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n            expect($httpBackend.flush).toThrowError('No pending request to flush !'); // HTTP request should not be made\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        it('should not register new project when projectJSON is invalid JSON', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n            try {\n                var newProjectIdActualPromise = ProjectService.registerNewProject(invalidProjectJSONString, commitMessageDefault);\n                expect(1).toEqual(2);   // This line should not get called because the above line will throw an error\n            } catch (e) {\n                expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n                expect(e.message).toEqual(\"Invalid projectJSONString.\")\n            }\n        });\n\n        // MARK: Save Project\n        it('should save project', function() {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            $httpBackend.flush();\n            $httpBackend.expectPOST(saveProjectURL);\n        });\n\n        it('should not save project when Config.saveProjectURL is undefined', function() {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        it('should not save project when Config.projectId is undefined', function() {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        // MARK: ThemePath\n        it('should get default theme path when theme is not defined in the project', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let expectedThemePath = wiseBaseURL + \"/wise5/vle/themes/default\";\n            let actualThemePath = ProjectService.getThemePath();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n            expect(actualThemePath).toEqual(expectedThemePath);\n        });\n\n        it('should get project theme path when theme is defined in the project', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n            ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n            let demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n            let expectedThemePath = wiseBaseURL + \"/wise5/vle/themes/\" + demoProjectTheme;\n            let actualThemePath = ProjectService.getThemePath();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n            expect(actualThemePath).toEqual(expectedThemePath);\n        });\n\n\n        // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n        // TODO: add test for ProjectService.getAllPaths()\n        // TODO: add test for ProjectService.consolidatePaths()\n        // TODO: add test for ProjectService.consumePathsUntilNodeId()\n        // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n        // TODO: add test for ProjectService.removeNodeIdFromPaths()\n        // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n        // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n        // TODO: add test for ProjectService.arePathsEmpty()\n        // TODO: add test for ProjectService.getPathsThatContainNodeId()\n        // TODO: add test for ProjectService.getNonEmptyPathIndex()\n        // TODO: add test for ProjectService.getBranches()\n        // TODO: add test for ProjectService.findBranches()\n\n        // TODO: add test for ProjectService.createBranchMetaObject()\n        // TODO: add test for ProjectService.findNextCommonNodeId()\n        // TODO: add test for ProjectService.allPathsContainNodeId()\n        // TODO: add test for ProjectService.trimPathsUpToNodeId()\n        // TODO: add test for ProjectService.extractPathsUpToNodeId()\n        // TODO: add test for ProjectService.removeDuplicatePaths()\n        // TODO: add test for ProjectService.pathsEqual()\n\n        // TODO: add test for ProjectService.isNodeIdInABranch()\n        // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n        // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n        // TODO: add test for ProjectService.replaceComponent()\n        // TODO: add test for ProjectService.createGroup()\n        // TODO: add test for ProjectService.createNode()\n        // TODO: add test for ProjectService.createNodeInside()\n        // TODO: add test for ProjectService.createNodeAfter()\n        // TODO: add test for ProjectService.insertNodeAfterInGroups()\n        // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n        // TODO: add test for ProjectService.insertNodeInsideInGroups()\n        // TODO: add test for ProjectService.insertNodeInsideInTransitions()\n\n        // MARK: Tests for Node and Group Id functions\n        // test ProjectService.getStartNodeId()\n        it('should return the start node of the project', function() {\n            ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n            let expectedStartNodeId = \"node1\";  // Demo project's start node id\n            let actualStartNodeId = ProjectService.getStartNodeId();\n            expect(actualStartNodeId).toEqual(expectedStartNodeId);\n\n            ProjectService.setProject(null);  // Set a null project\n            let nullProjectStartNodeId = ProjectService.getStartNodeId();\n            expect(nullProjectStartNodeId).toBeNull();\n        });\n\n        // test ProjectService.getNodeById()\n        it('should return the node by nodeId', function() {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let node1 = ProjectService.getNodeById(\"node1\");\n            expect(node1.type).toEqual(\"node\");\n            expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n            expect(node1.components.length).toEqual(1);\n\n            // Call getNodeId with null and expect a null return value\n            let nodeBadArgs = ProjectService.getNodeById();\n            expect(nodeBadArgs).toBeNull();\n\n            // Test node that doesn't exist in project and make sure the function returns null\n            let nodeNE = ProjectService.getNodeById(\"node999\");\n            expect(nodeNE).toBeNull();\n        });\n\n        // test ProjectService.getNodeTitleByNodeId()\n        it('should return the node title by nodeId', function() {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n            expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n            // Call getNodeTitleByNodeId with null and expect a null return value\n            let nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n            expect(nodeTitleBadArgs).toBeNull();\n\n            // Test node that doesn't exist in project and make sure the function returns null\n            let nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n            expect(nodeTitleNE).toBeNull();\n        });\n\n        // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n        // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n        // test ProjectService.getNextAvailableNodeId()\n        it('should return the next available node id', function() {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nextNodeIdExpected = \"node8\";      // This should be the next available node id.\n            let nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n            expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n        });\n\n        // test ProjectService.getNextAvailableGroupId()\n        it('should return the next available group id', function() {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n            let nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n            expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n        });\n\n        // test ProjectService.getGroupIds()\n        it('should return the group ids in the project', function() {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n            let groupIdsActual = ProjectService.getGroupIds();\n            expect(groupIdsActual).toEqual(groupIdsExpected);\n        });\n\n        // test ProjectService.getNodeIds()\n        it('should return the node ids in the project', function() {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n                'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n                'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n                'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n                'node38', 'node39'];      // This should be the node ids in the project\n            let nodeIdsActual = ProjectService.getNodeIds();\n            expect(nodeIdsActual).toEqual(nodeIdsExpected);\n        });\n\n        // test ProjectService.getComponentByNodeIdAndComponentId()\n        it('should get the component by node id and comonent id', function() {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n            expect(nullNodeIdResult).toBeNull();\n\n            // componentId is null\n            let nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n            expect(nullComponentIdResult).toBeNull();\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n            expect(nodeIdDNEResult).toBeNull();\n\n            // componentId doesn't exist\n            let componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n            expect(componentIdDNEResult).toBeNull();\n\n            // nodeId and componentId are valid and the component exists in the project\n            let componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n            expect(componentExists).not.toBe(null);\n            expect(componentExists.type).toEqual(\"HTML\");\n\n            let componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n            expect(componentExists2).not.toBe(null);\n            expect(componentExists2.type).toEqual(\"embedded\");\n            expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n        });\n\n        // test ProjectService.getComponentPositionByNodeIdAndComponentId()\n        it('should get the component position by node id and comonent id', function() {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n            expect(nullNodeIdResult).toEqual(-1);\n\n            // componentId is null\n            let nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n            expect(nullComponentIdResult).toEqual(-1);\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n            expect(nodeIdDNEResult).toEqual(-1);\n\n            // componentId doesn't exist\n            let componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n            expect(componentIdDNEResult).toEqual(-1);\n\n            // nodeId and componentId are valid and the component exists in the project\n            let componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n            expect(componentExists).toEqual(0);\n\n            let componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n            expect(componentExists2).toEqual(1);\n        });\n\n        // test ProjectService.getComponentsByNodeId()\n        it('should get the components by node id', function() {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n            expect(nullNodeIdResult).toEqual([]);\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n            expect(nodeIdDNEResult).toEqual([]);\n\n            // nodeId exists but the node.components is null\n            let nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n            expect(nodeWithNullComponentResult).toEqual([]);\n\n            // nodeId is are valid and the node exists in the project\n            let nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n            expect(nodeExistsResult).not.toBe(null);\n            expect(nodeExistsResult.length).toEqual(1);\n            expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n            let nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n            expect(nodeExistsResult2).not.toBe(null);\n            expect(nodeExistsResult2.length).toEqual(7);\n            expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n            expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n        });\n\n        // TODO: add test for ProjectService.moveNodesInside()\n        // TODO: add test for ProjectService.moveNodesAfter()\n        // TODO: add test for ProjectService.deleteNode()\n        // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n        // TODO: add test for ProjectService.removeNodeIdFromGroups()\n        // TODO: add test for ProjectService.removeNodeIdFromNodes()\n        // TODO: add test for ProjectService.createComponent()\n        // TODO: add test for ProjectService.addComponentToNode()\n        // TODO: add test for ProjectService.moveComponentUp()\n        // TODO: add test for ProjectService.moveComponentDown()\n        // TODO: add test for ProjectService.deleteComponent()\n\n        // test ProjectService.getMaxScore()\n        it('should return the max score of the project', function() {\n            // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n            ProjectService.setProject(demoProjectJSON);  // Set the sample demo project and parse it\n            let demoProjectMaxScoreActual = ProjectService.getMaxScore();\n            expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n            // Sample Scooter Project's max score is 18.\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample scooter project and parse it\n            let scootersProjectMaxScoreExpected = 18;\n            let scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n            expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n        });\n\n    });\n});"]}