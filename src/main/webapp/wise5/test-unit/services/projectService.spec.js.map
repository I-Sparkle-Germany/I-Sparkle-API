{"version":3,"sources":["projectService.spec.es6"],"names":[],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', () => {\n\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, ProjectService, $rootScope, $httpBackend;\n\n    beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n        ConfigService = _ConfigService_;\n        ProjectService = _ProjectService_;\n        $rootScope = _$rootScope_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ProjectService', () => {\n\n        // Load sample projects\n        var demoProjectJSON = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n        var demoProjectJSONString = JSON.stringify(demoProjectJSON);\n        var scootersProjectJSON = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n        var scootersProjectJSONString = JSON.stringify(scootersProjectJSON);\n        var invalidProjectJSONString = \"{'a':1\";\n\n        var projectIdDefault = 1;\n        var projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n        var projectURL = projectBaseURL + \"project.json\";\n        var registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n        var saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n        var commitMessageDefault = \"Made simple changes\";\n        var defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n        var wiseBaseURL = \"/wise\";\n\n        // i18n\n        var i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n        var i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n        let sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n        let sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n        function createNormalSpy() {\n            spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n                if (param === \"projectBaseURL\") {\n                    return projectBaseURL;\n                } else if (param === \"projectURL\") {\n                    return projectURL;\n                } else if (param === \"registerNewProjectURL\") {\n                    return registerNewProjectURL;\n                } else if (param === \"saveProjectURL\") {\n                    return saveProjectURL;\n                } else if (param === \"wiseBaseURL\") {\n                    return wiseBaseURL;\n                }\n            });\n        };\n\n        it('should replace asset paths in non-html component content', () => {\n            createNormalSpy();\n            let contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should replace asset paths in html component content', () => {\n            createNormalSpy();\n            let contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should not replace asset paths in html component content', () => {\n            createNormalSpy();\n            let contentString = \"<source type=\\\"video/mp4\\\">\";\n            let contentStringReplacedAssetPathExpected = \"<source type=\\\"video/mp4\\\">\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        xit('should retrieve project when Config.projectURL is valid', () => {\n            createNormalSpy();\n            spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n            spyOn(ProjectService, \"parseProject\");\n            $httpBackend.when('GET', new RegExp(projectURL)).respond(scootersProjectJSON);\n            $httpBackend.expectGET(new RegExp(projectURL));\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            let projectPromise = ProjectService.retrieveProject();\n            $httpBackend.flush();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n            expect(ProjectService.parseProject).toHaveBeenCalled();\n            expect(ProjectService.project).toEqual(scootersProjectJSON);\n        });\n\n        it('should not retrieve project when Config.projectURL is undefined', () => {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            let project = ProjectService.retrieveProject();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(project).toBeNull();\n        });\n\n        // MARK: Register Project\n        xit('should register new project', () => {\n            createNormalSpy();\n            var newProjectIdExpected = projectIdDefault; // Id of new project created on the server\n            $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n            $httpBackend.flush();\n            $httpBackend.expectPOST(registerNewProjectURL);\n        });\n\n        it('should not register new project when Config.registerNewProjectURL is undefined', () => {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        it('should not register new project when projectJSON is invalid JSON', () => {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n            try {\n                var newProjectIdActualPromise = ProjectService.registerNewProject(invalidProjectJSONString, commitMessageDefault);\n                expect(1).toEqual(2);   // This line should not get called because the above line will throw an error\n            } catch (e) {\n                expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n                expect(e.message).toEqual(\"Invalid projectJSONString.\")\n            }\n        });\n\n        // MARK: Save Project\n        xit('should save project', () => {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n            $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n            $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            $httpBackend.flush();\n            $httpBackend.expectPOST(saveProjectURL);\n        });\n\n        it('should not save project when Config.saveProjectURL is undefined', () => {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        it('should not save project when Config.projectId is undefined', () => {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(ConfigService.getProjectId).toHaveBeenCalled();\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        // MARK: ThemePath\n        it('should get default theme path when theme is not defined in the project', () => {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let expectedThemePath = wiseBaseURL + \"/wise5/themes/default\";\n            let actualThemePath = ProjectService.getThemePath();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n            expect(actualThemePath).toEqual(expectedThemePath);\n        });\n\n        it('should get project theme path when theme is defined in the project', () => {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n            ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n            let demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n            let expectedThemePath = wiseBaseURL + \"/wise5/themes/\" + demoProjectTheme;\n            let actualThemePath = ProjectService.getThemePath();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n            expect(actualThemePath).toEqual(expectedThemePath);\n        });\n\n\n        // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n        // TODO: add test for ProjectService.getAllPaths()\n        // TODO: add test for ProjectService.consolidatePaths()\n        // TODO: add test for ProjectService.consumePathsUntilNodeId()\n        // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n        // TODO: add test for ProjectService.removeNodeIdFromPaths()\n        // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n        // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n        // TODO: add test for ProjectService.arePathsEmpty()\n        // TODO: add test for ProjectService.getPathsThatContainNodeId()\n        // TODO: add test for ProjectService.getNonEmptyPathIndex()\n        // TODO: add test for ProjectService.getBranches()\n        // TODO: add test for ProjectService.findBranches()\n\n        // TODO: add test for ProjectService.createBranchMetaObject()\n        // TODO: add test for ProjectService.findNextCommonNodeId()\n        // TODO: add test for ProjectService.allPathsContainNodeId()\n        // TODO: add test for ProjectService.trimPathsUpToNodeId()\n        // TODO: add test for ProjectService.extractPathsUpToNodeId()\n        // TODO: add test for ProjectService.removeDuplicatePaths()\n        // TODO: add test for ProjectService.pathsEqual()\n\n        // TODO: add test for ProjectService.isNodeIdInABranch()\n        // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n        // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n        // TODO: add test for ProjectService.replaceComponent()\n        // TODO: add test for ProjectService.createGroup()\n        // TODO: add test for ProjectService.createNode()\n        // TODO: add test for ProjectService.createNodeInside()\n        // TODO: add test for ProjectService.createNodeAfter()\n        // TODO: add test for ProjectService.insertNodeAfterInGroups()\n        // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n        // TODO: add test for ProjectService.insertNodeInsideInGroups()\n        // TODO: add test for ProjectService.insertNodeInsideInTransitions()\n\n        // MARK: Tests for Node and Group Id functions\n        // test ProjectService.getStartNodeId()\n        it('should return the start node of the project', () => {\n            ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n            let expectedStartNodeId = \"node1\";  // Demo project's start node id\n            let actualStartNodeId = ProjectService.getStartNodeId();\n            expect(actualStartNodeId).toEqual(expectedStartNodeId);\n\n            ProjectService.setProject(null);  // Set a null project\n            let nullProjectStartNodeId = ProjectService.getStartNodeId();\n            expect(nullProjectStartNodeId).toBeNull();\n        });\n\n        // test ProjectService.getNodeById()\n        it('should return the node by nodeId', () => {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let node1 = ProjectService.getNodeById(\"node1\");\n            expect(node1.type).toEqual(\"node\");\n            expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n            expect(node1.components.length).toEqual(1);\n\n            // Call getNodeId with null and expect a null return value\n            let nodeBadArgs = ProjectService.getNodeById();\n            expect(nodeBadArgs).toBeNull();\n\n            // Test node that doesn't exist in project and make sure the function returns null\n            let nodeNE = ProjectService.getNodeById(\"node999\");\n            expect(nodeNE).toBeNull();\n        });\n\n        // test ProjectService.getNodeTitleByNodeId()\n        it('should return the node title by nodeId', () => {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n            expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n            // Call getNodeTitleByNodeId with null and expect a null return value\n            let nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n            expect(nodeTitleBadArgs).toBeNull();\n\n            // Test node that doesn't exist in project and make sure the function returns null\n            let nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n            expect(nodeTitleNE).toBeNull();\n        });\n\n        // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n        // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n        // test ProjectService.getNextAvailableNodeId()\n        it('should return the next available node id', () => {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nextNodeIdExpected = \"node41\";      // This should be the next available node id.\n            let nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n            expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n        });\n\n        // test ProjectService.getNextAvailableGroupId()\n        it('should return the next available group id', () => {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n            let nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n            expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n        });\n\n        // test ProjectService.getGroupIds()\n        it('should return the group ids in the project', () => {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n            let groupIdsActual = ProjectService.getGroupIds();\n            expect(groupIdsActual).toEqual(groupIdsExpected);\n        });\n\n        // test ProjectService.getNodeIds()\n        it('should return the node ids in the project', () => {\n            createNormalSpy();\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            let nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n                'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n                'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n                'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n                'node38', 'node39', 'nodeWithNoComponents'];      // This should be the node ids in the project\n            let nodeIdsActual = ProjectService.getNodeIds();\n            expect(nodeIdsActual).toEqual(nodeIdsExpected);\n        });\n\n        // test ProjectService.getComponentByNodeIdAndComponentId()\n        it('should get the component by node id and comonent id', () => {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n            expect(nullNodeIdResult).toBeNull();\n\n            // componentId is null\n            let nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n            expect(nullComponentIdResult).toBeNull();\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n            expect(nodeIdDNEResult).toBeNull();\n\n            // componentId doesn't exist\n            let componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n            expect(componentIdDNEResult).toBeNull();\n\n            // nodeId and componentId are valid and the component exists in the project\n            let componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n            expect(componentExists).not.toBe(null);\n            expect(componentExists.type).toEqual(\"HTML\");\n\n            let componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n            expect(componentExists2).not.toBe(null);\n            expect(componentExists2.type).toEqual(\"embedded\");\n            expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n        });\n\n        // test ProjectService.getComponentPositionByNodeIdAndComponentId()\n        it('should get the component position by node id and comonent id', () => {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n            expect(nullNodeIdResult).toEqual(-1);\n\n            // componentId is null\n            let nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n            expect(nullComponentIdResult).toEqual(-1);\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n            expect(nodeIdDNEResult).toEqual(-1);\n\n            // componentId doesn't exist\n            let componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n            expect(componentIdDNEResult).toEqual(-1);\n\n            // nodeId and componentId are valid and the component exists in the project\n            let componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n            expect(componentExists).toEqual(0);\n\n            let componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n            expect(componentExists2).toEqual(1);\n        });\n\n        // test ProjectService.getComponentsByNodeId()\n        it('should get the components by node id', () => {\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n            // nodeId is null\n            let nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n            expect(nullNodeIdResult).toEqual([]);\n\n            // nodeId doesn't exist\n            let nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n            expect(nodeIdDNEResult).toEqual([]);\n\n            // nodeId exists but the node.components is null\n            let nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n            expect(nodeWithNullComponentResult).toEqual([]);\n\n            // nodeId is are valid and the node exists in the project\n            let nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n            expect(nodeExistsResult).not.toBe(null);\n            expect(nodeExistsResult.length).toEqual(1);\n            expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n            let nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n            expect(nodeExistsResult2).not.toBe(null);\n            expect(nodeExistsResult2.length).toEqual(7);\n            expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n            expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n        });\n\n        // TODO: add test for ProjectService.moveNodesInside()\n        // TODO: add test for ProjectService.moveNodesAfter()\n        // TODO: add test for ProjectService.deleteNode()\n        // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n        // TODO: add test for ProjectService.removeNodeIdFromGroups()\n        // TODO: add test for ProjectService.removeNodeIdFromNodes()\n        // TODO: add test for ProjectService.createComponent()\n        // TODO: add test for ProjectService.addComponentToNode()\n        // TODO: add test for ProjectService.moveComponentUp()\n        // TODO: add test for ProjectService.moveComponentDown()\n        // TODO: add test for ProjectService.deleteComponent()\n\n        // test ProjectService.getMaxScore()\n        it('should return the max score of the project', () => {\n            // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n            ProjectService.setProject(demoProjectJSON);  // Set the sample demo project and parse it\n            let demoProjectMaxScoreActual = ProjectService.getMaxScore();\n            expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n            // Sample Scooter Project's max score is 18.\n            ProjectService.setProject(scootersProjectJSON);  // Set the sample scooter project and parse it\n            let scootersProjectMaxScoreExpected = 18;\n            let scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n            expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n        });\n\n    });\n});\n"]}