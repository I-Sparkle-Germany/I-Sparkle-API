{"version":3,"sources":["projectService.spec.es6"],"names":["describe","beforeEach","mock","module","name","demoProjectJSONOriginal","window","mocks","scootersProjectJSONOriginal","ConfigService","ProjectService","$rootScope","$httpBackend","demoProjectJSON","scootersProjectJSON","inject","_ConfigService_","_ProjectService_","_$rootScope_","_$httpBackend_","JSON","parse","stringify","projectIdDefault","projectBaseURL","projectURL","saveProjectURL","commitMessageDefault","defaultCommitHistory","wiseBaseURL","i18nURL_common_en","i18nURL_vle_en","sampleI18N_common_en","sampleI18N_vle_en","createNormalSpy","spyOn","and","callFake","param","it","contentString","contentStringReplacedAssetPathExpected","contentStringReplacedAssetPathActual","replaceAssetPaths","expect","getConfigParam","toHaveBeenCalledWith","toEqual","xit","callThrough","when","RegExp","respond","expectGET","projectPromise","retrieveProject","flush","setProject","parseProject","toHaveBeenCalled","project","returnValue","toBeNull","data","newProjectIdActualPromise","saveProject","getProjectId","expectPOST","verifyNoOutstandingExpectation","expectedThemePath","actualThemePath","getThemePath","demoProjectTheme","theme","expectedStartNodeId","actualStartNodeId","getStartNodeId","node1","getNodeById","type","title","components","length","nodeBadArgs","nodeNE","node1Title","getNodeTitleByNodeId","nodeTitleBadArgs","nodeTitleNE","nextNodeIdExpected","nextNodeIdActual","getNextAvailableNodeId","nextGroupIdExpected","nextGroupIdActual","getNextAvailableGroupId","groupIdsExpected","groupIdsActual","getGroupIds","nodeIdsExpected","nodeIdsActual","getNodeIds","nullNodeIdResult","getComponentByNodeIdAndComponentId","nullComponentIdResult","nodeIdDNEResult","componentIdDNEResult","componentExists","not","toBe","componentExists2","url","getComponentPositionByNodeIdAndComponentId","getComponentsByNodeId","nodeWithNullComponentResult","nodeExistsResult","id","nodeExistsResult2","demoProjectMaxScoreActual","getMaxScore","scootersProjectMaxScoreExpected","scootersProjectMaxScoreActual","spaces","getSpaces","space","addSpace","removeSpace","isNodeIdAfter","toBeTruthy","toBeFalsy","getTransitionsByFromNodeId","removeTransitionsOutOfGroup","getChildNodeIdsById","removeNodeIdFromGroup","getGroupStartId","isBranchStartPoint","isBranchMergePoint","paths","subPath","consumePathsUntilNodeId","expectedPath","paths2","subPath2","expectedPath2","nodeHasTransitionToNodeId","insertNodeAfterInTransitions","toThrow","node19","insertNodeInsideOnlyUpdateTransitions","group1","group2"],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  const demoProjectJSONOriginal = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n  const scootersProjectJSONOriginal = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n\n  let ConfigService, ProjectService, $rootScope, $httpBackend, demoProjectJSON, scootersProjectJSON;\n  beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n    ConfigService = _ConfigService_;\n    ProjectService = _ProjectService_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n    demoProjectJSON = JSON.parse(JSON.stringify(demoProjectJSONOriginal));\n    scootersProjectJSON = JSON.parse(JSON.stringify(scootersProjectJSONOriginal));\n  }));\n\n  describe('ProjectService', () => {\n    const projectIdDefault = 1;\n    const projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n    const projectURL = projectBaseURL + \"project.json\";\n    const saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n    const commitMessageDefault = \"Made simple changes\";\n    const defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n    const wiseBaseURL = \"/wise\";\n    const i18nURL_common_en = \"wise5/i18n/i18n_en.json\";\n    const i18nURL_vle_en = \"wise5/vle/i18n/i18n_en.json\";\n    const sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    const sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n    function createNormalSpy() {\n      spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n        if (param === \"projectBaseURL\") {\n          return projectBaseURL;\n        } else if (param === \"projectURL\") {\n          return projectURL;\n        } else if (param === \"saveProjectURL\") {\n          return saveProjectURL;\n        } else if (param === \"wiseBaseURL\") {\n          return wiseBaseURL;\n        }\n      });\n    }\n\n    it('should replace asset paths in non-html component content', () => {\n      createNormalSpy();\n      const contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should not replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathExpected = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    xit('should retrieve project when Config.projectURL is valid', () => {\n      createNormalSpy();\n      spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n      spyOn(ProjectService, \"parseProject\");\n      $httpBackend.when('GET', new RegExp(projectURL)).respond(scootersProjectJSON);\n      $httpBackend.expectGET(new RegExp(projectURL));\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const projectPromise = ProjectService.retrieveProject();\n      $httpBackend.flush();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n      expect(ProjectService.parseProject).toHaveBeenCalled();\n      expect(ProjectService.project).toEqual(scootersProjectJSON);\n    });\n\n    it('should not retrieve project when Config.projectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      const project = ProjectService.retrieveProject();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(project).toBeNull();\n    });\n\n    // MARK: Save Project\n    xit('should save project', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      $httpBackend.when('GET', /^wise5\\/components\\/.*/).respond(200, '');\n      //$httpBackend.when('GET', 'wise5/components/animation/i18n/i18n_en.json').respond(200, '');\n      //$httpBackend.when('GET', 'wise5/components/audioOscillator/i18n/i18n_en.json').respond(200, '');\n      $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      $httpBackend.expectPOST(saveProjectURL);\n      $httpBackend.flush();\n      $httpBackend.verifyNoOutstandingExpectation(false); // <-- no unnecessary $digest\n    });\n\n    it('should not save project when Config.saveProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not save project when Config.projectId is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    // MARK: ThemePath\n    it('should get default theme path when theme is not defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/default\";\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n    it('should get project theme path when theme is defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/\" + demoProjectTheme;\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n    // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n    // TODO: add test for ProjectService.getAllPaths()\n    // TODO: add test for ProjectService.consolidatePaths()\n    // TODO: add test for ProjectService.consumePathsUntilNodeId()\n    // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n    // TODO: add test for ProjectService.removeNodeIdFromPaths()\n    // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n    // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n    // TODO: add test for ProjectService.arePathsEmpty()\n    // TODO: add test for ProjectService.getPathsThatContainNodeId()\n    // TODO: add test for ProjectService.getNonEmptyPathIndex()\n    // TODO: add test for ProjectService.getBranches()\n    // TODO: add test for ProjectService.findBranches()\n\n    // TODO: add test for ProjectService.createBranchMetaObject()\n    // TODO: add test for ProjectService.findNextCommonNodeId()\n    // TODO: add test for ProjectService.allPathsContainNodeId()\n    // TODO: add test for ProjectService.trimPathsUpToNodeId()\n    // TODO: add test for ProjectService.extractPathsUpToNodeId()\n    // TODO: add test for ProjectService.removeDuplicatePaths()\n    // TODO: add test for ProjectService.pathsEqual()\n\n    // TODO: add test for ProjectService.isNodeIdInABranch()\n    // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n    // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n    // TODO: add test for ProjectService.replaceComponent()\n    // TODO: add test for ProjectService.createGroup()\n    // TODO: add test for ProjectService.createNode()\n    // TODO: add test for ProjectService.createNodeInside()\n    // TODO: add test for ProjectService.createNodeAfter()\n    // TODO: add test for ProjectService.insertNodeAfterInGroups()\n    // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n    // TODO: add test for ProjectService.insertNodeInsideInGroups()\n    // TODO: add test for ProjectService.insertNodeInsideOnlyUpdateTransitions()\n\n    // MARK: Tests for Node and Group Id functions\n    it('should return the start node of the project', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const expectedStartNodeId = \"node1\";  // Demo project's start node id\n      const actualStartNodeId = ProjectService.getStartNodeId();\n      expect(actualStartNodeId).toEqual(expectedStartNodeId);\n    });\n\n    it('should return the node by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1 = ProjectService.getNodeById(\"node1\");\n      expect(node1.type).toEqual(\"node\");\n      expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n      expect(node1.components.length).toEqual(1);\n\n      // Call getNodeId with null and expect a null return value\n      const nodeBadArgs = ProjectService.getNodeById();\n      expect(nodeBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeNE = ProjectService.getNodeById(\"node999\");\n      expect(nodeNE).toBeNull();\n    });\n\n    it('should return the node title by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n      expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n      // Call getNodeTitleByNodeId with null and expect a null return value\n      const nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n      expect(nodeTitleBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n      expect(nodeTitleNE).toBeNull();\n    });\n\n    // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n    // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n    it('should return the next available node id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextNodeIdExpected = \"node41\";      // This should be the next available node id.\n      const nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n      expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n    });\n\n    it('should return the next available group id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n      const nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n      expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n    });\n\n    it('should return the group ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n      const groupIdsActual = ProjectService.getGroupIds();\n      expect(groupIdsActual).toEqual(groupIdsExpected);\n    });\n\n    it('should return the node ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n        'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n        'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n        'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n        'node38', 'node39', 'nodeWithNoComponents'];      // This should be the node ids in the project\n      const nodeIdsActual = ProjectService.getNodeIds();\n      expect(nodeIdsActual).toEqual(nodeIdsExpected);\n    });\n\n    it('should get the component by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toBeNull();\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toBeNull();\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toBeNull();\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toBeNull();\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).not.toBe(null);\n      expect(componentExists.type).toEqual(\"HTML\");\n\n      const componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).not.toBe(null);\n      expect(componentExists2.type).toEqual(\"embedded\");\n      expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n    });\n\n    it('should get the component position by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toEqual(-1);\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toEqual(-1);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toEqual(-1);\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toEqual(-1);\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).toEqual(0);\n\n      const componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).toEqual(1);\n    });\n\n    it('should get the components by node id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n      expect(nullNodeIdResult).toEqual([]);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n      expect(nodeIdDNEResult).toEqual([]);\n\n      // nodeId exists but the node.components is null\n      const nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n      expect(nodeWithNullComponentResult).toEqual([]);\n\n      // nodeId is are valid and the node exists in the project\n      const nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n      expect(nodeExistsResult).not.toBe(null);\n      expect(nodeExistsResult.length).toEqual(1);\n      expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n      const nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n      expect(nodeExistsResult2).not.toBe(null);\n      expect(nodeExistsResult2.length).toEqual(7);\n      expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n      expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n    });\n\n    // TODO: add test for ProjectService.moveNodesInside()\n    // TODO: add test for ProjectService.moveNodesAfter()\n    // TODO: add test for ProjectService.deconsteNode()\n    // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n    // TODO: add test for ProjectService.removeNodeIdFromGroups()\n    // TODO: add test for ProjectService.removeNodeIdFromNodes()\n    // TODO: add test for ProjectService.createComponent()\n    // TODO: add test for ProjectService.addComponentToNode()\n    // TODO: add test for ProjectService.moveComponentUp()\n    // TODO: add test for ProjectService.moveComponentDown()\n    // TODO: add test for ProjectService.deconsteComponent()\n\n    it('should return the max score of the project', () => {\n      // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n      // Sample Scooter Project's max score is 18.\n      ProjectService.setProject(scootersProjectJSON);\n      const scootersProjectMaxScoreExpected = 18;\n      const scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n    });\n\n    it('should not add space if it does exist', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(2);\n      const space = {\n        \"id\": \"public\",\n        \"name\": \"Public\",\n        \"isPublic\": true,\n        \"isShareWithNotebook\": true\n      };\n      ProjectService.addSpace(space);\n      expect(spaces.length).toEqual(2);\n      expect(spaces[0].id).toEqual(\"public\");\n      expect(spaces[1].id).toEqual(\"ideasAboutGlobalClimateChange\");\n    });\n\n    it('should add space if it doesn\\'t exist', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(2);\n      const space = {\n        \"id\": \"newSpace\",\n        \"name\": \"New Space to share your thoughts\",\n        \"isPublic\": true,\n        \"isShareWithNotebook\": false\n      };\n      ProjectService.addSpace(space);\n      expect(spaces.length).toEqual(3);\n      expect(spaces[0].id).toEqual(\"public\");\n      expect(spaces[1].id).toEqual(\"ideasAboutGlobalClimateChange\");\n      expect(spaces[2].id).toEqual(\"newSpace\");\n    });\n\n    it('should not remove a space that does not exist', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(1);\n      ProjectService.removeSpace(\"public\");\n      expect(spaces.length).toEqual(1);\n    });\n\n    it('should remove a space that does exist', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(1);\n      ProjectService.removeSpace(\"sharePictures\");\n      expect(spaces.length).toEqual(0);\n    });\n\n    it('should check order between step and step/group', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdAfter('node1', 'node2')).toBeTruthy();\n      expect(ProjectService.isNodeIdAfter('node2', 'node1')).toBeFalsy();\n      expect(ProjectService.isNodeIdAfter('node1', 'group2')).toBeTruthy();\n      expect(ProjectService.isNodeIdAfter('node20', 'group1')).toBeFalsy();\n    });\n\n    it('should check order between group and step/group', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdAfter('group1', 'group2')).toBeTruthy();\n      expect(ProjectService.isNodeIdAfter('group2', 'group1')).toBeFalsy();\n      expect(ProjectService.isNodeIdAfter('group1', 'node20')).toBeTruthy();\n      expect(ProjectService.isNodeIdAfter('group2', 'node1')).toBeFalsy();\n    });\n\n    it('should remove transitions going out of group in child nodes of group', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.getTransitionsByFromNodeId('node18').length).toEqual(1);\n      expect(ProjectService.getTransitionsByFromNodeId('node19').length).toEqual(1);\n      ProjectService.removeTransitionsOutOfGroup('group1');\n      expect(ProjectService.getTransitionsByFromNodeId('node18').length).toEqual(1);\n      expect(ProjectService.getTransitionsByFromNodeId('node19').length).toEqual(0);\n    });\n\n    it('should remove node from group', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(19);\n      ProjectService.removeNodeIdFromGroup(ProjectService.getNodeById('group1'), 'node3');\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(18);\n      expect(ProjectService.getGroupStartId('group1')).toEqual('node1');\n      ProjectService.removeNodeIdFromGroup(ProjectService.getNodeById('group1'), 'node4');\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(17);\n      expect(ProjectService.getGroupStartId('group1')).toEqual('node1');\n    });\n\n    it('should remove start node from group', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(19);\n      ProjectService.removeNodeIdFromGroup(ProjectService.getNodeById('group1'), 'node1');\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(18);\n      expect(ProjectService.getGroupStartId('group1')).toEqual('node2');\n      ProjectService.removeNodeIdFromGroup(ProjectService.getNodeById('group1'), 'node2');\n      expect(ProjectService.getChildNodeIdsById('group1').length).toEqual(17);\n      expect(ProjectService.getGroupStartId('group1')).toEqual('node3');\n    });\n\n    it('should identify branch start point', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isBranchStartPoint(\"group1\")).toBeFalsy();\n      expect(ProjectService.isBranchStartPoint(\"node29\")).toBeFalsy();\n      expect(ProjectService.isBranchStartPoint(\"node32\")).toBeFalsy();\n      expect(ProjectService.isBranchStartPoint(\"node30\")).toBeTruthy();\n    });\n\n    it('should identify branch merge point', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isBranchMergePoint(\"group1\")).toBeFalsy();\n      expect(ProjectService.isBranchMergePoint(\"node30\")).toBeFalsy();\n      expect(ProjectService.isBranchMergePoint(\"node32\")).toBeFalsy();\n      expect(ProjectService.isBranchMergePoint(\"node34\")).toBeTruthy();\n    });\n\n    it('should get path when nodeId is found', () => {\n      const paths = [\n        ['node1', 'node2', 'node3', 'node4', 'node5']\n      ];\n      const subPath = ProjectService.consumePathsUntilNodeId(paths, 'node3');\n      const expectedPath = ['node1', 'node2'];\n      expect(JSON.stringify(subPath)).toEqual(JSON.stringify(expectedPath));\n\n      const paths2 = [\n        ['node1', 'node2', 'node3', 'node4', 'node5'],\n        ['node1', 'node2', 'node4', 'node3', 'node5']\n      ];\n      const subPath2 = ProjectService.consumePathsUntilNodeId(paths2, 'node3');\n      const expectedPath2 = ['node1', 'node2', 'node4'];\n      expect(JSON.stringify(subPath2)).toEqual(JSON.stringify(expectedPath2));\n    });\n\n    it('should get path when nodeId is found as first', () => {\n      const paths = [\n        ['node1', 'node2', 'node3', 'node4', 'node5']\n      ];\n      const subPath = ProjectService.consumePathsUntilNodeId(paths, 'node1');\n      const expectedPath = [];\n      expect(JSON.stringify(subPath)).toEqual(JSON.stringify(expectedPath));\n\n      const paths2 = [\n        ['node1', 'node2', 'node3', 'node4', 'node5'],\n        ['node1', 'node2', 'node4', 'node3', 'node5']\n      ];\n      const subPath2 = ProjectService.consumePathsUntilNodeId(paths2, 'node1');\n      const expectedPath2 = [];\n      expect(JSON.stringify(subPath2)).toEqual(JSON.stringify(expectedPath2));\n    });\n\n    it('should get path when nodeId is not found', () => {\n      const paths = [\n        ['node1', 'node2', 'node3', 'node4', 'node5']\n      ];\n      const subPath = ProjectService.consumePathsUntilNodeId(paths, 'node6');\n      const expectedPath = [];\n      expect(JSON.stringify(subPath)).toEqual(JSON.stringify(expectedPath));\n\n      const paths2 = [\n        ['node1', 'node2', 'node3', 'node4', 'node5'],\n        ['node1', 'node2', 'node4', 'node3', 'node5']\n      ];\n      const subPath2 = ProjectService.consumePathsUntilNodeId(paths2, 'node6');\n      const expectedPath2 = [];\n      expect(JSON.stringify(subPath2)).toEqual(JSON.stringify(expectedPath2));\n    });\n\n    it('should be able to insert a step node after another step node', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('node1'), 'node2')).toBeTruthy();\n      ProjectService.insertNodeAfterInTransitions(ProjectService.getNodeById('node1'), 'node2');\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('node1'), 'node2')).toBeFalsy();\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('node2'), 'node1')).toBeTruthy();\n    });\n\n    it('should be able to insert an activity node after another activity node', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('group1'), 'group2')).toBeTruthy();\n      ProjectService.insertNodeAfterInTransitions(ProjectService.getNodeById('group1'), 'group2');\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('group1'), 'group2')).toBeFalsy();\n      expect(ProjectService.nodeHasTransitionToNodeId(ProjectService.getNodeById('group2'), 'group1')).toBeTruthy();\n    });\n\n    it('should not be able to insert a node after another node when they are different types', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(() => {\n        ProjectService.insertNodeAfterInTransitions(ProjectService.getNodeById('node1'), 'group2');\n      }).toThrow('Error: insertNodeAfterInTransitions() nodes are not the same type');\n    });\n\n    it('should be able to insert a step node inside an group node', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const node1 = ProjectService.getNodeById('node1');\n      const node19 = ProjectService.getNodeById('node19');\n      expect(ProjectService.nodeHasTransitionToNodeId(node1, 'node2')).toBeTruthy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node1, 'node20')).toBeFalsy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node19, 'node20')).toBeTruthy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node19, 'node1')).toBeFalsy();\n      ProjectService.insertNodeInsideOnlyUpdateTransitions('node1', 'group2');\n      expect(ProjectService.nodeHasTransitionToNodeId(node1, 'node20')).toBeTruthy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node1, 'node2')).toBeFalsy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node19, 'node1')).toBeTruthy();\n      expect(ProjectService.nodeHasTransitionToNodeId(node19, 'node20')).toBeFalsy();\n    });\n\n    it('should be able to insert a group node inside a group node', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const group1 = ProjectService.getNodeById('group1');\n      const group2 = ProjectService.getNodeById('group2');\n      expect(ProjectService.nodeHasTransitionToNodeId(group1, 'group2')).toBeTruthy();\n      expect(ProjectService.nodeHasTransitionToNodeId(group2, 'group1')).toBeFalsy();\n      ProjectService.insertNodeInsideOnlyUpdateTransitions('group2', 'group0');\n      expect(ProjectService.nodeHasTransitionToNodeId(group2, 'group1')).toBeTruthy();\n      /*\n       * the transition from group1 to group2 still remains because it is usually\n       * removed by calling removeNodeIdFromTransitions() but we don't call it here\n       */\n      expect(ProjectService.nodeHasTransitionToNodeId(group1, 'group2')).toBeTruthy();\n    });\n\n    it('should not be able to insert a step node inside a step node', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(() => {\n        ProjectService.insertNodeInsideOnlyUpdateTransitions('node1', 'node2');\n      }).toThrow('Error: insertNodeInsideOnlyUpdateTransitions() second parameter must be a group');\n    });\n  });\n});\n"]}