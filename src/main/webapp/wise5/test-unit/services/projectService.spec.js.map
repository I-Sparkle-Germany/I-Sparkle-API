{"version":3,"sources":["projectService.spec.es6"],"names":["describe","beforeEach","mock","module","name","ConfigService","ProjectService","$rootScope","$httpBackend","inject","_ConfigService_","_ProjectService_","_$rootScope_","_$httpBackend_","demoProjectJSON","window","mocks","demoProjectJSONString","JSON","stringify","scootersProjectJSON","scootersProjectJSONString","invalidProjectJSONString","projectIdDefault","projectBaseURL","projectURL","registerNewProjectURL","saveProjectURL","commitMessageDefault","defaultCommitHistory","wiseBaseURL","i18nURL_common_en","i18nURL_vle_en","sampleI18N_common_en","sampleI18N_vle_en","createNormalSpy","spyOn","and","callFake","param","it","contentString","contentStringReplacedAssetPathExpected","contentStringReplacedAssetPathActual","replaceAssetPaths","expect","getConfigParam","toHaveBeenCalledWith","toEqual","xit","callThrough","when","RegExp","respond","expectGET","projectPromise","retrieveProject","flush","setProject","parseProject","toHaveBeenCalled","project","returnValue","toBeNull","newProjectIdExpected","newProjectIdActualPromise","registerNewProject","expectPOST","e","message","data","saveProject","getProjectId","expectedThemePath","actualThemePath","getThemePath","demoProjectTheme","theme","expectedStartNodeId","actualStartNodeId","getStartNodeId","nullProjectStartNodeId","node1","getNodeById","type","title","components","length","nodeBadArgs","nodeNE","node1Title","getNodeTitleByNodeId","nodeTitleBadArgs","nodeTitleNE","nextNodeIdExpected","nextNodeIdActual","getNextAvailableNodeId","nextGroupIdExpected","nextGroupIdActual","getNextAvailableGroupId","groupIdsExpected","groupIdsActual","getGroupIds","nodeIdsExpected","nodeIdsActual","getNodeIds","nullNodeIdResult","getComponentByNodeIdAndComponentId","nullComponentIdResult","nodeIdDNEResult","componentIdDNEResult","componentExists","not","toBe","componentExists2","url","getComponentPositionByNodeIdAndComponentId","getComponentsByNodeId","nodeWithNullComponentResult","nodeExistsResult","id","nodeExistsResult2","demoProjectMaxScoreActual","getMaxScore","scootersProjectMaxScoreExpected","scootersProjectMaxScoreActual"],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  var ConfigService, ProjectService, $rootScope, $httpBackend;\n\n  beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n    ConfigService = _ConfigService_;\n    ProjectService = _ProjectService_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n  }));\n\n  describe('ProjectService', () => {\n    // Load sample projects\n    var demoProjectJSON = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n    var demoProjectJSONString = JSON.stringify(demoProjectJSON);\n    var scootersProjectJSON = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n    var scootersProjectJSONString = JSON.stringify(scootersProjectJSON);\n    var invalidProjectJSONString = \"{'a':1\";\n\n    var projectIdDefault = 1;\n    var projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n    var projectURL = projectBaseURL + \"project.json\";\n    var registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n    var saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n    var commitMessageDefault = \"Made simple changes\";\n    var defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n    var wiseBaseURL = \"/wise\";\n\n    // i18n\n    var i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n    var i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n    let sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    let sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n    function createNormalSpy() {\n      spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n        if (param === \"projectBaseURL\") {\n          return projectBaseURL;\n        } else if (param === \"projectURL\") {\n          return projectURL;\n        } else if (param === \"registerNewProjectURL\") {\n          return registerNewProjectURL;\n        } else if (param === \"saveProjectURL\") {\n          return saveProjectURL;\n        } else if (param === \"wiseBaseURL\") {\n          return wiseBaseURL;\n        }\n      });\n    }\n\n    it('should replace asset paths in non-html component content', () => {\n      createNormalSpy();\n      let contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n      let contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n      let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should replace asset paths in html component content', () => {\n      createNormalSpy();\n      let contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n      let contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n      let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should not replace asset paths in html component content', () => {\n      createNormalSpy();\n      let contentString = \"<source type=\\\"video/mp4\\\">\";\n      let contentStringReplacedAssetPathExpected = \"<source type=\\\"video/mp4\\\">\";\n      let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    xit('should retrieve project when Config.projectURL is valid', () => {\n      createNormalSpy();\n      spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n      spyOn(ProjectService, \"parseProject\");\n      $httpBackend.when('GET', new RegExp(projectURL)).respond(scootersProjectJSON);\n      $httpBackend.expectGET(new RegExp(projectURL));\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      let projectPromise = ProjectService.retrieveProject();\n      $httpBackend.flush();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n      expect(ProjectService.parseProject).toHaveBeenCalled();\n      expect(ProjectService.project).toEqual(scootersProjectJSON);\n    });\n\n    it('should not retrieve project when Config.projectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      let project = ProjectService.retrieveProject();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(project).toBeNull();\n    });\n\n    // MARK: Register Project\n    xit('should register new project', () => {\n      createNormalSpy();\n      var newProjectIdExpected = projectIdDefault; // Id of new project created on the server\n      $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      $httpBackend.flush();\n      $httpBackend.expectPOST(registerNewProjectURL);\n    });\n\n    it('should not register new project when Config.registerNewProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      var newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not register new project when projectJSON is invalid JSON', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n      try {\n        var newProjectIdActualPromise = ProjectService.registerNewProject(invalidProjectJSONString, commitMessageDefault);\n        expect(1).toEqual(2);   // This line should not get called because the above line will throw an error\n      } catch (e) {\n        expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n        expect(e.message).toEqual(\"Invalid projectJSONString.\")\n      }\n    });\n\n    // MARK: Save Project\n    xit('should save project', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      $httpBackend.flush();\n      $httpBackend.expectPOST(saveProjectURL);\n    });\n\n    it('should not save project when Config.saveProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not save project when Config.projectId is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      var newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    // MARK: ThemePath\n    it('should get default theme path when theme is not defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let expectedThemePath = wiseBaseURL + \"/wise5/themes/default\";\n      let actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n    it('should get project theme path when theme is defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n      let demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n      let expectedThemePath = wiseBaseURL + \"/wise5/themes/\" + demoProjectTheme;\n      let actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n\n    // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n    // TODO: add test for ProjectService.getAllPaths()\n    // TODO: add test for ProjectService.consolidatePaths()\n    // TODO: add test for ProjectService.consumePathsUntilNodeId()\n    // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n    // TODO: add test for ProjectService.removeNodeIdFromPaths()\n    // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n    // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n    // TODO: add test for ProjectService.arePathsEmpty()\n    // TODO: add test for ProjectService.getPathsThatContainNodeId()\n    // TODO: add test for ProjectService.getNonEmptyPathIndex()\n    // TODO: add test for ProjectService.getBranches()\n    // TODO: add test for ProjectService.findBranches()\n\n    // TODO: add test for ProjectService.createBranchMetaObject()\n    // TODO: add test for ProjectService.findNextCommonNodeId()\n    // TODO: add test for ProjectService.allPathsContainNodeId()\n    // TODO: add test for ProjectService.trimPathsUpToNodeId()\n    // TODO: add test for ProjectService.extractPathsUpToNodeId()\n    // TODO: add test for ProjectService.removeDuplicatePaths()\n    // TODO: add test for ProjectService.pathsEqual()\n\n    // TODO: add test for ProjectService.isNodeIdInABranch()\n    // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n    // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n    // TODO: add test for ProjectService.replaceComponent()\n    // TODO: add test for ProjectService.createGroup()\n    // TODO: add test for ProjectService.createNode()\n    // TODO: add test for ProjectService.createNodeInside()\n    // TODO: add test for ProjectService.createNodeAfter()\n    // TODO: add test for ProjectService.insertNodeAfterInGroups()\n    // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n    // TODO: add test for ProjectService.insertNodeInsideInGroups()\n    // TODO: add test for ProjectService.insertNodeInsideInTransitions()\n\n    // MARK: Tests for Node and Group Id functions\n    // test ProjectService.getStartNodeId()\n    it('should return the start node of the project', () => {\n      ProjectService.setProject(demoProjectJSON);  // Set the sample project and parse it\n      let expectedStartNodeId = \"node1\";  // Demo project's start node id\n      let actualStartNodeId = ProjectService.getStartNodeId();\n      expect(actualStartNodeId).toEqual(expectedStartNodeId);\n\n      ProjectService.setProject(null);  // Set a null project\n      let nullProjectStartNodeId = ProjectService.getStartNodeId();\n      expect(nullProjectStartNodeId).toBeNull();\n    });\n\n    // test ProjectService.getNodeById()\n    it('should return the node by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let node1 = ProjectService.getNodeById(\"node1\");\n      expect(node1.type).toEqual(\"node\");\n      expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n      expect(node1.components.length).toEqual(1);\n\n      // Call getNodeId with null and expect a null return value\n      let nodeBadArgs = ProjectService.getNodeById();\n      expect(nodeBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      let nodeNE = ProjectService.getNodeById(\"node999\");\n      expect(nodeNE).toBeNull();\n    });\n\n    // test ProjectService.getNodeTitleByNodeId()\n    it('should return the node title by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n      expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n      // Call getNodeTitleByNodeId with null and expect a null return value\n      let nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n      expect(nodeTitleBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      let nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n      expect(nodeTitleNE).toBeNull();\n    });\n\n    // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n    // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n    // test ProjectService.getNextAvailableNodeId()\n    it('should return the next available node id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let nextNodeIdExpected = \"node41\";      // This should be the next available node id.\n      let nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n      expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n    });\n\n    // test ProjectService.getNextAvailableGroupId()\n    it('should return the next available group id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n      let nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n      expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n    });\n\n    // test ProjectService.getGroupIds()\n    it('should return the group ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n      let groupIdsActual = ProjectService.getGroupIds();\n      expect(groupIdsActual).toEqual(groupIdsExpected);\n    });\n\n    // test ProjectService.getNodeIds()\n    it('should return the node ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      let nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n        'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n        'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n        'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n        'node38', 'node39', 'nodeWithNoComponents'];      // This should be the node ids in the project\n      let nodeIdsActual = ProjectService.getNodeIds();\n      expect(nodeIdsActual).toEqual(nodeIdsExpected);\n    });\n\n    // test ProjectService.getComponentByNodeIdAndComponentId()\n    it('should get the component by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      // nodeId is null\n      let nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toBeNull();\n\n      // componentId is null\n      let nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toBeNull();\n\n      // nodeId doesn't exist\n      let nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toBeNull();\n\n      // componentId doesn't exist\n      let componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toBeNull();\n\n      // nodeId and componentId are valid and the component exists in the project\n      let componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).not.toBe(null);\n      expect(componentExists.type).toEqual(\"HTML\");\n\n      let componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).not.toBe(null);\n      expect(componentExists2.type).toEqual(\"embedded\");\n      expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n    });\n\n    // test ProjectService.getComponentPositionByNodeIdAndComponentId()\n    it('should get the component position by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      // nodeId is null\n      let nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toEqual(-1);\n\n      // componentId is null\n      let nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toEqual(-1);\n\n      // nodeId doesn't exist\n      let nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toEqual(-1);\n\n      // componentId doesn't exist\n      let componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toEqual(-1);\n\n      // nodeId and componentId are valid and the component exists in the project\n      let componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).toEqual(0);\n\n      let componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).toEqual(1);\n    });\n\n    // test ProjectService.getComponentsByNodeId()\n    it('should get the components by node id', () => {\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample project and parse it\n      // nodeId is null\n      let nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n      expect(nullNodeIdResult).toEqual([]);\n\n      // nodeId doesn't exist\n      let nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n      expect(nodeIdDNEResult).toEqual([]);\n\n      // nodeId exists but the node.components is null\n      let nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n      expect(nodeWithNullComponentResult).toEqual([]);\n\n      // nodeId is are valid and the node exists in the project\n      let nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n      expect(nodeExistsResult).not.toBe(null);\n      expect(nodeExistsResult.length).toEqual(1);\n      expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n      let nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n      expect(nodeExistsResult2).not.toBe(null);\n      expect(nodeExistsResult2.length).toEqual(7);\n      expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n      expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n    });\n\n    // TODO: add test for ProjectService.moveNodesInside()\n    // TODO: add test for ProjectService.moveNodesAfter()\n    // TODO: add test for ProjectService.deleteNode()\n    // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n    // TODO: add test for ProjectService.removeNodeIdFromGroups()\n    // TODO: add test for ProjectService.removeNodeIdFromNodes()\n    // TODO: add test for ProjectService.createComponent()\n    // TODO: add test for ProjectService.addComponentToNode()\n    // TODO: add test for ProjectService.moveComponentUp()\n    // TODO: add test for ProjectService.moveComponentDown()\n    // TODO: add test for ProjectService.deleteComponent()\n\n    // test ProjectService.getMaxScore()\n    it('should return the max score of the project', () => {\n      // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n      ProjectService.setProject(demoProjectJSON);  // Set the sample demo project and parse it\n      let demoProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n      // Sample Scooter Project's max score is 18.\n      ProjectService.setProject(scootersProjectJSON);  // Set the sample scooter project and parse it\n      let scootersProjectMaxScoreExpected = 18;\n      let scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n    });\n  });\n});\n"]}