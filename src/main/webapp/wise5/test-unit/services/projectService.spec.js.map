{"version":3,"sources":["projectService.spec.es6"],"names":[],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', function () {\n    beforeEach(angular.mock.module(mainModule.name));\n\n    var ConfigService, ProjectService, $rootScope, $httpBackend;\n\n    beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n        ConfigService = _ConfigService_;\n        ProjectService = _ProjectService_;\n        $rootScope = _$rootScope_;\n        $httpBackend = _$httpBackend_;\n    }));\n\n    describe('ProjectService', function () {\n\n        // Load sample project\n        var projectJSON = window.mocks['test-unit/curriculum/SelfPropelledVehiclesChallenge/project'];\n\n        var projectIdDefault = 1;\n        var projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n        var projectURL = projectBaseURL + \"project.json\";\n        var registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n        var saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n        var commitMessageDefault = \"Made simple changes\";\n\n        function createNormalSpy() {\n            spyOn(ConfigService, \"getConfigParam\").and.callFake(function(param) {\n                if (param === \"projectBaseURL\") {\n                    return projectBaseURL;\n                } else if (param === \"projectURL\") {\n                    return projectURL;\n                } else if (param === \"registerNewProjectURL\") {\n                    return registerNewProjectURL;\n                } else if (param === \"saveProjectURL\") {\n                    return saveProjectURL;\n                }\n            });\n        };\n\n        beforeEach(function() {\n\n        });\n\n        it('should replace asset paths in non-html component content', function () {\n            createNormalSpy();\n            let contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should replace asset paths in html component content', function () {\n            createNormalSpy();\n            let contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n            let contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n            expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n        });\n\n        it('should retrieve project when Config.projectURL is valid', function() {\n            createNormalSpy();\n            spyOn(ProjectService, \"setProject\").and.callThrough();   // actually call through the function\n            spyOn(ProjectService, \"parseProject\");\n            $httpBackend.when('GET', projectURL).respond(projectJSON);\n            $httpBackend.expectGET(projectURL);\n            let projectPromise = ProjectService.retrieveProject();\n            $httpBackend.flush();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(ProjectService.setProject).toHaveBeenCalledWith(projectJSON);\n            expect(ProjectService.parseProject).toHaveBeenCalled();\n            expect(ProjectService.project).toEqual(projectJSON);\n        });\n\n        it('should not retrieve project when Config.projectURL is undefined', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            let project = ProjectService.retrieveProject();\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n            expect(project).toBeNull();\n        });\n\n        // MARK: Register Project\n        it('should register new project', function() {\n            createNormalSpy();\n            var newProjectIdExpected = projectIdDefault;   // Id of new project created on the server\n            $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(projectJSON, commitMessageDefault);\n            $httpBackend.flush();\n            $httpBackend.expectPOST(registerNewProjectURL);\n        });\n\n        it('should not register new project when Config.registerNewProjectURL is undefined', function() {\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            var newProjectIdActualPromise = ProjectService.registerNewProject(projectJSON, commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        // TODO: add test for ProjectService.registerNewProject when projectJSON is invalid JSON\n\n        // MARK: Save Project\n        it('should not save project when Config.saveProjectURL is undefined', function() {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n            var newProjectIdActualPromise = ProjectService.saveProject(projectJSON, commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        it('should not save project when Config.projectId is undefined', function() {\n            spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n            spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n            var newProjectIdActualPromise = ProjectService.saveProject(projectJSON, commitMessageDefault);\n            expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n            expect(newProjectIdActualPromise).toBeNull();\n        });\n\n        // TODO: add test for ProjectService.saveProject when projectJSON is invalid JSON\n        // TODO: add test for ProjectService.saveProject when Config.saveProjectURL and Config.projectId are set and projectJSON is valid\n\n\n        // MARK: Tests for Node and Group Id functions\n        it('should return the next available node id', function() {\n            createNormalSpy();\n            ProjectService.setProject(projectJSON);  // Set the sample project and parse it\n            let nextNodeIdExpected = \"node8\";      // This should be the next available node id.\n            let nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n            expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n        });\n\n        it('should return the next available group id', function() {\n            createNormalSpy();\n            ProjectService.setProject(projectJSON);  // Set the sample project and parse it\n            let nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n            let nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n            expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n        });\n\n        it('should return the group ids in the project', function() {\n            createNormalSpy();\n            ProjectService.setProject(projectJSON);  // Set the sample project and parse it\n            let groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n            let groupIdsActual = ProjectService.getGroupIds();\n            expect(groupIdsActual).toEqual(groupIdsExpected);\n        });\n\n        // TODO: add test for ProjectService.getNodeIds()\n        // TODO: add test for ProjectService.moveNodesInside()\n        // TODO: add test for ProjectService.moveNodesAfter()\n        // TODO: add test for ProjectService.deleteNode()\n        // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n        // TODO: add test for ProjectService.removeNodeIdFromGroups()\n        // TODO: add test for ProjectService.removeNodeIdFromNodes()\n        // TODO: add test for ProjectService.createComponent()\n        // TODO: add test for ProjectService.addComponentToNode()\n        // TODO: add test for ProjectService.moveComponentUp()\n        // TODO: add test for ProjectService.moveComponentDown()\n        // TODO: add test for ProjectService.deleteComponent()\n        // TODO: add test for ProjectService.getMaxScore()\n\n    });\n});"]}