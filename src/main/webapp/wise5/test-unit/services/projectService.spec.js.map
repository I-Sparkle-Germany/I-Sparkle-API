<<<<<<< HEAD
{"version":3,"sources":["projectService.spec.es6"],"names":["describe","beforeEach","mock","module","name","ConfigService","ProjectService","$rootScope","$httpBackend","inject","_ConfigService_","_ProjectService_","_$rootScope_","_$httpBackend_","demoProjectJSON","window","mocks","demoProjectJSONString","JSON","stringify","scootersProjectJSON","scootersProjectJSONString","invalidProjectJSONString","projectIdDefault","projectBaseURL","projectURL","registerNewProjectURL","saveProjectURL","commitMessageDefault","defaultCommitHistory","wiseBaseURL","i18nURL_common_en","i18nURL_vle_en","sampleI18N_common_en","sampleI18N_vle_en","createNormalSpy","spyOn","and","callFake","param","it","contentString","contentStringReplacedAssetPathExpected","contentStringReplacedAssetPathActual","replaceAssetPaths","expect","getConfigParam","toHaveBeenCalledWith","toEqual","xit","callThrough","when","RegExp","respond","expectGET","projectPromise","retrieveProject","flush","setProject","parseProject","toHaveBeenCalled","project","returnValue","toBeNull","newProjectIdExpected","newProjectIdActualPromise","registerNewProject","expectPOST","e","message","data","saveProject","getProjectId","expectedThemePath","actualThemePath","getThemePath","demoProjectTheme","theme","isNodeIdUsed","expectedStartNodeId","actualStartNodeId","getStartNodeId","nullProjectStartNodeId","node1","getNodeById","type","title","components","length","nodeBadArgs","nodeNE","node1Title","getNodeTitleByNodeId","nodeTitleBadArgs","nodeTitleNE","nextNodeIdExpected","nextNodeIdActual","getNextAvailableNodeId","nextGroupIdExpected","nextGroupIdActual","getNextAvailableGroupId","groupIdsExpected","groupIdsActual","getGroupIds","nodeIdsExpected","nodeIdsActual","getNodeIds","nullNodeIdResult","getComponentByNodeIdAndComponentId","nullComponentIdResult","nodeIdDNEResult","componentIdDNEResult","componentExists","not","toBe","componentExists2","url","getComponentPositionByNodeIdAndComponentId","getComponentsByNodeId","nodeWithNullComponentResult","nodeExistsResult","id","nodeExistsResult2","demoProjectMaxScoreActual","getMaxScore","scootersProjectMaxScoreExpected","scootersProjectMaxScoreActual","spaces","getSpaces","space","addSpace","removeSpace"],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let ConfigService, ProjectService, $rootScope, $httpBackend;\n  beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n    ConfigService = _ConfigService_;\n    ProjectService = _ProjectService_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n  }));\n\n  describe('ProjectService', () => {\n    // Load sample projects\n    const demoProjectJSON = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n    const demoProjectJSONString = JSON.stringify(demoProjectJSON);\n    const scootersProjectJSON = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n    const scootersProjectJSONString = JSON.stringify(scootersProjectJSON);\n    const invalidProjectJSONString = \"{'a':1\";\n\n    const projectIdDefault = 1;\n    const projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n    const projectURL = projectBaseURL + \"project.json\";\n    const registerNewProjectURL = \"http://localhost:8080/wise/project/new\";\n    const saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n    const commitMessageDefault = \"Made simple changes\";\n    const defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n    const wiseBaseURL = \"/wise\";\n\n    // i18n\n    const i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n    const i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n    const sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    const sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n    function createNormalSpy() {\n      spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n        if (param === \"projectBaseURL\") {\n          return projectBaseURL;\n        } else if (param === \"projectURL\") {\n          return projectURL;\n        } else if (param === \"registerNewProjectURL\") {\n          return registerNewProjectURL;\n        } else if (param === \"saveProjectURL\") {\n          return saveProjectURL;\n        } else if (param === \"wiseBaseURL\") {\n          return wiseBaseURL;\n        }\n      });\n    }\n\n    it('should replace asset paths in non-html component content', () => {\n      createNormalSpy();\n      const contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should not replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathExpected = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    xit('should retrieve project when Config.projectURL is valid', () => {\n      createNormalSpy();\n      spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n      spyOn(ProjectService, \"parseProject\");\n      $httpBackend.when('GET', new RegExp(projectURL)).respond(scootersProjectJSON);\n      $httpBackend.expectGET(new RegExp(projectURL));\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const projectPromise = ProjectService.retrieveProject();\n      $httpBackend.flush();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n      expect(ProjectService.parseProject).toHaveBeenCalled();\n      expect(ProjectService.project).toEqual(scootersProjectJSON);\n    });\n\n    it('should not retrieve project when Config.projectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      const project = ProjectService.retrieveProject();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(project).toBeNull();\n    });\n\n    // MARK: Register Project\n    xit('should register new project', () => {\n      createNormalSpy();\n      const newProjectIdExpected = projectIdDefault; // Id of new project created on the server\n      $httpBackend.when('POST', registerNewProjectURL).respond(newProjectIdExpected);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      $httpBackend.flush();\n      $httpBackend.expectPOST(registerNewProjectURL);\n    });\n\n    it('should not register new project when Config.registerNewProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.registerNewProject(scootersProjectJSONString, commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not register new project when projectJSON is invalid JSON', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(registerNewProjectURL);\n      try {\n        const newProjectIdActualPromise = ProjectService.registerNewProject(invalidProjectJSONString, commitMessageDefault);\n        expect(1).toEqual(2);   // This line should not get called because the above line will throw an error\n      } catch (e) {\n        expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"registerNewProjectURL\");\n        expect(e.message).toEqual(\"Invalid projectJSONString.\")\n      }\n    });\n\n    // MARK: Save Project\n    xit('should save project', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      $httpBackend.flush();\n      $httpBackend.expectPOST(saveProjectURL);\n    });\n\n    it('should not save project when Config.saveProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not save project when Config.projectId is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    // MARK: ThemePath\n    it('should get default theme path when theme is not defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/default\";\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n    it('should get project theme path when theme is defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/\" + demoProjectTheme;\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n    it('should find used node id in active nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"node1\")).toEqual(true);\n    });\n\n    it('should find used node id in inactive nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"node789\")).toEqual(true);\n    });\n\n    it('should not find used node id in active or inactive nodes', () => {\n      ProjectService.setProject(demoProjectJSON);\n      expect(ProjectService.isNodeIdUsed(\"nodedoesnotexist\")).toEqual(false);\n    });\n\n    // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n    // TODO: add test for ProjectService.getAllPaths()\n    // TODO: add test for ProjectService.consolidatePaths()\n    // TODO: add test for ProjectService.consumePathsUntilNodeId()\n    // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n    // TODO: add test for ProjectService.removeNodeIdFromPaths()\n    // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n    // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n    // TODO: add test for ProjectService.arePathsEmpty()\n    // TODO: add test for ProjectService.getPathsThatContainNodeId()\n    // TODO: add test for ProjectService.getNonEmptyPathIndex()\n    // TODO: add test for ProjectService.getBranches()\n    // TODO: add test for ProjectService.findBranches()\n\n    // TODO: add test for ProjectService.createBranchMetaObject()\n    // TODO: add test for ProjectService.findNextCommonNodeId()\n    // TODO: add test for ProjectService.allPathsContainNodeId()\n    // TODO: add test for ProjectService.trimPathsUpToNodeId()\n    // TODO: add test for ProjectService.extractPathsUpToNodeId()\n    // TODO: add test for ProjectService.removeDuplicatePaths()\n    // TODO: add test for ProjectService.pathsEqual()\n\n    // TODO: add test for ProjectService.isNodeIdInABranch()\n    // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n    // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n    // TODO: add test for ProjectService.replaceComponent()\n    // TODO: add test for ProjectService.createGroup()\n    // TODO: add test for ProjectService.createNode()\n    // TODO: add test for ProjectService.createNodeInside()\n    // TODO: add test for ProjectService.createNodeAfter()\n    // TODO: add test for ProjectService.insertNodeAfterInGroups()\n    // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n    // TODO: add test for ProjectService.insertNodeInsideInGroups()\n    // TODO: add test for ProjectService.insertNodeInsideInTransitions()\n\n    // MARK: Tests for Node and Group Id functions\n    // test ProjectService.getStartNodeId()\n    it('should return the start node of the project', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const expectedStartNodeId = \"node1\";  // Demo project's start node id\n      const actualStartNodeId = ProjectService.getStartNodeId();\n      expect(actualStartNodeId).toEqual(expectedStartNodeId);\n\n      ProjectService.setProject(null);  // Set a null project\n      const nullProjectStartNodeId = ProjectService.getStartNodeId();\n      expect(nullProjectStartNodeId).toBeNull();\n    });\n\n    // test ProjectService.getNodeById()\n    it('should return the node by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1 = ProjectService.getNodeById(\"node1\");\n      expect(node1.type).toEqual(\"node\");\n      expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n      expect(node1.components.length).toEqual(1);\n\n      // Call getNodeId with null and expect a null return value\n      const nodeBadArgs = ProjectService.getNodeById();\n      expect(nodeBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeNE = ProjectService.getNodeById(\"node999\");\n      expect(nodeNE).toBeNull();\n    });\n\n    // test ProjectService.getNodeTitleByNodeId()\n    it('should return the node title by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n      expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n      // Call getNodeTitleByNodeId with null and expect a null return value\n      const nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n      expect(nodeTitleBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n      expect(nodeTitleNE).toBeNull();\n    });\n\n    // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n    // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n    // test ProjectService.getNextAvailableNodeId()\n    it('should return the next available node id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextNodeIdExpected = \"node41\";      // This should be the next available node id.\n      const nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n      expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n    });\n\n    // test ProjectService.getNextAvailableGroupId()\n    it('should return the next available group id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n      const nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n      expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n    });\n\n    // test ProjectService.getGroupIds()\n    it('should return the group ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n      const groupIdsActual = ProjectService.getGroupIds();\n      expect(groupIdsActual).toEqual(groupIdsExpected);\n    });\n\n    // test ProjectService.getNodeIds()\n    it('should return the node ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n        'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n        'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n        'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n        'node38', 'node39', 'nodeWithNoComponents'];      // This should be the node ids in the project\n      const nodeIdsActual = ProjectService.getNodeIds();\n      expect(nodeIdsActual).toEqual(nodeIdsExpected);\n    });\n\n    // test ProjectService.getComponentByNodeIdAndComponentId()\n    it('should get the component by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toBeNull();\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toBeNull();\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toBeNull();\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toBeNull();\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).not.toBe(null);\n      expect(componentExists.type).toEqual(\"HTML\");\n\n      const componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).not.toBe(null);\n      expect(componentExists2.type).toEqual(\"embedded\");\n      expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n    });\n\n    // test ProjectService.getComponentPositionByNodeIdAndComponentId()\n    it('should get the component position by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toEqual(-1);\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toEqual(-1);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toEqual(-1);\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toEqual(-1);\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).toEqual(0);\n\n      const componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).toEqual(1);\n    });\n\n    // test ProjectService.getComponentsByNodeId()\n    it('should get the components by node id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n      expect(nullNodeIdResult).toEqual([]);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n      expect(nodeIdDNEResult).toEqual([]);\n\n      // nodeId exists but the node.components is null\n      const nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n      expect(nodeWithNullComponentResult).toEqual([]);\n\n      // nodeId is are valid and the node exists in the project\n      const nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n      expect(nodeExistsResult).not.toBe(null);\n      expect(nodeExistsResult.length).toEqual(1);\n      expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n      const nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n      expect(nodeExistsResult2).not.toBe(null);\n      expect(nodeExistsResult2.length).toEqual(7);\n      expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n      expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n    });\n\n    // TODO: add test for ProjectService.moveNodesInside()\n    // TODO: add test for ProjectService.moveNodesAfter()\n    // TODO: add test for ProjectService.deconsteNode()\n    // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n    // TODO: add test for ProjectService.removeNodeIdFromGroups()\n    // TODO: add test for ProjectService.removeNodeIdFromNodes()\n    // TODO: add test for ProjectService.createComponent()\n    // TODO: add test for ProjectService.addComponentToNode()\n    // TODO: add test for ProjectService.moveComponentUp()\n    // TODO: add test for ProjectService.moveComponentDown()\n    // TODO: add test for ProjectService.deconsteComponent()\n\n    // test ProjectService.getMaxScore()\n    it('should return the max score of the project', () => {\n      // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n      // Sample Scooter Project's max score is 18.\n      ProjectService.setProject(scootersProjectJSON);\n      const scootersProjectMaxScoreExpected = 18;\n      const scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n    });\n\n    it('should not add space if it does exist', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(2);\n      const space = {\n        \"id\": \"public\",\n        \"name\": \"Public\",\n        \"isPublic\": true,\n        \"isShareWithNotebook\": true\n      };\n      ProjectService.addSpace(space);\n      expect(spaces.length).toEqual(2);\n      expect(spaces[0].id).toEqual(\"public\");\n      expect(spaces[1].id).toEqual(\"ideasAboutGlobalClimateChange\");\n    });\n\n    it('should add space if it doesn\\'t exist', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(2);\n      const space = {\n        \"id\": \"newSpace\",\n        \"name\": \"New Space to share your thoughts\",\n        \"isPublic\": true,\n        \"isShareWithNotebook\": false\n      };\n      ProjectService.addSpace(space);\n      expect(spaces.length).toEqual(3);\n      expect(spaces[0].id).toEqual(\"public\");\n      expect(spaces[1].id).toEqual(\"ideasAboutGlobalClimateChange\");\n      expect(spaces[2].id).toEqual(\"newSpace\");\n    });\n\n    it('should not remove a space that does not exist', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(1);\n      ProjectService.removeSpace(\"public\");\n      expect(spaces.length).toEqual(1);\n    });\n\n    it('should remove a space that does exist', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const spaces = ProjectService.getSpaces();\n      expect(spaces.length).toEqual(1);\n      ProjectService.removeSpace(\"sharePictures\");\n      expect(spaces.length).toEqual(0);\n    });\n  });\n});\n"]}
=======
{"version":3,"sources":["projectService.spec.es6"],"names":["describe","beforeEach","mock","module","name","ConfigService","ProjectService","$rootScope","$httpBackend","inject","_ConfigService_","_ProjectService_","_$rootScope_","_$httpBackend_","demoProjectJSON","window","mocks","demoProjectJSONString","JSON","stringify","scootersProjectJSON","scootersProjectJSONString","invalidProjectJSONString","projectIdDefault","projectBaseURL","projectURL","saveProjectURL","commitMessageDefault","defaultCommitHistory","wiseBaseURL","i18nURL_common_en","i18nURL_vle_en","sampleI18N_common_en","sampleI18N_vle_en","createNormalSpy","spyOn","and","callFake","param","it","contentString","contentStringReplacedAssetPathExpected","contentStringReplacedAssetPathActual","replaceAssetPaths","expect","getConfigParam","toHaveBeenCalledWith","toEqual","xit","callThrough","when","RegExp","respond","expectGET","projectPromise","retrieveProject","flush","setProject","parseProject","toHaveBeenCalled","project","returnValue","toBeNull","data","newProjectIdActualPromise","saveProject","getProjectId","expectPOST","expectedThemePath","actualThemePath","getThemePath","demoProjectTheme","theme","expectedStartNodeId","actualStartNodeId","getStartNodeId","nullProjectStartNodeId","node1","getNodeById","type","title","components","length","nodeBadArgs","nodeNE","node1Title","getNodeTitleByNodeId","nodeTitleBadArgs","nodeTitleNE","nextNodeIdExpected","nextNodeIdActual","getNextAvailableNodeId","nextGroupIdExpected","nextGroupIdActual","getNextAvailableGroupId","groupIdsExpected","groupIdsActual","getGroupIds","nodeIdsExpected","nodeIdsActual","getNodeIds","nullNodeIdResult","getComponentByNodeIdAndComponentId","nullComponentIdResult","nodeIdDNEResult","componentIdDNEResult","componentExists","not","toBe","componentExists2","url","getComponentPositionByNodeIdAndComponentId","getComponentsByNodeId","nodeWithNullComponentResult","nodeExistsResult","id","nodeExistsResult2","demoProjectMaxScoreActual","getMaxScore","scootersProjectMaxScoreExpected","scootersProjectMaxScoreActual"],"mappings":"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","file":"projectService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('ProjectService Unit Test', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let ConfigService, ProjectService, $rootScope, $httpBackend;\n  beforeEach(inject(function(_ConfigService_, _ProjectService_, _$rootScope_, _$httpBackend_) {\n    ConfigService = _ConfigService_;\n    ProjectService = _ProjectService_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n  }));\n\n  describe('ProjectService', () => {\n    // Load sample projects\n    const demoProjectJSON = window.mocks['test-unit/sampleData/curriculum/DemoProject/project'];\n    const demoProjectJSONString = JSON.stringify(demoProjectJSON);\n    const scootersProjectJSON = window.mocks['test-unit/sampleData/curriculum/SelfPropelledVehiclesChallenge/project'];\n    const scootersProjectJSONString = JSON.stringify(scootersProjectJSON);\n    const invalidProjectJSONString = \"{'a':1\";\n\n    const projectIdDefault = 1;\n    const projectBaseURL = \"http://localhost:8080/curriculum/12345/\";\n    const projectURL = projectBaseURL + \"project.json\";\n    const saveProjectURL = \"http://localhost:8080/wise/project/save/\" + projectIdDefault;\n    const commitMessageDefault = \"Made simple changes\";\n    const defaultCommitHistory = [{\"id\":\"abc\",\"message\":\"first commit\"}, {\"id\":\"def\", \"message\":\"second commit\"}];\n    const wiseBaseURL = \"/wise\";\n\n    // i18n\n    const i18nURL_common_en = \"wise5/i18n/common/i18n_en.json\";\n    const i18nURL_vle_en = \"wise5/i18n/vle/i18n_en.json\";\n    const sampleI18N_common_en = window.mocks['test-unit/sampleData/i18n/common/i18n_en'];\n    const sampleI18N_vle_en = window.mocks['test-unit/sampleData/i18n/vle/i18n_en'];\n\n    function createNormalSpy() {\n      spyOn(ConfigService, \"getConfigParam\").and.callFake((param) => {\n        if (param === \"projectBaseURL\") {\n          return projectBaseURL;\n        } else if (param === \"projectURL\") {\n          return projectURL;\n        } else if (param === \"saveProjectURL\") {\n          return saveProjectURL;\n        } else if (param === \"wiseBaseURL\") {\n          return wiseBaseURL;\n        }\n      });\n    }\n\n    it('should replace asset paths in non-html component content', () => {\n      createNormalSpy();\n      const contentString = \"<img src=\\'hello.png\\' /><style>{background-url:\\'background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathExpected = \"<img src=\\'\" + projectBaseURL + \"assets/hello.png\\' /><style>{background-url:\\'\" + projectBaseURL + \"assets/background.jpg\\'}</style>\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"style=\\\\\\\"background-image: url(\\\\\\\"background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathExpected = \"style=\\\\\\\"background-image: url(\\\\\\\"\" + projectBaseURL + \"assets/background.jpg\\\\\\\")\\\\\\\"\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    it('should not replace asset paths in html component content', () => {\n      createNormalSpy();\n      const contentString = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathExpected = \"<source type=\\\"video/mp4\\\">\";\n      const contentStringReplacedAssetPathActual = ProjectService.replaceAssetPaths(contentString);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectBaseURL\");\n      expect(contentStringReplacedAssetPathActual).toEqual(contentStringReplacedAssetPathExpected);\n    });\n\n    xit('should retrieve project when Config.projectURL is valid', () => {\n      createNormalSpy();\n      spyOn(ProjectService, \"setProject\").and.callThrough(); // actually call through the function\n      spyOn(ProjectService, \"parseProject\");\n      $httpBackend.when('GET', new RegExp(projectURL)).respond(scootersProjectJSON);\n      $httpBackend.expectGET(new RegExp(projectURL));\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const projectPromise = ProjectService.retrieveProject();\n      $httpBackend.flush();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(ProjectService.setProject).toHaveBeenCalledWith(scootersProjectJSON);\n      expect(ProjectService.parseProject).toHaveBeenCalled();\n      expect(ProjectService.project).toEqual(scootersProjectJSON);\n    });\n\n    it('should not retrieve project when Config.projectURL is undefined', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      const project = ProjectService.retrieveProject();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"projectURL\");\n      expect(project).toBeNull();\n    });\n\n    // MARK: Save Project\n    xit('should save project', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      $httpBackend.when('POST', saveProjectURL).respond({data: defaultCommitHistory});\n      $httpBackend.when('GET', i18nURL_common_en).respond(sampleI18N_common_en);\n      $httpBackend.when('GET', i18nURL_vle_en).respond(sampleI18N_vle_en);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      $httpBackend.flush();\n      $httpBackend.expectPOST(saveProjectURL);\n    });\n\n    it('should not save project when Config.saveProjectURL is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(projectIdDefault);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(null);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    it('should not save project when Config.projectId is undefined', () => {\n      spyOn(ConfigService, \"getProjectId\").and.returnValue(null);\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(saveProjectURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const newProjectIdActualPromise = ProjectService.saveProject(commitMessageDefault);\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"saveProjectURL\");\n      expect(ConfigService.getProjectId).toHaveBeenCalled();\n      expect(newProjectIdActualPromise).toBeNull();\n    });\n\n    // MARK: ThemePath\n    it('should get default theme path when theme is not defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(scootersProjectJSON);\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/default\";\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n\n    it('should get project theme path when theme is defined in the project', () => {\n      spyOn(ConfigService, \"getConfigParam\").and.returnValue(wiseBaseURL);\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectTheme = demoProjectJSON.theme;  // Demo Project has a theme defined\n      const expectedThemePath = wiseBaseURL + \"/wise5/themes/\" + demoProjectTheme;\n      const actualThemePath = ProjectService.getThemePath();\n      expect(ConfigService.getConfigParam).toHaveBeenCalledWith(\"wiseBaseURL\");\n      expect(actualThemePath).toEqual(expectedThemePath);\n    });\n    // TODO: add test for ProjectService.getFlattenedProjectAsNodeIds()\n    // TODO: add test for ProjectService.getAllPaths()\n    // TODO: add test for ProjectService.consolidatePaths()\n    // TODO: add test for ProjectService.consumePathsUntilNodeId()\n    // TODO: add test for ProjectService.getFirstNodeIdInPathAtIndex()\n    // TODO: add test for ProjectService.removeNodeIdFromPaths()\n    // TODO: add test for ProjectService.removeNodeIdFromPath()\n\n    // TODO: add test for ProjectService.areFirstNodeIdsInPathsTheSame()\n    // TODO: add test for ProjectService.arePathsEmpty()\n    // TODO: add test for ProjectService.getPathsThatContainNodeId()\n    // TODO: add test for ProjectService.getNonEmptyPathIndex()\n    // TODO: add test for ProjectService.getBranches()\n    // TODO: add test for ProjectService.findBranches()\n\n    // TODO: add test for ProjectService.createBranchMetaObject()\n    // TODO: add test for ProjectService.findNextCommonNodeId()\n    // TODO: add test for ProjectService.allPathsContainNodeId()\n    // TODO: add test for ProjectService.trimPathsUpToNodeId()\n    // TODO: add test for ProjectService.extractPathsUpToNodeId()\n    // TODO: add test for ProjectService.removeDuplicatePaths()\n    // TODO: add test for ProjectService.pathsEqual()\n\n    // TODO: add test for ProjectService.isNodeIdInABranch()\n    // TODO: add test for ProjectService.getBranchPathsByNodeId()\n\n\n    // TODO: add test for ProjectService.getNodeContentByNodeId()\n\n    // TODO: add test for ProjectService.replaceComponent()\n    // TODO: add test for ProjectService.createGroup()\n    // TODO: add test for ProjectService.createNode()\n    // TODO: add test for ProjectService.createNodeInside()\n    // TODO: add test for ProjectService.createNodeAfter()\n    // TODO: add test for ProjectService.insertNodeAfterInGroups()\n    // TODO: add test for ProjectService.insertNodeAfterInTransitions()\n\n    // TODO: add test for ProjectService.insertNodeInsideInGroups()\n    // TODO: add test for ProjectService.insertNodeInsideInTransitions()\n\n    // MARK: Tests for Node and Group Id functions\n    // test ProjectService.getStartNodeId()\n    it('should return the start node of the project', () => {\n      ProjectService.setProject(demoProjectJSON);\n      const expectedStartNodeId = \"node1\";  // Demo project's start node id\n      const actualStartNodeId = ProjectService.getStartNodeId();\n      expect(actualStartNodeId).toEqual(expectedStartNodeId);\n\n      ProjectService.setProject(null);  // Set a null project\n      const nullProjectStartNodeId = ProjectService.getStartNodeId();\n      expect(nullProjectStartNodeId).toBeNull();\n    });\n\n    // test ProjectService.getNodeById()\n    it('should return the node by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1 = ProjectService.getNodeById(\"node1\");\n      expect(node1.type).toEqual(\"node\");\n      expect(node1.title).toEqual(\"Introduction to Newton Scooters\");\n      expect(node1.components.length).toEqual(1);\n\n      // Call getNodeId with null and expect a null return value\n      const nodeBadArgs = ProjectService.getNodeById();\n      expect(nodeBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeNE = ProjectService.getNodeById(\"node999\");\n      expect(nodeNE).toBeNull();\n    });\n\n    // test ProjectService.getNodeTitleByNodeId()\n    it('should return the node title by nodeId', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      const node1Title = ProjectService.getNodeTitleByNodeId(\"node1\");\n      expect(node1Title).toEqual(\"Introduction to Newton Scooters\");\n\n      // Call getNodeTitleByNodeId with null and expect a null return value\n      const nodeTitleBadArgs = ProjectService.getNodeTitleByNodeId();\n      expect(nodeTitleBadArgs).toBeNull();\n\n      // Test node that doesn't exist in project and make sure the function returns null\n      const nodeTitleNE = ProjectService.getNodeTitleByNodeId(\"node999\");\n      expect(nodeTitleNE).toBeNull();\n    });\n\n    // TODO: add test for ProjectService.getNodePositionAndTitleByNodeId()\n    // TODO: add test for ProjectService.getNodeIconByNodeId()\n\n    // test ProjectService.getNextAvailableNodeId()\n    it('should return the next available node id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextNodeIdExpected = \"node41\";      // This should be the next available node id.\n      const nextNodeIdActual = ProjectService.getNextAvailableNodeId();\n      expect(nextNodeIdActual).toEqual(nextNodeIdExpected);\n    });\n\n    // test ProjectService.getNextAvailableGroupId()\n    it('should return the next available group id', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nextGroupIdExpected = \"group7\";      // This should be the next available group id.\n      const nextGroupIdActual = ProjectService.getNextAvailableGroupId();\n      expect(nextGroupIdActual).toEqual(nextGroupIdExpected);\n    });\n\n    // test ProjectService.getGroupIds()\n    it('should return the group ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const groupIdsExpected = [\"group0\",\"group1\",\"group2\",\"group3\",\"group4\",\"group5\",\"group6\"];      // This should be the group ids in the project\n      const groupIdsActual = ProjectService.getGroupIds();\n      expect(groupIdsActual).toEqual(groupIdsExpected);\n    });\n\n    // test ProjectService.getNodeIds()\n    it('should return the node ids in the project', () => {\n      createNormalSpy();\n      ProjectService.setProject(scootersProjectJSON);\n      const nodeIdsExpected = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6', 'node7',\n        'node9', 'node12', 'node13', 'node14', 'node18', 'node19', 'node21', 'node22',\n        'node23', 'node24', 'node25', 'node26', 'node27', 'node28', 'node29', 'node30',\n        'node31', 'node40', 'node32', 'node33', 'node34', 'node35', 'node36', 'node37',\n        'node38', 'node39', 'nodeWithNoComponents'];      // This should be the node ids in the project\n      const nodeIdsActual = ProjectService.getNodeIds();\n      expect(nodeIdsActual).toEqual(nodeIdsExpected);\n    });\n\n    // test ProjectService.getComponentByNodeIdAndComponentId()\n    it('should get the component by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toBeNull();\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toBeNull();\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toBeNull();\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toBeNull();\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).not.toBe(null);\n      expect(componentExists.type).toEqual(\"HTML\");\n\n      const componentExists2 = ProjectService.getComponentByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).not.toBe(null);\n      expect(componentExists2.type).toEqual(\"embedded\");\n      expect(componentExists2.url).toEqual(\"NewtonScooters-potential-kinetic.html\");\n    });\n\n    // test ProjectService.getComponentPositionByNodeIdAndComponentId()\n    it('should get the component position by node id and comonent id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(null, \"57lxhwfp5r\");\n      expect(nullNodeIdResult).toEqual(-1);\n\n      // componentId is null\n      const nullComponentIdResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", null);\n      expect(nullComponentIdResult).toEqual(-1);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"badNodeId\", \"57lxhwfp5r\");\n      expect(nodeIdDNEResult).toEqual(-1);\n\n      // componentId doesn't exist\n      const componentIdDNEResult = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"badComponentId\");\n      expect(componentIdDNEResult).toEqual(-1);\n\n      // nodeId and componentId are valid and the component exists in the project\n      const componentExists = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node13\", \"57lxhwfp5r\");\n      expect(componentExists).toEqual(0);\n\n      const componentExists2 = ProjectService.getComponentPositionByNodeIdAndComponentId(\"node9\", \"mnzx68ix8h\");\n      expect(componentExists2).toEqual(1);\n    });\n\n    // test ProjectService.getComponentsByNodeId()\n    it('should get the components by node id', () => {\n      ProjectService.setProject(scootersProjectJSON);\n      // nodeId is null\n      const nullNodeIdResult = ProjectService.getComponentsByNodeId(null);\n      expect(nullNodeIdResult).toEqual([]);\n\n      // nodeId doesn't exist\n      const nodeIdDNEResult = ProjectService.getComponentsByNodeId(\"badNodeId\");\n      expect(nodeIdDNEResult).toEqual([]);\n\n      // nodeId exists but the node.components is null\n      const nodeWithNullComponentResult = ProjectService.getComponentsByNodeId(\"nodeWithNoComponents\");\n      expect(nodeWithNullComponentResult).toEqual([]);\n\n      // nodeId is are valid and the node exists in the project\n      const nodeExistsResult = ProjectService.getComponentsByNodeId(\"node13\");\n      expect(nodeExistsResult).not.toBe(null);\n      expect(nodeExistsResult.length).toEqual(1);\n      expect(nodeExistsResult[0].id).toEqual(\"57lxhwfp5r\");\n\n      const nodeExistsResult2 = ProjectService.getComponentsByNodeId(\"node9\");\n      expect(nodeExistsResult2).not.toBe(null);\n      expect(nodeExistsResult2.length).toEqual(7);\n      expect(nodeExistsResult2[2].id).toEqual(\"nm080ntk8e\");\n      expect(nodeExistsResult2[2].type).toEqual(\"Table\");\n    });\n\n    // TODO: add test for ProjectService.moveNodesInside()\n    // TODO: add test for ProjectService.moveNodesAfter()\n    // TODO: add test for ProjectService.deconsteNode()\n    // TODO: add test for ProjectService.removeNodeIdFromTransitions()\n    // TODO: add test for ProjectService.removeNodeIdFromGroups()\n    // TODO: add test for ProjectService.removeNodeIdFromNodes()\n    // TODO: add test for ProjectService.createComponent()\n    // TODO: add test for ProjectService.addComponentToNode()\n    // TODO: add test for ProjectService.moveComponentUp()\n    // TODO: add test for ProjectService.moveComponentDown()\n    // TODO: add test for ProjectService.deconsteComponent()\n\n    // test ProjectService.getMaxScore()\n    it('should return the max score of the project', () => {\n      // Demo Project doesn't have any max scores, so we expect getMaxScore to return null\n      ProjectService.setProject(demoProjectJSON);\n      const demoProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(demoProjectMaxScoreActual).toBeNull(); // When the project doesn't have any max scores defined, max score should be null\n\n      // Sample Scooter Project's max score is 18.\n      ProjectService.setProject(scootersProjectJSON);\n      const scootersProjectMaxScoreExpected = 18;\n      const scootersProjectMaxScoreActual = ProjectService.getMaxScore();\n      expect(scootersProjectMaxScoreActual).toEqual(scootersProjectMaxScoreExpected);\n    });\n  });\n});\n"]}
>>>>>>> develop
