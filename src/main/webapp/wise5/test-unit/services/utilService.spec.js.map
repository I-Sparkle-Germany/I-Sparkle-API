{"version":3,"sources":["utilService.spec.es6"],"names":["describe","UtilService","beforeEach","mock","module","name","inject","_UtilService_","it","generatedKey1","generateKey","generatedKey2","expect","length","toEqual","not","genetatedKey3","generatedKeysSoFar","i","generatedKey","indexOf","push","convertStringToNumber","toBeNull"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,uBAAT,EAAkC,YAAM;;AAEtC,MAAIC,WAAJ;;AAEAC,aAAW,kBAAQC,IAAR,CAAaC,MAAb,CAAoB,eAAWC,IAA/B,CAAX;;AAEAH,aAAWI,OAAO,UAACC,aAAD,EAAmB;AACnCN,kBAAcM,aAAd;AACD,GAFU,CAAX;;AAIAP,WAAS,aAAT,EAAwB,YAAM;AAC5B;AACAQ,OAAG,2BAAH,EAAgC,YAAM;AACpC;AACA,UAAIC,gBAAgBR,YAAYS,WAAZ,EAApB;AACA,UAAIC,gBAAgBV,YAAYS,WAAZ,EAApB;AACAE,aAAOH,cAAcI,MAArB,EAA6BC,OAA7B,CAAqC,EAArC;AACAF,aAAOD,cAAcE,MAArB,EAA6BC,OAA7B,CAAqC,EAArC;AACAF,aAAOH,aAAP,EAAsBM,GAAtB,CAA0BD,OAA1B,CAAkCH,aAAlC;;AAEA;AACA,UAAIK,gBAAgBf,YAAYS,WAAZ,CAAwB,CAAxB,CAApB;AACAE,aAAOI,cAAcH,MAArB,EAA6BC,OAA7B,CAAqC,CAArC;;AAEA;AACA,UAAIG,qBAAqB,EAAzB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,GAApB,EAAyBA,GAAzB,EAA8B;AAC5B,YAAIC,eAAelB,YAAYS,WAAZ,EAAnB;AACAE,eAAOK,mBAAmBG,OAAnB,CAA2BD,YAA3B,CAAP,EAAiDL,OAAjD,CAAyD,CAAC,CAA1D;AACAG,2BAAmBI,IAAnB,CAAwBF,YAAxB;AACD;AACF,KAnBD;;AAqBA;AACAX,OAAG,qCAAH,EAA0C,YAAM;AAC9C;AACAI,aAAOX,YAAYqB,qBAAZ,CAAkC,GAAlC,CAAP,EAA+CR,OAA/C,CAAuD,CAAvD;;AAEA;AACAF,aAAOX,YAAYqB,qBAAZ,CAAkC,MAAlC,CAAP,EAAkDR,OAAlD,CAA0D,CAAC,GAA3D;;AAEA;AACAF,aAAOX,YAAYqB,qBAAZ,CAAkC,IAAlC,CAAP,EAAgDC,QAAhD;;AAEA;AACAX,aAAOX,YAAYqB,qBAAZ,CAAkC,KAAlC,CAAP,EAAiDR,OAAjD,CAAyD,KAAzD;;AAEA;AACAF,aAAOX,YAAYqB,qBAAZ,CAAkC,EAAlC,CAAP,EAA8CR,OAA9C,CAAsD,EAAtD;AACD,KAfD;AAgBD,GAxCD;AAyCD,CAnDD","file":"utilService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('UtilService Unit Test', () => {\n\n  var UtilService;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_UtilService_) => {\n    UtilService = _UtilService_;\n  }));\n\n  describe('UtilService', () => {\n    // Test UtilService.generateKey()\n    it('should return random keys', () => {\n      // Calling generate key with no params should return length 10 string\n      let generatedKey1 = UtilService.generateKey();\n      let generatedKey2 = UtilService.generateKey();\n      expect(generatedKey1.length).toEqual(10);\n      expect(generatedKey2.length).toEqual(10);\n      expect(generatedKey1).not.toEqual(generatedKey2);\n\n      // Calling generate key with length key should produce key with specified length\n      let genetatedKey3 = UtilService.generateKey(5);\n      expect(genetatedKey3.length).toEqual(5);\n\n      // Calling generate key 100 times should produce 100 unique random strings\n      let generatedKeysSoFar = [];\n      for (let i = 0; i < 100; i++) {\n        let generatedKey = UtilService.generateKey();\n        expect(generatedKeysSoFar.indexOf(generatedKey)).toEqual(-1);\n        generatedKeysSoFar.push(generatedKey);\n      }\n    });\n\n    // Test UtilService.convertStringToNumber()\n    it('should convert a string to a number', () => {\n      // Calling it with a number string should return the number\n      expect(UtilService.convertStringToNumber(\"5\")).toEqual(5);\n\n      // Calling it with a number string should return the number\n      expect(UtilService.convertStringToNumber(\"-100\")).toEqual(-100);\n\n      // Calling it with null should return null\n      expect(UtilService.convertStringToNumber(null)).toBeNull();\n\n      // Calling it with a non-number string should return that non-number\n      expect(UtilService.convertStringToNumber(\"abc\")).toEqual(\"abc\");\n\n      // Calling it with a non-number string should return that non-number\n      expect(UtilService.convertStringToNumber(\"\")).toEqual(\"\");\n    });\n  });\n});\n"]}