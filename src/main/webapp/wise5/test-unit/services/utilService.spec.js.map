{"version":3,"sources":["utilService.spec.es6"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,SAAS,uBAAT,EAAkC,YAAM;;AAEpC,QAAI,WAAJ,CAFoC;;AAIpC,eAAW,kBAAQ,IAAR,CAAa,MAAb,CAAoB,eAAW,IAAX,CAA/B,EAJoC;;AAMpC,eAAW,OAAO,UAAC,aAAD,EAAmB;AACjC,sBAAc,aAAd,CADiC;KAAnB,CAAlB,EANoC;;AAUpC,aAAS,aAAT,EAAwB,YAAM;;;AAG1B,WAAG,2BAAH,EAAgC,YAAM;;AAElC,gBAAI,gBAAgB,YAAY,WAAZ,EAAhB,CAF8B;AAGlC,gBAAI,gBAAgB,YAAY,WAAZ,EAAhB,CAH8B;AAIlC,mBAAO,cAAc,MAAd,CAAP,CAA6B,OAA7B,CAAqC,EAArC,EAJkC;AAKlC,mBAAO,cAAc,MAAd,CAAP,CAA6B,OAA7B,CAAqC,EAArC,EALkC;AAMlC,mBAAO,aAAP,EAAsB,GAAtB,CAA0B,OAA1B,CAAkC,aAAlC;;;AANkC,gBAS9B,gBAAgB,YAAY,WAAZ,CAAwB,CAAxB,CAAhB,CAT8B;AAUlC,mBAAO,cAAc,MAAd,CAAP,CAA6B,OAA7B,CAAqC,CAArC;;;AAVkC,gBAa9B,qBAAqB,EAArB,CAb8B;AAclC,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,GAAJ,EAAS,GAAzB,EAA8B;AAC1B,oBAAI,eAAe,YAAY,WAAZ,EAAf,CADsB;AAE1B,uBAAO,mBAAmB,OAAnB,CAA2B,YAA3B,CAAP,EAAiD,OAAjD,CAAyD,CAAC,CAAD,CAAzD,CAF0B;AAG1B,mCAAmB,IAAnB,CAAwB,YAAxB,EAH0B;aAA9B;SAd4B,CAAhC;;;AAH0B,UAyB1B,CAAG,qCAAH,EAA0C,YAAM;;AAE5C,mBAAO,YAAY,qBAAZ,CAAkC,GAAlC,CAAP,EAA+C,OAA/C,CAAuD,CAAvD;;;AAF4C,kBAK5C,CAAO,YAAY,qBAAZ,CAAkC,MAAlC,CAAP,EAAkD,OAAlD,CAA0D,CAAC,GAAD,CAA1D;;;AAL4C,kBAQ5C,CAAO,YAAY,qBAAZ,CAAkC,IAAlC,CAAP,EAAgD,QAAhD;;;AAR4C,kBAW5C,CAAO,YAAY,qBAAZ,CAAkC,KAAlC,CAAP,EAAiD,OAAjD,CAAyD,KAAzD;;;AAX4C,kBAc5C,CAAO,YAAY,qBAAZ,CAAkC,EAAlC,CAAP,EAA8C,OAA9C,CAAsD,EAAtD,EAd4C;SAAN,CAA1C,CAzB0B;KAAN,CAAxB,CAVoC;CAAN,CAAlC","file":"utilService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('UtilService Unit Test', () => {\n\n    var UtilService;\n\n    beforeEach(angular.mock.module(mainModule.name));\n\n    beforeEach(inject((_UtilService_) => {\n        UtilService = _UtilService_;\n    }));\n\n    describe('UtilService', () => {\n\n        // Test UtilService.generateKey()\n        it('should return random keys', () => {\n            // Calling generate key with no params should return length 10 string\n            let generatedKey1 = UtilService.generateKey();\n            let generatedKey2 = UtilService.generateKey();\n            expect(generatedKey1.length).toEqual(10);\n            expect(generatedKey2.length).toEqual(10);\n            expect(generatedKey1).not.toEqual(generatedKey2);\n\n            // Calling generate key with length key should produce key with specified length\n            let genetatedKey3 = UtilService.generateKey(5);\n            expect(genetatedKey3.length).toEqual(5);\n\n            // Calling generate key 100 times should produce 100 unique random strings\n            let generatedKeysSoFar = [];\n            for (let i = 0; i < 100; i++) {\n                let generatedKey = UtilService.generateKey();\n                expect(generatedKeysSoFar.indexOf(generatedKey)).toEqual(-1);\n                generatedKeysSoFar.push(generatedKey);\n            }\n        });\n\n        // Test UtilService.convertStringToNumber()\n        it('should convert a string to a number', () => {\n            // Calling it with a number string should return the number\n            expect(UtilService.convertStringToNumber(\"5\")).toEqual(5);\n\n            // Calling it with a number string should return the number\n            expect(UtilService.convertStringToNumber(\"-100\")).toEqual(-100);\n\n            // Calling it with null should return null\n            expect(UtilService.convertStringToNumber(null)).toBeNull();\n\n            // Calling it with a non-number string should return that non-number\n            expect(UtilService.convertStringToNumber(\"abc\")).toEqual(\"abc\");\n\n            // Calling it with a non-number string should return that non-number\n            expect(UtilService.convertStringToNumber(\"\")).toEqual(\"\");\n        });\n    });\n});"]}