{"version":3,"sources":["utilService.spec.es6"],"names":["describe","beforeEach","mock","module","name","UtilService","inject","_UtilService_","it","generatedKey1","generateKey","generatedKey2","expect","length","toEqual","not","generatedKeysSoFar","i","generatedKey","indexOf","push","convertStringToNumber","toBeNull"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEAA,SAAS,aAAT,EAAwB,YAAM;;AAE5BC,aAAW,kBAAQC,IAAR,CAAaC,MAAb,CAAoB,eAAWC,IAA/B,CAAX;;AAEA,MAAIC,oBAAJ;;AAEAJ,aAAWK,OAAO,UAACC,aAAD,EAAmB;AACnCF,kBAAcE,aAAd;AACD,GAFU,CAAX;;AAIAP,WAAS,eAAT,EAA0B,YAAM;AAC9BQ,OAAG,mDAAH,EAAwD,YAAM;AAC5D,UAAMC,gBAAgBJ,YAAYK,WAAZ,EAAtB;AACA,UAAMC,gBAAgBN,YAAYK,WAAZ,EAAtB;AACAE,aAAOH,cAAcI,MAArB,EAA6BC,OAA7B,CAAqC,EAArC;AACAF,aAAOD,cAAcE,MAArB,EAA6BC,OAA7B,CAAqC,EAArC;AACAF,aAAOH,aAAP,EAAsBM,GAAtB,CAA0BD,OAA1B,CAAkCH,aAAlC;AACD,KAND;;AAQAH,OAAG,+CAAH,EAAoD,YAAM;AACxDI,aAAOP,YAAYK,WAAZ,CAAwB,CAAxB,EAA2BG,MAAlC,EAA0CC,OAA1C,CAAkD,CAAlD;AACAF,aAAOP,YAAYK,WAAZ,CAAwB,EAAxB,EAA4BG,MAAnC,EAA2CC,OAA3C,CAAmD,EAAnD;AACD,KAHD;;AAKAN,OAAG,0CAAH,EAA+C,YAAM;AACnD;AACA,UAAMQ,qBAAqB,EAA3B;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,GAApB,EAAyBA,GAAzB,EAA8B;AAC5B,YAAMC,eAAeb,YAAYK,WAAZ,EAArB;AACAE,eAAOI,mBAAmBG,OAAnB,CAA2BD,YAA3B,CAAP,EAAiDJ,OAAjD,CAAyD,CAAC,CAA1D;AACAE,2BAAmBI,IAAnB,CAAwBF,YAAxB;AACD;AACF,KARD;AASD,GAvBD;;AAyBAlB,WAAS,yBAAT,EAAoC,YAAM;AACxCQ,OAAG,4CAAH,EAAiD,YAAM;AACrDI,aAAOP,YAAYgB,qBAAZ,CAAkC,GAAlC,CAAP,EAA+CP,OAA/C,CAAuD,CAAvD;AACAF,aAAOP,YAAYgB,qBAAZ,CAAkC,MAAlC,CAAP,EAAkDP,OAAlD,CAA0D,CAAC,GAA3D;AACD,KAHD;;AAKAN,OAAG,sCAAH,EAA2C,YAAM;AAC/CI,aAAOP,YAAYgB,qBAAZ,CAAkC,IAAlC,CAAP,EAAgDC,QAAhD;AACD,KAFD;;AAIAd,OAAG,4CAAH,EAAiD,YAAM;AACrDI,aAAOP,YAAYgB,qBAAZ,CAAkC,KAAlC,CAAP,EAAiDP,OAAjD,CAAyD,KAAzD;AACAF,aAAOP,YAAYgB,qBAAZ,CAAkC,EAAlC,CAAP,EAA8CP,OAA9C,CAAsD,EAAtD;AACD,KAHD;AAID,GAdD;AAeD,CAlDD","file":"utilService.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('UtilService', () => {\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  let UtilService;\n  \n  beforeEach(inject((_UtilService_) => {\n    UtilService = _UtilService_;\n  }));\n\n  describe('generateKey()', () => {\n    it('should return random keys of length 10 by default', () => {\n      const generatedKey1 = UtilService.generateKey();\n      const generatedKey2 = UtilService.generateKey();\n      expect(generatedKey1.length).toEqual(10);\n      expect(generatedKey2.length).toEqual(10);\n      expect(generatedKey1).not.toEqual(generatedKey2);\n    });\n\n    it('should return random keys of specified length', () => {\n      expect(UtilService.generateKey(5).length).toEqual(5);\n      expect(UtilService.generateKey(23).length).toEqual(23);\n    });\n\n    it('should produce 100 unique random strings', () => {\n      // Calling generate key 100 times should produce 100 unique random strings\n      const generatedKeysSoFar = [];\n      for (let i = 0; i < 100; i++) {\n        const generatedKey = UtilService.generateKey();\n        expect(generatedKeysSoFar.indexOf(generatedKey)).toEqual(-1);\n        generatedKeysSoFar.push(generatedKey);\n      }\n    });\n  });\n\n  describe('convertStringToNumber()', () => {\n    it('should convert a number string to a number', () => {\n      expect(UtilService.convertStringToNumber(\"5\")).toEqual(5);\n      expect(UtilService.convertStringToNumber(\"-100\")).toEqual(-100);\n    });\n\n    it('should return null for null argument', () => {\n      expect(UtilService.convertStringToNumber(null)).toBeNull();\n    });\n\n    it('should return non-null number string as is', () => {\n      expect(UtilService.convertStringToNumber(\"abc\")).toEqual(\"abc\");\n      expect(UtilService.convertStringToNumber(\"\")).toEqual(\"\");\n    });\n  })\n});\n"]}