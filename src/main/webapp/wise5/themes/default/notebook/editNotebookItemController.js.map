{"version":3,"sources":["editNotebookItemController.es6"],"names":[],"mappings":"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","file":"editNotebookItemController.js","sourcesContent":["'use strict';\n\nclass EditNotebookItemController {\n\n    constructor($mdDialog,\n                $q,\n                $injector,\n                $rootScope,\n                $scope,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.mode = this.ConfigService.getMode();\n\n        if (this.itemId == null) {\n            let currentNodeId = this.StudentDataService.getCurrentNodeId();\n            let currentNodeTitle = this.ProjectService.getNodeTitleByNodeId(currentNodeId);\n\n            this.item = {\n                id: null, // null id means we're creating a new notebook item.\n                localNotebookItemId: this.UtilService.generateKey(10), // Id that is common across the same notebook item revisions.\n                type: \"note\", // the notebook item type, TODO: once questions are enabled, don't hard code\n                nodeId: currentNodeId, // Id of the node this note was created on\n                title: \"Note from \" + currentNodeTitle,  // Title of the node this note was created on\n                content: {\n                    text: \"\",\n                    attachments: []\n                }\n            };\n        } else {\n            this.item = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(this.itemId));\n            this.item.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n        }\n\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        let label = this.notebookConfig.itemTypes[this.item.type].label.singular;\n        this.title = (this.isEditMode ? (this.itemId ? 'Edit ' : 'Add ') : 'View ') + label;\n        this.saveEnabled = false;\n\n        if (this.file != null) {\n            // student is trying to add a file to this notebook item.\n            var files = [this.file];  // put the file into an array\n\n            this.attachStudentAssetToNote(files);\n        }\n\n        this.setShowUpload();\n    }\n\n    attachStudentAssetToNote(files) {\n        if (files != null) {\n            for (let f = 0; f < files.length; f++) {\n                let file = files[f];\n                // create a temporary attachment object\n                let attachment = {\n                    studentAssetId: null,\n                    iconURL: \"\",\n                    file: file  // add the file for uploading in the future\n                };\n                this.item.content.attachments.push(attachment);\n                // read image data as URL and set it in the temp attachment src attribute so students can preview the image\n                let reader = new FileReader();\n                reader.onload = (event) => {\n                    attachment.iconURL = event.target.result;\n                };\n                reader.readAsDataURL(file);\n                this.update();\n            }\n        }\n    }\n\n    getItemNodeId() {\n        if (this.item == null) {\n            return null;\n        } else {\n            return this.item.nodeId;\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position link\n     */\n    getItemNodeLink() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position\n     */\n    getItemNodePosition() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionById(this.item.nodeId);\n        }\n    }\n\n    getTemplateUrl() {\n        return this.ProjectService.getThemePath() + '/notebook/editNotebookItem.html';\n    }\n\n    removeAttachment(attachment) {\n        if (this.item.content.attachments.indexOf(attachment) != -1) {\n            this.item.content.attachments.splice(this.item.content.attachments.indexOf(attachment), 1);\n            this.update();\n        }\n    }\n\n    delete(ev) {\n        // TODO: add archiving/deleting notebook items\n    }\n\n    cancel() {\n        this.$mdDialog.hide();\n    }\n\n    save() {\n        // go through the notebook item's attachments and look for any attachments that need to be uploaded and made into StudentAsset.\n        let uploadAssetPromises = [];\n        this.item.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n        if (this.item.content.attachments != null) {\n            for (let i = 0; i < this.item.content.attachments.length; i++) {\n                let attachment = this.item.content.attachments[i];\n                if (attachment.studentAssetId == null && attachment.file != null) {\n                    // this attachment hasn't been uploaded yet, so we'll do that now.\n                    let file = attachment.file;\n\n                    var deferred = this.$q.defer();\n                    this.StudentAssetService.uploadAsset(file).then((studentAsset) => {\n                        this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                            if (copiedAsset != null) {\n                                var newAttachment = {\n                                    studentAssetId: copiedAsset.id,\n                                    iconURL: copiedAsset.iconURL\n                                };\n                                this.item.content.attachments[i] = newAttachment;\n                                deferred.resolve();\n                            }\n                        });\n                    });\n                    uploadAssetPromises.push(deferred.promise);\n                }\n            }\n        }\n\n        // make sure all the assets are created before saving the notebook item.\n        this.$q.all(uploadAssetPromises).then(() => {\n            this.NotebookService.saveNotebookItem(this.item.id, this.item.nodeId, this.item.localNotebookItemId, this.item.type, this.item.title, this.item.content)\n                .then(() => {\n                    this.$mdDialog.hide();\n                });\n        });\n    }\n\n    update() {\n        // notebook item has changed\n        // set whether save button should be enabled\n        let saveEnabled = false;\n        if (this.item.content.text || this.item.content.attachments.length) {\n            // note has text and/or attachments, so we can save\n            saveEnabled = true;\n        }\n        this.saveEnabled = saveEnabled;\n\n        this.setShowUpload();\n    }\n\n    setShowUpload() {\n        this.showUpload = this.mode !== 'preview' && (this.item.content.attachments && this.item.content.attachments.length < 1);\n    }\n}\n\nEditNotebookItemController.$inject = [\n    \"$mdDialog\",\n    \"$q\",\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$translate\",\n    \"ConfigService\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\",\n    \"UtilService\"\n];\n\nexport default EditNotebookItemController;\n"]}