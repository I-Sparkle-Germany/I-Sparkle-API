{"version":3,"sources":["editNotebookItemController.es6"],"names":["EditNotebookItemController","$mdDialog","$q","$injector","$rootScope","$scope","$translate","ConfigService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","mode","getMode","itemId","currentNodeId","getCurrentNodeId","currentNodeTitle","getNodeTitleByNodeId","item","id","localNotebookItemId","generateKey","type","nodeId","title","content","text","attachments","angular","copy","getLatestNotebookItemByLocalNotebookItemId","notebookConfig","getNotebookConfig","label","itemTypes","singular","isEditMode","saveEnabled","file","files","attachStudentAssetToNote","setShowUpload","f","attachment","studentAssetId","iconURL","push","reader","FileReader","onload","event","target","result","readAsDataURL","update","length","getNodePositionAndTitleByNodeId","getNodePositionById","getThemePath","indexOf","splice","ev","hide","uploadAssetPromises","clientSaveTime","Date","parse","i","deferred","defer","uploadAsset","then","studentAsset","copyAssetForReference","copiedAsset","newAttachment","resolve","promise","all","saveNotebookItem","showUpload","$inject"],"mappings":"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","file":"editNotebookItemController.js","sourcesContent":["'use strict';\n\nclass EditNotebookItemController {\n\n    constructor($mdDialog,\n                $q,\n                $injector,\n                $rootScope,\n                $scope,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        this.$mdDialog = $mdDialog;\n        this.$q = $q;\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.mode = this.ConfigService.getMode();\n\n        if (this.itemId == null) {\n            let currentNodeId = this.StudentDataService.getCurrentNodeId();\n            let currentNodeTitle = this.ProjectService.getNodeTitleByNodeId(currentNodeId);\n\n            this.item = {\n                id: null, // null id means we're creating a new notebook item.\n                localNotebookItemId: this.UtilService.generateKey(10), // Id that is common across the same notebook item revisions.\n                type: \"note\", // the notebook item type, TODO: once questions are enabled, don't hard code\n                nodeId: currentNodeId, // Id of the node this note was created on\n                title: \"Note from \" + currentNodeTitle,  // Title of the node this note was created on\n                content: {\n                    text: \"\",\n                    attachments: []\n                }\n            };\n        } else {\n            this.item = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(this.itemId));\n            this.item.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n        }\n\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        let label = this.notebookConfig.itemTypes[this.item.type].label.singular;\n        this.title = (this.isEditMode ? (this.itemId ? 'Edit ' : 'Add ') : 'View ') + label;\n        this.saveEnabled = false;\n\n        if (this.file != null) {\n            // student is trying to add a file to this notebook item.\n            var files = [this.file];  // put the file into an array\n\n            this.attachStudentAssetToNote(files);\n        }\n\n        this.setShowUpload();\n    }\n\n    attachStudentAssetToNote(files) {\n        if (files != null) {\n            for (let f = 0; f < files.length; f++) {\n                let file = files[f];\n                // create a temporary attachment object\n                let attachment = {\n                    studentAssetId: null,\n                    iconURL: \"\",\n                    file: file  // add the file for uploading in the future\n                };\n                this.item.content.attachments.push(attachment);\n                // read image data as URL and set it in the temp attachment src attribute so students can preview the image\n                let reader = new FileReader();\n                reader.onload = (event) => {\n                    attachment.iconURL = event.target.result;\n                };\n                reader.readAsDataURL(file);\n                this.update();\n            }\n        }\n    }\n\n    getItemNodeId() {\n        if (this.item == null) {\n            return null;\n        } else {\n            return this.item.nodeId;\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position link\n     */\n    getItemNodeLink() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position\n     */\n    getItemNodePosition() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionById(this.item.nodeId);\n        }\n    }\n\n    getTemplateUrl() {\n        return this.ProjectService.getThemePath() + '/notebook/editNotebookItem.html';\n    }\n\n    removeAttachment(attachment) {\n        if (this.item.content.attachments.indexOf(attachment) != -1) {\n            this.item.content.attachments.splice(this.item.content.attachments.indexOf(attachment), 1);\n            this.update();\n        }\n    }\n\n    delete(ev) {\n        // TODO: add archiving/deleting notebook items\n    }\n\n    cancel() {\n        this.$mdDialog.hide();\n    }\n\n    save() {\n        // go through the notebook item's attachments and look for any attachments that need to be uploaded and made into StudentAsset.\n        let uploadAssetPromises = [];\n        this.item.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n        if (this.item.content.attachments != null) {\n            for (let i = 0; i < this.item.content.attachments.length; i++) {\n                let attachment = this.item.content.attachments[i];\n                if (attachment.studentAssetId == null && attachment.file != null) {\n                    // this attachment hasn't been uploaded yet, so we'll do that now.\n                    let file = attachment.file;\n\n                    var deferred = this.$q.defer();\n                    this.StudentAssetService.uploadAsset(file).then((studentAsset) => {\n                        this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n                            if (copiedAsset != null) {\n                                var newAttachment = {\n                                    studentAssetId: copiedAsset.id,\n                                    iconURL: copiedAsset.iconURL\n                                };\n                                this.item.content.attachments[i] = newAttachment;\n                                deferred.resolve();\n                            }\n                        });\n                    });\n                    uploadAssetPromises.push(deferred.promise);\n                }\n            }\n        }\n\n        // make sure all the assets are created before saving the notebook item.\n        this.$q.all(uploadAssetPromises).then(() => {\n            this.NotebookService.saveNotebookItem(this.item.id, this.item.nodeId, this.item.localNotebookItemId, this.item.type, this.item.title, this.item.content, this.item.content.clientSaveTime)\n                .then(() => {\n                    this.$mdDialog.hide();\n                });\n        });\n    }\n\n    update() {\n        // notebook item has changed\n        // set whether save button should be enabled\n        let saveEnabled = false;\n        if (this.item.content.text || this.item.content.attachments.length) {\n            // note has text and/or attachments, so we can save\n            saveEnabled = true;\n        }\n        this.saveEnabled = saveEnabled;\n\n        this.setShowUpload();\n    }\n\n    setShowUpload() {\n        this.showUpload = this.mode !== 'preview' && (this.item.content.attachments && this.item.content.attachments.length < 1);\n    }\n}\n\nEditNotebookItemController.$inject = [\n    \"$mdDialog\",\n    \"$q\",\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$translate\",\n    \"ConfigService\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\",\n    \"UtilService\"\n];\n\nexport default EditNotebookItemController;\n"]}