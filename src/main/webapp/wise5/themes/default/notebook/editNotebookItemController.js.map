{"version":3,"sources":["editNotebookItemController.es6"],"names":["EditNotebookItemController","$filter","$mdDialog","$q","$injector","$rootScope","$scope","ConfigService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","showUpload","itemId","currentNodeId","getCurrentNodeId","currentNodeTitle","getNodeTitleByNodeId","item","id","localNotebookItemId","generateKey","type","nodeId","title","content","text","attachments","angular","copy","getNotebookItemById","isNotebookItemPublic","workgroupId","getWorkgroupId","isEditMode","notebookConfig","getNotebookConfig","color","itemTypes","label","singular","noteLabel","saveEnabled","file","files","attachStudentAssetToNote","setShowUpload","isFileUploadEnabled","studentWorkIds","groups","includes","push","f","attachment","studentAssetId","iconURL","reader","FileReader","onload","event","target","result","readAsDataURL","update","length","getNodePositionAndTitleByNodeId","getNodePositionById","getThemePath","indexOf","splice","ev","hide","uploadAssetPromises","clientSaveTime","Date","parse","i","deferred","defer","uploadAsset","then","studentAsset","copyAssetForReference","copiedAsset","newAttachment","resolve","promise","all","saveNotebookItem","isRequireTextOnEveryNote","note","requireTextOnEveryNote","enableStudentUploads","isSpaceExists","$inject"],"mappings":"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","file":"editNotebookItemController.js","sourcesContent":["'use strict';\n\nclass EditNotebookItemController {\n  constructor($filter,\n              $mdDialog,\n              $q,\n              $injector,\n              $rootScope,\n              $scope,\n              ConfigService,\n              NotebookService,\n              ProjectService,\n              StudentAssetService,\n              StudentDataService,\n              UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$injector = $injector;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.ConfigService = ConfigService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.showUpload = false;\n\n    if (this.itemId == null) {\n      const currentNodeId = this.StudentDataService.getCurrentNodeId();\n      const currentNodeTitle = this.ProjectService.getNodeTitleByNodeId(currentNodeId);\n\n      this.item = {\n        id: null, // null id means we're creating a new notebook item.\n        localNotebookItemId: this.UtilService.generateKey(10), // Id that is common across the same notebook item revisions.\n        type: \"note\", // the notebook item type, TODO: once questions are enabled, don't hard code\n        nodeId: currentNodeId, // Id of the node this note was created on\n        title: this.$translate('noteFrom', { currentNodeTitle: currentNodeTitle }),  // Title of the node this note was created on\n        content: {\n          text: \"\",\n          attachments: []\n        }\n      };\n    } else {\n      this.item = angular.copy(this.NotebookService.getNotebookItemById(this.itemId));\n      this.item.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n      if (this.NotebookService.isNotebookItemPublic(this.item) &&\n          this.item.workgroupId != this.ConfigService.getWorkgroupId()) {\n        this.isEditMode = false;\n      }\n    }\n\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    this.color = this.notebookConfig.itemTypes[this.item.type].label.color;\n\n    let label = this.notebookConfig.itemTypes[this.item.type].label.singular;\n    if (this.isEditMode) {\n      if (this.itemId) {\n        this.title = this.$translate('editNote', { noteLabel: label });\n      } else {\n        this.title = this.$translate('addNote', { noteLabel: label });\n      }\n    } else {\n      this.title = this.$translate('viewNote', { noteLabel: label });\n    }\n    this.saveEnabled = false;\n\n    if (this.file != null) {\n      // student is trying to add a file to this notebook item.\n      const files = [this.file];\n      this.attachStudentAssetToNote(files);\n    } else {\n      this.setShowUpload();\n    }\n\n    if (this.text != null) {\n      this.item.content.text = this.text;\n      this.saveEnabled = true;\n    }\n    if (!this.isFileUploadEnabled) {\n      this.showUpload = false;\n    }\n\n    if (this.studentWorkIds != null) {\n      this.item.content.studentWorkIds = this.studentWorkIds;\n    }\n  }\n\n  toggleMakeNotePublic() {\n    if (this.item.groups == null) {\n      this.item.groups = [];\n    }\n    if (!this.item.groups.includes(\"public\")) {\n      this.item.groups.push(\"public\");\n    }\n  }\n\n  attachStudentAssetToNote(files) {\n    if (files != null) {\n      for (let f = 0; f < files.length; f++) {\n        let file = files[f];\n        // create a temporary attachment object\n        let attachment = {\n          studentAssetId: null,\n          iconURL: \"\",\n          file: file  // add the file for uploading in the future\n        };\n        this.item.content.attachments.push(attachment);\n        // read image data as URL and set it in the temp attachment src attribute so students can preview the image\n        let reader = new FileReader();\n        reader.onload = (event) => {\n          attachment.iconURL = event.target.result;\n        };\n        reader.readAsDataURL(file);\n        this.update();\n      }\n    }\n  }\n\n  getItemNodeId() {\n    if (this.item == null) {\n      return null;\n    } else {\n      return this.item.nodeId;\n    }\n  }\n\n  getItemNodeLink() {\n    if (this.item == null) {\n      return \"\";\n    } else {\n      return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n    }\n  }\n\n  getItemNodePosition() {\n    if (this.item == null) {\n      return \"\";\n    } else {\n      return this.ProjectService.getNodePositionById(this.item.nodeId);\n    }\n  }\n\n  getTemplateUrl() {\n    return this.ProjectService.getThemePath() + '/notebook/editNotebookItem.html';\n  }\n\n  removeAttachment(attachment) {\n    if (this.item.content.attachments.indexOf(attachment) != -1) {\n      this.item.content.attachments.splice(this.item.content.attachments.indexOf(attachment), 1);\n      this.update();\n    }\n  }\n\n  delete(ev) {\n    // TODO: add archiving/deleting notebook items\n  }\n\n  cancel() {\n    this.$mdDialog.hide();\n  }\n\n  close() {\n    this.$mdDialog.hide();\n  }\n\n  save() {\n    // go through the notebook item's attachments and look for any attachments that need to be uploaded and made into StudentAsset.\n    let uploadAssetPromises = [];\n    this.item.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n    if (this.item.content.attachments != null) {\n      for (let i = 0; i < this.item.content.attachments.length; i++) {\n        let attachment = this.item.content.attachments[i];\n        if (attachment.studentAssetId == null && attachment.file != null) {\n          // this attachment hasn't been uploaded yet, so we'll do that now.\n          let file = attachment.file;\n          var deferred = this.$q.defer();\n          this.StudentAssetService.uploadAsset(file).then((studentAsset) => {\n            this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n              if (copiedAsset != null) {\n                var newAttachment = {\n                  studentAssetId: copiedAsset.id,\n                  iconURL: copiedAsset.iconURL\n                };\n                this.item.content.attachments[i] = newAttachment;\n                deferred.resolve();\n              }\n            });\n          });\n          uploadAssetPromises.push(deferred.promise);\n        }\n      }\n    }\n\n    // make sure all the assets are created before saving the notebook item.\n    this.$q.all(uploadAssetPromises).then(() => {\n      this.NotebookService.saveNotebookItem(\n          this.item.id, this.item.nodeId, this.item.localNotebookItemId,\n          this.item.type, this.item.title, this.item.content, this.item.groups,\n          this.item.content.clientSaveTime)\n          .then(() => {\n            this.$mdDialog.hide();\n          });\n    });\n  }\n\n  update() {\n    let saveEnabled = false;\n    if (this.item.content.text || !this.isRequireTextOnEveryNote() && this.item.content.attachments.length) {\n      saveEnabled = true;\n    }\n    this.saveEnabled = saveEnabled;\n    this.setShowUpload();\n  }\n\n  isRequireTextOnEveryNote() {\n    return this.notebookConfig.itemTypes != null &&\n      this.notebookConfig.itemTypes.note != null &&\n      this.notebookConfig.itemTypes.note.requireTextOnEveryNote;\n  }\n\n  setShowUpload() {\n    this.showUpload = this.notebookConfig.itemTypes != null &&\n      this.notebookConfig.itemTypes.note != null &&\n      this.notebookConfig.itemTypes.note.enableStudentUploads &&\n      this.item.content.attachments &&\n      this.item.content.attachments.length < 1;\n  }\n\n  canShareWithClass() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n}\n\nEditNotebookItemController.$inject = [\n  '$filter',\n  \"$mdDialog\",\n  \"$q\",\n  \"$injector\",\n  \"$rootScope\",\n  \"$scope\",\n  \"ConfigService\",\n  \"NotebookService\",\n  \"ProjectService\",\n  \"StudentAssetService\",\n  \"StudentDataService\",\n  \"UtilService\"\n];\n\nexport default EditNotebookItemController;\n"]}