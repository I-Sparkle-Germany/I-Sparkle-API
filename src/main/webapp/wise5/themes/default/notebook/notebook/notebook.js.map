{"version":3,"sources":["notebook.es6"],"names":["NotebookController","$filter","$mdDialog","$scope","$rootScope","ConfigService","NotebookService","ProjectService","StudentAssetService","StudentDataService","$translate","themePath","getThemePath","itemId","item","config","enabled","workgroupId","getWorkgroupId","reportVisible","itemTypes","report","notesVisible","insertMode","insertContent","$on","event","args","notebook","angular","copy","ev","editNote","file","doDelete","deleteNote","shareNote","showUnshareNoteConfirmDialog","logOutListener","$broadcast","getNotebookByWorkgroup","reportId","notes","studentAsset","alert","isEditMode","notebookItemTemplate","show","parent","element","document","body","targetEvent","templateUrl","controller","controllerAs","bindToController","locals","confirm","title","ariaLabel","ok","cancel","then","noteCopy","getLatestNotebookItemByLocalNotebookItemId","id","content","clientSaveTime","Date","parse","clientDeleteTime","saveNotebookItem","nodeId","localNotebookItemId","type","groups","addNotebookItemToGroup","removeNotebookItemFromGroup","$event","notebookItem","selectedNotebookItem","componentController","attachNotebookItemToComponent","stopPropagation","notebookItems","items","notebookItemKey","last","push","value","closeNotes","addNewItem","$inject","Notebook","bindings","template"],"mappings":"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","file":"notebook.js","sourcesContent":["\"use strict\";\n\nimport EditNotebookItemController from '../editNotebookItemController';\n\nclass NotebookController {\n    constructor($filter,\n                $mdDialog,\n                $scope,\n                $rootScope,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        this.$translate = this.$filter('translate');\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.itemId = null;\n        this.item = null;\n        this.config = this.NotebookService.config;\n\n        if (!this.config.enabled) {\n            return;\n        }\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        //this.reportVisible = false;\n        this.reportVisible = this.config.itemTypes.report.enabled;\n        this.notesVisible = false;\n        this.insertMode = false;\n        this.insertContent = null;\n\n        this.$scope.$on('notebookUpdated', (event, args) => {\n            this.notebook = angular.copy(args.notebook);\n        });\n\n        // show edit note dialog on 'editNote' event\n        this.$scope.$on('editNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            this.editNote(itemId, true, null, ev);\n        });\n\n        // show edit note dialog on 'addNewNote' event\n        this.$scope.$on('addNewNote', (event, args) => {\n            let ev = args.ev;\n            let file = args.file;\n            this.editNote(null, true, file, ev);\n        });\n\n        // show delete note confirm dialog on 'deleteNote' event\n        this.$scope.$on('deleteNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = true;\n            this.deleteNote(itemId, ev, doDelete);\n        });\n\n        // show revive note confirm dialog on 'reviveNote' event\n        this.$scope.$on('reviveNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = false;\n            this.deleteNote(itemId, ev, doDelete);\n        });\n\n        // show share note confirm dialog on 'shareNote' event\n        this.$scope.$on('shareNote', (event, args) => {\n          let itemId = args.itemId;\n          let ev = args.ev;\n          this.shareNote(itemId, ev);\n        });\n\n        this.$scope.$on('unshareNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            this.showUnshareNoteConfirmDialog(itemId, ev);\n        });\n\n        this.logOutListener = $scope.$on('logOut', (event, args) => {\n            this.logOutListener();\n            this.$rootScope.$broadcast('componentDoneUnloading');\n        });\n\n        // get the notebook for this workgroup\n        this.notebook = this.NotebookService.getNotebookByWorkgroup(this.workgroupId);\n        // assume only 1 report for now\n        this.reportId = this.config.itemTypes.report.notes[0].reportId;\n    }\n\n    deleteStudentAsset(studentAsset) {\n        alert(this.$translate('deleteStudentAssetFromNotebookNotImplementedYet'));\n        /*\n         StudentAssetService.deleteAsset(studentAsset).then(angular.bind(this, function(deletedStudentAsset) {\n         // remove studentAsset\n         this.studentAssets.splice(this.studentAssets.indexOf(deletedStudentAsset), 1);\n         this.calculateTotalUsage();\n         }));\n         */\n    }\n\n    editNote(itemId, isEditMode, file, ev) {\n        let notebookItemTemplate = this.themePath + '/notebook/editNotebookItem.html';\n\n        // Display a dialog where students can view/add/edit a notebook item\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            templateUrl: notebookItemTemplate,\n            controller: EditNotebookItemController,\n            controllerAs: 'editNotebookItemController',\n            bindToController: true,\n            locals: {\n                itemId: itemId,\n                isEditMode: isEditMode,\n                file: file\n            }\n        });\n    }\n\n    /**\n     * Delete the note specified by the itemId.\n     */\n    deleteNote(itemId, ev, doDelete = true) {\n        let confirm = null;\n\n        if (doDelete) {\n            confirm = this.$mdDialog.confirm()\n                .title(this.$translate('deleteNoteConfirmMessage'))\n                .ariaLabel('delete note confirmation')\n                .targetEvent(ev)\n                .ok(this.$translate('delete'))\n                .cancel(this.$translate('cancel'));\n        } else {\n            confirm = this.$mdDialog.confirm()\n                .title(this.$translate('reviveNoteConfirmMessage'))\n                .ariaLabel('revive note confirmation')\n                .targetEvent(ev)\n                .ok(this.$translate('revive'))\n                .cancel(this.$translate('cancel'));\n        }\n\n        this.$mdDialog.show(confirm).then(() => {\n            let noteCopy = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(itemId));\n            noteCopy.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n            noteCopy.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n            let clientDeleteTime = null;  // if delete timestamp is null, then we are in effect un-deleting this note item\n            if (doDelete) {\n                clientDeleteTime = Date.parse(new Date());  // set delete timestamp\n            }\n            this.NotebookService.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId,\n                noteCopy.type, noteCopy.title, noteCopy.content, noteCopy.groups, noteCopy.content.clientSaveTime, clientDeleteTime);\n        }, () => {\n            // they chose not to delete. Do nothing, the dialog will close.\n        });\n    }\n\n    shareNote(itemId, ev) {\n      let confirm = this.$mdDialog.confirm()\n        .title('shareNoteConfirmMessage')\n        .ariaLabel('share note confirmation')\n        .ok(this.$translate('share'))\n        .cancel(this.$translate('cancel'))\n      this.$mdDialog.show(confirm).then(() => {\n        this.NotebookService.addNotebookItemToGroup(itemId, 'public');\n      });\n    }\n\n    showUnshareNoteConfirmDialog(itemId, ev) {\n        let confirm = this.$mdDialog.confirm()\n            .title('unshareNoteConfirmMessage')\n            .ariaLabel('unshare note confirmation')\n            .ok(this.$translate('unshare'))\n            .cancel(this.$translate('cancel'))\n        this.$mdDialog.show(confirm).then(() => {\n            this.NotebookService.removeNotebookItemFromGroup(itemId, 'public');\n        });\n    }\n\n    notebookItemSelected($event, notebookItem) {\n        this.selectedNotebookItem = notebookItem;\n    }\n\n    attachNotebookItemToComponent($event, notebookItem) {\n        this.componentController.attachNotebookItemToComponent(notebookItem);\n        this.selectedNotebookItem = null;  // reset selected notebook item\n        // TODO: add some kind of unobtrusive confirmation to let student know that the notebook item has been added to current component\n        $event.stopPropagation();  // prevents parent notebook list item from getting the onclick event so this item won't be re-selected.\n    }\n\n    getNotes() {\n        let notes = [];\n        let notebookItems = this.notebook.items;\n        for (let notebookItemKey in notebookItems) {\n            let notebookItem = notebookItems[notebookItemKey];\n            if (notebookItem.last().type === 'note') {\n                notes.push(notebookItem);\n            }\n        }\n        return notes;\n    }\n\n    open(value, event) {\n        if (value === 'report') {\n            // toggle the report view\n            this.reportVisible = !this.reportVisible;\n        } else if (value === 'note') {\n            // toggle the notes view\n            if (this.notesVisible) {\n                this.closeNotes(event);\n            } else {\n                this.notesVisible = true;\n            }\n        } else if (value === 'new') {\n            // open the new note dialog\n            this.NotebookService.addNewItem(event);\n        }\n    }\n\n    closeNotes($event) {\n        this.notesVisible = false;\n        this.insertMode = false;\n    }\n\n    /*closeReport() {\n        this.reportVisible = false;\n    }*/\n\n    setInsertMode(value) {\n        this.insertMode = value;\n        if (value) {\n            this.notesVisible = true;\n        }\n    }\n\n    insert(value, $event) {\n        // user is inserting new content into the report\n        this.insertContent = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(value, this.workgroupId));\n    }\n}\n\nNotebookController.$inject = [\n    '$filter',\n    '$mdDialog',\n    '$scope',\n    '$rootScope',\n    'ConfigService',\n    'NotebookService',\n    'ProjectService',\n    'StudentAssetService',\n    'StudentDataService'\n];\n\nconst Notebook = {\n    bindings: {\n    },\n    template:\n        `<div ng-if=\"$ctrl.config.enabled\" ng-class=\"{'notes-visible': $ctrl.notesVisible}\">\n            <div class=\"notebook-overlay\"></div>\n            <notebook-launcher config=\"$ctrl.config\"\n                               note-count=\"$ctrl.notebook.items.length\"\n                               notes-visible=\"$ctrl.notesVisible\"\n                               on-open=\"$ctrl.open(value, event)\"></notebook-launcher>\n            <notebook-report ng-if=\"$ctrl.config.itemTypes.report.enabled\"\n                             insert-content=\"$ctrl.insertContent\"\n                             insert-mode=\"$ctrl.insertMode\"\n                             config=\"$ctrl.config\"\n                             reportId=\"$ctrl.reportId\"\n                             visible=\"$ctrl.reportVisible\"\n                             workgroup-id=\"$ctrl.workgroupId\"\n                             on-collapse=\"$ctrl.insertMode=false\"\n                             on-set-insert-mode=\"$ctrl.setInsertMode(value)\"></notebook-report>\n        </div>\n        <notebook-notes ng-if=\"$ctrl.config.enabled\"\n                        notebook=\"$ctrl.notebook\"\n                        notes-visible=\"$ctrl.notesVisible\"\n                        config=\"$ctrl.config\"\n                        insert-mode=\"$ctrl.insertMode\"\n                        workgroup-id=\"$ctrl.workgroupId\"\n                        on-close=\"$ctrl.closeNotes()\"\n                        on-insert=\"$ctrl.insert(value, event)\"\n                        on-set-insert-mode=\"$ctrl.setInsertMode(value)\"></notebook-notes>`,\n    controller: NotebookController\n};\n\nexport default Notebook;\n"]}