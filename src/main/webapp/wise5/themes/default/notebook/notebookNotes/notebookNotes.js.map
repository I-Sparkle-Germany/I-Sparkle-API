{"version":3,"sources":["notebookNotes.es6"],"names":["NotebookNotesController","$filter","$rootScope","$scope","NotebookService","ProjectService","$translate","groups","selectedTabIndex","publicNotebookItems","groupNameToGroup","personalGroup","title","name","isEditAllowed","items","Object","entries","notebook","personalItemKey","personalItemValue","last","type","push","spaces","getSpaces","space","isShowInNotebook","spaceGroup","id","$onInit","color","config","itemTypes","note","label","$onChanges","changes","angular","copy","currentValue","hasNotes","keys","length","$on","event","args","visibleSpace","group","notebookItem","updatePrivateNotebookNote","includes","updatePublicNotebookNote","updateNotebookNote","localNotebookItemId","workgroupId","removeNotebookNote","added","i","item","splice","insertMode","link","$ev","$broadcast","ev","onInsert","editItem","itemId","alert","$event","onClose","onSetInsertMode","value","$inject","NotebookNotes","bindings","notesVisible","template","controller"],"mappings":"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","file":"notebookNotes.js","sourcesContent":["\"use strict\";\n\nclass NotebookNotesController {\n  constructor($filter,\n              $rootScope,\n              $scope,\n              NotebookService,\n              ProjectService) {\n    this.$translate = $filter('translate');\n    this.$rootScope = $rootScope;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.groups = [];\n    this.selectedTabIndex = 0;\n    this.$scope = $scope;\n    this.publicNotebookItems = this.NotebookService.publicNotebookItems;\n    this.groupNameToGroup = {};\n\n    const personalGroup = {\n      title: \"Personal\",\n      name: \"private\",\n      isEditAllowed: true,\n      items: []\n    };\n    this.groupNameToGroup['private'] = personalGroup;\n\n    for (const [personalItemKey, personalItemValue] of Object.entries(this.notebook.items)) {\n      if (personalItemValue.last().type === 'note') {\n        personalGroup.items.push(personalItemValue.last());\n      }\n    };\n\n    this.groups.push(personalGroup);\n\n    const spaces = this.ProjectService.getSpaces();\n    for (let space of spaces) {\n      if (space.isShowInNotebook) {\n        const spaceGroup = {\n          title: space.name,\n          name: space.id,\n          isEditAllowed: true,\n          items: []\n        };\n        this.groupNameToGroup[space.id] = spaceGroup;\n        this.groups.push(spaceGroup);\n      }\n    }\n\n    this.$onInit = () => {\n      this.color = this.config.itemTypes.note.label.color;\n    }\n\n    this.$onChanges = (changes) => {\n      if (changes.notebook) {\n        this.notebook = angular.copy(changes.notebook.currentValue);\n        this.hasNotes = Object.keys(this.notebook.items).length ? true : false;\n      }\n    }\n\n    this.$scope.$on('openNotebook', (event, args) => {\n      this.selectedTabIndex = args.visibleSpace === \"public\" ? 1 : 0;\n    });\n\n    this.$rootScope.$on('publicNotebookItemsRetrieved', (event, args) => {\n      for (let group of this.groups) {\n        if (group.name != 'private') {\n          group.items = this.publicNotebookItems[group.name];\n        }\n      }\n    });\n\n    this.$rootScope.$on('notebookUpdated', (event, args) => {\n      let notebookItem = args.notebookItem;\n      if ((notebookItem.groups == null || notebookItem.groups.length == 0) &&\n          notebookItem.type === \"note\") {\n        this.updatePrivateNotebookNote(notebookItem)\n      }\n      if (notebookItem.groups != null && notebookItem.groups.includes('public')) {\n        this.updatePublicNotebookNote(notebookItem);\n      }\n    });\n  }\n\n  updatePrivateNotebookNote(notebookItem) {\n    this.updateNotebookNote(this.groupNameToGroup['private'],\n        notebookItem.localNotebookItemId, notebookItem.workgroupId, notebookItem);\n    if (this.groupNameToGroup['public'] != null) {\n      this.removeNotebookNote(this.groupNameToGroup['public'],\n        notebookItem.localNotebookItemId, notebookItem.workgroupId);\n    }\n  }\n\n  updatePublicNotebookNote(notebookItem) {\n    this.updateNotebookNote(this.groupNameToGroup['public'],\n        notebookItem.localNotebookItemId, notebookItem.workgroupId, notebookItem);\n    this.removeNotebookNote(this.groupNameToGroup['private'],\n        notebookItem.localNotebookItemId, notebookItem.workgroupId);\n  }\n\n  updateNotebookNote(group, localNotebookItemId, workgroupId, notebookItem) {\n    let added = false;\n    let items = group.items;\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n      if (item.localNotebookItemId == localNotebookItemId && item.workgroupId == workgroupId) {\n        items[i] = notebookItem;\n        added = true;\n      }\n    }\n    if (!added) {\n      items.push(notebookItem);\n    }\n  }\n\n  removeNotebookNote(group, localNotebookItemId, workgroupId) {\n    let items = group.items;\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n      if (item.localNotebookItemId == localNotebookItemId && item.workgroupId == workgroupId) {\n        items.splice(i, 1);\n        i--;\n      }\n    }\n  }\n\n  getTitle() {\n    let title = '';\n    if (this.insertMode) {\n      title = this.$translate('selectItemToInsert');\n    } else {\n      title = this.config.itemTypes.note.label.link;\n    }\n    return title;\n  }\n\n  editItem($ev, note) {\n    this.$rootScope.$broadcast('editNote', {note: note, ev: $ev});\n  }\n\n  select($ev, note) {\n    if (this.insertMode) {\n      this.onInsert({note: note, event: $ev});\n    } else {\n      this.editItem($ev, note);\n    }\n  }\n\n  edit(itemId) {\n    alert(\"Edit the item: \" + itemId);\n  }\n\n  close($event) {\n    this.onClose($event);\n  }\n\n  cancelInsertMode($event) {\n    this.onSetInsertMode({value: false});\n  }\n}\n\nNotebookNotesController.$inject = [\n  '$filter',\n  '$rootScope',\n  '$scope',\n  'NotebookService',\n  'ProjectService'\n];\n\nconst NotebookNotes = {\n  bindings: {\n    config: '<',\n    insertMode: '<',\n    notebook: '<',\n    publicNotebookItems: '<',\n    notesVisible: '<',\n    workgroupId: '<',\n    onClose: '&',\n    onInsert: '&',\n    onSetInsertMode: '&'\n  },\n  template:\n    `<md-sidenav md-component-id=\"notes\"\n        md-is-open=\"$ctrl.notesVisible\"\n        md-whiteframe=\"4\"\n        md-disable-backdrop\n        layout=\"column\"\n        class=\"md-sidenav-right notebook-sidebar\">\n      <md-toolbar>\n          <div class=\"md-toolbar-tools\"\n               ng-class=\"{'insert-mode': $ctrl.insertMode}\"\n               style=\"background-color: {{$ctrl.color}};\">\n              {{$ctrl.getTitle()}}\n              <span flex></span>\n              <md-button ng-click=\"$ctrl.close($event)\"\n                  class=\"md-icon-button\"\n                  aria-label=\"{{ 'Close' | translate }}\">\n                <md-icon>close</md-icon>\n              </md-button>\n          </div>\n      </md-toolbar>\n      <md-content>\n      <md-tabs md-selected=\"$ctrl.selectedTabIndex\" md-dynamic-height md-border-bottom md-autoselect md-swipe-content>\n        <md-tab ng-repeat=\"group in $ctrl.groups\"\n            ng-disabled=\"group.disabled\"\n            label=\"{{group.title}}\">\n          <div class=\"demo-tab tab{{$index%4}}\" style=\"padding: 25px; text-align: center;\">\n              <div class=\"notebook-items\" ng-class=\"{'notebook-items--insert': $ctrl.insertMode}\" layout=\"row\" layout-wrap>\n                <div class=\"md-padding\" ng-if=\"!$ctrl.hasNotes\" translate=\"noNotes\" translate-value-term=\"{{$ctrl.config.itemTypes.note.label.plural}}\"></div>\n                <notebook-item ng-repeat=\"note in group.items\"\n                    config=\"$ctrl.config\"\n                    group=\"{{group.name}}\"\n                    item-id=\"note.localNotebookItemId\"\n                    is-edit-allowed=\"group.isEditAllowed\"\n                    is-choose-mode=\"$ctrl.insertMode\"\n                    note=\"note\"\n                    workgroup-id=\"note.workgroupId\"\n                    on-select=\"$ctrl.select($ev, note)\"\n                    style=\"display: flex;\"\n                    flex=\"100\"\n                    flex-gt-xs=\"50\">\n                </notebook-item>\n            </div>\n          </div>\n        </md-tab>\n      </md-tabs>\n      </md-content>\n    </md-sidenav>`,\n  controller: NotebookNotesController\n};\n\nexport default NotebookNotes;\n"]}