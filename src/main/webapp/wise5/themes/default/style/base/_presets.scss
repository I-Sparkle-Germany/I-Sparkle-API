// 1. Config
$avatar-icon-padding: 6px !default;
$avatar-icon-padding-lg: 8px !default;

// 2. Base
body {
  background: color('body-bg');
}

// Typography
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 1rem;
  margin-top: 1rem;
  line-height: 1.2em;
}

p {
  //line-height: 1.25rem;
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

blockquote {
    background-color: lighten(color('primary'), 56%);
    padding: 8px 12px;
    margin: 16px 0;
    border-style: solid;
    border-color: color('primary');
    border-width: 0 0 0 3px;
}

.overflow--ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// TODO: remove once bootstrap dependency is removed
label {
    font-weight: 400;
    display: inherit;
    max-width: none;
    margin-bottom: none;
}

.transform--none {
    text-transform: none;
}

.badge {
    border-radius: $card-border-radius;
    padding: 2px 6px;
    font-size: rem(1.2);
    font-weight: 500;
    font-style: normal;
    background-color: color('gray-dark');

    &.md-button {
        min-width: 0;
        min-height: 0;
        line-height: inherit;

        &:hover, &:focus {
            background-color: color('gray-dark');
        }

        &:focus {
            outline: 1px dotted color('gray-dark');
        }
    }
}

.badge--info {
    background-color: color('info');
    color: #ffffff;
}

.badge--warn {
    background-color: color('warn');
    color: #ffffff;
}

.badge--success {
    background-color: color('success');
    color: #ffffff;
}

.center {
    text-align: center;
}

.block {
    display: block;
}

// Color
// Set classes for each named color in the $colors map
@each $key, $value in $colors {
    .#{$key} {
      color: $value;
    }
}

// Set classes for each named color in the $colors map
@each $key, $value in $colors {
    .#{$key}-bg {
      background-color: $value;
    }
}

// Set classes for common font weights
.light {
    font-weight: 300;
}

.normal {
    font-weight: 400;
}

.heavy {
    font-weight: 500;
}

.bold {
    font-weight: 600;
}

// Links
a {
  color: color('primary');
  cursor: pointer;
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: 300ms border-bottom;

  &:not(.md-button) {
    &:hover, &:focus {
      border-bottom: 1px solid;
      outline: none;
    }
  }
}

.active {
    background-color: rgba(158,158,158,0.2);
    color: color('text');
}

/*.breadcrumb {
  .ng-enter, .ng-leave {
    transition: 300ms cubic-bezier(0.250, 0.250, 0.750, 0.750 opacity;
  }

  .ng-leave.ng-leave-active, .ng-enter {
    opacity: 0;
  }

  .ng-enter.ng-enter-active, .ng-leave {
    opacity: 1;
  }
}*/

// Images & Icons
.avatar {
  border-radius: 50%;
  box-sizing: content-box;
}

.avatar--square {
  border-radius: $card-border-radius;
}

// Rules for sizing avatars (matches material icons plus avatar-icon padding)
.avatar {
  &.md-18 {
    height: 18px + $avatar-icon-padding*2;
    width: 18px + $avatar-icon-padding*2;
  }
  &.md-24 {
    height: 24px + $avatar-icon-padding*2;
    width: 24px + $avatar-icon-padding*2;
  }
  &.md-36 {
    height: 36px + $avatar-icon-padding*2;
    width: 36px + $avatar-icon-padding*2;
  }
  &.md-48 {
    height: 48px + $avatar-icon-padding*2;
    width: 48px + $avatar-icon-padding*2;
  }
}

// Rules for sizing avatar backgrounds (when using a child md-icon)
.avatar--icon {
  padding: $avatar-icon-padding;
  background-color: color('gray-light');
  white-space: normal !important;

  &.md-18 {
    height: 18px;
    width: 18px;
  }
  &.md-24 {
    height: 24px;
    width: 24px;
  }
  &.md-36 {
    height: 36px;
    width: 36px;
  }
  &.md-48 {
    height: 48px;
    width: 48px;
  }
}

md-toolbar.md-light-theme:not(.md-menu-toolbar) {
  md-icon {
    color: color('text-secondary');
  }

  .md-button:disabled {
    md-icon {
      color: color('text-disabled');
    }
  }
}

// hacks for now
md-icon, .md-button:not([disabled]) {
  &.primary {
    color: color('primary') !important;
  }
  &.success {
    color: color('success') !important;
  }
  &.warn {
    color: color('warn') !important;
  }
  &.accent-1 {
    color: color('accent-1') !important;
  }
  &.accent-2 {
    color: color('accent-2') !important;
  }
  &.accent-3 {
    color: color('accent-3') !important;
  }
}

.md-subheader, md-list .md-subheader, .md-subheader a, md-list .md-subheader a,
.md-subheader md-icon, md-list .md-subheader md-icon {
  color: color('accent-2');
}

// Drawing tool custom - TODO: move to draw tool module scss
.dt-container .dt-tools {
  z-index: 1;
}

// Theme overrides
md-input-container.md-wise-theme label {
  color: color('text');
}

md-select-menu.md-default-theme md-option[selected], md-select-menu md-option[selected] {
  background-color: color('selected-bg');
}

// Animations
.animate-show {
  max-height: 9999px;
  opacity: 1;
}

.animate-show.ng-hide-add, .animate-show.ng-hide-remove {
  transition: all 250ms;
}

.animate-show.ng-hide {
  max-height: 0;
  min-height: 0;
  opacity: 0;
  padding: 0;
}

.animate-repeat {
}

.animate-repeat.ng-move,
.animate-repeat.ng-enter,
.animate-repeat.ng-leave {
  transition:opacity 250ms;
}

.animate-repeat.ng-leave.ng-leave-active,
.animate-repeat.ng-move,
.animate-repeat.ng-enter {
  opacity:0;
}

.animate-repeat.ng-leave,
.animate-repeat.ng-move.ng-move-active,
.animate-repeat.ng-enter.ng-enter-active {
  opacity:1;
}

.animate-fade {
    &.ng-hide-add, &.ng-hide-remove {
        transition: all 250ms;
    }

    &.ng-enter, &.ng-hide {
        opacity: 0;
    }

    &.ng-enter.ng-enter-active {
      opacity: 1;
    }

    &.ng-leave {
      transition: 0.5s linear all;
      opacity: 1;
    }

    &.ng-leave.ng-leave-active {
      opacity: 0;
    }
}

.transition-all {
    transition: 0.25s linear all;
}
