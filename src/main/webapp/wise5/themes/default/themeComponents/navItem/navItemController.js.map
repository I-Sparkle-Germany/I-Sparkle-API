{"version":3,"sources":["navItemController.es6"],"names":[],"mappings":"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","file":"navItemController.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($rootScope,\n                $scope,\n                $translate,\n                $element,\n                dragulaService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                $mdDialog) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$translate = $translate;\n        this.dragulaService = dragulaService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.$mdDialog = $mdDialog;\n        this.autoScroll = require('dom-autoscroller');\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.StudentDataService.currentNode;\n        this.previousNode = null;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n\n        // whether this node is a planning node\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n\n        // the array of nodes used for drag/drop planning sorting\n        this.availablePlanningNodes = [];\n\n        // whether the node is a planning node instance\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n        this.isPlanningInstance = this.ProjectService.isPlanningInstance(this.nodeId);\n\n        this.parentGroupId = null;\n\n        /*\n         * whether planning mode is on or off which determines if students\n         * can edit planning related aspects of the project such as adding,\n         * moving, or deleting planning steps.\n         */\n        this.planningMode = false;\n\n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n\n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n            this.isParentGroupPlanning = this.ProjectService.isPlanning(this.parentGroupId);\n        }\n\n        if (this.isPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.nodeId);\n        }\n\n        if (this.isParentGroupPlanning) {\n\n            if (parentGroup.planningMode) {\n                // the parent is currently in planning mode\n                this.planningMode = true;\n            }\n\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.parentGroupId);\n\n            this.$scope.$watch(\n                () => {\n                    // watch the position of this node\n                    return this.ProjectService.idToPosition[this.nodeId];\n                },\n                (value) => {\n                    // the position has changed for this node so we will update it in the UI\n                    this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n                }\n            );\n        }\n\n        this.$scope.$watch(\n            () => { return this.StudentDataService.currentNode; },\n            (newNode, oldNode) => {\n                this.currentNode = newNode;\n                this.previousNode = oldNode;\n                this.isCurrentNode = (this.nodeId === newNode.id);\n\n                if (this.ProjectService.isApplicationNode(newNode.id)) {\n                    return;\n                }\n\n                if (oldNode) {\n                    let isPrev = (this.nodeId === oldNode.id);\n\n                    if (this.StudentDataService.previousStep) {\n                        this.$scope.$parent.isPrevStep = (this.nodeId === this.StudentDataService.previousStep.id);\n                    }\n\n                    if (isPrev && !this.isGroup) {\n                        this.zoomToElement();\n                    }\n                }\n\n                if (this.isGroup) {\n                    let prevNodeisGroup = (!oldNode || this.ProjectService.isGroupNode(oldNode.id));\n                    if (this.isCurrentNode) {\n                        this.expanded = true;\n                        if (prevNodeisGroup) {\n                            this.zoomToElement();\n                        }\n                    } else if (!prevNodeisGroup) {\n                        if (this.ProjectService.isNodeDescendentOfGroup(oldNode, this.item)) {\n                            this.expanded = true;\n                        } else {\n                            this.expanded = false;\n                        }\n                    }\n                }\n            }\n        );\n\n        this.$scope.$watch(\n            () => { return this.expanded; },\n            (value) => {\n                this.$scope.$parent.itemExpanded = value;\n            }\n        );\n\n        this.$scope.$watch(\n            () => { return this.planningMode; },\n            (value) => {\n                this.$scope.$parent.planningMode = value;\n            }\n        );\n\n        // a group node has turned on or off planning mode\n        this.$rootScope.$on('togglePlanningMode', (event, args) => {\n\n            // get the group node that has had its planning node changed\n            let planningModeClickedNodeId = args.nodeId;\n            let planningMode = args.planningMode;\n\n            // get this node's parent group\n            let parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n            let parentGroupId = null;\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n\n            if (parentGroupId == planningModeClickedNodeId) {\n                // the parent of this node has changed their planning mode\n                this.planningMode = planningMode;\n            }\n        });\n\n        let dragId = 'planning_' + this.nodeId ;\n        // handle item drop events\n        let dropEvent = dragId + '.drop-model';\n        this.$scope.$on(dropEvent, (el, target, source) => {\n            let nodeChangedId = target.data().nodeid;\n            this.planningNodeItemsChanged(nodeChangedId);\n        });\n\n        this.dragulaService.options(this.$scope, dragId, {\n            moves: (el, source, handle, sibling) => {\n                if (!this.planningMode) {\n                    return false;\n                }\n\n                let nodeId = el.getAttribute('data-nodeid');\n                return this.ProjectService.isPlanningInstance(nodeId);\n            }\n        });\n\n        let drake = dragulaService.find(this.$scope, dragId).drake;\n\n        // support scroll while dragging\n        let scroll = this.autoScroll(\n            [document.querySelector('#content')], {\n            margin: 30,\n            pixels: 50,\n            scrollWhenOutside: true,\n            autoScroll: function() {\n                // Only scroll when the pointer is down, and there is a child being dragged\n                return this.down && drake.dragging;\n            }\n        });\n    }\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/navItem/navItem.html';\n    };\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let top = this.$element[0].offsetTop;\n            let location = this.isGroup ? top - 32 : top - 80;\n            let delay = 350;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear');\n        }, 250);\n    };\n\n    itemClicked(event) {\n        if (this.isGroup) {\n            this.expanded = !this.expanded;\n            if (this.expanded) {\n                if (this.isCurrentNode) {\n                    this.zoomToElement();\n                } else {\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            }\n        } else {\n            if (this.StudentDataService.planningMode) {\n                // Don't allow students to enter planning steps while in planning mode\n                this.$translate(['itemLocked', 'planningModeStepsUnVisitable', 'ok']).then((translations) => {\n                    this.$mdDialog.show(\n                        this.$mdDialog.alert()\n                            .title(translations.itemLocked)\n                            .textContent(translations.planningModeStepsUnVisitable)\n                            .ariaLabel(translations.itemLocked)\n                            .ok(translations.ok)\n                            .targetEvent(event)\n                    );\n                });\n            } else {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n            }\n        }\n    };\n\n    /**\n     * Save an event when planning node is added\n     * @param planningNodeAdded\n     */\n    savePlanningNodeAddedEvent(planningNodeAdded) {\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = \"planningNodeAdded\";\n        let eventData = {\n            nodeIdAdded: planningNodeAdded.id,\n            planningNodeTemplateId: planningNodeAdded.planningNodeTemplateId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n    };\n\n    /**\n     * Returns the max times a planning node can be added to the project (-1 is\n     * is returned if there is no limit)\n     * @param planningNodeId\n     */\n    getPlannindNodeMaxAllowed(planningNodeId) {\n        let maxAddAllowed = -1;  // by default, students can add as many instances as they want\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n        // get the maxAddAllowed value by looking up the planningNode in the project.\n        if (planningGroupNode && planningGroupNode.availablePlanningNodes) {\n            for (let a = 0; a < planningGroupNode.availablePlanningNodes.length; a++) {\n                let availablePlanningNode = planningGroupNode.availablePlanningNodes[a];\n                if (availablePlanningNode.nodeId === planningNodeId && availablePlanningNode.max != null) {\n                    maxAddAllowed = availablePlanningNode.max;\n                }\n            }\n        }\n\n        return maxAddAllowed;\n    };\n\n    /**\n     * Returns the number of times a planning node has been added to the project\n     * @param planningNodeId\n     */\n    getNumPlannindNodeInstances(planningNodeId) {\n        let numPlanningNodesAdded = 0;  // keep track of number of instances\n        // otherwise, see how many times the planning node template has been used.\n\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n\n        // loop through the child ids in the planning group and see how many times they've been used\n        if (planningGroupNode && planningGroupNode.ids) {\n            for (let c = 0; c < planningGroupNode.ids.length; c++) {\n                let childPlanningNodeId = planningGroupNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                if (childPlanningNode != null && childPlanningNode.planningNodeTemplateId === planningNodeId) {\n                    numPlanningNodesAdded++;\n                }\n            }\n        }\n\n        return numPlanningNodesAdded;\n    };\n\n    /**\n     * Returns true iff this student can add the specified planning node.\n     * Limits include reaching the max allowed count\n     * @param planningNodeId\n     */\n    canAddPlanningNode(planningNodeId) {\n        let maxAddAllowed = this.getPlannindNodeMaxAllowed(planningNodeId);\n\n        // if maxAddAllowed was not found or is set to 0, it means students can add as many as they want\n        if (maxAddAllowed < 1) {\n            return true;\n        }\n\n        let numPlanningNodesAdded = this.getNumPlannindNodeInstances(planningNodeId);\n\n        return numPlanningNodesAdded < maxAddAllowed;\n    };\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param templateNodeId the node id of the planning node template\n     * @returns the planning node instance\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, templateNodeId) {\n        // create the planning node instance\n        let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n        let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(nodeIdToInsertInside, templateNodeId, nextAvailablePlanningNodeId);\n\n        // add the planning node instance inside\n        this.ProjectService.addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance);\n\n        /*\n         * update the node statuses so that a node status is created for\n         * the new planning node instance\n         */\n        this.StudentDataService.updateNodeStatuses();\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n\n        // Save add planning node event\n        this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Open the planning mode select dialog to choose a planning node template\n     * to create a new planning instance\n     * @param event the trigger event\n     * @param targetNodeId the node to insert the new planning instance after or inside\n     * @param insertInside boolean whether to insert the new planning instance\n     * inside the target node (optional; default is after)\n     */\n    addPlanningInstance(event, targetNodeId, insertInside) {\n        // show dialog with list of planning nodes user can add to current group\n\n        let choosePlanningItemTemplateUrl = this.ProjectService.getThemePath() + '/themeComponents/navItem/choosePlanningItem.html';\n        let navitemCtrl = this;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            locals: {\n                targetNodeId: targetNodeId,\n                insertInside: insertInside,\n                navitemCtrl: navitemCtrl,\n            },\n            templateUrl: choosePlanningItemTemplateUrl,\n            targetEvent: event,\n            controller: ChoosePlanningItemController\n        });\n\n        function ChoosePlanningItemController($scope, $mdDialog, targetNodeId, insertInside, navitemCtrl) {\n            $scope.navitemCtrl = navitemCtrl;\n            $scope.targetNodeId = targetNodeId;\n            $scope.insertInside = insertInside;\n\n            $scope.addSelectedPlanningInstance = (templateNodeId) => {\n                if ($scope.insertInside) {\n                    $scope.navitemCtrl.addPlanningNodeInstanceInside($scope.targetNodeId, templateNodeId);\n                } else {\n                    $scope.navitemCtrl.addPlanningNodeInstanceAfter($scope.targetNodeId, templateNodeId);\n                }\n\n                $mdDialog.hide();\n            };\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        ChoosePlanningItemController.$inject = [\"$scope\", \"$mdDialog\", \"targetNodeId\", \"insertInside\", \"navitemCtrl\"];\n    };\n\n    /**\n     * Create a planning node instance and add it to the project after the specified nodeId\n     * @param groupId the group the new planning node instance will be added to\n     * @param nodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, templateNodeId) {\n\n        var parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // create the planning node instance\n            let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n            let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(parentGroupId, templateNodeId, nextAvailablePlanningNodeId);\n\n            // insert planning node instance after\n            this.ProjectService.addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance);\n\n            /*\n             * update the node statuses so that a node status is created for\n             * the new planning node instance\n             */\n            this.StudentDataService.updateNodeStatuses();\n\n            // perform any necessary updating\n            this.planningNodeChanged();\n\n            // Save add planning node event\n            this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n            return planningNodeInstance;\n        }\n    }\n\n    /**\n     * Remove the planning node instance\n     * @param planningNodeInstanceNodeId the planning node instance to remove\n     * @param event the event that triggered the function call\n     */\n    removePlanningNodeInstance(planningNodeInstanceNodeId, event) {\n        this.$translate([\"yes\", \"no\"]).then((translations) => {\n            let confirm = this.$mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title('Are you sure you want to delete this item?')\n                .textContent('Note: Any work you have done on the item will be lost.')\n                .ariaLabel('Delete item from project')\n                .targetEvent(event)\n                .ok(translations.yes)\n                .cancel(translations.no);\n\n            this.$mdDialog.show(confirm).then(() => {\n                // delete the node from the project\n                this.ProjectService.deleteNode(planningNodeInstanceNodeId);\n\n                // perform any necessary updating\n                this.planningNodeChanged(this.parentGroupId);\n\n                // Save remove planning node event\n                let componentId = null;\n                let componentType = null;\n                let category = \"Planning\";\n                let eventName = \"planningNodeRemoved\";\n                let eventData = {\n                    nodeIdRemoved: planningNodeInstanceNodeId\n                };\n                let eventNodeId = this.nodeId;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }, () => {});\n        });\n    }\n\n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    }\n\n    /**\n     * Get the node description\n     * @param nodeId get the description for this node\n     * @returns the description for the node\n     */\n    getNodeDescription(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var description = null;\n\n        if (node != null) {\n            description = node.description;\n        }\n\n        return description;\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode0(otherNodeId) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (this.nodeId != otherNodeId) {\n            if (this.ProjectService.isGroupNode(otherNodeId)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(this.nodeId, otherNodeId);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(this.nodeId, otherNodeId);\n            }\n\n            // Save move planning node event\n            let componentId = null;\n            let componentType = null;\n            let category = \"Planning\";\n            let eventName = \"planningNodeMoved\";\n            let eventData = {\n                nodeIdMoved: this.nodeId,\n                nodeIdMovedInsideOrAfter: otherNodeId\n            };\n            let eventNodeId = this.nodeId;\n            this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode(nodeIdToMove, nodeIdToMoveAfter) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (nodeIdToMove != nodeIdToMoveAfter) {\n            if (this.ProjectService.isGroupNode(nodeIdToMoveAfter)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToMoveAfter);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToMoveAfter);\n            }\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Something related to planning has changed in the project. This\n     * means a planning node was added, moved, or deleted.\n     * @param param planningNodeId planning node id\n     */\n    planningNodeChanged(planningNodeId) {\n        this.savePlanningNodeChanges(planningNodeId);\n\n        this.$rootScope.$broadcast('planningNodeChanged');\n    }\n\n    /**\n    * Save the changed nodes in NodeState\n    * @param param planningNodeId planning node id\n    **/\n    savePlanningNodeChanges(planningNodeId) {\n        let nodeState = this.NodeService.createNewNodeState();\n        let nodeId = planningNodeId ? planningNodeId : this.nodeId;\n        nodeState.nodeId = nodeId;\n        nodeState.isAutoSave = false;\n        nodeState.isSubmit = false;\n\n        var studentData = {};\n        studentData.nodeId = nodeId;\n        studentData.nodes = [];\n        let planningNode = this.ProjectService.getNodeById(nodeId);\n        studentData.nodes.push(planningNode);  // add the planning node (group)\n        // loop through the child ids in the planning group and save them also\n        if (planningNode.ids != null) {\n            for (let c = 0; c < planningNode.ids.length; c++) {\n                let childPlanningNodeId = planningNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                studentData.nodes.push(childPlanningNode);\n            }\n        }\n\n        nodeState.studentData = studentData;\n        var nodeStates = [];\n        nodeStates.push(nodeState);\n        this.StudentDataService.saveNodeStates(nodeStates);\n    }\n\n    /**\n     * Toggle the planning mode on and off. Notify child nodes that\n     * the planning mode has changed so they can act accordingly.\n     */\n    togglePlanningMode() {\n        /*if (this.StudentDataService.planningMode && !this.item.planningMode) {\n            // Don't allow multiple concurrent planning modes.\n            this.$translate('planningModeOnlyOnePlanningModeAllowed').then((planningModeOnlyOnePlanningModeAllowed) => {\n                alert(planningModeOnlyOnePlanningModeAllowed);\n            });\n\n            return;\n        }*/\n\n        // toggle the planning mode\n        //this.planningMode = !this.planningMode;\n        this.item.planningMode = this.planningMode;\n\n        // also toggle StudentDataService planning mode. This will be used to constrain the entire project when in planning mode.\n        this.StudentDataService.planningMode = this.planningMode;\n\n        // Save planning mode on/off event\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = this.planningMode ? \"planningModeOn\" : \"planningModeOff\";\n        let eventData = {\n            nodeId: this.nodeId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n\n        // notify the child nodes that the planning mode of this group node has changed\n        this.$rootScope.$broadcast('togglePlanningMode', { nodeId: this.nodeId, planningMode: this.planningMode });\n    }\n\n    /**\n     * The planning node's items array has changed\n     * @param newValue the new value of the planning node's items array\n     * @param oldValue the old value of the planning node's items array\n     */\n    planningNodeItemsChanged(nodeChangedId) {\n        let index = this.item.ids.indexOf(nodeChangedId);\n        let nodeIdAddedAfter = this.item.ids[index-1];\n\n        if (nodeIdAddedAfter) {\n            // the node was moved after another node in the group\n            this.movePlanningNode(nodeChangedId, nodeIdAddedAfter);\n        } else {\n            // the node was moved to the beginning of the group\n            this.movePlanningNode(nodeChangedId, this.nodeId);\n        }\n    };\n}\n\nNavItemController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$translate',\n    '$element',\n    'dragulaService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    '$mdDialog'\n];\n\nexport default NavItemController;\n"]}