{"version":3,"sources":["navItemController.es6"],"names":["NavItemController","$filter","$rootScope","$scope","$translate","$element","dragulaService","NodeService","ProjectService","StudentDataService","$mdDialog","autoScroll","require","expanded","item","idToNode","nodeId","isGroup","isGroupNode","nodeStatuses","nodeStatus","nodeTitle","showPosition","idToPosition","title","currentNode","previousNode","isCurrentNode","id","isPlanning","availablePlanningNodes","node","getNodeById","isPlanningInstance","parentGroupId","planningMode","parentGroup","getParentGroup","isParentGroupPlanning","getAvailablePlanningNodes","$watch","value","newNode","oldNode","isPrev","isApplicationNode","previousStep","$parent","isPrevStep","prevNodeisGroup","prevNodeIsDescendant","isNodeDescendentOfGroup","zoomToElement","itemExpanded","$on","event","args","planningModeClickedNodeId","dragId","dropEvent","el","target","source","nodeChangedId","data","nodeid","planningNodeItemsChanged","options","moves","handle","sibling","getAttribute","drake","find","scroll","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","getThemePath","setTimeout","top","offsetTop","location","delay","$","animate","scrollTop","endCurrentNodeAndSetCurrentNodeByNodeId","then","translations","show","alert","itemLocked","textContent","planningModeStepsUnVisitable","ariaLabel","ok","targetEvent","planningNodeAdded","componentId","componentType","category","eventName","eventData","nodeIdAdded","planningNodeTemplateId","eventNodeId","saveVLEEvent","planningNodeId","maxAddAllowed","planningGroupNode","a","length","availablePlanningNode","max","numPlanningNodesAdded","ids","c","childPlanningNodeId","childPlanningNode","getPlannindNodeMaxAllowed","getNumPlannindNodeInstances","nodeIdToInsertInside","templateNodeId","nextAvailablePlanningNodeId","getNextAvailablePlanningNodeId","planningNodeInstance","createPlanningNodeInstance","addPlanningNodeInstanceInside","updateNodeStatuses","planningNodeChanged","savePlanningNodeAddedEvent","targetNodeId","insertInside","choosePlanningItemTemplateUrl","navitemCtrl","parent","angular","element","body","locals","templateUrl","controller","ChoosePlanningItemController","addSelectedPlanningInstance","addPlanningNodeInstanceAfter","hide","close","$inject","nodeIdToInsertAfter","planningNodeInstanceNodeId","confirm","yes","cancel","no","deleteNode","nodeIdRemoved","description","otherNodeId","movePlanningNodeInstanceInside","movePlanningNodeInstanceAfter","nodeIdMoved","nodeIdMovedInsideOrAfter","nodeIdToMove","nodeIdToMoveAfter","savePlanningNodeChanges","$broadcast","nodeState","createNewNodeState","isAutoSave","isSubmit","studentData","nodes","planningNode","push","nodeStates","saveNodeStates","index","indexOf","nodeIdAddedAfter","movePlanningNode"],"mappings":"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","file":"navItemController.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($filter,\n                $rootScope,\n                $scope,\n                $translate,\n                $element,\n                dragulaService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                $mdDialog) {\n\n        this.$filter = $filter;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$translate = $translate;\n        this.dragulaService = dragulaService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.$mdDialog = $mdDialog;\n        this.$translate = this.$filter('translate');\n        this.autoScroll = require('dom-autoscroller');\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.StudentDataService.currentNode;\n        this.previousNode = null;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n\n        // whether this node is a planning node\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n\n        // the array of nodes used for drag/drop planning sorting\n        this.availablePlanningNodes = [];\n\n        // whether the node is a planning node instance\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n        this.isPlanningInstance = this.ProjectService.isPlanningInstance(this.nodeId);\n\n        this.parentGroupId = null;\n\n        /*\n         * whether planning mode is on or off which determines if students\n         * can edit planning related aspects of the project such as adding,\n         * moving, or deleting planning steps.\n         */\n        this.planningMode = false;\n\n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n\n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n            this.isParentGroupPlanning = this.ProjectService.isPlanning(this.parentGroupId);\n        }\n\n        if (this.isPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.nodeId);\n        }\n\n        if (this.isParentGroupPlanning) {\n\n            if (parentGroup.planningMode) {\n                // the parent is currently in planning mode\n                this.planningMode = true;\n            }\n\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.parentGroupId);\n\n            this.$scope.$watch(\n                () => {\n                    // watch the position of this node\n                    return this.ProjectService.idToPosition[this.nodeId];\n                },\n                (value) => {\n                    // the position has changed for this node so we will update it in the UI\n                    this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n                }\n            );\n        }\n\n        this.$scope.$watch(\n            () => { return this.StudentDataService.currentNode; },\n            (newNode, oldNode) => {\n                this.currentNode = newNode;\n                this.previousNode = oldNode;\n                this.isCurrentNode = (this.nodeId === newNode.id);\n                let isPrev = false;\n\n                if (this.ProjectService.isApplicationNode(newNode.id)) {\n                    return;\n                }\n\n                if (oldNode) {\n                    isPrev = (this.nodeId === oldNode.id);\n\n                    if (this.StudentDataService.previousStep) {\n                        this.$scope.$parent.isPrevStep = (this.nodeId === this.StudentDataService.previousStep.id);\n                    }\n                }\n\n                if (this.isGroup) {\n                    let prevNodeisGroup = (!oldNode || this.ProjectService.isGroupNode(oldNode.id));\n                    let prevNodeIsDescendant = this.ProjectService.isNodeDescendentOfGroup(oldNode, this.item);\n                    if (this.isCurrentNode) {\n                        this.expanded = true;\n                        if (prevNodeisGroup || !prevNodeIsDescendant) {\n                            this.zoomToElement();\n                        }\n                    } else {\n                        if (!prevNodeisGroup) {\n                            if (prevNodeIsDescendant) {\n                                this.expanded = true;\n                            } else {\n                                this.expanded = false;\n                            }\n                        }\n                    }\n                } else {\n                    if (isPrev && this.ProjectService.isNodeDescendentOfGroup(this.item, newNode)) {\n                        this.zoomToElement();\n                    }\n                }\n            }\n        );\n\n        this.$scope.$watch(\n            () => { return this.expanded; },\n            (value) => {\n                this.$scope.$parent.itemExpanded = value;\n            }\n        );\n\n        this.$scope.$watch(\n            () => { return this.planningMode; },\n            (value) => {\n                this.$scope.$parent.planningMode = value;\n            }\n        );\n\n        // a group node has turned on or off planning mode\n        this.$rootScope.$on('togglePlanningMode', (event, args) => {\n\n            // get the group node that has had its planning node changed\n            let planningModeClickedNodeId = args.nodeId;\n            let planningMode = args.planningMode;\n\n            // get this node's parent group\n            let parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n            let parentGroupId = null;\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n\n            if (parentGroupId == planningModeClickedNodeId) {\n                // the parent of this node has changed their planning mode\n                this.planningMode = planningMode;\n            }\n        });\n\n        let dragId = 'planning_' + this.nodeId ;\n        // handle item drop events\n        let dropEvent = dragId + '.drop-model';\n        this.$scope.$on(dropEvent, (el, target, source) => {\n            let nodeChangedId = target.data().nodeid;\n            this.planningNodeItemsChanged(nodeChangedId);\n        });\n\n        this.dragulaService.options(this.$scope, dragId, {\n            moves: (el, source, handle, sibling) => {\n                if (!this.planningMode) {\n                    return false;\n                }\n\n                let nodeId = el.getAttribute('data-nodeid');\n                return this.ProjectService.isPlanningInstance(nodeId);\n            }\n        });\n\n        let drake = dragulaService.find(this.$scope, dragId).drake;\n\n        // support scroll while dragging\n        let scroll = this.autoScroll(\n            [document.querySelector('#content')], {\n            margin: 30,\n            pixels: 50,\n            scrollWhenOutside: true,\n            autoScroll: function() {\n                // Only scroll when the pointer is down, and there is a child being dragged\n                return this.down && drake.dragging;\n            }\n        });\n    }\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/navItem/navItem.html';\n    };\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let top = this.$element[0].offsetTop;\n            let location = this.isGroup ? top - 32 : top - 80;\n            let delay = 350;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear');\n        }, 500);\n    };\n\n    itemClicked(event) {\n        if (this.isGroup) {\n            this.expanded = !this.expanded;\n            if (this.expanded) {\n                if (this.isCurrentNode) {\n                    this.zoomToElement();\n                } else {\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            }\n        } else {\n            if (this.StudentDataService.planningMode) {\n                // Don't allow students to enter planning steps while in planning mode\n                this.$translate(['itemLocked', 'planningModeStepsUnVisitable', 'ok']).then((translations) => {\n                    this.$mdDialog.show(\n                        this.$mdDialog.alert()\n                            .title(translations.itemLocked)\n                            .textContent(translations.planningModeStepsUnVisitable)\n                            .ariaLabel(translations.itemLocked)\n                            .ok(translations.ok)\n                            .targetEvent(event)\n                    );\n                });\n            } else {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n            }\n        }\n    };\n\n    /**\n     * Save an event when planning node is added\n     * @param planningNodeAdded\n     */\n    savePlanningNodeAddedEvent(planningNodeAdded) {\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = \"planningNodeAdded\";\n        let eventData = {\n            nodeIdAdded: planningNodeAdded.id,\n            planningNodeTemplateId: planningNodeAdded.planningNodeTemplateId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n    };\n\n    /**\n     * Returns the max times a planning node can be added to the project (-1 is\n     * is returned if there is no limit)\n     * @param planningNodeId\n     */\n    getPlannindNodeMaxAllowed(planningNodeId) {\n        let maxAddAllowed = -1;  // by default, students can add as many instances as they want\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n        // get the maxAddAllowed value by looking up the planningNode in the project.\n        if (planningGroupNode && planningGroupNode.availablePlanningNodes) {\n            for (let a = 0; a < planningGroupNode.availablePlanningNodes.length; a++) {\n                let availablePlanningNode = planningGroupNode.availablePlanningNodes[a];\n                if (availablePlanningNode.nodeId === planningNodeId && availablePlanningNode.max != null) {\n                    maxAddAllowed = availablePlanningNode.max;\n                }\n            }\n        }\n\n        return maxAddAllowed;\n    };\n\n    /**\n     * Returns the number of times a planning node has been added to the project\n     * @param planningNodeId\n     */\n    getNumPlannindNodeInstances(planningNodeId) {\n        let numPlanningNodesAdded = 0;  // keep track of number of instances\n        // otherwise, see how many times the planning node template has been used.\n\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n\n        // loop through the child ids in the planning group and see how many times they've been used\n        if (planningGroupNode && planningGroupNode.ids) {\n            for (let c = 0; c < planningGroupNode.ids.length; c++) {\n                let childPlanningNodeId = planningGroupNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                if (childPlanningNode != null && childPlanningNode.planningNodeTemplateId === planningNodeId) {\n                    numPlanningNodesAdded++;\n                }\n            }\n        }\n\n        return numPlanningNodesAdded;\n    };\n\n    /**\n     * Returns true iff this student can add the specified planning node.\n     * Limits include reaching the max allowed count\n     * @param planningNodeId\n     */\n    canAddPlanningNode(planningNodeId) {\n        let maxAddAllowed = this.getPlannindNodeMaxAllowed(planningNodeId);\n\n        // if maxAddAllowed was not found or is set to 0, it means students can add as many as they want\n        if (maxAddAllowed < 1) {\n            return true;\n        }\n\n        let numPlanningNodesAdded = this.getNumPlannindNodeInstances(planningNodeId);\n\n        return numPlanningNodesAdded < maxAddAllowed;\n    };\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param templateNodeId the node id of the planning node template\n     * @returns the planning node instance\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, templateNodeId) {\n        // create the planning node instance\n        let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n        let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(nodeIdToInsertInside, templateNodeId, nextAvailablePlanningNodeId);\n\n        // add the planning node instance inside\n        this.ProjectService.addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance);\n\n        /*\n         * update the node statuses so that a node status is created for\n         * the new planning node instance\n         */\n        this.StudentDataService.updateNodeStatuses();\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n\n        // Save add planning node event\n        this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Open the planning mode select dialog to choose a planning node template\n     * to create a new planning instance\n     * @param event the trigger event\n     * @param targetNodeId the node to insert the new planning instance after or inside\n     * @param insertInside boolean whether to insert the new planning instance\n     * inside the target node (optional; default is after)\n     */\n    addPlanningInstance(event, targetNodeId, insertInside) {\n        // show dialog with list of planning nodes user can add to current group\n\n        let choosePlanningItemTemplateUrl = this.ProjectService.getThemePath() + '/themeComponents/navItem/choosePlanningItem.html';\n        let navitemCtrl = this;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            locals: {\n                targetNodeId: targetNodeId,\n                insertInside: insertInside,\n                navitemCtrl: navitemCtrl,\n            },\n            templateUrl: choosePlanningItemTemplateUrl,\n            targetEvent: event,\n            controller: ChoosePlanningItemController\n        });\n\n        function ChoosePlanningItemController($scope, $mdDialog, targetNodeId, insertInside, navitemCtrl) {\n            $scope.navitemCtrl = navitemCtrl;\n            $scope.targetNodeId = targetNodeId;\n            $scope.insertInside = insertInside;\n\n            $scope.addSelectedPlanningInstance = (templateNodeId) => {\n                if ($scope.insertInside) {\n                    $scope.navitemCtrl.addPlanningNodeInstanceInside($scope.targetNodeId, templateNodeId);\n                } else {\n                    $scope.navitemCtrl.addPlanningNodeInstanceAfter($scope.targetNodeId, templateNodeId);\n                }\n\n                $mdDialog.hide();\n            };\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        ChoosePlanningItemController.$inject = [\"$scope\", \"$mdDialog\", \"targetNodeId\", \"insertInside\", \"navitemCtrl\"];\n    };\n\n    /**\n     * Create a planning node instance and add it to the project after the specified nodeId\n     * @param groupId the group the new planning node instance will be added to\n     * @param nodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, templateNodeId) {\n\n        var parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // create the planning node instance\n            let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n            let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(parentGroupId, templateNodeId, nextAvailablePlanningNodeId);\n\n            // insert planning node instance after\n            this.ProjectService.addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance);\n\n            /*\n             * update the node statuses so that a node status is created for\n             * the new planning node instance\n             */\n            this.StudentDataService.updateNodeStatuses();\n\n            // perform any necessary updating\n            this.planningNodeChanged();\n\n            // Save add planning node event\n            this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n            return planningNodeInstance;\n        }\n    }\n\n    /**\n     * Remove the planning node instance\n     * @param planningNodeInstanceNodeId the planning node instance to remove\n     * @param event the event that triggered the function call\n     */\n    removePlanningNodeInstance(planningNodeInstanceNodeId, event) {\n        this.$translate([\"yes\", \"no\"]).then((translations) => {\n            let confirm = this.$mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title(this.$translate('areYouSureYouWantToDeleteThisItem'))\n                .textContent(this.$translate('noteAnyWorkYouHaveDoneOnThisItemWillBeLost'))\n                .ariaLabel(this.$translate('deleteItemFromProject'))\n                .targetEvent(event)\n                .ok(translations.yes)\n                .cancel(translations.no);\n\n            this.$mdDialog.show(confirm).then(() => {\n                // delete the node from the project\n                this.ProjectService.deleteNode(planningNodeInstanceNodeId);\n\n                // perform any necessary updating\n                this.planningNodeChanged(this.parentGroupId);\n\n                // Save remove planning node event\n                let componentId = null;\n                let componentType = null;\n                let category = \"Planning\";\n                let eventName = \"planningNodeRemoved\";\n                let eventData = {\n                    nodeIdRemoved: planningNodeInstanceNodeId\n                };\n                let eventNodeId = this.nodeId;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }, () => {});\n        });\n    }\n\n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        return title;\n    }\n\n    /**\n     * Get the node description\n     * @param nodeId get the description for this node\n     * @returns the description for the node\n     */\n    getNodeDescription(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var description = null;\n\n        if (node != null) {\n            description = node.description;\n        }\n\n        return description;\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode0(otherNodeId) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (this.nodeId != otherNodeId) {\n            if (this.ProjectService.isGroupNode(otherNodeId)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(this.nodeId, otherNodeId);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(this.nodeId, otherNodeId);\n            }\n\n            // Save move planning node event\n            let componentId = null;\n            let componentType = null;\n            let category = \"Planning\";\n            let eventName = \"planningNodeMoved\";\n            let eventData = {\n                nodeIdMoved: this.nodeId,\n                nodeIdMovedInsideOrAfter: otherNodeId\n            };\n            let eventNodeId = this.nodeId;\n            this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode(nodeIdToMove, nodeIdToMoveAfter) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (nodeIdToMove != nodeIdToMoveAfter) {\n            if (this.ProjectService.isGroupNode(nodeIdToMoveAfter)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToMoveAfter);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToMoveAfter);\n            }\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Something related to planning has changed in the project. This\n     * means a planning node was added, moved, or deleted.\n     * @param param planningNodeId planning node id\n     */\n    planningNodeChanged(planningNodeId) {\n        this.savePlanningNodeChanges(planningNodeId);\n\n        this.$rootScope.$broadcast('planningNodeChanged');\n    }\n\n    /**\n    * Save the changed nodes in NodeState\n    * @param param planningNodeId planning node id\n    **/\n    savePlanningNodeChanges(planningNodeId) {\n        let nodeState = this.NodeService.createNewNodeState();\n        let nodeId = planningNodeId ? planningNodeId : this.nodeId;\n        nodeState.nodeId = nodeId;\n        nodeState.isAutoSave = false;\n        nodeState.isSubmit = false;\n\n        var studentData = {};\n        studentData.nodeId = nodeId;\n        studentData.nodes = [];\n        let planningNode = this.ProjectService.getNodeById(nodeId);\n        studentData.nodes.push(planningNode);  // add the planning node (group)\n        // loop through the child ids in the planning group and save them also\n        if (planningNode.ids != null) {\n            for (let c = 0; c < planningNode.ids.length; c++) {\n                let childPlanningNodeId = planningNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                studentData.nodes.push(childPlanningNode);\n            }\n        }\n\n        nodeState.studentData = studentData;\n        var nodeStates = [];\n        nodeStates.push(nodeState);\n        this.StudentDataService.saveNodeStates(nodeStates);\n    }\n\n    /**\n     * Toggle the planning mode on and off. Notify child nodes that\n     * the planning mode has changed so they can act accordingly.\n     */\n    togglePlanningMode() {\n        /*if (this.StudentDataService.planningMode && !this.item.planningMode) {\n            // Don't allow multiple concurrent planning modes.\n            this.$translate('planningModeOnlyOnePlanningModeAllowed').then((planningModeOnlyOnePlanningModeAllowed) => {\n                alert(planningModeOnlyOnePlanningModeAllowed);\n            });\n\n            return;\n        }*/\n\n        // toggle the planning mode\n        //this.planningMode = !this.planningMode;\n        this.item.planningMode = this.planningMode;\n\n        // also toggle StudentDataService planning mode. This will be used to constrain the entire project when in planning mode.\n        this.StudentDataService.planningMode = this.planningMode;\n\n        // Save planning mode on/off event\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = this.planningMode ? \"planningModeOn\" : \"planningModeOff\";\n        let eventData = {\n            nodeId: this.nodeId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n\n        // notify the child nodes that the planning mode of this group node has changed\n        this.$rootScope.$broadcast('togglePlanningMode', { nodeId: this.nodeId, planningMode: this.planningMode });\n    }\n\n    /**\n     * The planning node's items array has changed\n     * @param newValue the new value of the planning node's items array\n     * @param oldValue the old value of the planning node's items array\n     */\n    planningNodeItemsChanged(nodeChangedId) {\n        let index = this.item.ids.indexOf(nodeChangedId);\n        let nodeIdAddedAfter = this.item.ids[index-1];\n\n        if (nodeIdAddedAfter) {\n            // the node was moved after another node in the group\n            this.movePlanningNode(nodeChangedId, nodeIdAddedAfter);\n        } else {\n            // the node was moved to the beginning of the group\n            this.movePlanningNode(nodeChangedId, this.nodeId);\n        }\n    };\n}\n\nNavItemController.$inject = [\n    '$filter',\n    '$rootScope',\n    '$scope',\n    '$translate',\n    '$element',\n    'dragulaService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    '$mdDialog'\n];\n\nexport default NavItemController;\n"]}