{"version":3,"sources":["stepToolsController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,a;AACF,2BAAY,MAAZ,EACY,WADZ,EAEY,cAFZ,EAGY,kBAHZ,EAIY,UAJZ,EAIwB;AAAA;;AAAA;;AAEpB,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,kBAAL,GAA0B,kBAA1B;AACA;;AAEA,aAAK,YAAL,GAAoB,KAAK,kBAAL,CAAwB,YAA5C;;AAEA;AACA,aAAK,SAAL,GAAiB,KAAK,cAAL,CAAoB,SAArC;;AAEA,aAAK,WAAL;;AAEA,aAAK,MAAL,CAAY,MAAZ,CACI,YAAM;AAAE,mBAAO,MAAK,QAAZ;AAAuB,SADnC,EAEI,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACd,gBAAI,UAAU,KAAd,EAAqB;AACjB;AACA,sBAAK,kBAAL,CAAwB,uCAAxB,CAAgE,KAAhE;AACH;AACJ,SAPL;;AAUA,aAAK,MAAL,CAAY,GAAZ,CAAgB,oBAAhB,EAAsC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACnD,kBAAK,WAAL;AACH,SAFD;;AAIA,aAAK,MAAL,CAAY,GAAZ,CAAgB,qBAAhB,EAAuC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACpD,kBAAK,WAAL;AACH,SAFD;AAGH;;;;wCAEe;AACZ,iBAAK,UAAL,CAAgB,SAAhB,EACG,MADH;AAEH;;;sCAEa;AAAA;;AACV,gBAAI,SAAS,KAAK,kBAAL,CAAwB,gBAAxB,EAAb;AACA,gBAAI,CAAC,KAAK,cAAL,CAAoB,WAApB,CAAgC,MAAhC,CAAL,EAA8C;AAC1C,qBAAK,MAAL,GAAc,MAAd;AACA,qBAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,KAAK,MAAvB,CAAlB;;AAEA,qBAAK,MAAL,GAAc,KAAK,WAAL,CAAiB,aAAjB,EAAd;AACA,qBAAK,MAAL,GAAc,IAAd;AACA,qBAAK,WAAL,CAAiB,aAAjB,GAAiC,IAAjC,CAAsC,UAAC,MAAD,EAAY;AAC9C,2BAAK,MAAL,GAAc,MAAd;AACH,iBAFD;;AAIA;AACA,qBAAK,QAAL,GAAgB,KAAK,MAArB;AACH;AACJ;;;0CAEiB;AACd,mBAAO,CAAC,KAAK,YAAL,GAAoB,KAAK,mBAAL,CAAyB,KAAK,MAA9B,IAAwC,IAA5D,GAAmE,EAApE,IAA0E,KAAK,oBAAL,CAA0B,KAAK,MAA/B,CAAjF;AACH;;;yCAEe;AACZ,mBAAO,KAAK,cAAL,CAAoB,YAApB,KAAqC,2CAA5C;AACH;;;6CAEoB,M,EAAQ;AACzB,mBAAO,KAAK,cAAL,CAAoB,oBAApB,CAAyC,MAAzC,CAAP;AACH;;;4CAEmB,M,EAAQ;AACxB,mBAAO,KAAK,cAAL,CAAoB,mBAApB,CAAwC,MAAxC,CAAP;AACH;;;oCAEW,M,EAAQ;AAChB,mBAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,MAAhC,CAAP;AACH;;;uCAEc;AACX,iBAAK,WAAL,CAAiB,YAAjB;AACH;;;uCAEc;AACX,iBAAK,WAAL,CAAiB,YAAjB;AACH;;;oCAEW;AACR,iBAAK,WAAL,CAAiB,SAAjB;AACH;;;;;;AAGL,cAAc,OAAd,GAAwB,CACpB,QADoB,EAEpB,aAFoB,EAGpB,gBAHoB,EAIpB,oBAJoB,EAKpB,YALoB,CAAxB;;kBAQe,a","file":"stepToolsController.js","sourcesContent":["\"use strict\";\n\nclass StepToolsCtrl {\n    constructor($scope,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                $mdSidenav) {\n\n        this.$scope = $scope;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        //this.$mdSidenav = $mdSidenav;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n\n        // service objects and utility functions\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.updateModel();\n\n        this.$scope.$watch(\n            () => { return this.toNodeId; },\n            (newId, oldId) => {\n                if (newId !== oldId) {\n                    // selected node id has changed, so open new node\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(newId);\n                }\n            }\n        );\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            this.updateModel();\n        });\n\n        this.$scope.$on('nodeStatusesChanged', (event, arge) => {\n            this.updateModel();\n        })\n    }\n\n    toggleStepNav() {\n        this.$mdSidenav('stepNav')\n          .toggle();\n    }\n\n    updateModel() {\n        var nodeId = this.StudentDataService.getCurrentNodeId();\n        if (!this.ProjectService.isGroupNode(nodeId)) {\n            this.nodeId = nodeId;\n            this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n            this.prevId = this.NodeService.getPrevNodeId();\n            this.nextId = null;\n            this.NodeService.getNextNodeId().then((nodeId) => {\n                this.nextId = nodeId;\n            });\n\n            // model variable for selected node id\n            this.toNodeId = this.nodeId;\n        }\n    };\n\n    getSelectedText() {\n        return (this.showPosition ? this.getNodePositionById(this.nodeId) + ': ' : '') + this.getNodeTitleByNodeId(this.nodeId);\n    };\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/stepTools/stepTools.html';\n    };\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    goToPrevNode() {\n        this.NodeService.goToPrevNode();\n    };\n\n    goToNextNode() {\n        this.NodeService.goToNextNode();\n    };\n\n    closeNode() {\n        this.NodeService.closeNode();\n    };\n}\n\nStepToolsCtrl.$inject = [\n    '$scope',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    '$mdSidenav'\n];\n\nexport default StepToolsCtrl;\n"]}