{"version":3,"sources":["themeController.es6"],"names":["ThemeController","$scope","$state","$filter","ConfigService","ProjectService","StudentDataService","StudentStatusService","NotebookService","SessionService","$mdDialog","$mdMedia","$mdToast","$mdComponentRegistry","$translate","layoutView","numberProject","themePath","getThemePath","themeSettings","getThemeSettings","hideTotalScores","nodeStatuses","idToOrder","rootNode","rootNodeStatus","id","workgroupId","getWorkgroupId","workgroupUserNames","getUserNamesByWorkgroupId","notebookOpen","notebookConfig","getNotebookConfig","notebookFilter","currentNode","getCurrentNode","planningMode","enabled","type","itemTypes","prop","hasOwnProperty","connectionLostDisplay","build","template","hideDelay","connectionLostShown","setLayoutState","$on","event","args","message","nodeId","node","getNodeById","constraints","getConstraintsForNode","length","c","constraint","evaluateConstraint","getConstraintMessage","show","alert","parent","angular","element","document","body","title","htmlContent","ariaLabel","ok","targetEvent","ev","confirm","textContent","cancel","then","renewSession","undefined","forceLogOut","handleServerDisconnect","handleServerReconnect","revisions","componentController","allowRevert","$event","revisionsTemplateUrl","templateUrl","locals","items","reverse","controller","RevisionsController","close","hide","revertWork","componentState","setStudentWork","studentDataChanged","$inject","studentAssetDialogTemplateUrl","studentAssetTemplateUrl","StudentAssetDialogController","closeDialog","open","toggleNotebook","toggleNotebookNav","filter","notification","notificationDismissDialogTemplateUrl","dismissCodePrompt","DismissCodeDialogController","NotificationService","input","dismissCode","hasDismissCode","data","nodePositionAndTitle","getNodePositionAndTitleByNodeId","checkDismissCode","dismissNotification","componentId","componentType","category","eventData","saveVLEEvent","errorMessage","visitNode","goToNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","when","$watch","it","isOpen","isOpenNewValue","isOpenOldValue","saveNotebookToggleEvent","state","layoutState","isApplicationNode","isGroupNode","go","notebookNavOpen","getAvatarColorForWorkgroupId","mouseMoved"],"mappings":"AAAA;;AAEA;;;;;;;;;;IAEMA,e;AACF,6BAAYC,MAAZ,EACYC,MADZ,EAEYC,OAFZ,EAGYC,aAHZ,EAIYC,cAJZ,EAKYC,kBALZ,EAMYC,oBANZ,EAOYC,eAPZ,EAQYC,cARZ,EASYC,SATZ,EAUYC,QAVZ,EAWYC,QAXZ,EAYYC,oBAZZ,EAYkC;AAAA;;AAAA;;AAE9B,aAAKZ,MAAL,GAAcA,MAAd;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKE,eAAL,GAAuBA,eAAvB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKF,oBAAL,GAA4BA,oBAA5B;AACA,aAAKG,SAAL,GAAiBA,SAAjB;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,oBAAL,GAA4BA,oBAA5B;;AAEA,aAAKC,UAAL,GAAkB,KAAKX,OAAL,CAAa,WAAb,CAAlB;;AAEA;AACA,aAAKY,UAAL,GAAkB,MAAlB,CAnB8B,CAmBJ;AAC1B,aAAKC,aAAL,GAAqB,IAArB;;AAEA,aAAKC,SAAL,GAAiB,KAAKZ,cAAL,CAAoBa,YAApB,EAAjB;AACA,aAAKC,aAAL,GAAqB,KAAKd,cAAL,CAAoBe,gBAApB,EAArB;AACA,aAAKC,eAAL,GAAuB,KAAKF,aAAL,CAAmBE,eAA1C;;AAEA,aAAKC,YAAL,GAAoB,KAAKhB,kBAAL,CAAwBgB,YAA5C;AACA,aAAKC,SAAL,GAAiB,KAAKlB,cAAL,CAAoBkB,SAArC;;AAEA,aAAKC,QAAL,GAAgB,KAAKnB,cAAL,CAAoBmB,QAApC;AACA,aAAKC,cAAL,GAAsB,KAAKH,YAAL,CAAkB,KAAKE,QAAL,CAAcE,EAAhC,CAAtB;;AAEA,aAAKC,WAAL,GAAmB,KAAKvB,aAAL,CAAmBwB,cAAnB,EAAnB;AACA,aAAKC,kBAAL,GAA0B,KAAKzB,aAAL,CAAmB0B,yBAAnB,CAA6C,KAAKH,WAAlD,CAA1B;;AAEA,aAAKI,YAAL,GAAoB,KAApB;AACA,aAAKC,cAAL,GAAsB,KAAKxB,eAAL,CAAqByB,iBAArB,EAAtB;AACA,aAAKC,cAAL,GAAsB,EAAtB;;AAEA,aAAKC,WAAL,GAAmB,KAAK7B,kBAAL,CAAwB8B,cAAxB,EAAnB;;AAEA,aAAKC,YAAL,GAAoB,KAApB;;AAEA;AACA,YAAI,KAAKL,cAAL,CAAoBM,OAAxB,EAAiC;AAC7B,iBAAK,IAAIC,IAAT,IAAiB,KAAKP,cAAL,CAAoBQ,SAArC,EAAgD;AAC5C,oBAAIC,OAAO,KAAKT,cAAL,CAAoBQ,SAApB,CAA8BD,IAA9B,CAAX;AACA,oBAAI,KAAKP,cAAL,CAAoBQ,SAApB,CAA8BE,cAA9B,CAA6CH,IAA7C,KAAsDE,KAAKH,OAA/D,EAAwE;AACpE,yBAAKJ,cAAL,GAAsBK,IAAtB;AACA;AACH;AACJ;AACJ;;AAED;AACA,aAAKI,qBAAL,GAA6B/B,SAASgC,KAAT,CAAe;AACxCC,sBAAU;;kCAD8B;AAIxCC,uBAAW;AAJ6B,SAAf,CAA7B;AAMA,aAAKC,mBAAL,GAA2B,KAA3B;;AAEA,aAAKC,cAAL;;AAEA;AACA,aAAK/C,MAAL,CAAYgD,GAAZ,CAAgB,oBAAhB,EAAsC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACnD,kBAAKhB,WAAL,GAAmB,MAAK7B,kBAAL,CAAwB8B,cAAxB,EAAnB;AACA,kBAAKY,cAAL;AACH,SAHD;;AAKA;AACA,aAAK/C,MAAL,CAAYgD,GAAZ,CAAgB,iBAAhB,EAAmC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChD,gBAAIC,UAAU,MAAKtC,UAAL,CAAgB,+BAAhB,CAAd;AACA,gBAAIuC,SAASF,KAAKE,MAAlB;;AAEA,gBAAIC,OAAO,MAAKjD,cAAL,CAAoBkD,WAApB,CAAgCF,MAAhC,CAAX;;AAEA,gBAAIC,QAAQ,IAAZ,EAAkB;;AAEd;AACA,oBAAIE,cAAc,MAAKnD,cAAL,CAAoBoD,qBAApB,CAA0CH,IAA1C,CAAlB;;AAEA,oBAAIE,eAAe,IAAf,IAAuBA,YAAYE,MAAZ,GAAqB,CAAhD,EAAmD;AAC/CN,8BAAU,EAAV;AACH;;AAED;AACA,qBAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIH,YAAYE,MAAhC,EAAwCC,GAAxC,EAA6C;AACzC,wBAAIC,aAAaJ,YAAYG,CAAZ,CAAjB;;AAEA;AACA,wBAAIC,cAAc,IAAd,IAAsB,CAAC,MAAKtD,kBAAL,CAAwBuD,kBAAxB,CAA2CP,IAA3C,EAAiDM,UAAjD,CAA3B,EAAyF;AACrF;;AAEA,4BAAIR,WAAW,EAAf,EAAmB;AACf;AACAA,uCAAW,YAAX;AACH;;AAED;AACAA,mCAAW,MAAK/C,cAAL,CAAoByD,oBAApB,CAAyCT,MAAzC,EAAiDO,UAAjD,CAAX;AACH;AACJ;AACJ;;AAED,kBAAKlD,SAAL,CAAeqD,IAAf,CACI,MAAKrD,SAAL,CAAesD,KAAf,GACKC,MADL,CACYC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADZ,EAEKC,KAFL,CAEW,MAAKxD,UAAL,CAAgB,YAAhB,CAFX,EAGKyD,WAHL,CAGiBnB,OAHjB,EAIKoB,SAJL,CAIe,MAAK1D,UAAL,CAAgB,YAAhB,CAJf,EAKK2D,EALL,CAKQ,MAAK3D,UAAL,CAAgB,IAAhB,CALR,EAMK4D,WANL,CAMiBxB,KANjB,CADJ;AASH,SA3CD;;AA6CA;AACA,aAAKjD,MAAL,CAAYgD,GAAZ,CAAgB,oBAAhB,EAAsC,UAAC0B,EAAD,EAAQ;AAC1C,gBAAIX,QAAQ,MAAKtD,SAAL,CAAekE,OAAf,GACPX,MADO,CACAC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADA,EAEPC,KAFO,CAED,MAAKxD,UAAL,CAAgB,gBAAhB,CAFC,EAGP+D,WAHO,CAGK,MAAK/D,UAAL,CAAgB,mBAAhB,CAHL,EAIP0D,SAJO,CAIG,MAAK1D,UAAL,CAAgB,gBAAhB,CAJH,EAKP4D,WALO,CAKKC,EALL,EAMPF,EANO,CAMJ,MAAK3D,UAAL,CAAgB,KAAhB,CANI,EAOPgE,MAPO,CAOA,MAAKhE,UAAL,CAAgB,IAAhB,CAPA,CAAZ;;AASA,kBAAKJ,SAAL,CAAeqD,IAAf,CAAoBC,KAApB,EAA2Be,IAA3B,CAAgC,YAAM;AAClC,sBAAKtE,cAAL,CAAoBuE,YAApB;AACAhB,wBAAQiB,SAAR;AACH,aAHD,EAGG,YAAM;AACL,sBAAKxE,cAAL,CAAoByE,WAApB;AACH,aALD;AAMH,SAhBD;;AAkBA;AACA,aAAKjF,MAAL,CAAYgD,GAAZ,CAAgB,mBAAhB,EAAqC,UAAC0B,EAAD,EAAQ;AACzC,gBAAIX,QAAQ,MAAKtD,SAAL,CAAekE,OAAf,GACPX,MADO,CACAC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADA,EAEPC,KAFO,CAED,MAAKxD,UAAL,CAAgB,cAAhB,CAFC,EAGP+D,WAHO,CAGK,MAAK/D,UAAL,CAAgB,kCAAhB,CAHL,EAIP0D,SAJO,CAIG,MAAK1D,UAAL,CAAgB,cAAhB,CAJH,EAKP4D,WALO,CAKKC,EALL,EAMPF,EANO,CAMJ,MAAK3D,UAAL,CAAgB,IAAhB,CANI,CAAZ;;AAQA,kBAAKJ,SAAL,CAAeqD,IAAf,CAAoBC,KAApB,EAA2Be,IAA3B,CAAgC,YAAM;AAClC;AACH,aAFD,EAEG,YAAM;AACL;AACH,aAJD;AAKH,SAdD;;AAgBA;AACA,aAAK9E,MAAL,CAAYgD,GAAZ,CAAgB,oBAAhB,EAAsC,YAAM;AACxC,kBAAKkC,sBAAL;AACH,SAFD;;AAIA;AACA,aAAKlF,MAAL,CAAYgD,GAAZ,CAAgB,iBAAhB,EAAmC,YAAM;AACrC,kBAAKmC,qBAAL;AACH,SAFD;;AAIA;AACA,aAAKnF,MAAL,CAAYgD,GAAZ,CAAgB,eAAhB,EAAiC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC9C,gBAAIkC,YAAYlC,KAAKkC,SAArB;AACA,gBAAIC,sBAAsBnC,KAAKmC,mBAA/B;AACA,gBAAIC,cAAcpC,KAAKoC,WAAvB;AACA,gBAAIC,SAASrC,KAAKqC,MAAlB;AACA,gBAAIC,uBAAuB,MAAKxE,SAAL,GAAiB,oCAA5C;;AAEA,kBAAKP,SAAL,CAAeqD,IAAf,CAAoB;AAChBE,wBAAQC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADQ;AAEhBK,6BAAac,MAFG;AAGhBE,6BAAaD,oBAHG;AAIhBE,wBAAQ;AACJC,2BAAOP,UAAUQ,OAAV,EADH;AAEJP,yCAAqBA,mBAFjB;AAGJC,iCAAaA;AAHT,iBAJQ;AAShBO,4BAAYC;AATI,aAApB;AAWA,qBAASA,mBAAT,CAA6B9F,MAA7B,EAAqCS,SAArC,EAAgDkF,KAAhD,EAAuDN,mBAAvD,EAA4EC,WAA5E,EAAyF;AACrFtF,uBAAO2F,KAAP,GAAeA,KAAf;AACA3F,uBAAOqF,mBAAP,GAA6BA,mBAA7B;AACArF,uBAAOsF,WAAP,GAAqBA,WAArB;AACAtF,uBAAO+F,KAAP,GAAe,YAAM;AACjBtF,8BAAUuF,IAAV;AACH,iBAFD;AAGAhG,uBAAOiG,UAAP,GAAoB,UAACC,cAAD,EAAoB;AACpClG,2BAAOqF,mBAAP,CAA2Bc,cAA3B,CAA0CD,cAA1C;AACAlG,2BAAOqF,mBAAP,CAA2Be,kBAA3B;AACA3F,8BAAUuF,IAAV;AACH,iBAJD;AAKH;AACDF,gCAAoBO,OAApB,GAA8B,CAAC,QAAD,EAAW,WAAX,EAAwB,OAAxB,EAAiC,qBAAjC,EAAwD,aAAxD,CAA9B;AACH,SAhCD;;AAkCA,aAAKrG,MAAL,CAAYgD,GAAZ,CAAgB,mBAAhB,EAAqC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAClD,gBAAImC,sBAAsBnC,KAAKmC,mBAA/B;AACA,gBAAIE,SAASrC,KAAKqC,MAAlB;AACA,gBAAIe,gCAAgC,MAAKtF,SAAL,GAAiB,oCAArD;AACA,gBAAIuF,0BAA0B,MAAKvF,SAAL,GAAiB,iCAA/C;;AAEA,kBAAKP,SAAL,CAAeqD,IAAf,CAAoB;AAChBE,wBAAQC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADQ;AAEhBK,6BAAac,MAFG;AAGhBE,6BAAaa,6BAHG;AAIhBZ,wBAAQ;AACJa,6CAAyBA,uBADrB;AAEJlB,yCAAqBA;AAFjB,iBAJQ;AAQhBQ,4BAAYW;AARI,aAApB;AAUA,qBAASA,4BAAT,CAAsCxG,MAAtC,EAA8CS,SAA9C,EAAyD4E,mBAAzD,EAA8E;AAC1ErF,uBAAOuG,uBAAP,GAAiCA,uBAAjC;AACAvG,uBAAOqF,mBAAP,GAA6BA,mBAA7B;AACArF,uBAAOyG,WAAP,GAAqB,YAAY;AAC7BhG,8BAAUuF,IAAV;AACH,iBAFD;AAGH;AACDQ,yCAA6BH,OAA7B,GAAuC,CAAC,QAAD,EAAW,WAAX,EAAwB,qBAAxB,CAAvC;AACH,SAxBD;;AA0BA;AACA,aAAKrG,MAAL,CAAYgD,GAAZ,CAAgB,gBAAhB,EAAkC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC/C,gBAAIwB,KAAKxB,KAAKwB,EAAd;AACA,gBAAIgC,OAAOxD,KAAKwD,IAAhB;AACA,kBAAKC,cAAL,CAAoBjC,EAApB,EAAwBgC,IAAxB;AACH,SAJD;;AAMA;AACA,aAAK1G,MAAL,CAAYgD,GAAZ,CAAgB,mBAAhB,EAAqC,YAAM;AACvC,kBAAK4D,iBAAL;AACH,SAFD;;AAIA;AACA,aAAK5G,MAAL,CAAYgD,GAAZ,CAAgB,mBAAhB,EAAqC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAClD,kBAAKjB,cAAL,GAAsBiB,KAAK2D,MAA3B;AACH,SAFD;;AAIA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;AACA;;;;;;;AAOA;AACA;;;;;;;AAOA;AACA,aAAK7G,MAAL,CAAYgD,GAAZ,CAAgB,oBAAhB,EAAsC,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACnD,kBAAKd,YAAL,GAAoBc,KAAKd,YAAzB;AACH,SAFD;;AAIA;AACA,aAAKpC,MAAL,CAAYgD,GAAZ,CAAgB,gCAAhB,EAAkD,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAC/D,gBAAI4D,eAAe5D,KAAK4D,YAAxB;AACA,gBAAIpC,KAAKxB,KAAKD,KAAd;AACA,gBAAI8D,uCAAuC,MAAK/F,SAAL,GAAiB,2CAA5D;;AAEA,gBAAIgG,oBAAoB;AACpBhD,wBAAQC,QAAQC,OAAR,CAAgBC,SAASC,IAAzB,CADY;AAEpBK,6BAAaC,EAFO;AAGpBe,6BAAasB,oCAHO;AAIpBrB,wBAAQ;AACJoB,kCAAcA;AADV,iBAJY;AAOpBjB,4BAAYoB;AAPQ,aAAxB;AASAA,wCAA4BZ,OAA5B,GAAsC,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,EAAmC,qBAAnC,EAA0D,gBAA1D,EAA4E,oBAA5E,EAAkG,cAAlG,CAAtC;;AAEA,qBAASY,2BAAT,CAAqCjH,MAArC,EAA6CS,SAA7C,EAAwDP,OAAxD,EAAiEgH,mBAAjE,EAAsF9G,cAAtF,EAAsGC,kBAAtG,EAA0HyG,YAA1H,EAAwI;;AAEpI9G,uBAAOa,UAAP,GAAoBX,QAAQ,WAAR,CAApB;;AAEAF,uBAAOmH,KAAP,GAAe;AACXC,iCAAa;AADF,iBAAf;AAGApH,uBAAOmD,OAAP,GAAiB,EAAjB;AACAnD,uBAAO8G,YAAP,GAAsBA,YAAtB;AACA9G,uBAAOqH,cAAP,GAAwB,KAAxB;AACA,oBAAIP,aAAaQ,IAAjB,EAAuB;AACnB,wBAAIR,aAAaQ,IAAb,CAAkBF,WAAtB,EAAmC;AAC/BpH,+BAAOqH,cAAP,GAAwB,IAAxB;AACH;AACJ;AACDrH,uBAAOuH,oBAAP,GAA8BnH,eAAeoH,+BAAf,CAA+CV,aAAa1D,MAA5D,CAA9B;;AAEApD,uBAAOyH,gBAAP,GAA0B,YAAW;AACjC,wBAAI,CAACzH,OAAOqH,cAAR,IAA2BrH,OAAOmH,KAAP,CAAaC,WAAb,IAA4BN,aAAaQ,IAAb,CAAkBF,WAA7E,EAA2F;AACvFF,4CAAoBQ,mBAApB,CAAwCZ,YAAxC;AACArG,kCAAUuF,IAAV;AACA;AACA,4BAAI5C,SAAS,IAAb;AACA,4BAAIuE,cAAc,IAAlB;AACA,4BAAIC,gBAAgB,IAApB;AACA,4BAAIC,WAAW,cAAf;AACA,4BAAI5E,QAAQ,4CAAZ;AACA,4BAAI6E,YAAY,EAAhB;AACAzH,2CAAmB0H,YAAnB,CAAgC3E,MAAhC,EAAwCuE,WAAxC,EAAqDC,aAArD,EAAoEC,QAApE,EAA8E5E,KAA9E,EAAqF6E,SAArF;AACH,qBAXD,MAWO;AACH9H,+BAAOgI,YAAP,GAAsBhI,OAAOa,UAAP,CAAkB,uCAAlB,CAAtB;AACH;AACJ,iBAfD;AAgBAb,uBAAOiI,SAAP,GAAmB,YAAW;AAC1B,wBAAI,CAACjI,OAAOqH,cAAZ,EAA4B;AACxB;AACAH,4CAAoBQ,mBAApB,CAAwC,IAAxC,EAA8C1H,OAAO8G,YAArD;AACH;;AAED,wBAAIoB,aAAalI,OAAO8G,YAAP,CAAoB1D,MAArC;AACA,wBAAI8E,cAAc,IAAlB,EAAwB;AACpB7H,2CAAmB8H,uCAAnB,CAA2DD,UAA3D;AACH;AACJ,iBAVD;;AAYAlI,uBAAOyG,WAAP,GAAqB,YAAW;AAC5BhG,8BAAUuF,IAAV;;AAEA;AACA,wBAAI5C,SAAS,IAAb;AACA,wBAAIuE,cAAc,IAAlB;AACA,wBAAIC,gBAAgB,IAApB;AACA,wBAAIC,WAAW,cAAf;AACA,wBAAI5E,QAAQ,wCAAZ;AACA,wBAAI6E,YAAY,EAAhB;AACAzH,uCAAmB0H,YAAnB,CAAgC3E,MAAhC,EAAwCuE,WAAxC,EAAqDC,aAArD,EAAoEC,QAApE,EAA8E5E,KAA9E,EAAqF6E,SAArF;AACH,iBAXD;AAYH;;AAED,kBAAKrH,SAAL,CAAeqD,IAAf,CAAoBkD,iBAApB;;AAEA;AACA,gBAAI5D,SAAS,IAAb;AACA,gBAAIuE,cAAc,IAAlB;AACA,gBAAIC,gBAAgB,IAApB;AACA,gBAAIC,WAAW,cAAf;AACA,gBAAI5E,QAAQ,wCAAZ;AACA,gBAAI6E,YAAY,EAAhB;AACA,kBAAKzH,kBAAL,CAAwB0H,YAAxB,CAAqC3E,MAArC,EAA6CuE,WAA7C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmF5E,KAAnF,EAA0F6E,SAA1F;AACH,SArFD;;AAuFA;AACA,aAAKlH,oBAAL,CAA0BwH,IAA1B,CAA+B,UAA/B,EAA2CtD,IAA3C,CAAgD,cAAM;AAClD,kBAAK9E,MAAL,CAAYqI,MAAZ,CAAmB,YAAM;AACrB,uBAAOC,GAAGC,MAAH,EAAP;AACH,aAFD,EAEG,UAACC,cAAD,EAAiBC,cAAjB,EAAoC;AACnC,oBAAID,mBAAmBC,cAAvB,EAAuC;AACnC,wBAAIvG,cAAc,MAAK7B,kBAAL,CAAwB8B,cAAxB,EAAlB;AACA,0BAAK5B,eAAL,CAAqBmI,uBAArB,CAA6CF,cAA7C,EAA6DtG,WAA7D;AACH;AACJ,aAPD;AAQH,SATD;AAUH;;AAED;;;;;;;;uCAIeyG,K,EAAO;AAClB,gBAAIC,cAAc,KAAlB,CADkB,CACO;AACzB,gBAAID,KAAJ,EAAW;AACPC,8BAAcD,KAAd;AACH,aAFD,MAEO;AACH;AACA,oBAAI,KAAKzG,WAAT,EAAsB;AAClB,wBAAIT,KAAK,KAAKS,WAAL,CAAiBT,EAA1B;AACA,wBAAI,KAAKrB,cAAL,CAAoByI,iBAApB,CAAsCpH,EAAtC,CAAJ,EAA+C;AAC3C;AACAmH,sCAAc,MAAd;AACH,qBAHD,MAGO,IAAI,KAAKxI,cAAL,CAAoB0I,WAApB,CAAgCrH,EAAhC,CAAJ,EAAyC;AAC5C;AACAmH,sCAAc,KAAd;AACH;AACJ;AACJ;;AAED,gBAAIA,gBAAgB,UAApB,EAAgC;AAC5B,qBAAK3I,MAAL,CAAY8I,EAAZ,CAAe,eAAf,EAAgC,EAAC3F,QAAQ,KAAKlB,WAAL,CAAiBT,EAA1B,EAAhC;AACH,aAFD,MAEO;AACH,qBAAKuH,eAAL,GAAuB,KAAvB;AACA,qBAAK/I,MAAL,CAAY8I,EAAZ,CAAe,UAAf,EAA2B,EAAC3F,QAAQ,KAAKlB,WAAL,CAAiBT,EAA1B,EAA3B;AACH;;AAED,iBAAKmH,WAAL,GAAmBA,WAAnB;AACH;;AAED;;;;iDACyB;AACrB,gBAAI,CAAC,KAAK9F,mBAAV,EAA+B;AAC7B,qBAAKnC,QAAL,CAAcmD,IAAd,CAAmB,KAAKpB,qBAAxB;AACA,qBAAKI,mBAAL,GAA2B,IAA3B;AACD;AACJ;;AAED;;;;gDACwB;AACpB,iBAAKnC,QAAL,CAAcqF,IAAd,CAAmB,KAAKtD,qBAAxB;AACA,iBAAKI,mBAAL,GAA2B,KAA3B;AACH;;;qDAE4BpB,W,EAAa;AACtC,mBAAO,KAAKvB,aAAL,CAAmB8I,4BAAnB,CAAgDvH,WAAhD,CAAP;AACH;;AAED;;;AAGA;;;;;;;;;;;;AAYA;;;AAGA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;qCAIa;AACT;;;;AAIA,iBAAKlB,cAAL,CAAoB0I,UAApB;AACH;;;;;;AAILnJ,gBAAgBsG,OAAhB,GAA0B,CACtB,QADsB,EAEtB,QAFsB,EAGtB,SAHsB,EAItB,eAJsB,EAKtB,gBALsB,EAMtB,oBANsB,EAOtB,sBAPsB,EAQtB,iBARsB,EAStB,gBATsB,EAUtB,WAVsB,EAWtB,UAXsB,EAYtB,UAZsB,EAatB,sBAbsB,CAA1B;;kBAgBetG,e","file":"themeController.js","sourcesContent":["'use strict';\n\n//import EditNotebookItemController from './notebook/editNotebookItemController';\n\nclass ThemeController {\n    constructor($scope,\n                $state,\n                $filter,\n                ConfigService,\n                ProjectService,\n                StudentDataService,\n                StudentStatusService,\n                NotebookService,\n                SessionService,\n                $mdDialog,\n                $mdMedia,\n                $mdToast,\n                $mdComponentRegistry) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$filter = $filter;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.NotebookService = NotebookService;\n        this.SessionService = SessionService;\n        this.StudentStatusService = StudentStatusService;\n        this.$mdDialog = $mdDialog;\n        this.$mdMedia = $mdMedia;\n        this.$mdToast = $mdToast;\n        this.$mdComponentRegistry = $mdComponentRegistry;\n\n        this.$translate = this.$filter('translate');\n\n        // TODO: set these variables dynamically from theme settings\n        this.layoutView = 'list'; // 'list' or 'card'\n        this.numberProject = true;\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.themeSettings = this.ProjectService.getThemeSettings();\n        this.hideTotalScores = this.themeSettings.hideTotalScores;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.rootNode = this.ProjectService.rootNode;\n        this.rootNodeStatus = this.nodeStatuses[this.rootNode.id];\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        this.workgroupUserNames = this.ConfigService.getUserNamesByWorkgroupId(this.workgroupId);\n\n        this.notebookOpen = false;\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        this.notebookFilter = '';\n\n        this.currentNode = this.StudentDataService.getCurrentNode();\n\n        this.planningMode = false;\n\n        // set current notebook type filter to first enabled type\n        if (this.notebookConfig.enabled) {\n            for (var type in this.notebookConfig.itemTypes) {\n                let prop = this.notebookConfig.itemTypes[type];\n                if (this.notebookConfig.itemTypes.hasOwnProperty(type) && prop.enabled) {\n                    this.notebookFilter = type;\n                    break;\n                }\n            }\n        }\n\n        // build server disconnect display\n        this.connectionLostDisplay = $mdToast.build({\n            template: \"<md-toast>\\\n                      <span>{{ 'serverErrorCheckYourInternetConnection' | translate }}</span>\\\n                      </md-toast>\",\n            hideDelay: 0\n        });\n        this.connectionLostShown = false;\n\n        this.setLayoutState();\n\n        // update layout state when current node changes\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            this.currentNode = this.StudentDataService.getCurrentNode();\n            this.setLayoutState();\n        });\n\n        // alert user when a locked node has been clicked\n        this.$scope.$on('nodeClickLocked', (event, args) => {\n            var message = this.$translate('sorryYouCannotViewThisItemYet');\n            let nodeId = args.nodeId;\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the constraints that affect this node\n                var constraints = this.ProjectService.getConstraintsForNode(node);\n\n                if (constraints != null && constraints.length > 0) {\n                    message = '';\n                }\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    // check if the constraint has been satisfied\n                    if (constraint != null && !this.StudentDataService.evaluateConstraint(node, constraint)) {\n                        // the constraint has not been satisfied and is still active\n\n                        if (message != '') {\n                            // separate multiple constraints with line breaks\n                            message += '<br/><br/>';\n                        }\n\n                        // get the message that describes how to disable the constraint\n                        message += this.ProjectService.getConstraintMessage(nodeId, constraint);\n                    }\n                }\n            }\n\n            this.$mdDialog.show(\n                this.$mdDialog.alert()\n                    .parent(angular.element(document.body))\n                    .title(this.$translate('itemLocked'))\n                    .htmlContent(message)\n                    .ariaLabel(this.$translate('itemLocked'))\n                    .ok(this.$translate('ok'))\n                    .targetEvent(event)\n            );\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showSessionWarning', (ev) => {\n            let alert = this.$mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title(this.$translate('sessionTimeout'))\n                .textContent(this.$translate('autoLogoutMessage'))\n                .ariaLabel(this.$translate('sessionTimeout'))\n                .targetEvent(ev)\n                .ok(this.$translate('yes'))\n                .cancel(this.$translate('no'));\n\n            this.$mdDialog.show(alert).then(() => {\n                this.SessionService.renewSession();\n                alert = undefined;\n            }, () => {\n                this.SessionService.forceLogOut();\n            });\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showRequestLogout', (ev) => {\n            let alert = this.$mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title(this.$translate('serverUpdate'))\n                .textContent(this.$translate('serverUpdateRequestLogoutMessage'))\n                .ariaLabel(this.$translate('serverUpdate'))\n                .targetEvent(ev)\n                .ok(this.$translate('ok'));\n\n            this.$mdDialog.show(alert).then(() => {\n                // do nothing\n            }, () => {\n                // do nothing\n            });\n        });\n\n        // alert user when server loses connection\n        this.$scope.$on('serverDisconnected', () => {\n            this.handleServerDisconnect();\n        });\n\n        // remove alert when server regains connection\n        this.$scope.$on('serverConnected', () => {\n            this.handleServerReconnect();\n        });\n\n        // show list of revisions in a dialog when user clicks the show revisions link for a component\n        this.$scope.$on('showRevisions', (event, args) => {\n            let revisions = args.revisions;\n            let componentController = args.componentController;\n            let allowRevert = args.allowRevert;\n            let $event = args.$event;\n            let revisionsTemplateUrl = this.themePath + '/templates/componentRevisions.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: revisionsTemplateUrl,\n                locals: {\n                    items: revisions.reverse(),\n                    componentController: componentController,\n                    allowRevert: allowRevert\n                },\n                controller: RevisionsController\n            });\n            function RevisionsController($scope, $mdDialog, items, componentController, allowRevert) {\n                $scope.items = items;\n                $scope.componentController = componentController;\n                $scope.allowRevert = allowRevert;\n                $scope.close = () => {\n                    $mdDialog.hide();\n                };\n                $scope.revertWork = (componentState) => {\n                    $scope.componentController.setStudentWork(componentState);\n                    $scope.componentController.studentDataChanged();\n                    $mdDialog.hide();\n                };\n            }\n            RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"items\", \"componentController\", \"allowRevert\"];\n        });\n\n        this.$scope.$on('showStudentAssets', (event, args) => {\n            let componentController = args.componentController;\n            let $event = args.$event;\n            let studentAssetDialogTemplateUrl = this.themePath + '/templates/studentAssetDialog.html';\n            let studentAssetTemplateUrl = this.themePath + '/studentAsset/studentAsset.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: studentAssetDialogTemplateUrl,\n                locals: {\n                    studentAssetTemplateUrl: studentAssetTemplateUrl,\n                    componentController: componentController\n                },\n                controller: StudentAssetDialogController\n            });\n            function StudentAssetDialogController($scope, $mdDialog, componentController) {\n                $scope.studentAssetTemplateUrl = studentAssetTemplateUrl;\n                $scope.componentController = componentController;\n                $scope.closeDialog = function () {\n                    $mdDialog.hide();\n                }\n            }\n            StudentAssetDialogController.$inject = [\"$scope\", \"$mdDialog\", \"componentController\"];\n        });\n\n        // toggle notebook opened or closed on 'toggleNotebook' event\n        this.$scope.$on('toggleNotebook', (event, args) => {\n            let ev = args.ev;\n            let open = args.open;\n            this.toggleNotebook(ev, open);\n        });\n\n        // toggle notebook nav opened or closed on 'toggleNotebookNav' event\n        this.$scope.$on('toggleNotebookNav', () => {\n            this.toggleNotebookNav();\n        });\n\n        // update notebook filter on 'setNotebookFilter' event\n        this.$scope.$on('setNotebookFilter', (event, args) => {\n            this.notebookFilter = args.filter;\n        });\n\n        // show edit note dialog on 'editNote' event\n        /*this.$scope.$on('editNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            this.editNote(itemId, true, null, ev);\n        });*/\n\n        // show edit note dialog on 'addNewNote' event\n        /*this.$scope.$on('addNewNote', (event, args) => {\n            let ev = args.ev;\n            let file = args.file;\n            this.editNote(null, true, file, ev);\n        });*/\n\n        // show delete note confirm dialog on 'deleteNote' event\n        /*this.$scope.$on('deleteNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = true;\n            this.deleteNote(itemId, ev, doDelete);\n        });*/\n\n        // show delete note confirm dialog on 'reviveNote' event\n        /*this.$scope.$on('reviveNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = false;\n            this.deleteNote(itemId, ev, doDelete);\n        });*/\n\n        // a group node has turned on or off planning mode\n        this.$scope.$on('togglePlanningMode', (event, args) => {\n            this.planningMode = args.planningMode;\n        });\n\n        // handle request for notification dismiss codes\n        this.$scope.$on('viewCurrentAmbientNotification', (event, args) => {\n            let notification = args.notification;\n            let ev = args.event;\n            let notificationDismissDialogTemplateUrl = this.themePath + '/templates/notificationDismissDialog.html';\n\n            let dismissCodePrompt = {\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                templateUrl: notificationDismissDialogTemplateUrl,\n                locals: {\n                    notification: notification\n                },\n                controller: DismissCodeDialogController\n            };\n            DismissCodeDialogController.$inject = ['$scope', '$mdDialog', '$filter', 'NotificationService', 'ProjectService', 'StudentDataService', 'notification'];\n\n            function DismissCodeDialogController($scope, $mdDialog, $filter, NotificationService, ProjectService, StudentDataService, notification) {\n\n                $scope.$translate = $filter('translate');\n\n                $scope.input = {\n                    dismissCode: \"\"\n                };\n                $scope.message = \"\";\n                $scope.notification = notification;\n                $scope.hasDismissCode = false;\n                if (notification.data) {\n                    if (notification.data.dismissCode) {\n                        $scope.hasDismissCode = true;\n                    }\n                }\n                $scope.nodePositionAndTitle = ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                $scope.checkDismissCode = function() {\n                    if (!$scope.hasDismissCode || ($scope.input.dismissCode == notification.data.dismissCode)) {\n                        NotificationService.dismissNotification(notification);\n                        $mdDialog.hide();\n                        // log currentAmbientNotificationDimissed event\n                        var nodeId = null;\n                        var componentId = null;\n                        var componentType = null;\n                        var category = \"Notification\";\n                        var event = \"currentAmbientNotificationDimissedWithCode\";\n                        var eventData = {};\n                        StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n                    } else {\n                        $scope.errorMessage = $scope.$translate('dismissNotificationInvalidDismissCode');\n                    }\n                };\n                $scope.visitNode = function() {\n                    if (!$scope.hasDismissCode) {\n                        // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\n                        NotificationService.dismissNotification(null, $scope.notification);\n                    }\n\n                    let goToNodeId = $scope.notification.nodeId;\n                    if (goToNodeId != null) {\n                        StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n                    }\n                };\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();\n\n                    // log currentAmbientNotificationWindowClosed event\n                    var nodeId = null;\n                    var componentId = null;\n                    var componentType = null;\n                    var category = \"Notification\";\n                    var event = \"currentAmbientNotificationWindowClosed\";\n                    var eventData = {};\n                    StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n                }\n            }\n\n            this.$mdDialog.show(dismissCodePrompt);\n\n            // log currentAmbientNotificationWindowOpened event\n            var nodeId = null;\n            var componentId = null;\n            var componentType = null;\n            var category = \"Notification\";\n            var event = \"currentAmbientNotificationWindowOpened\";\n            var eventData = {};\n            this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n        });\n\n        // capture notebook open/close events\n        this.$mdComponentRegistry.when('notebook').then(it => {\n            this.$scope.$watch(() => {\n                return it.isOpen();\n            }, (isOpenNewValue, isOpenOldValue) => {\n                if (isOpenNewValue !== isOpenOldValue) {\n                    let currentNode = this.StudentDataService.getCurrentNode();\n                    this.NotebookService.saveNotebookToggleEvent(isOpenNewValue, currentNode);\n                }\n            });\n        });\n    }\n\n    /**\n    * Set the layout state of the vle\n    * @param state string specifying state (e.g. 'notebook'; optional)\n    */\n    setLayoutState(state) {\n        let layoutState = 'nav'; // default layout state\n        if (state) {\n            layoutState = state;\n        } else {\n            // no state was sent, so set based on current node\n            if (this.currentNode) {\n                var id = this.currentNode.id;\n                if (this.ProjectService.isApplicationNode(id)) {\n                    // currently viewing step, so show step view\n                    layoutState = 'node';\n                } else if (this.ProjectService.isGroupNode(id)) {\n                    // currently viewing group node, so show navigation view\n                    layoutState = 'nav';\n                }\n            }\n        }\n\n        if (layoutState === 'notebook') {\n            this.$state.go('root.notebook', {nodeId: this.currentNode.id});\n        } else {\n            this.notebookNavOpen = false;\n            this.$state.go('root.vle', {nodeId: this.currentNode.id});\n        }\n\n        this.layoutState = layoutState;\n    }\n\n    // show server error alert when connection is lost\n    handleServerDisconnect() {\n        if (!this.connectionLostShown) {\n          this.$mdToast.show(this.connectionLostDisplay);\n          this.connectionLostShown = true;\n        }\n    }\n\n    // hide server error alert when connection is restored\n    handleServerReconnect() {\n        this.$mdToast.hide(this.connectionLostDisplay);\n        this.connectionLostShown = false;\n    }\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        return this.ConfigService.getAvatarColorForWorkgroupId(workgroupId);\n    }\n\n    /**\n    * Open or close the notebook and save notebook open/close events\n    */\n    /*toggleNotebook(ev, open) {\n        //this.notebookOpen = !this.notebookOpen;\n        if (this.layoutState === 'notebook' && !open) {\n            this.setLayoutState();\n            this.NotebookService.saveNotebookToggleEvent(false, this.currentNode);\n        } else {\n            this.layoutState = 'notebook';\n            this.setLayoutState('notebook');\n            this.NotebookService.saveNotebookToggleEvent(true, this.currentNode);\n        }\n    }*/\n\n    /**\n     * Open or close the notebook nav menu\n     */\n    /*toggleNotebookNav() {\n        this.notebookNavOpen = !this.notebookNavOpen;\n    }*/\n\n    /**\n     * Delete the note specified by the itemId.\n     */\n    /*deleteNote(itemId, ev, doDelete = true) {\n        let confirm = null;\n\n        if (doDelete) {\n            confirm = this.$mdDialog.confirm()\n                .title(this.$translate('deleteNoteConfirmMessage'))\n                .ariaLabel('delete note confirmation')\n                .targetEvent(ev)\n                .ok(this.$translate('delete'))\n                .cancel(this.$translate('cancel'));\n        } else {\n            confirm = this.$mdDialog.confirm()\n                .title(this.$translate('reviveNoteConfirmMessage'))\n                .ariaLabel('revive note confirmation')\n                .targetEvent(ev)\n                .ok(this.$translate('revive'))\n                .cancel(this.$translate('cancel'));\n        }\n\n        this.$mdDialog.show(confirm).then(() => {\n            let noteCopy = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(itemId));\n            noteCopy.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n            noteCopy.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n            let clientDeleteTime = null;  // if delete timestamp is null, then we are in effect un-deleting this note item\n            if (doDelete) {\n                clientDeleteTime = Date.parse(new Date());  // set delete timestamp\n            }\n            this.NotebookService.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId,\n                noteCopy.type, noteCopy.title, noteCopy.content, noteCopy.content.clientSaveTime, clientDeleteTime);\n        }, () => {\n            // they chose not to delete. Do nothing, the dialog will close.\n        });\n    }\n\n    editNote(itemId, isEditMode, file, ev) {\n        let notebookItemTemplate = this.themePath + '/notebook/editNotebookItem.html';\n\n        // Display a dialog where students can view/add/edit a notebook item\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            templateUrl: notebookItemTemplate,\n            controller: EditNotebookItemController,\n            controllerAs: 'editNotebookItemController',\n            bindToController: true,\n            locals: {\n                itemId: itemId,\n                isEditMode: isEditMode,\n                file: file\n            }\n        });\n    }*/\n\n    /**\n     * The user has moved the mouse so we will notify the Session Service\n     * so that it can refresh the session\n     */\n    mouseMoved() {\n        /*\n         * notify the Session Service that the user has moved the mouse\n         * so we can refresh the session\n         */\n        this.SessionService.mouseMoved();\n    }\n}\n\n\nThemeController.$inject = [\n    '$scope',\n    '$state',\n    '$filter',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'StudentStatusService',\n    'NotebookService',\n    'SessionService',\n    '$mdDialog',\n    '$mdMedia',\n    '$mdToast',\n    '$mdComponentRegistry'\n];\n\nexport default ThemeController;\n"]}