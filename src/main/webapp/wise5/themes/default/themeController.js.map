{"version":3,"sources":["themeController.es6"],"names":[],"mappings":"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","file":"themeController.js","sourcesContent":["'use strict';\n\nimport EditNotebookItemController from './notebook/editNotebookItemController';\n\nclass ThemeController {\n    constructor($scope,\n                $state,\n                $translate,\n                ConfigService,\n                ProjectService,\n                StudentDataService,\n                StudentStatusService,\n                NotebookService,\n                SessionService,\n                $mdDialog,\n                $mdMedia,\n                $mdToast,\n                $mdComponentRegistry) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.NotebookService = NotebookService;\n        this.SessionService = SessionService;\n        this.StudentStatusService = StudentStatusService;\n        this.$mdDialog = $mdDialog;\n        this.$mdMedia = $mdMedia;\n        this.$mdToast = $mdToast;\n        this.$mdComponentRegistry = $mdComponentRegistry;\n\n        // TODO: set these variables dynamically from theme settings\n        this.layoutView = 'list'; // 'list' or 'card'\n        this.numberProject = true;\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.themeSettings = this.ProjectService.getThemeSettings();\n        this.hideTotalScores = this.themeSettings.hideTotalScores;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.rootNode = this.ProjectService.rootNode;\n        this.rootNodeStatus = this.nodeStatuses[this.rootNode.id];\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        this.workgroupUserNames = this.ConfigService.getUserNamesByWorkgroupId(this.workgroupId);\n\n        this.notebookOpen = false;\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        this.notebookFilter = '';\n\n        this.currentNode = this.StudentDataService.getCurrentNode();\n\n        this.planningMode = false;\n\n        // set current notebook type filter to first enabled type\n        if (this.notebookConfig.enabled) {\n            for (var type in this.notebookConfig.itemTypes) {\n                let prop = this.notebookConfig.itemTypes[type];\n                if (this.notebookConfig.itemTypes.hasOwnProperty(type) && prop.enabled) {\n                    this.notebookFilter = type;\n                    break;\n                }\n            }\n        }\n\n        // build server disconnect display\n        this.connectionLostDisplay = $mdToast.build({\n            template: '<md-toast>\\\n                      <span>Server error. Check your internet connection.</span>\\\n                      </md-toast>',\n            hideDelay: 0\n        });\n        this.connectionLostShown = false;\n\n        this.setLayoutState();\n\n        // update layout state when current node changes\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            this.currentNode = this.StudentDataService.getCurrentNode();\n            this.setLayoutState();\n        });\n\n        // alert user when a locked node has been clicked\n        this.$scope.$on('nodeClickLocked', (event, args) => {\n            var message = 'Sorry, you cannot view this item yet.';\n            let nodeId = args.nodeId;\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the constraints that affect this node\n                var constraints = this.ProjectService.getConstraintsForNode(node);\n\n                if (constraints != null && constraints.length > 0) {\n                    message = '';\n                }\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    // check if the constraint has been satisfied\n                    if (constraint != null && !this.StudentDataService.evaluateConstraint(node, constraint)) {\n                        // the constraint has not been satisfied and is still active\n\n                        if (message != '') {\n                            // separate multiple constraints with line breaks\n                            message += '<br/><br/>';\n                        }\n\n                        // get the message that describes how to disable the constraint\n                        message += this.ProjectService.getConstraintMessage(nodeId, constraint);\n                    }\n                }\n            }\n\n            this.$translate(['itemLocked', 'ok']).then((translations) => {\n                this.$mdDialog.show(\n                    this.$mdDialog.alert()\n                        .parent(angular.element(document.body))\n                        .title(translations.itemLocked)\n                        .htmlContent(message)\n                        .ariaLabel(translations.itemLocked)\n                        .ok(translations.ok)\n                        .targetEvent(event)\n                );\n            })\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showSessionWarning', (ev) => {\n            this.$translate([\"sessionTimeout\", \"autoLogoutMessage\", \"yes\", \"no\"]).then((translations) => {\n\n                let alert = this.$mdDialog.confirm()\n                    .parent(angular.element(document.body))\n                    .title(translations.sessionTimeout)\n                    .textContent(translations.autoLogoutMessage)\n                    .ariaLabel(translations.sessionTimeout)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(alert).then(() => {\n                    this.SessionService.renewSession();\n                    alert = undefined;\n                }, () => {\n                    this.SessionService.forceLogOut();\n                });\n\n            });\n        });\n\n        // alert user when server loses connection\n        this.$scope.$on('serverDisconnected', () => {\n            this.handleServerDisconnect();\n        });\n\n        // remove alert when server regains connection\n        this.$scope.$on('serverConnected', () => {\n            this.handleServerReconnect();\n        });\n\n        // show list of revisions in a dialog when user clicks the show revisions link for a component\n        this.$scope.$on('showRevisions', (event, args) => {\n            let revisions = args.revisions;\n            let componentController = args.componentController;\n            let allowRevert = args.allowRevert;\n            let $event = args.$event;\n            let revisionsTemplateUrl = this.themePath + '/templates/componentRevisions.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: revisionsTemplateUrl,\n                locals: {\n                    items: revisions.reverse(),\n                    componentController: componentController,\n                    allowRevert: allowRevert\n                },\n                controller: RevisionsController\n            });\n            function RevisionsController($scope, $mdDialog, items, componentController, allowRevert) {\n                $scope.items = items;\n                $scope.componentController = componentController;\n                $scope.allowRevert = allowRevert;\n                $scope.close = () => {\n                    $mdDialog.hide();\n                };\n                $scope.revertWork = (componentState) => {\n                    $scope.componentController.setStudentWork(componentState);\n                    $scope.componentController.studentDataChanged();\n                    $mdDialog.hide();\n                };\n            }\n            RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"items\", \"componentController\", \"allowRevert\"];\n        });\n\n        this.$scope.$on('showStudentAssets', (event, args) => {\n            let componentController = args.componentController;\n            let $event = args.$event;\n            let studentAssetDialogTemplateUrl = this.themePath + '/templates/studentAssetDialog.html';\n            let studentAssetTemplateUrl = this.themePath + '/studentAsset/studentAsset.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: studentAssetDialogTemplateUrl,\n                locals: {\n                    studentAssetTemplateUrl: studentAssetTemplateUrl,\n                    componentController: componentController\n                },\n                controller: StudentAssetDialogController\n            });\n            function StudentAssetDialogController($scope, $mdDialog, componentController) {\n                $scope.studentAssetTemplateUrl = studentAssetTemplateUrl;\n                $scope.componentController = componentController;\n                $scope.closeDialog = function () {\n                    $mdDialog.hide();\n                }\n            }\n            StudentAssetDialogController.$inject = [\"$scope\", \"$mdDialog\", \"componentController\"];\n        });\n\n        // toggle notebook opened or closed on 'toggleNotebook' event\n        this.$scope.$on('toggleNotebook', (event, args) => {\n            let ev = args.ev;\n            let open = args.open;\n            this.toggleNotebook(ev, open);\n        });\n\n        // toggle notebook nav opened or closed on 'toggleNotebookNav' event\n        this.$scope.$on('toggleNotebookNav', () => {\n            this.toggleNotebookNav();\n        });\n\n        // update notebook filter on 'setNotebookFilter' event\n        this.$scope.$on('setNotebookFilter', (event, args) => {\n            let filter = args.filter;\n            this.notebookFilter = filter;\n        });\n\n        // show edit note dialog on 'editNote' event\n        this.$scope.$on('editNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            this.editNote(itemId, true, null, ev);\n        });\n\n        // show edit note dialog on 'addNewNote' event\n        this.$scope.$on('addNewNote', (event, args) => {\n            let ev = args.ev;\n            let file = args.file;\n            this.editNote(null, true, file, ev);\n        });\n\n        // a group node has turned on or off planning mode\n        this.$scope.$on('togglePlanningMode', (event, args) => {\n            this.planningMode = args.planningMode;\n        });\n\n        // capture notebook open/close events\n        this.$mdComponentRegistry.when('notebook').then(it => {\n            this.$scope.$watch(() => {\n                return it.isOpen();\n            }, (isOpenNewValue, isOpenOldValue) => {\n                if (isOpenNewValue !== isOpenOldValue) {\n                    let currentNode = this.StudentDataService.getCurrentNode();\n                    this.NotebookService.saveNotebookToggleEvent(isOpenNewValue, currentNode);\n                }\n            });\n        });\n    }\n\n    /**\n    * Set the layout state of the vle\n    * @param state string specifying state (e.g. 'notebook'; optional)\n    */\n    setLayoutState(state) {\n        let layoutState = 'nav'; // default layout state\n        if (state) {\n            layoutState = state;\n        } else {\n            // no state was sent, so set based on current node\n            if (this.currentNode) {\n                var id = this.currentNode.id;\n                if (this.ProjectService.isApplicationNode(id)) {\n                    // currently viewing step, so show step view\n                    layoutState = 'node';\n                } else if (this.ProjectService.isGroupNode(id)) {\n                    // currently viewing group node, so show navigation view\n                    layoutState = 'nav';\n                }\n            }\n        }\n\n        if (layoutState === 'notebook') {\n            this.$state.go('root.notebook', {nodeId: this.currentNode.id});\n        } else {\n            this.notebookNavOpen = false;\n            this.$state.go('root.vle', {nodeId: this.currentNode.id});\n        }\n\n        this.layoutState = layoutState;\n    }\n\n    // show server error alert when connection is lost\n    handleServerDisconnect() {\n        if (!this.connectionLostShown) {\n          this.$mdToast.show(this.connectionLostDisplay);\n          this.connectionLostShown = true;\n        }\n    }\n\n    // hide server error alert when connection is restored\n    handleServerReconnect() {\n        this.$mdToast.hide(this.connectionLostDisplay);\n        this.connectionLostShown = false;\n    }\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        return this.StudentStatusService.getAvatarColorForWorkgroupId(workgroupId);\n    }\n\n    /**\n    * Open or close the notebook and save notebook open/close events\n    */\n    toggleNotebook(ev, open) {\n        //this.notebookOpen = !this.notebookOpen;\n        if (this.layoutState === 'notebook' && !open) {\n            this.setLayoutState();\n            this.NotebookService.saveNotebookToggleEvent(false, this.currentNode);\n        } else {\n            this.layoutState = 'notebook';\n            this.setLayoutState('notebook');\n            this.NotebookService.saveNotebookToggleEvent(true, this.currentNode);\n        }\n    }\n\n    /**\n    * Open or close the notebook nav menu\n    */\n    toggleNotebookNav() {\n        this.notebookNavOpen = !this.notebookNavOpen;\n    }\n\n    editNote(itemId, isEditMode, file, ev) {\n        let showFullScreen = this.$mdMedia('xs');\n        let notebookItemTemplate = this.themePath + '/notebook/editNotebookItem.html';\n\n        // Display a dialog where students can view/add/edit a notebook item\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            fullscreen: showFullScreen,\n            templateUrl: notebookItemTemplate,\n            controller: EditNotebookItemController,\n            controllerAs: 'editNotebookItemController',\n            bindToController: true,\n            locals: {\n                itemId: itemId,\n                isEditMode: isEditMode,\n                file: file\n            }\n        });\n    }\n\n    /**\n     * The user has moved the mouse so we will notify the Session Service\n     * so that it can refresh the session\n     */\n    mouseMoved() {\n        /*\n         * notify the Session Service that the user has moved the mouse\n         * so we can refresh the session\n         */\n        this.SessionService.mouseMoved();\n    }\n}\n\n\nThemeController.$inject = [\n    '$scope',\n    '$state',\n    '$translate',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'StudentStatusService',\n    'NotebookService',\n    'SessionService',\n    '$mdDialog',\n    '$mdMedia',\n    '$mdToast',\n    '$mdComponentRegistry'\n];\n\nexport default ThemeController;\n"]}