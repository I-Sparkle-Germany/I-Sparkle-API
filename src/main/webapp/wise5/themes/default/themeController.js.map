{"version":3,"sources":["themeController.es6"],"names":["ThemeController","$scope","$state","$translate","ConfigService","ProjectService","StudentDataService","StudentStatusService","NotebookService","SessionService","$mdDialog","$mdMedia","$mdToast","$mdComponentRegistry","layoutView","numberProject","themePath","getThemePath","themeSettings","getThemeSettings","hideTotalScores","nodeStatuses","idToOrder","rootNode","rootNodeStatus","id","workgroupId","getWorkgroupId","workgroupUserNames","getUserNamesByWorkgroupId","notebookOpen","notebookConfig","getNotebookConfig","notebookFilter","currentNode","getCurrentNode","planningMode","enabled","type","itemTypes","prop","hasOwnProperty","connectionLostDisplay","build","template","hideDelay","connectionLostShown","setLayoutState","$on","event","args","message","nodeId","node","getNodeById","constraints","getConstraintsForNode","length","c","constraint","evaluateConstraint","getConstraintMessage","then","translations","show","alert","parent","angular","element","document","body","title","itemLocked","htmlContent","ariaLabel","ok","targetEvent","ev","confirm","sessionTimeout","textContent","autoLogoutMessage","yes","cancel","no","renewSession","undefined","forceLogOut","serverUpdate","serverUpdateRequestLogoutMessage","handleServerDisconnect","handleServerReconnect","revisions","componentController","allowRevert","$event","revisionsTemplateUrl","templateUrl","locals","items","reverse","controller","RevisionsController","close","hide","revertWork","componentState","setStudentWork","studentDataChanged","$inject","studentAssetDialogTemplateUrl","studentAssetTemplateUrl","StudentAssetDialogController","closeDialog","open","toggleNotebook","toggleNotebookNav","filter","itemId","editNote","file","doDelete","deleteNote","notification","notificationDismissDialogTemplateUrl","dismissCodePrompt","DismissCodeDialogController","NotificationService","input","dismissCode","hasDismissCode","data","nodePositionAndTitle","getNodePositionAndTitleByNodeId","checkDismissCode","dismissNotification","componentId","componentType","category","eventData","saveVLEEvent","errorMessage","dismissNotificationInvalidDismissCode","visitNode","goToNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","when","$watch","it","isOpen","isOpenNewValue","isOpenOldValue","saveNotebookToggleEvent","state","layoutState","isApplicationNode","isGroupNode","go","notebookNavOpen","getAvatarColorForWorkgroupId","deleteNoteConfirmMessage","delete","reviveNoteConfirmMessage","revive","noteCopy","copy","getLatestNotebookItemByLocalNotebookItemId","content","clientSaveTime","Date","parse","clientDeleteTime","saveNotebookItem","localNotebookItemId","isEditMode","showFullScreen","notebookItemTemplate","fullscreen","controllerAs","bindToController","mouseMoved"],"mappings":"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","file":"themeController.js","sourcesContent":["'use strict';\n\nimport EditNotebookItemController from './notebook/editNotebookItemController';\n\nclass ThemeController {\n    constructor($scope,\n                $state,\n                $translate,\n                ConfigService,\n                ProjectService,\n                StudentDataService,\n                StudentStatusService,\n                NotebookService,\n                SessionService,\n                $mdDialog,\n                $mdMedia,\n                $mdToast,\n                $mdComponentRegistry) {\n\n        this.$scope = $scope;\n        this.$state = $state;\n        this.$translate = $translate;  // TODO: use translate filter\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.NotebookService = NotebookService;\n        this.SessionService = SessionService;\n        this.StudentStatusService = StudentStatusService;\n        this.$mdDialog = $mdDialog;\n        this.$mdMedia = $mdMedia;\n        this.$mdToast = $mdToast;\n        this.$mdComponentRegistry = $mdComponentRegistry;\n\n        // TODO: set these variables dynamically from theme settings\n        this.layoutView = 'list'; // 'list' or 'card'\n        this.numberProject = true;\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.themeSettings = this.ProjectService.getThemeSettings();\n        this.hideTotalScores = this.themeSettings.hideTotalScores;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.rootNode = this.ProjectService.rootNode;\n        this.rootNodeStatus = this.nodeStatuses[this.rootNode.id];\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        this.workgroupUserNames = this.ConfigService.getUserNamesByWorkgroupId(this.workgroupId);\n\n        this.notebookOpen = false;\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        this.notebookFilter = '';\n\n        this.currentNode = this.StudentDataService.getCurrentNode();\n\n        this.planningMode = false;\n\n        // set current notebook type filter to first enabled type\n        if (this.notebookConfig.enabled) {\n            for (var type in this.notebookConfig.itemTypes) {\n                let prop = this.notebookConfig.itemTypes[type];\n                if (this.notebookConfig.itemTypes.hasOwnProperty(type) && prop.enabled) {\n                    this.notebookFilter = type;\n                    break;\n                }\n            }\n        }\n\n        // build server disconnect display\n        this.connectionLostDisplay = $mdToast.build({\n            template: \"<md-toast>\\\n                      <span>{{ 'serverErrorCheckYourInternetConnection' | translate }}</span>\\\n                      </md-toast>\",\n            hideDelay: 0\n        });\n        this.connectionLostShown = false;\n\n        this.setLayoutState();\n\n        // update layout state when current node changes\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            this.currentNode = this.StudentDataService.getCurrentNode();\n            this.setLayoutState();\n        });\n\n        // alert user when a locked node has been clicked\n        this.$scope.$on('nodeClickLocked', (event, args) => {\n            var message = this.$translate('sorryYouCannotViewThisItemYet');\n            let nodeId = args.nodeId;\n\n            var node = this.ProjectService.getNodeById(nodeId);\n\n            if (node != null) {\n\n                // get the constraints that affect this node\n                var constraints = this.ProjectService.getConstraintsForNode(node);\n\n                if (constraints != null && constraints.length > 0) {\n                    message = '';\n                }\n\n                // loop through all the constraints that affect this node\n                for (var c = 0; c < constraints.length; c++) {\n                    var constraint = constraints[c];\n\n                    // check if the constraint has been satisfied\n                    if (constraint != null && !this.StudentDataService.evaluateConstraint(node, constraint)) {\n                        // the constraint has not been satisfied and is still active\n\n                        if (message != '') {\n                            // separate multiple constraints with line breaks\n                            message += '<br/><br/>';\n                        }\n\n                        // get the message that describes how to disable the constraint\n                        message += this.ProjectService.getConstraintMessage(nodeId, constraint);\n                    }\n                }\n            }\n\n            this.$translate(['itemLocked', 'ok']).then((translations) => {\n                this.$mdDialog.show(\n                    this.$mdDialog.alert()\n                        .parent(angular.element(document.body))\n                        .title(translations.itemLocked)\n                        .htmlContent(message)\n                        .ariaLabel(translations.itemLocked)\n                        .ok(translations.ok)\n                        .targetEvent(event)\n                );\n            })\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showSessionWarning', (ev) => {\n            this.$translate([\"sessionTimeout\", \"autoLogoutMessage\", \"yes\", \"no\"]).then((translations) => {\n\n                let alert = this.$mdDialog.confirm()\n                    .parent(angular.element(document.body))\n                    .title(translations.sessionTimeout)\n                    .textContent(translations.autoLogoutMessage)\n                    .ariaLabel(translations.sessionTimeout)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(alert).then(() => {\n                    this.SessionService.renewSession();\n                    alert = undefined;\n                }, () => {\n                    this.SessionService.forceLogOut();\n                });\n\n            });\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showRequestLogout', (ev) => {\n            this.$translate([\"serverUpdate\", \"serverUpdateRequestLogoutMessage\", \"ok\"]).then((translations) => {\n\n                let alert = this.$mdDialog.confirm()\n                    .parent(angular.element(document.body))\n                    .title(translations.serverUpdate)\n                    .textContent(translations.serverUpdateRequestLogoutMessage)\n                    .ariaLabel(translations.serverUpdate)\n                    .targetEvent(ev)\n                    .ok(translations.ok);\n\n                this.$mdDialog.show(alert).then(() => {\n                    // do nothing\n                }, () => {\n                    // do nothing\n                });\n\n            });\n        });\n\n        // alert user when server loses connection\n        this.$scope.$on('serverDisconnected', () => {\n            this.handleServerDisconnect();\n        });\n\n        // remove alert when server regains connection\n        this.$scope.$on('serverConnected', () => {\n            this.handleServerReconnect();\n        });\n\n        // show list of revisions in a dialog when user clicks the show revisions link for a component\n        this.$scope.$on('showRevisions', (event, args) => {\n            let revisions = args.revisions;\n            let componentController = args.componentController;\n            let allowRevert = args.allowRevert;\n            let $event = args.$event;\n            let revisionsTemplateUrl = this.themePath + '/templates/componentRevisions.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: revisionsTemplateUrl,\n                locals: {\n                    items: revisions.reverse(),\n                    componentController: componentController,\n                    allowRevert: allowRevert\n                },\n                controller: RevisionsController\n            });\n            function RevisionsController($scope, $mdDialog, items, componentController, allowRevert) {\n                $scope.items = items;\n                $scope.componentController = componentController;\n                $scope.allowRevert = allowRevert;\n                $scope.close = () => {\n                    $mdDialog.hide();\n                };\n                $scope.revertWork = (componentState) => {\n                    $scope.componentController.setStudentWork(componentState);\n                    $scope.componentController.studentDataChanged();\n                    $mdDialog.hide();\n                };\n            }\n            RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"items\", \"componentController\", \"allowRevert\"];\n        });\n\n        this.$scope.$on('showStudentAssets', (event, args) => {\n            let componentController = args.componentController;\n            let $event = args.$event;\n            let studentAssetDialogTemplateUrl = this.themePath + '/templates/studentAssetDialog.html';\n            let studentAssetTemplateUrl = this.themePath + '/studentAsset/studentAsset.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: studentAssetDialogTemplateUrl,\n                locals: {\n                    studentAssetTemplateUrl: studentAssetTemplateUrl,\n                    componentController: componentController\n                },\n                controller: StudentAssetDialogController\n            });\n            function StudentAssetDialogController($scope, $mdDialog, componentController) {\n                $scope.studentAssetTemplateUrl = studentAssetTemplateUrl;\n                $scope.componentController = componentController;\n                $scope.closeDialog = function () {\n                    $mdDialog.hide();\n                }\n            }\n            StudentAssetDialogController.$inject = [\"$scope\", \"$mdDialog\", \"componentController\"];\n        });\n\n        // toggle notebook opened or closed on 'toggleNotebook' event\n        this.$scope.$on('toggleNotebook', (event, args) => {\n            let ev = args.ev;\n            let open = args.open;\n            this.toggleNotebook(ev, open);\n        });\n\n        // toggle notebook nav opened or closed on 'toggleNotebookNav' event\n        this.$scope.$on('toggleNotebookNav', () => {\n            this.toggleNotebookNav();\n        });\n\n        // update notebook filter on 'setNotebookFilter' event\n        this.$scope.$on('setNotebookFilter', (event, args) => {\n            this.notebookFilter = args.filter;\n        });\n\n        // show edit note dialog on 'editNote' event\n        this.$scope.$on('editNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            this.editNote(itemId, true, null, ev);\n        });\n\n        // show edit note dialog on 'addNewNote' event\n        this.$scope.$on('addNewNote', (event, args) => {\n            let ev = args.ev;\n            let file = args.file;\n            this.editNote(null, true, file, ev);\n        });\n\n        // show delete note confirm dialog on 'deleteNote' event\n        this.$scope.$on('deleteNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = true;\n            this.deleteNote(itemId, ev, doDelete);\n        });\n\n        // show delete note confirm dialog on 'reviveNote' event\n        this.$scope.$on('reviveNote', (event, args) => {\n            let itemId = args.itemId;\n            let ev = args.ev;\n            let doDelete = false;\n            this.deleteNote(itemId, ev, doDelete);\n        });\n\n        // a group node has turned on or off planning mode\n        this.$scope.$on('togglePlanningMode', (event, args) => {\n            this.planningMode = args.planningMode;\n        });\n\n        // handle request for notification dismiss codes\n        this.$scope.$on('viewCurrentAmbientNotification', (event, args) => {\n            let notification = args.notification;\n            let ev = args.event;\n            let notificationDismissDialogTemplateUrl = this.themePath + '/templates/notificationDismissDialog.html';\n\n            this.$translate([\"dismissNotificationDismissCodeTitle\", \"dismissNotificationDismissCodeMessage\", \"ok\", \"cancel\"]).then((translations) => {\n                let dismissCodePrompt = {\n                    parent: angular.element(document.body),\n                    targetEvent: ev,\n                    templateUrl: notificationDismissDialogTemplateUrl,\n                    locals: {\n                        notification: notification\n                    },\n                    controller: DismissCodeDialogController\n                };\n                DismissCodeDialogController.$inject = ['$scope', '$mdDialog', '$translate', 'NotificationService', 'ProjectService', 'StudentDataService', 'notification'];\n\n                function DismissCodeDialogController($scope, $mdDialog, $translate, NotificationService, ProjectService, StudentDataService, notification) {\n                    $scope.input = {\n                        dismissCode: \"\"\n                    };\n                    $scope.message = \"\";\n                    $scope.notification = notification;\n                    $scope.hasDismissCode = false;\n                    if (notification.data) {\n                        if (notification.data.dismissCode) {\n                            $scope.hasDismissCode = true;\n                        }\n                    }\n                    $scope.nodePositionAndTitle = ProjectService.getNodePositionAndTitleByNodeId(notification.nodeId);\n\n                    $scope.checkDismissCode = function() {\n                        if (!$scope.hasDismissCode || ($scope.input.dismissCode == notification.data.dismissCode)) {\n                            NotificationService.dismissNotification(notification);\n                            $mdDialog.hide();\n                            // log currentAmbientNotificationDimissed event\n                            var nodeId = null;\n                            var componentId = null;\n                            var componentType = null;\n                            var category = \"Notification\";\n                            var event = \"currentAmbientNotificationDimissedWithCode\";\n                            var eventData = {};\n                            StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n                        } else {\n                            $translate([\"dismissNotificationInvalidDismissCode\"]).then((translations) => {\n                                $scope.errorMessage = translations.dismissNotificationInvalidDismissCode;\n                            });\n                        }\n                    };\n                    $scope.visitNode = function() {\n                        if (!$scope.hasDismissCode) {\n                            // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\n                            NotificationService.dismissNotification(null, $scope.notification);\n                        }\n\n                        let goToNodeId = $scope.notification.nodeId;\n                        if (goToNodeId != null) {\n                            StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n                        }\n                    };\n\n                    $scope.closeDialog = function() {\n                        $mdDialog.hide();\n\n                        // log currentAmbientNotificationWindowClosed event\n                        var nodeId = null;\n                        var componentId = null;\n                        var componentType = null;\n                        var category = \"Notification\";\n                        var event = \"currentAmbientNotificationWindowClosed\";\n                        var eventData = {};\n                        StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n                    }\n                }\n\n                this.$mdDialog.show(dismissCodePrompt);\n\n                // log currentAmbientNotificationWindowOpened event\n                var nodeId = null;\n                var componentId = null;\n                var componentType = null;\n                var category = \"Notification\";\n                var event = \"currentAmbientNotificationWindowOpened\";\n                var eventData = {};\n                this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n            });\n        });\n\n        // capture notebook open/close events\n        this.$mdComponentRegistry.when('notebook').then(it => {\n            this.$scope.$watch(() => {\n                return it.isOpen();\n            }, (isOpenNewValue, isOpenOldValue) => {\n                if (isOpenNewValue !== isOpenOldValue) {\n                    let currentNode = this.StudentDataService.getCurrentNode();\n                    this.NotebookService.saveNotebookToggleEvent(isOpenNewValue, currentNode);\n                }\n            });\n        });\n    }\n\n    /**\n    * Set the layout state of the vle\n    * @param state string specifying state (e.g. 'notebook'; optional)\n    */\n    setLayoutState(state) {\n        let layoutState = 'nav'; // default layout state\n        if (state) {\n            layoutState = state;\n        } else {\n            // no state was sent, so set based on current node\n            if (this.currentNode) {\n                var id = this.currentNode.id;\n                if (this.ProjectService.isApplicationNode(id)) {\n                    // currently viewing step, so show step view\n                    layoutState = 'node';\n                } else if (this.ProjectService.isGroupNode(id)) {\n                    // currently viewing group node, so show navigation view\n                    layoutState = 'nav';\n                }\n            }\n        }\n\n        if (layoutState === 'notebook') {\n            this.$state.go('root.notebook', {nodeId: this.currentNode.id});\n        } else {\n            this.notebookNavOpen = false;\n            this.$state.go('root.vle', {nodeId: this.currentNode.id});\n        }\n\n        this.layoutState = layoutState;\n    }\n\n    // show server error alert when connection is lost\n    handleServerDisconnect() {\n        if (!this.connectionLostShown) {\n          this.$mdToast.show(this.connectionLostDisplay);\n          this.connectionLostShown = true;\n        }\n    }\n\n    // hide server error alert when connection is restored\n    handleServerReconnect() {\n        this.$mdToast.hide(this.connectionLostDisplay);\n        this.connectionLostShown = false;\n    }\n\n    getAvatarColorForWorkgroupId(workgroupId) {\n        return this.ConfigService.getAvatarColorForWorkgroupId(workgroupId);\n    }\n\n    /**\n    * Open or close the notebook and save notebook open/close events\n    */\n    toggleNotebook(ev, open) {\n        //this.notebookOpen = !this.notebookOpen;\n        if (this.layoutState === 'notebook' && !open) {\n            this.setLayoutState();\n            this.NotebookService.saveNotebookToggleEvent(false, this.currentNode);\n        } else {\n            this.layoutState = 'notebook';\n            this.setLayoutState('notebook');\n            this.NotebookService.saveNotebookToggleEvent(true, this.currentNode);\n        }\n    }\n\n    /**\n     * Open or close the notebook nav menu\n     */\n    toggleNotebookNav() {\n        this.notebookNavOpen = !this.notebookNavOpen;\n    }\n\n    /**\n     * Delete the note specified by the itemId.\n     */\n    deleteNote(itemId, ev, doDelete = true) {\n        this.$translate([\"cancel\", \"deleteNoteConfirmMessage\", \"delete\", \"revive\", \"reviveNoteConfirmMessage\"]).then((translations) => {\n            let confirm = null;\n\n            if (doDelete) {\n                confirm = this.$mdDialog.confirm()\n                    .title(translations.deleteNoteConfirmMessage)\n                    .ariaLabel('delete note confirmation')\n                    .targetEvent(ev)\n                    .ok(translations.delete)\n                    .cancel(translations.cancel);\n            } else {\n                confirm = this.$mdDialog.confirm()\n                    .title(translations.reviveNoteConfirmMessage)\n                    .ariaLabel('revive note confirmation')\n                    .targetEvent(ev)\n                    .ok(translations.revive)\n                    .cancel(translations.cancel);\n            }\n\n            this.$mdDialog.show(confirm).then(() => {\n                let noteCopy = angular.copy(this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(itemId));\n                noteCopy.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n                noteCopy.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n                let clientDeleteTime = null;  // if delete timestamp is null, then we are in effect un-deleting this note item\n                if (doDelete) {\n                    clientDeleteTime = Date.parse(new Date());  // set delete timestamp\n                }\n                this.NotebookService.saveNotebookItem(noteCopy.id, noteCopy.nodeId, noteCopy.localNotebookItemId,\n                    noteCopy.type, noteCopy.title, noteCopy.content, noteCopy.content.clientSaveTime, clientDeleteTime);\n            }, () => {\n                // they chose not to delete. Do nothing, the dialog will close.\n            });\n        });\n    }\n\n    editNote(itemId, isEditMode, file, ev) {\n        let showFullScreen = this.$mdMedia('xs');\n        let notebookItemTemplate = this.themePath + '/notebook/editNotebookItem.html';\n\n        // Display a dialog where students can view/add/edit a notebook item\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: ev,\n            fullscreen: showFullScreen,\n            templateUrl: notebookItemTemplate,\n            controller: EditNotebookItemController,\n            controllerAs: 'editNotebookItemController',\n            bindToController: true,\n            locals: {\n                itemId: itemId,\n                isEditMode: isEditMode,\n                file: file\n            }\n        });\n    }\n\n    /**\n     * The user has moved the mouse so we will notify the Session Service\n     * so that it can refresh the session\n     */\n    mouseMoved() {\n        /*\n         * notify the Session Service that the user has moved the mouse\n         * so we can refresh the session\n         */\n        this.SessionService.mouseMoved();\n    }\n}\n\n\nThemeController.$inject = [\n    '$scope',\n    '$state',\n    '$translate',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'StudentStatusService',\n    'NotebookService',\n    'SessionService',\n    '$mdDialog',\n    '$mdMedia',\n    '$mdToast',\n    '$mdComponentRegistry'\n];\n\nexport default ThemeController;\n"]}