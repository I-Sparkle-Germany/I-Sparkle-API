{"version":3,"sources":["navigationController.es6"],"names":[],"mappings":";;;;;;;;;;IAAM;AACF,aADE,oBACF,CAAY,UAAZ,EACY,aADZ,EAEY,cAFZ,EAGY,kBAHZ,EAGgC;8BAJ9B,sBAI8B;;AAE5B,aAAK,UAAL,GAAkB,UAAlB,CAF4B;AAG5B,aAAK,aAAL,GAAqB,aAArB,CAH4B;AAI5B,aAAK,cAAL,GAAsB,cAAtB,CAJ4B;AAK5B,aAAK,kBAAL,GAA0B,kBAA1B,CAL4B;;AAO5B,aAAK,QAAL,GAAgB,KAAK,cAAL,CAAoB,QAApB,CAPY;;AAS5B,aAAK,UAAL,CAAgB,GAAhB,CAAoB,qBAApB,EAA2C,UAAU,KAAV,EAAiB,OAAjB,EAA0B,QAA1B,EAAoC,SAApC,EAA+C,UAA/C,EAA2D;AAClG,gBAAI,WAAW,SAAS,MAAT,CADmF;AAElG,gBAAI,aAAa,WAAW,MAAX,CAFiF;AAGlG,gBAAI,YAAY,UAAZ,IAA0B,aAAa,UAAb,EAAyB;AACnD,qBAAK,kBAAL,CAAwB,uCAAxB,CAAgE,QAAhE,EADmD;aAAvD;SAHuC,CAMzC,IANyC,CAMpC,IANoC,CAA3C,EAT4B;KAHhC;;;;;;;iBADE;;gDAyBsB;AACpB,gBAAI,aAAa,KAAK,aAAL,CAAmB,aAAnB,EAAb,CADgB;AAEpB,gBAAI,cAAc,IAAd,EAAoB;AACpB,oBAAI,YAAY,KAAK,kBAAL,CAAwB,SAAxB,EAAZ,CADgB;AAEpB,qBAAK,MAAL,CAAY,UAAZ;;AAFoB,oBAIhB,UAAU,KAAK,IAAL,CAAU,mBAAV,EAA+B;AACzC,8BAAU,SAAV;iBADU,EAEX,UAAC,OAAD,EAAa;AACZ,4BAAQ,SAAR,CAAkB,UAAC,UAAD,EAAgB;AAC9B,8BAAM,UAAN,EAD8B;qBAAhB,CAAlB,CADY;iBAAb,CAFC;;;AAJgB,uBAapB,CAAQ,IAAR,CAAa,YAAM;AACf,0BAAM,mBAAmB,QAAQ,YAAR,CAAzB,CADe;iBAAN,CAAb,CAboB;aAAxB;;;;WA3BF;;;AA+CN,qBAAqB,OAArB,GAA+B,CAC3B,YAD2B,EAE3B,eAF2B,EAG3B,gBAH2B,EAI3B,oBAJ2B,CAA/B;;kBAOe","file":"navigationController.js","sourcesContent":["class NavigationController {\n    constructor($rootScope,\n                ConfigService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.rootNode = this.ProjectService.rootNode;\n\n        this.$rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n            var toNodeId = toParams.nodeId;\n            var fromNodeId = fromParams.nodeId;\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Invokes OpenCPU to calculate and display student statistics\n     */\n    showStudentStatistics() {\n        let openCPUURL = this.ConfigService.getOpenCPUURL();\n        if (openCPUURL != null) {\n            let allEvents = this.StudentDataService.getEvents();\n            ocpu.seturl(openCPUURL);\n            //perform the request\n            var request = ocpu.call(\"getTotalTimeSpent\", {\n                \"events\": allEvents\n            }, (session) => {\n                session.getStdout((echoedData) => {\n                    alert(echoedData);\n                });\n            });\n\n            //if R returns an error, alert the error message\n            request.fail(() => {\n                alert(\"Server error: \" + request.responseText);\n            });\n        }\n    }\n}\n\nNavigationController.$inject = [\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NavigationController;\n"]}