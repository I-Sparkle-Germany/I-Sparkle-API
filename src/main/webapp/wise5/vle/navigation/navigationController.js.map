{"version":3,"sources":["navigationController.es6"],"names":["NavigationController","$rootScope","ConfigService","ProjectService","StudentDataService","rootNode","$on","event","toState","toParams","fromState","fromParams","toNodeId","nodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","bind","openCPUURL","getOpenCPUURL","allEvents","getEvents","ocpu","seturl","request","call","session","getStdout","echoedData","alert","fail","responseText","$inject"],"mappings":";;;;;;;;;;IAAMA,oB;AACF,kCAAYC,UAAZ,EACYC,aADZ,EAEYC,cAFZ,EAGYC,kBAHZ,EAGgC;AAAA;;AAE5B,aAAKH,UAAL,GAAkBA,UAAlB;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,cAAL,GAAsBA,cAAtB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;;AAEA,aAAKC,QAAL,GAAgB,KAAKF,cAAL,CAAoBE,QAApC;;AAEA,aAAKJ,UAAL,CAAgBK,GAAhB,CAAoB,qBAApB,EAA2C,UAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2D;AAClG,gBAAIC,WAAWH,SAASI,MAAxB;AACA,gBAAIC,aAAaH,WAAWE,MAA5B;AACA,gBAAID,YAAYE,UAAZ,IAA0BF,aAAaE,UAA3C,EAAuD;AACnD,qBAAKV,kBAAL,CAAwBW,uCAAxB,CAAgEH,QAAhE;AACH;;AAED,gBAAIJ,QAAQQ,IAAR,KAAiB,UAArB,EAAiC;AAC7B,oBAAIH,SAASJ,SAASI,MAAtB;AACA,oBAAI,KAAKV,cAAL,CAAoBc,iBAApB,CAAsCJ,MAAtC,CAAJ,EAAmD;AAC/C;AACAK,6BAASC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+C,CAA/C;AACH;AACJ;AACJ,SAd0C,CAczCC,IAdyC,CAcpC,IAdoC,CAA3C;AAeH;;AAED;;;;;;;gDAGwB;AACpB,gBAAIC,aAAa,KAAKpB,aAAL,CAAmBqB,aAAnB,EAAjB;AACA,gBAAID,cAAc,IAAlB,EAAwB;AACpB,oBAAIE,YAAY,KAAKpB,kBAAL,CAAwBqB,SAAxB,EAAhB;AACAC,qBAAKC,MAAL,CAAYL,UAAZ;AACA;AACA,oBAAIM,UAAUF,KAAKG,IAAL,CAAU,mBAAV,EAA+B;AACzC,8BAAUL;AAD+B,iBAA/B,EAEX,UAACM,OAAD,EAAa;AACZA,4BAAQC,SAAR,CAAkB,UAACC,UAAD,EAAgB;AAC9BC,8BAAMD,UAAN;AACH,qBAFD;AAGH,iBANa,CAAd;;AAQA;AACAJ,wBAAQM,IAAR,CAAa,YAAM;AACfD,0BAAM,mBAAmBL,QAAQO,YAAjC;AACH,iBAFD;AAGH;AACJ;;;;;;AAGLnC,qBAAqBoC,OAArB,GAA+B,CAC3B,YAD2B,EAE3B,eAF2B,EAG3B,gBAH2B,EAI3B,oBAJ2B,CAA/B;;kBAOepC,oB","file":"navigationController.js","sourcesContent":["class NavigationController {\n    constructor($rootScope,\n                ConfigService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.rootNode = this.ProjectService.rootNode;\n\n        this.$rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {\n            var toNodeId = toParams.nodeId;\n            var fromNodeId = fromParams.nodeId;\n            if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n            }\n\n            if (toState.name === 'root.vle') {\n                let nodeId = toParams.nodeId;\n                if (this.ProjectService.isApplicationNode(nodeId)) {\n                    // scroll to top when viewing a new step\n                    document.getElementById('content').scrollTop = 0;\n                }\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Invokes OpenCPU to calculate and display student statistics\n     */\n    showStudentStatistics() {\n        let openCPUURL = this.ConfigService.getOpenCPUURL();\n        if (openCPUURL != null) {\n            let allEvents = this.StudentDataService.getEvents();\n            ocpu.seturl(openCPUURL);\n            //perform the request\n            var request = ocpu.call(\"getTotalTimeSpent\", {\n                \"events\": allEvents\n            }, (session) => {\n                session.getStdout((echoedData) => {\n                    alert(echoedData);\n                });\n            });\n\n            //if R returns an error, alert the error message\n            request.fail(() => {\n                alert(\"Server error: \" + request.responseText);\n            });\n        }\n    }\n}\n\nNavigationController.$inject = [\n    '$rootScope',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NavigationController;\n"]}