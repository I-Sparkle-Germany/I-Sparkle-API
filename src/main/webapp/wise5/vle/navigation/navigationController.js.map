{"version":3,"sources":["navigationController.es6"],"names":["NavigationController","$rootScope","$filter","ConfigService","ProjectService","StudentDataService","rootNode","$on","event","toState","toParams","fromState","fromParams","toNodeId","nodeId","fromNodeId","endCurrentNodeAndSetCurrentNodeByNodeId","name","isApplicationNode","document","getElementById","scrollTop","bind","openCPUURL","getOpenCPUURL","allEvents","getEvents","ocpu","seturl","request","call","session","getStdout","echoedData","alert","fail","$translate","responseText","$inject"],"mappings":";;;;;;;;;;IAAMA,oB;AACJ,gCACIC,UADJ,EAEIC,OAFJ,EAGIC,aAHJ,EAIIC,cAJJ,EAKIC,kBALJ,EAKwB;AAAA;;AACtB,SAAKJ,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,QAAL,GAAgB,KAAKF,cAAL,CAAoBE,QAApC;;AAEA,SAAKL,UAAL,CAAgBM,GAAhB,CAAoB,qBAApB,EACI,UAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,UAA/C,EAA2D;AAC7D,UAAMC,WAAWH,SAASI,MAA1B;AACA,UAAMC,aAAaH,WAAWE,MAA9B;AACA,UAAID,YAAYE,UAAZ,IAA0BF,aAAaE,UAA3C,EAAuD;AACrD,aAAKV,kBAAL,CAAwBW,uCAAxB,CAAgEH,QAAhE;AACD;;AAED,UAAIJ,QAAQQ,IAAR,KAAiB,UAArB,EAAiC;AAC/B,YAAMH,SAASJ,SAASI,MAAxB;AACA,YAAI,KAAKV,cAAL,CAAoBc,iBAApB,CAAsCJ,MAAtC,CAAJ,EAAmD;AACjD;AACAK,mBAASC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+C,CAA/C;AACD;AACF;AACF,KAdG,CAcFC,IAdE,CAcG,IAdH,CADJ;AAgBD;;AAED;;;;;;;4CAGwB;AAAA;;AACtB,UAAIC,aAAa,KAAKpB,aAAL,CAAmBqB,aAAnB,EAAjB;AACA,UAAID,cAAc,IAAlB,EAAwB;AACtB,YAAIE,YAAY,KAAKpB,kBAAL,CAAwBqB,SAAxB,EAAhB;AACAC,aAAKC,MAAL,CAAYL,UAAZ;AACA,YAAMM,UAAUF,KAAKG,IAAL,CAAU,mBAAV,EAA+B;AAC7C,oBAAUL;AADmC,SAA/B,EAEb,UAACM,OAAD,EAAa;AACdA,kBAAQC,SAAR,CAAkB,UAACC,UAAD,EAAgB;AAChCC,kBAAMD,UAAN;AACD,WAFD;AAGD,SANe,CAAhB;;AAQAJ,gBAAQM,IAAR,CAAa,YAAM;AACjBD,gBAAM,MAAKE,UAAL,CAAgB,aAAhB,IAAiCP,QAAQQ,YAA/C;AACD,SAFD;AAGD;AACF;;;;;;AAGHrC,qBAAqBsC,OAArB,GAA+B,CAC7B,YAD6B,EAE7B,SAF6B,EAG7B,eAH6B,EAI7B,gBAJ6B,EAK7B,oBAL6B,CAA/B;;kBAQetC,oB","file":"navigationController.js","sourcesContent":["class NavigationController {\n  constructor(\n      $rootScope,\n      $filter,\n      ConfigService,\n      ProjectService,\n      StudentDataService) {\n    this.$rootScope = $rootScope;\n    this.$filter = $filter;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.rootNode = this.ProjectService.rootNode;\n\n    this.$rootScope.$on('$stateChangeSuccess',\n        function (event, toState, toParams, fromState, fromParams) {\n      const toNodeId = toParams.nodeId;\n      const fromNodeId = fromParams.nodeId;\n      if (toNodeId && fromNodeId && toNodeId !== fromNodeId) {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(toNodeId);\n      }\n\n      if (toState.name === 'root.vle') {\n        const nodeId = toParams.nodeId;\n        if (this.ProjectService.isApplicationNode(nodeId)) {\n          // scroll to top when viewing a new step\n          document.getElementById('content').scrollTop = 0;\n        }\n      }\n    }.bind(this));\n  }\n\n  /**\n   * Invokes OpenCPU to calculate and display student statistics\n   */\n  showStudentStatistics() {\n    let openCPUURL = this.ConfigService.getOpenCPUURL();\n    if (openCPUURL != null) {\n      let allEvents = this.StudentDataService.getEvents();\n      ocpu.seturl(openCPUURL);\n      const request = ocpu.call(\"getTotalTimeSpent\", {\n        \"events\": allEvents\n      }, (session) => {\n        session.getStdout((echoedData) => {\n          alert(echoedData);\n        });\n      });\n\n      request.fail(() => {\n        alert(this.$translate('serverError') + request.responseText);\n      });\n    }\n  }\n}\n\nNavigationController.$inject = [\n  '$rootScope',\n  '$filter',\n  'ConfigService',\n  'ProjectService',\n  'StudentDataService'\n];\n\nexport default NavigationController;\n"]}