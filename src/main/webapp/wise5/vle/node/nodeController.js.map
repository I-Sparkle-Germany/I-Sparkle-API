{"version":3,"sources":["nodeController.es6"],"names":["NodeController","$compile","$filter","$q","$rootScope","$scope","$state","$timeout","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","UtilService","$translate","autoSaveInterval","nodeId","nodeContent","nodeStatus","nodeTitle","dirtyComponentIds","dirtySubmitComponentIds","submit","workgroupId","getWorkgroupId","teacherWorkgroupId","getTeacherWorkgroupId","isDisabled","isRunActive","componentToScope","saveMessage","text","time","rubric","mode","getMode","getCurrentNode","isApplicationNode","getCurrentNodeId","currentNode","id","getNodeById","getNodeTitleByNodeId","nodeStatuses","startAutoSaveInterval","registerExitListener","currentNodeHasTransitionLogic","evaluateTransitionLogicOn","evaluateTransitionLogic","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","latestClientSaveTime","clientSaveTime","isSubmit","setSubmittedMessage","setSavedMessage","componentId","componentType","category","event","eventData","saveVLEEvent","createRubricTour","params","scrollAndHighlightComponent","$on","args","nodeContainsComponent","isAutoSave","createAndSaveComponentData","componentState","notifyConnectedParts","$broadcast","isDirty","index","indexOf","push","splice","nodeToExit","stopAutoSaveInterval","nodeUnloaded","script","retrieveScript","then","Function","call","rubricTour","arrowWidth","bubblePadding","bubbleWidth","container","steps","showPrevButton","showNextButton","scrollDuration","customRenderer","getRubricTemplate","customData","$ctrl","i18n","nextBtn","prevBtn","doneBtn","closeTooltip","thisTarget","target","placement","title","content","replaceAssetPaths","xOffset","arrowOffset","onShow","onShowRubric","viewed","components","getComponents","component","yOffset","step","hopscotch","endTour","startTour","componentElement","$","originalBackgroundColor","css","animate","scrollTop","prop","details","buttons","tour","template","width","padding","isTour","stepNum","showClose","showCTA","ctaLabel","showPrev","showNext","templateHTML","outerHTML","getCurrStepNum","getCurrTour","childScope","revisions","componentStates","getComponentStatesByNodeIdAndComponentId","$event","isComponentDisabled","getRevisions","allowRevert","componentController","openResponseController","drawController","discussionController","tableController","graphController","tempComponent","tempComponentId","getComponentTemplatePath","showSaveButton","showSubmitButton","setSaveText","message","autoSaveIntervalId","setInterval","length","clearInterval","createComponentStates","componentAnnotations","componentEvents","nodeStates","arrayHasNonNullElement","annotations","concat","saveToServer","savedStudentDataResponse","componentAnnotation","type","studentWorkList","latestStudentWork","serverSaveTime","convertToClientTimestamp","setAutoSavedMessage","clearSaveText","componentStatePromises","getComponentById","runId","getRunId","periodId","getPeriodId","getComponentState","componentStatePromise","getComponentStateFromChildScope","all","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","changedComponentId","connectedComponents","connectedComponentParams","connectedComponentId","connectedNodeId","connectedComponent","componentScope","handleConnectedComponentStudentDataChanged","latestState","getComponentStateByComponentId","logOutListener","$inject"],"mappings":"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","file":"nodeController.js","sourcesContent":["class NodeController {\n  constructor(\n      $compile,\n      $filter,\n      $q,\n      $rootScope,\n      $scope,\n      $state,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentDataService,\n      UtilService) {\n    this.$compile = $compile;\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$timeout = $timeout;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    // the auto save interval in milliseconds\n    this.autoSaveInterval = 60000;\n\n    this.nodeId = null;\n    this.nodeContent = null;\n    this.nodeStatus = null;\n    this.nodeTitle = null;\n    this.dirtyComponentIds = [];\n    this.dirtySubmitComponentIds = [];\n    this.submit = false;\n    this.workgroupId = this.ConfigService.getWorkgroupId();\n    this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n    this.isDisabled = !this.ConfigService.isRunActive();\n\n    /*\n     * an object that holds the mappings with the key being the component\n     * and the value being the scope object from the child controller\n     */\n    this.componentToScope = {};\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    this.rubric = null;\n    this.mode = this.ConfigService.getMode();\n\n    // perform setup of this node only if the current node is not a group.\n    if (this.StudentDataService.getCurrentNode() &&\n        this.ProjectService.isApplicationNode(\n        this.StudentDataService.getCurrentNodeId())) {\n      const currentNode = this.StudentDataService.getCurrentNode();\n      if (currentNode != null) {\n        this.nodeId = currentNode.id;\n      }\n\n      this.nodeContent = this.ProjectService.getNodeById(this.nodeId);\n      this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n      this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n      this.startAutoSaveInterval();\n      this.registerExitListener();\n\n      if (this.NodeService.currentNodeHasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n        this.NodeService.evaluateTransitionLogic();\n      }\n\n      // set save message with last save/submission\n      // for now, we'll use the latest component state (since we don't currently keep track of node-level saves)\n      // TODO: use node states once we implement node state saving\n      const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId);\n      if (latestComponentState) {\n        const latestClientSaveTime = latestComponentState.clientSaveTime;\n        if (latestComponentState.isSubmit) {\n          this.setSubmittedMessage(latestClientSaveTime);\n        } else {\n          this.setSavedMessage(latestClientSaveTime);\n        }\n      }\n\n      const nodeId = this.nodeId;\n      const componentId = null;\n      const componentType = null;\n      const category = \"Navigation\";\n      const event = \"nodeEntered\";\n      const eventData = {};\n      eventData.nodeId = nodeId;\n      this.StudentDataService.saveVLEEvent(\n          nodeId, componentId, componentType, category, event, eventData);\n\n      if (this.nodeContent != null) {\n        this.rubric = this.nodeContent.rubric;\n        this.createRubricTour();\n      }\n\n      /*\n       * If the component id was provided in the state params, scroll to it and\n        * then briefly highlight it to bring attention to it.\n       */\n      if (this.$state != null &&\n          this.$state.params != null &&\n          this.$state.params.componentId != null) {\n        const componentId = this.$state.params.componentId;\n        this.scrollAndHighlightComponent(componentId);\n      }\n    }\n\n    /**\n     * Listen for the componentSaveTriggered event which occurs when a\n     * component is requesting student data to be saved\n     */\n    this.$scope.$on('componentSaveTriggered', (event, args) => {\n      if (args != null) {\n        const nodeId = args.nodeId;\n        const componentId = args.componentId;\n\n        if (nodeId != null && componentId != null) {\n          if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n            const isAutoSave = false;\n            this.createAndSaveComponentData(isAutoSave, componentId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentSubmitTriggered event which occurs when a\n     * component is requesting student data to be submitted\n     */\n    this.$scope.$on('componentSubmitTriggered', (event, args) => {\n      if (args != null) {\n        const nodeId = args.nodeId;\n        const componentId = args.componentId;\n\n        if (nodeId != null && componentId != null) {\n          if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n            const isAutoSave = false;\n            const isSubmit = true;\n            this.createAndSaveComponentData(isAutoSave, componentId, isSubmit);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentStudentDataChanged event that will come from\n     * child component scopes\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentStudentDataChanged', (event, args) => {\n      /*\n       * the student data in one of our child scopes has changed so\n       * we will need to save\n       */\n      if (args != null) {\n        const componentId = args.componentId;\n        const componentState = args.componentState;\n        if (componentId != null && componentState != null) {\n          if (componentState.nodeId == null) {\n            if (args.nodeId != null) {\n              /*\n               * set the node id into the component state because\n               * the component state hasn't had it set at this\n               * point.\n               */\n              componentState.nodeId = args.nodeId;\n            }\n          }\n\n          if (componentState.componentId == null) {\n            if (args.componentId != null) {\n              /*\n               * set the component id into the component state\n               * because the component state hasn't had it set at\n               * this point.\n               */\n              componentState.componentId = args.componentId;\n            }\n          }\n\n          /*\n           * notify the parts that are connected that the student\n           * data has changed\n           */\n          this.notifyConnectedParts(componentId, componentState);\n          this.$scope.$broadcast('siblingComponentStudentDataChanged', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentDirty event that will come from child component\n     * scopes; notifies node that component has/doesn't have unsaved work\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentDirty', (event, args) => {\n      const componentId = args.componentId;\n      if (componentId) {\n        const isDirty = args.isDirty;\n        const index = this.dirtyComponentIds.indexOf(componentId);\n        if (isDirty && index === -1) {\n          this.dirtyComponentIds.push(componentId);\n        } else if (!isDirty && index > -1){\n          this.dirtyComponentIds.splice(index, 1);\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentSubmitDirty event that will come from child\n     * component scopes; notifies node that work has/has not changed for a\n     * component since last submission\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentSubmitDirty', (event, args) => {\n      const componentId = args.componentId;\n      if (componentId) {\n        const isDirty = args.isDirty;\n        const index = this.dirtySubmitComponentIds.indexOf(componentId);\n        if (isDirty && index === -1) {\n          this.dirtySubmitComponentIds.push(componentId);\n        } else if (!isDirty && index > -1){\n          this.dirtySubmitComponentIds.splice(index, 1);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the node. This will perform saving when the student exits\n     * the node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      const nodeToExit = args.nodeToExit;\n      /*\n       * make sure the node id of the node that is exiting is\n       * this node\n       */\n      if (nodeToExit.id === this.nodeId) {\n        this.stopAutoSaveInterval();\n\n        /*\n         * tell the parent that this node is done performing\n         * everything it needs to do before exiting\n         */\n        this.nodeUnloaded(this.nodeId);\n        if (this.NodeService.currentNodeHasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n          this.NodeService.evaluateTransitionLogic();\n        }\n      }\n    });\n\n    // load script for this node, if any\n    const script = this.nodeContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n  }\n\n  /**\n   * Create the tour bubbles for all of the rubrics for this node\n   */\n  createRubricTour() {\n    this.rubricTour = {\n      id: 'rubricTour',\n      arrowWidth: 12,\n      bubblePadding: 0,\n      bubbleWidth: 800,\n      container: '#content',\n      steps: [],\n      showPrevButton: true,\n      showNextButton: true,\n      scrollDuration: 400,\n      customRenderer: this.getRubricTemplate,\n      customData: {\n        $ctrl: this\n      },\n      i18n: {\n        nextBtn: this.$translate('NEXT'),\n        prevBtn: this.$translate('PREVIOUS'),\n        doneBtn: this.$translate('DONE'),\n        closeTooltip: this.$translate('CLOSE')\n      }\n    };\n\n    if (this.rubric) {\n      const thisTarget = '#nodeRubric_' + this.nodeId;\n\n      // add a tour bubble for the node rubric\n      this.rubricTour.steps.push(\n        {\n          target: thisTarget,\n          placement: 'bottom',\n          title: this.$translate('STEP_INFO'),\n          content: this.ProjectService.replaceAssetPaths(this.rubric),\n          xOffset: 'center',\n          arrowOffset: 'center',\n          onShow: this.onShowRubric,\n          viewed: false\n        }\n      );\n    }\n\n    // add tour bubbles for each of the component rubrics\n    const components = this.getComponents();\n    for (let component of components) {\n      if (component.rubric) {\n        const thisTarget = '#rubric_' + component.id;\n        this.rubricTour.steps.push(\n          {\n            target: thisTarget,\n            arrowOffset: 21,\n            placement: 'right',\n            yOffset: 1,\n            title: this.$translate('ITEM_INFO'),\n            content: this.ProjectService.replaceAssetPaths(component.rubric),\n            onShow: this.onShowRubric,\n            viewed: false\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the tour bubble for the rubric with the given componentId or nodeId\n   * @param id componentId or nodeId of rubric to show\n   */\n  showRubric(id) {\n    if (this.rubricTour) {\n      let step = -1;\n      let index = 0;\n\n      let thisTarget = '#nodeRubric_' + this.nodeId;\n      if (this.nodeId === id) {\n        step = index;\n      }\n\n      if (step < 0) {\n        if (this.rubric) {\n          index++;\n        }\n\n        const components = this.getComponents();\n        for (let component of components) {\n          if (component.rubric) {\n            thisTarget = '#rubric_' + component.id;\n            if (component.id === id) {\n              step = index;\n              break;\n            }\n            index++;\n          }\n        }\n      }\n\n      // end any currently running rubric tour\n      hopscotch.endTour(this.rubricTour);\n      // show the rubric tour starting with the step for the matched index\n      hopscotch.startTour(this.rubricTour, step);\n    }\n  }\n\n  scrollAndHighlightComponent(componentId) {\n    this.$timeout(() => {\n      const componentElement = $(\"#component_\" + componentId);\n      if (componentElement != null) {\n        const originalBackgroundColor = componentElement.css(\"backgroundColor\");\n        componentElement.css(\"background-color\", \"#FFFF9C\");\n        $('#content').animate({\n          scrollTop: componentElement.prop(\"offsetTop\")\n        }, 1000);\n\n        /*\n         * remove the background highlighting so that it returns\n         * to its original color\n         */\n        componentElement.css({\n          'transition': 'background-color 3s ease-in-out',\n          'background-color': originalBackgroundColor\n        });\n      }\n    }, 1000);\n  }\n\n  /**\n   * Create and return the custom template for the rubric tour bubbles\n   * @param details Object with the tour details\n   * @return HTML string\n   */\n  getRubricTemplate(details) {\n    const i18n = details.i18n;\n    const buttons = details.buttons;\n    const step = details.step;\n    const tour = details.tour;\n    const $ctrl = tour.customData.$ctrl;\n    const template =\n      `<div class=\"hopscotch-bubble-container help-bubble md-whiteframe-4dp\" style=\"width: ${ step.width }px; padding: ${ step.padding }px;\">\n                <md-toolbar class=\"md-subhead help-bubble__title md-toolbar--wise\">\n                    <div class=\"help-bubble___title__content\" layout=\"row\" layout-align=\"start center\" flex>\n                        <span>${ tour.isTour ? `${ i18n.stepNum } | ` : '' }${ step.title !== '' ? `${ step.title }` : '' }</span>\n                        <span flex></span>\n                        ${ buttons.showClose ? `<md-button class=\"md-icon-button hopscotch-close\">\n                            <md-icon aria-label=\"${ i18n.closeTooltip }\"> close </md-icon>\n                        </md-button>` : ''}\n                    </div>\n                </md-toolbar>\n                <div class=\"help-bubble__content\">\n                    ${ step.content  !== '' ? `${ step.content }` : '' }\n                    ${ buttons.showCTA ? `<md-button class=\"hopscotch-cta md-primary md-raised\">${ i18n.ctaLabel }</md-button>` : ''}\n                </div>\n                <md-divider></md-divider>\n                <div class=\"help-bubble__actions gray-lightest-bg\" layout=\"row\" layout-align=\"start center\">\n                    ${ buttons.showClose ? `<md-button class=\"button--small hopscotch-close\">${ i18n.closeTooltip }</md-button>` : ''}\n                    <span flex></span>\n                    ${ buttons.showPrev ? `<md-button class=\"button--small info hopscotch-prev\">${ i18n.prevBtn }</md-button>` : ''}\n                    ${ buttons.showNext ? `<md-button class=\"button--small info hopscotch-next\">${ i18n.nextBtn }</md-button>` : ''}\n                </md-card-actions>\n            </div>`;\n\n    // need to compile the template here because Hopscotch inserts raw html\n    const templateHTML = $ctrl.$compile(template)($ctrl.$scope)[0].outerHTML +\n      `<div class=\"hopscotch-bubble-arrow-container hopscotch-arrow\">\n                <div class=\"hopscotch-bubble-arrow-border\"></div>\n                <div class=\"hopscotch-bubble-arrow\"></div>\n            </div>`;\n    return templateHTML;\n  }\n\n  /**\n   * Callback for when a rubric tour bubble is shown\n   */\n  onShowRubric() {\n    // stop the pulsing animation on the info button for the rubric being shown\n    const index = hopscotch.getCurrStepNum();\n    hopscotch.getCurrTour().customData.$ctrl.rubricTour.steps[index].viewed = true;\n  }\n\n  /**\n   * The function that child component controllers will call to register\n   * themselves with this node\n   * @param childScope the child scope object\n   * @param component the component content for the component\n   */\n  registerComponentController(childScope, component) {\n    if (childScope != null && component != null) {\n      const componentId = component.id;\n      this.componentToScope[componentId] = childScope;\n    }\n  }\n\n  /**\n   * Populate the student work into the node\n   */\n  setStudentWork() {\n\n  };\n\n  /**\n   * Import work from another node\n   */\n  importWork() {\n\n  };\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions(componentId) {\n    const revisions = [];\n    const componentStates = this.StudentDataService\n        .getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n    return componentStates;\n  };\n\n  showRevisions($event, componentId, isComponentDisabled) {\n    const revisions = this.getRevisions(componentId);\n    const allowRevert = !isComponentDisabled;\n\n    const childScope = this.componentToScope[componentId];\n\n    // TODO: generalize for other controllers\n    let componentController = null;\n\n    if (childScope.openResponseController) {\n      componentController = childScope.openResponseController;\n    } else if (childScope.drawController) {\n      componentController = childScope.drawController;\n    }\n\n    this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n  };\n\n  /**\n   * Show student assets\n   * @param $event\n   * @param componentId\n   */\n  showStudentAssets($event, componentId) {\n    const childScope = this.componentToScope[componentId];\n\n    // TODO: generalize for other controllers\n    let componentController = null;\n\n    if (childScope.openResponseController) {\n      componentController = childScope.openResponseController;\n    } else if (childScope.drawController) {\n      componentController = childScope.drawController;\n    } else if (childScope.discussionController) {\n      componentController = childScope.discussionController;\n    } else if (childScope.tableController) {\n      componentController = childScope.tableController;\n    } else if (childScope.graphController) {\n      componentController = childScope.graphController;\n    }\n\n    this.$rootScope.$broadcast('showStudentAssets', {componentController: componentController, $event: $event});\n  }\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n    const isAutoSave = false;\n    this.createAndSaveComponentData(isAutoSave);\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // notify the child components that the submit button was clicked\n    this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n    const isAutoSave = false;\n    const isSubmit = true;\n    this.createAndSaveComponentData(isAutoSave, null, isSubmit);\n  };\n\n  /**\n   * Get the components for this node.\n   * @return an array that contains the content for the components.\n   * TODO: can we not return null? This will simplify code a lot\n   */\n  getComponents() {\n    let components = null;\n    if (this.nodeContent != null) {\n      components = this.nodeContent.components;\n    }\n    if (components != null && this.isDisabled) {\n      for (const component of components) {\n        component.isDisabled = true;\n      }\n    }\n    return components;\n  };\n\n  /**\n   * Get the component given the component id\n   * @param componentId the component id we want\n   * @return the component object with the given component id\n   */\n  getComponentById(componentId) {\n    if (componentId != null) {\n      const components = this.getComponents();\n      for (const tempComponent of components) {\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (tempComponentId === componentId) {\n            return tempComponent;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check if this node contains a given component id\n   * @param componentId the component id\n   * @returns whether this node contains the component\n   */\n  nodeContainsComponent(componentId) {\n    if (componentId != null) {\n      const components = this.getComponents();\n      for (const tempComponent of components) {\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (tempComponentId === componentId) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get the html template for the component\n   * @param componentType the component type\n   * @return the path to the html template for the component\n   */\n  getComponentTemplatePath(componentType) {\n    return this.NodeService.getComponentTemplatePath(componentType);\n  };\n\n  /**\n   * Check whether we need to show the save button\n   * @return whether to show the save button\n   */\n  showSaveButton() {\n    return this.nodeContent != null && this.nodeContent.showSaveButton;\n  };\n\n  /**\n   * Check whether we need to show the submit button\n   * @return whether to show the submit button\n   */\n  showSubmitButton() {\n    return this.nodeContent != null && this.nodeContent.showSubmitButton;\n  };\n\n  setSavedMessage(time) {\n    this.setSaveText(this.$translate('SAVED'), time);\n  }\n\n  setAutoSavedMessage(time) {\n    this.setSaveText(this.$translate('AUTO_SAVED'), time);\n  }\n\n  setSubmittedMessage(time) {\n    this.setSaveText(this.$translate('SUBMITTED'), time);\n  }\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveText(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  clearSaveText() {\n    this.setSaveText('', null);\n  }\n\n  /**\n   * Start the auto save interval for this node\n   */\n  startAutoSaveInterval() {\n    this.autoSaveIntervalId = setInterval(() => {\n      if (this.dirtyComponentIds.length) {\n        const isAutoSave = true;\n        this.createAndSaveComponentData(isAutoSave);\n      }\n    }, this.autoSaveInterval);\n  };\n\n  /**\n   * Stop the auto save interval for this node\n   */\n  stopAutoSaveInterval() {\n    clearInterval(this.autoSaveIntervalId);\n  };\n\n  /**\n   * Obtain the componentStates and annotations from the children and save them\n   * to the server\n   * @param isAutoSave whether the component states were auto saved\n   * @param componentId (optional) the component id of the component\n   * that triggered the save\n   * @param isSubmit (optional) whether this is a submit or not\n   * @returns a promise that will save all the component states for the step\n   * that needs saving\n   */\n  createAndSaveComponentData(isAutoSave, componentId, isSubmit) {\n    return this.createComponentStates(isAutoSave, componentId, isSubmit)\n        .then((componentStates) => {\n      let componentAnnotations = [];\n      let componentEvents = [];\n      let nodeStates = [];\n      if (this.UtilService.arrayHasNonNullElement(componentStates)) {\n        for (const componentState of componentStates) {\n          if (componentState != null) {\n            let annotations = componentState.annotations;\n            if (annotations != null) {\n              componentAnnotations = componentAnnotations.concat(annotations);\n            }\n            delete componentState.annotations;\n          }\n        }\n        return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations)\n            .then((savedStudentDataResponse) => {\n          if (savedStudentDataResponse) {\n            if (this.NodeService.currentNodeHasTransitionLogic()) {\n              if (this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n                this.NodeService.evaluateTransitionLogic();\n              }\n              if (this.NodeService.evaluateTransitionLogicOn('scoreChanged')) {\n                if (componentAnnotations != null && componentAnnotations.length > 0) {\n                  let evaluateTransitionLogic = false;\n                  for (const componentAnnotation of componentAnnotations) {\n                    if (componentAnnotation != null) {\n                      if (componentAnnotation.type === 'autoScore') {\n                        evaluateTransitionLogic = true;\n                      }\n                    }\n                  }\n                  if (evaluateTransitionLogic) {\n                    this.NodeService.evaluateTransitionLogic();\n                  }\n                }\n              }\n            }\n            const studentWorkList = savedStudentDataResponse.studentWorkList;\n            if (!componentId && studentWorkList && studentWorkList.length) {\n              const latestStudentWork = studentWorkList[studentWorkList.length - 1];\n              const serverSaveTime = latestStudentWork.serverSaveTime;\n              const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n              if (isAutoSave) {\n                this.setAutoSavedMessage(clientSaveTime);\n              } else if (isSubmit) {\n                this.setSubmittedMessage(clientSaveTime);\n              } else {\n                this.setSavedMessage(clientSaveTime);\n              }\n            } else {\n              this.clearSaveText();\n            }\n          }\n          return savedStudentDataResponse;\n        });\n      }\n    });\n  };\n\n  /**\n   * Loop through this node's components and get/create component states\n   * @param isAutoSave whether the component states were auto saved\n   * @param componentId (optional) the component id of the component\n   * that triggered the save\n   * @param isSubmit (optional) whether this is a submission or not\n   * @returns an array of promises that will return component states\n   */\n  createComponentStates(isAutoSave, componentId, isSubmit) {\n    let components = [];\n    let componentStatePromises = [];\n\n    if (componentId) {\n      let component = this.getComponentById(componentId);\n      if (component) {\n        components.push(component);\n      }\n    } else {\n      components = this.getComponents();\n    }\n\n    if (components.length) {\n      const runId = this.ConfigService.getRunId();\n      const periodId = this.ConfigService.getPeriodId();\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const nodeId = this.nodeId;\n\n      for (const component of components) {\n        if (component != null) {\n          const tempComponentId = component.id;\n          const componentType = component.type;\n\n          const childScope = this.componentToScope[tempComponentId];\n          if (childScope != null) {\n            if (childScope.getComponentState) {\n              const componentStatePromise =\n                  this.getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit);\n              componentStatePromises.push(componentStatePromise);\n            }\n          }\n        }\n      }\n    }\n\n    return this.$q.all(componentStatePromises);\n  };\n\n  /**\n   * Get the component state from the child scope\n   * @param childScope the child scope\n   * @param runId the run id\n   * @param periodId the period id\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @param componentId the component id that has triggered the save\n   * @param tempComponentId the component id of the component we are obtaining\n   * a component state for\n   * @param componentType the component type\n   * @param isAutoSave whether this save was triggered by an auto save\n   * @param isSubmit whether this save was triggered by a submit\n   */\n  getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit) {\n    return childScope.getComponentState(isSubmit).then((componentState) => {\n      if (componentState != null) {\n        componentState.runId = runId;\n        componentState.periodId = periodId;\n        componentState.workgroupId = workgroupId;\n        componentState.nodeId = this.nodeId;\n        componentState.componentId = tempComponentId;\n        componentState.componentType = componentType;\n\n        if (componentId == null) {\n          /*\n           * the node has triggered the save so all the components will\n           * either have isAutoSave set to true or false; if this is a\n           * submission, all the components will have isSubmit set to true\n           */\n          componentState.isAutoSave = isAutoSave;\n\n          if (isSubmit) {\n            /*\n             * set the isSubmit value in the component state if\n             * it wasn't set by the component\n             */\n            if (componentState.isSubmit == null) {\n              componentState.isSubmit = true;\n            }\n          }\n        } else {\n          /*\n           * a component has triggered the save so only that component will\n           * have isAutoSave set to false; if this is a submission,\n           * component will have isSubmit set to true\n           */\n\n          if (componentId === tempComponentId) {\n            componentState.isAutoSave = false;\n\n            if (isSubmit) {\n              /*\n               * set the isSubmit value in the component state if\n               * it wasn't set by the component\n               */\n              if (componentState.isSubmit == null) {\n                componentState.isSubmit = true;\n              }\n            }\n          }\n        }\n        return componentState;\n      }\n    });\n  }\n\n  /**\n   * Get the latest annotations for a given component\n   * TODO: move to a parent component class in the future?\n   * @param componentId the component's id\n   * @return object containing the component's latest score and comment annotations\n   */\n  getLatestComponentAnnotations(componentId) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n\n    let nodeId = this.nodeId;\n    let workgroupId = this.workgroupId;\n    latestScoreAnnotation = this.AnnotationService\n        .getLatestScoreAnnotation(nodeId, componentId, workgroupId, 'any');\n    latestCommentAnnotation = this.AnnotationService\n        .getLatestCommentAnnotation(nodeId, componentId, workgroupId, 'any');\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Notify any connected components that the student data has changed\n   * @param componentId the component id that has changed\n   * @param componentState the new component state\n   */\n  notifyConnectedParts(changedComponentId, componentState) {\n    if (changedComponentId != null && componentState != null) {\n      let components = this.getComponents();\n      if (components != null) {\n\n        /*\n         * loop through all the components and look for components\n         * that are listening for the given component id to change.\n         * only notify components that are listening for changes\n         * from the specific component id.\n         */\n        for (let tempComponent of components) {\n          if (tempComponent != null) {\n            let tempComponentId = tempComponent.id;\n            /*\n             * get the connected components that this component is\n             * listening for\n             */\n            let connectedComponents = tempComponent.connectedComponents;\n            if (connectedComponents != null) {\n              for (let connectedComponentParams of connectedComponents) {\n                if (connectedComponentParams != null) {\n                  let nodeId = connectedComponentParams.nodeId;\n                  let componentId = connectedComponentParams.componentId;\n\n                  /*\n                   * get the id which is the old field that we used to store\n                   * the component id in. this is here to maintain backwards\n                   * compatibility.\n                   */\n                  let id = connectedComponentParams.id;\n\n                  if (nodeId != null && componentId != null) {\n                    let connectedComponentId = componentId;\n                    let connectedNodeId = nodeId;\n                    if (connectedNodeId == this.nodeId && connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  } else if (componentId != null) {\n                    /*\n                     * the node id was not provided but the component id was provided\n                     * so we will assume the component id is in the current node\n                     */\n                    let connectedComponentId = componentId;\n                    if (connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  } else if (id != null) {\n                    /*\n                     * the node id and component id were not provided but the\n                     * id was provided which is the old field we used to set\n                     * the component id in. this is here to maintain backwards\n                     * compatibility.\n                     */\n                    let connectedComponentId = id;\n                    if (connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the student data for a specific part\n   * @param the componentId\n   * @return the student data for the given component\n   */\n  getComponentStateByComponentId(componentId) {\n    if (componentId != null) {\n      return this.StudentDataService\n          .getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n    }\n    return null;\n  };\n\n  /**\n   * Get the student data for a specific part\n   * @param the nodeId\n   * @param the componentId\n   * @return the student data for the given component\n   */\n  getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n    if (nodeId != null && componentId != null) {\n      return this.StudentDataService\n          .getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    }\n    return null;\n  };\n\n  nodeUnloaded(nodeId) {\n    hopscotch.endTour(this.rubricTour);\n    const isAutoSave = true;\n    this.createAndSaveComponentData(isAutoSave);\n    const componentId = null;\n    const componentType = null;\n    const category = \"Navigation\";\n    const event = \"nodeExited\";\n    const eventData = {};\n    eventData.nodeId = nodeId;\n    this.StudentDataService.saveVLEEvent(\n        nodeId, componentId, componentType, category, event, eventData);\n  };\n\n  /**\n   * Checks whether any of the node's components have unsubmitted work\n   * @return boolean whether or not there is unsubmitted work\n   */\n  getSubmitDirty() {\n    const components = this.getComponents();\n    if (components != null) {\n      for (let component of components) {\n        const componentId = component.id;\n        const latestState = this.getComponentStateByComponentId(componentId);\n        if (latestState && !latestState.isSubmit) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n    /**\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before exiting.\n     */\n    this.logOutListener = this.$scope.$on('exit', (event, args) => {\n\n      // stop the auto save interval for this node\n      this.stopAutoSaveInterval();\n\n      /*\n       * tell the parent that this node is done performing\n       * everything it needs to do before exiting\n       */\n      this.nodeUnloaded(this.nodeId);\n\n      // call this function to remove the listener\n      this.logOutListener();\n\n      /*\n       * tell the session service that this listener is done\n       * performing everything it needs to do before exiting\n       */\n      this.$rootScope.$broadcast('doneExiting');\n    });\n  };\n}\n\nNodeController.$inject = [\n  '$compile',\n  '$filter',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$state',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default NodeController;\n"]}