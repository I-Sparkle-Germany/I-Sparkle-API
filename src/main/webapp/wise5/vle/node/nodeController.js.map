{"version":3,"sources":["nodeController.es6"],"names":["NodeController","$compile","$filter","$q","$rootScope","$scope","$state","$timeout","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentDataService","UtilService","$translate","autoSaveInterval","nodeId","nodeContent","nodeStatus","nodeTitle","dirtyComponentIds","dirtySubmitComponentIds","submit","workgroupId","getWorkgroupId","teacherWorkgroupId","getTeacherWorkgroupId","componentToScope","saveMessage","text","time","rubric","mode","getMode","getCurrentNode","isApplicationNode","getCurrentNodeId","currentNode","id","getNodeById","getNodeTitleByNodeId","nodeStatuses","calculateDisabled","startAutoSaveInterval","registerExitListener","hasTransitionLogic","evaluateTransitionLogicOn","evaluateTransitionLogic","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","latestClientSaveTime","clientSaveTime","isSubmit","setSaveMessage","componentId","componentType","category","event","eventData","saveVLEEvent","createRubricTour","params","componentElement","$","originalBackgroundColor","css","animate","scrollTop","prop","$on","args","isAutoSave","nodeContainsComponent","createAndSaveComponentData","componentState","notifyConnectedParts","$broadcast","isDirty","index","indexOf","push","splice","nodeToExit","saveTriggeredBy","stopAutoSaveInterval","nodeUnloaded","script","retrieveScript","then","Function","call","rubricTour","arrowWidth","bubblePadding","bubbleWidth","container","steps","showPrevButton","showNextButton","scrollDuration","customRenderer","getRubricTemplate","customData","$ctrl","i18n","nextBtn","prevBtn","doneBtn","closeTooltip","thisTarget","target","placement","title","content","replaceAssetPaths","xOffset","arrowOffset","onShow","onShowRubric","viewed","components","getComponents","component","yOffset","step","hopscotch","endTour","startTour","details","buttons","tour","template","width","padding","isTour","stepNum","showClose","showCTA","ctaLabel","showPrev","showNext","templateHTML","outerHTML","getCurrStepNum","getCurrTour","childScope","revisions","componentStates","getComponentStatesByNodeIdAndComponentId","$event","isComponentDisabled","getRevisions","allowRevert","componentController","openResponseController","drawController","discussionController","tableController","graphController","lockAfterSubmit","getComponentStatesByNodeId","isSubmitted","isWorkSubmitted","isDisabled","tempComponent","tempComponentId","result","getComponentTemplatePath","showSaveButton","showSubmitButton","componentContent","message","autoSaveIntervalId","setInterval","length","clearInterval","createComponentStates","componentAnnotations","componentEvents","nodeStates","arrayHasNonNullElement","annotations","concat","saveToServer","savedStudentDataResponse","componentAnnotation","type","studentWorkList","latestStudentWork","serverSaveTime","convertToClientTimestamp","componentStatePromises","getComponentById","runId","getRunId","periodId","getPeriodId","getComponentState","componentStatePromise","getComponentStateFromChildScope","all","latestScoreAnnotation","latestCommentAnnotation","getLatestScoreAnnotation","getLatestCommentAnnotation","changedComponentId","connectedComponents","connectedComponentParams","connectedComponentId","connectedNodeId","connectedComponent","componentScope","handleConnectedComponentStudentDataChanged","submitDirty","latestState","getComponentStateByComponentId","logOutListener","$inject"],"mappings":"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","file":"nodeController.js","sourcesContent":["class NodeController {\n  constructor(\n      $compile,\n      $filter,\n      $q,\n      $rootScope,\n      $scope,\n      $state,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentDataService,\n      UtilService) {\n    this.$compile = $compile;\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$timeout = $timeout;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    // the auto save interval in milliseconds\n    this.autoSaveInterval = 60000;\n\n    // the node id of the current node\n    this.nodeId = null;\n    this.nodeContent = null;\n    this.nodeStatus = null;\n    this.nodeTitle = null;\n\n    // hold ids of dirty components\n    this.dirtyComponentIds = [];\n\n    // array to hold ids of components where student work has changed since last submission\n    this.dirtySubmitComponentIds = [];\n\n    // whether the student work has changed since last submit\n    this.submit = false;\n    this.workgroupId = this.ConfigService.getWorkgroupId();\n    this.teacherWorkgroupId = this.ConfigService.getTeacherWorkgroupId();\n\n    /*\n     * an object that holds the mappings with the key being the component\n     * and the value being the scope object from the child controller\n     */\n    this.componentToScope = {};\n\n    // message to show next to save/submit buttons\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    // the step rubric\n    this.rubric = null;\n\n    // get the mode e.g. 'preview', 'student', 'authoring', 'grading', etc.\n    this.mode = this.ConfigService.getMode();\n\n    // perform setup of this node only if the current node is not a group.\n    if (this.StudentDataService.getCurrentNode() && this.ProjectService.isApplicationNode(this.StudentDataService.getCurrentNodeId())) {\n      const currentNode = this.StudentDataService.getCurrentNode();\n      if (currentNode != null) {\n        this.nodeId = currentNode.id;\n      }\n\n      // get the node content\n      this.nodeContent = this.ProjectService.getNodeById(this.nodeId);\n\n      this.nodeTitle = this.ProjectService.getNodeTitleByNodeId(this.nodeId);\n\n      this.nodeStatus = this.StudentDataService.nodeStatuses[this.nodeId];\n\n      // populate the student work into this node\n      //this.setStudentWork();\n\n      // check if we need to lock this node\n      this.calculateDisabled();\n\n      //this.importWork();\n\n      // start the auto save interval\n      this.startAutoSaveInterval();\n\n      // register this controller to listen for the exit event\n      this.registerExitListener();\n\n      if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('enterNode')) {\n        this.NodeService.evaluateTransitionLogic();\n      }\n\n      // set save message with last save/submission\n      // for now, we'll use the latest component state (since we don't currently keep track of node-level saves)\n      // TODO: use node states once we implement node state saving\n      const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId);\n      if (latestComponentState) {\n        const latestClientSaveTime = latestComponentState.clientSaveTime;\n        if (latestComponentState.isSubmit) {\n          this.setSaveMessage(this.$translate('LAST_SUBMITTED'), latestClientSaveTime);\n        } else {\n          this.setSaveMessage(this.$translate('LAST_SAVED'), latestClientSaveTime);\n        }\n      }\n\n      // save nodeEntered event\n      const nodeId = this.nodeId;\n      const componentId = null;\n      const componentType = null;\n      const category = \"Navigation\";\n      const event = \"nodeEntered\";\n      const eventData = {};\n      eventData.nodeId = nodeId;\n      this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n      if (this.nodeContent != null) {\n        // get the step rubric\n        this.rubric = this.nodeContent.rubric;\n\n        // create the rubric tour bubbles\n        this.createRubricTour();\n      }\n\n      /*\n       * Check if the component id was provided in the state params. If\n       * it is provided, we will scroll to it and then briefly highlight\n       * it.\n       */\n      if (this.$state != null &&\n        this.$state.params != null &&\n        this.$state.params.componentId != null) {\n\n        // get the component id\n        const componentId = this.$state.params.componentId;\n\n        this.$timeout(() => {\n          // get the UI element of the component\n          const componentElement = $(\"#component_\" + componentId);\n\n          if (componentElement != null) {\n            // save the original background color\n            const originalBackgroundColor = componentElement.css(\"backgroundColor\");\n\n            // highlight the background briefly to draw attention to it\n            componentElement.css(\"background-color\", \"#FFFF9C\");\n\n            // scroll to the first new component that we've added\n            $('#content').animate({\n              scrollTop: componentElement.prop(\"offsetTop\")\n            }, 1000);\n\n            /*\n             * remove the background highlighting so that it returns\n             * to its original color\n             */\n            componentElement.css({\n              'transition': 'background-color 3s ease-in-out',\n              'background-color': originalBackgroundColor\n            });\n          }\n        }, 1000);\n      }\n    }\n\n    /**\n     * Listen for the componentSaveTriggered event which occurs when a\n     * component is requesting student data to be saved\n     */\n    this.$scope.$on('componentSaveTriggered', (event, args) => {\n      const isAutoSave = false;\n\n      if (args != null) {\n        const nodeId = args.nodeId;\n        const componentId = args.componentId;\n\n        if (nodeId != null && componentId != null) {\n          if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n            /*\n             * obtain the component states from the children and save them\n             * to the server\n             */\n            this.createAndSaveComponentData(isAutoSave, componentId);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentSubmitTriggered event which occurs when a\n     * component is requesting student data to be submitted\n     */\n    this.$scope.$on('componentSubmitTriggered', (event, args) => {\n      const isAutoSave = false;\n      const isSubmit = true;\n\n      if (args != null) {\n        const nodeId = args.nodeId;\n        const componentId = args.componentId;\n\n        if (nodeId != null && componentId != null) {\n          if (this.nodeId == nodeId && this.nodeContainsComponent(componentId)) {\n            /*\n             * obtain the component states from the children and save them\n             * to the server\n             */\n            this.createAndSaveComponentData(isAutoSave, componentId, isSubmit);\n          }\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentStudentDataChanged event that will come from\n     * child component scopes\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentStudentDataChanged', (event, args) => {\n      /*\n       * the student data in one of our child scopes has changed so\n       * we will need to save\n       */\n      if (args != null) {\n        const componentId = args.componentId;\n        const componentState = args.componentState;\n        if (componentId != null && componentState != null) {\n          if (componentState.nodeId == null) {\n            if (args.nodeId != null) {\n              /*\n               * set the node id into the component state because\n               * the component state hasn't had it set at this\n               * point.\n               */\n              componentState.nodeId = args.nodeId;\n            }\n          }\n\n          if (componentState.componentId == null) {\n\n            if (args.componentId != null) {\n              /*\n               * set the component id into the component state\n               * because the component state hasn't had it set at\n               * this point.\n               */\n              componentState.componentId = args.componentId;\n            }\n          }\n\n          /*\n           * notify the parts that are connected that the student\n           * data has changed\n           */\n          this.notifyConnectedParts(componentId, componentState);\n          this.$scope.$broadcast('siblingComponentStudentDataChanged', args);\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentDirty event that will come from child component\n     * scopes; notifies node that component has/doesn't have unsaved work\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentDirty', (event, args) => {\n      const componentId = args.componentId;\n      if (componentId) {\n        const isDirty = args.isDirty;\n        const index = this.dirtyComponentIds.indexOf(componentId);\n        if (isDirty && index === -1) {\n          // add component id to array of dirty components\n          this.dirtyComponentIds.push(componentId);\n        } else if (!isDirty && index > -1){\n          // remove component id from array of dirty components\n          this.dirtyComponentIds.splice(index, 1);\n        }\n      }\n    });\n\n    /**\n     * Listen for the componentSubmitDirty event that will come from child\n     * component scopes; notifies node that work has/has not changed for a\n     * component since last submission\n     * @param event\n     * @param args the arguments provided when the event is fired\n     */\n    this.$scope.$on('componentSubmitDirty', (event, args) => {\n      const componentId = args.componentId;\n      if (componentId) {\n        const isDirty = args.isDirty;\n        const index = this.dirtySubmitComponentIds.indexOf(componentId);\n        if (isDirty && index === -1) {\n          // add component id to array of dirty submit components\n          this.dirtySubmitComponentIds.push(componentId);\n        } else if (!isDirty && index > -1){\n          // remove component id from array of dirty submit components\n          this.dirtySubmitComponentIds.splice(index, 1);\n        }\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the node. This will perform saving when the student exits\n     * the node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      const nodeToExit = args.nodeToExit;\n      /*\n       * make sure the node id of the node that is exiting is\n       * this node\n       */\n      if (nodeToExit.id === this.nodeId) {\n        const saveTriggeredBy = 'exitNode';\n        this.stopAutoSaveInterval();\n\n        /*\n         * tell the parent that this node is done performing\n         * everything it needs to do before exiting\n         */\n        this.nodeUnloaded(this.nodeId);\n\n        // check if this node has transition logic that should be run when the student exits the node\n        if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('exitNode')) {\n          // this node has transition logic\n          this.NodeService.evaluateTransitionLogic();\n        }\n      }\n    });\n\n    // load script for this node, if any\n    const script = this.nodeContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n  }\n\n  /**\n   * Create the tour bubbles for all of the rubrics for this node\n   */\n  createRubricTour() {\n    this.rubricTour = {\n      id: 'rubricTour',\n      arrowWidth: 12,\n      bubblePadding: 0,\n      bubbleWidth: 800,\n      container: '#content',\n      steps: [],\n      showPrevButton: true,\n      showNextButton: true,\n      scrollDuration: 400,\n      customRenderer: this.getRubricTemplate,\n      customData: {\n        $ctrl: this\n      },\n      i18n: {\n        nextBtn: this.$translate('NEXT'),\n        prevBtn: this.$translate('PREVIOUS'),\n        doneBtn: this.$translate('DONE'),\n        closeTooltip: this.$translate('CLOSE')\n      }\n    };\n\n    if (this.rubric) {\n      const thisTarget = '#nodeRubric_' + this.nodeId;\n\n      // add a tour bubble for the node rubric\n      this.rubricTour.steps.push(\n        {\n          target: thisTarget,\n          placement: 'bottom',\n          title: this.$translate('STEP_INFO'),\n          content: this.ProjectService.replaceAssetPaths(this.rubric),\n          xOffset: 'center',\n          arrowOffset: 'center',\n          onShow: this.onShowRubric,\n          viewed: false\n        }\n      );\n    }\n\n    // add tour bubbles for each of the component rubrics\n    const components = this.getComponents();\n    for (let component of components) {\n      if (component.rubric) {\n        const thisTarget = '#rubric_' + component.id;\n        this.rubricTour.steps.push(\n          {\n            target: thisTarget,\n            arrowOffset: 21,\n            placement: 'right',\n            yOffset: 1,\n            title: this.$translate('ITEM_INFO'),\n            content: this.ProjectService.replaceAssetPaths(component.rubric),\n            onShow: this.onShowRubric,\n            viewed: false\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the tour bubble for the rubric with the given componentId or nodeId\n   * @param id componentId or nodeId of rubric to show\n   */\n  showRubric(id) {\n    if (this.rubricTour) {\n      let step = -1;\n      let index = 0;\n\n      let thisTarget = '#nodeRubric_' + this.nodeId;\n      if (this.nodeId === id) {\n        // the given id matches this nodeId\n        step = index;\n      }\n\n      if (step < 0) {\n        if (this.rubric) {\n          index++;\n        }\n\n        const components = this.getComponents();\n        for (let component of components) {\n          if (component.rubric) {\n            thisTarget = '#rubric_' + component.id;\n            if (component.id === id) {\n              // the given id matches the current componentId\n              step = index;\n              break;\n            }\n            index++;\n          }\n        }\n      }\n\n      // end any currently running rubric tour\n      hopscotch.endTour(this.rubricTour);\n      // show the rubric tour starting with the step for the matched index\n      hopscotch.startTour(this.rubricTour, step);\n    }\n  }\n\n  /**\n   * Create and return the custom template for the rubric tour bubbles\n   * @param details Object with the tour details\n   * @return HTML string\n   */\n  getRubricTemplate(details) {\n    const i18n = details.i18n;\n    const buttons = details.buttons;\n    const step = details.step;\n    const tour = details.tour;\n    const $ctrl = tour.customData.$ctrl;\n    const template =\n      `<div class=\"hopscotch-bubble-container help-bubble md-whiteframe-4dp\" style=\"width: ${ step.width }px; padding: ${ step.padding }px;\">\n                <md-toolbar class=\"md-subhead help-bubble__title md-toolbar--wise\">\n                    <div class=\"help-bubble___title__content\" layout=\"row\" layout-align=\"start center\" flex>\n                        <span>${ tour.isTour ? `${ i18n.stepNum } | ` : '' }${ step.title !== '' ? `${ step.title }` : '' }</span>\n                        <span flex></span>\n                        ${ buttons.showClose ? `<md-button class=\"md-icon-button hopscotch-close\">\n                            <md-icon aria-label=\"${ i18n.closeTooltip }\"> close </md-icon>\n                        </md-button>` : ''}\n                    </div>\n                </md-toolbar>\n                <div class=\"help-bubble__content\">\n                    ${ step.content  !== '' ? `${ step.content }` : '' }\n                    ${ buttons.showCTA ? `<md-button class=\"hopscotch-cta md-primary md-raised\">${ i18n.ctaLabel }</md-button>` : ''}\n                </div>\n                <md-divider></md-divider>\n                <div class=\"help-bubble__actions gray-lightest-bg\" layout=\"row\" layout-align=\"start center\">\n                    ${ buttons.showClose ? `<md-button class=\"button--small hopscotch-close\">${ i18n.closeTooltip }</md-button>` : ''}\n                    <span flex></span>\n                    ${ buttons.showPrev ? `<md-button class=\"button--small info hopscotch-prev\">${ i18n.prevBtn }</md-button>` : ''}\n                    ${ buttons.showNext ? `<md-button class=\"button--small info hopscotch-next\">${ i18n.nextBtn }</md-button>` : ''}\n                </md-card-actions>\n            </div>`;\n\n    // need to compile the template here because Hopscotch inserts raw html\n    const templateHTML = $ctrl.$compile(template)($ctrl.$scope)[0].outerHTML +\n      `<div class=\"hopscotch-bubble-arrow-container hopscotch-arrow\">\n                <div class=\"hopscotch-bubble-arrow-border\"></div>\n                <div class=\"hopscotch-bubble-arrow\"></div>\n            </div>`;\n    return templateHTML;\n  }\n\n  /**\n   * Callback for when a rubric tour bubble is shown\n   */\n  onShowRubric() {\n    // stop the pulsing animation on the info button for the rubric being shown\n    const index = hopscotch.getCurrStepNum();\n    hopscotch.getCurrTour().customData.$ctrl.rubricTour.steps[index].viewed = true;\n  }\n\n  /**\n   * The function that child component controllers will call to register\n   * themselves with this node\n   * @param childScope the child scope object\n   * @param component the component content for the component\n   */\n  registerComponentController(childScope, component) {\n    if (childScope != null && component != null) {\n      const componentId = component.id;\n      this.componentToScope[componentId] = childScope;\n    }\n  }\n\n  /**\n   * Populate the student work into the node\n   */\n  setStudentWork() {\n\n  };\n\n  /**\n   * Import work from another node\n   */\n  importWork() {\n\n  };\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions(componentId) {\n    const revisions = [];\n    const componentStates = this.StudentDataService\n        .getComponentStatesByNodeIdAndComponentId(this.nodeId, componentId);\n    return componentStates;\n  };\n\n  showRevisions($event, componentId, isComponentDisabled) {\n    const revisions = this.getRevisions(componentId);\n    const allowRevert = !isComponentDisabled;\n\n    const childScope = this.componentToScope[componentId];\n\n    // TODO: generalize for other controllers\n    let componentController = null;\n\n    if (childScope.openResponseController) {\n      componentController = childScope.openResponseController;\n    } else if (childScope.drawController) {\n      componentController = childScope.drawController;\n    }\n\n    this.$rootScope.$broadcast('showRevisions', {revisions: revisions, componentController: componentController, allowRevert: allowRevert, $event: $event});\n  };\n\n  /**\n   * Show student assets\n   * @param $event\n   * @param componentId\n   */\n  showStudentAssets($event, componentId) {\n    const childScope = this.componentToScope[componentId];\n\n    // TODO: generalize for other controllers\n    let componentController = null;\n\n    if (childScope.openResponseController) {\n      componentController = childScope.openResponseController;\n    } else if (childScope.drawController) {\n      componentController = childScope.drawController;\n    } else if (childScope.discussionController) {\n      componentController = childScope.discussionController;\n    } else if (childScope.tableController) {\n      componentController = childScope.tableController;\n    } else if (childScope.graphController) {\n      componentController = childScope.graphController;\n    }\n\n    this.$rootScope.$broadcast('showStudentAssets', {componentController: componentController, $event: $event});\n  };\n\n  /**\n   * Called when the student clicks the save button\n   */\n  saveButtonClicked() {\n    this.$rootScope.$broadcast('nodeSaveClicked', {nodeId: this.nodeId});\n\n    const isAutoSave = false;\n\n    /*\n     * obtain the component states from the children and save them\n     * to the server\n     */\n    this.createAndSaveComponentData(isAutoSave);\n  };\n\n  /**\n   * Called when the student clicks the submit button\n   */\n  submitButtonClicked() {\n    // notify the child components that the submit button was clicked\n    this.$rootScope.$broadcast('nodeSubmitClicked', {nodeId: this.nodeId});\n\n    const isAutoSave = false;\n    const isSubmit = true;\n\n    /*\n     * obtain the component states from the children and save them\n     * to the server\n     */\n    this.createAndSaveComponentData(isAutoSave, null, isSubmit);\n  };\n\n  /**\n   * Check if we need to lock the node\n   */\n  calculateDisabled() {\n    const nodeId = this.nodeId;\n    const nodeContent = this.nodeContent;\n\n    if (nodeContent) {\n      const lockAfterSubmit = nodeContent.lockAfterSubmit;\n      if (lockAfterSubmit) {\n        const componentStates = this.StudentDataService.getComponentStatesByNodeId(nodeId);\n        const isSubmitted = this.NodeService.isWorkSubmitted(componentStates);\n        if (isSubmitted) {\n          this.isDisabled = true;\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the components for this node.\n   * @return an array that contains the content for the components.\n   */\n  getComponents() {\n    let components = null;\n    if (this.nodeContent != null) {\n      components = this.nodeContent.components;\n    }\n\n    if (components != null && this.isDisabled) {\n      for (const component of components) {\n        component.isDisabled = true;\n      }\n    }\n\n    if (components != null && this.nodeContent.lockAfterSubmit) {\n      for (const component of components) {\n        component.lockAfterSubmit = true;\n      }\n    }\n    return components;\n  };\n\n  /**\n   * Get the component given the component id\n   * @param componentId the component id we want\n   * @return the component object with the given component id\n   */\n  getComponentById(componentId) {\n    let component = null;\n    if (componentId != null) {\n      const components = this.getComponents();\n      for (const tempComponent of components) {\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (tempComponentId === componentId) {\n            component = tempComponent;\n            break;\n          }\n        }\n      }\n    }\n    return component;\n  };\n\n  /**\n   * Check if this node contains a given component id\n   * @param componentId the component id\n   * @returns whether this node contains the component\n   */\n  nodeContainsComponent(componentId) {\n    let result = false;\n    if (componentId != null) {\n      const components = this.getComponents();\n      for (const tempComponent of components) {\n        if (tempComponent != null) {\n          const tempComponentId = tempComponent.id;\n          if (tempComponentId === componentId) {\n            result = true;\n            break;\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Get the html template for the component\n   * @param componentType the component type\n   * @return the path to the html template for the component\n   */\n  getComponentTemplatePath(componentType) {\n    return this.NodeService.getComponentTemplatePath(componentType);\n  };\n\n  /**\n   * Check whether we need to show the save button\n   * @return whether to show the save button\n   */\n  showSaveButton() {\n    let result = false;\n    if (this.nodeContent != null && this.nodeContent.showSaveButton) {\n      result = true;\n    }\n    return result;\n  };\n\n  /**\n   * Check whether we need to show the submit button\n   * @return whether to show the submit button\n   */\n  showSubmitButton() {\n    let result = false;\n    if (this.nodeContent != null && this.nodeContent.showSubmitButton) {\n      result = true;\n    }\n    return result;\n  };\n\n  /**\n   * Check whether we need to lock the component after the student\n   * submits an answer.\n   */\n  isLockAfterSubmit() {\n    let result = false;\n    if (this.componentContent != null) {\n      if (this.componentContent.lockAfterSubmit) {\n        result = true;\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Set the message next to the save button\n   * @param message the message to display\n   * @param time the time to display\n   */\n  setSaveMessage(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  };\n\n  /**\n   * Start the auto save interval for this node\n   */\n  startAutoSaveInterval() {\n    this.autoSaveIntervalId = setInterval(() => {\n      if (this.dirtyComponentIds.length) {\n        const isAutoSave = true;\n\n        /*\n         * obtain the component states from the children and save them\n         * to the server\n         */\n        this.createAndSaveComponentData(isAutoSave);\n      }\n    }, this.autoSaveInterval);\n  };\n\n  /**\n   * Stop the auto save interval for this node\n   */\n  stopAutoSaveInterval() {\n    clearInterval(this.autoSaveIntervalId);\n  };\n\n  /**\n   * Obtain the componentStates and annotations from the children and save them\n   * to the server\n   * @param isAutoSave whether the component states were auto saved\n   * @param componentId (optional) the component id of the component\n   * that triggered the save\n   * @param isSubmit (optional) whether this is a sumission or not\n   * @returns a promise that will save all the component states for the step\n   * that need saving\n   */\n  createAndSaveComponentData(isAutoSave, componentId, isSubmit) {\n    return this.createComponentStates(isAutoSave, componentId, isSubmit)\n        .then((componentStates) => {\n      let componentAnnotations = [];\n      let componentEvents = null;\n      let nodeStates = null;\n\n      if ((componentStates != null && this.UtilService.arrayHasNonNullElement(componentStates)) ||\n          (componentAnnotations != null && componentAnnotations.length) ||\n          (componentEvents != null && componentEvents.length)) {\n        for (const componentState of componentStates) {\n          if (componentState != null) {\n            let annotations = componentState.annotations;\n            if (annotations != null) {\n              /*\n               * add the annotations to our array of annotations that will\n               * be saved to the server\n               */\n              componentAnnotations = componentAnnotations.concat(annotations);\n            }\n            delete componentState.annotations;\n          }\n        }\n\n        return this.StudentDataService.saveToServer(componentStates, nodeStates, componentEvents, componentAnnotations).then((savedStudentDataResponse) => {\n          if (savedStudentDataResponse) {\n            // check if this node has transition logic that should be run when the student data changes\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('studentDataChanged')) {\n              // this node has transition logic\n              this.NodeService.evaluateTransitionLogic();\n            }\n\n            // check if this node has transition logic that should be run when the student score changes\n            if (this.NodeService.hasTransitionLogic() && this.NodeService.evaluateTransitionLogicOn('scoreChanged')) {\n              if (componentAnnotations != null && componentAnnotations.length > 0) {\n                let evaluateTransitionLogic = false;\n                for (const componentAnnotation of componentAnnotations) {\n                  if (componentAnnotation != null) {\n                    if (componentAnnotation.type === 'autoScore') {\n                      evaluateTransitionLogic = true;\n                    }\n                  }\n                }\n\n                if (evaluateTransitionLogic) {\n                  // the student score has changed so we will evaluate the transition logic\n                  this.NodeService.evaluateTransitionLogic();\n                }\n              }\n            }\n\n            const studentWorkList = savedStudentDataResponse.studentWorkList;\n            if (!componentId && studentWorkList && studentWorkList.length) {\n              // this was a step save or submission and student work was saved, so set save message\n              const latestStudentWork = studentWorkList[studentWorkList.length - 1];\n              const serverSaveTime = latestStudentWork.serverSaveTime;\n              const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n              if (isAutoSave) {\n                this.setSaveMessage(this.$translate('AUTO_SAVED'), clientSaveTime);\n              } else if (isSubmit) {\n                this.setSaveMessage(this.$translate('SUBMITTED'), clientSaveTime);\n              } else {\n                this.setSaveMessage(this.$translate('SAVED'), clientSaveTime);\n              }\n            } else {\n              this.setSaveMessage('', null);\n            }\n          }\n\n          return savedStudentDataResponse;\n        });\n      }\n    });\n  };\n\n  /**\n   * Loop through this node's components and get/create component states\n   * @param isAutoSave whether the component states were auto saved\n   * @param componentId (optional) the component id of the component\n   * that triggered the save\n   * @param isSubmit (optional) whether this is a submission or not\n   * @returns an array of promises that will return component states\n   */\n  createComponentStates(isAutoSave, componentId, isSubmit) {\n    let components = [];\n    let componentStatePromises = [];\n\n    if (componentId) {\n      let component = this.getComponentById(componentId);\n      if (component) {\n        components.push(component);\n      }\n    } else {\n      components = this.getComponents();\n    }\n\n    if (components.length) {\n      const runId = this.ConfigService.getRunId();\n      const periodId = this.ConfigService.getPeriodId();\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const nodeId = this.nodeId;\n\n      for (const component of components) {\n        if (component != null) {\n          const tempComponentId = component.id;\n          const componentType = component.type;\n\n          const childScope = this.componentToScope[tempComponentId];\n          if (childScope != null) {\n            if (childScope.getComponentState) {\n              const componentStatePromise =\n                  this.getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit);\n              componentStatePromises.push(componentStatePromise);\n            }\n          }\n        }\n      }\n    }\n\n    return this.$q.all(componentStatePromises);\n  };\n\n  /**\n   * Get the component state from the child scope\n   * @param childScope the child scope\n   * @param runId the run id\n   * @param periodId the period id\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @param componentId the component id that has triggered the save\n   * @param tempComponentId the component id of the component we are obtaining\n   * a component state for\n   * @param componentType the component type\n   * @param isAutoSave whether this save was triggered by an auto save\n   * @param isSubmit whether this save was triggered by a submit\n   */\n  getComponentStateFromChildScope(childScope, runId, periodId, workgroupId, nodeId, componentId, tempComponentId, componentType, isAutoSave, isSubmit) {\n    return childScope.getComponentState(isSubmit).then((componentState) => {\n      if (componentState != null) {\n        componentState.runId = runId;\n        componentState.periodId = periodId;\n        componentState.workgroupId = workgroupId;\n        componentState.nodeId = this.nodeId;\n        componentState.componentId = tempComponentId;\n        componentState.componentType = componentType;\n\n        if (componentId == null) {\n          /*\n           * the node has triggered the save so all the components will\n           * either have isAutoSave set to true or false; if this is a\n           * submission, all the components will have isSubmit set to true\n           */\n          componentState.isAutoSave = isAutoSave;\n\n          if (isSubmit) {\n            /*\n             * set the isSubmit value in the component state if\n             * it wasn't set by the component\n             */\n            if (componentState.isSubmit == null) {\n              componentState.isSubmit = true;\n            }\n          }\n        } else {\n          /*\n           * a component has triggered the save so only that component will\n           * have isAutoSave set to false; if this is a submission,\n           * component will have isSubmit set to true\n           */\n\n          if (componentId === tempComponentId) {\n            componentState.isAutoSave = false;\n\n            if (isSubmit) {\n              /*\n               * set the isSubmit value in the component state if\n               * it wasn't set by the component\n               */\n              if (componentState.isSubmit == null) {\n                componentState.isSubmit = true;\n              }\n            }\n          }\n        }\n        return componentState;\n      }\n    });\n  }\n\n  /**\n   * Get the latest annotations for a given component\n   * TODO: move to a parent component class in the future?\n   * @param componentId the component's id\n   * @return object containing the component's latest score and comment annotations\n   */\n  getLatestComponentAnnotations(componentId) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n\n    let nodeId = this.nodeId;\n    let workgroupId = this.workgroupId;\n    latestScoreAnnotation = this.AnnotationService\n        .getLatestScoreAnnotation(nodeId, componentId, workgroupId, 'any');\n    latestCommentAnnotation = this.AnnotationService\n        .getLatestCommentAnnotation(nodeId, componentId, workgroupId, 'any');\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Notify any connected components that the student data has changed\n   * @param componentId the component id that has changed\n   * @param componentState the new component state\n   */\n  notifyConnectedParts(changedComponentId, componentState) {\n    if (changedComponentId != null && componentState != null) {\n      let components = this.getComponents();\n      if (components != null) {\n\n        /*\n         * loop through all the components and look for components\n         * that are listening for the given component id to change.\n         * only notify components that are listening for changes\n         * from the specific component id.\n         */\n        for (let tempComponent of components) {\n          if (tempComponent != null) {\n            let tempComponentId = tempComponent.id;\n            /*\n             * get the connected components that this component is\n             * listening for\n             */\n            let connectedComponents = tempComponent.connectedComponents;\n            if (connectedComponents != null) {\n              for (let connectedComponentParams of connectedComponents) {\n                if (connectedComponentParams != null) {\n                  let nodeId = connectedComponentParams.nodeId;\n                  let componentId = connectedComponentParams.componentId;\n\n                  /*\n                   * get the id which is the old field that we used to store\n                   * the component id in. this is here to maintain backwards\n                   * compatibility.\n                   */\n                  let id = connectedComponentParams.id;\n\n                  if (nodeId != null && componentId != null) {\n                    let connectedComponentId = componentId;\n                    let connectedNodeId = nodeId;\n                    if (connectedNodeId == this.nodeId && connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  } else if (componentId != null) {\n                    /*\n                     * the node id was not provided but the component id was provided\n                     * so we will assume the component id is in the current node\n                     */\n                    let connectedComponentId = componentId;\n                    if (connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  } else if (id != null) {\n                    /*\n                     * the node id and component id were not provided but the\n                     * id was provided which is the old field we used to set\n                     * the component id in. this is here to maintain backwards\n                     * compatibility.\n                     */\n                    let connectedComponentId = id;\n                    if (connectedComponentId === changedComponentId) {\n                      let connectedComponent = this.getComponentById(connectedComponentId);\n                      let componentScope = this.componentToScope[tempComponentId];\n                      if (componentScope.handleConnectedComponentStudentDataChanged != null) {\n                        componentScope.handleConnectedComponentStudentDataChanged(connectedComponent, connectedComponentParams, componentState);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Get the student data for a specific part\n   * @param the componentId\n   * @return the student data for the given component\n   */\n  getComponentStateByComponentId(componentId) {\n    let componentState = null;\n    if (componentId != null) {\n      componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, componentId);\n    }\n    return componentState;\n  };\n\n  /**\n   * Get the student data for a specific part\n   * @param the nodeId\n   * @param the componentId\n   * @return the student data for the given component\n   */\n  getComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n    let componentState = null;\n    if (nodeId != null && componentId != null) {\n      componentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    }\n    return componentState;\n  };\n\n  nodeUnloaded(nodeId) {\n    hopscotch.endTour(this.rubricTour);\n    const isAutoSave = true;\n    this.createAndSaveComponentData(isAutoSave);\n    const componentId = null;\n    const componentType = null;\n    const category = \"Navigation\";\n    const event = \"nodeExited\";\n    const eventData = {};\n    eventData.nodeId = nodeId;\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n  };\n\n  /**\n   * Checks whether any of the node's components have unsubmitted work\n   * @return boolean whether or not there is unsubmitted work\n   */\n  getSubmitDirty() {\n    let submitDirty = false;\n    const components = this.getComponents();\n\n    if (components != null) {\n      for (let component of components) {\n        const componentId = component.id;\n        const latestState = this.getComponentStateByComponentId(componentId);\n        if (latestState && !latestState.isSubmit) {\n          submitDirty = true;\n          break;\n        }\n      }\n    }\n    return submitDirty;\n  };\n\n  /**\n   * Register the the listener that will listen for the exit event\n   * so that we can perform saving before exiting.\n   */\n  registerExitListener() {\n    /**\n     * Listen for the 'exit' event which is fired when the student exits\n     * the VLE. This will perform saving before exiting.\n     */\n    this.logOutListener = this.$scope.$on('exit', (event, args) => {\n\n      // stop the auto save interval for this node\n      this.stopAutoSaveInterval();\n\n      /*\n       * tell the parent that this node is done performing\n       * everything it needs to do before exiting\n       */\n      this.nodeUnloaded(this.nodeId);\n\n      // call this function to remove the listener\n      this.logOutListener();\n\n      /*\n       * tell the session service that this listener is done\n       * performing everything it needs to do before exiting\n       */\n      this.$rootScope.$broadcast('doneExiting');\n    });\n  };\n}\n\nNodeController.$inject = [\n  '$compile',\n  '$filter',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$state',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default NodeController;\n"]}