{"version":3,"sources":["notebookController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM;AAEF,aAFE,kBAEF,CAAY,SAAZ,EACY,UADZ,EAEY,MAFZ,EAGY,UAHZ,EAIY,aAJZ,EAKY,eALZ,EAMY,cANZ,EAOY,mBAPZ,EAQY,kBARZ,EAQgC;;;8BAV9B,oBAU8B;;AAC5B,aAAK,SAAL,GAAiB,SAAjB,CAD4B;AAE5B,aAAK,UAAL,GAAkB,UAAlB,CAF4B;AAG5B,aAAK,MAAL,GAAc,MAAd,CAH4B;AAI5B,aAAK,UAAL,GAAkB,UAAlB,CAJ4B;AAK5B,aAAK,aAAL,GAAqB,aAArB,CAL4B;AAM5B,aAAK,IAAL,GAAY,KAAK,aAAL,CAAmB,OAAnB,EAAZ,CAN4B;AAO5B,aAAK,eAAL,GAAuB,eAAvB,CAP4B;AAQ5B,aAAK,cAAL,GAAsB,cAAtB,CAR4B;AAS5B,aAAK,mBAAL,GAA2B,mBAA3B,CAT4B;AAU5B,aAAK,kBAAL,GAA0B,kBAA1B,CAV4B;;AAY5B,aAAK,QAAL,GAAgB,IAAhB,CAZ4B;AAa5B,aAAK,MAAL,GAAc,IAAd,CAb4B;AAc5B,aAAK,IAAL,GAAY,IAAZ,CAd4B;AAe5B,aAAK,cAAL,GAAsB,KAAK,eAAL,CAAqB,MAArB,CAfM;;AAiB5B,eAAO,GAAP,CAAW,iBAAX,EAA8B,UAAC,KAAD,EAAQ,IAAR,EAAiB;AAC3C,kBAAK,QAAL,GAAgB,KAAK,QAAL,CAD2B;SAAjB,CAA9B,CAjB4B;;AAqB5B,aAAK,cAAL,GAAsB,OAAO,GAAP,CAAW,QAAX,EAAqB,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACxD,kBAAK,cAAL,GADwD;AAExD,kBAAK,UAAL,CAAgB,UAAhB,CAA2B,wBAA3B,EAFwD;SAAjB,CAA3C;;;AArB4B,YA2BxB,CAAC,KAAK,aAAL,CAAmB,SAAnB,EAAD,EAAiC;AACjC,iBAAK,qBAAL,GADiC;SAArC;KAnCJ;;iBAFE;;yCA0Ce;AACb,mBAAO,KAAK,WAAL,CADM;;;;gDAIO;;;;AAEpB,iBAAK,mBAAL,CAAyB,cAAzB,GAA0C,IAA1C,CAA+C,UAAC,aAAD,EAAmB;AAC9D,uBAAK,eAAL,CAAqB,qBAArB,GAA6C,IAA7C,CAAkD,UAAC,QAAD,EAAc;AAC5D,2BAAK,QAAL,GAAgB,QAAhB,CAD4D;iBAAd,CAAlD,CAD8D;aAAnB,CAA/C,CAFoB;;;;2CASL,cAAc;AAC7B,kBAAM,yDAAN;;;;;;;;AAD6B;;;mCAWtB,MAAM;AACb,iBAAK,eAAL,CAAqB,UAArB,CAAgC,IAAhC,EADa;;;;iCAIR,IAAI,QAAQ;AACjB,iBAAK,eAAL,CAAqB,QAArB,CAA8B,EAA9B,EAAkC,MAAlC,EADiB;;;;6CAIA,QAAQ,cAAc;AACvC,iBAAK,oBAAL,GAA4B,YAA5B,CADuC;;;;sDAIb,QAAQ,cAAc;AAChD,iBAAK,mBAAL,CAAyB,6BAAzB,CAAuD,YAAvD,EADgD;AAEhD,iBAAK,oBAAL,GAA4B,IAA5B;;AAFgD,kBAIhD,CAAO,eAAP;AAJgD;;;WA9ElD;;;AAsFN,mBAAmB,OAAnB,GAA6B,CACzB,WADyB,EAEzB,YAFyB,EAGzB,QAHyB,EAIzB,YAJyB,EAKzB,eALyB,EAMzB,iBANyB,EAOzB,gBAPyB,EAQzB,qBARyB,EASzB,oBATyB,CAA7B;;kBAYe","file":"notebookController.js","sourcesContent":["'use strict';\n\nclass NotebookController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.mode = this.ConfigService.getMode();\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        this.notebook = null;\n        this.itemId = null;\n        this.item = null;\n        this.notebookConfig = this.NotebookService.config;\n\n        $scope.$on('notebookUpdated', (event, args) => {\n            this.notebook = args.notebook;\n        });\n\n        this.logOutListener = $scope.$on('logOut', (event, args) => {\n            this.logOutListener();\n            this.$rootScope.$broadcast('componentDoneUnloading');\n        });\n\n        // retrieve assets when notebook is opened\n        if (!this.ConfigService.isPreview()) {\n            this.retrieveNotebookItems();\n        }\n    }\n\n    getTemplateUrl() {\n        return this.templateUrl;\n    }\n\n    retrieveNotebookItems() {\n        // fetch all assets first because a subset of it will be referenced by a notebook item\n        this.StudentAssetService.retrieveAssets().then((studentAssets) => {\n            this.NotebookService.retrieveNotebookItems().then((notebook) => {\n                this.notebook = notebook;\n            });\n        });\n    }\n\n    deleteStudentAsset(studentAsset) {\n        alert('delete student asset from note book not implemented yet');\n        /*\n         StudentAssetService.deleteAsset(studentAsset).then(angular.bind(this, function(deletedStudentAsset) {\n         // remove studentAsset\n         this.studentAssets.splice(this.studentAssets.indexOf(deletedStudentAsset), 1);\n         this.calculateTotalUsage();\n         }));\n         */\n    }\n\n    deleteItem(item) {\n        this.NotebookService.deleteItem(item);\n    }\n\n    editItem(ev, itemId) {\n        this.NotebookService.editItem(ev, itemId);\n    }\n\n    notebookItemSelected($event, notebookItem) {\n        this.selectedNotebookItem = notebookItem;\n    }\n\n    attachNotebookItemToComponent($event, notebookItem) {\n        this.componentController.attachNotebookItemToComponent(notebookItem);\n        this.selectedNotebookItem = null;  // reset selected notebook item\n        // TODO: add some kind of unobtrusive confirmation to let student know that the notebook item has been added to current component\n        $event.stopPropagation();  // prevents parent notebook list item from getting the onclick event so this item won't be re-selected.\n    }\n}\n\nNotebookController.$inject = [\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$translate\",\n    \"ConfigService\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\"\n];\n\nexport default NotebookController;\n"]}