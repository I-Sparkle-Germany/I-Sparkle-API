{"version":3,"sources":["notebookController.es6"],"names":[],"mappings":"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","file":"notebookController.js","sourcesContent":["\"use strict\";\n\nclass NotebookController {\n    constructor($injector,\n                $rootScope,\n                $scope,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n\n        this.notebook = null;\n        this.itemId = null;\n        this.item = null;\n        this.itemSource = false;\n        this.applicationNodes = ProjectService.getApplicationNodes();\n\n        $scope.$on('notebookUpdated', (event, args) => {\n            this.notebook = args.notebook;\n        });\n\n        this.logOutListener = $scope.$on('logOut', (event, args) => {\n            this.logOutListener();\n            this.$rootScope.$broadcast('componentDoneUnloading');\n        });\n\n\n        // retrieve assets when notebook is opened\n        this.retrieveNotebookItems();\n    }\n\n    getTemplateUrl() {\n        return this.templateUrl;\n    };\n\n    retrieveNotebookItems() {\n        // fetch all assets first because a subset of it will be referenced by a notebook item\n        this.StudentAssetService.retrieveAssets().then((studentAssets) => {\n            this.NotebookService.retrieveNotebookItems().then((notebook) => {\n                this.notebook = notebook;\n            });\n        });\n    };\n\n    uploadStudentAssetNotebookItems(files) {\n        if (files != null) {\n            for (var f = 0; f < files.length; f++) {\n                var file = files[f];\n                this.NotebookService.uploadStudentAssetNotebookItem(file);\n            }\n        }\n    };\n\n    deleteStudentAsset(studentAsset) {\n        alert('delete student asset from note book not implemented yet');\n        /*\n         StudentAssetService.deleteAsset(studentAsset).then(angular.bind(this, function(deletedStudentAsset) {\n         // remove studentAsset\n         this.studentAssets.splice(this.studentAssets.indexOf(deletedStudentAsset), 1);\n         this.calculateTotalUsage();\n         }));\n         */\n    };\n\n    deleteItem(item) {\n        this.NotebookService.deleteItem(item);\n    };\n\n    notebookItemSelected($event, notebookItem) {\n        this.selectedNotebookItem = notebookItem;\n    };\n\n    attachNotebookItemToComponent($event, notebookItem) {\n        this.componentController.attachNotebookItemToComponent(notebookItem);\n        this.selectedNotebookItem = null;  // reset selected notebook item\n        // TODO: add some kind of unobtrusive confirmation to let student know that the notebook item has been added to current component\n        $event.stopPropagation();  // prevents parent notebook list item from getting the onclick event so this item won't be re-selected.\n    };\n\n    notebookItemDragStartCallback(event, ui, notebookItem) {\n        //$(ui.helper.context).data('objectType', 'NotebookItem');\n        //$(ui.helper.context).data('objectData', notebookItem);\n    };\n\n    myWorkDragStartCallback(event, ui, nodeId, nodeType) {\n        //$(ui.helper.context).data('importType', 'NodeState');\n        //$(ui.helper.context).data('importWorkNodeState', StudentDataService.getLatestNodeStateByNodeId(nodeId));\n        //$(ui.helper.context).data('importWorkNodeType', nodeType);\n    };\n\n    log() {\n    };\n\n    getLatestNodeStateByNodeId(nodeId) {\n        return this.StudentDataService.getLatestNodeStateByNodeId(nodeId);\n    };\n\n    showStudentWorkByNodeId(nodeId, nodeType) {\n        var result = null;\n\n        if (nodeId != null && nodeType != null) {\n            var childService = this.$injector.get(nodeType + 'Service');\n\n            if (childService != null) {\n                var latestNodeState = this.StudentDataService.getLatestNodeStateByNodeId(nodeId);\n                var studentWorkHTML = this.childService.getStudentWorkAsHTML(latestNodeState);\n                result = studentWorkHTML;\n            }\n        }\n        return result;\n    };\n\n}\n\nNotebookController.$inject = [\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\"\n];\n\nexport default NotebookController;"]}