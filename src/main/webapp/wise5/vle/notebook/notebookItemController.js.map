{"version":3,"sources":["notebookItemController.es6"],"names":[],"mappings":"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","file":"notebookItemController.js","sourcesContent":["'use strict';\n\nclass NotebookItemController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.mode = this.ConfigService.getMode();\n\n        if (this.itemId == null) {\n            let currentNodeId = this.StudentDataService.getCurrentNodeId();\n            let currentNodeTitle = this.ProjectService.getNodeTitleByNodeId(currentNodeId);\n\n            this.item = {\n                id: null,       // null id means we're creating a new notebook item.\n                localNotebookItemId: this.UtilService.generateKey(10),   // Id that is common across the same notebook item revisions.\n                type: \"note\", // the notebook item type, TODO: once questions are enabled, don't hard code\n                nodeId: currentNodeId, // Id of the node this note was created on\n                title: \"Note from \" + currentNodeTitle,  // Title of the node this note was created on\n                content: {\n                    text: \"\",\n                    attachments: []\n                }\n            };\n        } else {\n            this.item = this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(this.itemId);\n            this.item.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n        }\n\n        // set the type in the controller\n        this.type = this.item ? this.item.type : null;\n\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        this.label = this.notebookConfig.itemTypes[this.type].label;\n\n        if ($scope.$parent.file != null) {\n            // student is trying to add a file to this notebook item.\n            var files = [$scope.$parent.file];  // put the file into an array\n\n            this.attachStudentAssetToNote(files);\n        }\n\n        this.showUpload = this.mode !== 'preview' && (this.item.content.attachments != null && !this.item.content.attachments.length);\n    }\n\n    attachStudentAssetToNote(files) {\n        if (files != null) {\n            for (let f = 0; f < files.length; f++) {\n                let file = files[f];\n                // create a temporary attachment object\n                let attachment = {\n                    studentAssetId: null,\n                    iconURL: \"\",\n                    file: file  // add the file for uploading in the future\n                };\n                this.item.content.attachments.push(attachment);\n                // read image data as URL and set it in the temp attachment src attribute so students can preview the image\n                let reader = new FileReader();\n                reader.onload = (event) => {\n                    attachment.iconURL = event.target.result;\n                };\n                reader.readAsDataURL(file);\n                this.update();\n            }\n        }\n    }\n\n    getItemNodeId() {\n        if (this.item == null) {\n            return null;\n        } else {\n            return this.item.nodeId;\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position link\n     */\n    getItemNodeLink() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position\n     */\n    getItemNodePosition() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionById(this.item.nodeId);\n        }\n    }\n\n    getTemplateUrl() {\n        return this.ProjectService.getThemePath() + '/notebook/notebookItem.html';\n    }\n\n    doSelect(ev) {\n        if (this.onSelect) {\n            this.onSelect({$ev: ev, $itemId: this.item.localNotebookItemId});\n        }\n    }\n\n    removeAttachment(attachment) {\n        if (this.item.content.attachments.indexOf(attachment) != -1) {\n            this.item.content.attachments.splice(this.item.content.attachments.indexOf(attachment), 1);\n            this.update();\n        }\n    }\n\n    update() {\n        // update local notebook item\n        this.item.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n        this.onUpdate({item: this.item});\n    }\n\n    delete(ev) {\n        // TODO: add archiving/deleting notebook items\n    }\n}\n\nNotebookItemController.$inject = [\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$translate\",\n    \"ConfigService\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\",\n    \"UtilService\"\n];\n\nexport default NotebookItemController;\n"]}