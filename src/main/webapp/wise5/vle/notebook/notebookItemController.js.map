{"version":3,"sources":["notebookItemController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM,sB;AAEF,oCAAY,SAAZ,EACY,UADZ,EAEY,MAFZ,EAGY,UAHZ,EAIY,aAJZ,EAKY,eALZ,EAMY,cANZ,EAOY,mBAPZ,EAQY,kBARZ,EASY,WATZ,EASyB;AAAA;;AAAA;;AACrB,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,UAAL,GAAkB,UAAlB;AACA,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,eAAL,GAAuB,eAAvB;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,mBAAL,GAA2B,mBAA3B;AACA,aAAK,kBAAL,GAA0B,kBAA1B;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,IAAL,GAAY,KAAK,aAAL,CAAmB,OAAnB,EAAZ;;AAEA,aAAK,IAAL,GAAY,KAAK,eAAL,CAAqB,0CAArB,CAAgE,KAAK,MAArE,CAAZ;AACA,aAAK,IAAL,CAAU,EAAV,GAAe,IAAf,CAdqB,CAcA;;AAErB;AACA,aAAK,IAAL,GAAY,KAAK,IAAL,GAAY,KAAK,IAAL,CAAU,IAAtB,GAA6B,IAAzC;;AAEA,aAAK,cAAL,GAAsB,KAAK,eAAL,CAAqB,iBAArB,EAAtB;AACA,aAAK,KAAL,GAAa,KAAK,cAAL,CAAoB,SAApB,CAA8B,KAAK,IAAnC,EAAyC,KAAtD;;AAEA,aAAK,UAAL,CAAgB,GAAhB,CAAoB,iBAApB,EAAuC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACpD,gBAAI,WAAW,KAAK,QAApB;AACA,kBAAK,IAAL,GAAY,SAAS,KAAT,CAAe,MAAK,MAApB,EAA4B,IAA5B,EAAZ;AACH,SAHD;AAIH;;;;wCAEe;AACZ,gBAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACnB,uBAAO,IAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAK,IAAL,CAAU,MAAjB;AACH;AACJ;;AAED;;;;;;0CAGkB;AACd,gBAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACnB,uBAAO,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAK,cAAL,CAAoB,+BAApB,CAAoD,KAAK,IAAL,CAAU,MAA9D,CAAP;AACH;AACJ;;AAED;;;;;;8CAGsB;AAClB,gBAAI,KAAK,IAAL,IAAa,IAAjB,EAAuB;AACnB,uBAAO,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,KAAK,cAAL,CAAoB,mBAApB,CAAwC,KAAK,IAAL,CAAU,MAAlD,CAAP;AACH;AACJ;;;yCAEgB;AACb,mBAAO,KAAK,cAAL,CAAoB,YAApB,KAAqC,6BAA5C;AACH;;;iCAEQ,E,EAAI;AACT,gBAAI,KAAK,QAAT,EAAmB;AACf,qBAAK,QAAL,CAAc,EAAC,KAAK,EAAN,EAAU,SAAS,KAAK,IAAL,CAAU,mBAA7B,EAAd;AACH;AACJ;;;gCAEM,E,EAAI;AACP;AACH;;;;;;AAGL,uBAAuB,OAAvB,GAAiC,CAC7B,WAD6B,EAE7B,YAF6B,EAG7B,QAH6B,EAI7B,YAJ6B,EAK7B,eAL6B,EAM7B,iBAN6B,EAO7B,gBAP6B,EAQ7B,qBAR6B,EAS7B,oBAT6B,EAU7B,aAV6B,CAAjC;;kBAae,sB","file":"notebookItemController.js","sourcesContent":["'use strict';\n\nclass NotebookItemController {\n\n    constructor($injector,\n                $rootScope,\n                $scope,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                StudentAssetService,\n                StudentDataService,\n                UtilService) {\n        this.$injector = $injector;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.StudentAssetService = StudentAssetService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n        this.mode = this.ConfigService.getMode();\n\n        this.item = this.NotebookService.getLatestNotebookItemByLocalNotebookItemId(this.itemId);\n        this.item.id = null; // set to null so we're creating a new notebook item. An edit to a notebook item results in a new entry in the db.\n\n        // set the type in the controller\n        this.type = this.item ? this.item.type : null;\n\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        this.label = this.notebookConfig.itemTypes[this.type].label;\n\n        this.$rootScope.$on('notebookUpdated', (event, args) => {\n            let notebook = args.notebook;\n            this.item = notebook.items[this.itemId].last();\n        });\n    }\n\n    getItemNodeId() {\n        if (this.item == null) {\n            return null;\n        } else {\n            return this.item.nodeId;\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position link\n     */\n    getItemNodeLink() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n        }\n    }\n\n    /**\n     * Returns this NotebookItem's position\n     */\n    getItemNodePosition() {\n        if (this.item == null) {\n            return \"\";\n        } else {\n            return this.ProjectService.getNodePositionById(this.item.nodeId);\n        }\n    }\n\n    getTemplateUrl() {\n        return this.ProjectService.getThemePath() + '/notebook/notebookItem.html';\n    }\n\n    doSelect(ev) {\n        if (this.onSelect) {\n            this.onSelect({$ev: ev, $itemId: this.item.localNotebookItemId});\n        }\n    }\n\n    delete(ev) {\n        // TODO: add archiving/deleting notebook items\n    }\n}\n\nNotebookItemController.$inject = [\n    \"$injector\",\n    \"$rootScope\",\n    \"$scope\",\n    \"$translate\",\n    \"ConfigService\",\n    \"NotebookService\",\n    \"ProjectService\",\n    \"StudentAssetService\",\n    \"StudentDataService\",\n    \"UtilService\"\n];\n\nexport default NotebookItemController;\n"]}