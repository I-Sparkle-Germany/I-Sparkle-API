{"version":3,"sources":["notebookItemReportController.es6"],"names":["NotebookItemReportController","$injector","$mdBottomSheet","$rootScope","$scope","$translate","ConfigService","NotebookService","ProjectService","StudentAssetService","StudentDataService","mode","getMode","dirty","autoSaveInterval","saveMessage","text","time","reportItem","getLatestNotebookReportItemByReportId","reportId","serverSaveTime","clientSaveTime","convertToClientTimestamp","setSaveMessage","getTemplateReportItemByReportId","id","notebookConfig","getNotebookConfig","label","itemTypes","report","summernoteOptions","toolbar","popover","image","customButton","buttonText","tooltip","buttonClass","action","$event","addNotebookItemContent","disableDragAndDrop","toolbarContainer","callbacks","onBlur","$","summernote","$watch","content","newValue","oldValue","startAutoSaveInterval","item","nodeId","getNodePositionAndTitleByNodeId","templateUrl","ev","notebookItems","notebook","items","themePath","reportTextareaCursorPosition","angular","element","prop","$reportElement","show","parent","document","body","locals","controller","NotebookItemChooserController","chooseNotebookItem","notebookItem","$item","css","attachments","a","length","notebookItemAttachment","$img","iconURL","addClass","append","$caption","hide","$inject","stopAutoSaveInterval","autoSaveIntervalId","setInterval","saveNotebookReportItem","clearInterval","Date","parse","saveNotebookItem","localNotebookItemId","type","title","then","result","distance","elem","edge","scrollBarWidth","clientWidth","querySelector","outerWidth","find","message"],"mappings":"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","file":"notebookItemReportController.js","sourcesContent":["'use strict';\n\nclass NotebookItemReportController {\n\n    constructor($injector,\n        $mdBottomSheet,\n        $rootScope,\n        $scope,\n        $translate,\n        ConfigService,\n        NotebookService,\n        ProjectService,\n        StudentAssetService,\n        StudentDataService) {\n            this.$injector = $injector;\n            this.$mdBottomSheet = $mdBottomSheet;\n            this.$rootScope = $rootScope;\n            this.$scope = $scope;\n            this.$translate = $translate;\n            this.ConfigService = ConfigService;\n            this.NotebookService = NotebookService;\n            this.ProjectService = ProjectService;\n            this.StudentAssetService = StudentAssetService;\n            this.StudentDataService = StudentDataService;\n            this.mode = this.ConfigService.getMode();\n\n            this.dirty = false;\n\n            this.autoSaveInterval = 60000;  // the auto save interval in milliseconds\n\n            this.saveMessage = {\n                text: '',\n                time: ''\n            };\n\n            this.reportItem = this.NotebookService.getLatestNotebookReportItemByReportId(this.reportId);\n            if (this.reportItem) {\n                let serverSaveTime = this.reportItem.serverSaveTime;\n                let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n                this.setSaveMessage('Last saved', clientSaveTime);\n            } else {\n                // Student doesn't have work for this report yet, so we'll use the template.\n                this.reportItem = this.NotebookService.getTemplateReportItemByReportId(this.reportId);\n                if (this.reportItem == null) {\n                    // if there is no template, don't allow student to work on the report.\n                    return;\n                } else {\n                }\n            }\n            this.reportItem.id = null;  // set the id to null so it can be inserted as initial version, as opposed to updated. this is true for both new and just-loaded reports.\n\n            this.notebookConfig = this.NotebookService.getNotebookConfig();\n            this.label = this.notebookConfig.itemTypes.report.label;\n\n            // summernote editor options\n            this.summernoteOptions = {\n                toolbar: [\n                    ['edit',['undo','redo']],\n                    ['style', ['bold', 'italic', 'underline'/*, 'superscript', 'subscript', 'strikethrough', 'clear'*/]],\n                    //['style', ['style']],\n                    //['fontface', ['fontname']],\n                    //['textsize', ['fontsize']],\n                    //['fontclr', ['color']],\n                    ['para', ['ul', 'ol', 'paragraph'/*, 'lineheight'*/]],\n                    //['height', ['height']],\n                    //['table', ['table']],\n                    //['insert', ['link','picture','video','hr']],\n                    //['view', ['fullscreen', 'codeview']],\n                    //['help', ['help']]\n                    ['customButton', ['customButton']]\n                    //['print', ['print']]\n                ],\n                popover: {\n                    image: [\n                        ['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']],\n                        //['float', ['floatLeft', 'floatRight', 'floatNone']],\n                        ['remove', ['removeMedia']]\n                    ]\n                },\n                customButton: {\n                    buttonText: 'Add ' + this.notebookConfig.label + ' Item +',\n                    tooltip: 'Insert from ' + this.notebookConfig.label,\n                    buttonClass: 'accent-1 notebook-item--report__add-note',\n                    action: ($event) => {\n                        this.addNotebookItemContent($event);\n                    }\n                },\n                disableDragAndDrop: true,\n                toolbarContainer: '#' + this.reportId + '-toolbar',\n                callbacks: {\n                    onBlur: function() {\n                        $(this).summernote('saveRange');\n                    }\n                }\n            }\n\n            this.$scope.$watch(() => {\n                return this.reportItem.content.content;\n            }, (newValue, oldValue) => {\n                if (newValue !== oldValue) {\n                    this.dirty = true;\n                }\n            });\n\n            // start the auto save interval\n            this.startAutoSaveInterval();\n        }\n\n        getItemNodeId() {\n            if (this.item == null) {\n                return null;\n            } else {\n                return this.item.nodeId;\n            }\n        }\n\n        /**\n        * Returns this NotebookItem's position and title.\n        */\n        getItemNodePositionAndTitle() {\n            if (this.item == null) {\n                return \"\";\n            } else {\n                return this.ProjectService.getNodePositionAndTitleByNodeId(this.item.nodeId);\n            }\n        }\n\n        getTemplateUrl() {\n            return this.templateUrl;\n        }\n\n        addNotebookItemContent(ev) {\n            let notebookItems = this.NotebookService.notebook.items;\n            let templateUrl = this.themePath + '/notebook/notebookItemChooser.html';\n            let reportTextareaCursorPosition = angular.element('textarea.report').prop(\"selectionStart\"); // insert the notebook item at the cursor position later\n            let $reportElement = $('#' + this.reportId);\n\n            this.$mdBottomSheet.show({\n                parent: angular.element(document.body),\n                templateUrl: templateUrl,\n                locals: {\n                    notebookItems: notebookItems,\n                    reportItem: this.reportItem,\n                    reportTextareaCursorPosition: reportTextareaCursorPosition,\n                    themePath: this.themePath,\n                    notebookConfig: this.notebookConfig\n                },\n                controller: 'GridBottomSheetCtrl',\n                controller: NotebookItemChooserController,\n                controllerAs: 'notebookItemChooserController',\n                bindToController: true\n            });\n\n            function NotebookItemChooserController($rootScope, $mdBottomSheet, $scope, notebookItems, reportItem, reportTextareaCursorPosition, themePath) {\n                $scope.notebookItems = notebookItems;\n                $scope.reportItem = reportItem;\n                $scope.reportTextareaCursorPosition = reportTextareaCursorPosition;\n                $scope.themePath = themePath;\n                $scope.chooseNotebookItem = (notebookItem) => {\n                    //let notebookItemHTML = '<notebook-item item-id=\"\\'' + notebookItem.localNotebookItemId + '\\'\" is-edit-allowed=\"true\"></notebook-item>';\n                    let $item = $('<div></div>').css('text-align', 'center');\n                    if (notebookItem.content && notebookItem.content.attachments) {\n                        for (let a = 0; a < notebookItem.content.attachments.length; a++) {\n                            let notebookItemAttachment = notebookItem.content.attachments[a];\n                            let $img = $('<img src=\"' + notebookItemAttachment.iconURL + '\" alt=\"notebook image\" style=\"width: 75%; max-width: 100%; height: auto; border: 1px solid #aaaaaa; padding: 8px; margin-bottom: 4px;\" />');\n                            $img.addClass('notebook-item--report__note-img');\n                            //$reportElement.find('.note-editable').trigger('focus');\n                            $item.append($img);\n                        }\n                    }\n                    if (notebookItem.content && notebookItem.content.text) {\n                        let $caption = $('<div><b>' + notebookItem.content.text + '</b></div>').css({'text-align': 'center'});\n                        $item.append($caption);\n                    }\n                    //theEditor.content.insertHtmlAtCursor(notebookItemHTML);\n                    //$rootScope.$broadcast(\"notebookItemChosen\", {\"notebookItemHTML\": notebookItemHTML});\n                    //$scope.reportItem.content.content = $scope.reportItem.content.content.substring(0, reportTextareaCursorPosition) + notebookItemHTML + $scope.reportItem.content.content.substring(reportTextareaCursorPosition);\n                    $reportElement.summernote('focus');\n                    $reportElement.summernote('restoreRange');\n                    $reportElement.summernote('insertNode', $item[0]);\n\n                    // hide chooser\n                    $mdBottomSheet.hide();\n                };\n            }\n            NotebookItemChooserController.$inject = [\"$rootScope\", \"$mdBottomSheet\", \"$scope\", \"notebookItems\", \"reportItem\", \"reportTextareaCursorPosition\", \"themePath\"];\n        }\n\n        /**\n        * Start the auto save interval for this report\n        */\n        startAutoSaveInterval() {\n            this.stopAutoSaveInterval();  // stop any existing interval\n            this.autoSaveIntervalId = setInterval(() => {\n                // check if the student work is dirty\n                if (this.dirty) {\n                    // the student work is dirty so we will save\n\n                    /*\n                    * obtain the component states from the children and save them\n                    * to the server\n                    */\n                    this.saveNotebookReportItem();\n                }\n            }, this.autoSaveInterval);\n        };\n\n        /**\n        * Stop the auto save interval for this report\n        */\n        stopAutoSaveInterval() {\n            clearInterval(this.autoSaveIntervalId);\n        };\n\n        /**\n        * Save the notebook report item to server\n        */\n        saveNotebookReportItem() {\n            // save new report notebook item\n            this.reportItem.content.clientSaveTime = Date.parse(new Date());  // set save timestamp\n            this.NotebookService.saveNotebookItem(this.reportItem.id, this.reportItem.nodeId, this.reportItem.localNotebookItemId, this.reportItem.type, this.reportItem.title, this.reportItem.content)\n            .then((result) => {\n                if(result) {\n                    //this.$translate(['ok']).then((translations) => {\n                    this.dirty = false;\n                    this.reportItem.id = result.id; // set the reportNotebookItemId to the newly-incremented id so that future saves during this visit will be an update instead of an insert.\n                    let serverSaveTime = result.serverSaveTime;\n                    let clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n\n                    // set save message\n                    this.setSaveMessage('Saved', clientSaveTime);\n                    //})\n                }\n            });\n        }\n\n        /**\n         * Account for potential vertical scrollbar on Notebook content and set\n         * fixed rich text toolbar location accordingly\n         */\n        setEditorPosition(distance, elem, edge) {\n            let scrollBarWidth = document.body.clientWidth - angular.element(document.querySelector('#notebook')).outerWidth(true);\n            elem.find('.notebook-item--report__toolbar').css('right', scrollBarWidth);\n        }\n\n        /**\n        * Set the message next to the save button\n        * @param message the message to display\n        * @param time the time to display\n        */\n        setSaveMessage(message, time) {\n            this.saveMessage.text = message;\n            this.saveMessage.time = time;\n        }\n    }\n\n    NotebookItemReportController.$inject = [\n        \"$injector\",\n        '$mdBottomSheet',\n        \"$rootScope\",\n        \"$scope\",\n        \"$translate\",\n        \"ConfigService\",\n        \"NotebookService\",\n        \"ProjectService\",\n        \"StudentAssetService\",\n        \"StudentDataService\"\n    ];\n\n    export default NotebookItemReportController;\n"]}