{"version":3,"sources":["navItemController.es6"],"names":[],"mappings":"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","file":"navItemController.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($rootScope,\n                $scope,\n                $translate,\n                $element,\n                NodeService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$translate = $translate;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.StudentDataService.currentNode;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n        this.setNewNode = false;\n        \n        // whether this node is a planning node\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n\n        // the array of nodes used for drag/drop planning sorting\n        this.availablePlanningNodes = [];\n        \n        /*\n         * the array of nodes used for drag/drop planning sorting. the elements\n         * in this array are not the actual nodes that are in the project.\n         * they are just mirrors of them. when the elements in this array\n         * are added/moved/deleted we will do the same to the actual nodes\n         * that are in the project.\n         */\n        this.planningNodeInstances = [];\n        \n        this.parentGroupId = null;\n        \n        // the options for the planning node template tree\n        this.treeOptions1 = {\n            accept: function(sourceNodeScope, destNodesScope, destIndex) {\n                /*\n                 * do not allow any nodes to be dropped in this tree\n                 * since it is the source tree\n                 */\n                return false;\n            }\n        };\n        \n        /*\n         * whether planning mode is on or off which determines if students\n         * can edit planning related aspects of the project such as adding,\n         * moving, or deleting planning steps.\n         */\n        this.planningMode = false;\n        \n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n        \n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n            this.isParentGroupPlanning = this.ProjectService.isPlanning(this.parentGroupId);\n        }\n        \n        if (this.isPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.nodeId);\n        }\n        \n        if (this.isParentGroupPlanning) {\n            \n            if (parentGroup.planningMode) {\n                // the parent is currently in planning mode\n                this.planningMode = true;\n            }\n            \n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.parentGroupId);\n            \n            /*\n             * update the nodes in the select drop down used to move planning\n             * nodes around\n             */\n            this.updateSiblingNodeIds();\n\n            this.$scope.$watch(\n                function () {\n                    // watch the position of this node\n                    return this.ProjectService.idToPosition[this.nodeId];\n                }.bind(this),\n                function(value) {\n                    // the position has changed for this node so we will update it in the UI\n                    this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n                    \n                    /*\n                     * update the nodes in the select drop down used to move planning\n                     * nodes around\n                     */\n                    this.updateSiblingNodeIds();\n                }.bind(this)\n            );\n        }\n\n        this.$scope.$watch(\n            function () { return this.StudentDataService.currentNode; }.bind(this),\n            function (newNode) {\n                this.currentNode = newNode;\n                if (this.StudentDataService.previousStep) {\n                    this.$scope.$parent.isPrevStep = (this.nodeId === this.StudentDataService.previousStep.id);\n                }\n                this.isCurrentNode = (this.currentNode.id === this.nodeId);\n                if (this.isCurrentNode || this.ProjectService.isApplicationNode(newNode.id) || newNode.id === this.ProjectService.rootNode.id) {\n                    this.setExpanded();\n                }\n            }.bind(this)\n        );\n\n        this.$scope.$watch(\n            function () { return this.expanded; }.bind(this),\n            function (value) {\n                this.$scope.$parent.itemExpanded = value;\n                if (value) {\n                    this.zoomToElement();\n                }\n            }.bind(this)\n        );\n        \n        // watch the planning node instances used for drag/drop planning sorting\n        this.$scope.$watchCollection(\n            'navitemCtrl.planningNodeInstances',\n            function(newValue, oldValue) {\n                // the planning node instances have changed\n                this.planningNodeInstancesChanged(newValue, oldValue);\n            }.bind(this)\n        );\n        \n        this.$rootScope.$on('planningNodeChanged', () => {\n            /*\n             * update the nodes in the select drop down used to move planning\n             * nodes around\n             */\n            this.updateSiblingNodeIds();\n        });\n        \n        // a group node has turned on or off planning mode\n        this.$rootScope.$on('togglePlanningModeClicked', (event, args) => {\n            \n            // get the group node that has had its planning node changed\n            var planningModeClickedNodeId = args.nodeId;\n            var planningMode = args.planningMode;\n            \n            // get this node's parent group\n            var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n            var parentGroupId = null;\n            \n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n            \n            if (parentGroupId == planningModeClickedNodeId) {\n                // the parent of this node has changed their planning mode\n                this.planningMode = planningMode;\n            }\n        });\n\n        this.setExpanded();\n    }\n    \n    updateSiblingNodeIds() {\n        var childNodeIds = this.ProjectService.getChildNodeIdsById(this.parentGroupId);\n        \n        this.siblingNodeIds = [];\n        this.siblingNodeIds.push(this.parentGroupId);\n        this.siblingNodeIds = this.siblingNodeIds.concat(childNodeIds);\n    }\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/navItem/navItem.html';\n    };\n\n    setExpanded() {\n        this.$scope.expanded = (this.isCurrentNode || (this.$scope.isGroup && this.ProjectService.isNodeDescendentOfGroup(this.$scope.currentNode, this.$scope.item)));\n        if (this.$scope.expanded && this.isCurrentNode) {\n            this.expanded = true;\n            this.zoomToElement();\n        }\n    };\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let location = this.isGroup ? this.$element[0].offsetTop - 32 : 0;\n            let delay = this.isGroup ? 350 : 0;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear', ()=> {\n                if (this.setNewNode) {\n                    this.setNewNode = false;\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            });\n        }, 250);\n    };\n\n    itemClicked() {\n        if (this.isGroup) {\n            if (!this.expanded) {\n                this.setNewNode = true;\n            }\n            this.expanded = !this.expanded;\n        } else {\n            if (this.StudentDataService.planningMode) {\n                // Don't allow students to enter planning steps while in planning mode\n                this.$translate('planningModeStepsUnVisitable').then((planningModeStepsUnVisitable) => {\n                    alert(planningModeStepsUnVisitable);\n                });\n            } else {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n            }\n        }\n    };\n\n    /**\n     * Save an event when planning node is added\n     * @param planningNodeAdded\n     */\n    savePlanningNodeAddedEvent(planningNodeAdded) {\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = \"planningNodeAdded\";\n        let eventData = {\n            nodeIdAdded: planningNodeAdded.id,\n            templateNodeId: planningNodeAdded.templateId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n    };\n\n    /**\n     * Returns true iff this student can add the specified planning node.\n     * Limits include reaching the max allowed count\n     * @param planningNodeId\n     */\n    canAddPlanningNode(planningNodeId) {\n        let maxAddAllowed = 1;  // by default, students can only add up to one planning node.\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n        // get the maxAddAllowed value by looking up the planningNode in the project.\n        if (planningGroupNode != null && planningGroupNode.availablePlanningNodes != null) {\n            for (let a = 0; a < planningGroupNode.availablePlanningNodes.length; a++) {\n                let availablePlanningNode = planningGroupNode.availablePlanningNodes[a];\n                if (availablePlanningNode.nodeId === planningNodeId && availablePlanningNode.max != null) {\n                    maxAddAllowed = availablePlanningNode.max;\n                }\n            }\n        }\n\n        // if maxAddAllowed was not found, it means they can add as many as they want\n        if (maxAddAllowed === -1) {\n            return true;\n        }\n\n        let numPlanningNodesAdded = 0;  // keep track of number of instances\n        // otherwise, see how many times the planning node template has been used.\n        // loop through the child ids in the planning group and see how many times they've been used\n        if (planningGroupNode.ids != null) {\n            for (let c = 0; c < planningGroupNode.ids.length; c++) {\n                let childPlanningNodeId = planningGroupNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                if (childPlanningNode != null && childPlanningNode.templateId === planningNodeId) {\n                    numPlanningNodesAdded++;\n                }\n            }\n        }\n\n        return numPlanningNodesAdded < maxAddAllowed;\n    };\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param templateNodeId the node id of the planning node template\n     * @returns the planning node instance\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, templateNodeId) {\n        // create the planning node instance\n        let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n        let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(nodeIdToInsertInside, templateNodeId, nextAvailablePlanningNodeId);\n\n        // add the planning node instance inside\n        this.ProjectService.addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance);\n        \n        /*\n         * update the node statuses so that a node status is created for\n         * the new planning node instance\n         */\n        this.StudentDataService.updateNodeStatuses();\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n\n        // Save add planning node event\n        this.savePlanningNodeAddedEvent(planningNodeInstance);\n        \n        return planningNodeInstance;\n    }\n    \n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param nodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, templateNodeId) {\n        \n        var parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n        \n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n            \n            // create the planning node instance\n            let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n            let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(parentGroupId, templateNodeId, nextAvailablePlanningNodeId);\n            \n            // insert planning node instance after\n            this.ProjectService.addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance);\n            \n            /*\n             * update the node statuses so that a node status is created for\n             * the new planning node instance\n             */\n            this.StudentDataService.updateNodeStatuses();\n            \n            // perform any necessary updating\n            this.planningNodeChanged();\n\n            // Save add planning node event\n            this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n            return planningNodeInstance;\n        }\n    }\n    \n    /**\n     * Remove the planning node instance\n     * @param planningNodeInstanceNodeId the planning node instance to remove\n     */\n    removePlanningNodeInstance(planningNodeInstanceNodeId) {\n        // delete the node from the project\n        this.ProjectService.deleteNode(planningNodeInstanceNodeId);\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n\n        // Save remove planning node event\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = \"planningNodeRemoved\";\n        let eventData = {\n            nodeIdRemoved: planningNodeInstanceNodeId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n    }\n    \n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n        \n        if (node != null) {\n            title = node.title;\n        }\n        \n        // get the position\n        var position = this.ProjectService.idToPosition[nodeId];\n        \n        if (position == null) {\n            return title;\n        } else {\n            return position + ': ' + title;\n        }\n    }\n\n    /**\n     * Get the node description\n     * @param nodeId get the description for this node\n     * @returns the description for the node\n     */\n    getNodeDescription(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var description = null;\n\n        if (node != null) {\n            description = node.description;\n        }\n\n        return description;\n    }\n    \n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode0(otherNodeId) {\n        \n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (this.nodeId != otherNodeId) {\n            if (this.ProjectService.isGroupNode(otherNodeId)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(this.nodeId, otherNodeId);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(this.nodeId, otherNodeId);\n            }\n\n            // Save move planning node event\n            let componentId = null;\n            let componentType = null;\n            let category = \"Planning\";\n            let eventName = \"planningNodeMoved\";\n            let eventData = {\n                nodeIdMoved: this.nodeId,\n                nodeIdMovedInsideOrAfter: otherNodeId\n            };\n            let eventNodeId = this.nodeId;\n            this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n        }\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n    \n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode(nodeIdToMove, nodeIdToMoveAfter) {\n        \n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (nodeIdToMove != nodeIdToMoveAfter) {\n            if (this.ProjectService.isGroupNode(nodeIdToMoveAfter)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToMoveAfter);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToMoveAfter);\n            }\n        }\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n    \n    /**\n     * Something related to planning has changed in the project. This\n     * means a planning node was added, moved, or deleted.\n     */\n    planningNodeChanged() {\n        this.$rootScope.$broadcast('planningNodeChanged');\n    }\n    \n    /**\n     * Toggle the planning mode on and off. Notify child nodes that \n     * the planning mode has changed so they can act accordingly.\n     */\n    togglePlanningMode() {\n        if (this.StudentDataService.planningMode && !this.item.planningMode) {\n            // Don't allow multiple concurrent planning modes.\n            this.$translate('planningModeOnlyOnePlanningModeAllowed').then((planningModeOnlyOnePlanningModeAllowed) => {\n                alert(planningModeOnlyOnePlanningModeAllowed);\n            });\n\n            return;\n        }\n        // toggle the planning mode\n        this.planningMode = !this.planningMode;\n        this.item.planningMode = this.planningMode;\n        // also toggle StudentDataService planning mode. This will be used to constrain the entire project when in planning mode.\n        this.StudentDataService.planningMode = this.planningMode;\n\n        if (!this.planningMode) {\n            // Student is exiting planning mode, so save the changed nodes in NodeState\n\n            let nodeState = this.NodeService.createNewNodeState();\n            nodeState.nodeId = this.nodeId;\n            nodeState.isAutoSave = false;\n            nodeState.isSubmit = false;\n\n            var studentData = {};\n            studentData.nodeId = this.nodeId;\n            studentData.nodes = [];\n            let planningNode = this.ProjectService.getNodeById(this.nodeId);\n            studentData.nodes.push(planningNode);  // add the planning node (group)\n            // loop through the child ids in the planning group and save them also\n            if (planningNode.ids != null) {\n                for (let c = 0; c < planningNode.ids.length; c++) {\n                    let childPlanningNodeId = planningNode.ids[c];\n                    let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                    studentData.nodes.push(childPlanningNode);\n                }\n            }\n\n            nodeState.studentData = studentData;\n            var nodeStates = [];\n            nodeStates.push(nodeState);\n            this.StudentDataService.saveNodeStates(nodeStates);\n        }\n\n        // Save planning mode on/off event\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = this.planningMode ? \"planningModeOn\" : \"planningModeOff\";\n        let eventData = {\n            nodeId: this.nodeId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n\n        // notify the child nodes that the planning mode of this group node has changed\n        this.$rootScope.$broadcast('togglePlanningModeClicked', { nodeId: this.nodeId, planningMode: this.planningMode });\n    }\n    \n    /**\n     * The student has clicked the X on a planning step to delete it\n     * @param planningNodeInstance the planning node instance object to delete\n     */\n    deletePlanningNodeInstance(planningNodeInstance) {\n        \n        var planningNodeInstances = this.planningNodeInstances;\n        \n        if (planningNodeInstances != null) {\n            \n            // get the index of the planning node instance we are deleting\n            var index = planningNodeInstances.indexOf(planningNodeInstance);\n            \n            if (index != null && index != -1) {\n                // delete the planning node instance\n                planningNodeInstances.splice(index, 1);\n            }\n        }\n    }\n    \n    /**\n     * The planning node instances array has changed\n     * @param newValue the new value of the planning instance array\n     * @param oldValue the old value of the planning instance array\n     */\n    planningNodeInstancesChanged(newValue, oldValue) {\n        \n        if (newValue.length == oldValue.length) {\n            // the length is the same as before\n            \n            if (newValue.length == 0) {\n                /*\n                 * if the length is 0 it means this function was called during\n                 * angular initialization and nothing really changed\n                 */\n            } else {\n                // the student moved a planning step\n                \n                // find the node that was moved and where it was placed\n                var movedPlanningNodeResults = this.findMovedPlanningNode(newValue, oldValue);\n                \n                if (movedPlanningNodeResults != null) {\n                    var movedPlanningNode = movedPlanningNodeResults.movedPlanningNode;\n                    var nodeIdAddedAfter = movedPlanningNodeResults.nodeIdAddedAfter;\n                    \n                    if (nodeIdAddedAfter == null) {\n                        // the node was moved to the beginning of the group\n                        this.movePlanningNode(movedPlanningNode.id, this.nodeId);\n                    } else {\n                        // the node was moved after another node in the group\n                        this.movePlanningNode(movedPlanningNode.id, nodeIdAddedAfter);\n                    }\n                }\n            }\n        } else if (newValue.length > oldValue.length) {\n            // the student added a planning step\n            \n            // find the node that was added and where it was placed\n            var addedPlanningNodeResults = this.findAddedPlanningNode(newValue, oldValue);\n            var addedPlanningNode = addedPlanningNodeResults.addedPlanningNode;\n            var nodeIdAddedAfter = addedPlanningNodeResults.nodeIdAddedAfter;\n            \n            var planningNodeInstance = null;\n            \n            if (nodeIdAddedAfter == null) {\n                // the node was added at the beginning of the group\n                planningNodeInstance = this.addPlanningNodeInstanceInside(this.nodeId, addedPlanningNode.id);\n            } else {\n                // the node was added after another node in the group\n                planningNodeInstance = this.addPlanningNodeInstanceAfter(nodeIdAddedAfter, addedPlanningNode.id);\n            }\n            \n            // update the ids\n            addedPlanningNode.templateId = planningNodeInstance.templateId;\n            addedPlanningNode.id = planningNodeInstance.id;\n        } else if (newValue.length < oldValue.length) {\n            // the student deleted a planning step\n            \n            // find the node that was deleted\n            var deletedPlanningNode = this.findDeletedPlanningNode(newValue, oldValue);\n            \n            // remove the node\n            this.removePlanningNodeInstance(deletedPlanningNode.id);\n        }\n    }\n    \n    /**\n     * Find the node that was moved and where it was moved to\n     * @param newPlanningNodes the new array of planning nodes\n     * @param oldPlanningNodes the old array of planning nodes\n     * @returns an object containing the node that was moved\n     * and the node id it was moved after\n     */\n    findMovedPlanningNode(newPlanningNodes, oldPlanningNodes) {\n        var movedPlanningNode = null;\n        var nodeIdAddedAfter = null;\n        \n        // an array used to keep track of the nodes that were moved up\n        var planningNodesMovedUp = [];\n        \n        // an array used to keep track of the nodes that were moved down\n        var planningNodesMovedDown = [];\n        \n        // loop through all the old nodes\n        for (var o = 0; o < oldPlanningNodes.length; o++) {\n            // get the index of the node in the old array\n            var oldIndex = o;\n            \n            // get the node\n            var oldPlanningNode = oldPlanningNodes[o];\n            \n            // get the index of the node in the new array\n            var newIndex = newPlanningNodes.indexOf(oldPlanningNode);\n            \n            if (oldIndex == newIndex) {\n                // the node was not moved\n            } else if (oldIndex < newIndex) {\n                // the node was moved down\n                planningNodesMovedDown.push(oldPlanningNode);\n            } else if (oldIndex > newIndex) {\n                // the node was moved up\n                planningNodesMovedUp.push(oldPlanningNode);\n            }\n        }\n        \n        /*\n         * since the student can only drag one node at a time, it means one\n         * of the planningNodesMovedDown or planningNodesMovedUp arrays must\n         * only contain one element. when referring to nodes moving up and down\n         * it is in reference to the UI which is opposite of the array index.\n         * moving a node down in the UI will move it up in the array index.\n         * consider the case when the student moves a node from the\n         * top to the bottom. all the node indexes will have seemed to \n         * move up except for the node that was moved down. the \n         * opposite case of moving a node from the bottom to the top is similar.\n         * all the node indexes will have seemed to move down except for the\n         * node that was moved up. in all cases only one node will move up and\n         * other nodes will move down or one node will move down and other\n         * nodes will move up. we will look for the lone node that moved in\n         * a given direction as opposed to all the other nodes that moved the\n         * other direction.\n         */\n        if (planningNodesMovedDown.length == 1) {\n            // the student moved one node down\n            movedPlanningNode = planningNodesMovedDown[0];\n        } else if (planningNodesMovedUp.length == 1) {\n            // the student moved one node up\n            movedPlanningNode = planningNodesMovedUp[0];\n        }\n        \n        if (movedPlanningNode != null) {\n            // get the new index of the node that was moved\n            var newIndex = newPlanningNodes.indexOf(movedPlanningNode);\n            \n            if (newIndex == 0) {\n                // the node is the first in the group\n                nodeIdAddedAfter = null;\n            } else {\n                /*\n                 * the node is after a node in the group so we will get\n                 * the node id of the node that comes before it\n                 */\n                var previousNode = newPlanningNodes[newIndex - 1];\n                \n                if (previousNode != null) {\n                    nodeIdAddedAfter = previousNode.id;\n                }\n            }\n        }\n        \n        var returnValue = {};\n        returnValue.movedPlanningNode = movedPlanningNode;\n        returnValue.nodeIdAddedAfter = nodeIdAddedAfter;\n        \n        return returnValue;\n    }\n    \n    /**\n     * Find the node that was added and where it was moved to\n     * @param newPlanningNodes the new array of planning nodes\n     * @param oldPlanningNodes the old array of planning nodes\n     * @returns an object containing the node that was added\n     * and the node id it was added after\n     */\n    findAddedPlanningNode(newPlanningNodes, oldPlanningNodes) {\n        var addedPlanningNode = null;\n        var nodeIdAddedAfter = null;\n        \n        // loop through all the new nodes\n        for (var n = 0; n < newPlanningNodes.length; n++) {\n            var newPlanningNode = newPlanningNodes[n];\n            \n            if (newPlanningNode != null) {\n                \n                // look up the node in the old nodes array\n                if (oldPlanningNodes.indexOf(newPlanningNode) == -1) {\n                    /*\n                     * the node was not found in the old array which means\n                     * we have found the new node\n                     */\n                    addedPlanningNode = newPlanningNode;\n                    \n                    if (n == 0) {\n                        // the node is the first in the group\n                        nodeIdAddedAfter = null;\n                    } else {\n                        /*\n                         * the node is after a node in the group so we will get\n                         * the node id of the node that comes before it\n                         */\n                        var previousPlanningNode = newPlanningNodes[n - 1];\n                        \n                        if (previousPlanningNode != null) {\n                            nodeIdAddedAfter = previousPlanningNode.id;\n                        }\n                    }\n                    \n                    break;\n                }\n            }\n        }\n        \n        var returnValue = {};\n        returnValue.addedPlanningNode = addedPlanningNode;\n        returnValue.nodeIdAddedAfter = nodeIdAddedAfter;\n        \n        return returnValue;\n    }\n    \n    /**\n     * Find the node that was deleted\n     * @param newPlanningNodes the new array of planning nodes\n     * @param oldPlanningNodes the old array of planning nodes\n     * @returns the node that was deleted\n     */\n    findDeletedPlanningNode(newPlanningNodes, oldPlanningNodes) {\n        \n        // loop through all the old nodes\n        for (var o = 0; o < oldPlanningNodes.length; o++) {\n            var oldPlanningNode = oldPlanningNodes[o];\n            \n            if (oldPlanningNode != null) {\n                if (newPlanningNodes.indexOf(oldPlanningNode) == -1) {\n                    /*\n                     * the node was not found in the old array which means\n                     * we have found the node that was deleted\n                     */\n                    return oldPlanningNode;\n                }\n            }\n        }\n        \n        return null;\n    }\n}\n\nNavItemController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$translate',\n    '$element',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NavItemController;\n"]}