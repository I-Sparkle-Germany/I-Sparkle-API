{"version":3,"sources":["navItemController.es6"],"names":[],"mappings":"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","file":"navItemController.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($rootScope,\n                $scope,\n                $translate,\n                $element,\n                dragulaService,\n                NodeService,\n                ProjectService,\n                StudentDataService,\n                $mdDialog) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$translate = $translate;\n        this.dragulaService = dragulaService;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.$mdDialog = $mdDialog;\n        this.autoScroll = require('dom-autoscroller');\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.StudentDataService.currentNode;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n        this.setNewNode = false;\n\n        // whether this node is a planning node\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n\n        // the array of nodes used for drag/drop planning sorting\n        this.availablePlanningNodes = [];\n\n        // whether the node is a planning node instance\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n        this.isPlanningInstance = this.ProjectService.isPlanningInstance(this.nodeId);\n\n        this.parentGroupId = null;\n\n        /*\n         * whether planning mode is on or off which determines if students\n         * can edit planning related aspects of the project such as adding,\n         * moving, or deleting planning steps.\n         */\n        this.planningMode = false;\n\n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n\n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n            this.isParentGroupPlanning = this.ProjectService.isPlanning(this.parentGroupId);\n        }\n\n        if (this.isPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.nodeId);\n        }\n\n        if (this.isParentGroupPlanning) {\n\n            if (parentGroup.planningMode) {\n                // the parent is currently in planning mode\n                this.planningMode = true;\n            }\n\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodes = this.ProjectService.getAvailablePlanningNodes(this.parentGroupId);\n\n            this.$scope.$watch(\n                function () {\n                    // watch the position of this node\n                    return this.ProjectService.idToPosition[this.nodeId];\n                }.bind(this),\n                function(value) {\n                    // the position has changed for this node so we will update it in the UI\n                    this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n                }.bind(this)\n            );\n        }\n\n        this.$scope.$watch(\n            function () { return this.StudentDataService.currentNode; }.bind(this),\n            function (newNode) {\n                this.currentNode = newNode;\n                if (this.StudentDataService.previousStep) {\n                    this.$scope.$parent.isPrevStep = (this.nodeId === this.StudentDataService.previousStep.id);\n                }\n                this.isCurrentNode = (this.currentNode.id === this.nodeId);\n                if (this.isCurrentNode || this.ProjectService.isApplicationNode(newNode.id) || newNode.id === this.ProjectService.rootNode.id) {\n                    this.setExpanded();\n                }\n            }.bind(this)\n        );\n\n        this.$scope.$watch(\n            function () { return this.expanded; }.bind(this),\n            function (value) {\n                this.$scope.$parent.itemExpanded = value;\n                if (value) {\n                    this.zoomToElement();\n                }\n            }.bind(this)\n        );\n\n        // a group node has turned on or off planning mode\n        this.$rootScope.$on('togglePlanningModeClicked', (event, args) => {\n\n            // get the group node that has had its planning node changed\n            let planningModeClickedNodeId = args.nodeId;\n            let planningMode = args.planningMode;\n\n            // get this node's parent group\n            let parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n            let parentGroupId = null;\n\n            if (parentGroup != null) {\n                parentGroupId = parentGroup.id;\n            }\n\n            if (parentGroupId == planningModeClickedNodeId) {\n                // the parent of this node has changed their planning mode\n                this.planningMode = planningMode;\n            }\n        });\n\n        let dragId = 'planning_' + this.nodeId ;\n        // handle item drop events\n        let dropEvent = dragId + '.drop-model';\n        this.$scope.$on(dropEvent, (el, target, source) => {\n            let nodeChangedId = target.data().nodeid;\n            this.planningNodeItemsChanged(nodeChangedId);\n        });\n\n        this.dragulaService.options(this.$scope, dragId, {\n            moves: (el, source, handle, sibling) => {\n                if (!this.planningMode) {\n                    return false;\n                }\n\n                let nodeId = el.getAttribute('data-nodeid');\n                return this.ProjectService.isPlanningInstance(nodeId);\n            }\n        });\n\n        let drake = dragulaService.find(this.$scope, dragId).drake;\n\n        // support scroll while dragging\n        let scroll = this.autoScroll(\n            [document.querySelector('#content')], {\n            margin: 30,\n            pixels: 50,\n            scrollWhenOutside: true,\n            autoScroll: function() {\n                // Only scroll when the pointer is down, and there is a child being dragged\n                return this.down && drake.dragging;\n            }\n        });\n\n        this.setExpanded();\n    }\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/navItem/navItem.html';\n    };\n\n    setExpanded() {\n        this.$scope.expanded = (this.isCurrentNode || (this.$scope.isGroup && this.ProjectService.isNodeDescendentOfGroup(this.$scope.currentNode, this.$scope.item)));\n        if (this.$scope.expanded && this.isCurrentNode) {\n            this.expanded = true;\n            this.zoomToElement();\n        }\n    };\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let location = this.isGroup ? this.$element[0].offsetTop - 32 : 0;\n            let delay = this.isGroup ? 350 : 0;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear', ()=> {\n                if (this.setNewNode) {\n                    this.setNewNode = false;\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            });\n        }, 250);\n    };\n\n    itemClicked(event) {\n        if (this.isGroup) {\n            if (!this.expanded) {\n                this.setNewNode = true;\n            }\n            this.expanded = !this.expanded;\n        } else {\n            if (this.StudentDataService.planningMode) {\n                // Don't allow students to enter planning steps while in planning mode\n                this.$translate(['itemLocked', 'planningModeStepsUnVisitable', 'ok']).then((translations) => {\n                    this.$mdDialog.show(\n                        this.$mdDialog.alert()\n                            .title(translations.itemLocked)\n                            .textContent(translations.planningModeStepsUnVisitable)\n                            .ariaLabel(translations.itemLocked)\n                            .ok(translations.ok)\n                            .targetEvent(event)\n                    );\n                });\n            } else {\n                this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n            }\n        }\n    };\n\n    /**\n     * Save an event when planning node is added\n     * @param planningNodeAdded\n     */\n    savePlanningNodeAddedEvent(planningNodeAdded) {\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = \"planningNodeAdded\";\n        let eventData = {\n            nodeIdAdded: planningNodeAdded.id,\n            planningNodeTemplateId: planningNodeAdded.planningNodeTemplateId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n    };\n\n    /**\n     * Returns the max times a planning node can be added to the project (-1 is\n     * is returned if there is no limit)\n     * @param planningNodeId\n     */\n    getPlannindNodeMaxAllowed(planningNodeId) {\n        let maxAddAllowed = -1;  // by default, students can add as many instances as they want\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n        // get the maxAddAllowed value by looking up the planningNode in the project.\n        if (planningGroupNode && planningGroupNode.availablePlanningNodes) {\n            for (let a = 0; a < planningGroupNode.availablePlanningNodes.length; a++) {\n                let availablePlanningNode = planningGroupNode.availablePlanningNodes[a];\n                if (availablePlanningNode.nodeId === planningNodeId && availablePlanningNode.max != null) {\n                    maxAddAllowed = availablePlanningNode.max;\n                }\n            }\n        }\n\n        return maxAddAllowed;\n    };\n\n    /**\n     * Returns the number of times a planning node has been added to the project\n     * @param planningNodeId\n     */\n    getNumPlannindNodeInstances(planningNodeId) {\n        let numPlanningNodesAdded = 0;  // keep track of number of instances\n        // otherwise, see how many times the planning node template has been used.\n\n        let planningGroupNode = null;\n        if (this.isParentGroupPlanning) {\n            planningGroupNode = this.ProjectService.getNodeById(this.parentGroupId);\n        } else {\n            planningGroupNode = this.ProjectService.getNodeById(this.nodeId);\n        }\n\n        // loop through the child ids in the planning group and see how many times they've been used\n        if (planningGroupNode && planningGroupNode.ids) {\n            for (let c = 0; c < planningGroupNode.ids.length; c++) {\n                let childPlanningNodeId = planningGroupNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                if (childPlanningNode != null && childPlanningNode.planningNodeTemplateId === planningNodeId) {\n                    numPlanningNodesAdded++;\n                }\n            }\n        }\n\n        return numPlanningNodesAdded;\n    };\n\n    /**\n     * Returns true iff this student can add the specified planning node.\n     * Limits include reaching the max allowed count\n     * @param planningNodeId\n     */\n    canAddPlanningNode(planningNodeId) {\n        let maxAddAllowed = this.getPlannindNodeMaxAllowed(planningNodeId);\n\n        // if maxAddAllowed was not found or is set to 0, it means students can add as many as they want\n        if (maxAddAllowed < 1) {\n            return true;\n        }\n\n        let numPlanningNodesAdded = this.getNumPlannindNodeInstances(planningNodeId);\n\n        return numPlanningNodesAdded < maxAddAllowed;\n    };\n\n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param templateNodeId the node id of the planning node template\n     * @returns the planning node instance\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, templateNodeId) {\n        // create the planning node instance\n        let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n        let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(nodeIdToInsertInside, templateNodeId, nextAvailablePlanningNodeId);\n\n        // add the planning node instance inside\n        this.ProjectService.addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance);\n\n        /*\n         * update the node statuses so that a node status is created for\n         * the new planning node instance\n         */\n        this.StudentDataService.updateNodeStatuses();\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n\n        // Save add planning node event\n        this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n        return planningNodeInstance;\n    }\n\n    /**\n     * Open the planning mode select dialog to choose a planning node template\n     * to create a new planning instance\n     * @param event the trigger event\n     * @param targetNodeId the node to insert the new planning instance after or inside\n     * @param insertInside boolean whether to insert the new planning instance\n     * inside the target node (optional; default is after)\n     */\n    addPlanningInstance(event, targetNodeId, insertInside) {\n        // show dialog with list of planning nodes user can add to current group\n\n        let choosePlanningItemTemplateUrl = this.ProjectService.getThemePath() + '/themeComponents/navItem/choosePlanningItem.html';\n        let navitemCtrl = this;\n\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            locals: {\n                targetNodeId: targetNodeId,\n                insertInside: insertInside,\n                navitemCtrl: navitemCtrl,\n            },\n            templateUrl: choosePlanningItemTemplateUrl,\n            targetEvent: event,\n            controller: ChoosePlanningItemController\n        });\n\n        function ChoosePlanningItemController($scope, $mdDialog, targetNodeId, insertInside, navitemCtrl) {\n            $scope.navitemCtrl = navitemCtrl;\n            $scope.targetNodeId = targetNodeId;\n            $scope.insertInside = insertInside;\n\n            $scope.addSelectedPlanningInstance = (templateNodeId) => {\n                if ($scope.insertInside) {\n                    $scope.navitemCtrl.addPlanningNodeInstanceInside($scope.targetNodeId, templateNodeId);\n                } else {\n                    $scope.navitemCtrl.addPlanningNodeInstanceAfter($scope.targetNodeId, templateNodeId);\n                }\n\n                $mdDialog.hide();\n            };\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n        }\n        ChoosePlanningItemController.$inject = [\"$scope\", \"$mdDialog\", \"targetNodeId\", \"insertInside\", \"navitemCtrl\"];\n    };\n\n    /**\n     * Create a planning node instance and add it to the project after the specified nodeId\n     * @param groupId the group the new planning node instance will be added to\n     * @param nodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, templateNodeId) {\n\n        var parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n\n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n\n            // create the planning node instance\n            let nextAvailablePlanningNodeId = this.StudentDataService.getNextAvailablePlanningNodeId();\n            let planningNodeInstance = this.ProjectService.createPlanningNodeInstance(parentGroupId, templateNodeId, nextAvailablePlanningNodeId);\n\n            // insert planning node instance after\n            this.ProjectService.addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance);\n\n            /*\n             * update the node statuses so that a node status is created for\n             * the new planning node instance\n             */\n            this.StudentDataService.updateNodeStatuses();\n\n            // perform any necessary updating\n            this.planningNodeChanged();\n\n            // Save add planning node event\n            this.savePlanningNodeAddedEvent(planningNodeInstance);\n\n            return planningNodeInstance;\n        }\n    }\n\n    /**\n     * Remove the planning node instance\n     * @param planningNodeInstanceNodeId the planning node instance to remove\n     * @param event the event that triggered the function call\n     */\n    removePlanningNodeInstance(planningNodeInstanceNodeId, event) {\n        this.$translate([\"yes\", \"no\"]).then((translations) => {\n            let confirm = this.$mdDialog.confirm()\n                .parent(angular.element(document.body))\n                .title('Are you sure you want to delete this item?')\n                .textContent('Note: Any work you have done on the item will be lost.')\n                .ariaLabel('Delete item from project')\n                .targetEvent(event)\n                .ok(translations.yes)\n                .cancel(translations.no);\n\n            this.$mdDialog.show(confirm).then(() => {\n                // delete the node from the project\n                this.ProjectService.deleteNode(planningNodeInstanceNodeId);\n\n                // perform any necessary updating\n                this.planningNodeChanged(this.parentGroupId);\n\n                // Save remove planning node event\n                let componentId = null;\n                let componentType = null;\n                let category = \"Planning\";\n                let eventName = \"planningNodeRemoved\";\n                let eventData = {\n                    nodeIdRemoved: planningNodeInstanceNodeId\n                };\n                let eventNodeId = this.nodeId;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }, () => {});\n        });\n    }\n\n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n\n        if (node != null) {\n            title = node.title;\n        }\n\n        // get the position\n        var position = this.ProjectService.idToPosition[nodeId];\n\n        if (position == null) {\n            return title;\n        } else {\n            return position + ': ' + title;\n        }\n    }\n\n    /**\n     * Get the node description\n     * @param nodeId get the description for this node\n     * @returns the description for the node\n     */\n    getNodeDescription(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var description = null;\n\n        if (node != null) {\n            description = node.description;\n        }\n\n        return description;\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode0(otherNodeId) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (this.nodeId != otherNodeId) {\n            if (this.ProjectService.isGroupNode(otherNodeId)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(this.nodeId, otherNodeId);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(this.nodeId, otherNodeId);\n            }\n\n            // Save move planning node event\n            let componentId = null;\n            let componentType = null;\n            let category = \"Planning\";\n            let eventName = \"planningNodeMoved\";\n            let eventData = {\n                nodeIdMoved: this.nodeId,\n                nodeIdMovedInsideOrAfter: otherNodeId\n            };\n            let eventNodeId = this.nodeId;\n            this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode(nodeIdToMove, nodeIdToMoveAfter) {\n\n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (nodeIdToMove != nodeIdToMoveAfter) {\n            if (this.ProjectService.isGroupNode(nodeIdToMoveAfter)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(nodeIdToMove, nodeIdToMoveAfter);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(nodeIdToMove, nodeIdToMoveAfter);\n            }\n        }\n\n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n\n    /**\n     * Something related to planning has changed in the project. This\n     * means a planning node was added, moved, or deleted.\n     * @param param planningNodeId planning node id\n     */\n    planningNodeChanged(planningNodeId) {\n        this.savePlanningNodeChanges(planningNodeId);\n\n        this.$rootScope.$broadcast('planningNodeChanged');\n    }\n\n    /**\n    * Save the changed nodes in NodeState\n    * @param param planningNodeId planning node id\n    **/\n    savePlanningNodeChanges(planningNodeId) {\n        let nodeState = this.NodeService.createNewNodeState();\n        let nodeId = planningNodeId ? planningNodeId : this.nodeId;\n        nodeState.nodeId = nodeId;\n        nodeState.isAutoSave = false;\n        nodeState.isSubmit = false;\n\n        var studentData = {};\n        studentData.nodeId = nodeId;\n        studentData.nodes = [];\n        let planningNode = this.ProjectService.getNodeById(nodeId);\n        studentData.nodes.push(planningNode);  // add the planning node (group)\n        // loop through the child ids in the planning group and save them also\n        if (planningNode.ids != null) {\n            for (let c = 0; c < planningNode.ids.length; c++) {\n                let childPlanningNodeId = planningNode.ids[c];\n                let childPlanningNode = this.ProjectService.getNodeById(childPlanningNodeId);\n                studentData.nodes.push(childPlanningNode);\n            }\n        }\n\n        nodeState.studentData = studentData;\n        var nodeStates = [];\n        nodeStates.push(nodeState);\n        this.StudentDataService.saveNodeStates(nodeStates);\n    }\n\n    /**\n     * Toggle the planning mode on and off. Notify child nodes that\n     * the planning mode has changed so they can act accordingly.\n     */\n    togglePlanningMode() {\n        /*if (this.StudentDataService.planningMode && !this.item.planningMode) {\n            // Don't allow multiple concurrent planning modes.\n            this.$translate('planningModeOnlyOnePlanningModeAllowed').then((planningModeOnlyOnePlanningModeAllowed) => {\n                alert(planningModeOnlyOnePlanningModeAllowed);\n            });\n\n            return;\n        }*/\n\n        // toggle the planning mode\n        //this.planningMode = !this.planningMode;\n        this.item.planningMode = this.planningMode;\n\n        // also toggle StudentDataService planning mode. This will be used to constrain the entire project when in planning mode.\n        this.StudentDataService.planningMode = this.planningMode;\n\n        // Save planning mode on/off event\n        let componentId = null;\n        let componentType = null;\n        let category = \"Planning\";\n        let eventName = this.planningMode ? \"planningModeOn\" : \"planningModeOff\";\n        let eventData = {\n            nodeId: this.nodeId\n        };\n        let eventNodeId = this.nodeId;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n\n        // notify the child nodes that the planning mode of this group node has changed\n        this.$rootScope.$broadcast('togglePlanningModeClicked', { nodeId: this.nodeId, planningMode: this.planningMode });\n    }\n\n    /**\n     * The planning node's items array has changed\n     * @param newValue the new value of the planning node's items array\n     * @param oldValue the old value of the planning node's items array\n     */\n    planningNodeItemsChanged(nodeChangedId) {\n        let index = this.item.ids.indexOf(nodeChangedId);\n        let nodeIdAddedAfter = this.item.ids[index-1];\n\n        if (nodeIdAddedAfter) {\n            // the node was moved after another node in the group\n            this.movePlanningNode(nodeChangedId, nodeIdAddedAfter);\n        } else {\n            // the node was moved to the beginning of the group\n            this.movePlanningNode(nodeChangedId, this.nodeId);\n        }\n    };\n}\n\nNavItemController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$translate',\n    '$element',\n    'dragulaService',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService',\n    '$mdDialog'\n];\n\nexport default NavItemController;\n"]}