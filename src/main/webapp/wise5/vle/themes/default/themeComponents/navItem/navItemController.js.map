{"version":3,"sources":["navItemController.es6"],"names":[],"mappings":"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","file":"navItemController.js","sourcesContent":["\"use strict\";\n\nclass NavItemController {\n    constructor($rootScope,\n                $scope,\n                $element,\n                ProjectService,\n                StudentDataService) {\n\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.expanded = false;\n\n        this.item = this.ProjectService.idToNode[this.nodeId];\n        this.isGroup = this.ProjectService.isGroupNode(this.nodeId);\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n        this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n        this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n        this.currentNode = this.StudentDataService.currentNode;\n        this.isCurrentNode = (this.currentNode.id === this.nodeId);\n        this.setNewNode = false;\n        \n        // whether this node is a planning node\n        this.isPlanning = this.ProjectService.isPlanning(this.nodeId);\n        this.availablePlanningNodeIds = null;\n        this.parentGroupId = null;\n        \n        var parentGroup = this.ProjectService.getParentGroup(this.nodeId);\n        \n        if (parentGroup != null) {\n            this.parentGroupId = parentGroup.id;\n            this.isParentGroupPlanning = this.ProjectService.isPlanning(this.parentGroupId);\n        }\n        \n        if (this.isPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodeIds = this.ProjectService.getAvailablePlanningNodeIds(this.nodeId);\n        }\n        \n        if (this.isParentGroupPlanning) {\n            /*\n             * planning is enabled so we will get the available planning\n             * nodes that can be used in this group\n             */\n            this.availablePlanningNodeIds = this.ProjectService.getAvailablePlanningNodeIds(this.parentGroupId);\n            \n            /*\n             * update the nodes in the select drop down used to move planning\n             * nodes around\n             */\n            this.updateSiblingNodeIds();\n            \n            this.$scope.$watch(\n                function () {\n                    // watch the position of this node\n                    return this.ProjectService.idToPosition[this.nodeId];\n                }.bind(this),\n                function(value) {\n                    // the position has changed for this node so we will update it in the UI\n                    this.nodeTitle = this.showPosition ? (this.ProjectService.idToPosition[this.nodeId] + ': ' + this.item.title) : this.item.title;\n                    \n                    /*\n                     * update the nodes in the select drop down used to move planning\n                     * nodes around\n                     */\n                    this.updateSiblingNodeIds();\n                }.bind(this)\n            );\n        }\n\n        this.$scope.$watch(\n            function () { return this.StudentDataService.currentNode; }.bind(this),\n            function (newNode) {\n                this.currentNode = newNode;\n                if (this.StudentDataService.previousStep) {\n                    this.$scope.$parent.isPrevStep = (this.nodeId === this.StudentDataService.previousStep.id);\n                }\n                this.isCurrentNode = (this.currentNode.id === this.nodeId);\n                if (this.isCurrentNode || this.ProjectService.isApplicationNode(newNode.id) || newNode.id === this.ProjectService.rootNode.id) {\n                    this.setExpanded();\n                }\n            }.bind(this)\n        );\n\n        this.$scope.$watch(\n            function () { return this.expanded; }.bind(this),\n            function (value) {\n                this.$scope.$parent.itemExpanded = value;\n                if (value) {\n                    this.zoomToElement();\n                }\n            }.bind(this)\n        );\n        \n        this.$rootScope.$on('planningNodeChanged', () => {\n            /*\n             * update the nodes in the select drop down used to move planning\n             * nodes around\n             */\n            this.updateSiblingNodeIds();\n        });\n\n        this.setExpanded();\n    }\n    \n    updateSiblingNodeIds() {\n        var childNodeIds = this.ProjectService.getChildNodeIdsById(this.parentGroupId);\n        \n        this.siblingNodeIds = [];\n        this.siblingNodeIds.push(this.parentGroupId);\n        this.siblingNodeIds = this.siblingNodeIds.concat(childNodeIds);\n    }\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/navItem/navItem.html';\n    };\n\n    setExpanded() {\n        this.$scope.expanded = (this.isCurrentNode || (this.$scope.isGroup && this.ProjectService.isNodeDescendentOfGroup(this.$scope.currentNode, this.$scope.item)));\n        if (this.$scope.expanded && this.isCurrentNode) {\n            this.expanded = true;\n            this.zoomToElement();\n        }\n    };\n\n    zoomToElement() {\n        setTimeout(()=> {\n            // smooth scroll to expanded group's page location\n            let location = this.isGroup ? this.$element[0].offsetTop - 32 : 0;\n            let delay = this.isGroup ? 350 : 0;\n            $('#content').animate({\n                scrollTop: location\n            }, delay, 'linear', ()=> {\n                if (this.setNewNode) {\n                    this.setNewNode = false;\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n                }\n            });\n        }, 250);\n    };\n\n    itemClicked() {\n        if (this.isGroup) {\n            if (!this.expanded) {\n                this.setNewNode = true;\n            }\n            this.expanded = !this.expanded;\n        } else {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.nodeId);\n        }\n    };\n    \n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param templateNodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceInside(nodeIdToInsertInside, templateNodeId) {\n        // create the planning node instance\n        var planningNodeInstance = this.ProjectService.createPlanningNodeInstance(nodeIdToInsertInside, templateNodeId);\n        \n        // add the planning node instance inside\n        this.ProjectService.addPlanningNodeInstanceInside(nodeIdToInsertInside, planningNodeInstance);\n        \n        /*\n         * update the node statuses so that a node status is created for\n         * the new planning node instance\n         */\n        this.StudentDataService.updateNodeStatuses();\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n    \n    /**\n     * Create a planning node instance and add it to the project\n     * @param groupId the group the new planning node instance will be added to\n     * @param nodeId the node id of the planning node template\n     */\n    addPlanningNodeInstanceAfter(nodeIdToInsertAfter, templateNodeId) {\n        \n        var parentGroup = this.ProjectService.getParentGroup(nodeIdToInsertAfter);\n        \n        if (parentGroup != null) {\n            var parentGroupId = parentGroup.id;\n            \n            // create the planning node instance\n            var planningNodeInstance = this.ProjectService.createPlanningNodeInstance(parentGroupId, templateNodeId);\n            \n            // insert planning node instance after\n            this.ProjectService.addPlanningNodeInstanceAfter(nodeIdToInsertAfter, planningNodeInstance);\n            \n            /*\n             * update the node statuses so that a node status is created for\n             * the new planning node instance\n             */\n            this.StudentDataService.updateNodeStatuses();\n            \n            // perform any necessary updating\n            this.planningNodeChanged();\n        }\n    }\n    \n    /**\n     * Remove the planning node instance\n     * @param planningNodeInstanceNodeId the planning node instance to remove\n     */\n    removePlanningNodeInstance(planningNodeInstanceNodeId) {\n        // delete the node from the project\n        this.ProjectService.deleteNode(planningNodeInstanceNodeId);\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n    \n    /**\n     * Get the node title\n     * @param nodeId get the title for this node\n     * @returns the title for the node\n     */\n    getNodeTitle(nodeId) {\n        var node = this.ProjectService.idToNode[nodeId];\n        var title = null;\n        \n        if (node != null) {\n            title = node.title;\n        }\n        \n        // get the position\n        var position = this.ProjectService.idToPosition[nodeId];\n        \n        if (position == null) {\n            return title;\n        } else {\n            return position + ': ' + title;\n        }\n    }\n    \n    /**\n     * Move the planning node. If the other node is a group node, we will\n     * insert this node as the first node in the group. If the other node is\n     * a step node, we will insert this node after the other node.\n     * @param otherNodeId the other node we will move this node inside or after\n     */\n    movePlanningNode(otherNodeId) {\n        \n        /*\n         * check that this node is not the same as the other node.\n         * if they are the same we don't need to do anything.\n         */\n        if (this.nodeId != otherNodeId) {\n            if (this.ProjectService.isGroupNode(otherNodeId)) {\n                // insert this node inside the group node\n                this.ProjectService.movePlanningNodeInstanceInside(this.nodeId, otherNodeId);\n            } else {\n                // insert this node after the other node\n                this.ProjectService.movePlanningNodeInstanceAfter(this.nodeId, otherNodeId);\n            }\n        }\n        \n        // perform any necessary updating\n        this.planningNodeChanged();\n    }\n    \n    planningNodeChanged() {\n        this.$rootScope.$broadcast('planningNodeChanged');\n    }\n}\n\nNavItemController.$inject = [\n    '$rootScope',\n    '$scope',\n    '$element',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default NavItemController;\n"]}