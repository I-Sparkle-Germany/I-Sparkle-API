{"version":3,"sources":["stepToolsController.es6"],"names":[],"mappings":"AAAA;;;;;;;;;;IAEM;AACF,aADE,aACF,CAAY,MAAZ,EACY,WADZ,EAEY,cAFZ,EAGY,kBAHZ,EAGgC;;;8BAJ9B,eAI8B;;AAE5B,aAAK,MAAL,GAAc,MAAd,CAF4B;AAG5B,aAAK,WAAL,GAAmB,WAAnB,CAH4B;AAI5B,aAAK,cAAL,GAAsB,cAAtB,CAJ4B;AAK5B,aAAK,kBAAL,GAA0B,kBAA1B,CAL4B;;AAO5B,aAAK,YAAL,GAAoB,KAAK,kBAAL,CAAwB,YAAxB;;;AAPQ,YAU5B,CAAK,SAAL,GAAiB,KAAK,cAAL,CAAoB,SAApB,CAVW;;AAY5B,aAAK,WAAL,GAZ4B;;AAc5B,aAAK,MAAL,CAAY,MAAZ,CACI,YAAM;AAAE,mBAAO,MAAK,QAAL,CAAT;SAAN,EACA,UAAC,KAAD,EAAQ,KAAR,EAAkB;AACd,gBAAI,UAAU,KAAV,EAAiB;;AAEjB,sBAAK,kBAAL,CAAwB,uCAAxB,CAAgE,KAAhE,EAFiB;aAArB;SADJ,CAFJ,CAd4B;;AAwB5B,aAAK,MAAL,CAAY,GAAZ,CAAgB,oBAAhB,EAAsC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACnD,kBAAK,WAAL,GADmD;SAAjB,CAAtC,CAxB4B;;AA4B5B,aAAK,MAAL,CAAY,GAAZ,CAAgB,qBAAhB,EAAuC,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACpD,kBAAK,WAAL,GADoD;SAAjB,CAAvC,CA5B4B;KAHhC;;iBADE;;sCAqCY;AACV,gBAAI,SAAS,KAAK,kBAAL,CAAwB,gBAAxB,EAAT,CADM;AAEV,gBAAI,CAAC,KAAK,cAAL,CAAoB,WAApB,CAAgC,MAAhC,CAAD,EAA0C;AAC1C,qBAAK,MAAL,GAAc,MAAd,CAD0C;AAE1C,qBAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,KAAK,MAAL,CAApC,CAF0C;;AAI1C,qBAAK,MAAL,GAAc,KAAK,WAAL,CAAiB,aAAjB,EAAd,CAJ0C;AAK1C,qBAAK,MAAL,GAAc,KAAK,WAAL,CAAiB,aAAjB,EAAd;;;AAL0C,oBAQ1C,CAAK,QAAL,GAAgB,KAAK,MAAL,CAR0B;aAA9C;;;;0CAYc;AACd,mBAAO,CAAC,KAAK,YAAL,GAAoB,KAAK,mBAAL,CAAyB,KAAK,MAAL,CAAzB,GAAwC,IAAxC,GAA+C,EAAnE,CAAD,GAA0E,KAAK,oBAAL,CAA0B,KAAK,MAAL,CAApG,CADO;;;;yCAIF;AACZ,mBAAO,KAAK,cAAL,CAAoB,YAApB,KAAqC,2CAArC,CADK;;;;6CAIK,QAAQ;AACzB,mBAAO,KAAK,cAAL,CAAoB,oBAApB,CAAyC,MAAzC,CAAP,CADyB;;;;4CAIT,QAAQ;AACxB,mBAAO,KAAK,cAAL,CAAoB,mBAApB,CAAwC,MAAxC,CAAP,CADwB;;;;oCAIhB,QAAQ;AAChB,mBAAO,KAAK,cAAL,CAAoB,WAApB,CAAgC,MAAhC,CAAP,CADgB;;;;uCAIL;AACX,iBAAK,WAAL,CAAiB,YAAjB,GADW;;;;uCAIA;AACX,iBAAK,WAAL,CAAiB,YAAjB,GADW;;;;oCAIH;AACR,iBAAK,WAAL,CAAiB,SAAjB,GADQ;;;;WA/EV;;;AAoFN,cAAc,OAAd,GAAwB,CACpB,QADoB,EAEpB,aAFoB,EAGpB,gBAHoB,EAIpB,oBAJoB,CAAxB;;kBAOe","file":"stepToolsController.js","sourcesContent":["\"use strict\";\n\nclass StepToolsCtrl {\n    constructor($scope,\n                NodeService,\n                ProjectService,\n                StudentDataService) {\n\n        this.$scope = $scope;\n        this.NodeService = NodeService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n\n        // service objects and utility functions\n        this.idToOrder = this.ProjectService.idToOrder;\n\n        this.updateModel();\n\n        this.$scope.$watch(\n            () => { return this.toNodeId; },\n            (newId, oldId) => {\n                if (newId !== oldId) {\n                    // selected node id has changed, so open new node\n                    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(newId);\n                }\n            }\n        );\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            this.updateModel();\n        });\n\n        this.$scope.$on('nodeStatusesChanged', (event, arge) => {\n            this.updateModel();\n        })\n    }\n\n    updateModel() {\n        var nodeId = this.StudentDataService.getCurrentNodeId();\n        if (!this.ProjectService.isGroupNode(nodeId)) {\n            this.nodeId = nodeId;\n            this.nodeStatus = this.nodeStatuses[this.nodeId];\n\n            this.prevId = this.NodeService.getPrevNodeId();\n            this.nextId = this.NodeService.getNextNodeId();\n\n            // model variable for selected node id\n            this.toNodeId = this.nodeId;\n        }\n    };\n\n    getSelectedText() {\n        return (this.showPosition ? this.getNodePositionById(this.nodeId) + ': ' : '') + this.getNodeTitleByNodeId(this.nodeId);\n    };\n\n    getTemplateUrl(){\n        return this.ProjectService.getThemePath() + '/themeComponents/stepTools/stepTools.html';\n    };\n\n    getNodeTitleByNodeId(nodeId) {\n        return this.ProjectService.getNodeTitleByNodeId(nodeId);\n    };\n\n    getNodePositionById(nodeId) {\n        return this.ProjectService.getNodePositionById(nodeId);\n    };\n\n    isGroupNode(nodeId) {\n        return this.ProjectService.isGroupNode(nodeId);\n    };\n\n    goToPrevNode() {\n        this.NodeService.goToPrevNode();\n    };\n\n    goToNextNode() {\n        this.NodeService.goToNextNode();\n    };\n\n    closeNode() {\n        this.NodeService.closeNode();\n    };\n}\n\nStepToolsCtrl.$inject = [\n    '$scope',\n    'NodeService',\n    'ProjectService',\n    'StudentDataService'\n];\n\nexport default StepToolsCtrl;\n"]}