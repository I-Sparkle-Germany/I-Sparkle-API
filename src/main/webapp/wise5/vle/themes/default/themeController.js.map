{"version":3,"sources":["themeController.es6"],"names":[],"mappings":"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","file":"themeController.js","sourcesContent":["'use strict';\n\nclass ThemeController {\n    constructor($scope,\n                $translate,\n                ConfigService,\n                ProjectService,\n                StudentDataService,\n                StudentStatusService,\n                NotebookService,\n                SessionService,\n                $mdDialog,\n                $mdToast,\n                $mdComponentRegistry) {\n\n        this.$scope = $scope;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.ProjectService = ProjectService;\n        this.StudentDataService = StudentDataService;\n        this.NotebookService = NotebookService;\n        this.SessionService = SessionService;\n        this.StudentStatusService = StudentStatusService;\n        this.$mdDialog = $mdDialog;\n        this.$mdToast = $mdToast;\n        this.$mdComponentRegistry = $mdComponentRegistry;\n\n        // TODO: set these variables dynamically from theme settings\n        this.layoutView = 'list'; // 'list' or 'card'\n        this.numberProject = true;\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.themeSettings = this.ProjectService.getThemeSettings();\n        this.hideTotalScores = this.themeSettings.hideTotalScores;\n\n        this.nodeStatuses = this.StudentDataService.nodeStatuses;\n\n        this.rootNode = this.ProjectService.rootNode;\n        this.rootNodeStatus = this.nodeStatuses[this.rootNode.id];\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        this.workgroupUserNames = this.ConfigService.getUserNamesByWorkgroupId(this.workgroupId);\n\n        // build project status pop-up\n        let statusTemplateUrl = this.themePath + '/templates/projectStatus.html';\n        let scope = this;\n\n        this.statusDisplay = this.$mdToast.build({\n            locals: {\n                projectStatus: scope.rootNodeStatus,\n                userNames: scope.workgroupUserNames\n            },\n            controller: 'ProjectStatusController',\n            bindToController: true,\n            templateUrl: statusTemplateUrl,\n            hideDelay: 0\n        });\n        this.projectStatusOpen = false;\n\n        // build server disconnect display\n        this.connectionLostDisplay = $mdToast.build({\n            template: '<md-toast>\\\n                      <span>Server error. Check your internet connection.</span>\\\n                      </md-toast>',\n            hideDelay: 0\n        });\n        this.connectionLostShown = false;\n\n        // alert user when a locked node has been clicked\n        this.$scope.$on('nodeClickLocked', (event, args) => {\n            let nodeId = args.nodeId;\n\n            // TODO: customize alert with constraint details, correct node term\n            this.$mdDialog.show(\n                this.$mdDialog.alert()\n                    .parent(angular.element(document.body))\n                    .title('Item Locked')\n                    .textContent('Sorry, you cannot view this item yet.')\n                    .ariaLabel('Item Locked')\n                    .ok('OK')\n                    .targetEvent(event)\n            );\n        });\n\n        // alert user when inactive for a long time\n        this.$scope.$on('showSessionWarning', (ev) => {\n            this.$translate([\"sessionTimeout\", \"autoLogoutMessage\", \"yes\", \"no\"]).then((translations) => {\n\n                let alert = this.$mdDialog.confirm()\n                    .parent(angular.element(document.body))\n                    .title(translations.sessionTimeout)\n                    .textContent(translations.autoLogoutMessage)\n                    .ariaLabel(translations.sessionTimeout)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(alert).then(() => {\n                    this.SessionService.renewSession();\n                    alert = undefined;\n                }, () => {\n                    this.SessionService.forceLogOut();\n                });\n\n            });\n        });\n\n        // alert user when server loses connection\n        this.$scope.$on('serverDisconnected', () => {\n            this.handleServerDisconnect();\n        });\n\n        // remove alert when server regains connection\n        this.$scope.$on('serverConnected', () => {\n            this.handleServerReconnect();\n        });\n\n        // alert user when attempt to add component state to notebook that already exists in notebook\n        // TODO: remove, deprecated\n        this.$scope.$on('notebookAddDuplicateAttempt', angular.bind(this, function (event, args) {\n            this.$mdDialog.show(\n                this.$mdDialog.alert()\n                    .parent(angular.element(document.body))\n                    .title('Item already exists in Notebook')\n                    .content('You can add another version of the item by making changes and then adding it again.')\n                    .ariaLabel('Notebook Duplicate')\n                    .clickOutsideToClose(true)\n                    .ok('OK')\n                    .targetEvent(event)\n            );\n        }));\n\n        // show list of revisions in a dialog when user clicks the show revisions link for a component\n        this.$scope.$on('showRevisions', (event, args) => {\n            let revisions = args.revisions;\n            let componentController = args.componentController;\n            let allowRevert = args.allowRevert;\n            let $event = args.$event;\n            let revisionsTemplateUrl = scope.themePath + '/templates/componentRevisions.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: revisionsTemplateUrl,\n                locals: {\n                    items: revisions.reverse(),\n                    componentController: componentController,\n                    allowRevert: allowRevert\n                },\n                controller: RevisionsController\n            });\n            function RevisionsController($scope, $mdDialog, items, componentController, allowRevert) {\n                $scope.items = items;\n                $scope.componentController = componentController;\n                $scope.allowRevert = allowRevert;\n                $scope.close = () => {\n                    $mdDialog.hide();\n                };\n                $scope.revertWork = (componentState) => {\n                    $scope.componentController.setStudentWork(componentState);\n                    $scope.componentController.studentDataChanged();\n                    $mdDialog.hide();\n                };\n            }\n            RevisionsController.$inject = [\"$scope\", \"$mdDialog\", \"items\", \"componentController\", \"allowRevert\"];\n        });\n\n        this.$scope.$on('showStudentAssets', (event, args) => {\n            let componentController = args.componentController;\n            let $event = args.$event;\n            let studentAssetDialogTemplateUrl = scope.themePath + '/templates/studentAssetDialog.html';\n            let studentAssetTemplateUrl = scope.themePath + '/studentAsset/studentAsset.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: studentAssetDialogTemplateUrl,\n                locals: {\n                    studentAssetTemplateUrl: studentAssetTemplateUrl,\n                    componentController: componentController\n                },\n                controller: StudentAssetDialogController\n            });\n            function StudentAssetDialogController($scope, $mdDialog, componentController) {\n                $scope.studentAssetTemplateUrl = studentAssetTemplateUrl;\n                $scope.componentController = componentController;\n                $scope.closeDialog = function () {\n                    $mdDialog.hide();\n                }\n            }\n            StudentAssetDialogController.$inject = [\"$scope\", \"$mdDialog\", \"componentController\"];\n        });\n\n        this.$scope.$on('showNotebook', angular.bind(this, function (event, args) {\n            alert('show notebook not implemented yet!');\n            /*\n             TODO: delete me after confirming that this is no longer used\n\n            let notebookFilters = args.notebookFilters;\n            let componentController = args.componentController;\n            let $event = args.$event;\n            let notebookDialogTemplateUrl = scope.themePath + '/templates/notebookDialog.html';\n            let notebookTemplateUrl = scope.themePath + '/notebook/notebook.html';\n\n            this.$mdDialog.show({\n                parent: angular.element(document.body),\n                targetEvent: $event,\n                templateUrl: notebookDialogTemplateUrl,\n                locals: {\n                    notebookFilters: notebookFilters,\n                    notebookTemplateUrl: notebookTemplateUrl,\n                    componentController: componentController\n                },\n                controller: NotebookDialogController\n            });\n            function NotebookDialogController($scope, $mdDialog, componentController) {\n                    $scope.notebookFilters = notebookFilters;\n                    $scope.notebookFilter = notebookFilters[0].name;\n                    $scope.notebookTemplateUrl = notebookTemplateUrl;\n                    $scope.componentController = componentController;\n                $scope.closeDialog = function () {\n                        $mdDialog.hide();\n                    }\n                }\n            NotebookDialogController.$inject = [\"$scope\", \"$mdDialog\", \"componentController\"];\n             */\n        }));\n\n        // capture notebook open/close events\n        this.$mdComponentRegistry.when('notebook').then(it => {\n            this.$scope.$watch(() => {\n                return it.isOpen();\n            }, (isOpenNewValue, isOpenOldValue) => {\n                if (isOpenNewValue !== isOpenOldValue) {\n                    let currentNode = this.StudentDataService.getCurrentNode();\n                    this.NotebookService.saveNotebookToggleEvent(isOpenNewValue, currentNode);\n                }\n            });\n        });\n    }\n\n    showProjectStatus($event) {\n        if (this.projectStatusOpen) {\n            this.$mdToast.hide(this.statusDisplay);\n            this.projectStatusOpen = false;\n        } else {\n            this.$mdToast.show(this.statusDisplay);\n            this.projectStatusOpen = true;\n        }\n    }\n\n    // show server error alert when connection is lost\n    handleServerDisconnect() {\n        if (!this.connectionLostShown) {\n          this.$mdToast.show(this.connectionLostDisplay);\n          this.connectionLostShown = true;\n        }\n    }\n\n    // hide server error alert when connection is restored\n    handleServerReconnect() {\n        this.$mdToast.hide(this.connectionLostDisplay);\n        this.connectionLostShown = false;\n    }\n\n    getAvatarColorForWorkgroupId (workgroupId) {\n        return this.StudentStatusService.getAvatarColorForWorkgroupId(workgroupId);\n    }\n}\n\n\nThemeController.$inject = [\n    '$scope',\n    '$translate',\n    'ConfigService',\n    'ProjectService',\n    'StudentDataService',\n    'StudentStatusService',\n    'NotebookService',\n    'SessionService',\n    '$mdDialog',\n    '$mdToast',\n    '$mdComponentRegistry'\n];\n\nexport default ThemeController;\n"]}