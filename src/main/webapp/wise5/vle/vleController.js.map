{"version":3,"sources":["vleController.es6"],"names":["VLEController","$scope","$rootScope","$filter","$mdDialog","$mdMenu","$state","AnnotationService","ConfigService","NotebookService","NotificationService","ProjectService","SessionService","StudentDataService","UtilService","$translate","workgroupId","getWorkgroupId","currentNode","pauseDialog","noteDialog","navFilters","getFilters","navFilter","name","projectStyle","getStyle","projectName","getProjectTitle","totalScore","getTotalScore","maxScore","notebookEnabled","isNotebookEnabled","notebookConfig","getNotebookConfig","reportItem","itemTypes","report","notes","constraintsDisabled","getConfigParam","script","getProjectScript","retrieveScript","then","Function","call","$on","event","args","previousNode","getCurrentNode","currentNodeId","id","updateStackHistory","updateVisitedNodesHistory","go","nodeId","componentId","componentType","category","eventName","eventData","eventNodeId","isGroupNode","saveVLEEvent","notifications","$watch","length","newValue","oldValue","newNotifications","getNewNotifications","notification","pauseScreen","unPauseScreen","snippableItems","imageObject","push","imageObjects","i","$","document","body","on","e","preventDefault","themePath","getThemePath","notebookItemPath","stateParams","stateParamNodeId","params","getLatestNodeEnteredEventNodeIdWithExistingNode","getStartNodeId","setCurrentNodeByNodeId","runStatus","getRunStatus","pause","periodId","getPeriodId","periods","p","tempPeriod","paused","$event","templateUrl","getCurrentNodeId","currentComponents","getComponentsByNodeId","c","currentComponent","$broadcast","show","parent","angular","element","targetEvent","clickOutsideToClose","locals","controller","NotebookContentSnippetController","controllerAs","bindToController","s","snippableItem","url","URL","createObjectURL","close","hide","chooseSnippet","addNewItem","$inject","endCurrentNodeAndSetCurrentNodeByNodeId","rootNode","mouseEventOccurred","getNewAmbientNotifications","newNotificationAggregates","timeDismissed","notificationNodeId","notificationType","type","newNotificationForNodeIdAndTypeExists","newNotificationAggregate","timeGenerated","latestNotificationTimestamp","notebookItemId","message","data","fromJson","annotationId","annotation","getAnnotationById","sort","n1","n2","filter","isAmbient","dismissCode","dismissNotification","ambientNotifications","currentNotification","notificationAggregate","goToNodeId","ev","template","escapeToClose","undefined","isPreview","hasActiveConstraints","activeConstraints","updateNodeStatuses","registerAdditionalProcessingFunction","additionalProcessingFunction","addAdditionalProcessingFunction","createAutoScoreAnnotation","runId","getRunId","toWorkgroupId","createAutoCommentAnnotation","getLatestAnnotationForComponent","annotationType","getLatestAnnotation","updateAnnotation","saveAnnotation","getMaxScoreForComponent"],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\n\nclass VLEController {\n  constructor(\n      $scope,\n      $rootScope,\n      $filter,\n      $mdDialog,\n      $mdMenu,\n      $state,\n      AnnotationService,\n      ConfigService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      SessionService,\n      StudentDataService,\n      UtilService) {\n    this.$scope = $scope;\n    this.$rootScope = $rootScope;\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$mdMenu = $mdMenu;\n    this.$state = $state;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NotebookService = NotebookService;\n    this.NotificationService = NotificationService;\n    this.ProjectService = ProjectService;\n    this.SessionService = SessionService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.workgroupId = this.ConfigService.getWorkgroupId();\n    this.currentNode = null;\n    this.pauseDialog = null;\n    this.noteDialog = null;\n\n    this.navFilters = this.ProjectService.getFilters();\n    this.navFilter = this.navFilters[0].name;\n\n    this.projectStyle = this.ProjectService.getStyle();\n    this.projectName = this.ProjectService.getProjectTitle();\n\n    // get the total score for the workgroup\n    this.totalScore = this.StudentDataService.getTotalScore();\n\n    // get the max possible score for the workgroup\n    this.maxScore = this.StudentDataService.maxScore;\n\n    this.notebookEnabled = this.NotebookService.isNotebookEnabled();\n\n    // get the notebook config\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    // Get report, if enabled; assume only one report for now\n    this.reportItem = this.notebookConfig.itemTypes.report.notes[0];\n\n    this.constraintsDisabled = false;\n\n    if (this.ConfigService.getConfigParam('constraints') == false) {\n      this.constraintsDisabled = true;\n    }\n\n    let script = this.ProjectService.getProjectScript();\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n\n    this.$scope.$on('currentNodeChanged', (event, args) => {\n      var previousNode = args.previousNode;\n      var currentNode = this.StudentDataService.getCurrentNode();\n      var currentNodeId = currentNode.id;\n\n      this.StudentDataService.updateStackHistory(currentNodeId);\n      this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\n\n      this.$state.go('root.vle', {nodeId:currentNodeId});\n\n      var componentId, componentType, category, eventName, eventData, eventNodeId;\n      if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\n        // going from group to node or group to group\n        componentId = null;\n        componentType = null;\n        category = \"Navigation\";\n        eventName = \"nodeExited\";\n        eventData = {\n          nodeId: previousNode.id\n        };\n        eventNodeId = previousNode.id;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n      }\n\n      if (this.ProjectService.isGroupNode(currentNodeId)) {\n        componentId = null;\n        componentType = null;\n        category = \"Navigation\";\n        eventName = \"nodeEntered\";\n        eventData = {\n          nodeId: currentNode.id\n        };\n        eventNodeId = currentNode.id;\n        this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n      }\n    });\n\n    this.notifications = this.NotificationService.notifications;\n    this.$scope.$watch(\n      () => {\n        return this.NotificationService.notifications.length;\n      },\n      (newValue, oldValue) => {\n        this.notifications = this.NotificationService.notifications;\n        this.newNotifications = this.getNewNotifications();\n      }\n    );\n\n    this.$scope.$on('notificationChanged', (event, notification) => {\n      // update new notifications\n      this.notifications = this.NotificationService.notifications;\n      this.newNotifications = this.getNewNotifications();\n    });\n\n    this.$scope.$on('componentStudentDataChanged', () => {\n\n    });\n\n    this.$scope.$on('pauseScreen', (event, args) => {\n      this.pauseScreen();\n    });\n\n    this.$scope.$on('unPauseScreen', (event, args) => {\n      this.unPauseScreen();\n    });\n\n    this.$scope.$on('requestImageCallback', (event, args) => {\n      if (this.snippableItems == null) {\n        this.snippableItems = [];\n      }\n\n      if (args.imageObject != null) {\n        this.snippableItems.push(args.imageObject);\n      }\n\n      if (args.imageObjects != null) {\n        for (var i = 0; i < args.imageObjects.length; i++) {\n          var imageObject = args.imageObjects[i];\n          if (imageObject != null) {\n            this.snippableItems.push(imageObject);\n          }\n        }\n      }\n    });\n\n    // Make sure if we drop something on the page we don't navigate away\n    // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\n    $(document.body).on('dragover', function(e) {\n      e.preventDefault();\n      return false;\n    });\n\n    $(document.body).on('drop', function(e){\n      e.preventDefault();\n      return false;\n    });\n\n    this.themePath = this.ProjectService.getThemePath();\n    this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\n\n    var nodeId = null;\n    var stateParams = null;\n    var stateParamNodeId = null;\n\n    if (this.$state != null) {\n      stateParams = this.$state.params;\n    }\n\n    if (stateParams != null) {\n      stateParamNodeId = stateParams.nodeId;\n    }\n\n    if (stateParamNodeId != null && stateParamNodeId !== '') {\n      nodeId = stateParamNodeId;\n    } else {\n      /*\n       * get the node id for the latest node entered event for an active\n       * node that exists in the project\n       */\n      nodeId = this.StudentDataService.getLatestNodeEnteredEventNodeIdWithExistingNode();\n    }\n\n    if (nodeId == null || nodeId === '') {\n      nodeId = this.ProjectService.getStartNodeId();\n    }\n\n    this.StudentDataService.setCurrentNodeByNodeId(nodeId);\n\n    var runStatus = this.StudentDataService.getRunStatus();\n    if (runStatus != null) {\n      var pause = false;\n      var periodId = this.ConfigService.getPeriodId();\n      if (periodId != null) {\n        var periods = runStatus.periods;\n        if (periods != null) {\n          for (var p = 0; p < periods.length; p++) {\n            var tempPeriod = periods[p];\n            if (periodId === tempPeriod.periodId) {\n              if (tempPeriod.paused) {\n                pause = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (pause) {\n        this.pauseScreen();\n      }\n    }\n  }\n\n  // TODO: remove and use inline clipping (with guidance)\n  snipNewNote($event) {\n    // Ask all of the components on the page for snippable items\n    let templateUrl = this.themePath + '/notebook/contentSnipper.html';\n\n    let currentNodeId = this.StudentDataService.getCurrentNodeId();\n    let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\n\n    /*\n     * initialize the snippable items array that will become populated\n     * with snippable items\n     */\n    this.snippableItems = [];\n\n    for (let c = 0; c < currentComponents.length; c++) {\n      let currentComponent = currentComponents[c];\n      var args = {};\n      args.nodeId = currentNodeId;\n      args.componentId = currentComponent.id;\n\n      this.$rootScope.$broadcast('requestImage', args);\n    }\n    this.$mdDialog.show({\n      parent: angular.element(document.body),\n      targetEvent: $event,\n      templateUrl: templateUrl,\n      clickOutsideToClose: true,\n      locals: {\n        snippableItems: this.snippableItems\n      },\n      controller: NotebookContentSnippetController,\n      controllerAs: 'notebookContentSnippetController',\n      bindToController: true\n    });\n    function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\n      $scope.NotebookService = NotebookService;\n      $scope.StudentDataService = StudentDataService;\n      $scope.ProjectService = ProjectService;\n      $scope.snippableItems = snippableItems;\n\n      for (var s = 0; s < snippableItems.length; s++) {\n        var snippableItem = snippableItems[s];\n        if (snippableItem != null) {\n          /*\n           * create a local browser URL for the snippable item so\n           * we can display it as an image\n           */\n          snippableItem.url = URL.createObjectURL(snippableItem);\n        }\n      }\n\n      $scope.close = () => {\n        $mdDialog.hide();\n      };\n      $scope.chooseSnippet = (snippableItem) => {\n        $scope.NotebookService.addNewItem($event, snippableItem);\n        $mdDialog.hide();\n      };\n    }\n\n    NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\n  }\n\n  goHome() {\n    var nodeId = null;\n    var componentId = null;\n    var componentType = null;\n    var category = \"Navigation\";\n    var event = \"goHomeButtonClicked\";\n    var eventData = {};\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n    this.$rootScope.$broadcast('goHome');\n  };\n\n  logOut() {\n    var nodeId = null;\n    var componentId = null;\n    var componentType = null;\n    var category = \"Navigation\";\n    var event = \"logOutButtonClicked\";\n    var eventData = {};\n    this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n    this.$rootScope.$broadcast('logOut');\n  };\n\n  loadRoot() {\n    this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\n  };\n\n  /**\n   * The user moved the mouse on the page\n   */\n  mouseMoved() {\n    // tell the session service a mouse event occurred\n    // so it can reset the session timeout timers\n    this.SessionService.mouseEventOccurred();\n  };\n\n  /**\n   * Returns true iff there are new notifications\n   */\n  hasNewNotifications() {\n    return this.newNotifications.length > 0;\n  }\n\n  /**\n   * Returns true iff there are new notifications of type 'ambient'\n   */\n  hasNewAmbientNotifications() {\n    return this.getNewAmbientNotifications().length > 0;\n  }\n\n  /**\n   * Returns all notifications that have not been dismissed yet\n   * The newNotifications is an array of notification aggregate objects that looks like this:\n   * [\n   *  {\n     *    \"nodeId\": \"node2\",\n     *    \"type\": \"DiscussionReply\",   // [\"DiscussionReply\", \"teacherToStudent\"]\n     *    \"notifications\": [{ id: 1117} , { id: 1120 }]      // array of actual undismissed notifications with this nodeId and type\n     *  },\n   *  ...\n   * ]\n   * The annotation aggregates will be sorted by latest first -> oldest last\n   */\n  getNewNotifications() {\n    let newNotificationAggregates = [];\n    for (let notification of this.notifications) {\n      if (notification.timeDismissed == null) {\n        let notificationNodeId = notification.nodeId;\n        let notificationType = notification.type;\n        let newNotificationForNodeIdAndTypeExists = false;\n        for (let newNotificationAggregate of newNotificationAggregates) {\n          if (newNotificationAggregate.nodeId == notificationNodeId && newNotificationAggregate.type == notificationType) {\n            newNotificationForNodeIdAndTypeExists = true;\n            newNotificationAggregate.notifications.push(notification);\n            if (notification.timeGenerated > newNotificationAggregate.latestNotificationTimestamp) {\n              newNotificationAggregate.latestNotificationTimestamp = notification.timeGenerated;\n            }\n          }\n        }\n        let notebookItemId = null;  // if this notification was created because teacher commented on a notebook report.\n        if (!newNotificationForNodeIdAndTypeExists) {\n          let message = \"\";\n          if (notificationType === \"DiscussionReply\") {\n            message = this.$translate('newRepliesOnDiscussionPost');\n          } else if (notificationType === \"teacherToStudent\") {\n            message = this.$translate('newFeedbackFromTeacher');\n            if (notification.data != null) {\n              if (typeof notification.data === 'string') {\n                notification.data = angular.fromJson(notification.data);\n              }\n\n              if (notification.data.annotationId != null) {\n                let annotation = this.AnnotationService.getAnnotationById(notification.data.annotationId);\n                if (annotation != null && annotation.notebookItemId != null) {\n                  notebookItemId = annotation.notebookItemId;\n                }\n              }\n            }\n          } else if (notificationType === \"CRaterResult\") {\n            message = this.$translate('newFeedback');\n          }\n          let newNotificationAggregate = {\n            latestNotificationTimestamp: notification.timeGenerated,\n            message: message,\n            nodeId: notificationNodeId,\n            notebookItemId: notebookItemId,\n            notifications: [notification],\n            type: notificationType\n          };\n          newNotificationAggregates.push(newNotificationAggregate);\n        }\n      }\n    }\n\n    // sort the aggregates by latestNotificationTimestamp, latest -> oldest\n    newNotificationAggregates.sort((n1, n2) => {\n      return n2.latestNotificationTimestamp - n1.latestNotificationTimestamp;\n    });\n    return newNotificationAggregates;\n  }\n\n  /**\n   * Returns all ambient notifications that have not been dismissed yet\n   */\n  getNewAmbientNotifications() {\n    return this.notifications.filter(\n      function(notification) {\n        let isAmbient = notification.data ? notification.data.isAmbient : false;\n        return (notification.timeDismissed == null && isAmbient);\n      }\n    );\n  }\n\n  /**\n   * Dismiss the specified notification\n   * @param notification\n   */\n  dismissNotification(event, notification) {\n    if (notification.data == null || notification.data.dismissCode == null) {\n      this.NotificationService.dismissNotification(notification);\n    } else {\n      // ask user to input dimiss code before dimissing it\n      let args = {\n        event: event,\n        notification: notification\n      };\n      this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n      this.$mdMenu.hide();\n    }\n  }\n\n  /**\n   * View the most recent ambient notification and allow teacher to input\n   * dismiss code\n   */\n  viewCurrentAmbientNotification(event) {\n    let ambientNotifications = this.getNewAmbientNotifications();\n    if (ambientNotifications.length) {\n      let currentNotification = ambientNotifications[0];\n      let args = {};\n      args.event = event;\n      args.notification = currentNotification;\n      this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n    }\n  }\n\n  /**\n   * Dismiss the notification aggregate object, which effectively dismisses all notifications\n   * for the nodeId and type of the aggregate object.\n   * @param event\n   * @param notificationAggregate\n   */\n  dismissNotificationAggregate(event, notificationAggregate) {\n    if (notificationAggregate != null && notificationAggregate.notifications != null) {\n      for (let notification of notificationAggregate.notifications) {\n        this.dismissNotification(event, notification);\n      }\n    }\n  };\n\n  /**\n   * Dismiss the specified notification aggregate object and visit the node\n   * @param notificationAggregate, which contains nodeId, type, and notifications of that nodeId and type\n   */\n  dismissNotificationAggregateAndVisitNode(event, notificationAggregate) {\n    if (notificationAggregate != null && notificationAggregate.notifications != null) {\n      for (let notification of notificationAggregate.notifications) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n          // only dismiss notifications that don't require a dismiss code,\n          // but still allow them to move to the node\n          this.dismissNotification(event, notification);\n        }\n      }\n    }\n\n    let goToNodeId = notificationAggregate.nodeId;\n    let notebookItemId = notificationAggregate.notebookItemId;\n    if (goToNodeId != null) {\n      this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n    } else if (notebookItemId != null) {\n      // assume notification with notebookItemId is for the report for now,\n      // as we don't currently support annotations on notes\n      this.$rootScope.$broadcast('showReportAnnotations', {ev: event});\n    }\n  }\n\n  pauseScreen() {\n    // TODO: i18n\n    this.pauseDialog = this.$mdDialog.show({\n      template: '<md-dialog aria-label=\"Screen Paused\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('yourTeacherHasPausedAllTheScreensInTheClass') + '</div></md-dialog-content></md-dialog>',\n      escapeToClose: false\n    });\n  }\n\n  unPauseScreen() {\n    this.$mdDialog.hide( this.pauseDialog, \"finished\" );\n    this.pauseDialog = undefined;\n  }\n\n  isPreview() {\n    return this.ConfigService.isPreview();\n  }\n\n  /**\n   * Check if there are any constraints in the project\n   * @return whether there are any constraints in the project\n   */\n  hasConstraints() {\n    var hasActiveConstraints = false;\n    var activeConstraints = this.ProjectService.activeConstraints;\n    if (activeConstraints != null && activeConstraints.length > 0) {\n      hasActiveConstraints = true;\n    }\n    return hasActiveConstraints;\n  }\n\n  /**\n   * Disable all the constraints\n   */\n  disableConstraints() {\n    if (this.ConfigService.isPreview()) {\n      this.constraintsDisabled = true;\n      this.ProjectService.activeConstraints = [];\n      /*\n       * update the node statuses so that they are re-evaluated now that\n       * all the constraints have been removed\n       */\n      this.StudentDataService.updateNodeStatuses();\n    }\n  }\n\n  /**\n   * Returns WISE API\n   */\n  getWISEAPI() {\n    return {\n      /**\n       * Registers a function that will be invoked before the componentState is saved to the server\n       * @param nodeId the node id\n       * @param componentId the component id\n       * @param additionalProcessingFunction the function to register for the specified node and component\n       */\n      registerAdditionalProcessingFunction: (nodeId, componentId, additionalProcessingFunction) => {\n        this.ProjectService.addAdditionalProcessingFunction(nodeId, componentId, additionalProcessingFunction);\n      },\n      /**\n       * Create an auto score annotation\n       * @param runId the run id\n       * @param periodId the period id\n       * @param nodeId the node id\n       * @param componentId the component id\n       * @param toWorkgroupId the student workgroup id\n       * @param data the annotation data\n       * @returns the auto score annotation\n       */\n      createAutoScoreAnnotation: (nodeId, componentId, data) => {\n        let runId = this.ConfigService.getRunId();\n        let periodId = this.ConfigService.getPeriodId();\n        let toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        return this.AnnotationService.createAutoScoreAnnotation(\n            runId, periodId, nodeId, componentId, toWorkgroupId, data);\n      },\n      /**\n       * Create an auto comment annotation\n       * @param runId the run id\n       * @param periodId the period id\n       * @param nodeId the node id\n       * @param componentId the component id\n       * @param toWorkgroupId the student workgroup id\n       * @param data the annotation data\n       * @returns the auto comment annotation\n       */\n      createAutoCommentAnnotation: (nodeId, componentId, data) => {\n        let runId = this.ConfigService.getRunId();\n        let periodId = this.ConfigService.getPeriodId();\n        let toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n        return this.AnnotationService.createAutoCommentAnnotation(\n            runId, periodId, nodeId, componentId, toWorkgroupId, data);\n      },\n      /**\n       * Gets the latest annotation for the specified node, component, and type\n       * @param nodeId\n       * @param componentId\n       * @param annotationType\n       * @returns {the|Object}\n       */\n      getLatestAnnotationForComponent: (nodeId, componentId, annotationType) => {\n        let params = {\n          \"nodeId\": nodeId,\n          \"componentId\": componentId,\n          \"type\": annotationType\n        };\n        return this.AnnotationService.getLatestAnnotation(params);\n      },\n      /**\n       * Updates the annotation locally and on the server\n       * @param annotation\n       */\n      updateAnnotation: (annotation) => {\n        this.AnnotationService.saveAnnotation(annotation);\n      },\n      /**\n       * Returns the maxScore for the specified node and component\n       * @param nodeId the node id\n       * @param componentId the component id\n       * @returns the max score for the component\n       */\n      getMaxScoreForComponent: (nodeId, componentId) => {\n        return this.ProjectService.getMaxScoreForComponent(nodeId, componentId);\n      }\n    }\n  }\n}\n\nVLEController.$inject = [\n  '$scope',\n  '$rootScope',\n  '$filter',\n  '$mdDialog',\n  '$mdMenu',\n  '$state',\n  'AnnotationService',\n  'ConfigService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'SessionService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default VLEController;\n"]}