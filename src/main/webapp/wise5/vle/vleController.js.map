{"version":3,"sources":["vleController.es6"],"names":["VLEController","$scope","$rootScope","$filter","$mdDialog","$mdMenu","$state","AnnotationService","ConfigService","NotebookService","NotificationService","ProjectService","SessionService","StudentDataService","UtilService","$translate","workgroupId","getWorkgroupId","currentNode","pauseDialog","noteDialog","navFilters","getFilters","navFilter","name","projectStyle","getStyle","projectName","getProjectTitle","totalScore","getTotalScore","maxScore","notebookEnabled","isNotebookEnabled","notebookConfig","getNotebookConfig","reportItem","itemTypes","report","notes","constraintsDisabled","getConfigParam","script","getProjectScript","retrieveScript","then","Function","call","$on","event","args","previousNode","getCurrentNode","currentNodeId","id","updateStackHistory","updateVisitedNodesHistory","go","nodeId","componentId","componentType","category","eventName","eventData","eventNodeId","isGroupNode","saveVLEEvent","notifications","$watch","length","newValue","oldValue","newNotifications","getNewNotifications","notification","updateNodeStatuses","pauseScreen","unPauseScreen","snippableItems","imageObject","push","imageObjects","i","$","document","body","on","e","preventDefault","themePath","getThemePath","notebookItemPath","stateParams","stateParamNodeId","params","getLatestNodeEnteredEventNodeIdWithExistingNode","getStartNodeId","setCurrentNodeByNodeId","runStatus","getRunStatus","pause","periodId","getPeriodId","periods","p","tempPeriod","paused","$event","templateUrl","getCurrentNodeId","currentComponents","getComponentsByNodeId","c","currentComponent","$broadcast","show","parent","angular","element","targetEvent","clickOutsideToClose","locals","controller","NotebookContentSnippetController","controllerAs","bindToController","s","snippableItem","url","URL","createObjectURL","close","hide","chooseSnippet","addNewItem","$inject","endCurrentNodeAndSetCurrentNodeByNodeId","rootNode","mouseEventOccurred","getNewAmbientNotifications","newNotificationAggregates","timeDismissed","notificationNodeId","notificationType","type","newNotificationForNodeIdAndTypeExists","newNotificationAggregate","timeGenerated","latestNotificationTimestamp","notebookItemId","message","data","fromJson","annotationId","annotation","getAnnotationById","sort","n1","n2","filter","isAmbient","dismissCode","dismissNotification","ambientNotifications","currentNotification","notificationAggregate","goToNodeId","ev","template","escapeToClose","undefined","isPreview","hasActiveConstraints","activeConstraints","registerAdditionalProcessingFunction","additionalProcessingFunction","addAdditionalProcessingFunction","createAutoScoreAnnotation","runId","getRunId","toWorkgroupId","createAutoCommentAnnotation","getLatestAnnotationForComponent","annotationType","getLatestAnnotation","updateAnnotation","saveAnnotation","getMaxScoreForComponent"],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\r\n\r\nclass VLEController {\r\n    constructor($scope,\r\n                $rootScope,\r\n                $filter,\r\n                $mdDialog,\r\n                $mdMenu,\r\n                $state,\r\n                AnnotationService,\r\n                ConfigService,\r\n                NotebookService,\r\n                NotificationService,\r\n                ProjectService,\r\n                SessionService,\r\n                StudentDataService,\r\n                UtilService) {\r\n\r\n        this.$scope = $scope;\r\n        this.$rootScope = $rootScope;\r\n        this.$filter = $filter;\r\n        this.$mdDialog = $mdDialog;\r\n        this.$mdMenu = $mdMenu;\r\n        this.$state = $state;\r\n        this.AnnotationService = AnnotationService;\r\n        this.ConfigService = ConfigService;\r\n        this.NotebookService = NotebookService;\r\n        this.NotificationService = NotificationService;\r\n        this.ProjectService = ProjectService;\r\n        this.SessionService = SessionService;\r\n        this.StudentDataService = StudentDataService;\r\n        this.UtilService = UtilService;\r\n\r\n        this.$translate = this.$filter('translate');\r\n\r\n        this.workgroupId = this.ConfigService.getWorkgroupId();\r\n        this.currentNode = null;\r\n        this.pauseDialog = null;\r\n        this.noteDialog = null;\r\n\r\n        this.navFilters = this.ProjectService.getFilters();\r\n        this.navFilter = this.navFilters[0].name;\r\n\r\n        this.projectStyle = this.ProjectService.getStyle();\r\n        this.projectName = this.ProjectService.getProjectTitle();\r\n\r\n        // get the total score for the workgroup\r\n        this.totalScore = this.StudentDataService.getTotalScore();\r\n\r\n        // get the max possible score for the workgroup\r\n        this.maxScore = this.StudentDataService.maxScore;\r\n\r\n        this.notebookEnabled = this.NotebookService.isNotebookEnabled();\r\n\r\n        // get the notebook config\r\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\r\n        // Get report, if enabled; assume only one report for now\r\n        this.reportItem = this.notebookConfig.itemTypes.report.notes[0];\r\n\r\n        // whether constraints have been disabled\r\n        this.constraintsDisabled = false;\r\n\r\n        if (this.ConfigService.getConfigParam('constraints') == false) {\r\n            // constraints are disabled\r\n            this.constraintsDisabled = true;\r\n        }\r\n\r\n        // load project-level scripts, if any\r\n        let script = this.ProjectService.getProjectScript();\r\n        if (script != null) {\r\n            this.ProjectService.retrieveScript(script).then((script) => {\r\n                new Function(script).call(this);\r\n            });\r\n        }\r\n\r\n        this.$scope.$on('currentNodeChanged', (event, args) => {\r\n            var previousNode = args.previousNode;\r\n            var currentNode = this.StudentDataService.getCurrentNode();\r\n            var currentNodeId = currentNode.id;\r\n\r\n            this.StudentDataService.updateStackHistory(currentNodeId);\r\n            this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\r\n\r\n            //this.AnnotationService.updateAnnotations();\r\n\r\n            this.$state.go('root.vle', {nodeId:currentNodeId});\r\n\r\n            var componentId, componentType, category, eventName, eventData, eventNodeId;\r\n            if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\r\n                // going from group to node or group to group\r\n                componentId = null;\r\n                componentType = null;\r\n                category = \"Navigation\";\r\n                eventName = \"nodeExited\";\r\n                eventData = {\r\n                    nodeId: previousNode.id\r\n                };\r\n                eventNodeId = previousNode.id;\r\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\r\n            }\r\n\r\n            if (this.ProjectService.isGroupNode(currentNodeId)) {\r\n                // save nodeEntered event if this is a group\r\n                componentId = null;\r\n                componentType = null;\r\n                category = \"Navigation\";\r\n                eventName = \"nodeEntered\";\r\n                eventData = {\r\n                    nodeId: currentNode.id\r\n                };\r\n                eventNodeId = currentNode.id;\r\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\r\n            }\r\n        });\r\n\r\n        this.notifications = this.NotificationService.notifications;\r\n        // watch for changes in notifications\r\n        this.$scope.$watch(\r\n            () => {\r\n                return this.NotificationService.notifications.length;\r\n            },\r\n            (newValue, oldValue) => {\r\n                this.notifications = this.NotificationService.notifications;\r\n                this.newNotifications = this.getNewNotifications();\r\n            }\r\n        );\r\n\r\n        this.$scope.$on('notificationChanged', (event, notification) => {\r\n            // update new notifications\r\n            this.notifications = this.NotificationService.notifications;\r\n            this.newNotifications = this.getNewNotifications();\r\n        });\r\n\r\n        this.$scope.$on('componentStudentDataChanged', () => {\r\n            this.StudentDataService.updateNodeStatuses();\r\n        });\r\n\r\n        // listen for the pause screen event\r\n        this.$scope.$on('pauseScreen', (event, args) => {\r\n            this.pauseScreen();\r\n        });\r\n\r\n        // listen for the unpause screen event\r\n        this.$scope.$on('unPauseScreen', (event, args) => {\r\n            this.unPauseScreen();\r\n        });\r\n\r\n        this.$scope.$on('requestImageCallback', (event, args) => {\r\n\r\n            // initialize the snippable items\r\n            if (this.snippableItems == null) {\r\n                this.snippableItems = [];\r\n            }\r\n\r\n            if (args.imageObject != null) {\r\n                // add the image object as a snippable item\r\n                this.snippableItems.push(args.imageObject);\r\n            }\r\n\r\n            if (args.imageObjects != null) {\r\n\r\n                // loop through the image objects\r\n                for (var i = 0; i < args.imageObjects.length; i++) {\r\n\r\n                    var imageObject = args.imageObjects[i];\r\n\r\n                    if (imageObject != null) {\r\n                        // add the image object as a snippable item\r\n                        this.snippableItems.push(imageObject);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Make sure if we drop something on the page we don't navigate away\r\n        // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\r\n        $(document.body).on('dragover', function(e) {\r\n            e.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        $(document.body).on('drop', function(e){\r\n            e.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        this.themePath = this.ProjectService.getThemePath();\r\n        this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\r\n\r\n        var nodeId = null;\r\n        var stateParams = null;\r\n        var stateParamNodeId = null;\r\n\r\n        if (this.$state != null) {\r\n            stateParams = this.$state.params;\r\n        }\r\n\r\n        if (stateParams != null) {\r\n            stateParamNodeId = stateParams.nodeId;\r\n        }\r\n\r\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\r\n            nodeId = stateParamNodeId;\r\n        } else {\r\n            /*\r\n             * get the node id for the latest node entered event for an active\r\n             * node that exists in the project\r\n             */\r\n            nodeId = this.StudentDataService.getLatestNodeEnteredEventNodeIdWithExistingNode();\r\n        }\r\n\r\n        if (nodeId == null || nodeId === '') {\r\n            nodeId = this.ProjectService.getStartNodeId();\r\n        }\r\n\r\n        this.StudentDataService.setCurrentNodeByNodeId(nodeId);\r\n\r\n        // get the run status to see if the period is currently paused\r\n        var runStatus = this.StudentDataService.getRunStatus();\r\n\r\n        if (runStatus != null) {\r\n            var pause = false;\r\n\r\n            // get the signed in user's period id\r\n            var periodId = this.ConfigService.getPeriodId();\r\n\r\n            if (periodId != null) {\r\n                var periods = runStatus.periods;\r\n\r\n                if (periods != null) {\r\n\r\n                    // loop through all the periods in the run status\r\n                    for (var p = 0; p < periods.length; p++) {\r\n                        var tempPeriod = periods[p];\r\n\r\n                        if (periodId === tempPeriod.periodId) {\r\n                            if (tempPeriod.paused) {\r\n                                // our period is paused so we will pause the screen\r\n                                pause = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (pause) {\r\n                this.pauseScreen();\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: remove and use inline clipping (with guidance)\r\n    snipNewNote($event) {\r\n        // Ask all of the components on the page for snippable items\r\n        let templateUrl = this.themePath + '/notebook/contentSnipper.html';\r\n\r\n        let currentNodeId = this.StudentDataService.getCurrentNodeId();\r\n        let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\r\n\r\n        /*\r\n         * initialize the snippable items array that will become populated\r\n         * with snippable items\r\n         */\r\n        this.snippableItems = [];\r\n\r\n        for (let c = 0; c < currentComponents.length; c++) {\r\n            let currentComponent = currentComponents[c];\r\n            var args = {};\r\n            args.nodeId = currentNodeId;\r\n            args.componentId = currentComponent.id;\r\n\r\n            this.$rootScope.$broadcast('requestImage', args);\r\n        }\r\n        this.$mdDialog.show({\r\n            parent: angular.element(document.body),\r\n            targetEvent: $event,\r\n            templateUrl: templateUrl,\r\n            clickOutsideToClose: true,\r\n            locals: {\r\n                snippableItems: this.snippableItems\r\n            },\r\n            controller: NotebookContentSnippetController,\r\n            controllerAs: 'notebookContentSnippetController',\r\n            bindToController: true\r\n        });\r\n        function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\r\n            $scope.NotebookService = NotebookService;\r\n            $scope.StudentDataService = StudentDataService;\r\n            $scope.ProjectService = ProjectService;\r\n            $scope.snippableItems = snippableItems;\r\n\r\n            // loop through the snippable items\r\n            for (var s = 0; s < snippableItems.length; s++) {\r\n                var snippableItem = snippableItems[s];\r\n\r\n                if (snippableItem != null) {\r\n                    /*\r\n                     * create a local browser URL for the snippable item so\r\n                     * we can display it as an image\r\n                     */\r\n                    snippableItem.url = URL.createObjectURL(snippableItem);\r\n                }\r\n            }\r\n\r\n            $scope.close = () => {\r\n                $mdDialog.hide();\r\n            };\r\n            $scope.chooseSnippet = (snippableItem) => {\r\n\r\n                // add the snippable item\r\n                $scope.NotebookService.addNewItem($event, snippableItem);\r\n\r\n                $mdDialog.hide();\r\n            };\r\n        }\r\n\r\n        NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\r\n    }\r\n\r\n    goHome() {\r\n        // save goHome event\r\n        var nodeId = null;\r\n        var componentId = null;\r\n        var componentType = null;\r\n        var category = \"Navigation\";\r\n        var event = \"goHomeButtonClicked\";\r\n        var eventData = {};\r\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\r\n\r\n        this.$rootScope.$broadcast('goHome');\r\n    };\r\n\r\n    logOut() {\r\n        // save logOut event\r\n        var nodeId = null;\r\n        var componentId = null;\r\n        var componentType = null;\r\n        var category = \"Navigation\";\r\n        var event = \"logOutButtonClicked\";\r\n        var eventData = {};\r\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\r\n\r\n        this.$rootScope.$broadcast('logOut');\r\n    };\r\n\r\n    loadRoot() {\r\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\r\n    };\r\n\r\n    /**\r\n     * The user moved the mouse on the page\r\n     */\r\n    mouseMoved() {\r\n        // tell the session service a mouse event occurred\r\n        // so it can reset the session timeout timers\r\n        this.SessionService.mouseEventOccurred();\r\n    };\r\n\r\n    /**\r\n     * Returns true iff there are new notifications\r\n     */\r\n    hasNewNotifications() {\r\n        return this.newNotifications.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true iff there are new notifications of type 'ambient'\r\n     */\r\n    hasNewAmbientNotifications() {\r\n        return this.getNewAmbientNotifications().length > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns all notifications that have not been dismissed yet\r\n     * The newNotifications is an array of notification aggregate objects that looks like this:\r\n     * [\r\n     *  {\r\n     *    \"nodeId\": \"node2\",\r\n     *    \"type\": \"DiscussionReply\",   // [\"DiscussionReply\", \"teacherToStudent\"]\r\n     *    \"notifications\": [{ id: 1117} , { id: 1120 }]      // array of actual undismissed notifications with this nodeId and type\r\n     *  },\r\n     *  ...\r\n     * ]\r\n     * The annotation aggregates will be sorted by latest first -> oldest last\r\n     */\r\n    getNewNotifications() {\r\n        let newNotificationAggregates = [];\r\n        // get activeNotifications\r\n        for (let notification of this.notifications) {\r\n            if (notification.timeDismissed == null) {\r\n                // go through all the undimissed notifications and populate the newNotifications array\r\n                let notificationNodeId = notification.nodeId;\r\n                let notificationType = notification.type;\r\n                let newNotificationForNodeIdAndTypeExists = false;\r\n                for (let newNotificationAggregate of newNotificationAggregates) {\r\n                    if (newNotificationAggregate.nodeId == notificationNodeId && newNotificationAggregate.type == notificationType) {\r\n                        newNotificationForNodeIdAndTypeExists = true;\r\n                        newNotificationAggregate.notifications.push(notification);\r\n                        // update latestNotificationTimestamp if needed\r\n                        if (notification.timeGenerated > newNotificationAggregate.latestNotificationTimestamp) {\r\n                            newNotificationAggregate.latestNotificationTimestamp = notification.timeGenerated;\r\n                        }\r\n                    }\r\n                }\r\n                let notebookItemId = null;  // if this notification was created because teacher commented on a notebook report.\r\n                if (!newNotificationForNodeIdAndTypeExists) {\r\n                    let message = \"\";\r\n                    if (notificationType === \"DiscussionReply\") {\r\n                        message = this.$translate('newRepliesOnDiscussionPost');\r\n                    } else if (notificationType === \"teacherToStudent\") {\r\n                        message = this.$translate('newFeedbackFromTeacher');\r\n                        if (notification.data != null) {\r\n                            if (typeof notification.data === 'string') {\r\n                                notification.data = angular.fromJson(notification.data);\r\n                            }\r\n\r\n                            if (notification.data.annotationId != null) {\r\n                                let annotation = this.AnnotationService.getAnnotationById(notification.data.annotationId);\r\n                                if (annotation != null && annotation.notebookItemId != null) {\r\n                                    notebookItemId = annotation.notebookItemId;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (notificationType === \"CRaterResult\") {\r\n                        message = this.$translate('newFeedback');\r\n                    }\r\n                    let newNotificationAggregate = {\r\n                        latestNotificationTimestamp: notification.timeGenerated,\r\n                        message: message,\r\n                        nodeId: notificationNodeId,\r\n                        notebookItemId: notebookItemId,\r\n                        notifications: [notification],\r\n                        type: notificationType\r\n                    };\r\n                    newNotificationAggregates.push(newNotificationAggregate);\r\n                }\r\n            }\r\n        }\r\n\r\n        // now sort the aggregates by latestNotificationTimestamp, latest -> oldest\r\n        newNotificationAggregates.sort((n1, n2) => {\r\n            return n2.latestNotificationTimestamp - n1.latestNotificationTimestamp;\r\n        });\r\n        return newNotificationAggregates;\r\n    }\r\n\r\n    /**\r\n     * Returns all ambient notifications that have not been dismissed yet\r\n     */\r\n    getNewAmbientNotifications() {\r\n        return this.notifications.filter(\r\n            function(notification) {\r\n                let isAmbient = notification.data ? notification.data.isAmbient : false;\r\n                return (notification.timeDismissed == null && isAmbient);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Dismiss the specified notification\r\n     * @param notification\r\n     */\r\n    dismissNotification(event, notification) {\r\n        if (notification.data == null || notification.data.dismissCode == null) {\r\n            // no dismiss code needed, so we can dismiss it\r\n            this.NotificationService.dismissNotification(notification);\r\n        } else {\r\n            // ask user to input dimiss code before dimissing it\r\n            let args = {\r\n                event: event,\r\n                notification: notification\r\n            };\r\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\r\n\r\n            // hide any open menus (i.e. the notifications menu)\r\n            this.$mdMenu.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * View the most recent ambient notification and allow teacher to input\r\n     * dismiss code\r\n     */\r\n    viewCurrentAmbientNotification(event) {\r\n        let ambientNotifications = this.getNewAmbientNotifications();\r\n        if (ambientNotifications.length) {\r\n            let currentNotification = ambientNotifications[0];\r\n            let args = {};\r\n            args.event = event;\r\n            args.notification = currentNotification;\r\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dismiss the notification aggregate object, which effectively dismisses all notifications\r\n     * for the nodeId and type of the aggregate object.\r\n     * @param event\r\n     * @param notificationAggregate\r\n     */\r\n    dismissNotificationAggregate(event, notificationAggregate) {\r\n        if (notificationAggregate != null && notificationAggregate.notifications != null) {\r\n            for (let notification of notificationAggregate.notifications) {\r\n                this.dismissNotification(event, notification);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Dismiss the specified notification aggregate object and visit the node\r\n     * @param notificationAggregate, which contains nodeId, type, and notifications of that nodeId and type\r\n     */\r\n    dismissNotificationAggregateAndVisitNode(event, notificationAggregate) {\r\n        if (notificationAggregate != null && notificationAggregate.notifications != null) {\r\n            for (let notification of notificationAggregate.notifications) {\r\n                if (notification.data == null || notification.data.dismissCode == null) {\r\n                    // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\r\n                    this.dismissNotification(event, notification);\r\n                }\r\n            }\r\n        }\r\n\r\n        let goToNodeId = notificationAggregate.nodeId;\r\n        let notebookItemId = notificationAggregate.notebookItemId;\r\n        if (goToNodeId != null) {\r\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\r\n        } else if (notebookItemId != null) {\r\n            // assume notification with notebookItemId is for the report for now,\r\n            // as we don't currently support annotations on notes\r\n\r\n            // show report annotations\r\n            this.$rootScope.$broadcast('showReportAnnotations', {ev: event});\r\n\r\n            /*let notebookItem = this.NotebookService.getNotebookItemByNotebookItemId(notebookItemId, this.workgroupId);\r\n            if (notebookItem != null) {\r\n\r\n\r\n                if (notebookItem.type === \"note\") {\r\n                    // open note view\r\n                    this.$rootScope.$broadcast('setNotebookFilter', {filter: \"note\", ev: event});\r\n                    this.$rootScope.$broadcast('toggleNotebook', {ev: event, open: true});\r\n                } else if (notebookItem.type === \"report\") {\r\n                    // open report view\r\n                    this.$rootScope.$broadcast('setNotebookFilter', {filter: \"report\", ev: event});\r\n                    this.$rootScope.$broadcast('toggleNotebook', {ev: event, open: true});\r\n                }\r\n            }*/\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pause the screen\r\n     */\r\n    pauseScreen() {\r\n        // TODO: i18n\r\n        this.pauseDialog = this.$mdDialog.show({\r\n            template: '<md-dialog aria-label=\"Screen Paused\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('yourTeacherHasPausedAllTheScreensInTheClass') + '</div></md-dialog-content></md-dialog>',\r\n            escapeToClose: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unpause the screen\r\n     */\r\n    unPauseScreen() {\r\n        this.$mdDialog.hide( this.pauseDialog, \"finished\" );\r\n        this.pauseDialog = undefined;\r\n    }\r\n\r\n    /**\r\n     * Check if the VLE is in preview mode\r\n     * @return whether the VLE is in preview mode\r\n     */\r\n    isPreview() {\r\n        return this.ConfigService.isPreview();\r\n    }\r\n\r\n    /**\r\n     * Check if there are any constraints in the project\r\n     * @return whether there are any constraints in the project\r\n     */\r\n    hasConstraints() {\r\n\r\n        var hasActiveConstraints = false;\r\n\r\n        // get the active constraints\r\n        var activeConstraints = this.ProjectService.activeConstraints;\r\n\r\n        if (activeConstraints != null && activeConstraints.length > 0) {\r\n            // there are active constraints\r\n            hasActiveConstraints = true;\r\n        }\r\n\r\n        return hasActiveConstraints;\r\n    }\r\n\r\n    /**\r\n     * Disable all the constraints\r\n     */\r\n    disableConstraints() {\r\n\r\n        // check if we are in preview mode\r\n        if (this.ConfigService.isPreview()) {\r\n            // we are in preview mode so we will disable all the constraints\r\n\r\n            this.constraintsDisabled = true;\r\n\r\n            // clear all the active constraints\r\n            this.ProjectService.activeConstraints = [];\r\n\r\n            /*\r\n             * update the node statuses so that they are re-evaluated now that\r\n             * all the constraints have been removed\r\n             */\r\n            this.StudentDataService.updateNodeStatuses();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns WISE API\r\n     */\r\n    getWISEAPI() {\r\n        return {\r\n            /**\r\n             * Registers a function that will be invoked before the componentState is saved to the server\r\n             * @param nodeId the node id\r\n             * @param componentId the component id\r\n             * @param additionalProcessingFunction the function to register for the specified node and component\r\n             */\r\n            registerAdditionalProcessingFunction: (nodeId, componentId, additionalProcessingFunction) => {\r\n                this.ProjectService.addAdditionalProcessingFunction(nodeId, componentId, additionalProcessingFunction);\r\n            },\r\n            /**\r\n             * Create an auto score annotation\r\n             * @param runId the run id\r\n             * @param periodId the period id\r\n             * @param nodeId the node id\r\n             * @param componentId the component id\r\n             * @param toWorkgroupId the student workgroup id\r\n             * @param data the annotation data\r\n             * @returns the auto score annotation\r\n             */\r\n            createAutoScoreAnnotation: (nodeId, componentId, data) => {\r\n\r\n                let runId = this.ConfigService.getRunId();\r\n                let periodId = this.ConfigService.getPeriodId();\r\n                let toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n                // create the auto score annotation\r\n                let annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\r\n\r\n                return annotation;\r\n            },\r\n            /**\r\n             * Create an auto comment annotation\r\n             * @param runId the run id\r\n             * @param periodId the period id\r\n             * @param nodeId the node id\r\n             * @param componentId the component id\r\n             * @param toWorkgroupId the student workgroup id\r\n             * @param data the annotation data\r\n             * @returns the auto comment annotation\r\n             */\r\n            createAutoCommentAnnotation: (nodeId, componentId, data) => {\r\n\r\n                let runId = this.ConfigService.getRunId();\r\n                let periodId = this.ConfigService.getPeriodId();\r\n                let toWorkgroupId = this.ConfigService.getWorkgroupId();\r\n\r\n                // create the auto comment annotation\r\n                let annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\r\n\r\n                return annotation;\r\n            },\r\n            /**\r\n             * Gets the latest annotation for the specified node, component, and type\r\n             * @param nodeId\r\n             * @param componentId\r\n             * @param annotationType\r\n             * @returns {the|Object}\r\n             */\r\n            getLatestAnnotationForComponent: (nodeId, componentId, annotationType) => {\r\n                let params = {\r\n                    \"nodeId\": nodeId,\r\n                    \"componentId\": componentId,\r\n                    \"type\": annotationType\r\n                };\r\n                let annotation = this.AnnotationService.getLatestAnnotation(params);\r\n                return annotation;\r\n            },\r\n            /**\r\n             * Updates the annotation locally and on the server\r\n             * @param annotation\r\n             */\r\n            updateAnnotation: (annotation) => {\r\n                this.AnnotationService.saveAnnotation(annotation);\r\n            },\r\n            /**\r\n             * Returns the maxScore for the specified node and component\r\n             * @param nodeId the node id\r\n             * @param componentId the component id\r\n             * @returns the max score for the component\r\n             */\r\n            getMaxScoreForComponent: (nodeId, componentId) => {\r\n                return this.ProjectService.getMaxScoreForComponent(nodeId, componentId);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nVLEController.$inject = [\r\n    '$scope',\r\n    '$rootScope',\r\n    '$filter',\r\n    '$mdDialog',\r\n    '$mdMenu',\r\n    '$state',\r\n    'AnnotationService',\r\n    'ConfigService',\r\n    'NotebookService',\r\n    'NotificationService',\r\n    'ProjectService',\r\n    'SessionService',\r\n    'StudentDataService',\r\n    'UtilService'\r\n];\r\n\r\nexport default VLEController;\r\n"]}