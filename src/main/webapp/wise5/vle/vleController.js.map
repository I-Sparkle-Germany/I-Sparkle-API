{"version":3,"sources":["vleController.es6"],"names":["VLEController","$scope","$rootScope","$filter","$mdDialog","$mdMenu","$state","AnnotationService","ConfigService","NotebookService","NotificationService","ProjectService","SessionService","StudentDataService","UtilService","$translate","workgroupId","getWorkgroupId","currentNode","pauseDialog","noteDialog","navFilters","getFilters","navFilter","name","projectStyle","getStyle","projectName","getProjectTitle","totalScore","getTotalScore","maxScore","getMaxScore","notebookConfig","getNotebookConfig","reportItem","itemTypes","report","notes","$on","event","args","previousNode","getCurrentNode","currentNodeId","id","updateStackHistory","updateVisitedNodesHistory","updateNodeStatuses","saveStudentStatus","go","nodeId","componentId","componentType","category","eventName","eventData","eventNodeId","isGroupNode","saveVLEEvent","notifications","$watch","length","newValue","oldValue","newNotifications","getNewNotifications","notification","pauseScreen","unPauseScreen","snippableItems","imageObject","push","imageObjects","i","$","document","body","on","e","preventDefault","themePath","getThemePath","notebookItemPath","stateParams","stateParamNodeId","params","getLatestNodeEnteredEventNodeIdWithExistingNode","getStartNodeId","setCurrentNodeByNodeId","runStatus","getRunStatus","pause","periodId","getPeriodId","periods","p","tempPeriod","paused","isNotebookEnabled","$event","templateUrl","getCurrentNodeId","currentComponents","getComponentsByNodeId","c","currentComponent","$broadcast","show","parent","angular","element","targetEvent","clickOutsideToClose","locals","controller","NotebookContentSnippetController","controllerAs","bindToController","s","snippableItem","url","URL","createObjectURL","close","hide","chooseSnippet","addNewItem","$inject","endCurrentNodeAndSetCurrentNodeByNodeId","rootNode","mouseEventOccurred","getNewAmbientNotifications","newNotificationAggregates","timeDismissed","notificationNodeId","notificationType","type","newNotificationForNodeIdAndTypeExists","newNotificationAggregate","timeGenerated","latestNotificationTimestamp","notebookItemId","message","data","fromJson","annotationId","annotation","getAnnotationById","sort","n1","n2","filter","isAmbient","dismissCode","dismissNotification","ambientNotifications","currentNotification","notificationAggregate","goToNodeId","ev","template","escapeToClose","undefined"],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\n\nclass VLEController {\n    constructor($scope,\n                $rootScope,\n                $filter,\n                $mdDialog,\n                $mdMenu,\n                $state,\n                AnnotationService,\n                ConfigService,\n                NotebookService,\n                NotificationService,\n                ProjectService,\n                SessionService,\n                StudentDataService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.$filter = $filter;\n        this.$mdDialog = $mdDialog;\n        this.$mdMenu = $mdMenu;\n        this.$state = $state;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.SessionService = SessionService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.$translate = this.$filter('translate');\n\n        this.workgroupId = this.ConfigService.getWorkgroupId();\n        this.currentNode = null;\n        this.pauseDialog = null;\n        this.noteDialog = null;\n\n        this.navFilters = this.ProjectService.getFilters();\n        this.navFilter = this.navFilters[0].name;\n\n        this.projectStyle = this.ProjectService.getStyle();\n        this.projectName = this.ProjectService.getProjectTitle();\n\n        // get the total score for the workgroup\n        this.totalScore = this.StudentDataService.getTotalScore();\n\n        // get the max score for the project\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        // get the notebook config\n        this.notebookConfig = this.NotebookService.getNotebookConfig();\n        // Get report, if enabled; assume only one report for now\n        this.reportItem = this.notebookConfig.itemTypes.report.notes[0];\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = this.StudentDataService.getCurrentNode();\n            var currentNodeId = currentNode.id;\n\n            this.StudentDataService.updateStackHistory(currentNodeId);\n            this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\n            this.StudentDataService.updateNodeStatuses();\n            this.StudentDataService.saveStudentStatus();\n            //this.AnnotationService.updateAnnotations();\n\n            this.$state.go('root.vle', {nodeId:currentNodeId});\n\n            var componentId, componentType, category, eventName, eventData, eventNodeId;\n            if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\n                // going from group to node or group to group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeExited\";\n                eventData = {\n                    nodeId: previousNode.id\n                };\n                eventNodeId = previousNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n\n            if (this.ProjectService.isGroupNode(currentNodeId)) {\n                // save nodeEntered event if this is a group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeEntered\";\n                eventData = {\n                    nodeId: currentNode.id\n                };\n                eventNodeId = currentNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n        });\n\n        this.notifications = this.NotificationService.notifications;\n        // watch for changes in notifications\n        this.$scope.$watch(\n            () => {\n                return this.NotificationService.notifications.length;\n            },\n            (newValue, oldValue) => {\n                this.notifications = this.NotificationService.notifications;\n                this.newNotifications = this.getNewNotifications();\n            }\n        );\n\n        this.$scope.$on('notificationChanged', (event, notification) => {\n            // update new notifications\n            this.notifications = this.NotificationService.notifications;\n            this.newNotifications = this.getNewNotifications();\n        });\n\n        this.$scope.$on('componentStudentDataChanged', () => {\n            this.StudentDataService.updateNodeStatuses();\n        });\n\n        // listen for the pause screen event\n        this.$scope.$on('pauseScreen', (event, args) => {\n            this.pauseScreen();\n        });\n\n        // listen for the unpause screen event\n        this.$scope.$on('unPauseScreen', (event, args) => {\n            this.unPauseScreen();\n        });\n\n        this.$scope.$on('requestImageCallback', (event, args) => {\n\n            // initialize the snippable items\n            if (this.snippableItems == null) {\n                this.snippableItems = [];\n            }\n\n            if (args.imageObject != null) {\n                // add the image object as a snippable item\n                this.snippableItems.push(args.imageObject);\n            }\n\n            if (args.imageObjects != null) {\n\n                // loop through the image objects\n                for (var i = 0; i < args.imageObjects.length; i++) {\n\n                    var imageObject = args.imageObjects[i];\n\n                    if (imageObject != null) {\n                        // add the image object as a snippable item\n                        this.snippableItems.push(imageObject);\n                    }\n                }\n            }\n        });\n\n        // Make sure if we drop something on the page we don't navigate away\n        // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\n        $(document.body).on('dragover', function(e) {\n            e.preventDefault();\n            return false;\n        });\n\n        $(document.body).on('drop', function(e){\n            e.preventDefault();\n            return false;\n        });\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\n\n        var nodeId = null;\n        var stateParams = null;\n        var stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            nodeId = stateParamNodeId;\n        } else {\n            /*\n             * get the node id for the latest node entered event for an active\n             * node that exists in the project\n             */\n            nodeId = this.StudentDataService.getLatestNodeEnteredEventNodeIdWithExistingNode();\n        }\n\n        if (nodeId == null || nodeId === '') {\n            nodeId = this.ProjectService.getStartNodeId();\n        }\n\n        this.StudentDataService.setCurrentNodeByNodeId(nodeId);\n\n        // get the run status to see if the period is currently paused\n        var runStatus = this.StudentDataService.getRunStatus();\n\n        if (runStatus != null) {\n            var pause = false;\n\n            // get the signed in user's period id\n            var periodId = this.ConfigService.getPeriodId();\n\n            if (periodId != null) {\n                var periods = runStatus.periods;\n\n                if (periods != null) {\n\n                    // loop through all the periods in the run status\n                    for (var p = 0; p < periods.length; p++) {\n                        var tempPeriod = periods[p];\n\n                        if (periodId === tempPeriod.periodId) {\n                            if (tempPeriod.paused) {\n                                // our period is paused so we will pause the screen\n                                pause = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (pause) {\n                this.pauseScreen();\n            }\n        }\n    }\n\n    isNotebookEnabled() {\n        return this.NotebookService.isNotebookEnabled();\n    }\n\n    // TODO: remove and use inline clipping (with guidance)\n    snipNewNote($event) {\n        // Ask all of the components on the page for snippable items\n        let templateUrl = this.themePath + '/notebook/contentSnipper.html';\n\n        let currentNodeId = this.StudentDataService.getCurrentNodeId();\n        let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\n\n        /*\n         * initialize the snippable items array that will become populated\n         * with snippable items\n         */\n        this.snippableItems = [];\n\n        for (let c = 0; c < currentComponents.length; c++) {\n            let currentComponent = currentComponents[c];\n            var args = {};\n            args.nodeId = currentNodeId;\n            args.componentId = currentComponent.id;\n\n            this.$rootScope.$broadcast('requestImage', args);\n        }\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            templateUrl: templateUrl,\n            clickOutsideToClose: true,\n            locals: {\n                snippableItems: this.snippableItems\n            },\n            controller: NotebookContentSnippetController,\n            controllerAs: 'notebookContentSnippetController',\n            bindToController: true\n        });\n        function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\n            $scope.NotebookService = NotebookService;\n            $scope.StudentDataService = StudentDataService;\n            $scope.ProjectService = ProjectService;\n            $scope.snippableItems = snippableItems;\n\n            // loop through the snippable items\n            for (var s = 0; s < snippableItems.length; s++) {\n                var snippableItem = snippableItems[s];\n\n                if (snippableItem != null) {\n                    /*\n                     * create a local browser URL for the snippable item so\n                     * we can display it as an image\n                     */\n                    snippableItem.url = URL.createObjectURL(snippableItem);\n                }\n            }\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n            $scope.chooseSnippet = (snippableItem) => {\n\n                // add the snippable item\n                $scope.NotebookService.addNewItem($event, snippableItem);\n\n                $mdDialog.hide();\n            };\n        }\n\n        NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\n    }\n\n    goHome() {\n        // save goHome event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"goHomeButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('goHome');\n    };\n\n    logOut() {\n        // save logOut event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"logOutButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    loadRoot() {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\n    };\n\n    /**\n     * The user moved the mouse on the page\n     */\n    mouseMoved() {\n        // tell the session service a mouse event occurred\n        // so it can reset the session timeout timers\n        this.SessionService.mouseEventOccurred();\n    };\n\n    /**\n     * Returns true iff there are new notifications\n     */\n    hasNewNotifications() {\n        return this.newNotifications.length > 0;\n    }\n\n    /**\n     * Returns true iff there are new notifications of type 'ambient'\n     */\n    hasNewAmbientNotifications() {\n        return this.getNewAmbientNotifications().length > 0;\n    }\n\n    /**\n     * Returns all notifications that have not been dismissed yet\n     * The newNotifications is an array of notification aggregate objects that looks like this:\n     * [\n     *  {\n     *    \"nodeId\": \"node2\",\n     *    \"type\": \"DiscussionReply\",   // [\"DiscussionReply\", \"teacherToStudent\"]\n     *    \"notifications\": [{ id: 1117} , { id: 1120 }]      // array of actual undismissed notifications with this nodeId and type\n     *  },\n     *  ...\n     * ]\n     * The annotation aggregates will be sorted by latest first -> oldest last\n     */\n    getNewNotifications() {\n        let newNotificationAggregates = [];\n        // get activeNotifications\n        for (let notification of this.notifications) {\n            if (notification.timeDismissed == null) {\n                // go through all the undimissed notifications and populate the newNotifications array\n                let notificationNodeId = notification.nodeId;\n                let notificationType = notification.type;\n                let newNotificationForNodeIdAndTypeExists = false;\n                for (let newNotificationAggregate of newNotificationAggregates) {\n                    if (newNotificationAggregate.nodeId == notificationNodeId && newNotificationAggregate.type == notificationType) {\n                        newNotificationForNodeIdAndTypeExists = true;\n                        newNotificationAggregate.notifications.push(notification);\n                        // update latestNotificationTimestamp if needed\n                        if (notification.timeGenerated > newNotificationAggregate.latestNotificationTimestamp) {\n                            newNotificationAggregate.latestNotificationTimestamp = notification.timeGenerated;\n                        }\n                    }\n                }\n                let notebookItemId = null;  // if this notification was created because teacher commented on a notebook report.\n                if (!newNotificationForNodeIdAndTypeExists) {\n                    let message = \"\";\n                    if (notificationType === \"DiscussionReply\") {\n                        message = this.$translate('newRepliesOnDiscussionPost');\n                    } else if (notificationType === \"teacherToStudent\") {\n                        message = this.$translate('newFeedbackFromTeacher');\n                        if (notification.data != null) {\n                            if (typeof notification.data === 'string') {\n                                notification.data = angular.fromJson(notification.data);\n                            }\n\n                            if (notification.data.annotationId != null) {\n                                let annotation = this.AnnotationService.getAnnotationById(notification.data.annotationId);\n                                if (annotation != null && annotation.notebookItemId != null) {\n                                    notebookItemId = annotation.notebookItemId;\n                                }\n                            }\n                        }\n                    } else if (notificationType === \"CRaterResult\") {\n                        message = this.$translate('newFeedback');\n                    }\n                    let newNotificationAggregate = {\n                        latestNotificationTimestamp: notification.timeGenerated,\n                        message: message,\n                        nodeId: notificationNodeId,\n                        notebookItemId: notebookItemId,\n                        notifications: [notification],\n                        type: notificationType\n                    };\n                    newNotificationAggregates.push(newNotificationAggregate);\n                }\n            }\n        }\n\n        // now sort the aggregates by latestNotificationTimestamp, latest -> oldest\n        newNotificationAggregates.sort((n1, n2) => {\n            return n2.latestNotificationTimestamp - n1.latestNotificationTimestamp;\n        });\n        return newNotificationAggregates;\n    }\n\n    /**\n     * Returns all ambient notifications that have not been dismissed yet\n     */\n    getNewAmbientNotifications() {\n        return this.notifications.filter(\n            function(notification) {\n                let isAmbient = notification.data ? notification.data.isAmbient : false;\n                return (notification.timeDismissed == null && isAmbient);\n            }\n        );\n    }\n\n    /**\n     * Dismiss the specified notification\n     * @param notification\n     */\n    dismissNotification(event, notification) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n            // no dismiss code needed, so we can dismiss it\n            this.NotificationService.dismissNotification(notification);\n        } else {\n            // ask user to input dimiss code before dimissing it\n            let args = {\n                event: event,\n                notification: notification\n            };\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n\n            // hide any open menus (i.e. the notifications menu)\n            this.$mdMenu.hide();\n        }\n    }\n\n    /**\n     * View the most recent ambient notification and allow teacher to input\n     * dismiss code\n     */\n    viewCurrentAmbientNotification(event) {\n        let ambientNotifications = this.getNewAmbientNotifications();\n        if (ambientNotifications.length) {\n            let currentNotification = ambientNotifications[0];\n            let args = {};\n            args.event = event;\n            args.notification = currentNotification;\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n        }\n    }\n\n    /**\n     * Dismiss the notification aggregate object, which effectively dismisses all notifications\n     * for the nodeId and type of the aggregate object.\n     * @param event\n     * @param notificationAggregate\n     */\n    dismissNotificationAggregate(event, notificationAggregate) {\n        if (notificationAggregate != null && notificationAggregate.notifications != null) {\n            for (let notification of notificationAggregate.notifications) {\n                this.dismissNotification(event, notification);\n            }\n        }\n    };\n\n    /**\n     * Dismiss the specified notification aggregate object and visit the node\n     * @param notificationAggregate, which contains nodeId, type, and notifications of that nodeId and type\n     */\n    dismissNotificationAggregateAndVisitNode(event, notificationAggregate) {\n        if (notificationAggregate != null && notificationAggregate.notifications != null) {\n            for (let notification of notificationAggregate.notifications) {\n                if (notification.data == null || notification.data.dismissCode == null) {\n                    // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\n                    this.dismissNotification(event, notification);\n                }\n            }\n        }\n\n        let goToNodeId = notificationAggregate.nodeId;\n        let notebookItemId = notificationAggregate.notebookItemId;\n        if (goToNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n        } else if (notebookItemId != null) {\n            // assume notification with notebookItemId is for the report for now,\n            // as we don't currently support annotations on notes\n\n            // show report annotations\n            this.$rootScope.$broadcast('showReportAnnotations', {ev: event});\n\n            /*let notebookItem = this.NotebookService.getNotebookItemByNotebookItemId(notebookItemId, this.workgroupId);\n            if (notebookItem != null) {\n\n\n                if (notebookItem.type === \"note\") {\n                    // open note view\n                    this.$rootScope.$broadcast('setNotebookFilter', {filter: \"note\", ev: event});\n                    this.$rootScope.$broadcast('toggleNotebook', {ev: event, open: true});\n                } else if (notebookItem.type === \"report\") {\n                    // open report view\n                    this.$rootScope.$broadcast('setNotebookFilter', {filter: \"report\", ev: event});\n                    this.$rootScope.$broadcast('toggleNotebook', {ev: event, open: true});\n                }\n            }*/\n        }\n    }\n\n    /**\n     * Pause the screen\n     */\n    pauseScreen() {\n        // TODO: i18n\n        this.pauseDialog = this.$mdDialog.show({\n            template: '<md-dialog aria-label=\"Screen Paused\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('yourTeacherHasPausedAllTheScreensInTheClass') + '</div></md-dialog-content></md-dialog>',\n            escapeToClose: false\n        });\n    }\n\n    /**\n     * Unpause the screen\n     */\n    unPauseScreen() {\n        this.$mdDialog.hide( this.pauseDialog, \"finished\" );\n        this.pauseDialog = undefined;\n    }\n}\n\nVLEController.$inject = [\n    '$scope',\n    '$rootScope',\n    '$filter',\n    '$mdDialog',\n    '$mdMenu',\n    '$state',\n    'AnnotationService',\n    'ConfigService',\n    'NotebookService',\n    'NotificationService',\n    'ProjectService',\n    'SessionService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default VLEController;\n"]}