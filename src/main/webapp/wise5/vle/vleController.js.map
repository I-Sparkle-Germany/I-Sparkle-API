{"version":3,"sources":["vleController.es6"],"names":["VLEController","$scope","$rootScope","$mdDialog","$mdMenu","$state","$translate","AnnotationService","ConfigService","NotebookService","NotificationService","ProjectService","SessionService","StudentDataService","UtilService","currentNode","pauseDialog","noteDialog","navFilters","getFilters","navFilter","name","projectStyle","getStyle","projectName","getProjectTitle","totalScore","getTotalScore","maxScore","getMaxScore","$on","event","args","previousNode","getCurrentNode","currentNodeId","id","updateStackHistory","updateVisitedNodesHistory","updateNodeStatuses","saveStudentStatus","go","nodeId","componentId","componentType","category","eventName","eventData","eventNodeId","isGroupNode","saveVLEEvent","notifications","$watch","length","newValue","oldValue","pauseScreen","unPauseScreen","snippableItems","imageObject","push","imageObjects","i","$","document","body","on","e","preventDefault","themePath","getThemePath","notebookItemPath","stateParams","stateParamNodeId","params","latestComponentState","getLatestComponentState","getStartNodeId","setCurrentNodeByNodeId","runStatus","getRunStatus","pause","periodId","getPeriodId","periods","p","tempPeriod","paused","isNotebookEnabled","$event","templateUrl","getCurrentNodeId","currentComponents","getComponentsByNodeId","c","currentComponent","$broadcast","show","parent","angular","element","targetEvent","clickOutsideToClose","locals","controller","NotebookContentSnippetController","controllerAs","bindToController","s","snippableItem","url","URL","createObjectURL","close","hide","chooseSnippet","addNewItem","$inject","endCurrentNodeAndSetCurrentNodeByNodeId","rootNode","mouseEventOccurred","getNewNotifications","getNewAmbientNotifications","filter","notification","timeDismissed","isAmbient","data","ev","then","translations","confirm","ariaLabel","dismissNotificationsTitle","textContent","dismissNotificationsMessage","ok","yes","cancel","no","dismissAllNotifications","newNotifications","map","newNotification","dismissCode","dismissNotification","ambientNotifications","currentNotification","goToNodeId","template","escapeToClose","undefined"],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\n\nclass VLEController {\n    constructor($scope,\n                $rootScope,\n                $mdDialog,\n                $mdMenu,\n                $state,\n                $translate,\n                AnnotationService,\n                ConfigService,\n                NotebookService,\n                NotificationService,\n                ProjectService,\n                SessionService,\n                StudentDataService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.$mdDialog = $mdDialog;\n        this.$mdMenu = $mdMenu;\n        this.$state = $state;\n        this.$translate = $translate;\n        this.AnnotationService = AnnotationService;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.SessionService = SessionService;\n        this.StudentDataService = StudentDataService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.pauseDialog = null;\n        this.noteDialog = null;\n\n        this.navFilters = this.ProjectService.getFilters();\n        this.navFilter = this.navFilters[0].name;\n\n        this.projectStyle = this.ProjectService.getStyle();\n        this.projectName = this.ProjectService.getProjectTitle();\n\n        // get the total score for the workgroup\n        this.totalScore = this.StudentDataService.getTotalScore();\n\n        // get the max score for the project\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = this.StudentDataService.getCurrentNode();\n            var currentNodeId = currentNode.id;\n\n            this.StudentDataService.updateStackHistory(currentNodeId);\n            this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\n            this.StudentDataService.updateNodeStatuses();\n            this.StudentDataService.saveStudentStatus();\n            //this.AnnotationService.updateAnnotations();\n\n            this.$state.go('root.vle', {nodeId:currentNodeId});\n\n            var componentId, componentType, category, eventName, eventData, eventNodeId;\n            if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\n                // going from group to node or group to group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeExited\";\n                eventData = {\n                    nodeId: previousNode.id\n                };\n                eventNodeId = previousNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n\n            if (this.ProjectService.isGroupNode(currentNodeId)) {\n                // save nodeEntered event if this is a group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeEntered\";\n                eventData = {\n                    nodeId: currentNode.id\n                };\n                eventNodeId = currentNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n        });\n\n        this.notifications = this.NotificationService.notifications;\n        // watch for changes in notifications\n        this.$scope.$watch(\n            () => {\n                return this.NotificationService.notifications.length;\n            },\n            (newValue, oldValue) => {\n                this.notifications = this.NotificationService.notifications;\n            }\n        );\n\n        this.$scope.$on('componentStudentDataChanged', () => {\n            this.StudentDataService.updateNodeStatuses();\n        });\n\n        // listen for the pause screen event\n        this.$scope.$on('pauseScreen', (event, args) => {\n            this.pauseScreen();\n        });\n\n        // listen for the unpause screen event\n        this.$scope.$on('unPauseScreen', (event, args) => {\n            this.unPauseScreen();\n        });\n\n        this.$scope.$on('requestImageCallback', (event, args) => {\n\n            // initialize the snippable items\n            if (this.snippableItems == null) {\n                this.snippableItems = [];\n            }\n\n            if (args.imageObject != null) {\n                // add the image object as a snippable item\n                this.snippableItems.push(args.imageObject);\n            }\n\n            if (args.imageObjects != null) {\n\n                // loop through the image objects\n                for (var i = 0; i < args.imageObjects.length; i++) {\n\n                    var imageObject = args.imageObjects[i];\n\n                    if (imageObject != null) {\n                        // add the image object as a snippable item\n                        this.snippableItems.push(imageObject);\n                    }\n                }\n            }\n        });\n\n        // Make sure if we drop something on the page we don't navigate away\n        // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\n        $(document.body).on('dragover', function(e) {\n            e.preventDefault();\n            return false;\n        });\n\n        $(document.body).on('drop', function(e){\n            e.preventDefault();\n            return false;\n        });\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\n\n        var nodeId = null;\n        var stateParams = null;\n        var stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            nodeId = stateParamNodeId;\n        } else {\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            if (latestComponentState != null) {\n                nodeId = latestComponentState.nodeId;\n            }\n        }\n\n        if (nodeId == null || nodeId === '') {\n            nodeId = this.ProjectService.getStartNodeId();\n        }\n\n        this.StudentDataService.setCurrentNodeByNodeId(nodeId);\n\n        // get the run status to see if the period is currently paused\n        var runStatus = this.StudentDataService.getRunStatus();\n\n        if (runStatus != null) {\n            var pause = false;\n\n            // get the signed in user's period id\n            var periodId = this.ConfigService.getPeriodId();\n\n            if (periodId != null) {\n                var periods = runStatus.periods;\n\n                if (periods != null) {\n\n                    // loop through all the periods in the run status\n                    for (var p = 0; p < periods.length; p++) {\n                        var tempPeriod = periods[p];\n\n                        if (periodId === tempPeriod.periodId) {\n                            if (tempPeriod.paused) {\n                                // our period is paused so we will pause the screen\n                                pause = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (pause) {\n                this.pauseScreen();\n            }\n        }\n    }\n\n    isNotebookEnabled() {\n        return this.NotebookService.isNotebookEnabled();\n    }\n\n    // TODO: remove and use inline clipping (with guidance)\n    snipNewNote($event) {\n        // Ask all of the components on the page for snippable items\n        let templateUrl = this.themePath + '/notebook/contentSnipper.html';\n\n        let currentNodeId = this.StudentDataService.getCurrentNodeId();\n        let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\n\n        /*\n         * initialize the snippable items array that will become populated\n         * with snippable items\n         */\n        this.snippableItems = [];\n\n        for (let c = 0; c < currentComponents.length; c++) {\n            let currentComponent = currentComponents[c];\n            var args = {};\n            args.nodeId = currentNodeId;\n            args.componentId = currentComponent.id;\n\n            this.$rootScope.$broadcast('requestImage', args);\n        }\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            templateUrl: templateUrl,\n            clickOutsideToClose: true,\n            locals: {\n                snippableItems: this.snippableItems\n            },\n            controller: NotebookContentSnippetController,\n            controllerAs: 'notebookContentSnippetController',\n            bindToController: true\n        });\n        function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\n            $scope.NotebookService = NotebookService;\n            $scope.StudentDataService = StudentDataService;\n            $scope.ProjectService = ProjectService;\n            $scope.snippableItems = snippableItems;\n\n            // loop through the snippable items\n            for (var s = 0; s < snippableItems.length; s++) {\n                var snippableItem = snippableItems[s];\n\n                if (snippableItem != null) {\n                    /*\n                     * create a local browser URL for the snippable item so\n                     * we can display it as an image\n                     */\n                    snippableItem.url = URL.createObjectURL(snippableItem);\n                }\n            }\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n            $scope.chooseSnippet = (snippableItem) => {\n\n                // add the snippable item\n                $scope.NotebookService.addNewItem($event, snippableItem);\n\n                $mdDialog.hide();\n            };\n        }\n\n        NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\n    }\n\n    goHome() {\n        // save goHome event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"goHomeButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('goHome');\n    };\n\n    logOut() {\n        // save logOut event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"logOutButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    loadRoot() {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\n    };\n\n    /**\n     * The user moved the mouse on the page\n     */\n    mouseMoved() {\n        // tell the session service a mouse event occurred\n        // so it can reset the session timeout timers\n        this.SessionService.mouseEventOccurred();\n    };\n\n    /**\n     * Returns true iff there are new notifications\n     */\n    hasNewNotifications() {\n        return this.getNewNotifications().length > 0;\n    }\n\n    /**\n     * Returns true iff there are new notifications of type 'ambient'\n     */\n    hasNewAmbientNotifications() {\n        return this.getNewAmbientNotifications().length > 0;\n    }\n\n    /**\n     * Returns all notifications that have not been dismissed yet\n     */\n    getNewNotifications() {\n        return this.notifications.filter(\n            function(notification) {\n                return notification.timeDismissed == null;\n            }\n        );\n    }\n\n    /**\n     * Returns all ambient notifications that have not been dismissed yet\n     */\n    getNewAmbientNotifications() {\n        return this.notifications.filter(\n            function(notification) {\n                let isAmbient = notification.data ? notification.data.isAmbient : false;\n                return (notification.timeDismissed == null && isAmbient);\n            }\n        );\n    }\n\n    /**\n     * Show confirmation dialog before dismissing all notifications\n     */\n    confirmDismissAllNotifications(ev) {\n        if (this.getNewNotifications().length > 1) {\n            this.$translate([\"dismissNotificationsTitle\", \"dismissNotificationsMessage\", \"yes\", \"no\"]).then((translations) => {\n\n                let confirm = this.$mdDialog.confirm()\n                    .parent(angular.element($('._md-open-menu-container._md-active')))// TODO: hack for now (showing md-dialog on top of md-menu)\n                    .ariaLabel(translations.dismissNotificationsTitle)\n                    .textContent(translations.dismissNotificationsMessage)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(confirm).then(() => {\n                    this.dismissAllNotifications(ev);\n                });\n            });\n        } else {\n            this.dismissAllNotifications(ev);\n        }\n    }\n\n    /**\n     * Dismiss all new notifications\n     */\n    dismissAllNotifications(ev) {\n        let newNotifications = this.getNewNotifications();\n        newNotifications.map((newNotification) => {\n            // only dismiss notifications that don't require a dismiss code\n            if (newNotification.data == null || newNotification.data.dismissCode == null) {\n                this.dismissNotification(ev, newNotification);\n            }\n        });\n    }\n\n    /**\n     * Dismiss the specified notification\n     * @param notification\n     */\n    dismissNotification(event, notification) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n            // no dismiss code needed, so we can dismiss it\n            this.NotificationService.dismissNotification(notification);\n        } else {\n            // ask user to input dimiss code before dimissing it\n            let args = {};\n            args.event = event;\n            args.notification = notification;\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n\n            // hide any open menus (i.e. the notifications menu)\n            this.$mdMenu.hide();\n        }\n    }\n\n    /**\n     * View the most recent ambient notification and allow teacher to input\n     * dismiss code\n     */\n    viewCurrentAmbientNotification(event) {\n        let ambientNotifications = this.getNewAmbientNotifications();\n        if (ambientNotifications.length) {\n            let currentNotification = ambientNotifications[0];\n            let args = {};\n            args.event = event;\n            args.notification = currentNotification;\n            this.$rootScope.$broadcast('viewCurrentAmbientNotification', args);\n        }\n    }\n\n    /**\n     * Dismiss the specified notification and visit the node\n     * @param nodeId\n     */\n    dismissNotificationAndVisitNode(event, notification) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n            // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\n            this.dismissNotification(event, notification);\n        }\n\n        let goToNodeId = notification.nodeId;\n        if (goToNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n        }\n    }\n\n    /**\n     * Pause the screen\n     */\n    pauseScreen() {\n        // TODO: i18n\n        this.pauseDialog = this.$mdDialog.show({\n            template: '<md-dialog aria-label=\"Screen Paused\"><md-dialog-content><div class=\"md-dialog-content\">Your teacher has paused all the screens in the class.</div></md-dialog-content></md-dialog>',\n            escapeToClose: false\n        });\n    }\n\n    /**\n     * Unpause the screen\n     */\n    unPauseScreen() {\n        this.$mdDialog.hide( this.pauseDialog, \"finished\" );\n        this.pauseDialog = undefined;\n    }\n}\n\nVLEController.$inject = [\n    '$scope',\n    '$rootScope',\n    '$mdDialog',\n    '$mdMenu',\n    '$state',\n    '$translate',\n    'AnnotationService',\n    'ConfigService',\n    'NotebookService',\n    'NotificationService',\n    'ProjectService',\n    'SessionService',\n    'StudentDataService',\n    'UtilService'\n];\n\nexport default VLEController;\n"]}