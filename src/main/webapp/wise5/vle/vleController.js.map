{"version":3,"sources":["vleController.es6"],"names":[],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\n\nclass VLEController {\n    constructor($scope,\n                $rootScope,\n                $mdDialog,\n                $state,\n                $translate,\n                ConfigService,\n                NotebookService,\n                NotificationService,\n                ProjectService,\n                SessionService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.$mdDialog = $mdDialog;\n        this.$state = $state;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.NotificationService = NotificationService;\n        this.ProjectService = ProjectService;\n        this.SessionService = SessionService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.pauseDialog = null;\n        this.noteDialog = null;\n\n        this.navFilters = this.ProjectService.getFilters();\n        this.navFilter = this.navFilters[0].name;\n\n        this.projectStyle = this.ProjectService.getStyle();\n        this.projectName = this.ProjectService.getProjectTitle();\n\n        // get the total score for the workgroup\n        this.totalScore = this.StudentDataService.getTotalScore();\n\n        // get the max score for the project\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = this.StudentDataService.getCurrentNode();\n            var currentNodeId = currentNode.id;\n\n            this.StudentDataService.updateStackHistory(currentNodeId);\n            this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\n            this.StudentDataService.updateNodeStatuses();\n\n            this.StudentWebSocketService.sendStudentStatus();  // TODO: change this so we POST the status and send websocket message from Controller.handlePOST on the server\n            this.$state.go('root.vle', {nodeId:currentNodeId});\n\n            var componentId, componentType, category, eventName, eventData, eventNodeId;\n            if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\n                // going from group to node or group to group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeExited\";\n                eventData = {\n                    nodeId: previousNode.id\n                };\n                eventNodeId = previousNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n\n            if (this.ProjectService.isGroupNode(currentNodeId)) {\n                // save nodeEntered event if this is a group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeEntered\";\n                eventData = {\n                    nodeId: currentNode.id\n                };\n                eventNodeId = currentNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n        });\n\n        this.notifications = this.NotificationService.notifications;\n        // watch for changes in notifications\n        this.$scope.$watch(\n            () => {\n                return this.NotificationService.notifications.length;\n            },\n            (newValue, oldValue) => {\n                this.notifications = this.NotificationService.notifications;\n            }\n        );\n\n        this.$scope.$on('componentStudentDataChanged', () => {\n            this.StudentDataService.updateNodeStatuses();\n        });\n\n        // listen for the pause screen event\n        this.$scope.$on('pauseScreen', (event, args) => {\n            this.pauseScreen();\n        });\n\n        // listen for the unpause screen event\n        this.$scope.$on('unPauseScreen', (event, args) => {\n            this.unPauseScreen();\n        });\n\n        this.$scope.$on('requestImageCallback', (event, args) => {\n\n            // initialize the snippable items\n            if (this.snippableItems == null) {\n                this.snippableItems = [];\n            }\n\n            if (args.imageObject != null) {\n                // add the image object as a snippable item\n                this.snippableItems.push(args.imageObject);\n            }\n\n            if (args.imageObjects != null) {\n\n                // loop through the image objects\n                for (var i = 0; i < args.imageObjects.length; i++) {\n\n                    var imageObject = args.imageObjects[i];\n\n                    if (imageObject != null) {\n                        // add the image object as a snippable item\n                        this.snippableItems.push(imageObject);\n                    }\n                }\n            }\n        });\n\n        // Make sure if we drop something on the page we don't navigate away\n        // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\n        $(document.body).on('dragover', function(e) {\n            e.preventDefault();\n            return false;\n        });\n\n        $(document.body).on('drop', function(e){\n            e.preventDefault();\n            return false;\n        });\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\n\n        var nodeId = null;\n        var stateParams = null;\n        var stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            nodeId = stateParamNodeId;\n        } else {\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            if (latestComponentState != null) {\n                nodeId = latestComponentState.nodeId;\n            }\n        }\n\n        if (nodeId == null || nodeId === '') {\n            nodeId = this.ProjectService.getStartNodeId();\n        }\n\n        this.StudentDataService.setCurrentNodeByNodeId(nodeId);\n\n        // get the run status to see if the period is currently paused\n        var runStatus = this.StudentDataService.getRunStatus();\n\n        if (runStatus != null) {\n            var pause = false;\n            if (runStatus.allPeriodsPaused) {\n                pause = true;\n            } else {\n                // get the signed in user's period id\n                var periodId = this.ConfigService.getPeriodId();\n\n                if (periodId != null) {\n                    var periods = runStatus.periods;\n\n                    if (periods != null) {\n\n                        // loop through all the periods in the run status\n                        for (var p = 0; p < periods.length; p++) {\n                            var tempPeriod = periods[p];\n\n                            if (periodId === tempPeriod.periodId) {\n                                if (tempPeriod.paused) {\n                                    // our period is paused so we will pause the screen\n                                    pause = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (pause) {\n                this.pauseScreen();\n            }\n        }\n    }\n\n    isNotebookEnabled() {\n        return this.NotebookService.isNotebookEnabled();\n    }\n\n    // TODO: remove and use inline clipping (with guidance)\n    snipNewNote($event) {\n        // Ask all of the components on the page for snippable items\n        let templateUrl = this.themePath + '/notebook/contentSnipper.html';\n\n        let currentNodeId = this.StudentDataService.getCurrentNodeId();\n        let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\n\n        /*\n         * initialize the snippable items array that will become populated\n         * with snippable items\n         */\n        this.snippableItems = [];\n\n        for (let c = 0; c < currentComponents.length; c++) {\n            let currentComponent = currentComponents[c];\n            var args = {};\n            args.nodeId = currentNodeId;\n            args.componentId = currentComponent.id;\n\n            this.$rootScope.$broadcast('requestImage', args);\n        }\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            templateUrl: templateUrl,\n            clickOutsideToClose: true,\n            locals: {\n                snippableItems: this.snippableItems\n            },\n            controller: NotebookContentSnippetController,\n            controllerAs: 'notebookContentSnippetController',\n            bindToController: true\n        });\n        function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\n            $scope.NotebookService = NotebookService;\n            $scope.StudentDataService = StudentDataService;\n            $scope.ProjectService = ProjectService;\n            $scope.snippableItems = snippableItems;\n\n            // loop through the snippable items\n            for (var s = 0; s < snippableItems.length; s++) {\n                var snippableItem = snippableItems[s];\n\n                if (snippableItem != null) {\n                    /*\n                     * create a local browser URL for the snippable item so\n                     * we can display it as an image\n                     */\n                    snippableItem.url = URL.createObjectURL(snippableItem);\n                }\n            }\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n            $scope.chooseSnippet = (snippableItem) => {\n\n                // add the snippable item\n                $scope.NotebookService.addNewItem($event, snippableItem);\n\n                $mdDialog.hide();\n            };\n        }\n\n        NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\n    }\n\n    goHome() {\n        // save goHome event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"goHomeButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('goHome');\n    };\n\n    logOut() {\n        // save logOut event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"logOutButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    loadRoot() {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\n    };\n\n    /**\n     * The user moved the mouse on the page\n     */\n    mouseMoved() {\n        // tell the session service a mouse event occurred\n        // so it can reset the session timeout timers\n        this.SessionService.mouseEventOccurred();\n    };\n\n    /**\n     * Returns true iff there are new notifications\n     */\n    hasNewNotifications() {\n        return this.getNewNotifications().length > 0;\n    }\n\n    /**\n     * Returns all notifications that have not been dismissed yet\n     */\n    getNewNotifications() {\n        return this.notifications.filter(\n            function(notification) {\n                return notification.timeDismissed == null;\n            }\n        );\n    }\n\n    /**\n     * Show confirmation dialog before dismissing all notifications\n     */\n    confirmDismissAllNotifications(ev) {\n        if (this.getNewNotifications().length > 1) {\n            this.$translate([\"dismissNotificationsTitle\", \"dismissNotificationsMessage\", \"yes\", \"no\"]).then((translations) => {\n\n                let confirm = this.$mdDialog.confirm()\n                    .parent(angular.element($('._md-open-menu-container._md-active')))// TODO: hack for now (showing md-dialog on top of md-menu)\n                    .ariaLabel(translations.dismissNotificationsTitle)\n                    .textContent(translations.dismissNotificationsMessage)\n                    .targetEvent(ev)\n                    .ok(translations.yes)\n                    .cancel(translations.no);\n\n                this.$mdDialog.show(confirm).then(() => {\n                    this.dismissAllNotifications(ev);\n                });\n            });\n        } else {\n            this.dismissAllNotifications(ev);\n        }\n    }\n\n    /**\n     * Dismiss all new notifications\n     */\n    dismissAllNotifications(ev) {\n        let newNotifications = this.getNewNotifications();\n        newNotifications.map((newNotification) => {\n            // only dismiss notifications that don't require a dismiss code\n            if (newNotification.data == null || newNotification.data.dismissCode == null) {\n                this.dismissNotification(ev, newNotification);\n            }\n        });\n    }\n\n    /**\n     * Dismiss the specified notification\n     * @param notification\n     */\n    dismissNotification(event, notification) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n            // no dismiss code needed, so we can dismiss it\n            this.NotificationService.dismissNotification(notification);\n        } else {\n            // ask user to input dimiss code before dimissing it.\n            this.$translate([\"dismissNotificationDismissCodeTitle\", \"dismissNotificationDismissCodeMessage\", \"ok\", \"cancel\"]).then((translations) => {\n                let dismissCodePrompt = {\n                    parent: angular.element($('._md-open-menu-container._md-active')),\n                    targetEvent: event,\n                    template: '<md-dialog>' +\n                                '  <md-dialog-content>' +\n                                '     <h5>Teacher Dismiss Code Required</h5>' +\n                                '     Dismiss Code: <input ng-model=\"dismissCodeInput\" type=\"password\"/>' +\n                                '     <div style=\"color:red\">{{message}}</div>' +\n                                '  </md-dialog-content>' +\n                                '  <md-dialog-actions>' +\n                                '    <md-button ng-click=\"checkDismissCode()\" class=\"md-primary\">' +\n                                '      Dismiss' +\n                                '    </md-button>' +\n                                '    <md-button ng-click=\"closeDialog()\" class=\"md-primary\">' +\n                                '      Cancel' +\n                                '    </md-button>' +\n                                '  </md-dialog-actions>' +\n                                '</md-dialog>',\n                    locals: {\n                        notification: notification\n                    },\n                    controller: DismissCodeDialogController\n                };\n                DismissCodeDialogController.$inject = ['$scope', '$mdDialog', '$translate', 'NotificationService', 'notification'];\n\n                function DismissCodeDialogController($scope, $mdDialog, $translate, NotificationService, notification) {\n                    $scope.dismissCodeInput = \"\";\n                    $scope.message = \"\";\n                    $scope.checkDismissCode = function() {\n                        if ($scope.dismissCodeInput == notification.data.dismissCode) {\n                            NotificationService.dismissNotification(notification);\n                            $mdDialog.hide();\n                        } else {\n                            $translate([\"dismissNotificationInvalidDismissCode\"]).then((translations) => {\n                                $scope.message = translations.dismissNotificationInvalidDismissCode;\n                            });\n                        }\n                    }\n                    $scope.closeDialog = function() {\n                        $mdDialog.hide();\n                    }\n                }\n\n                this.$mdDialog.show(dismissCodePrompt);\n            });\n        }\n    }\n\n    /**\n     * Dismiss the specified notification and visit the node\n     * @param nodeId\n     */\n    dismissNotificationAndVisitNode(event, notification) {\n        if (notification.data == null || notification.data.dismissCode == null) {\n            // only dismiss notifications that don't require a dismiss code, but still allow them to move to the node\n            this.dismissNotification(event, notification);\n        }\n\n        let goToNodeId = notification.nodeId;\n        if (goToNodeId != null) {\n            this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(goToNodeId);\n        }\n    }\n\n    /**\n     * Pause the screen\n     */\n    pauseScreen() {\n        // TODO: i18n\n        this.pauseDialog = this.$mdDialog.show({\n            template: '<md-dialog aria-label=\"Screen Paused\"><md-dialog-content><div class=\"md-dialog-content\">Your teacher has paused all the screens in the class.</div></md-dialog-content></md-dialog>',\n            fullscreen: true,\n            escapeToClose: false\n        });\n    }\n\n    /**\n     * Unpause the screen\n     */\n    unPauseScreen() {\n        this.$mdDialog.hide( this.pauseDialog, \"finished\" );\n        this.pauseDialog = undefined;\n    }\n\n    /**\n     * Snip an image from the VLE\n     * @param $event the click event from the student clicking on the image\n     */\n    snipImage($event) {\n\n        // get the target that was clicked\n        var imageElement = $event.target;\n\n        if (imageElement != null) {\n\n            // create an image object\n            var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n\n            if (imageObject != null) {\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            }\n        }\n    }\n}\n\nVLEController.$inject = [\n    '$scope',\n    '$rootScope',\n    '$mdDialog',\n    '$state',\n    '$translate',\n    'ConfigService',\n    'NotebookService',\n    'NotificationService',\n    'ProjectService',\n    'SessionService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default VLEController;\n"]}