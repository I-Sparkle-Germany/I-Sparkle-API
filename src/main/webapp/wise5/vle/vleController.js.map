{"version":3,"sources":["vleController.es6"],"names":[],"mappings":"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","file":"vleController.js","sourcesContent":["'use strict';\n\nclass VLEController {\n    constructor($scope,\n                $rootScope,\n                $mdDialog,\n                $state,\n                $translate,\n                ConfigService,\n                NotebookService,\n                ProjectService,\n                SessionService,\n                StudentDataService,\n                StudentWebSocketService,\n                UtilService) {\n\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.$mdDialog = $mdDialog;\n        this.$state = $state;\n        this.$translate = $translate;\n        this.ConfigService = ConfigService;\n        this.NotebookService = NotebookService;\n        this.ProjectService = ProjectService;\n        this.SessionService = SessionService;\n        this.StudentDataService = StudentDataService;\n        this.StudentWebSocketService = StudentWebSocketService;\n        this.UtilService = UtilService;\n\n        this.currentNode = null;\n        this.pauseDialog = null;\n        this.noteDialog = null;\n\n        this.navFilters = this.ProjectService.getFilters();\n        this.navFilter = this.navFilters[0].name;\n\n        this.projectStyle = this.ProjectService.getStyle();\n        this.projectName = this.ProjectService.getProjectTitle();\n\n        // get the total score for the workgroup\n        this.totalScore = this.StudentDataService.getTotalScore();\n\n        // get the max score for the project\n        this.maxScore = this.ProjectService.getMaxScore();\n\n        this.$scope.$on('currentNodeChanged', (event, args) => {\n            var previousNode = args.previousNode;\n            var currentNode = this.StudentDataService.getCurrentNode();\n            var currentNodeId = currentNode.id;\n\n            this.StudentDataService.updateStackHistory(currentNodeId);\n            this.StudentDataService.updateVisitedNodesHistory(currentNodeId);\n            this.StudentDataService.updateNodeStatuses();\n\n            this.StudentWebSocketService.sendStudentStatus();\n            this.$state.go('root.vle', {nodeId:currentNodeId});\n\n            var componentId, componentType, category, eventName, eventData, eventNodeId;\n            if (previousNode != null && this.ProjectService.isGroupNode(previousNode.id)) {\n                // going from group to node or group to group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeExited\";\n                eventData = {\n                    nodeId: previousNode.id\n                };\n                eventNodeId = previousNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n\n            if (this.ProjectService.isGroupNode(currentNodeId)) {\n                // save nodeEntered event if this is a group\n                componentId = null;\n                componentType = null;\n                category = \"Navigation\";\n                eventName = \"nodeEntered\";\n                eventData = {\n                    nodeId: currentNode.id\n                };\n                eventNodeId = currentNode.id;\n                this.StudentDataService.saveVLEEvent(eventNodeId, componentId, componentType, category, eventName, eventData);\n            }\n        });\n\n        this.$scope.$on('componentStudentDataChanged', () => {\n            this.StudentDataService.updateNodeStatuses();\n        });\n\n        // listen for the pause screen event\n        this.$scope.$on('pauseScreen', (event, args) => {\n            this.pauseScreen();\n        });\n\n        // listen for the unpause screen event\n        this.$scope.$on('unPauseScreen', (event, args) => {\n            this.unPauseScreen();\n        });\n\n        this.$scope.$on('requestImageCallback', (event, args) => {\n\n            // initialize the snippable items\n            if (this.snippableItems == null) {\n                this.snippableItems = [];\n            }\n\n            if (args.imageObject != null) {\n                // add the image object as a snippable item\n                this.snippableItems.push(args.imageObject);\n            }\n\n            if (args.imageObjects != null) {\n\n                // loop through the image objects\n                for (var i = 0; i < args.imageObjects.length; i++) {\n\n                    var imageObject = args.imageObjects[i];\n\n                    if (imageObject != null) {\n                        // add the image object as a snippable item\n                        this.snippableItems.push(imageObject);\n                    }\n                }\n            }\n        });\n\n        // Make sure if we drop something on the page we don't navigate away\n        // https://developer.mozilla.org/En/DragDrop/Drag_Operations#drop\n        $(document.body).on('dragover', function(e) {\n            e.preventDefault();\n            return false;\n        });\n\n        $(document.body).on('drop', function(e){\n            e.preventDefault();\n            return false;\n        });\n\n        this.themePath = this.ProjectService.getThemePath();\n        this.notebookItemPath = this.themePath + '/notebook/notebookItem.html';\n\n        var nodeId = null;\n        var stateParams = null;\n        var stateParamNodeId = null;\n\n        if (this.$state != null) {\n            stateParams = this.$state.params;\n        }\n\n        if (stateParams != null) {\n            stateParamNodeId = stateParams.nodeId;\n        }\n\n        if (stateParamNodeId != null && stateParamNodeId !== '') {\n            nodeId = stateParamNodeId;\n        } else {\n            var latestComponentState = this.StudentDataService.getLatestComponentState();\n\n            if (latestComponentState != null) {\n                nodeId = latestComponentState.nodeId;\n            }\n        }\n\n        if (nodeId == null || nodeId === '') {\n            nodeId = this.ProjectService.getStartNodeId();\n        }\n\n        this.StudentDataService.setCurrentNodeByNodeId(nodeId);\n\n        // get the run status to see if the period is currently paused\n        var runStatus = this.StudentDataService.getRunStatus();\n\n        if (runStatus != null) {\n            var pause = false;\n            if (runStatus.allPeriodsPaused) {\n                pause = true;\n            } else {\n                // get the signed in user's period id\n                var periodId = this.ConfigService.getPeriodId();\n\n                if (periodId != null) {\n                    var periods = runStatus.periods;\n\n                    if (periods != null) {\n\n                        // loop through all the periods in the run status\n                        for (var p = 0; p < periods.length; p++) {\n                            var tempPeriod = periods[p];\n\n                            if (periodId === tempPeriod.periodId) {\n                                if (tempPeriod.paused) {\n                                    // our period is paused so we will pause the screen\n                                    pause = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (pause) {\n                this.pauseScreen();\n            }\n        }\n    }\n\n    isNotebookEnabled() {\n        return this.NotebookService.isNotebookEnabled();\n    }\n\n    // TODO: remove and use inline clipping (with guidance)\n    snipNewNote($event) {\n        // Ask all of the components on the page for snippable items\n        let templateUrl = this.themePath + '/notebook/contentSnipper.html';\n\n        let currentNodeId = this.StudentDataService.getCurrentNodeId();\n        let currentComponents = this.ProjectService.getComponentsByNodeId(currentNodeId);\n\n        /*\n         * initialize the snippable items array that will become populated\n         * with snippable items\n         */\n        this.snippableItems = [];\n\n        for (let c = 0; c < currentComponents.length; c++) {\n            let currentComponent = currentComponents[c];\n            var args = {};\n            args.nodeId = currentNodeId;\n            args.componentId = currentComponent.id;\n\n            this.$rootScope.$broadcast('requestImage', args);\n        }\n        this.$mdDialog.show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            templateUrl: templateUrl,\n            clickOutsideToClose: true,\n            locals: {\n                snippableItems: this.snippableItems\n            },\n            controller: NotebookContentSnippetController,\n            controllerAs: 'notebookContentSnippetController',\n            bindToController: true\n        });\n        function NotebookContentSnippetController($rootScope, $scope, $mdDialog, snippableItems, NotebookService, StudentDataService, ProjectService) {\n            $scope.NotebookService = NotebookService;\n            $scope.StudentDataService = StudentDataService;\n            $scope.ProjectService = ProjectService;\n            $scope.snippableItems = snippableItems;\n\n            // loop through the snippable items\n            for (var s = 0; s < snippableItems.length; s++) {\n                var snippableItem = snippableItems[s];\n\n                if (snippableItem != null) {\n                    /*\n                     * create a local browser URL for the snippable item so\n                     * we can display it as an image\n                     */\n                    snippableItem.url = URL.createObjectURL(snippableItem);\n                }\n            }\n\n            $scope.close = () => {\n                $mdDialog.hide();\n            };\n            $scope.chooseSnippet = (snippableItem) => {\n\n                // add the snippable item\n                $scope.NotebookService.addNewItem($event, snippableItem);\n\n                $mdDialog.hide();\n            };\n        }\n\n        NotebookContentSnippetController.$inject = [\"$rootScope\", \"$scope\", \"$mdDialog\", \"snippableItems\", \"NotebookService\", \"StudentDataService\", \"ProjectService\"];\n    }\n\n    goHome() {\n        // save goHome event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"goHomeButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('goHome');\n    };\n\n    logOut() {\n        // save logOut event\n        var nodeId = null;\n        var componentId = null;\n        var componentType = null;\n        var category = \"Navigation\";\n        var event = \"logOutButtonClicked\";\n        var eventData = {};\n        this.StudentDataService.saveVLEEvent(nodeId, componentId, componentType, category, event, eventData);\n\n        this.$rootScope.$broadcast('logOut');\n    };\n\n    loadRoot() {\n        this.StudentDataService.endCurrentNodeAndSetCurrentNodeByNodeId(this.ProjectService.rootNode.id);\n    };\n\n    /**\n     * The user moved the mouse on the page\n     */\n    mouseMoved() {\n        // tell the session service a mouse event occurred\n        // so it can reset the session timeout timers\n        this.SessionService.mouseEventOccurred();\n    };\n\n    /**\n     * Pause the screen\n     */\n    pauseScreen() {\n        // TODO: i18n\n        this.pauseDialog = this.$mdDialog.show({\n            template: '<md-dialog aria-label=\"Screen Paused\"><md-toolbar><div class=\"md-toolbar-tools\"><h2>Screen Paused</h2></div></md-toolbar><md-dialog-content><div class=\"md-dialog-content\">Your teacher has paused all the screens in the class.</div></md-dialog-content></md-dialog>',\n            fullscreen: true,\n            escapeToClose: false\n        });\n    }\n\n    /**\n     * Unpause the screen\n     */\n    unPauseScreen() {\n        this.$mdDialog.hide( this.pauseDialog, \"finished\" );\n        this.pauseDialog = undefined;\n    }\n\n    /**\n     * Snip an image from the VLE\n     * @param $event the click event from the student clicking on the image\n     */\n    snipImage($event) {\n\n        // get the target that was clicked\n        var imageElement = $event.target;\n\n        if (imageElement != null) {\n\n            // create an image object\n            var imageObject = this.UtilService.getImageObjectFromImageElement(imageElement);\n\n            if (imageObject != null) {\n\n                // create a notebook item with the image populated into it\n                this.NotebookService.addNewItem($event, imageObject);\n            }\n        }\n    }\n}\n\nVLEController.$inject = [\n    '$scope',\n    '$rootScope',\n    '$mdDialog',\n    '$state',\n    '$translate',\n    'ConfigService',\n    'NotebookService',\n    'ProjectService',\n    'SessionService',\n    'StudentDataService',\n    'StudentWebSocketService',\n    'UtilService'\n];\n\nexport default VLEController;\n"]}